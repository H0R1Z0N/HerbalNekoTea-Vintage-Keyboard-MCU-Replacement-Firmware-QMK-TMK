   1              		.file	"triple_buffered_object_tests.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text._ZN7testing4Test13SetUpTestCaseEv,"axG",@progbits,_ZN7testing4Test13SetUpTestCaseEv
   5              		.weak	_ZN7testing4Test13SetUpTestCaseEv
   7              	_ZN7testing4Test13SetUpTestCaseEv:
   8              	.LFB4133:
   9              		.file 1 "quantum/serial_link/tests/gtest/gtest.h"
   1:quantum/serial_link/tests/gtest/gtest.h **** // Copyright 2005, Google Inc.
   2:quantum/serial_link/tests/gtest/gtest.h **** // All rights reserved.
   3:quantum/serial_link/tests/gtest/gtest.h **** //
   4:quantum/serial_link/tests/gtest/gtest.h **** // Redistribution and use in source and binary forms, with or without
   5:quantum/serial_link/tests/gtest/gtest.h **** // modification, are permitted provided that the following conditions are
   6:quantum/serial_link/tests/gtest/gtest.h **** // met:
   7:quantum/serial_link/tests/gtest/gtest.h **** //
   8:quantum/serial_link/tests/gtest/gtest.h **** //     * Redistributions of source code must retain the above copyright
   9:quantum/serial_link/tests/gtest/gtest.h **** // notice, this list of conditions and the following disclaimer.
  10:quantum/serial_link/tests/gtest/gtest.h **** //     * Redistributions in binary form must reproduce the above
  11:quantum/serial_link/tests/gtest/gtest.h **** // copyright notice, this list of conditions and the following disclaimer
  12:quantum/serial_link/tests/gtest/gtest.h **** // in the documentation and/or other materials provided with the
  13:quantum/serial_link/tests/gtest/gtest.h **** // distribution.
  14:quantum/serial_link/tests/gtest/gtest.h **** //     * Neither the name of Google Inc. nor the names of its
  15:quantum/serial_link/tests/gtest/gtest.h **** // contributors may be used to endorse or promote products derived from
  16:quantum/serial_link/tests/gtest/gtest.h **** // this software without specific prior written permission.
  17:quantum/serial_link/tests/gtest/gtest.h **** //
  18:quantum/serial_link/tests/gtest/gtest.h **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  19:quantum/serial_link/tests/gtest/gtest.h **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  20:quantum/serial_link/tests/gtest/gtest.h **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  21:quantum/serial_link/tests/gtest/gtest.h **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  22:quantum/serial_link/tests/gtest/gtest.h **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  23:quantum/serial_link/tests/gtest/gtest.h **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  24:quantum/serial_link/tests/gtest/gtest.h **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  25:quantum/serial_link/tests/gtest/gtest.h **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  26:quantum/serial_link/tests/gtest/gtest.h **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  27:quantum/serial_link/tests/gtest/gtest.h **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  28:quantum/serial_link/tests/gtest/gtest.h **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  29:quantum/serial_link/tests/gtest/gtest.h **** //
  30:quantum/serial_link/tests/gtest/gtest.h **** // Author: wan@google.com (Zhanyong Wan)
  31:quantum/serial_link/tests/gtest/gtest.h **** //
  32:quantum/serial_link/tests/gtest/gtest.h **** // The Google C++ Testing Framework (Google Test)
  33:quantum/serial_link/tests/gtest/gtest.h **** //
  34:quantum/serial_link/tests/gtest/gtest.h **** // This header file defines the public API for Google Test.  It should be
  35:quantum/serial_link/tests/gtest/gtest.h **** // included by any test program that uses Google Test.
  36:quantum/serial_link/tests/gtest/gtest.h **** //
  37:quantum/serial_link/tests/gtest/gtest.h **** // IMPORTANT NOTE: Due to limitation of the C++ language, we have to
  38:quantum/serial_link/tests/gtest/gtest.h **** // leave some internal implementation details in this header file.
  39:quantum/serial_link/tests/gtest/gtest.h **** // They are clearly marked by comments like this:
  40:quantum/serial_link/tests/gtest/gtest.h **** //
  41:quantum/serial_link/tests/gtest/gtest.h **** //   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
  42:quantum/serial_link/tests/gtest/gtest.h **** //
  43:quantum/serial_link/tests/gtest/gtest.h **** // Such code is NOT meant to be used by a user directly, and is subject
  44:quantum/serial_link/tests/gtest/gtest.h **** // to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user
  45:quantum/serial_link/tests/gtest/gtest.h **** // program!
  46:quantum/serial_link/tests/gtest/gtest.h **** //
  47:quantum/serial_link/tests/gtest/gtest.h **** // Acknowledgment: Google Test borrowed the idea of automatic test
  48:quantum/serial_link/tests/gtest/gtest.h **** // registration from Barthelemy Dagenais' (barthelemy@prologique.com)
  49:quantum/serial_link/tests/gtest/gtest.h **** // easyUnit framework.
  50:quantum/serial_link/tests/gtest/gtest.h **** 
  51:quantum/serial_link/tests/gtest/gtest.h **** #ifndef GTEST_INCLUDE_GTEST_GTEST_H_
  52:quantum/serial_link/tests/gtest/gtest.h **** #define GTEST_INCLUDE_GTEST_GTEST_H_
  53:quantum/serial_link/tests/gtest/gtest.h **** 
  54:quantum/serial_link/tests/gtest/gtest.h **** #include <limits>
  55:quantum/serial_link/tests/gtest/gtest.h **** #include <ostream>
  56:quantum/serial_link/tests/gtest/gtest.h **** #include <vector>
  57:quantum/serial_link/tests/gtest/gtest.h **** 
  58:quantum/serial_link/tests/gtest/gtest.h **** #include "./internal/gtest-internal.h"
  59:quantum/serial_link/tests/gtest/gtest.h **** #include "./internal/gtest-string.h"
  60:quantum/serial_link/tests/gtest/gtest.h **** #include "./gtest-death-test.h"
  61:quantum/serial_link/tests/gtest/gtest.h **** #include "./gtest-message.h"
  62:quantum/serial_link/tests/gtest/gtest.h **** #include "./gtest-param-test.h"
  63:quantum/serial_link/tests/gtest/gtest.h **** #include "./gtest-printers.h"
  64:quantum/serial_link/tests/gtest/gtest.h **** #include "./gtest_prod.h"
  65:quantum/serial_link/tests/gtest/gtest.h **** #include "./gtest-test-part.h"
  66:quantum/serial_link/tests/gtest/gtest.h **** #include "./gtest-typed-test.h"
  67:quantum/serial_link/tests/gtest/gtest.h **** 
  68:quantum/serial_link/tests/gtest/gtest.h **** // Depending on the platform, different string classes are available.
  69:quantum/serial_link/tests/gtest/gtest.h **** // On Linux, in addition to ::std::string, Google also makes use of
  70:quantum/serial_link/tests/gtest/gtest.h **** // class ::string, which has the same interface as ::std::string, but
  71:quantum/serial_link/tests/gtest/gtest.h **** // has a different implementation.
  72:quantum/serial_link/tests/gtest/gtest.h **** //
  73:quantum/serial_link/tests/gtest/gtest.h **** // You can define GTEST_HAS_GLOBAL_STRING to 1 to indicate that
  74:quantum/serial_link/tests/gtest/gtest.h **** // ::string is available AND is a distinct type to ::std::string, or
  75:quantum/serial_link/tests/gtest/gtest.h **** // define it to 0 to indicate otherwise.
  76:quantum/serial_link/tests/gtest/gtest.h **** //
  77:quantum/serial_link/tests/gtest/gtest.h **** // If ::std::string and ::string are the same class on your platform
  78:quantum/serial_link/tests/gtest/gtest.h **** // due to aliasing, you should define GTEST_HAS_GLOBAL_STRING to 0.
  79:quantum/serial_link/tests/gtest/gtest.h **** //
  80:quantum/serial_link/tests/gtest/gtest.h **** // If you do not define GTEST_HAS_GLOBAL_STRING, it is defined
  81:quantum/serial_link/tests/gtest/gtest.h **** // heuristically.
  82:quantum/serial_link/tests/gtest/gtest.h **** 
  83:quantum/serial_link/tests/gtest/gtest.h **** namespace testing {
  84:quantum/serial_link/tests/gtest/gtest.h **** 
  85:quantum/serial_link/tests/gtest/gtest.h **** // Declares the flags.
  86:quantum/serial_link/tests/gtest/gtest.h **** 
  87:quantum/serial_link/tests/gtest/gtest.h **** // This flag temporary enables the disabled tests.
  88:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(also_run_disabled_tests);
  89:quantum/serial_link/tests/gtest/gtest.h **** 
  90:quantum/serial_link/tests/gtest/gtest.h **** // This flag brings the debugger on an assertion failure.
  91:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(break_on_failure);
  92:quantum/serial_link/tests/gtest/gtest.h **** 
  93:quantum/serial_link/tests/gtest/gtest.h **** // This flag controls whether Google Test catches all test-thrown exceptions
  94:quantum/serial_link/tests/gtest/gtest.h **** // and logs them as failures.
  95:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(catch_exceptions);
  96:quantum/serial_link/tests/gtest/gtest.h **** 
  97:quantum/serial_link/tests/gtest/gtest.h **** // This flag enables using colors in terminal output. Available values are
  98:quantum/serial_link/tests/gtest/gtest.h **** // "yes" to enable colors, "no" (disable colors), or "auto" (the default)
  99:quantum/serial_link/tests/gtest/gtest.h **** // to let Google Test decide.
 100:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_string_(color);
 101:quantum/serial_link/tests/gtest/gtest.h **** 
 102:quantum/serial_link/tests/gtest/gtest.h **** // This flag sets up the filter to select by name using a glob pattern
 103:quantum/serial_link/tests/gtest/gtest.h **** // the tests to run. If the filter is not given all tests are executed.
 104:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_string_(filter);
 105:quantum/serial_link/tests/gtest/gtest.h **** 
 106:quantum/serial_link/tests/gtest/gtest.h **** // This flag causes the Google Test to list tests. None of the tests listed
 107:quantum/serial_link/tests/gtest/gtest.h **** // are actually run if the flag is provided.
 108:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(list_tests);
 109:quantum/serial_link/tests/gtest/gtest.h **** 
 110:quantum/serial_link/tests/gtest/gtest.h **** // This flag controls whether Google Test emits a detailed XML report to a file
 111:quantum/serial_link/tests/gtest/gtest.h **** // in addition to its normal textual output.
 112:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_string_(output);
 113:quantum/serial_link/tests/gtest/gtest.h **** 
 114:quantum/serial_link/tests/gtest/gtest.h **** // This flags control whether Google Test prints the elapsed time for each
 115:quantum/serial_link/tests/gtest/gtest.h **** // test.
 116:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(print_time);
 117:quantum/serial_link/tests/gtest/gtest.h **** 
 118:quantum/serial_link/tests/gtest/gtest.h **** // This flag specifies the random number seed.
 119:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_int32_(random_seed);
 120:quantum/serial_link/tests/gtest/gtest.h **** 
 121:quantum/serial_link/tests/gtest/gtest.h **** // This flag sets how many times the tests are repeated. The default value
 122:quantum/serial_link/tests/gtest/gtest.h **** // is 1. If the value is -1 the tests are repeating forever.
 123:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_int32_(repeat);
 124:quantum/serial_link/tests/gtest/gtest.h **** 
 125:quantum/serial_link/tests/gtest/gtest.h **** // This flag controls whether Google Test includes Google Test internal
 126:quantum/serial_link/tests/gtest/gtest.h **** // stack frames in failure stack traces.
 127:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(show_internal_stack_frames);
 128:quantum/serial_link/tests/gtest/gtest.h **** 
 129:quantum/serial_link/tests/gtest/gtest.h **** // When this flag is specified, tests' order is randomized on every iteration.
 130:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(shuffle);
 131:quantum/serial_link/tests/gtest/gtest.h **** 
 132:quantum/serial_link/tests/gtest/gtest.h **** // This flag specifies the maximum number of stack frames to be
 133:quantum/serial_link/tests/gtest/gtest.h **** // printed in a failure message.
 134:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_int32_(stack_trace_depth);
 135:quantum/serial_link/tests/gtest/gtest.h **** 
 136:quantum/serial_link/tests/gtest/gtest.h **** // When this flag is specified, a failed assertion will throw an
 137:quantum/serial_link/tests/gtest/gtest.h **** // exception if exceptions are enabled, or exit the program with a
 138:quantum/serial_link/tests/gtest/gtest.h **** // non-zero code otherwise.
 139:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_bool_(throw_on_failure);
 140:quantum/serial_link/tests/gtest/gtest.h **** 
 141:quantum/serial_link/tests/gtest/gtest.h **** // When this flag is set with a "host:port" string, on supported
 142:quantum/serial_link/tests/gtest/gtest.h **** // platforms test results are streamed to the specified port on
 143:quantum/serial_link/tests/gtest/gtest.h **** // the specified host machine.
 144:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DECLARE_string_(stream_result_to);
 145:quantum/serial_link/tests/gtest/gtest.h **** 
 146:quantum/serial_link/tests/gtest/gtest.h **** // The upper limit for valid stack trace depths.
 147:quantum/serial_link/tests/gtest/gtest.h **** const int kMaxStackTraceDepth = 100;
 148:quantum/serial_link/tests/gtest/gtest.h **** 
 149:quantum/serial_link/tests/gtest/gtest.h **** namespace internal {
 150:quantum/serial_link/tests/gtest/gtest.h **** 
 151:quantum/serial_link/tests/gtest/gtest.h **** class AssertHelper;
 152:quantum/serial_link/tests/gtest/gtest.h **** class DefaultGlobalTestPartResultReporter;
 153:quantum/serial_link/tests/gtest/gtest.h **** class ExecDeathTest;
 154:quantum/serial_link/tests/gtest/gtest.h **** class NoExecDeathTest;
 155:quantum/serial_link/tests/gtest/gtest.h **** class FinalSuccessChecker;
 156:quantum/serial_link/tests/gtest/gtest.h **** class GTestFlagSaver;
 157:quantum/serial_link/tests/gtest/gtest.h **** class StreamingListenerTest;
 158:quantum/serial_link/tests/gtest/gtest.h **** class TestResultAccessor;
 159:quantum/serial_link/tests/gtest/gtest.h **** class TestEventListenersAccessor;
 160:quantum/serial_link/tests/gtest/gtest.h **** class TestEventRepeater;
 161:quantum/serial_link/tests/gtest/gtest.h **** class UnitTestRecordPropertyTestHelper;
 162:quantum/serial_link/tests/gtest/gtest.h **** class WindowsDeathTest;
 163:quantum/serial_link/tests/gtest/gtest.h **** class UnitTestImpl* GetUnitTestImpl();
 164:quantum/serial_link/tests/gtest/gtest.h **** void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
 165:quantum/serial_link/tests/gtest/gtest.h ****                                     const std::string& message);
 166:quantum/serial_link/tests/gtest/gtest.h **** 
 167:quantum/serial_link/tests/gtest/gtest.h **** }  // namespace internal
 168:quantum/serial_link/tests/gtest/gtest.h **** 
 169:quantum/serial_link/tests/gtest/gtest.h **** // The friend relationship of some of these classes is cyclic.
 170:quantum/serial_link/tests/gtest/gtest.h **** // If we don't forward declare them the compiler might confuse the classes
 171:quantum/serial_link/tests/gtest/gtest.h **** // in friendship clauses with same named classes on the scope.
 172:quantum/serial_link/tests/gtest/gtest.h **** class Test;
 173:quantum/serial_link/tests/gtest/gtest.h **** class TestCase;
 174:quantum/serial_link/tests/gtest/gtest.h **** class TestInfo;
 175:quantum/serial_link/tests/gtest/gtest.h **** class UnitTest;
 176:quantum/serial_link/tests/gtest/gtest.h **** 
 177:quantum/serial_link/tests/gtest/gtest.h **** // A class for indicating whether an assertion was successful.  When
 178:quantum/serial_link/tests/gtest/gtest.h **** // the assertion wasn't successful, the AssertionResult object
 179:quantum/serial_link/tests/gtest/gtest.h **** // remembers a non-empty message that describes how it failed.
 180:quantum/serial_link/tests/gtest/gtest.h **** //
 181:quantum/serial_link/tests/gtest/gtest.h **** // To create an instance of this class, use one of the factory functions
 182:quantum/serial_link/tests/gtest/gtest.h **** // (AssertionSuccess() and AssertionFailure()).
 183:quantum/serial_link/tests/gtest/gtest.h **** //
 184:quantum/serial_link/tests/gtest/gtest.h **** // This class is useful for two purposes:
 185:quantum/serial_link/tests/gtest/gtest.h **** //   1. Defining predicate functions to be used with Boolean test assertions
 186:quantum/serial_link/tests/gtest/gtest.h **** //      EXPECT_TRUE/EXPECT_FALSE and their ASSERT_ counterparts
 187:quantum/serial_link/tests/gtest/gtest.h **** //   2. Defining predicate-format functions to be
 188:quantum/serial_link/tests/gtest/gtest.h **** //      used with predicate assertions (ASSERT_PRED_FORMAT*, etc).
 189:quantum/serial_link/tests/gtest/gtest.h **** //
 190:quantum/serial_link/tests/gtest/gtest.h **** // For example, if you define IsEven predicate:
 191:quantum/serial_link/tests/gtest/gtest.h **** //
 192:quantum/serial_link/tests/gtest/gtest.h **** //   testing::AssertionResult IsEven(int n) {
 193:quantum/serial_link/tests/gtest/gtest.h **** //     if ((n % 2) == 0)
 194:quantum/serial_link/tests/gtest/gtest.h **** //       return testing::AssertionSuccess();
 195:quantum/serial_link/tests/gtest/gtest.h **** //     else
 196:quantum/serial_link/tests/gtest/gtest.h **** //       return testing::AssertionFailure() << n << " is odd";
 197:quantum/serial_link/tests/gtest/gtest.h **** //   }
 198:quantum/serial_link/tests/gtest/gtest.h **** //
 199:quantum/serial_link/tests/gtest/gtest.h **** // Then the failed expectation EXPECT_TRUE(IsEven(Fib(5)))
 200:quantum/serial_link/tests/gtest/gtest.h **** // will print the message
 201:quantum/serial_link/tests/gtest/gtest.h **** //
 202:quantum/serial_link/tests/gtest/gtest.h **** //   Value of: IsEven(Fib(5))
 203:quantum/serial_link/tests/gtest/gtest.h **** //     Actual: false (5 is odd)
 204:quantum/serial_link/tests/gtest/gtest.h **** //   Expected: true
 205:quantum/serial_link/tests/gtest/gtest.h **** //
 206:quantum/serial_link/tests/gtest/gtest.h **** // instead of a more opaque
 207:quantum/serial_link/tests/gtest/gtest.h **** //
 208:quantum/serial_link/tests/gtest/gtest.h **** //   Value of: IsEven(Fib(5))
 209:quantum/serial_link/tests/gtest/gtest.h **** //     Actual: false
 210:quantum/serial_link/tests/gtest/gtest.h **** //   Expected: true
 211:quantum/serial_link/tests/gtest/gtest.h **** //
 212:quantum/serial_link/tests/gtest/gtest.h **** // in case IsEven is a simple Boolean predicate.
 213:quantum/serial_link/tests/gtest/gtest.h **** //
 214:quantum/serial_link/tests/gtest/gtest.h **** // If you expect your predicate to be reused and want to support informative
 215:quantum/serial_link/tests/gtest/gtest.h **** // messages in EXPECT_FALSE and ASSERT_FALSE (negative assertions show up
 216:quantum/serial_link/tests/gtest/gtest.h **** // about half as often as positive ones in our tests), supply messages for
 217:quantum/serial_link/tests/gtest/gtest.h **** // both success and failure cases:
 218:quantum/serial_link/tests/gtest/gtest.h **** //
 219:quantum/serial_link/tests/gtest/gtest.h **** //   testing::AssertionResult IsEven(int n) {
 220:quantum/serial_link/tests/gtest/gtest.h **** //     if ((n % 2) == 0)
 221:quantum/serial_link/tests/gtest/gtest.h **** //       return testing::AssertionSuccess() << n << " is even";
 222:quantum/serial_link/tests/gtest/gtest.h **** //     else
 223:quantum/serial_link/tests/gtest/gtest.h **** //       return testing::AssertionFailure() << n << " is odd";
 224:quantum/serial_link/tests/gtest/gtest.h **** //   }
 225:quantum/serial_link/tests/gtest/gtest.h **** //
 226:quantum/serial_link/tests/gtest/gtest.h **** // Then a statement EXPECT_FALSE(IsEven(Fib(6))) will print
 227:quantum/serial_link/tests/gtest/gtest.h **** //
 228:quantum/serial_link/tests/gtest/gtest.h **** //   Value of: IsEven(Fib(6))
 229:quantum/serial_link/tests/gtest/gtest.h **** //     Actual: true (8 is even)
 230:quantum/serial_link/tests/gtest/gtest.h **** //   Expected: false
 231:quantum/serial_link/tests/gtest/gtest.h **** //
 232:quantum/serial_link/tests/gtest/gtest.h **** // NB: Predicates that support negative Boolean assertions have reduced
 233:quantum/serial_link/tests/gtest/gtest.h **** // performance in positive ones so be careful not to use them in tests
 234:quantum/serial_link/tests/gtest/gtest.h **** // that have lots (tens of thousands) of positive Boolean assertions.
 235:quantum/serial_link/tests/gtest/gtest.h **** //
 236:quantum/serial_link/tests/gtest/gtest.h **** // To use this class with EXPECT_PRED_FORMAT assertions such as:
 237:quantum/serial_link/tests/gtest/gtest.h **** //
 238:quantum/serial_link/tests/gtest/gtest.h **** //   // Verifies that Foo() returns an even number.
 239:quantum/serial_link/tests/gtest/gtest.h **** //   EXPECT_PRED_FORMAT1(IsEven, Foo());
 240:quantum/serial_link/tests/gtest/gtest.h **** //
 241:quantum/serial_link/tests/gtest/gtest.h **** // you need to define:
 242:quantum/serial_link/tests/gtest/gtest.h **** //
 243:quantum/serial_link/tests/gtest/gtest.h **** //   testing::AssertionResult IsEven(const char* expr, int n) {
 244:quantum/serial_link/tests/gtest/gtest.h **** //     if ((n % 2) == 0)
 245:quantum/serial_link/tests/gtest/gtest.h **** //       return testing::AssertionSuccess();
 246:quantum/serial_link/tests/gtest/gtest.h **** //     else
 247:quantum/serial_link/tests/gtest/gtest.h **** //       return testing::AssertionFailure()
 248:quantum/serial_link/tests/gtest/gtest.h **** //         << "Expected: " << expr << " is even\n  Actual: it's " << n;
 249:quantum/serial_link/tests/gtest/gtest.h **** //   }
 250:quantum/serial_link/tests/gtest/gtest.h **** //
 251:quantum/serial_link/tests/gtest/gtest.h **** // If Foo() returns 5, you will see the following message:
 252:quantum/serial_link/tests/gtest/gtest.h **** //
 253:quantum/serial_link/tests/gtest/gtest.h **** //   Expected: Foo() is even
 254:quantum/serial_link/tests/gtest/gtest.h **** //     Actual: it's 5
 255:quantum/serial_link/tests/gtest/gtest.h **** //
 256:quantum/serial_link/tests/gtest/gtest.h **** class GTEST_API_ AssertionResult {
 257:quantum/serial_link/tests/gtest/gtest.h ****  public:
 258:quantum/serial_link/tests/gtest/gtest.h ****   // Copy constructor.
 259:quantum/serial_link/tests/gtest/gtest.h ****   // Used in EXPECT_TRUE/FALSE(assertion_result).
 260:quantum/serial_link/tests/gtest/gtest.h ****   AssertionResult(const AssertionResult& other);
 261:quantum/serial_link/tests/gtest/gtest.h **** 
 262:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 /* forcing value to bool */)
 263:quantum/serial_link/tests/gtest/gtest.h **** 
 264:quantum/serial_link/tests/gtest/gtest.h ****   // Used in the EXPECT_TRUE/FALSE(bool_expression).
 265:quantum/serial_link/tests/gtest/gtest.h ****   //
 266:quantum/serial_link/tests/gtest/gtest.h ****   // T must be contextually convertible to bool.
 267:quantum/serial_link/tests/gtest/gtest.h ****   //
 268:quantum/serial_link/tests/gtest/gtest.h ****   // The second parameter prevents this overload from being considered if
 269:quantum/serial_link/tests/gtest/gtest.h ****   // the argument is implicitly convertible to AssertionResult. In that case
 270:quantum/serial_link/tests/gtest/gtest.h ****   // we want AssertionResult's copy constructor to be used.
 271:quantum/serial_link/tests/gtest/gtest.h ****   template <typename T>
 272:quantum/serial_link/tests/gtest/gtest.h ****   explicit AssertionResult(
 273:quantum/serial_link/tests/gtest/gtest.h ****       const T& success,
 274:quantum/serial_link/tests/gtest/gtest.h ****       typename internal::EnableIf<
 275:quantum/serial_link/tests/gtest/gtest.h ****           !internal::ImplicitlyConvertible<T, AssertionResult>::value>::type*
 276:quantum/serial_link/tests/gtest/gtest.h ****           /*enabler*/ = NULL)
 277:quantum/serial_link/tests/gtest/gtest.h ****       : success_(success) {}
 278:quantum/serial_link/tests/gtest/gtest.h **** 
 279:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISABLE_MSC_WARNINGS_POP_()
 280:quantum/serial_link/tests/gtest/gtest.h **** 
 281:quantum/serial_link/tests/gtest/gtest.h ****   // Assignment operator.
 282:quantum/serial_link/tests/gtest/gtest.h ****   AssertionResult& operator=(AssertionResult other) {
 283:quantum/serial_link/tests/gtest/gtest.h ****     swap(other);
 284:quantum/serial_link/tests/gtest/gtest.h ****     return *this;
 285:quantum/serial_link/tests/gtest/gtest.h ****   }
 286:quantum/serial_link/tests/gtest/gtest.h **** 
 287:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the assertion succeeded.
 288:quantum/serial_link/tests/gtest/gtest.h ****   operator bool() const { return success_; }  // NOLINT
 289:quantum/serial_link/tests/gtest/gtest.h **** 
 290:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
 291:quantum/serial_link/tests/gtest/gtest.h ****   AssertionResult operator!() const;
 292:quantum/serial_link/tests/gtest/gtest.h **** 
 293:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the text streamed into this AssertionResult. Test assertions
 294:quantum/serial_link/tests/gtest/gtest.h ****   // use it when they fail (i.e., the predicate's outcome doesn't match the
 295:quantum/serial_link/tests/gtest/gtest.h ****   // assertion's expectation). When nothing has been streamed into the
 296:quantum/serial_link/tests/gtest/gtest.h ****   // object, returns an empty string.
 297:quantum/serial_link/tests/gtest/gtest.h ****   const char* message() const {
 298:quantum/serial_link/tests/gtest/gtest.h ****     return message_.get() != NULL ?  message_->c_str() : "";
 299:quantum/serial_link/tests/gtest/gtest.h ****   }
 300:quantum/serial_link/tests/gtest/gtest.h ****   // TODO(vladl@google.com): Remove this after making sure no clients use it.
 301:quantum/serial_link/tests/gtest/gtest.h ****   // Deprecated; please use message() instead.
 302:quantum/serial_link/tests/gtest/gtest.h ****   const char* failure_message() const { return message(); }
 303:quantum/serial_link/tests/gtest/gtest.h **** 
 304:quantum/serial_link/tests/gtest/gtest.h ****   // Streams a custom failure message into this object.
 305:quantum/serial_link/tests/gtest/gtest.h ****   template <typename T> AssertionResult& operator<<(const T& value) {
 306:quantum/serial_link/tests/gtest/gtest.h ****     AppendMessage(Message() << value);
 307:quantum/serial_link/tests/gtest/gtest.h ****     return *this;
 308:quantum/serial_link/tests/gtest/gtest.h ****   }
 309:quantum/serial_link/tests/gtest/gtest.h **** 
 310:quantum/serial_link/tests/gtest/gtest.h ****   // Allows streaming basic output manipulators such as endl or flush into
 311:quantum/serial_link/tests/gtest/gtest.h ****   // this object.
 312:quantum/serial_link/tests/gtest/gtest.h ****   AssertionResult& operator<<(
 313:quantum/serial_link/tests/gtest/gtest.h ****       ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {
 314:quantum/serial_link/tests/gtest/gtest.h ****     AppendMessage(Message() << basic_manipulator);
 315:quantum/serial_link/tests/gtest/gtest.h ****     return *this;
 316:quantum/serial_link/tests/gtest/gtest.h ****   }
 317:quantum/serial_link/tests/gtest/gtest.h **** 
 318:quantum/serial_link/tests/gtest/gtest.h ****  private:
 319:quantum/serial_link/tests/gtest/gtest.h ****   // Appends the contents of message to message_.
 320:quantum/serial_link/tests/gtest/gtest.h ****   void AppendMessage(const Message& a_message) {
 321:quantum/serial_link/tests/gtest/gtest.h ****     if (message_.get() == NULL)
 322:quantum/serial_link/tests/gtest/gtest.h ****       message_.reset(new ::std::string);
 323:quantum/serial_link/tests/gtest/gtest.h ****     message_->append(a_message.GetString().c_str());
 324:quantum/serial_link/tests/gtest/gtest.h ****   }
 325:quantum/serial_link/tests/gtest/gtest.h **** 
 326:quantum/serial_link/tests/gtest/gtest.h ****   // Swap the contents of this AssertionResult with other.
 327:quantum/serial_link/tests/gtest/gtest.h ****   void swap(AssertionResult& other);
 328:quantum/serial_link/tests/gtest/gtest.h **** 
 329:quantum/serial_link/tests/gtest/gtest.h ****   // Stores result of the assertion predicate.
 330:quantum/serial_link/tests/gtest/gtest.h ****   bool success_;
 331:quantum/serial_link/tests/gtest/gtest.h ****   // Stores the message describing the condition in case the expectation
 332:quantum/serial_link/tests/gtest/gtest.h ****   // construct is not satisfied with the predicate's outcome.
 333:quantum/serial_link/tests/gtest/gtest.h ****   // Referenced via a pointer to avoid taking too much stack frame space
 334:quantum/serial_link/tests/gtest/gtest.h ****   // with test assertions.
 335:quantum/serial_link/tests/gtest/gtest.h ****   internal::scoped_ptr< ::std::string> message_;
 336:quantum/serial_link/tests/gtest/gtest.h **** };
 337:quantum/serial_link/tests/gtest/gtest.h **** 
 338:quantum/serial_link/tests/gtest/gtest.h **** // Makes a successful assertion result.
 339:quantum/serial_link/tests/gtest/gtest.h **** GTEST_API_ AssertionResult AssertionSuccess();
 340:quantum/serial_link/tests/gtest/gtest.h **** 
 341:quantum/serial_link/tests/gtest/gtest.h **** // Makes a failed assertion result.
 342:quantum/serial_link/tests/gtest/gtest.h **** GTEST_API_ AssertionResult AssertionFailure();
 343:quantum/serial_link/tests/gtest/gtest.h **** 
 344:quantum/serial_link/tests/gtest/gtest.h **** // Makes a failed assertion result with the given failure message.
 345:quantum/serial_link/tests/gtest/gtest.h **** // Deprecated; use AssertionFailure() << msg.
 346:quantum/serial_link/tests/gtest/gtest.h **** GTEST_API_ AssertionResult AssertionFailure(const Message& msg);
 347:quantum/serial_link/tests/gtest/gtest.h **** 
 348:quantum/serial_link/tests/gtest/gtest.h **** // The abstract class that all tests inherit from.
 349:quantum/serial_link/tests/gtest/gtest.h **** //
 350:quantum/serial_link/tests/gtest/gtest.h **** // In Google Test, a unit test program contains one or many TestCases, and
 351:quantum/serial_link/tests/gtest/gtest.h **** // each TestCase contains one or many Tests.
 352:quantum/serial_link/tests/gtest/gtest.h **** //
 353:quantum/serial_link/tests/gtest/gtest.h **** // When you define a test using the TEST macro, you don't need to
 354:quantum/serial_link/tests/gtest/gtest.h **** // explicitly derive from Test - the TEST macro automatically does
 355:quantum/serial_link/tests/gtest/gtest.h **** // this for you.
 356:quantum/serial_link/tests/gtest/gtest.h **** //
 357:quantum/serial_link/tests/gtest/gtest.h **** // The only time you derive from Test is when defining a test fixture
 358:quantum/serial_link/tests/gtest/gtest.h **** // to be used a TEST_F.  For example:
 359:quantum/serial_link/tests/gtest/gtest.h **** //
 360:quantum/serial_link/tests/gtest/gtest.h **** //   class FooTest : public testing::Test {
 361:quantum/serial_link/tests/gtest/gtest.h **** //    protected:
 362:quantum/serial_link/tests/gtest/gtest.h **** //     void SetUp() override { ... }
 363:quantum/serial_link/tests/gtest/gtest.h **** //     void TearDown() override { ... }
 364:quantum/serial_link/tests/gtest/gtest.h **** //     ...
 365:quantum/serial_link/tests/gtest/gtest.h **** //   };
 366:quantum/serial_link/tests/gtest/gtest.h **** //
 367:quantum/serial_link/tests/gtest/gtest.h **** //   TEST_F(FooTest, Bar) { ... }
 368:quantum/serial_link/tests/gtest/gtest.h **** //   TEST_F(FooTest, Baz) { ... }
 369:quantum/serial_link/tests/gtest/gtest.h **** //
 370:quantum/serial_link/tests/gtest/gtest.h **** // Test is not copyable.
 371:quantum/serial_link/tests/gtest/gtest.h **** class GTEST_API_ Test {
 372:quantum/serial_link/tests/gtest/gtest.h ****  public:
 373:quantum/serial_link/tests/gtest/gtest.h ****   friend class TestInfo;
 374:quantum/serial_link/tests/gtest/gtest.h **** 
 375:quantum/serial_link/tests/gtest/gtest.h ****   // Defines types for pointers to functions that set up and tear down
 376:quantum/serial_link/tests/gtest/gtest.h ****   // a test case.
 377:quantum/serial_link/tests/gtest/gtest.h ****   typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;
 378:quantum/serial_link/tests/gtest/gtest.h ****   typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;
 379:quantum/serial_link/tests/gtest/gtest.h **** 
 380:quantum/serial_link/tests/gtest/gtest.h ****   // The d'tor is virtual as we intend to inherit from Test.
 381:quantum/serial_link/tests/gtest/gtest.h ****   virtual ~Test();
 382:quantum/serial_link/tests/gtest/gtest.h **** 
 383:quantum/serial_link/tests/gtest/gtest.h ****   // Sets up the stuff shared by all tests in this test case.
 384:quantum/serial_link/tests/gtest/gtest.h ****   //
 385:quantum/serial_link/tests/gtest/gtest.h ****   // Google Test will call Foo::SetUpTestCase() before running the first
 386:quantum/serial_link/tests/gtest/gtest.h ****   // test in test case Foo.  Hence a sub-class can define its own
 387:quantum/serial_link/tests/gtest/gtest.h ****   // SetUpTestCase() method to shadow the one defined in the super
 388:quantum/serial_link/tests/gtest/gtest.h ****   // class.
 389:quantum/serial_link/tests/gtest/gtest.h ****   static void SetUpTestCase() {}
  10              		.loc 1 389 15 view -0
  11              		.cfi_startproc
  12              		.loc 1 389 32 is_stmt 0 view .LVU1
  13 0000 C3       		ret
  14              		.cfi_endproc
  15              	.LFE4133:
  17              		.section	.text._ZN7testing4Test16TearDownTestCaseEv,"axG",@progbits,_ZN7testing4Test16TearDownTest
  18              		.weak	_ZN7testing4Test16TearDownTestCaseEv
  20              	_ZN7testing4Test16TearDownTestCaseEv:
  21              	.LFB4134:
 390:quantum/serial_link/tests/gtest/gtest.h **** 
 391:quantum/serial_link/tests/gtest/gtest.h ****   // Tears down the stuff shared by all tests in this test case.
 392:quantum/serial_link/tests/gtest/gtest.h ****   //
 393:quantum/serial_link/tests/gtest/gtest.h ****   // Google Test will call Foo::TearDownTestCase() after running the last
 394:quantum/serial_link/tests/gtest/gtest.h ****   // test in test case Foo.  Hence a sub-class can define its own
 395:quantum/serial_link/tests/gtest/gtest.h ****   // TearDownTestCase() method to shadow the one defined in the super
 396:quantum/serial_link/tests/gtest/gtest.h ****   // class.
 397:quantum/serial_link/tests/gtest/gtest.h ****   static void TearDownTestCase() {}
  22              		.loc 1 397 15 is_stmt 1 view -0
  23              		.cfi_startproc
  24              		.loc 1 397 35 is_stmt 0 view .LVU3
  25 0000 C3       		ret
  26              		.cfi_endproc
  27              	.LFE4134:
  29              		.section	.text._ZN7testing4Test5SetupEv,"axG",@progbits,_ZN7testing4Test5SetupEv,comdat
  30              		.align 2
  31              		.weak	_ZN7testing4Test5SetupEv
  33              	_ZN7testing4Test5SetupEv:
  34              	.LVL0:
  35              	.LFB4137:
 398:quantum/serial_link/tests/gtest/gtest.h **** 
 399:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the current test has a fatal failure.
 400:quantum/serial_link/tests/gtest/gtest.h ****   static bool HasFatalFailure();
 401:quantum/serial_link/tests/gtest/gtest.h **** 
 402:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the current test has a non-fatal failure.
 403:quantum/serial_link/tests/gtest/gtest.h ****   static bool HasNonfatalFailure();
 404:quantum/serial_link/tests/gtest/gtest.h **** 
 405:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the current test has a (either fatal or
 406:quantum/serial_link/tests/gtest/gtest.h ****   // non-fatal) failure.
 407:quantum/serial_link/tests/gtest/gtest.h ****   static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }
 408:quantum/serial_link/tests/gtest/gtest.h **** 
 409:quantum/serial_link/tests/gtest/gtest.h ****   // Logs a property for the current test, test case, or for the entire
 410:quantum/serial_link/tests/gtest/gtest.h ****   // invocation of the test program when used outside of the context of a
 411:quantum/serial_link/tests/gtest/gtest.h ****   // test case.  Only the last value for a given key is remembered.  These
 412:quantum/serial_link/tests/gtest/gtest.h ****   // are public static so they can be called from utility functions that are
 413:quantum/serial_link/tests/gtest/gtest.h ****   // not members of the test fixture.  Calls to RecordProperty made during
 414:quantum/serial_link/tests/gtest/gtest.h ****   // lifespan of the test (from the moment its constructor starts to the
 415:quantum/serial_link/tests/gtest/gtest.h ****   // moment its destructor finishes) will be output in XML as attributes of
 416:quantum/serial_link/tests/gtest/gtest.h ****   // the <testcase> element.  Properties recorded from fixture's
 417:quantum/serial_link/tests/gtest/gtest.h ****   // SetUpTestCase or TearDownTestCase are logged as attributes of the
 418:quantum/serial_link/tests/gtest/gtest.h ****   // corresponding <testsuite> element.  Calls to RecordProperty made in the
 419:quantum/serial_link/tests/gtest/gtest.h ****   // global context (before or after invocation of RUN_ALL_TESTS and from
 420:quantum/serial_link/tests/gtest/gtest.h ****   // SetUp/TearDown method of Environment objects registered with Google
 421:quantum/serial_link/tests/gtest/gtest.h ****   // Test) will be output as attributes of the <testsuites> element.
 422:quantum/serial_link/tests/gtest/gtest.h ****   static void RecordProperty(const std::string& key, const std::string& value);
 423:quantum/serial_link/tests/gtest/gtest.h ****   static void RecordProperty(const std::string& key, int value);
 424:quantum/serial_link/tests/gtest/gtest.h **** 
 425:quantum/serial_link/tests/gtest/gtest.h ****  protected:
 426:quantum/serial_link/tests/gtest/gtest.h ****   // Creates a Test object.
 427:quantum/serial_link/tests/gtest/gtest.h ****   Test();
 428:quantum/serial_link/tests/gtest/gtest.h **** 
 429:quantum/serial_link/tests/gtest/gtest.h ****   // Sets up the test fixture.
 430:quantum/serial_link/tests/gtest/gtest.h ****   virtual void SetUp();
 431:quantum/serial_link/tests/gtest/gtest.h **** 
 432:quantum/serial_link/tests/gtest/gtest.h ****   // Tears down the test fixture.
 433:quantum/serial_link/tests/gtest/gtest.h ****   virtual void TearDown();
 434:quantum/serial_link/tests/gtest/gtest.h **** 
 435:quantum/serial_link/tests/gtest/gtest.h ****  private:
 436:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the current test has the same fixture class as
 437:quantum/serial_link/tests/gtest/gtest.h ****   // the first test in the current test case.
 438:quantum/serial_link/tests/gtest/gtest.h ****   static bool HasSameFixtureClass();
 439:quantum/serial_link/tests/gtest/gtest.h **** 
 440:quantum/serial_link/tests/gtest/gtest.h ****   // Runs the test after the test fixture has been set up.
 441:quantum/serial_link/tests/gtest/gtest.h ****   //
 442:quantum/serial_link/tests/gtest/gtest.h ****   // A sub-class must implement this to define the test logic.
 443:quantum/serial_link/tests/gtest/gtest.h ****   //
 444:quantum/serial_link/tests/gtest/gtest.h ****   // DO NOT OVERRIDE THIS FUNCTION DIRECTLY IN A USER PROGRAM.
 445:quantum/serial_link/tests/gtest/gtest.h ****   // Instead, use the TEST or TEST_F macro.
 446:quantum/serial_link/tests/gtest/gtest.h ****   virtual void TestBody() = 0;
 447:quantum/serial_link/tests/gtest/gtest.h **** 
 448:quantum/serial_link/tests/gtest/gtest.h ****   // Sets up, executes, and tears down the test.
 449:quantum/serial_link/tests/gtest/gtest.h ****   void Run();
 450:quantum/serial_link/tests/gtest/gtest.h **** 
 451:quantum/serial_link/tests/gtest/gtest.h ****   // Deletes self.  We deliberately pick an unusual name for this
 452:quantum/serial_link/tests/gtest/gtest.h ****   // internal method to avoid clashing with names used in user TESTs.
 453:quantum/serial_link/tests/gtest/gtest.h ****   void DeleteSelf_() { delete this; }
 454:quantum/serial_link/tests/gtest/gtest.h **** 
 455:quantum/serial_link/tests/gtest/gtest.h ****   const internal::scoped_ptr< GTEST_FLAG_SAVER_ > gtest_flag_saver_;
 456:quantum/serial_link/tests/gtest/gtest.h **** 
 457:quantum/serial_link/tests/gtest/gtest.h ****   // Often a user misspells SetUp() as Setup() and spends a long time
 458:quantum/serial_link/tests/gtest/gtest.h ****   // wondering why it is never called by Google Test.  The declaration of
 459:quantum/serial_link/tests/gtest/gtest.h ****   // the following method is solely for catching such an error at
 460:quantum/serial_link/tests/gtest/gtest.h ****   // compile time:
 461:quantum/serial_link/tests/gtest/gtest.h ****   //
 462:quantum/serial_link/tests/gtest/gtest.h ****   //   - The return type is deliberately chosen to be not void, so it
 463:quantum/serial_link/tests/gtest/gtest.h ****   //   will be a conflict if void Setup() is declared in the user's
 464:quantum/serial_link/tests/gtest/gtest.h ****   //   test fixture.
 465:quantum/serial_link/tests/gtest/gtest.h ****   //
 466:quantum/serial_link/tests/gtest/gtest.h ****   //   - This method is private, so it will be another compiler error
 467:quantum/serial_link/tests/gtest/gtest.h ****   //   if the method is called from the user's test fixture.
 468:quantum/serial_link/tests/gtest/gtest.h ****   //
 469:quantum/serial_link/tests/gtest/gtest.h ****   // DO NOT OVERRIDE THIS FUNCTION.
 470:quantum/serial_link/tests/gtest/gtest.h ****   //
 471:quantum/serial_link/tests/gtest/gtest.h ****   // If you see an error about overriding the following function or
 472:quantum/serial_link/tests/gtest/gtest.h ****   // about it being private, you have mis-spelled SetUp() as Setup().
 473:quantum/serial_link/tests/gtest/gtest.h ****   struct Setup_should_be_spelled_SetUp {};
 474:quantum/serial_link/tests/gtest/gtest.h ****   virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }
  36              		.loc 1 474 42 is_stmt 1 view -0
  37              		.cfi_startproc
  38              		.loc 1 474 52 view .LVU5
  39              		.loc 1 474 65 is_stmt 0 view .LVU6
  40 0000 31C0     		xorl	%eax, %eax
  41 0002 C3       		ret
  42              		.cfi_endproc
  43              	.LFE4137:
  45              		.section	.text._ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in
  46              		.align 2
  47              		.weak	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_midd
  49              	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_r
  50              	.LVL1:
  51              	.LFB5169:
  52              		.file 2 "quantum/serial_link/tests/gtest/./internal/gtest-internal.h"
   1:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Copyright 2005, Google Inc.
   2:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // All rights reserved.
   3:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
   4:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Redistribution and use in source and binary forms, with or without
   5:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // modification, are permitted provided that the following conditions are
   6:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // met:
   7:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
   8:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //     * Redistributions of source code must retain the above copyright
   9:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // notice, this list of conditions and the following disclaimer.
  10:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //     * Redistributions in binary form must reproduce the above
  11:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // copyright notice, this list of conditions and the following disclaimer
  12:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // in the documentation and/or other materials provided with the
  13:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // distribution.
  14:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //     * Neither the name of Google Inc. nor the names of its
  15:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // contributors may be used to endorse or promote products derived from
  16:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // this software without specific prior written permission.
  17:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
  18:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  19:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  20:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  21:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  22:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  23:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  24:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  25:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  26:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  27:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  28:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  29:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
  30:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Authors: wan@google.com (Zhanyong Wan), eefacm@gmail.com (Sean Mcafee)
  31:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
  32:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // The Google C++ Testing Framework (Google Test)
  33:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
  34:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // This header file declares functions and macros used internally by
  35:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Google Test.  They are subject to change without notice.
  36:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  37:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_
  38:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_
  39:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  40:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include "./gtest-port.h"
  41:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  42:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #if GTEST_OS_LINUX
  43:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** # include <stdlib.h>
  44:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** # include <sys/types.h>
  45:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** # include <sys/wait.h>
  46:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** # include <unistd.h>
  47:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #endif  // GTEST_OS_LINUX
  48:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  49:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #if GTEST_HAS_EXCEPTIONS
  50:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** # include <stdexcept>
  51:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #endif
  52:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  53:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <ctype.h>
  54:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <float.h>
  55:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <string.h>
  56:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <iomanip>
  57:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <limits>
  58:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <map>
  59:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <set>
  60:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <string>
  61:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include <vector>
  62:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  63:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include "../gtest-message.h"
  64:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include "./gtest-string.h"
  65:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include "./gtest-filepath.h"
  66:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #include "./gtest-type-util.h"
  67:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  68:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Due to C++ preprocessor weirdness, we need double indirection to
  69:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // concatenate two tokens when one of them is __LINE__.  Writing
  70:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
  71:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   foo ## __LINE__
  72:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
  73:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // will result in the token foo__LINE__, instead of foo followed by
  74:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // the current line number.  For more details, see
  75:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.6
  76:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #define GTEST_CONCAT_TOKEN_(foo, bar) GTEST_CONCAT_TOKEN_IMPL_(foo, bar)
  77:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #define GTEST_CONCAT_TOKEN_IMPL_(foo, bar) foo ## bar
  78:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  79:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class ProtocolMessage;
  80:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** namespace proto2 { class Message; }
  81:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  82:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** namespace testing {
  83:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  84:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Forward declarations.
  85:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  86:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class AssertionResult;                 // Result of an assertion.
  87:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class Message;                         // Represents a failure message.
  88:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class Test;                            // Represents a test.
  89:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class TestInfo;                        // Information about a test.
  90:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class TestPartResult;                  // Result of a test part.
  91:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class UnitTest;                        // A collection of test cases.
  92:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  93:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <typename T>
  94:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** ::std::string PrintToString(const T& value);
  95:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  96:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** namespace internal {
  97:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  98:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** struct TraceInfo;                      // Information about a trace point.
  99:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class ScopedTrace;                     // Implements scoped trace.
 100:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class TestInfoImpl;                    // Opaque implementation of TestInfo
 101:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class UnitTestImpl;                    // Opaque implementation of UnitTest
 102:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 103:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // The text used in failure messages to indicate the start of the
 104:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // stack trace.
 105:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ extern const char kStackTraceMarker[];
 106:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 107:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Two overloaded helpers for checking at compile time whether an
 108:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // expression is a null pointer literal (i.e. NULL or any 0-valued
 109:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // compile-time integral constant).  Their return values have
 110:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // different sizes, so we can use sizeof() to test which version is
 111:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // picked by the compiler.  These helpers have no implementations, as
 112:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // we only need their signatures.
 113:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 114:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Given IsNullLiteralHelper(x), the compiler will pick the first
 115:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // version if x can be implicitly converted to Secret*, and pick the
 116:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // second version otherwise.  Since Secret is a secret and incomplete
 117:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // type, the only expression a user can write that has type Secret* is
 118:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // a null pointer literal.  Therefore, we know that x is a null
 119:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // pointer literal if and only if the first version is picked by the
 120:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // compiler.
 121:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** char IsNullLiteralHelper(Secret* p);
 122:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** char (&IsNullLiteralHelper(...))[2];  // NOLINT
 123:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 124:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // A compile-time bool constant that is true if and only if x is a
 125:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // null pointer literal (i.e. NULL or any 0-valued compile-time
 126:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // integral constant).
 127:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #ifdef GTEST_ELLIPSIS_NEEDS_POD_
 128:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // We lose support for NULL detection where the compiler doesn't like
 129:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // passing non-POD classes through ellipsis (...).
 130:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** # define GTEST_IS_NULL_LITERAL_(x) false
 131:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #else
 132:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** # define GTEST_IS_NULL_LITERAL_(x) \
 133:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     (sizeof(::testing::internal::IsNullLiteralHelper(x)) == 1)
 134:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #endif  // GTEST_ELLIPSIS_NEEDS_POD_
 135:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 136:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Appends the user-supplied message to the Google-Test-generated message.
 137:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ std::string AppendUserMessage(
 138:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const std::string& gtest_msg, const Message& user_msg);
 139:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 140:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #if GTEST_HAS_EXCEPTIONS
 141:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 142:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // This exception is thrown by (and only by) a failed Google Test
 143:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // assertion when GTEST_FLAG(throw_on_failure) is true (if exceptions
 144:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // are enabled).  We derive it from std::runtime_error, which is for
 145:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // errors presumably detectable only at run time.  Since
 146:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // std::runtime_error inherits from std::exception, many testing
 147:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // frameworks know how to extract and print the message inside it.
 148:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class GTEST_API_ GoogleTestFailureException : public ::std::runtime_error {
 149:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 150:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   explicit GoogleTestFailureException(const TestPartResult& failure);
 151:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 152:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 153:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #endif  // GTEST_HAS_EXCEPTIONS
 154:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 155:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // A helper class for creating scoped traces in user programs.
 156:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class GTEST_API_ ScopedTrace {
 157:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 158:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The c'tor pushes the given source file location and message onto
 159:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // a trace stack maintained by Google Test.
 160:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   ScopedTrace(const char* file, int line, const Message& message);
 161:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 162:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The d'tor pops the info pushed by the c'tor.
 163:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 164:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Note that the d'tor is not virtual in order to be efficient.
 165:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Don't inherit from ScopedTrace!
 166:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   ~ScopedTrace();
 167:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 168:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  private:
 169:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedTrace);
 170:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** } GTEST_ATTRIBUTE_UNUSED_;  // A ScopedTrace object does its job in its
 171:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                             // c'tor and d'tor.  Therefore it doesn't
 172:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                             // need to be used otherwise.
 173:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 174:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** namespace edit_distance {
 175:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Returns the optimal edits to go from 'left' to 'right'.
 176:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // All edits cost the same, with replace having lower priority than
 177:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // add/remove.
 178:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Simple implementation of the Wagner–Fischer algorithm.
 179:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // See http://en.wikipedia.org/wiki/Wagner-Fischer_algorithm
 180:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** enum EditType { kMatch, kAdd, kRemove, kReplace };
 181:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ std::vector<EditType> CalculateOptimalEdits(
 182:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const std::vector<size_t>& left, const std::vector<size_t>& right);
 183:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 184:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Same as above, but the input is represented as strings.
 185:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ std::vector<EditType> CalculateOptimalEdits(
 186:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const std::vector<std::string>& left,
 187:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const std::vector<std::string>& right);
 188:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 189:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Create a diff of the input strings in Unified diff format.
 190:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ std::string CreateUnifiedDiff(const std::vector<std::string>& left,
 191:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                          const std::vector<std::string>& right,
 192:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                          size_t context = 2);
 193:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 194:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** }  // namespace edit_distance
 195:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 196:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Calculate the diff between 'left' and 'right' and return it in unified diff
 197:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // format.
 198:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // If not null, stores in 'total_line_count' the total number of lines found
 199:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // in left + right.
 200:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ std::string DiffStrings(const std::string& left,
 201:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                    const std::string& right,
 202:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                    size_t* total_line_count);
 203:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 204:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Constructs and returns the message for an equality assertion
 205:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
 206:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 207:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // The first four parameters are the expressions used in the assertion
 208:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
 209:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // where foo is 5 and bar is 6, we have:
 210:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 211:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   expected_expression: "foo"
 212:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   actual_expression:   "bar"
 213:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   expected_value:      "5"
 214:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   actual_value:        "6"
 215:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 216:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // The ignoring_case parameter is true iff the assertion is a
 217:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // *_STRCASEEQ*.  When it's true, the string " (ignoring case)" will
 218:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // be inserted into the message.
 219:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ AssertionResult EqFailure(const char* expected_expression,
 220:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                      const char* actual_expression,
 221:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                      const std::string& expected_value,
 222:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                      const std::string& actual_value,
 223:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                      bool ignoring_case);
 224:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 225:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
 226:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ std::string GetBoolAssertionFailureMessage(
 227:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const AssertionResult& assertion_result,
 228:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const char* expression_text,
 229:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const char* actual_predicate_value,
 230:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const char* expected_predicate_value);
 231:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 232:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // This template class represents an IEEE floating-point number
 233:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // (either single-precision or double-precision, depending on the
 234:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // template parameters).
 235:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 236:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // The purpose of this class is to do more sophisticated number
 237:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // comparison.  (Due to round-off error, etc, it's very unlikely that
 238:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // two floating-points will be equal exactly.  Hence a naive
 239:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // comparison by the == operation often doesn't work.)
 240:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 241:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Format of IEEE floating-point:
 242:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 243:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   The most-significant bit being the leftmost, an IEEE
 244:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   floating-point looks like
 245:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 246:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //     sign_bit exponent_bits fraction_bits
 247:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 248:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   Here, sign_bit is a single bit that designates the sign of the
 249:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   number.
 250:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 251:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   For float, there are 8 exponent bits and 23 fraction bits.
 252:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 253:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   For double, there are 11 exponent bits and 52 fraction bits.
 254:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 255:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   More details can be found at
 256:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   http://en.wikipedia.org/wiki/IEEE_floating-point_standard.
 257:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 258:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Template parameter:
 259:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //
 260:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** //   RawType: the raw floating-point type (either float or double)
 261:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <typename RawType>
 262:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class FloatingPoint {
 263:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 264:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Defines the unsigned integer type that has the same size as the
 265:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // floating point number.
 266:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;
 267:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 268:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Constants.
 269:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 270:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // # of bits in a number.
 271:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static const size_t kBitCount = 8*sizeof(RawType);
 272:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 273:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // # of fraction bits in a number.
 274:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static const size_t kFractionBitCount =
 275:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     std::numeric_limits<RawType>::digits - 1;
 276:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 277:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // # of exponent bits in a number.
 278:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;
 279:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 280:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The mask for the sign bit.
 281:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);
 282:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 283:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The mask for the fraction bits.
 284:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static const Bits kFractionBitMask =
 285:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     ~static_cast<Bits>(0) >> (kExponentBitCount + 1);
 286:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 287:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The mask for the exponent bits.
 288:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);
 289:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 290:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // How many ULP's (Units in the Last Place) we want to tolerate when
 291:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // comparing two numbers.  The larger the value, the more error we
 292:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // allow.  A 0 value means that two numbers must be exactly the same
 293:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // to be considered equal.
 294:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 295:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The maximum error of a single floating-point operation is 0.5
 296:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // units in the last place.  On Intel CPU's, all floating-point
 297:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // calculations are done with 80-bit precision, while double has 64
 298:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // bits.  Therefore, 4 should be enough for ordinary use.
 299:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 300:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // See the following article for more details on ULP:
 301:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
 302:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static const size_t kMaxUlps = 4;
 303:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 304:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Constructs a FloatingPoint from a raw floating-point number.
 305:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 306:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // On an Intel CPU, passing a non-normalized NAN (Not a Number)
 307:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // around may change its bits, although the new value is guaranteed
 308:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // to be also a NAN.  Therefore, don't expect this constructor to
 309:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // preserve the bits in x when x is a NAN.
 310:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   explicit FloatingPoint(const RawType& x) { u_.value_ = x; }
 311:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 312:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Static methods
 313:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 314:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Reinterprets a bit pattern as a floating-point number.
 315:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 316:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // This function is needed to test the AlmostEquals() method.
 317:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static RawType ReinterpretBits(const Bits bits) {
 318:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     FloatingPoint fp(0);
 319:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     fp.u_.bits_ = bits;
 320:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     return fp.u_.value_;
 321:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   }
 322:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 323:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns the floating-point number that represent positive infinity.
 324:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static RawType Infinity() {
 325:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     return ReinterpretBits(kExponentBitMask);
 326:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   }
 327:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 328:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns the maximum representable finite floating-point number.
 329:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static RawType Max();
 330:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 331:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Non-static methods
 332:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 333:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns the bits that represents this number.
 334:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   const Bits &bits() const { return u_.bits_; }
 335:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 336:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns the exponent bits of this number.
 337:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }
 338:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 339:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns the fraction bits of this number.
 340:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }
 341:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 342:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns the sign bit of this number.
 343:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   Bits sign_bit() const { return kSignBitMask & u_.bits_; }
 344:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 345:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns true iff this is NAN (not a number).
 346:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   bool is_nan() const {
 347:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     // It's a NAN if the exponent bits are all ones and the fraction
 348:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     // bits are not entirely zeros.
 349:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     return (exponent_bits() == kExponentBitMask) && (fraction_bits() != 0);
 350:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   }
 351:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 352:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Returns true iff this number is at most kMaxUlps ULP's away from
 353:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // rhs.  In particular, this function:
 354:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 355:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //   - returns false if either number is (or both are) NAN.
 356:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //   - treats really large numbers as almost equal to infinity.
 357:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //   - thinks +0.0 and -0.0 are 0 DLP's apart.
 358:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   bool AlmostEquals(const FloatingPoint& rhs) const {
 359:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     // The IEEE standard says that any comparison operation involving
 360:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     // a NAN must return false.
 361:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     if (is_nan() || rhs.is_nan()) return false;
 362:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 363:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     return DistanceBetweenSignAndMagnitudeNumbers(u_.bits_, rhs.u_.bits_)
 364:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****         <= kMaxUlps;
 365:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   }
 366:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 367:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  private:
 368:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The data type used to store the actual floating-point number.
 369:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   union FloatingPointUnion {
 370:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     RawType value_;  // The raw floating-point number.
 371:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     Bits bits_;      // The bits that represent the number.
 372:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   };
 373:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 374:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Converts an integer from the sign-and-magnitude representation to
 375:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // the biased representation.  More precisely, let N be 2 to the
 376:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // power of (kBitCount - 1), an integer x is represented by the
 377:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // unsigned number x + N.
 378:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 379:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // For instance,
 380:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 381:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //   -N + 1 (the most negative number representable using
 382:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //          sign-and-magnitude) is represented by 1;
 383:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //   0      is represented by N; and
 384:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //   N - 1  (the biggest number representable using
 385:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //          sign-and-magnitude) is represented by 2N - 1.
 386:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   //
 387:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Read http://en.wikipedia.org/wiki/Signed_number_representations
 388:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // for more details on signed number representations.
 389:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static Bits SignAndMagnitudeToBiased(const Bits &sam) {
 390:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     if (kSignBitMask & sam) {
 391:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****       // sam represents a negative number.
 392:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****       return ~sam + 1;
 393:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     } else {
 394:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****       // sam represents a positive number.
 395:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****       return kSignBitMask | sam;
 396:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     }
 397:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   }
 398:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 399:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Given two numbers in the sign-and-magnitude representation,
 400:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // returns the distance between them as an unsigned number.
 401:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,
 402:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                                      const Bits &sam2) {
 403:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const Bits biased1 = SignAndMagnitudeToBiased(sam1);
 404:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     const Bits biased2 = SignAndMagnitudeToBiased(sam2);
 405:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****     return (biased1 >= biased2) ? (biased1 - biased2) : (biased2 - biased1);
 406:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   }
 407:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 408:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   FloatingPointUnion u_;
 409:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 410:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 411:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // We cannot use std::numeric_limits<T>::max() as it clashes with the max()
 412:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // macro defined by <windows.h>.
 413:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <>
 414:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** inline float FloatingPoint<float>::Max() { return FLT_MAX; }
 415:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <>
 416:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** inline double FloatingPoint<double>::Max() { return DBL_MAX; }
 417:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 418:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Typedefs the instances of the FloatingPoint template class that we
 419:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // care to use.
 420:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** typedef FloatingPoint<float> Float;
 421:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** typedef FloatingPoint<double> Double;
 422:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 423:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // In order to catch the mistake of putting tests that use different
 424:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // test fixture classes in the same test case, we need to assign
 425:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // unique IDs to fixture classes and compare them.  The TypeId type is
 426:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // used to hold such IDs.  The user should treat TypeId as an opaque
 427:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // type: the only operation allowed on TypeId values is to compare
 428:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // them for equality using the == operator.
 429:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** typedef const void* TypeId;
 430:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 431:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <typename T>
 432:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class TypeIdHelper {
 433:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 434:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // dummy_ must not have a const type.  Otherwise an overly eager
 435:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // compiler (e.g. MSVC 7.1 & 8.0) may try to merge
 436:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // TypeIdHelper<T>::dummy_ for different Ts as an "optimization".
 437:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   static bool dummy_;
 438:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 439:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 440:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <typename T>
 441:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** bool TypeIdHelper<T>::dummy_ = false;
 442:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 443:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // GetTypeId<T>() returns the ID of type T.  Different values will be
 444:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // returned for different types.  Calling the function twice with the
 445:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // same type argument is guaranteed to return the same ID.
 446:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <typename T>
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** TypeId GetTypeId() {
 448:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 449:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // TypeIdHelper<T>::dummy_ variable for each T used to instantiate
 450:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // the template.  Therefore, the address of dummy_ is guaranteed to
 451:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // be unique.
 452:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   return &(TypeIdHelper<T>::dummy_);
 453:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** }
 454:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 455:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Returns the type ID of ::testing::Test.  Always call this instead
 456:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // of GetTypeId< ::testing::Test>() to get the type ID of
 457:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // ::testing::Test, as the latter may give the wrong result due to a
 458:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // suspected linker bug when compiling Google Test as a Mac OS X
 459:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // framework.
 460:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ TypeId GetTestTypeId();
 461:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 462:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Defines the abstract factory interface that creates instances
 463:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // of a Test object.
 464:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class TestFactoryBase {
 465:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   virtual ~TestFactoryBase() {}
 467:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 468:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // Creates a test instance to run. The instance is both created and destroyed
 469:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // within TestInfoImpl::Run()
 470:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   virtual Test* CreateTest() = 0;
 471:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 472:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  protected:
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   TestFactoryBase() {}
 474:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 475:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  private:
 476:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(TestFactoryBase);
 477:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 478:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 479:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // This class provides implementation of TeastFactoryBase interface.
 480:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // It is used in TEST and TEST_F macros.
 481:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** template <class TestClass>
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** class TestFactoryImpl : public TestFactoryBase {
  53              		.loc 2 482 7 is_stmt 1 view -0
  54              		.cfi_startproc
  55              	.LBB878:
  56              	.LBI878:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  57              		.loc 2 466 11 view .LVU8
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  58              		.loc 2 466 11 is_stmt 0 view .LVU9
  59              	.LBE878:
  60              		.loc 2 482 7 view .LVU10
  61 0000 C3       		ret
  62              		.cfi_endproc
  63              	.LFE5169:
  65              		.weak	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_midd
  66              		.set	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middl
  67              		.section	.text._ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write
  68              		.align 2
  69              		.weak	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_m
  71              	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_o
  72              	.LVL2:
  73              	.LFB5177:
  74              		.loc 2 482 7 is_stmt 1 view -0
  75              		.cfi_startproc
  76              	.LBB879:
  77              	.LBI879:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  78              		.loc 2 466 11 view .LVU12
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  79              		.loc 2 466 11 is_stmt 0 view .LVU13
  80              	.LBE879:
  81              		.loc 2 482 7 view .LVU14
  82 0000 C3       		ret
  83              		.cfi_endproc
  84              	.LFE5177:
  86              		.weak	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_m
  87              		.set	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_mi
  88              		.section	.text._ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads
  89              		.align 2
  90              		.weak	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_T
  92              	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED2E
  93              	.LVL3:
  94              	.LFB5185:
  95              		.loc 2 482 7 is_stmt 1 view -0
  96              		.cfi_startproc
  97              	.LBB880:
  98              	.LBI880:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
  99              		.loc 2 466 11 view .LVU16
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 100              		.loc 2 466 11 is_stmt 0 view .LVU17
 101              	.LBE880:
 102              		.loc 2 482 7 view .LVU18
 103 0000 C3       		ret
 104              		.cfi_endproc
 105              	.LFE5185:
 107              		.weak	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_T
 108              		.set	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_Te
 109              		.section	.text._ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_Te
 110              		.align 2
 111              		.weak	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED2Ev
 113              	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED2Ev:
 114              	.LVL4:
 115              	.LFB5193:
 116              		.loc 2 482 7 is_stmt 1 view -0
 117              		.cfi_startproc
 118              	.LBB881:
 119              	.LBI881:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 120              		.loc 2 466 11 view .LVU20
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 121              		.loc 2 466 11 is_stmt 0 view .LVU21
 122              	.LBE881:
 123              		.loc 2 482 7 view .LVU22
 124 0000 C3       		ret
 125              		.cfi_endproc
 126              	.LFE5193:
 128              		.weak	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED1Ev
 129              		.set	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED1Ev,_Z
 130              		.section	.text._ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_objec
 131              		.align 2
 132              		.weak	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED2
 134              	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED2Ev:
 135              	.LVL5:
 136              	.LFB5201:
 137              		.loc 2 482 7 is_stmt 1 view -0
 138              		.cfi_startproc
 139              	.LBB882:
 140              	.LBI882:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 141              		.loc 2 466 11 view .LVU24
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 142              		.loc 2 466 11 is_stmt 0 view .LVU25
 143              	.LBE882:
 144              		.loc 2 482 7 view .LVU26
 145 0000 C3       		ret
 146              		.cfi_endproc
 147              	.LFE5201:
 149              		.weak	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED1
 150              		.set	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED1E
 151              		.section	.text._ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_objec
 152              		.align 2
 153              		.weak	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED0
 155              	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED0Ev:
 156              	.LVL6:
 157              	.LFB5203:
 158              		.loc 2 482 7 is_stmt 1 view -0
 159              		.cfi_startproc
 160              	.LBB883:
 161              	.LBI883:
 162              		.loc 2 482 7 view .LVU28
 163              	.LBB884:
 164              	.LBI884:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 165              		.loc 2 466 11 view .LVU29
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 166              		.loc 2 466 11 is_stmt 0 view .LVU30
 167              	.LBE884:
 168              	.LBE883:
 169              		.loc 2 482 7 view .LVU31
 170 0000 E9000000 		jmp	_ZdlPv@PLT
 170      00
 171              	.LVL7:
 172              		.loc 2 482 7 view .LVU32
 173              		.cfi_endproc
 174              	.LFE5203:
 176              		.section	.text._ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_Te
 177              		.align 2
 178              		.weak	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED0Ev
 180              	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED0Ev:
 181              	.LVL8:
 182              	.LFB5195:
 183              		.loc 2 482 7 is_stmt 1 view -0
 184              		.cfi_startproc
 185              	.LBB885:
 186              	.LBI885:
 187              		.loc 2 482 7 view .LVU34
 188              	.LBB886:
 189              	.LBI886:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 190              		.loc 2 466 11 view .LVU35
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 191              		.loc 2 466 11 is_stmt 0 view .LVU36
 192              	.LBE886:
 193              	.LBE885:
 194              		.loc 2 482 7 view .LVU37
 195 0000 E9000000 		jmp	_ZdlPv@PLT
 195      00
 196              	.LVL9:
 197              		.loc 2 482 7 view .LVU38
 198              		.cfi_endproc
 199              	.LFE5195:
 201              		.section	.text._ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads
 202              		.align 2
 203              		.weak	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_T
 205              	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED0E
 206              	.LVL10:
 207              	.LFB5187:
 208              		.loc 2 482 7 is_stmt 1 view -0
 209              		.cfi_startproc
 210              	.LBB887:
 211              	.LBI887:
 212              		.loc 2 482 7 view .LVU40
 213              	.LBB888:
 214              	.LBI888:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 215              		.loc 2 466 11 view .LVU41
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 216              		.loc 2 466 11 is_stmt 0 view .LVU42
 217              	.LBE888:
 218              	.LBE887:
 219              		.loc 2 482 7 view .LVU43
 220 0000 E9000000 		jmp	_ZdlPv@PLT
 220      00
 221              	.LVL11:
 222              		.loc 2 482 7 view .LVU44
 223              		.cfi_endproc
 224              	.LFE5187:
 226              		.section	.text._ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write
 227              		.align 2
 228              		.weak	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_m
 230              	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_o
 231              	.LVL12:
 232              	.LFB5179:
 233              		.loc 2 482 7 is_stmt 1 view -0
 234              		.cfi_startproc
 235              	.LBB889:
 236              	.LBI889:
 237              		.loc 2 482 7 view .LVU46
 238              	.LBB890:
 239              	.LBI890:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 240              		.loc 2 466 11 view .LVU47
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 241              		.loc 2 466 11 is_stmt 0 view .LVU48
 242              	.LBE890:
 243              	.LBE889:
 244              		.loc 2 482 7 view .LVU49
 245 0000 E9000000 		jmp	_ZdlPv@PLT
 245      00
 246              	.LVL13:
 247              		.loc 2 482 7 view .LVU50
 248              		.cfi_endproc
 249              	.LFE5179:
 251              		.section	.text._ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in
 252              		.align 2
 253              		.weak	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_midd
 255              	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_r
 256              	.LVL14:
 257              	.LFB5171:
 258              		.loc 2 482 7 is_stmt 1 view -0
 259              		.cfi_startproc
 260              	.LBB891:
 261              	.LBI891:
 262              		.loc 2 482 7 view .LVU52
 263              	.LBB892:
 264              	.LBI892:
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 265              		.loc 2 466 11 view .LVU53
 466:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 266              		.loc 2 466 11 is_stmt 0 view .LVU54
 267              	.LBE892:
 268              	.LBE891:
 269              		.loc 2 482 7 view .LVU55
 270 0000 E9000000 		jmp	_ZdlPv@PLT
 270      00
 271              	.LVL15:
 272              		.loc 2 482 7 view .LVU56
 273              		.cfi_endproc
 274              	.LFE5171:
 276              		.section	.rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0.str1.1,"a
 277              	.LC0:
 278 0000 62617369 		.string	"basic_string::_M_construct null not valid"
 278      635F7374 
 278      72696E67 
 278      3A3A5F4D 
 278      5F636F6E 
 279              		.section	.text.startup._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0,"ax
 280              		.align 2
 282              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0:
 283              	.LVL16:
 284              	.LFB5257:
 285              		.file 3 "/usr/include/c++/11.1.0/bits/basic_string.h"
   1:/usr/include/c++/11.1.0/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/11.1.0/bits/basic_string.h **** 
   3:/usr/include/c++/11.1.0/bits/basic_string.h **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/bits/basic_string.h **** //
   5:/usr/include/c++/11.1.0/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  11:/usr/include/c++/11.1.0/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  16:/usr/include/c++/11.1.0/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  20:/usr/include/c++/11.1.0/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  25:/usr/include/c++/11.1.0/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/11.1.0/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11.1.0/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/11.1.0/bits/basic_string.h ****  */
  29:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  30:/usr/include/c++/11.1.0/bits/basic_string.h **** //
  31:/usr/include/c++/11.1.0/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/11.1.0/bits/basic_string.h **** //
  33:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  34:/usr/include/c++/11.1.0/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/11.1.0/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  37:/usr/include/c++/11.1.0/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  39:/usr/include/c++/11.1.0/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/11.1.0/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/11.1.0/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  43:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/c++/11.1.0/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
  46:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  47:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/usr/include/c++/11.1.0/bits/basic_string.h **** # include <string_view>
  49:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
  50:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  51:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  52:/usr/include/c++/11.1.0/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/11.1.0/bits/basic_string.h **** {
  54:/usr/include/c++/11.1.0/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  56:/usr/include/c++/11.1.0/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  57:/usr/include/c++/11.1.0/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  58:/usr/include/c++/11.1.0/bits/basic_string.h ****   /**
  59:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  60:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  61:/usr/include/c++/11.1.0/bits/basic_string.h ****    *
  62:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @ingroup strings
  63:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @ingroup sequences
  64:/usr/include/c++/11.1.0/bits/basic_string.h ****    *
  65:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  66:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  67:/usr/include/c++/11.1.0/bits/basic_string.h ****    *                   char_traits<_CharT>.
  68:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  69:/usr/include/c++/11.1.0/bits/basic_string.h ****    *
  70:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  71:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  72:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  73:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  74:/usr/include/c++/11.1.0/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  75:/usr/include/c++/11.1.0/bits/basic_string.h ****    */
  76:/usr/include/c++/11.1.0/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  77:/usr/include/c++/11.1.0/bits/basic_string.h ****     class basic_string
  78:/usr/include/c++/11.1.0/bits/basic_string.h ****     {
  79:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  80:/usr/include/c++/11.1.0/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  81:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  82:/usr/include/c++/11.1.0/bits/basic_string.h **** 
  83:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Types:
  84:/usr/include/c++/11.1.0/bits/basic_string.h ****     public:
  85:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef _Traits					traits_type;
  86:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  87:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  88:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  89:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  90:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  91:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  92:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  93:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  94:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  95:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  96:/usr/include/c++/11.1.0/bits/basic_string.h **** 							const_iterator;
  97:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  98:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  99:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 100:/usr/include/c++/11.1.0/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 101:/usr/include/c++/11.1.0/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 102:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 103:/usr/include/c++/11.1.0/bits/basic_string.h ****     protected:
 104:/usr/include/c++/11.1.0/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 105:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus < 201103L
 106:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef iterator __const_iterator;
 107:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
 108:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 109:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 110:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 111:/usr/include/c++/11.1.0/bits/basic_string.h ****     private:
 112:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
 113:/usr/include/c++/11.1.0/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 114:/usr/include/c++/11.1.0/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 115:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 116:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 117:/usr/include/c++/11.1.0/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 118:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 119:/usr/include/c++/11.1.0/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 120:/usr/include/c++/11.1.0/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 121:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  _Res>;
 122:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 123:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 124:/usr/include/c++/11.1.0/bits/basic_string.h ****       static __sv_type
 125:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 126:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return __svt; }
 127:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 128:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 129:/usr/include/c++/11.1.0/bits/basic_string.h ****       // allows to add an internal constructor that does not
 130:/usr/include/c++/11.1.0/bits/basic_string.h ****       // participate in overload resolution when a string_view
 131:/usr/include/c++/11.1.0/bits/basic_string.h ****       // is provided.
 132:/usr/include/c++/11.1.0/bits/basic_string.h ****       struct __sv_wrapper
 133:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 134:/usr/include/c++/11.1.0/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 135:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__sv_type _M_sv;
 136:/usr/include/c++/11.1.0/bits/basic_string.h ****       };
 137:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 138:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 139:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 140:/usr/include/c++/11.1.0/bits/basic_string.h ****        *          wrapper.
 141:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 142:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 143:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 144:/usr/include/c++/11.1.0/bits/basic_string.h ****       explicit
 145:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 146:/usr/include/c++/11.1.0/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 147:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 148:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 149:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 151:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 152:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus < 201103L
 153:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 154:/usr/include/c++/11.1.0/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 155:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
 156:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 157:/usr/include/c++/11.1.0/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 158:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 159:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 160:/usr/include/c++/11.1.0/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 161:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 162:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 163:/usr/include/c++/11.1.0/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 164:/usr/include/c++/11.1.0/bits/basic_string.h ****       };
 165:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 166:/usr/include/c++/11.1.0/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 167:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type		_M_string_length;
 168:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 169:/usr/include/c++/11.1.0/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 170:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 171:/usr/include/c++/11.1.0/bits/basic_string.h ****       union
 172:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 173:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 174:/usr/include/c++/11.1.0/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 175:/usr/include/c++/11.1.0/bits/basic_string.h ****       };
 176:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 177:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 178:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_data(pointer __p)
 179:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 180:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 181:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 182:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_length(size_type __length)
 183:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_string_length = __length; }
 184:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 185:/usr/include/c++/11.1.0/bits/basic_string.h ****       pointer
 186:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_data() const
 187:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 188:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 189:/usr/include/c++/11.1.0/bits/basic_string.h ****       pointer
 190:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_local_data()
 191:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 192:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
 193:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 194:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
 195:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return pointer(_M_local_buf);
 196:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 197:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 198:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 199:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_pointer
 200:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_local_data() const
 201:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 202:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
 203:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 204:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
 205:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 206:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 207:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 208:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 209:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 210:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 211:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 212:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 213:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 214:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_set_length(size_type __n)
 215:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 216:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_length(__n);
 217:/usr/include/c++/11.1.0/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 218:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 219:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 220:/usr/include/c++/11.1.0/bits/basic_string.h ****       bool
 221:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_is_local() const
 222:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 223:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 224:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Create & Destroy
 225:/usr/include/c++/11.1.0/bits/basic_string.h ****       pointer
 226:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_create(size_type&, size_type);
 227:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 228:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 229:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_dispose()
 230:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 231:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (!_M_is_local())
 232:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 233:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 234:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 235:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 236:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 237:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 238:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 239:/usr/include/c++/11.1.0/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 240:/usr/include/c++/11.1.0/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 241:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _InIterator>
 242:/usr/include/c++/11.1.0/bits/basic_string.h ****         void
 243:/usr/include/c++/11.1.0/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 244:/usr/include/c++/11.1.0/bits/basic_string.h **** 			 std::__false_type)
 245:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
 246:/usr/include/c++/11.1.0/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 247:/usr/include/c++/11.1.0/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 248:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
 249:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 250:/usr/include/c++/11.1.0/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 251:/usr/include/c++/11.1.0/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 252:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Integer>
 253:/usr/include/c++/11.1.0/bits/basic_string.h ****         void
 254:/usr/include/c++/11.1.0/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 255:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 256:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 257:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 258:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 259:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_construct(__req, __c); }
 260:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 261:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _InIterator>
 262:/usr/include/c++/11.1.0/bits/basic_string.h ****         void
 263:/usr/include/c++/11.1.0/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 264:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
 265:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 266:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 267:/usr/include/c++/11.1.0/bits/basic_string.h ****         }
 268:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 269:/usr/include/c++/11.1.0/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 270:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _InIterator>
 271:/usr/include/c++/11.1.0/bits/basic_string.h ****         void
 272:/usr/include/c++/11.1.0/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 273:/usr/include/c++/11.1.0/bits/basic_string.h **** 		     std::input_iterator_tag);
 274:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 275:/usr/include/c++/11.1.0/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 276:/usr/include/c++/11.1.0/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 277:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _FwdIterator>
 278:/usr/include/c++/11.1.0/bits/basic_string.h ****         void
 279:/usr/include/c++/11.1.0/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 280:/usr/include/c++/11.1.0/bits/basic_string.h **** 		     std::forward_iterator_tag);
 281:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 282:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 283:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 284:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 285:/usr/include/c++/11.1.0/bits/basic_string.h ****       allocator_type&
 286:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_get_allocator()
 287:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus; }
 288:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 289:/usr/include/c++/11.1.0/bits/basic_string.h ****       const allocator_type&
 290:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_get_allocator() const
 291:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus; }
 292:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 293:/usr/include/c++/11.1.0/bits/basic_string.h ****     private:
 294:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 295:/usr/include/c++/11.1.0/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 296:/usr/include/c++/11.1.0/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 297:/usr/include/c++/11.1.0/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 298:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 299:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 300:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 301:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 302:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 303:/usr/include/c++/11.1.0/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 304:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 305:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
 306:/usr/include/c++/11.1.0/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 307:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 308:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 309:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type
 310:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 311:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 312:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__pos > this->size())
 313:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 314:/usr/include/c++/11.1.0/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 315:/usr/include/c++/11.1.0/bits/basic_string.h **** 				   __s, __pos, this->size());
 316:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return __pos;
 317:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 318:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 319:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 320:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 321:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 322:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 323:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 324:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 325:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 326:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 327:/usr/include/c++/11.1.0/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 328:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type
 329:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 330:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 331:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 332:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 333:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 334:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 335:/usr/include/c++/11.1.0/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 336:/usr/include/c++/11.1.0/bits/basic_string.h ****       bool
 337:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 338:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 339:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 340:/usr/include/c++/11.1.0/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 341:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 342:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 343:/usr/include/c++/11.1.0/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 344:/usr/include/c++/11.1.0/bits/basic_string.h ****       // traits_type::copy/move/assign.
 345:/usr/include/c++/11.1.0/bits/basic_string.h ****       static void
 346:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 347:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 348:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__n == 1)
 349:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 350:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else
 351:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 352:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 353:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 354:/usr/include/c++/11.1.0/bits/basic_string.h ****       static void
 355:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 356:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 357:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__n == 1)
 358:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 359:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else
 360:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 361:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 362:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 363:/usr/include/c++/11.1.0/bits/basic_string.h ****       static void
 364:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 365:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 366:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__n == 1)
 367:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 368:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else
 369:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 370:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 371:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 372:/usr/include/c++/11.1.0/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 373:/usr/include/c++/11.1.0/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 374:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _Iterator>
 375:/usr/include/c++/11.1.0/bits/basic_string.h ****         static void
 376:/usr/include/c++/11.1.0/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 377:/usr/include/c++/11.1.0/bits/basic_string.h ****         {
 378:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 379:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 380:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
 381:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 382:/usr/include/c++/11.1.0/bits/basic_string.h ****       static void
 383:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 384:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 385:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 386:/usr/include/c++/11.1.0/bits/basic_string.h ****       static void
 387:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 388:/usr/include/c++/11.1.0/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 389:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 390:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 391:/usr/include/c++/11.1.0/bits/basic_string.h ****       static void
 392:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 393:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 394:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 395:/usr/include/c++/11.1.0/bits/basic_string.h ****       static void
 396:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 397:/usr/include/c++/11.1.0/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 398:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 399:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 400:/usr/include/c++/11.1.0/bits/basic_string.h ****       static int
 401:/usr/include/c++/11.1.0/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 402:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 403:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 404:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 405:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 406:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 407:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 408:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 409:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else
 410:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return int(__d);
 411:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 412:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 413:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 414:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_assign(const basic_string&);
 415:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 416:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 417:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 418:/usr/include/c++/11.1.0/bits/basic_string.h **** 		size_type __len2);
 419:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 420:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 421:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 422:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 423:/usr/include/c++/11.1.0/bits/basic_string.h ****     public:
 424:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Construct/copy/destroy:
 425:/usr/include/c++/11.1.0/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 426:/usr/include/c++/11.1.0/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 427:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 428:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 429:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 430:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 431:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string()
 432:/usr/include/c++/11.1.0/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 433:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 434:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_set_length(0); }
 435:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 436:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 437:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 438:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 439:/usr/include/c++/11.1.0/bits/basic_string.h ****       explicit
 440:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 441:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 442:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_set_length(0); }
 443:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 444:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 445:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 446:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string.
 447:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 448:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const basic_string& __str)
 449:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 450:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 451:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 452:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 453:/usr/include/c++/11.1.0/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 454:/usr/include/c++/11.1.0/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 455:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 456:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 457:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string.
 458:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 459:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 460:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 461:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 462:/usr/include/c++/11.1.0/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 463:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 464:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 465:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 466:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 467:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 468:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 469:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 470:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 471:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 472:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string.
 473:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 474:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 475:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 476:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 477:/usr/include/c++/11.1.0/bits/basic_string.h **** 		   size_type __n)
 478:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 479:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 480:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 481:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 482:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 483:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 484:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 485:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 486:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 487:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string.
 488:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 489:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 490:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 491:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 492:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 493:/usr/include/c++/11.1.0/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 494:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 495:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 496:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const _CharT* __start
 497:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 498:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 499:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 500:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 501:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 502:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 503:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __s  Source character %array.
 504:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 505:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 506:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 507:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 508:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  has no special meaning.
 509:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 510:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 511:/usr/include/c++/11.1.0/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 512:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 513:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 514:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 515:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 516:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 517:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __s  Source C string.
 518:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 519:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 520:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 521:/usr/include/c++/11.1.0/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:/usr/include/c++/11.1.0/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 523:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 524:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 525:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 286              		.loc 3 525 7 is_stmt 1 view -0
 287              		.cfi_startproc
 288              		.loc 3 525 7 is_stmt 0 view .LVU58
 289 0000 4154     		pushq	%r12
 290              		.cfi_def_cfa_offset 16
 291              		.cfi_offset 12, -16
 292 0002 55       		pushq	%rbp
 293              		.cfi_def_cfa_offset 24
 294              		.cfi_offset 6, -24
 295 0003 53       		pushq	%rbx
 296              		.cfi_def_cfa_offset 32
 297              		.cfi_offset 3, -32
 298 0004 4883EC10 		subq	$16, %rsp
 299              		.cfi_def_cfa_offset 48
 300              		.loc 3 525 7 view .LVU59
 301 0008 64488B04 		movq	%fs:40, %rax
 301      25280000 
 301      00
 302 0011 48894424 		movq	%rax, 8(%rsp)
 302      08
 303 0016 31C0     		xorl	%eax, %eax
 304              	.LVL17:
 305              	.LBB953:
 306              	.LBB954:
 307              	.LBI954:
 190:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 308              		.loc 3 190 7 is_stmt 1 view .LVU60
 190:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 309              		.loc 3 190 7 is_stmt 0 view .LVU61
 310              	.LBE954:
 311              	.LBB956:
 312              	.LBI956:
 156:/usr/include/c++/11.1.0/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 313              		.loc 3 156 2 is_stmt 1 view .LVU62
 314              	.LBB957:
 315              	.LBB958:
 316              	.LBI958:
 317              		.file 4 "/usr/include/c++/11.1.0/bits/allocator.h"
   1:/usr/include/c++/11.1.0/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/11.1.0/bits/allocator.h **** 
   3:/usr/include/c++/11.1.0/bits/allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/bits/allocator.h **** //
   5:/usr/include/c++/11.1.0/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/bits/allocator.h **** // any later version.
  10:/usr/include/c++/11.1.0/bits/allocator.h **** 
  11:/usr/include/c++/11.1.0/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/bits/allocator.h **** 
  16:/usr/include/c++/11.1.0/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/bits/allocator.h **** 
  20:/usr/include/c++/11.1.0/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/bits/allocator.h **** 
  25:/usr/include/c++/11.1.0/bits/allocator.h **** /*
  26:/usr/include/c++/11.1.0/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/11.1.0/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/11.1.0/bits/allocator.h ****  *
  29:/usr/include/c++/11.1.0/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/11.1.0/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/11.1.0/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/11.1.0/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/11.1.0/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/11.1.0/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/11.1.0/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/11.1.0/bits/allocator.h ****  */
  37:/usr/include/c++/11.1.0/bits/allocator.h **** 
  38:/usr/include/c++/11.1.0/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/11.1.0/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/11.1.0/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/11.1.0/bits/allocator.h ****  */
  42:/usr/include/c++/11.1.0/bits/allocator.h **** 
  43:/usr/include/c++/11.1.0/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/11.1.0/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/11.1.0/bits/allocator.h **** 
  46:/usr/include/c++/11.1.0/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/11.1.0/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/11.1.0/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/11.1.0/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/11.1.0/bits/allocator.h **** #endif
  51:/usr/include/c++/11.1.0/bits/allocator.h **** 
  52:/usr/include/c++/11.1.0/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/c++/11.1.0/bits/allocator.h **** 
  54:/usr/include/c++/11.1.0/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/c++/11.1.0/bits/allocator.h **** {
  56:/usr/include/c++/11.1.0/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/c++/11.1.0/bits/allocator.h **** 
  58:/usr/include/c++/11.1.0/bits/allocator.h ****   /**
  59:/usr/include/c++/11.1.0/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/c++/11.1.0/bits/allocator.h ****    *  @{
  61:/usr/include/c++/11.1.0/bits/allocator.h ****    */
  62:/usr/include/c++/11.1.0/bits/allocator.h **** 
  63:/usr/include/c++/11.1.0/bits/allocator.h ****   /// allocator<void> specialization.
  64:/usr/include/c++/11.1.0/bits/allocator.h ****   template<>
  65:/usr/include/c++/11.1.0/bits/allocator.h ****     class allocator<void>
  66:/usr/include/c++/11.1.0/bits/allocator.h ****     {
  67:/usr/include/c++/11.1.0/bits/allocator.h ****     public:
  68:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef void        value_type;
  69:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef size_t      size_type;
  70:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  71:/usr/include/c++/11.1.0/bits/allocator.h **** #if __cplusplus <= 201703L
  72:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef void*       pointer;
  73:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef const void* const_pointer;
  74:/usr/include/c++/11.1.0/bits/allocator.h **** 
  75:/usr/include/c++/11.1.0/bits/allocator.h ****       template<typename _Tp1>
  76:/usr/include/c++/11.1.0/bits/allocator.h **** 	struct rebind
  77:/usr/include/c++/11.1.0/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  78:/usr/include/c++/11.1.0/bits/allocator.h **** #else
  79:/usr/include/c++/11.1.0/bits/allocator.h ****       allocator() = default;
  80:/usr/include/c++/11.1.0/bits/allocator.h **** 
  81:/usr/include/c++/11.1.0/bits/allocator.h ****       template<typename _Up>
  82:/usr/include/c++/11.1.0/bits/allocator.h **** 	constexpr
  83:/usr/include/c++/11.1.0/bits/allocator.h **** 	allocator(const allocator<_Up>&) { }
  84:/usr/include/c++/11.1.0/bits/allocator.h **** #endif // ! C++20
  85:/usr/include/c++/11.1.0/bits/allocator.h **** 
  86:/usr/include/c++/11.1.0/bits/allocator.h **** #if __cplusplus >= 201103L && __cplusplus <= 201703L
  87:/usr/include/c++/11.1.0/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  88:/usr/include/c++/11.1.0/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  89:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  90:/usr/include/c++/11.1.0/bits/allocator.h **** 
  91:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef true_type is_always_equal;
  92:/usr/include/c++/11.1.0/bits/allocator.h **** 
  93:/usr/include/c++/11.1.0/bits/allocator.h ****       template<typename _Up, typename... _Args>
  94:/usr/include/c++/11.1.0/bits/allocator.h **** 	void
  95:/usr/include/c++/11.1.0/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  96:/usr/include/c++/11.1.0/bits/allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  97:/usr/include/c++/11.1.0/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  98:/usr/include/c++/11.1.0/bits/allocator.h **** 
  99:/usr/include/c++/11.1.0/bits/allocator.h ****       template<typename _Up>
 100:/usr/include/c++/11.1.0/bits/allocator.h **** 	void
 101:/usr/include/c++/11.1.0/bits/allocator.h **** 	destroy(_Up* __p)
 102:/usr/include/c++/11.1.0/bits/allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 103:/usr/include/c++/11.1.0/bits/allocator.h **** 	{ __p->~_Up(); }
 104:/usr/include/c++/11.1.0/bits/allocator.h **** #endif // C++11 to C++17
 105:/usr/include/c++/11.1.0/bits/allocator.h ****     };
 106:/usr/include/c++/11.1.0/bits/allocator.h **** 
 107:/usr/include/c++/11.1.0/bits/allocator.h ****   /**
 108:/usr/include/c++/11.1.0/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 109:/usr/include/c++/11.1.0/bits/allocator.h ****    *
 110:/usr/include/c++/11.1.0/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 111:/usr/include/c++/11.1.0/bits/allocator.h ****    *  for further details.
 112:/usr/include/c++/11.1.0/bits/allocator.h ****    *
 113:/usr/include/c++/11.1.0/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 114:/usr/include/c++/11.1.0/bits/allocator.h ****    */
 115:/usr/include/c++/11.1.0/bits/allocator.h ****   template<typename _Tp>
 116:/usr/include/c++/11.1.0/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 117:/usr/include/c++/11.1.0/bits/allocator.h ****     {
 118:/usr/include/c++/11.1.0/bits/allocator.h ****     public:
 119:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef _Tp        value_type;
 120:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef size_t     size_type;
 121:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 122:/usr/include/c++/11.1.0/bits/allocator.h **** #if __cplusplus <= 201703L
 123:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef _Tp*       pointer;
 124:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef const _Tp* const_pointer;
 125:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef _Tp&       reference;
 126:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef const _Tp& const_reference;
 127:/usr/include/c++/11.1.0/bits/allocator.h **** 
 128:/usr/include/c++/11.1.0/bits/allocator.h ****       template<typename _Tp1>
 129:/usr/include/c++/11.1.0/bits/allocator.h **** 	struct rebind
 130:/usr/include/c++/11.1.0/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 131:/usr/include/c++/11.1.0/bits/allocator.h **** #endif
 132:/usr/include/c++/11.1.0/bits/allocator.h **** 
 133:/usr/include/c++/11.1.0/bits/allocator.h **** #if __cplusplus >= 201103L
 134:/usr/include/c++/11.1.0/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 135:/usr/include/c++/11.1.0/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 136:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 137:/usr/include/c++/11.1.0/bits/allocator.h **** 
 138:/usr/include/c++/11.1.0/bits/allocator.h ****       typedef true_type is_always_equal;
 139:/usr/include/c++/11.1.0/bits/allocator.h **** #endif
 140:/usr/include/c++/11.1.0/bits/allocator.h **** 
 141:/usr/include/c++/11.1.0/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 142:/usr/include/c++/11.1.0/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 143:/usr/include/c++/11.1.0/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 144:/usr/include/c++/11.1.0/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 145:/usr/include/c++/11.1.0/bits/allocator.h **** 
 146:/usr/include/c++/11.1.0/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 147:/usr/include/c++/11.1.0/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 318              		.loc 4 147 7 view .LVU63
 319              	.LBB959:
 320              	.LBI959:
 321              		.file 5 "/usr/include/c++/11.1.0/ext/new_allocator.h"
   1:/usr/include/c++/11.1.0/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
   3:/usr/include/c++/11.1.0/ext/new_allocator.h **** // Copyright (C) 2001-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/ext/new_allocator.h **** //
   5:/usr/include/c++/11.1.0/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  11:/usr/include/c++/11.1.0/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  16:/usr/include/c++/11.1.0/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  20:/usr/include/c++/11.1.0/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  25:/usr/include/c++/11.1.0/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/11.1.0/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/11.1.0/ext/new_allocator.h ****  */
  28:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  29:/usr/include/c++/11.1.0/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/11.1.0/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  32:/usr/include/c++/11.1.0/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/11.1.0/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/11.1.0/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/11.1.0/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/11.1.0/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/11.1.0/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/11.1.0/ext/new_allocator.h **** #endif
  39:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  40:/usr/include/c++/11.1.0/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/11.1.0/ext/new_allocator.h **** {
  42:/usr/include/c++/11.1.0/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  44:/usr/include/c++/11.1.0/ext/new_allocator.h ****   /**
  45:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  46:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *  @ingroup allocators
  47:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *
  48:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *
  52:/usr/include/c++/11.1.0/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/c++/11.1.0/ext/new_allocator.h ****    */
  54:/usr/include/c++/11.1.0/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/c++/11.1.0/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/c++/11.1.0/ext/new_allocator.h ****     {
  57:/usr/include/c++/11.1.0/ext/new_allocator.h ****     public:
  58:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/c++/11.1.0/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  67:/usr/include/c++/11.1.0/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/c++/11.1.0/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/c++/11.1.0/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/c++/11.1.0/ext/new_allocator.h **** #endif
  71:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  72:/usr/include/c++/11.1.0/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/c++/11.1.0/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/c++/11.1.0/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/c++/11.1.0/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/usr/include/c++/11.1.0/ext/new_allocator.h **** #endif
  77:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  78:/usr/include/c++/11.1.0/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/c++/11.1.0/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  81:/usr/include/c++/11.1.0/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/usr/include/c++/11.1.0/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 322              		.loc 5 82 7 view .LVU64
 323              		.loc 5 82 7 is_stmt 0 view .LVU65
 324              	.LBE959:
 325              	.LBE958:
 326              	.LBE957:
 327              	.LBE956:
 328              	.LBB960:
 329              	.LBB955:
 193:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
 330              		.loc 3 193 51 view .LVU66
 331 0018 488D4710 		leaq	16(%rdi), %rax
 332 001c 488907   		movq	%rax, (%rdi)
 333              	.LVL18:
 193:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
 334              		.loc 3 193 51 view .LVU67
 335              	.LBE955:
 336              	.LBE960:
 526:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 527:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 337              		.loc 3 527 21 view .LVU68
 338 001f 4885F6   		testq	%rsi, %rsi
 339 0022 7467     		je	.L15
 340 0024 4889FB   		movq	%rdi, %rbx
 341              	.LBB961:
 342              	.LBB962:
 343              		.file 6 "/usr/include/c++/11.1.0/bits/char_traits.h"
   1:/usr/include/c++/11.1.0/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/c++/11.1.0/bits/char_traits.h **** 
   3:/usr/include/c++/11.1.0/bits/char_traits.h **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/bits/char_traits.h **** //
   5:/usr/include/c++/11.1.0/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/bits/char_traits.h **** // any later version.
  10:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  11:/usr/include/c++/11.1.0/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  16:/usr/include/c++/11.1.0/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  20:/usr/include/c++/11.1.0/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  25:/usr/include/c++/11.1.0/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/c++/11.1.0/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11.1.0/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/11.1.0/bits/char_traits.h ****  */
  29:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  30:/usr/include/c++/11.1.0/bits/char_traits.h **** //
  31:/usr/include/c++/11.1.0/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/11.1.0/bits/char_traits.h **** //
  33:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  34:/usr/include/c++/11.1.0/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/c++/11.1.0/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  37:/usr/include/c++/11.1.0/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  39:/usr/include/c++/11.1.0/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/c++/11.1.0/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/c++/11.1.0/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/c++/11.1.0/bits/char_traits.h **** #if __cplusplus > 201703L
  43:/usr/include/c++/11.1.0/bits/char_traits.h **** # include <compare>
  44:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
  45:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  46:/usr/include/c++/11.1.0/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  47:/usr/include/c++/11.1.0/bits/char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  48:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
  49:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  50:/usr/include/c++/11.1.0/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  51:/usr/include/c++/11.1.0/bits/char_traits.h **** {
  52:/usr/include/c++/11.1.0/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  53:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  54:/usr/include/c++/11.1.0/bits/char_traits.h ****   /**
  55:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  56:/usr/include/c++/11.1.0/bits/char_traits.h ****    *
  57:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  58:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  59:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  60:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  61:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  62:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  63:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  64:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
  65:/usr/include/c++/11.1.0/bits/char_traits.h ****     struct _Char_types
  66:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
  67:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef unsigned long   int_type;
  68:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef std::streampos  pos_type;
  69:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef std::streamoff  off_type;
  70:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  71:/usr/include/c++/11.1.0/bits/char_traits.h ****     };
  72:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  73:/usr/include/c++/11.1.0/bits/char_traits.h **** 
  74:/usr/include/c++/11.1.0/bits/char_traits.h ****   /**
  75:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  76:/usr/include/c++/11.1.0/bits/char_traits.h ****    *
  77:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  78:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  79:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  80:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  81:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  82:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  83:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  84:/usr/include/c++/11.1.0/bits/char_traits.h ****    *
  85:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  86:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  87:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  88:/usr/include/c++/11.1.0/bits/char_traits.h ****    */
  89:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
  90:/usr/include/c++/11.1.0/bits/char_traits.h ****     struct char_traits
  91:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
  92:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef _CharT                                    char_type;
  93:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  94:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  95:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  96:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  97:/usr/include/c++/11.1.0/bits/char_traits.h **** #if __cpp_lib_three_way_comparison
  98:/usr/include/c++/11.1.0/bits/char_traits.h ****       using comparison_category = std::strong_ordering;
  99:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 100:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 101:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
 102:/usr/include/c++/11.1.0/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
 103:/usr/include/c++/11.1.0/bits/char_traits.h ****       { __c1 = __c2; }
 104:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 105:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 106:/usr/include/c++/11.1.0/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 107:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return __c1 == __c2; }
 108:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 109:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 110:/usr/include/c++/11.1.0/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 111:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return __c1 < __c2; }
 112:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 113:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 114:/usr/include/c++/11.1.0/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 115:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 116:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 117:/usr/include/c++/11.1.0/bits/char_traits.h ****       length(const char_type* __s);
 118:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 119:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 120:/usr/include/c++/11.1.0/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 121:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 122:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 123:/usr/include/c++/11.1.0/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 124:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 125:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 126:/usr/include/c++/11.1.0/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 127:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 128:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 129:/usr/include/c++/11.1.0/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 130:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 131:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 132:/usr/include/c++/11.1.0/bits/char_traits.h ****       to_char_type(const int_type& __c)
 133:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 134:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 135:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 136:/usr/include/c++/11.1.0/bits/char_traits.h ****       to_int_type(const char_type& __c)
 137:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 138:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 139:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 140:/usr/include/c++/11.1.0/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 141:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return __c1 == __c2; }
 142:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 143:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 144:/usr/include/c++/11.1.0/bits/char_traits.h ****       eof()
 145:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 146:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 147:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 148:/usr/include/c++/11.1.0/bits/char_traits.h ****       not_eof(const int_type& __c)
 149:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 150:/usr/include/c++/11.1.0/bits/char_traits.h ****     };
 151:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 152:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 153:/usr/include/c++/11.1.0/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 154:/usr/include/c++/11.1.0/bits/char_traits.h ****     char_traits<_CharT>::
 155:/usr/include/c++/11.1.0/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 156:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 157:/usr/include/c++/11.1.0/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 158:/usr/include/c++/11.1.0/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 159:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  return -1;
 160:/usr/include/c++/11.1.0/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 161:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  return 1;
 162:/usr/include/c++/11.1.0/bits/char_traits.h ****       return 0;
 163:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 164:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 165:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 166:/usr/include/c++/11.1.0/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 167:/usr/include/c++/11.1.0/bits/char_traits.h ****     char_traits<_CharT>::
 168:/usr/include/c++/11.1.0/bits/char_traits.h ****     length(const char_type* __p)
 169:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 170:/usr/include/c++/11.1.0/bits/char_traits.h ****       std::size_t __i = 0;
 171:/usr/include/c++/11.1.0/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 172:/usr/include/c++/11.1.0/bits/char_traits.h ****         ++__i;
 173:/usr/include/c++/11.1.0/bits/char_traits.h ****       return __i;
 174:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 175:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 176:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 177:/usr/include/c++/11.1.0/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 178:/usr/include/c++/11.1.0/bits/char_traits.h ****     char_traits<_CharT>::
 179:/usr/include/c++/11.1.0/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 180:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 181:/usr/include/c++/11.1.0/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 182:/usr/include/c++/11.1.0/bits/char_traits.h ****         if (eq(__s[__i], __a))
 183:/usr/include/c++/11.1.0/bits/char_traits.h ****           return __s + __i;
 184:/usr/include/c++/11.1.0/bits/char_traits.h ****       return 0;
 185:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 186:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 187:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 188:/usr/include/c++/11.1.0/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 189:/usr/include/c++/11.1.0/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 190:/usr/include/c++/11.1.0/bits/char_traits.h ****     char_traits<_CharT>::
 191:/usr/include/c++/11.1.0/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 192:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 193:/usr/include/c++/11.1.0/bits/char_traits.h ****       if (__n == 0)
 194:/usr/include/c++/11.1.0/bits/char_traits.h **** 	return __s1;
 195:/usr/include/c++/11.1.0/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 196:/usr/include/c++/11.1.0/bits/char_traits.h ****       if (std::is_constant_evaluated())
 197:/usr/include/c++/11.1.0/bits/char_traits.h **** 	{
 198:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  if (__s1 > __s2 && __s1 < __s2 + __n)
 199:/usr/include/c++/11.1.0/bits/char_traits.h **** 	    std::copy_backward(__s2, __s2 + __n, __s1 + __n);
 200:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  else
 201:/usr/include/c++/11.1.0/bits/char_traits.h **** 	    std::copy(__s2, __s2 + __n, __s1);
 202:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  return __s1;
 203:/usr/include/c++/11.1.0/bits/char_traits.h **** 	}
 204:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 205:/usr/include/c++/11.1.0/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 206:/usr/include/c++/11.1.0/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 207:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 208:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 209:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 210:/usr/include/c++/11.1.0/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 211:/usr/include/c++/11.1.0/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 212:/usr/include/c++/11.1.0/bits/char_traits.h ****     char_traits<_CharT>::
 213:/usr/include/c++/11.1.0/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 214:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 215:/usr/include/c++/11.1.0/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 216:/usr/include/c++/11.1.0/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 217:/usr/include/c++/11.1.0/bits/char_traits.h ****       return __s1;
 218:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 219:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 220:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 221:/usr/include/c++/11.1.0/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 222:/usr/include/c++/11.1.0/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 223:/usr/include/c++/11.1.0/bits/char_traits.h ****     char_traits<_CharT>::
 224:/usr/include/c++/11.1.0/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 225:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 226:/usr/include/c++/11.1.0/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 227:/usr/include/c++/11.1.0/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 228:/usr/include/c++/11.1.0/bits/char_traits.h ****       return __s;
 229:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 230:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 231:/usr/include/c++/11.1.0/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 232:/usr/include/c++/11.1.0/bits/char_traits.h **** } // namespace
 233:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 234:/usr/include/c++/11.1.0/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 235:/usr/include/c++/11.1.0/bits/char_traits.h **** {
 236:/usr/include/c++/11.1.0/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 237:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 238:/usr/include/c++/11.1.0/bits/char_traits.h **** #if __cplusplus >= 201703L
 239:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 240:/usr/include/c++/11.1.0/bits/char_traits.h **** #if __cplusplus == 201703L
 241:/usr/include/c++/11.1.0/bits/char_traits.h **** // Unofficial macro indicating P0426R1 support
 242:/usr/include/c++/11.1.0/bits/char_traits.h **** # define __cpp_lib_constexpr_char_traits 201611L
 243:/usr/include/c++/11.1.0/bits/char_traits.h **** #else
 244:/usr/include/c++/11.1.0/bits/char_traits.h **** // Also support P1032R1 in C++20
 245:/usr/include/c++/11.1.0/bits/char_traits.h **** # define __cpp_lib_constexpr_char_traits 201811L
 246:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 247:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 248:/usr/include/c++/11.1.0/bits/char_traits.h ****   /**
 249:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 250:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  string are known at compile time.
 251:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @param  __s  The string.
 252:/usr/include/c++/11.1.0/bits/char_traits.h ****    *
 253:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 254:/usr/include/c++/11.1.0/bits/char_traits.h ****    */
 255:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 256:/usr/include/c++/11.1.0/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 257:/usr/include/c++/11.1.0/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 258:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 259:/usr/include/c++/11.1.0/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 260:/usr/include/c++/11.1.0/bits/char_traits.h ****       (void) __s;
 261:/usr/include/c++/11.1.0/bits/char_traits.h ****       // In constexpr contexts all strings should be constant.
 262:/usr/include/c++/11.1.0/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 263:/usr/include/c++/11.1.0/bits/char_traits.h **** #else
 264:/usr/include/c++/11.1.0/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 265:/usr/include/c++/11.1.0/bits/char_traits.h **** 	__s++;
 266:/usr/include/c++/11.1.0/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 267:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 268:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 269:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 270:/usr/include/c++/11.1.0/bits/char_traits.h ****   /**
 271:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 272:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  known at compile time.
 273:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @param  __a  The character array.
 274:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @param  __n  Number of characters.
 275:/usr/include/c++/11.1.0/bits/char_traits.h ****    *
 276:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 277:/usr/include/c++/11.1.0/bits/char_traits.h ****    */
 278:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<typename _CharT>
 279:/usr/include/c++/11.1.0/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 280:/usr/include/c++/11.1.0/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 281:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 282:/usr/include/c++/11.1.0/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 283:/usr/include/c++/11.1.0/bits/char_traits.h ****       (void) __a;
 284:/usr/include/c++/11.1.0/bits/char_traits.h ****       (void) __n;
 285:/usr/include/c++/11.1.0/bits/char_traits.h ****       // In constexpr contexts all character arrays should be constant.
 286:/usr/include/c++/11.1.0/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 287:/usr/include/c++/11.1.0/bits/char_traits.h **** #else
 288:/usr/include/c++/11.1.0/bits/char_traits.h ****       size_t __i = 0;
 289:/usr/include/c++/11.1.0/bits/char_traits.h ****       while (__i < __n && __builtin_constant_p(__a[__i]))
 290:/usr/include/c++/11.1.0/bits/char_traits.h **** 	__i++;
 291:/usr/include/c++/11.1.0/bits/char_traits.h ****       return __i == __n;
 292:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 293:/usr/include/c++/11.1.0/bits/char_traits.h ****     }
 294:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 295:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 296:/usr/include/c++/11.1.0/bits/char_traits.h ****   // 21.1
 297:/usr/include/c++/11.1.0/bits/char_traits.h ****   /**
 298:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 299:/usr/include/c++/11.1.0/bits/char_traits.h ****    *
 300:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 301:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 302:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 303:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 304:/usr/include/c++/11.1.0/bits/char_traits.h ****    *
 305:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 306:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 307:/usr/include/c++/11.1.0/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 308:/usr/include/c++/11.1.0/bits/char_traits.h ****   */
 309:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<class _CharT>
 310:/usr/include/c++/11.1.0/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 311:/usr/include/c++/11.1.0/bits/char_traits.h ****     { };
 312:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 313:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 314:/usr/include/c++/11.1.0/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 315:/usr/include/c++/11.1.0/bits/char_traits.h ****   template<>
 316:/usr/include/c++/11.1.0/bits/char_traits.h ****     struct char_traits<char>
 317:/usr/include/c++/11.1.0/bits/char_traits.h ****     {
 318:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef char              char_type;
 319:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef int               int_type;
 320:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef streampos         pos_type;
 321:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef streamoff         off_type;
 322:/usr/include/c++/11.1.0/bits/char_traits.h ****       typedef mbstate_t         state_type;
 323:/usr/include/c++/11.1.0/bits/char_traits.h **** #if __cpp_lib_three_way_comparison
 324:/usr/include/c++/11.1.0/bits/char_traits.h ****       using comparison_category = strong_ordering;
 325:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 326:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 327:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 328:/usr/include/c++/11.1.0/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 329:/usr/include/c++/11.1.0/bits/char_traits.h ****       { __c1 = __c2; }
 330:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 331:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 332:/usr/include/c++/11.1.0/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 333:/usr/include/c++/11.1.0/bits/char_traits.h ****       { return __c1 == __c2; }
 334:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 335:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 336:/usr/include/c++/11.1.0/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 337:/usr/include/c++/11.1.0/bits/char_traits.h ****       {
 338:/usr/include/c++/11.1.0/bits/char_traits.h **** 	// LWG 467.
 339:/usr/include/c++/11.1.0/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 340:/usr/include/c++/11.1.0/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 341:/usr/include/c++/11.1.0/bits/char_traits.h ****       }
 342:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 343:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 344:/usr/include/c++/11.1.0/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 345:/usr/include/c++/11.1.0/bits/char_traits.h ****       {
 346:/usr/include/c++/11.1.0/bits/char_traits.h **** 	if (__n == 0)
 347:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  return 0;
 348:/usr/include/c++/11.1.0/bits/char_traits.h **** #if __cplusplus >= 201703L
 349:/usr/include/c++/11.1.0/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 350:/usr/include/c++/11.1.0/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 351:/usr/include/c++/11.1.0/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 352:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  {
 353:/usr/include/c++/11.1.0/bits/char_traits.h **** 	    for (size_t __i = 0; __i < __n; ++__i)
 354:/usr/include/c++/11.1.0/bits/char_traits.h **** 	      if (lt(__s1[__i], __s2[__i]))
 355:/usr/include/c++/11.1.0/bits/char_traits.h **** 		return -1;
 356:/usr/include/c++/11.1.0/bits/char_traits.h **** 	      else if (lt(__s2[__i], __s1[__i]))
 357:/usr/include/c++/11.1.0/bits/char_traits.h **** 		return 1;
 358:/usr/include/c++/11.1.0/bits/char_traits.h **** 	    return 0;
 359:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  }
 360:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 361:/usr/include/c++/11.1.0/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 362:/usr/include/c++/11.1.0/bits/char_traits.h ****       }
 363:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 364:/usr/include/c++/11.1.0/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 365:/usr/include/c++/11.1.0/bits/char_traits.h ****       length(const char_type* __s)
 366:/usr/include/c++/11.1.0/bits/char_traits.h ****       {
 367:/usr/include/c++/11.1.0/bits/char_traits.h **** #if __cplusplus >= 201703L
 368:/usr/include/c++/11.1.0/bits/char_traits.h **** 	if (__constant_string_p(__s))
 369:/usr/include/c++/11.1.0/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 370:/usr/include/c++/11.1.0/bits/char_traits.h **** #endif
 371:/usr/include/c++/11.1.0/bits/char_traits.h **** 	return __builtin_strlen(__s);
 344              		.loc 6 371 25 view .LVU69
 345 0027 4889F7   		movq	%rsi, %rdi
 346              	.LVL19:
 347              		.loc 6 371 25 view .LVU70
 348 002a 4889F5   		movq	%rsi, %rbp
 349              	.LVL20:
 350              		.loc 6 371 25 view .LVU71
 351              	.LBE962:
 352              	.LBI961:
 365:/usr/include/c++/11.1.0/bits/char_traits.h ****       {
 353              		.loc 6 365 7 is_stmt 1 view .LVU72
 354              	.LBB963:
 355              		.loc 6 371 2 view .LVU73
 356              		.loc 6 371 25 is_stmt 0 view .LVU74
 357 002d E8000000 		call	strlen@PLT
 357      00
 358              	.LVL21:
 359              		.loc 6 371 25 view .LVU75
 360              	.LBE963:
 361              	.LBE961:
 362              	.LBB964:
 363              	.LBB965:
 364              	.LBB966:
 365              	.LBB967:
 366              	.LBB968:
 367              	.LBB969:
 368              		.file 7 "/usr/include/c++/11.1.0/bits/basic_string.tcc"
   1:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
   3:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/bits/basic_string.tcc **** //
   5:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // any later version.
  10:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  11:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  16:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  20:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  25:/usr/include/c++/11.1.0/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/c++/11.1.0/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/11.1.0/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/11.1.0/bits/basic_string.tcc ****  */
  29:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  30:/usr/include/c++/11.1.0/bits/basic_string.tcc **** //
  31:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/11.1.0/bits/basic_string.tcc **** //
  33:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  34:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/c++/11.1.0/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  39:/usr/include/c++/11.1.0/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/c++/11.1.0/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  42:/usr/include/c++/11.1.0/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  44:/usr/include/c++/11.1.0/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  46:/usr/include/c++/11.1.0/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/11.1.0/bits/basic_string.tcc **** {
  48:/usr/include/c++/11.1.0/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  50:/usr/include/c++/11.1.0/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  52:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  56:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     void
  58:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     {
  61:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	return;
  63:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  64:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
  66:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  {
  69:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      {
  71:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      }
  79:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      {
  81:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		return;
  86:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      }
  87:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      {
  89:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		return;
  94:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      }
  95:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  }
  96:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	else
  97:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  {
  98:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  }
 105:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       else
 106:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	{
 107:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    {
 110:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    }
 115:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  else
 116:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    {
 117:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    }
 122:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	}
 124:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 125:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     }
 129:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 130:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     {
 135:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 140:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	{
 145:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	}
 150:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 151:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     }
 155:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 156:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       void
 163:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       {
 167:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 170:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  {
 172:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  }
 175:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 176:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	__try
 177:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  {
 178:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      {
 180:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		  {
 182:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		  }
 190:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	      }
 193:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  }
 194:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  {
 196:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  }
 199:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 200:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       }
 202:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 203:/usr/include/c++/11.1.0/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/c++/11.1.0/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       void
 206:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 207:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       {
 210:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 212:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 213:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 215:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 369              		.loc 7 215 12 view .LVU76
 370 0032 48890424 		movq	%rax, (%rsp)
 371              	.LBE969:
 372              	.LBE968:
 373              	.LBE967:
 374              	.LBE966:
 375              	.LBE965:
 376              	.LBE964:
 377              		.loc 3 527 21 view .LVU77
 378 0036 4C8D6405 		leaq	0(%rbp,%rax), %r12
 378      00
 379              	.LVL22:
 380              	.LBB995:
 381              	.LBI964:
 263:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
 382              		.loc 3 263 9 is_stmt 1 view .LVU78
 383              	.LBB993:
 384              	.LBB991:
 385              	.LBI966:
 243:/usr/include/c++/11.1.0/bits/basic_string.h **** 			 std::__false_type)
 386              		.loc 3 243 9 view .LVU79
 387              	.LBB989:
 388              	.LBB987:
 389              	.LBI968:
 206:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 390              		.loc 7 206 7 view .LVU80
 391              	.LBB985:
 216:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 217:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 392              		.loc 7 217 2 is_stmt 0 view .LVU81
 393 003b 4883F80F 		cmpq	$15, %rax
 394 003f 7618     		jbe	.L16
 218:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  {
 219:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 395              		.loc 7 219 13 view .LVU82
 396 0041 4889E6   		movq	%rsp, %rsi
 397 0044 31D2     		xorl	%edx, %edx
 398 0046 4889DF   		movq	%rbx, %rdi
 399 0049 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT
 399      00
 400              	.LVL23:
 401              	.LBB970:
 402              	.LBI970:
 178:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 403              		.loc 3 178 7 is_stmt 1 view .LVU83
 404              	.LBB971:
 179:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 405              		.loc 3 179 26 is_stmt 0 view .LVU84
 406 004e 488903   		movq	%rax, (%rbx)
 407              	.LVL24:
 179:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 408              		.loc 3 179 26 view .LVU85
 409              	.LBE971:
 410              	.LBE970:
 411              	.LBB972:
 412              	.LBI972:
 210:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 413              		.loc 3 210 7 is_stmt 1 view .LVU86
 414              	.LBB973:
 211:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 415              		.loc 3 211 31 is_stmt 0 view .LVU87
 416 0051 488B0424 		movq	(%rsp), %rax
 417 0055 48894310 		movq	%rax, 16(%rbx)
 418              	.LVL25:
 419              	.L16:
 211:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 420              		.loc 3 211 31 view .LVU88
 421              	.LBE973:
 422              	.LBE972:
 423              	.LBB974:
 424              	.LBI974:
 186:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 425              		.loc 3 186 7 is_stmt 1 view .LVU89
 186:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 426              		.loc 3 186 7 is_stmt 0 view .LVU90
 427              	.LBE974:
 220:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 221:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  }
 222:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 223:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	__try
 225:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 428              		.loc 7 225 25 view .LVU91
 429 0059 488B3B   		movq	(%rbx), %rdi
 430 005c 4C89E2   		movq	%r12, %rdx
 431 005f 4889EE   		movq	%rbp, %rsi
 432 0062 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_@PLT
 432      00
 433              	.LVL26:
 226:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	__catch(...)
 227:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  {
 228:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    _M_dispose();
 229:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	    __throw_exception_again;
 230:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	  }
 231:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 
 232:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 	_M_set_length(__dnew);
 434              		.loc 7 232 15 view .LVU92
 435 0067 488B0424 		movq	(%rsp), %rax
 436              	.LVL27:
 437              	.LBB975:
 438              	.LBI975:
 214:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 439              		.loc 3 214 7 is_stmt 1 view .LVU93
 440              	.LBB976:
 441              	.LBB977:
 442              	.LBI977:
 182:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_string_length = __length; }
 443              		.loc 3 182 7 view .LVU94
 444              	.LBE977:
 445              	.LBB979:
 446              	.LBB980:
 329:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 447              		.loc 6 329 14 is_stmt 0 view .LVU95
 448 006b 488B13   		movq	(%rbx), %rdx
 449              	.LBE980:
 450              	.LBE979:
 451              	.LBB982:
 452              	.LBB978:
 183:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 453              		.loc 3 183 26 view .LVU96
 454 006e 48894308 		movq	%rax, 8(%rbx)
 455              	.LVL28:
 183:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 456              		.loc 3 183 26 view .LVU97
 457              	.LBE978:
 458              	.LBE982:
 459              	.LBB983:
 460              	.LBI983:
 186:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 461              		.loc 3 186 7 is_stmt 1 view .LVU98
 186:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 462              		.loc 3 186 7 is_stmt 0 view .LVU99
 463              	.LBE983:
 464              	.LBB984:
 465              	.LBI979:
 328:/usr/include/c++/11.1.0/bits/char_traits.h ****       { __c1 = __c2; }
 466              		.loc 6 328 7 is_stmt 1 view .LVU100
 467              	.LBB981:
 329:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 468              		.loc 6 329 9 view .LVU101
 329:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 469              		.loc 6 329 14 is_stmt 0 view .LVU102
 470 0072 C6040200 		movb	$0, (%rdx,%rax)
 471              	.LVL29:
 329:/usr/include/c++/11.1.0/bits/char_traits.h **** 
 472              		.loc 6 329 14 view .LVU103
 473              	.LBE981:
 474              	.LBE984:
 475              	.LBE976:
 476              	.LBE975:
 477              	.LBE985:
 478              	.LBE987:
 479              	.LBE989:
 480              	.LBE991:
 481              	.LBE993:
 482              	.LBE995:
 483              	.LBE953:
 484              		.loc 3 527 77 view .LVU104
 485 0076 488B4424 		movq	8(%rsp), %rax
 485      08
 486 007b 64482B04 		subq	%fs:40, %rax
 486      25280000 
 486      00
 487 0084 7411     		je	.L17
 488 0086 E8000000 		call	__stack_chk_fail@PLT
 488      00
 489              	.LVL30:
 490              	.L15:
 491              	.LBB997:
 492              	.LBB996:
 263:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
 493              		.loc 3 263 9 is_stmt 1 view .LVU105
 494              	.LBB994:
 495              	.LBB992:
 243:/usr/include/c++/11.1.0/bits/basic_string.h **** 			 std::__false_type)
 496              		.loc 3 243 9 view .LVU106
 497              	.LBB990:
 498              	.LBB988:
 206:/usr/include/c++/11.1.0/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 499              		.loc 7 206 7 view .LVU107
 500              	.LBB986:
 212:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 501              		.loc 7 212 28 is_stmt 0 view .LVU108
 502 008b 488D3D00 		leaq	.LC0(%rip), %rdi
 502      000000
 503              	.LVL31:
 212:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 504              		.loc 7 212 28 view .LVU109
 505 0092 E8000000 		call	_ZSt19__throw_logic_errorPKc@PLT
 505      00
 506              	.LVL32:
 507              	.L17:
 212:/usr/include/c++/11.1.0/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 508              		.loc 7 212 28 view .LVU110
 509              	.LBE986:
 510              	.LBE988:
 511              	.LBE990:
 512              	.LBE992:
 513              	.LBE994:
 514              	.LBE996:
 515              	.LBE997:
 516              		.loc 3 527 77 view .LVU111
 517 0097 4883C410 		addq	$16, %rsp
 518              		.cfi_def_cfa_offset 32
 519 009b 5B       		popq	%rbx
 520              		.cfi_def_cfa_offset 24
 521              	.LVL33:
 522              		.loc 3 527 77 view .LVU112
 523 009c 5D       		popq	%rbp
 524              		.cfi_def_cfa_offset 16
 525              	.LVL34:
 526              		.loc 3 527 77 view .LVU113
 527 009d 415C     		popq	%r12
 528              		.cfi_def_cfa_offset 8
 529 009f C3       		ret
 530              		.cfi_endproc
 531              	.LFE5257:
 533              		.section	.rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1,"aMS",@progbit
 534              	.LC1:
 535 0000 7175616E 		.string	"quantum/serial_link/tests/triple_buffered_object_tests.cpp"
 535      74756D2F 
 535      73657269 
 535      616C5F6C 
 535      696E6B2F 
 536              	.LC2:
 537 003b 77726974 		.string	"writes_and_reads_object"
 537      65735F61 
 537      6E645F72 
 537      65616473 
 537      5F6F626A 
 538              	.LC3:
 539 0053 54726970 		.string	"TripleBufferedObject"
 539      6C654275 
 539      66666572 
 539      65644F62 
 539      6A656374 
 540              	.LC4:
 541 0068 646F6573 		.string	"does_not_read_empty"
 541      5F6E6F74 
 541      5F726561 
 541      645F656D 
 541      70747900 
 542              	.LC5:
 543 007c 77726974 		.string	"writes_twice_and_reads_object"
 543      65735F74 
 543      77696365 
 543      5F616E64 
 543      5F726561 
 544              	.LC6:
 545 009a 70657266 		.string	"performs_another_write_in_the_middle_of_read"
 545      6F726D73 
 545      5F616E6F 
 545      74686572 
 545      5F777269 
 546              	.LC7:
 547 00c7 70657266 		.string	"performs_two_writes_in_the_middle_of_read"
 547      6F726D73 
 547      5F74776F 
 547      5F777269 
 547      7465735F 
 548              		.section	.text.startup._Z41__static_initialization_and_destruction_0ii.constprop.0,"ax",@progbits
 550              	_Z41__static_initialization_and_destruction_0ii.constprop.0:
 551              	.LFB5259:
 552              		.file 8 "quantum/serial_link/tests/triple_buffered_object_tests.cpp"
   1:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** /*
   2:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** The MIT License (MIT)
   3:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
   4:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** Copyright (c) 2016 Fred Sundvik
   5:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
   6:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** Permission is hereby granted, free of charge, to any person obtaining a copy
   7:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** of this software and associated documentation files (the "Software"), to deal
   8:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** in the Software without restriction, including without limitation the rights
   9:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  10:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** copies of the Software, and to permit persons to whom the Software is
  11:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** furnished to do so, subject to the following conditions:
  12:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  13:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** The above copyright notice and this permission notice shall be included in all
  14:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** copies or substantial portions of the Software.
  15:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  16:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  18:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  19:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  20:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  21:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  22:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** SOFTWARE.
  23:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** */
  24:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  25:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** #include "gtest/gtest.h"
  26:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** extern "C" {
  27:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** #include "serial_link/protocol/triple_buffered_object.h"
  28:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
  29:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  30:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** struct test_object{
  31:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint8_t state;
  32:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint32_t buffer[3];
  33:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** };
  34:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  35:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** test_object test_object;
  36:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** class TripleBufferedObject : public testing::Test {
  38:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
  39:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     TripleBufferedObject() {
  40:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****         triple_buffer_init((triple_buffer_object_t*)&test_object);
  41:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     }
  42:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** };
  43:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** TEST_F(TripleBufferedObject, writes_and_reads_object) {
  45:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
  46:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 0x3456ABCC);
  48:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
  49:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** TEST_F(TripleBufferedObject, does_not_read_empty) {
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
  52:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
  53:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** TEST_F(TripleBufferedObject, writes_twice_and_reads_object) {
  55:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
  56:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  57:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x44778899;
  58:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 0x44778899);
  60:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
  61:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** TEST_F(TripleBufferedObject, performs_another_write_in_the_middle_of_read) {
  63:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
  64:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  65:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint32_t* read = triple_buffer_read(&test_object);
  66:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
  67:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*read, 1);
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
  71:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
  72:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** TEST_F(TripleBufferedObject, performs_two_writes_in_the_middle_of_read) {
  74:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
  75:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  76:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint32_t* read = triple_buffer_read(&test_object);
  77:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
  78:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  79:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 3;
  80:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*read, 1);
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
  84:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 553              		.loc 8 84 1 is_stmt 1 view -0
 554              		.cfi_startproc
 555 0000 4157     		pushq	%r15
 556              		.cfi_def_cfa_offset 16
 557              		.cfi_offset 15, -16
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 558              		.loc 8 44 1 is_stmt 0 view .LVU115
 559 0002 4C8D3D00 		leaq	.LC1(%rip), %r15
 559      000000
 560              		.loc 8 84 1 view .LVU116
 561 0009 4156     		pushq	%r14
 562              		.cfi_def_cfa_offset 24
 563              		.cfi_offset 14, -24
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 564              		.loc 8 44 1 view .LVU117
 565 000b 4C8D3500 		leaq	_ZN7testing4Test16TearDownTestCaseEv(%rip), %r14
 565      000000
 566              		.loc 8 84 1 view .LVU118
 567 0012 4155     		pushq	%r13
 568              		.cfi_def_cfa_offset 32
 569              		.cfi_offset 13, -32
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 570              		.loc 8 44 1 view .LVU119
 571 0014 4C8D2D00 		leaq	.LC3(%rip), %r13
 571      000000
 572              		.loc 8 84 1 view .LVU120
 573 001b 4154     		pushq	%r12
 574              		.cfi_def_cfa_offset 40
 575              		.cfi_offset 12, -40
 576 001d 55       		pushq	%rbp
 577              		.cfi_def_cfa_offset 48
 578              		.cfi_offset 6, -48
 579              		.file 9 "/usr/include/c++/11.1.0/iostream"
   1:/usr/include/c++/11.1.0/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/11.1.0/iostream **** 
   3:/usr/include/c++/11.1.0/iostream **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/iostream **** //
   5:/usr/include/c++/11.1.0/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/iostream **** // any later version.
  10:/usr/include/c++/11.1.0/iostream **** 
  11:/usr/include/c++/11.1.0/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/iostream **** 
  16:/usr/include/c++/11.1.0/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/iostream **** 
  20:/usr/include/c++/11.1.0/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/iostream **** 
  25:/usr/include/c++/11.1.0/iostream **** /** @file include/iostream
  26:/usr/include/c++/11.1.0/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/11.1.0/iostream ****  */
  28:/usr/include/c++/11.1.0/iostream **** 
  29:/usr/include/c++/11.1.0/iostream **** //
  30:/usr/include/c++/11.1.0/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/11.1.0/iostream **** //
  32:/usr/include/c++/11.1.0/iostream **** 
  33:/usr/include/c++/11.1.0/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/11.1.0/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/11.1.0/iostream **** 
  36:/usr/include/c++/11.1.0/iostream **** #pragma GCC system_header
  37:/usr/include/c++/11.1.0/iostream **** 
  38:/usr/include/c++/11.1.0/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/11.1.0/iostream **** #include <ostream>
  40:/usr/include/c++/11.1.0/iostream **** #include <istream>
  41:/usr/include/c++/11.1.0/iostream **** 
  42:/usr/include/c++/11.1.0/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/11.1.0/iostream **** {
  44:/usr/include/c++/11.1.0/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/11.1.0/iostream **** 
  46:/usr/include/c++/11.1.0/iostream ****   /**
  47:/usr/include/c++/11.1.0/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/11.1.0/iostream ****    *
  49:/usr/include/c++/11.1.0/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/11.1.0/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/11.1.0/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/11.1.0/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/11.1.0/iostream ****    *
  54:/usr/include/c++/11.1.0/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/11.1.0/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/11.1.0/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/11.1.0/iostream ****    *  manual linked to above.
  58:/usr/include/c++/11.1.0/iostream ****   */
  59:/usr/include/c++/11.1.0/iostream ****   ///@{
  60:/usr/include/c++/11.1.0/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/11.1.0/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/11.1.0/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/11.1.0/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/11.1.0/iostream **** 
  65:/usr/include/c++/11.1.0/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/11.1.0/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/11.1.0/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/11.1.0/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/11.1.0/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/11.1.0/iostream **** #endif
  71:/usr/include/c++/11.1.0/iostream ****   ///@}
  72:/usr/include/c++/11.1.0/iostream **** 
  73:/usr/include/c++/11.1.0/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/11.1.0/iostream ****   static ios_base::Init __ioinit;
 580              		.loc 9 74 25 view .LVU121
 581 001e 488D2D00 		leaq	_ZStL8__ioinit(%rip), %rbp
 581      000000
 582              		.loc 8 84 1 view .LVU122
 583 0025 53       		pushq	%rbx
 584              		.cfi_def_cfa_offset 56
 585              		.cfi_offset 3, -56
 586              		.loc 9 74 25 view .LVU123
 587 0026 4889EF   		movq	%rbp, %rdi
 588              		.loc 8 84 1 view .LVU124
 589 0029 4883EC68 		subq	$104, %rsp
 590              		.cfi_def_cfa_offset 160
 591              		.loc 8 84 1 view .LVU125
 592 002d 64488B04 		movq	%fs:40, %rax
 592      25280000 
 592      00
 593 0036 48894424 		movq	%rax, 88(%rsp)
 593      58
 594 003b 31C0     		xorl	%eax, %eax
 595              	.LVL35:
 596              	.LBB1113:
 597              	.LBB1114:
 598              	.LBB1115:
 483:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   virtual Test* CreateTest() { return new TestClass; }
 485:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 486:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 487:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #if GTEST_OS_WINDOWS
 488:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 489:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Predicate-formatters for implementing the HRESULT checking macros
 490:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // {ASSERT|EXPECT}_HRESULT_{SUCCEEDED|FAILED}
 491:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // We pass a long instead of HRESULT to avoid causing an
 492:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // include dependency for the HRESULT type.
 493:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ AssertionResult IsHRESULTSuccess(const char* expr,
 494:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                             long hr);  // NOLINT
 495:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** GTEST_API_ AssertionResult IsHRESULTFailure(const char* expr,
 496:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****                                             long hr);  // NOLINT
 497:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 498:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** #endif  // GTEST_OS_WINDOWS
 499:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 500:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** // Types of SetUpTestCase() and TearDownTestCase() functions.
 501:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** typedef void (*SetUpTestCaseFunc)();
 502:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** typedef void (*TearDownTestCaseFunc)();
 503:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 504:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** struct CodeLocation {
 505:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   CodeLocation(const string& a_file, int a_line) : file(a_file), line(a_line) {}
 599              		.loc 2 505 52 view .LVU126
 600 003d 4C8D6424 		leaq	48(%rsp), %r12
 600      30
 601              	.LBE1115:
 602              	.LBE1114:
 603              	.LBE1113:
 604              		.loc 9 74 25 view .LVU127
 605 0042 E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT
 605      00
 606              	.LVL36:
 607 0047 488B3D00 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rdi
 607      000000
 608 004e 488D1500 		leaq	__dso_handle(%rip), %rdx
 608      000000
 609 0055 4889EE   		movq	%rbp, %rsi
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 610              		.loc 8 44 1 view .LVU128
 611 0058 488D6C24 		leaq	16(%rsp), %rbp
 611      10
 612              		.loc 9 74 25 view .LVU129
 613 005d E8000000 		call	__cxa_atexit@PLT
 613      00
 614              	.LVL37:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 615              		.loc 8 44 1 view .LVU130
 616 0062 BF080000 		movl	$8, %edi
 616      00
 617 0067 E8000000 		call	_Znwm@PLT
 617      00
 618              	.LVL38:
 619 006c 4C89FE   		movq	%r15, %rsi
 620 006f 4889EF   		movq	%rbp, %rdi
 621 0072 4889C3   		movq	%rax, %rbx
 622              	.LVL39:
 623              	.LBB1120:
 624              	.LBI1120:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 625              		.loc 2 482 7 is_stmt 1 view .LVU131
 626              	.LBB1121:
 627              	.LBB1122:
 628              	.LBI1122:
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 629              		.loc 2 473 3 view .LVU132
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 630              		.loc 2 473 3 is_stmt 0 view .LVU133
 631              	.LBE1122:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 632              		.loc 2 482 7 view .LVU134
 633 0075 488D0500 		leaq	16+_ZTVN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_Tes
 633      000000
 634              	.LVL40:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 635              		.loc 2 482 7 view .LVU135
 636 007c 488903   		movq	%rax, (%rbx)
 637              	.LVL41:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 638              		.loc 2 482 7 view .LVU136
 639              	.LBE1121:
 640              	.LBE1120:
 641              	.LBB1123:
 642              	.LBI1123:
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 643              		.loc 2 447 8 is_stmt 1 view .LVU137
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 644              		.loc 2 447 8 is_stmt 0 view .LVU138
 645              	.LBE1123:
 646              	.LBB1124:
 647              	.LBI1124:
 144:/usr/include/c++/11.1.0/bits/allocator.h **** 
 648              		.loc 4 144 7 is_stmt 1 view .LVU139
 649              	.LBB1125:
 650              	.LBI1125:
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 651              		.loc 5 79 7 view .LVU140
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 652              		.loc 5 79 7 is_stmt 0 view .LVU141
 653              	.LBE1125:
 654              	.LBE1124:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 655              		.loc 8 44 1 view .LVU142
 656 007f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0
 656      00
 657              	.LVL42:
 658              	.LBB1126:
 659              	.LBI1113:
 660              		.loc 2 505 3 is_stmt 1 view .LVU143
 661              	.LBB1118:
 662              	.LBB1116:
 663              		.loc 2 505 52 is_stmt 0 view .LVU144
 664 0084 4889EE   		movq	%rbp, %rsi
 665 0087 4C89E7   		movq	%r12, %rdi
 666 008a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 666      00
 667              	.LVL43:
 668              	.LBE1116:
 669              	.LBE1118:
 670              	.LBE1126:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 671              		.loc 8 44 1 view .LVU145
 672 008f 31D2     		xorl	%edx, %edx
 673 0091 4C8D0D00 		leaq	_ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E(%rip), %r9
 673      000000
 674 0098 31C9     		xorl	%ecx, %ecx
 675              	.LBB1127:
 676              	.LBB1119:
 677              	.LBB1117:
 678              		.loc 2 505 66 view .LVU146
 679 009a C7442450 		movl	$44, 80(%rsp)
 679      2C000000 
 680              	.LVL44:
 681              		.loc 2 505 66 view .LVU147
 682              	.LBE1117:
 683              	.LBE1119:
 684              	.LBE1127:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 685              		.loc 8 44 1 view .LVU148
 686 00a2 4D89E0   		movq	%r12, %r8
 687 00a5 488D3500 		leaq	.LC2(%rip), %rsi
 687      000000
 688 00ac 4C89EF   		movq	%r13, %rdi
 689 00af 50       		pushq	%rax
 690              		.cfi_def_cfa_offset 168
 691 00b0 53       		pushq	%rbx
 692              		.cfi_def_cfa_offset 176
 693 00b1 488D1D00 		leaq	_ZN7testing4Test13SetUpTestCaseEv(%rip), %rbx
 693      000000
 694 00b8 4156     		pushq	%r14
 695              		.cfi_def_cfa_offset 184
 696 00ba 53       		pushq	%rbx
 697              		.cfi_def_cfa_offset 192
 698 00bb E8000000 		call	_ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_
 698      00
 699              	.LVL45:
 700              	.LBB1128:
 701              	.LBB1129:
 702              	.LBB1130:
 528:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 529:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 530:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 531:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __n  Number of characters.
 532:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __c  Character to use.
 533:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 534:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 535:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 536:/usr/include/c++/11.1.0/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 537:/usr/include/c++/11.1.0/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 538:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 539:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 540:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 541:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 542:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_construct(__n, __c); }
 543:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 544:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
 545:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 546:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Move construct string.
 547:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string.
 548:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 549:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 550:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 551:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 552:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 553:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 554:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 555:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__str._M_is_local())
 556:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
 557:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 558:/usr/include/c++/11.1.0/bits/basic_string.h **** 			      _S_local_capacity + 1);
 559:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
 560:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else
 561:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
 562:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_data(__str._M_data());
 563:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 564:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
 565:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 566:/usr/include/c++/11.1.0/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 567:/usr/include/c++/11.1.0/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 568:/usr/include/c++/11.1.0/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 569:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_length(__str.length());
 570:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 571:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__str._M_set_length(0);
 572:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 573:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 574:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 575:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 576:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 577:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 578:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 579:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 580:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 581:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 582:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 583:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 584:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 585:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 586:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 587:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 588:/usr/include/c++/11.1.0/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 589:/usr/include/c++/11.1.0/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 590:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 591:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__str._M_is_local())
 592:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
 593:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 594:/usr/include/c++/11.1.0/bits/basic_string.h **** 			      _S_local_capacity + 1);
 595:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_length(__str.length());
 596:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    __str._M_set_length(0);
 597:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
 598:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 599:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 600:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
 601:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_data(__str._M_data());
 602:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_length(__str.length());
 603:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 604:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 605:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    __str._M_set_length(0);
 606:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
 607:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else
 608:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 609:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 610:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 611:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
 612:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 613:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 614:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 615:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __beg  Start of range.
 616:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __end  End of range.
 617:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 618:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 619:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
 620:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _InputIterator,
 621:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 622:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
 623:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _InputIterator>
 624:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 625:/usr/include/c++/11.1.0/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 626:/usr/include/c++/11.1.0/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 627:/usr/include/c++/11.1.0/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 628:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 629:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 630:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
 631:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 632:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 633:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 634:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 635:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 636:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 637:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 638:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 639:/usr/include/c++/11.1.0/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 640:/usr/include/c++/11.1.0/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 641:/usr/include/c++/11.1.0/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 642:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 643:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 644:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 645:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 646:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 647:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 648:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 649:/usr/include/c++/11.1.0/bits/basic_string.h **** 	explicit
 650:/usr/include/c++/11.1.0/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 651:/usr/include/c++/11.1.0/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 652:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++17
 653:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 654:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 655:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 656:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       ~basic_string()
 658:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 703              		.loc 3 658 19 view .LVU149
 704 00c0 4883C420 		addq	$32, %rsp
 705              		.cfi_def_cfa_offset 160
 706 00c4 4C89E7   		movq	%r12, %rdi
 707              	.LBE1130:
 708              	.LBE1129:
 709              	.LBE1128:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 710              		.loc 8 44 1 view .LVU150
 711 00c7 48890500 		movq	%rax, _ZN49TripleBufferedObject_writes_and_reads_object_Test10test_info_E(%rip)
 711      000000
 712              	.LBB1136:
 713              	.LBI1128:
 504:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   CodeLocation(const string& a_file, int a_line) : file(a_file), line(a_line) {}
 714              		.loc 2 504 8 is_stmt 1 view .LVU151
 715              	.LBB1135:
 716              	.LBI1129:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 717              		.loc 3 657 7 view .LVU152
 718              	.LBB1134:
 719              		.loc 3 658 19 is_stmt 0 view .LVU153
 720 00ce E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 720      00
 721              	.LVL46:
 722              	.LBB1131:
 723              	.LBI1131:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 724              		.loc 3 150 14 is_stmt 1 view .LVU154
 725              	.LBB1132:
 726              	.LBI1132:
 148:/usr/include/c++/11.1.0/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 149:/usr/include/c++/11.1.0/bits/allocator.h **** 
 150:/usr/include/c++/11.1.0/bits/allocator.h **** #if __cplusplus >= 201103L
 151:/usr/include/c++/11.1.0/bits/allocator.h ****       // Avoid implicit deprecation.
 152:/usr/include/c++/11.1.0/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 153:/usr/include/c++/11.1.0/bits/allocator.h **** #endif
 154:/usr/include/c++/11.1.0/bits/allocator.h **** 
 155:/usr/include/c++/11.1.0/bits/allocator.h ****       template<typename _Tp1>
 156:/usr/include/c++/11.1.0/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 157:/usr/include/c++/11.1.0/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 158:/usr/include/c++/11.1.0/bits/allocator.h **** 
 159:/usr/include/c++/11.1.0/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 160:/usr/include/c++/11.1.0/bits/allocator.h ****       constexpr
 161:/usr/include/c++/11.1.0/bits/allocator.h **** #endif
 162:/usr/include/c++/11.1.0/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 727              		.loc 4 162 7 view .LVU155
 728              	.LBB1133:
 729              	.LBI1133:
  83:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  84:/usr/include/c++/11.1.0/ext/new_allocator.h ****       template<typename _Tp1>
  85:/usr/include/c++/11.1.0/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/usr/include/c++/11.1.0/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
  88:/usr/include/c++/11.1.0/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/usr/include/c++/11.1.0/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 730              		.loc 5 89 7 view .LVU156
 731              		.loc 5 89 7 is_stmt 0 view .LVU157
 732              	.LBE1133:
 733              	.LBE1132:
 734              	.LBE1131:
 735              	.LBE1134:
 736              	.LBE1135:
 737              	.LBE1136:
 738              	.LBB1137:
 739              	.LBI1137:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 740              		.loc 3 657 7 is_stmt 1 view .LVU158
 741              	.LBB1138:
 742              		.loc 3 658 19 is_stmt 0 view .LVU159
 743 00d3 4889EF   		movq	%rbp, %rdi
 744 00d6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 744      00
 745              	.LVL47:
 746              	.LBB1139:
 747              	.LBI1139:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 748              		.loc 3 150 14 is_stmt 1 view .LVU160
 749              	.LBB1140:
 750              	.LBI1140:
 751              		.loc 4 162 7 view .LVU161
 752              	.LBB1141:
 753              	.LBI1141:
 754              		.loc 5 89 7 view .LVU162
 755              		.loc 5 89 7 is_stmt 0 view .LVU163
 756              	.LBE1141:
 757              	.LBE1140:
 758              	.LBE1139:
 759              	.LBE1138:
 760              	.LBE1137:
 761              	.LBB1142:
 762              	.LBI1142:
 763              		.loc 4 162 7 is_stmt 1 view .LVU164
 764              	.LBB1143:
 765              	.LBI1143:
 766              		.loc 5 89 7 view .LVU165
 767              		.loc 5 89 7 is_stmt 0 view .LVU166
 768              	.LBE1143:
 769              	.LBE1142:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 770              		.loc 8 50 1 view .LVU167
 771 00db BF080000 		movl	$8, %edi
 771      00
 772 00e0 E8000000 		call	_Znwm@PLT
 772      00
 773              	.LVL48:
 774              	.LBB1144:
 775              	.LBI1144:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 776              		.loc 2 482 7 is_stmt 1 view .LVU168
 777              	.LBB1145:
 778              	.LBB1146:
 779              	.LBI1146:
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 780              		.loc 2 473 3 view .LVU169
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 781              		.loc 2 473 3 is_stmt 0 view .LVU170
 782              	.LBE1146:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 783              		.loc 2 482 7 view .LVU171
 784 00e5 488D0D00 		leaq	16+_ZTVN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE(
 784      000000
 785              	.LBE1145:
 786              	.LBE1144:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 787              		.loc 8 50 1 view .LVU172
 788 00ec 4C89FE   		movq	%r15, %rsi
 789 00ef 4889EF   		movq	%rbp, %rdi
 790              	.LBB1148:
 791              	.LBB1147:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 792              		.loc 2 482 7 view .LVU173
 793 00f2 488908   		movq	%rcx, (%rax)
 794 00f5 48894424 		movq	%rax, 8(%rsp)
 794      08
 795              	.LVL49:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 796              		.loc 2 482 7 view .LVU174
 797              	.LBE1147:
 798              	.LBE1148:
 799              	.LBB1149:
 800              	.LBI1149:
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 801              		.loc 2 447 8 is_stmt 1 view .LVU175
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 802              		.loc 2 447 8 is_stmt 0 view .LVU176
 803              	.LBE1149:
 804              	.LBB1150:
 805              	.LBI1150:
 144:/usr/include/c++/11.1.0/bits/allocator.h **** 
 806              		.loc 4 144 7 is_stmt 1 view .LVU177
 807              	.LBB1151:
 808              	.LBI1151:
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 809              		.loc 5 79 7 view .LVU178
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 810              		.loc 5 79 7 is_stmt 0 view .LVU179
 811              	.LBE1151:
 812              	.LBE1150:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 813              		.loc 8 50 1 view .LVU180
 814 00fa E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0
 814      00
 815              	.LVL50:
 816              	.LBB1152:
 817              	.LBI1152:
 818              		.loc 2 505 3 is_stmt 1 view .LVU181
 819              	.LBB1153:
 820              	.LBB1154:
 821              		.loc 2 505 52 is_stmt 0 view .LVU182
 822 00ff 4889EE   		movq	%rbp, %rsi
 823 0102 4C89E7   		movq	%r12, %rdi
 824 0105 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 824      00
 825              	.LVL51:
 826              	.LBE1154:
 827              	.LBE1153:
 828              	.LBE1152:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 829              		.loc 8 50 1 view .LVU183
 830 010a 4D89E0   		movq	%r12, %r8
 831 010d 31C9     		xorl	%ecx, %ecx
 832 010f 4C89EF   		movq	%r13, %rdi
 833              	.LBB1157:
 834              	.LBB1156:
 835              	.LBB1155:
 836              		.loc 2 505 66 view .LVU184
 837 0112 C7442450 		movl	$50, 80(%rsp)
 837      32000000 
 838              	.LVL52:
 839              		.loc 2 505 66 view .LVU185
 840              	.LBE1155:
 841              	.LBE1156:
 842              	.LBE1157:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 843              		.loc 8 50 1 view .LVU186
 844 011a 4C8D0D00 		leaq	_ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E(%rip), %r9
 844      000000
 845 0121 488D3500 		leaq	.LC4(%rip), %rsi
 845      000000
 846 0128 52       		pushq	%rdx
 847              		.cfi_def_cfa_offset 168
 848 0129 488B4424 		movq	16(%rsp), %rax
 848      10
 849 012e 31D2     		xorl	%edx, %edx
 850 0130 50       		pushq	%rax
 851              		.cfi_def_cfa_offset 176
 852 0131 4156     		pushq	%r14
 853              		.cfi_def_cfa_offset 184
 854 0133 53       		pushq	%rbx
 855              		.cfi_def_cfa_offset 192
 856 0134 E8000000 		call	_ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_
 856      00
 857              	.LVL53:
 858              	.LBB1158:
 859              	.LBB1159:
 860              	.LBB1160:
 861              		.loc 3 658 19 view .LVU187
 862 0139 4883C420 		addq	$32, %rsp
 863              		.cfi_def_cfa_offset 160
 864 013d 4C89E7   		movq	%r12, %rdi
 865              	.LBE1160:
 866              	.LBE1159:
 867              	.LBE1158:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 868              		.loc 8 50 1 view .LVU188
 869 0140 48890500 		movq	%rax, _ZN45TripleBufferedObject_does_not_read_empty_Test10test_info_E(%rip)
 869      000000
 870              	.LBB1166:
 871              	.LBI1158:
 504:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   CodeLocation(const string& a_file, int a_line) : file(a_file), line(a_line) {}
 872              		.loc 2 504 8 is_stmt 1 view .LVU189
 873              	.LBB1165:
 874              	.LBI1159:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 875              		.loc 3 657 7 view .LVU190
 876              	.LBB1164:
 877              		.loc 3 658 19 is_stmt 0 view .LVU191
 878 0147 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 878      00
 879              	.LVL54:
 880              	.LBB1161:
 881              	.LBI1161:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 882              		.loc 3 150 14 is_stmt 1 view .LVU192
 883              	.LBB1162:
 884              	.LBI1162:
 885              		.loc 4 162 7 view .LVU193
 886              	.LBB1163:
 887              	.LBI1163:
 888              		.loc 5 89 7 view .LVU194
 889              		.loc 5 89 7 is_stmt 0 view .LVU195
 890              	.LBE1163:
 891              	.LBE1162:
 892              	.LBE1161:
 893              	.LBE1164:
 894              	.LBE1165:
 895              	.LBE1166:
 896              	.LBB1167:
 897              	.LBI1167:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 898              		.loc 3 657 7 is_stmt 1 view .LVU196
 899              	.LBB1168:
 900              		.loc 3 658 19 is_stmt 0 view .LVU197
 901 014c 4889EF   		movq	%rbp, %rdi
 902 014f E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 902      00
 903              	.LVL55:
 904              	.LBB1169:
 905              	.LBI1169:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 906              		.loc 3 150 14 is_stmt 1 view .LVU198
 907              	.LBB1170:
 908              	.LBI1170:
 909              		.loc 4 162 7 view .LVU199
 910              	.LBB1171:
 911              	.LBI1171:
 912              		.loc 5 89 7 view .LVU200
 913              		.loc 5 89 7 is_stmt 0 view .LVU201
 914              	.LBE1171:
 915              	.LBE1170:
 916              	.LBE1169:
 917              	.LBE1168:
 918              	.LBE1167:
 919              	.LBB1172:
 920              	.LBI1172:
 921              		.loc 4 162 7 is_stmt 1 view .LVU202
 922              	.LBB1173:
 923              	.LBI1173:
 924              		.loc 5 89 7 view .LVU203
 925              		.loc 5 89 7 is_stmt 0 view .LVU204
 926              	.LBE1173:
 927              	.LBE1172:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 928              		.loc 8 54 1 view .LVU205
 929 0154 BF080000 		movl	$8, %edi
 929      00
 930 0159 E8000000 		call	_Znwm@PLT
 930      00
 931              	.LVL56:
 932              	.LBB1174:
 933              	.LBI1174:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 934              		.loc 2 482 7 is_stmt 1 view .LVU206
 935              	.LBB1175:
 936              	.LBB1176:
 937              	.LBI1176:
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 938              		.loc 2 473 3 view .LVU207
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 939              		.loc 2 473 3 is_stmt 0 view .LVU208
 940              	.LBE1176:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 941              		.loc 2 482 7 view .LVU209
 942 015e 488D0D00 		leaq	16+_ZTVN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_obje
 942      000000
 943              	.LBE1175:
 944              	.LBE1174:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 945              		.loc 8 54 1 view .LVU210
 946 0165 4C89FE   		movq	%r15, %rsi
 947 0168 4889EF   		movq	%rbp, %rdi
 948              	.LBB1178:
 949              	.LBB1177:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 950              		.loc 2 482 7 view .LVU211
 951 016b 488908   		movq	%rcx, (%rax)
 952 016e 48894424 		movq	%rax, 8(%rsp)
 952      08
 953              	.LVL57:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 954              		.loc 2 482 7 view .LVU212
 955              	.LBE1177:
 956              	.LBE1178:
 957              	.LBB1179:
 958              	.LBI1179:
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 959              		.loc 2 447 8 is_stmt 1 view .LVU213
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 960              		.loc 2 447 8 is_stmt 0 view .LVU214
 961              	.LBE1179:
 962              	.LBB1180:
 963              	.LBI1180:
 144:/usr/include/c++/11.1.0/bits/allocator.h **** 
 964              		.loc 4 144 7 is_stmt 1 view .LVU215
 965              	.LBB1181:
 966              	.LBI1181:
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 967              		.loc 5 79 7 view .LVU216
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 968              		.loc 5 79 7 is_stmt 0 view .LVU217
 969              	.LBE1181:
 970              	.LBE1180:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 971              		.loc 8 54 1 view .LVU218
 972 0173 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0
 972      00
 973              	.LVL58:
 974              	.LBB1182:
 975              	.LBI1182:
 976              		.loc 2 505 3 is_stmt 1 view .LVU219
 977              	.LBB1183:
 978              	.LBB1184:
 979              		.loc 2 505 52 is_stmt 0 view .LVU220
 980 0178 4889EE   		movq	%rbp, %rsi
 981 017b 4C89E7   		movq	%r12, %rdi
 982 017e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 982      00
 983              	.LVL59:
 984              	.LBE1184:
 985              	.LBE1183:
 986              	.LBE1182:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 987              		.loc 8 54 1 view .LVU221
 988 0183 4D89E0   		movq	%r12, %r8
 989 0186 31D2     		xorl	%edx, %edx
 990 0188 4C89EF   		movq	%r13, %rdi
 991              	.LBB1187:
 992              	.LBB1186:
 993              	.LBB1185:
 994              		.loc 2 505 66 view .LVU222
 995 018b C7442450 		movl	$54, 80(%rsp)
 995      36000000 
 996              	.LVL60:
 997              		.loc 2 505 66 view .LVU223
 998              	.LBE1185:
 999              	.LBE1186:
 1000              	.LBE1187:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1001              		.loc 8 54 1 view .LVU224
 1002 0193 4C8D0D00 		leaq	_ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E(%rip), %r9
 1002      000000
 1003 019a 488D3500 		leaq	.LC5(%rip), %rsi
 1003      000000
 1004 01a1 51       		pushq	%rcx
 1005              		.cfi_def_cfa_offset 168
 1006 01a2 488B4424 		movq	16(%rsp), %rax
 1006      10
 1007 01a7 31C9     		xorl	%ecx, %ecx
 1008 01a9 50       		pushq	%rax
 1009              		.cfi_def_cfa_offset 176
 1010 01aa 4156     		pushq	%r14
 1011              		.cfi_def_cfa_offset 184
 1012 01ac 53       		pushq	%rbx
 1013              		.cfi_def_cfa_offset 192
 1014 01ad E8000000 		call	_ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_
 1014      00
 1015              	.LVL61:
 1016              	.LBB1188:
 1017              	.LBB1189:
 1018              	.LBB1190:
 1019              		.loc 3 658 19 view .LVU225
 1020 01b2 4883C420 		addq	$32, %rsp
 1021              		.cfi_def_cfa_offset 160
 1022 01b6 4C89E7   		movq	%r12, %rdi
 1023              	.LBE1190:
 1024              	.LBE1189:
 1025              	.LBE1188:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1026              		.loc 8 54 1 view .LVU226
 1027 01b9 48890500 		movq	%rax, _ZN55TripleBufferedObject_writes_twice_and_reads_object_Test10test_info_E(%rip)
 1027      000000
 1028              	.LBB1196:
 1029              	.LBI1188:
 504:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   CodeLocation(const string& a_file, int a_line) : file(a_file), line(a_line) {}
 1030              		.loc 2 504 8 is_stmt 1 view .LVU227
 1031              	.LBB1195:
 1032              	.LBI1189:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 1033              		.loc 3 657 7 view .LVU228
 1034              	.LBB1194:
 1035              		.loc 3 658 19 is_stmt 0 view .LVU229
 1036 01c0 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 1036      00
 1037              	.LVL62:
 1038              	.LBB1191:
 1039              	.LBI1191:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 1040              		.loc 3 150 14 is_stmt 1 view .LVU230
 1041              	.LBB1192:
 1042              	.LBI1192:
 1043              		.loc 4 162 7 view .LVU231
 1044              	.LBB1193:
 1045              	.LBI1193:
 1046              		.loc 5 89 7 view .LVU232
 1047              		.loc 5 89 7 is_stmt 0 view .LVU233
 1048              	.LBE1193:
 1049              	.LBE1192:
 1050              	.LBE1191:
 1051              	.LBE1194:
 1052              	.LBE1195:
 1053              	.LBE1196:
 1054              	.LBB1197:
 1055              	.LBI1197:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 1056              		.loc 3 657 7 is_stmt 1 view .LVU234
 1057              	.LBB1198:
 1058              		.loc 3 658 19 is_stmt 0 view .LVU235
 1059 01c5 4889EF   		movq	%rbp, %rdi
 1060 01c8 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 1060      00
 1061              	.LVL63:
 1062              	.LBB1199:
 1063              	.LBI1199:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 1064              		.loc 3 150 14 is_stmt 1 view .LVU236
 1065              	.LBB1200:
 1066              	.LBI1200:
 1067              		.loc 4 162 7 view .LVU237
 1068              	.LBB1201:
 1069              	.LBI1201:
 1070              		.loc 5 89 7 view .LVU238
 1071              		.loc 5 89 7 is_stmt 0 view .LVU239
 1072              	.LBE1201:
 1073              	.LBE1200:
 1074              	.LBE1199:
 1075              	.LBE1198:
 1076              	.LBE1197:
 1077              	.LBB1202:
 1078              	.LBI1202:
 1079              		.loc 4 162 7 is_stmt 1 view .LVU240
 1080              	.LBB1203:
 1081              	.LBI1203:
 1082              		.loc 5 89 7 view .LVU241
 1083              		.loc 5 89 7 is_stmt 0 view .LVU242
 1084              	.LBE1203:
 1085              	.LBE1202:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1086              		.loc 8 62 1 view .LVU243
 1087 01cd BF080000 		movl	$8, %edi
 1087      00
 1088 01d2 E8000000 		call	_Znwm@PLT
 1088      00
 1089              	.LVL64:
 1090              	.LBB1204:
 1091              	.LBI1204:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1092              		.loc 2 482 7 is_stmt 1 view .LVU244
 1093              	.LBB1205:
 1094              	.LBB1206:
 1095              	.LBI1206:
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 1096              		.loc 2 473 3 view .LVU245
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 1097              		.loc 2 473 3 is_stmt 0 view .LVU246
 1098              	.LBE1206:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1099              		.loc 2 482 7 view .LVU247
 1100 01d7 488D1500 		leaq	16+_ZTVN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_t
 1100      000000
 1101              	.LBE1205:
 1102              	.LBE1204:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1103              		.loc 8 62 1 view .LVU248
 1104 01de 4C89FE   		movq	%r15, %rsi
 1105 01e1 4889EF   		movq	%rbp, %rdi
 1106              	.LBB1208:
 1107              	.LBB1207:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1108              		.loc 2 482 7 view .LVU249
 1109 01e4 488910   		movq	%rdx, (%rax)
 1110 01e7 48894424 		movq	%rax, 8(%rsp)
 1110      08
 1111              	.LVL65:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1112              		.loc 2 482 7 view .LVU250
 1113              	.LBE1207:
 1114              	.LBE1208:
 1115              	.LBB1209:
 1116              	.LBI1209:
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 1117              		.loc 2 447 8 is_stmt 1 view .LVU251
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 1118              		.loc 2 447 8 is_stmt 0 view .LVU252
 1119              	.LBE1209:
 1120              	.LBB1210:
 1121              	.LBI1210:
 144:/usr/include/c++/11.1.0/bits/allocator.h **** 
 1122              		.loc 4 144 7 is_stmt 1 view .LVU253
 1123              	.LBB1211:
 1124              	.LBI1211:
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 1125              		.loc 5 79 7 view .LVU254
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 1126              		.loc 5 79 7 is_stmt 0 view .LVU255
 1127              	.LBE1211:
 1128              	.LBE1210:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1129              		.loc 8 62 1 view .LVU256
 1130 01ec E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0
 1130      00
 1131              	.LVL66:
 1132              	.LBB1212:
 1133              	.LBI1212:
 1134              		.loc 2 505 3 is_stmt 1 view .LVU257
 1135              	.LBB1213:
 1136              	.LBB1214:
 1137              		.loc 2 505 52 is_stmt 0 view .LVU258
 1138 01f1 4889EE   		movq	%rbp, %rsi
 1139 01f4 4C89E7   		movq	%r12, %rdi
 1140 01f7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1140      00
 1141              	.LVL67:
 1142              	.LBE1214:
 1143              	.LBE1213:
 1144              	.LBE1212:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1145              		.loc 8 62 1 view .LVU259
 1146 01fc 31D2     		xorl	%edx, %edx
 1147 01fe 4C8D0D00 		leaq	_ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E(%rip), %r9
 1147      000000
 1148 0205 31C9     		xorl	%ecx, %ecx
 1149              	.LBB1217:
 1150              	.LBB1216:
 1151              	.LBB1215:
 1152              		.loc 2 505 66 view .LVU260
 1153 0207 C7442450 		movl	$62, 80(%rsp)
 1153      3E000000 
 1154              	.LVL68:
 1155              		.loc 2 505 66 view .LVU261
 1156              	.LBE1215:
 1157              	.LBE1216:
 1158              	.LBE1217:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1159              		.loc 8 62 1 view .LVU262
 1160 020f 4D89E0   		movq	%r12, %r8
 1161 0212 4C89EF   		movq	%r13, %rdi
 1162 0215 56       		pushq	%rsi
 1163              		.cfi_def_cfa_offset 168
 1164 0216 488B4424 		movq	16(%rsp), %rax
 1164      10
 1165 021b 488D3500 		leaq	.LC6(%rip), %rsi
 1165      000000
 1166 0222 50       		pushq	%rax
 1167              		.cfi_def_cfa_offset 176
 1168 0223 4156     		pushq	%r14
 1169              		.cfi_def_cfa_offset 184
 1170 0225 53       		pushq	%rbx
 1171              		.cfi_def_cfa_offset 192
 1172 0226 E8000000 		call	_ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_
 1172      00
 1173              	.LVL69:
 1174              	.LBB1218:
 1175              	.LBB1219:
 1176              	.LBB1220:
 1177              		.loc 3 658 19 view .LVU263
 1178 022b 4883C420 		addq	$32, %rsp
 1179              		.cfi_def_cfa_offset 160
 1180 022f 4C89E7   		movq	%r12, %rdi
 1181              	.LBE1220:
 1182              	.LBE1219:
 1183              	.LBE1218:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1184              		.loc 8 62 1 view .LVU264
 1185 0232 48890500 		movq	%rax, _ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test10test_info_
 1185      000000
 1186              	.LBB1226:
 1187              	.LBI1218:
 504:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   CodeLocation(const string& a_file, int a_line) : file(a_file), line(a_line) {}
 1188              		.loc 2 504 8 is_stmt 1 view .LVU265
 1189              	.LBB1225:
 1190              	.LBI1219:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 1191              		.loc 3 657 7 view .LVU266
 1192              	.LBB1224:
 1193              		.loc 3 658 19 is_stmt 0 view .LVU267
 1194 0239 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 1194      00
 1195              	.LVL70:
 1196              	.LBB1221:
 1197              	.LBI1221:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 1198              		.loc 3 150 14 is_stmt 1 view .LVU268
 1199              	.LBB1222:
 1200              	.LBI1222:
 1201              		.loc 4 162 7 view .LVU269
 1202              	.LBB1223:
 1203              	.LBI1223:
 1204              		.loc 5 89 7 view .LVU270
 1205              		.loc 5 89 7 is_stmt 0 view .LVU271
 1206              	.LBE1223:
 1207              	.LBE1222:
 1208              	.LBE1221:
 1209              	.LBE1224:
 1210              	.LBE1225:
 1211              	.LBE1226:
 1212              	.LBB1227:
 1213              	.LBI1227:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 1214              		.loc 3 657 7 is_stmt 1 view .LVU272
 1215              	.LBB1228:
 1216              		.loc 3 658 19 is_stmt 0 view .LVU273
 1217 023e 4889EF   		movq	%rbp, %rdi
 1218 0241 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 1218      00
 1219              	.LVL71:
 1220              	.LBB1229:
 1221              	.LBI1229:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 1222              		.loc 3 150 14 is_stmt 1 view .LVU274
 1223              	.LBB1230:
 1224              	.LBI1230:
 1225              		.loc 4 162 7 view .LVU275
 1226              	.LBB1231:
 1227              	.LBI1231:
 1228              		.loc 5 89 7 view .LVU276
 1229              		.loc 5 89 7 is_stmt 0 view .LVU277
 1230              	.LBE1231:
 1231              	.LBE1230:
 1232              	.LBE1229:
 1233              	.LBE1228:
 1234              	.LBE1227:
 1235              	.LBB1232:
 1236              	.LBI1232:
 1237              		.loc 4 162 7 is_stmt 1 view .LVU278
 1238              	.LBB1233:
 1239              	.LBI1233:
 1240              		.loc 5 89 7 view .LVU279
 1241              		.loc 5 89 7 is_stmt 0 view .LVU280
 1242              	.LBE1233:
 1243              	.LBE1232:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1244              		.loc 8 73 1 view .LVU281
 1245 0246 BF080000 		movl	$8, %edi
 1245      00
 1246 024b E8000000 		call	_Znwm@PLT
 1246      00
 1247              	.LVL72:
 1248              	.LBB1234:
 1249              	.LBI1234:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1250              		.loc 2 482 7 is_stmt 1 view .LVU282
 1251              	.LBB1235:
 1252              	.LBB1236:
 1253              	.LBI1236:
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 1254              		.loc 2 473 3 view .LVU283
 473:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** 
 1255              		.loc 2 473 3 is_stmt 0 view .LVU284
 1256              	.LBE1236:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1257              		.loc 2 482 7 view .LVU285
 1258 0250 488D0D00 		leaq	16+_ZTVN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_
 1258      000000
 1259              	.LBE1235:
 1260              	.LBE1234:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1261              		.loc 8 73 1 view .LVU286
 1262 0257 4C89FE   		movq	%r15, %rsi
 1263 025a 4889EF   		movq	%rbp, %rdi
 1264              	.LBB1238:
 1265              	.LBB1237:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1266              		.loc 2 482 7 view .LVU287
 1267 025d 488908   		movq	%rcx, (%rax)
 1268 0260 48894424 		movq	%rax, 8(%rsp)
 1268      08
 1269              	.LVL73:
 482:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****  public:
 1270              		.loc 2 482 7 view .LVU288
 1271              	.LBE1237:
 1272              	.LBE1238:
 1273              	.LBB1239:
 1274              	.LBI1239:
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 1275              		.loc 2 447 8 is_stmt 1 view .LVU289
 447:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   // The compiler is required to allocate a different
 1276              		.loc 2 447 8 is_stmt 0 view .LVU290
 1277              	.LBE1239:
 1278              	.LBB1240:
 1279              	.LBI1240:
 144:/usr/include/c++/11.1.0/bits/allocator.h **** 
 1280              		.loc 4 144 7 is_stmt 1 view .LVU291
 1281              	.LBB1241:
 1282              	.LBI1241:
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 1283              		.loc 5 79 7 view .LVU292
  79:/usr/include/c++/11.1.0/ext/new_allocator.h **** 
 1284              		.loc 5 79 7 is_stmt 0 view .LVU293
 1285              	.LBE1241:
 1286              	.LBE1240:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1287              		.loc 8 73 1 view .LVU294
 1288 0265 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0
 1288      00
 1289              	.LVL74:
 1290              	.LBB1242:
 1291              	.LBI1242:
 1292              		.loc 2 505 3 is_stmt 1 view .LVU295
 1293              	.LBB1243:
 1294              	.LBB1244:
 1295              		.loc 2 505 52 is_stmt 0 view .LVU296
 1296 026a 4C89E7   		movq	%r12, %rdi
 1297 026d 4889EE   		movq	%rbp, %rsi
 1298 0270 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@PLT
 1298      00
 1299              	.LVL75:
 1300              	.LBE1244:
 1301              	.LBE1243:
 1302              	.LBE1242:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1303              		.loc 8 73 1 view .LVU297
 1304 0275 31C9     		xorl	%ecx, %ecx
 1305 0277 31D2     		xorl	%edx, %edx
 1306 0279 4C8D0D00 		leaq	_ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E(%rip), %r9
 1306      000000
 1307              	.LBB1247:
 1308              	.LBB1246:
 1309              	.LBB1245:
 1310              		.loc 2 505 66 view .LVU298
 1311 0280 C7442450 		movl	$73, 80(%rsp)
 1311      49000000 
 1312              	.LVL76:
 1313              		.loc 2 505 66 view .LVU299
 1314              	.LBE1245:
 1315              	.LBE1246:
 1316              	.LBE1247:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1317              		.loc 8 73 1 view .LVU300
 1318 0288 4D89E0   		movq	%r12, %r8
 1319 028b 488D3500 		leaq	.LC7(%rip), %rsi
 1319      000000
 1320 0292 57       		pushq	%rdi
 1321              		.cfi_def_cfa_offset 168
 1322 0293 488B4424 		movq	16(%rsp), %rax
 1322      10
 1323 0298 4C89EF   		movq	%r13, %rdi
 1324 029b 50       		pushq	%rax
 1325              		.cfi_def_cfa_offset 176
 1326 029c 4156     		pushq	%r14
 1327              		.cfi_def_cfa_offset 184
 1328 029e 53       		pushq	%rbx
 1329              		.cfi_def_cfa_offset 192
 1330 029f E8000000 		call	_ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_
 1330      00
 1331              	.LVL77:
 1332              	.LBB1248:
 1333              	.LBB1249:
 1334              	.LBB1250:
 1335              		.loc 3 658 19 view .LVU301
 1336 02a4 4883C420 		addq	$32, %rsp
 1337              		.cfi_def_cfa_offset 160
 1338 02a8 4C89E7   		movq	%r12, %rdi
 1339              	.LBE1250:
 1340              	.LBE1249:
 1341              	.LBE1248:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1342              		.loc 8 73 1 view .LVU302
 1343 02ab 48890500 		movq	%rax, _ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test10test_info_E(%
 1343      000000
 1344              	.LBB1256:
 1345              	.LBI1248:
 504:quantum/serial_link/tests/gtest/./internal/gtest-internal.h ****   CodeLocation(const string& a_file, int a_line) : file(a_file), line(a_line) {}
 1346              		.loc 2 504 8 is_stmt 1 view .LVU303
 1347              	.LBB1255:
 1348              	.LBI1249:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 1349              		.loc 3 657 7 view .LVU304
 1350              	.LBB1254:
 1351              		.loc 3 658 19 is_stmt 0 view .LVU305
 1352 02b2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 1352      00
 1353              	.LVL78:
 1354              	.LBB1251:
 1355              	.LBI1251:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 1356              		.loc 3 150 14 is_stmt 1 view .LVU306
 1357              	.LBB1252:
 1358              	.LBI1252:
 1359              		.loc 4 162 7 view .LVU307
 1360              	.LBB1253:
 1361              	.LBI1253:
 1362              		.loc 5 89 7 view .LVU308
 1363              		.loc 5 89 7 is_stmt 0 view .LVU309
 1364              	.LBE1253:
 1365              	.LBE1252:
 1366              	.LBE1251:
 1367              	.LBE1254:
 1368              	.LBE1255:
 1369              	.LBE1256:
 1370              	.LBB1257:
 1371              	.LBI1257:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 1372              		.loc 3 657 7 is_stmt 1 view .LVU310
 1373              	.LBB1258:
 1374              		.loc 3 658 19 is_stmt 0 view .LVU311
 1375 02b7 4889EF   		movq	%rbp, %rdi
 1376 02ba E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 1376      00
 1377              	.LVL79:
 1378              	.LBB1259:
 1379              	.LBI1259:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 1380              		.loc 3 150 14 is_stmt 1 view .LVU312
 1381              	.LBB1260:
 1382              	.LBI1260:
 1383              		.loc 4 162 7 view .LVU313
 1384              	.LBB1261:
 1385              	.LBI1261:
 1386              		.loc 5 89 7 view .LVU314
 1387              		.loc 5 89 7 is_stmt 0 view .LVU315
 1388              	.LBE1261:
 1389              	.LBE1260:
 1390              	.LBE1259:
 1391              	.LBE1258:
 1392              	.LBE1257:
 1393              	.LBB1262:
 1394              	.LBI1262:
 1395              		.loc 4 162 7 is_stmt 1 view .LVU316
 1396              	.LBB1263:
 1397              	.LBI1263:
 1398              		.loc 5 89 7 view .LVU317
 1399              		.loc 5 89 7 is_stmt 0 view .LVU318
 1400              	.LBE1263:
 1401              	.LBE1262:
 1402              		.loc 8 84 1 view .LVU319
 1403 02bf 488B4424 		movq	88(%rsp), %rax
 1403      58
 1404 02c4 64482B04 		subq	%fs:40, %rax
 1404      25280000 
 1404      00
 1405 02cd 7405     		je	.L22
 1406 02cf E8000000 		call	__stack_chk_fail@PLT
 1406      00
 1407              	.LVL80:
 1408              	.L22:
 1409 02d4 4883C468 		addq	$104, %rsp
 1410              		.cfi_def_cfa_offset 56
 1411 02d8 5B       		popq	%rbx
 1412              		.cfi_def_cfa_offset 48
 1413 02d9 5D       		popq	%rbp
 1414              		.cfi_def_cfa_offset 40
 1415 02da 415C     		popq	%r12
 1416              		.cfi_def_cfa_offset 32
 1417 02dc 415D     		popq	%r13
 1418              		.cfi_def_cfa_offset 24
 1419 02de 415E     		popq	%r14
 1420              		.cfi_def_cfa_offset 16
 1421 02e0 415F     		popq	%r15
 1422              		.cfi_def_cfa_offset 8
 1423 02e2 C3       		ret
 1424              		.cfi_endproc
 1425              	.LFE5259:
 1427              		.section	.rodata._ZNK7testing15AssertionResult7messageEv.str1.1,"aMS",@progbits,1
 1428              	.LC8:
 1429 0000 00       		.string	""
 1430              		.section	.text._ZNK7testing15AssertionResult7messageEv,"axG",@progbits,_ZNK7testing15AssertionResu
 1431              		.align 2
 1432              		.weak	_ZNK7testing15AssertionResult7messageEv
 1434              	_ZNK7testing15AssertionResult7messageEv:
 1435              	.LVL81:
 1436              	.LFB4124:
 297:quantum/serial_link/tests/gtest/gtest.h ****     return message_.get() != NULL ?  message_->c_str() : "";
 1437              		.loc 1 297 15 is_stmt 1 view -0
 1438              		.cfi_startproc
 298:quantum/serial_link/tests/gtest/gtest.h ****   }
 1439              		.loc 1 298 5 view .LVU321
 1440              	.LBB1264:
 1441              	.LBI1264:
 1442              		.file 10 "quantum/serial_link/tests/gtest/./internal/./gtest-port.h"
   1:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Copyright 2005, Google Inc.
   2:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // All rights reserved.
   3:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
   4:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Redistribution and use in source and binary forms, with or without
   5:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // modification, are permitted provided that the following conditions are
   6:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // met:
   7:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
   8:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     * Redistributions of source code must retain the above copyright
   9:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // notice, this list of conditions and the following disclaimer.
  10:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     * Redistributions in binary form must reproduce the above
  11:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // copyright notice, this list of conditions and the following disclaimer
  12:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // in the documentation and/or other materials provided with the
  13:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // distribution.
  14:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     * Neither the name of Google Inc. nor the names of its
  15:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // contributors may be used to endorse or promote products derived from
  16:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // this software without specific prior written permission.
  17:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  18:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  19:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  20:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  21:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  22:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  23:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  24:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  25:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  26:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  27:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  28:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  29:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  30:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Authors: wan@google.com (Zhanyong Wan)
  31:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  32:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Low-level types and utilities for porting Google Test to various
  33:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // platforms.  All macros ending with _ and symbols defined in an
  34:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // internal namespace are subject to change without notice.  Code
  35:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // outside Google Test MUST NOT USE THEM DIRECTLY.  Macros that don't
  36:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // end with _ are part of Google Test's public API and can be used by
  37:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // code outside Google Test.
  38:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  39:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This file is fundamental to Google Test.  All other Google Test source
  40:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // files are expected to #include this.  Therefore, it cannot #include
  41:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // any other Google Test header.
  42:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
  43:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
  44:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_
  45:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
  46:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Environment-describing macros
  47:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // -----------------------------
  48:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  49:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Google Test can be used in many different environments.  Macros in
  50:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // this section tell Google Test what kind of environment it is being
  51:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // used in, such that Google Test can provide environment-specific
  52:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // features and implementations.
  53:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  54:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Google Test tries to automatically detect the properties of its
  55:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // environment, so users usually don't need to worry about these
  56:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // macros.  However, the automatic detection is not perfect.
  57:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Sometimes it's necessary for a user to define some of the following
  58:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // macros in the build script to override Google Test's decisions.
  59:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  60:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // If the user doesn't define a macro in the list, Google Test will
  61:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // provide a default definition.  After this header is #included, all
  62:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // macros in this list will be defined to either 1 or 0.
  63:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  64:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Notes to maintainers:
  65:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   - Each macro here is a user-tweakable knob; do not grow the list
  66:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     lightly.
  67:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   - Use #if to key off these macros.  Don't use #ifdef or "#if
  68:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     defined(...)", which will not work as these macros are ALWAYS
  69:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     defined.
  70:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
  71:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)
  72:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              is/isn't available.
  73:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions
  74:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              are enabled.
  75:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_GLOBAL_STRING  - Define it to 1/0 to indicate that ::string
  76:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              is/isn't available (some systems define
  77:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              ::string, which is different to std::string).
  78:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_GLOBAL_WSTRING - Define it to 1/0 to indicate that ::string
  79:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              is/isn't available (some systems define
  80:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              ::wstring, which is different to std::wstring).
  81:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular
  82:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              expressions are/aren't available.
  83:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>
  84:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              is/isn't available.
  85:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't
  86:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              enabled.
  87:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that
  88:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              std::wstring does/doesn't work (Google Test can
  89:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              be used where std::wstring is unavailable).
  90:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_TR1_TUPLE      - Define it to 1/0 to indicate tr1::tuple
  91:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              is/isn't available.
  92:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
  93:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              compiler supports Microsoft's "Structured
  94:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              Exception Handling".
  95:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_STREAM_REDIRECTION
  96:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            - Define it to 1/0 to indicate whether the
  97:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              platform supports I/O stream redirection using
  98:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              dup() and dup2().
  99:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_USE_OWN_TR1_TUPLE  - Define it to 1/0 to indicate whether Google
 100:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              Test's own tr1 tuple implementation should be
 101:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              used.  Unused when the user sets
 102:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              GTEST_HAS_TR1_TUPLE to 0.
 103:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_LANG_CXX11         - Define it to 1/0 to indicate that Google Test
 104:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              is building in C++11/C++98 mode.
 105:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_LINKED_AS_SHARED_LIBRARY
 106:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            - Define to 1 when compiling tests that use
 107:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              Google Test as a shared library (known as
 108:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              DLL on Windows).
 109:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_CREATE_SHARED_LIBRARY
 110:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            - Define to 1 when compiling Google Test itself
 111:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              as a shared library.
 112:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 113:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Platform-indicating macros
 114:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // --------------------------
 115:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 116:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Macros indicating the platform on which Google Test is being used
 117:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // (a macro is defined to 1 if compiled on the given platform;
 118:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // otherwise UNDEFINED -- it's never defined to 0.).  Google Test
 119:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // defines these macros automatically.  Code outside Google Test MUST
 120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // NOT define them.
 121:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 122:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_AIX      - IBM AIX
 123:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_CYGWIN   - Cygwin
 124:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_FREEBSD  - FreeBSD
 125:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_HPUX     - HP-UX
 126:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_LINUX    - Linux
 127:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_OS_LINUX_ANDROID - Google Android
 128:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_MAC      - Mac OS X
 129:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_OS_IOS    - iOS
 130:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_NACL     - Google Native Client (NaCl)
 131:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_OPENBSD  - OpenBSD
 132:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_QNX      - QNX
 133:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_SOLARIS  - Sun Solaris
 134:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_SYMBIAN  - Symbian
 135:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)
 136:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop
 137:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_OS_WINDOWS_MINGW    - MinGW
 138:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile
 139:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_OS_WINDOWS_PHONE    - Windows Phone
 140:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT
 141:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_OS_ZOS      - z/OS
 142:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 143:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Among the platforms, Cygwin, Linux, Max OS X, and Windows have the
 144:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // most stable support.  Since core members of the Google Test project
 145:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // don't have access to other platforms, support for them may be less
 146:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // stable.  If you notice any problems on your platform, please notify
 147:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // googletestframework@googlegroups.com (patches for fixing them are
 148:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // even more welcome!).
 149:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 150:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // It is possible that none of the GTEST_OS_* macros are defined.
 151:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 152:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Feature-indicating macros
 153:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // -------------------------
 154:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 155:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Macros indicating which Google Test features are available (a macro
 156:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // is defined to 1 if the corresponding feature is supported;
 157:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // otherwise UNDEFINED -- it's never defined to 0.).  Google Test
 158:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // defines these macros automatically.  Code outside Google Test MUST
 159:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // NOT define them.
 160:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 161:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // These macros are public so that portable tests can be written.
 162:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Such tests typically surround code using a feature with an #if
 163:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // which controls that code.  For example:
 164:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 165:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // #if GTEST_HAS_DEATH_TEST
 166:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   EXPECT_DEATH(DoSomethingDeadly());
 167:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // #endif
 168:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 169:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_COMBINE      - the Combine() function (for value-parameterized
 170:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            tests)
 171:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_DEATH_TEST   - death tests
 172:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_PARAM_TEST   - value-parameterized tests
 173:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_TYPED_TEST   - typed tests
 174:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_HAS_TYPED_TEST_P - type-parameterized tests
 175:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_IS_THREADSAFE    - Google Test is thread-safe.
 176:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with
 177:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            GTEST_HAS_POSIX_RE (see above) which users can
 178:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            define themselves.
 179:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_USES_SIMPLE_RE   - our own simple regex is used;
 180:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            the above two are mutually exclusive.
 181:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_CAN_COMPARE_NULL - accepts untyped NULL in EXPECT_EQ().
 182:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 183:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Misc public macros
 184:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // ------------------
 185:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 186:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_FLAG(flag_name)  - references the variable corresponding to
 187:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            the given Google Test flag.
 188:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 189:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Internal utilities
 190:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // ------------------
 191:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 192:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The following macros and utilities are for Google Test's INTERNAL
 193:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // use only.  Code outside Google Test MUST NOT USE THEM DIRECTLY.
 194:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 195:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Macros for basic C++ coding:
 196:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.
 197:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a
 198:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                              variable don't have to be used.
 199:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_DISALLOW_ASSIGN_   - disables operator=.
 200:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.
 201:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.
 202:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is
 203:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                                        suppressed (constant conditional).
 204:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127
 205:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                                        is suppressed.
 206:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 207:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // C++11 feature wrappers:
 208:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 209:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   testing::internal::move  - portability wrapper for std::move.
 210:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 211:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Synchronization:
 212:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   Mutex, MutexLock, ThreadLocal, GetThreadCount()
 213:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                            - synchronization primitives.
 214:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 215:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Template meta programming:
 216:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   is_pointer     - as in TR1; needed on Symbian and IBM XL C/C++ only.
 217:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   IteratorTraits - partial implementation of std::iterator_traits, which
 218:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                    is not available in libCstd when compiled with Sun C++.
 219:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 220:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Smart pointers:
 221:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   scoped_ptr     - as in TR2.
 222:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 223:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Regular expressions:
 224:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   RE             - a simple regular expression class using the POSIX
 225:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                    Extended Regular Expression syntax on UNIX-like
 226:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                    platforms, or a reduced regular exception syntax on
 227:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                    other platforms, including Windows.
 228:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 229:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Logging:
 230:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_LOG_()   - logs messages at the specified severity level.
 231:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   LogToStderr()  - directs all log messages to stderr.
 232:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   FlushInfoLog() - flushes informational log messages.
 233:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 234:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Stdout and stderr capturing:
 235:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   CaptureStdout()     - starts capturing stdout.
 236:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GetCapturedStdout() - stops capturing stdout and returns the captured
 237:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                         string.
 238:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   CaptureStderr()     - starts capturing stderr.
 239:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GetCapturedStderr() - stops capturing stderr and returns the captured
 240:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                         string.
 241:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 242:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Integer types:
 243:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   TypeWithSize   - maps an integer to a int type.
 244:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   Int32, UInt32, Int64, UInt64, TimeInMillis
 245:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                  - integers of known sizes.
 246:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   BiggestInt     - the biggest signed integer type.
 247:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 248:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Command-line utilities:
 249:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_DECLARE_*()  - declares a flag.
 250:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_DEFINE_*()   - defines a flag.
 251:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GetInjectableArgvs() - returns the command line as a vector of strings.
 252:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 253:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Environment variable utilities:
 254:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GetEnv()             - gets the value of an environment variable.
 255:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   BoolFromGTestEnv()   - parses a bool environment variable.
 256:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   Int32FromGTestEnv()  - parses an Int32 environment variable.
 257:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   StringFromGTestEnv() - parses a string environment variable.
 258:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 259:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <ctype.h>   // for isspace, etc
 260:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <stddef.h>  // for ptrdiff_t
 261:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <stdlib.h>
 262:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <stdio.h>
 263:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <string.h>
 264:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef _WIN32_WCE
 265:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <sys/types.h>
 266:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <sys/stat.h>
 267:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // !_WIN32_WCE
 268:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 269:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined __APPLE__
 270:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <AvailabilityMacros.h>
 271:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <TargetConditionals.h>
 272:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 273:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 274:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <algorithm>  // NOLINT
 275:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <iostream>  // NOLINT
 276:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <sstream>  // NOLINT
 277:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <string>  // NOLINT
 278:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <utility>
 279:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include <vector>  // NOLINT
 280:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 281:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include "./gtest-port-arch.h"
 282:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #include "./custom/gtest-port.h"
 283:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 284:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if !defined(GTEST_DEV_EMAIL_)
 285:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_DEV_EMAIL_ "googletestframework@@googlegroups.com"
 286:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_FLAG_PREFIX_ "gtest_"
 287:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_FLAG_PREFIX_DASH_ "gtest-"
 288:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_FLAG_PREFIX_UPPER_ "GTEST_"
 289:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_NAME_ "Google Test"
 290:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_PROJECT_URL_ "https://github.com/google/googletest/"
 291:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // !defined(GTEST_DEV_EMAIL_)
 292:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 293:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
 294:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_INIT_GOOGLE_TEST_NAME_ "testing::InitGoogleTest"
 295:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // !defined(GTEST_INIT_GOOGLE_TEST_NAME_)
 296:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 297:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines the version of gcc that is used to compile this.
 298:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifdef __GNUC__
 299:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // 40302 means version 4.3.2.
 300:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_GCC_VER_ \
 301:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     (__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__)
 302:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // __GNUC__
 303:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 304:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Macros for disabling Microsoft Visual C++ warnings.
 305:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 306:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 4385)
 307:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   /* code that triggers warnings C4800 and C4385 */
 308:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_DISABLE_MSC_WARNINGS_POP_()
 309:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if _MSC_VER >= 1500
 310:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings) \
 311:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     __pragma(warning(push))                        \
 312:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     __pragma(warning(disable: warnings))
 313:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_DISABLE_MSC_WARNINGS_POP_()          \
 314:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     __pragma(warning(pop))
 315:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 316:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Older versions of MSVC don't have __pragma.
 317:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_DISABLE_MSC_WARNINGS_PUSH_(warnings)
 318:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_DISABLE_MSC_WARNINGS_POP_()
 319:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 320:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 321:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_LANG_CXX11
 322:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // gcc and clang define __GXX_EXPERIMENTAL_CXX0X__ when
 323:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // -std={c,gnu}++{0x,11} is passed.  The C++11 standard specifies a
 324:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // value for __cplusplus, and recent versions of clang, gcc, and
 325:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // probably other compilers set that too in C++11 mode.
 326:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if __GXX_EXPERIMENTAL_CXX0X__ || __cplusplus >= 201103L
 327:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Compiling in at least C++11 mode.
 328:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_LANG_CXX11 1
 329:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 330:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_LANG_CXX11 0
 331:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 332:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 333:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 334:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Distinct from C++11 language support, some environments don't provide
 335:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // proper C++11 library support. Notably, it's possible to build in
 336:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // C++11 mode when targeting Mac OS X 10.6, which has an old libstdc++
 337:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // with no C++11 support.
 338:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 339:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // libstdc++ has sufficient C++11 support as of GCC 4.6.0, __GLIBCXX__
 340:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // 20110325, but maintenance releases in the 4.4 and 4.5 series followed
 341:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // this date, so check for those versions by their date stamps.
 342:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html#abi.versioning
 343:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_LANG_CXX11 && \
 344:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     (!defined(__GLIBCXX__) || ( \
 345:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         __GLIBCXX__ >= 20110325ul &&  /* GCC >= 4.6.0 */ \
 346:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         /* Blacklist of patch releases of older branches: */ \
 347:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         __GLIBCXX__ != 20110416ul &&  /* GCC 4.4.6 */ \
 348:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         __GLIBCXX__ != 20120313ul &&  /* GCC 4.4.7 */ \
 349:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         __GLIBCXX__ != 20110428ul &&  /* GCC 4.5.3 */ \
 350:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         __GLIBCXX__ != 20120702ul))   /* GCC 4.5.4 */
 351:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_STDLIB_CXX11 1
 352:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 353:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 354:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Only use C++11 library features if the library provides them.
 355:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_STDLIB_CXX11
 356:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_BEGIN_AND_END_ 1
 357:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_FORWARD_LIST_ 1
 358:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_FUNCTION_ 1
 359:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_INITIALIZER_LIST_ 1
 360:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_MOVE_ 1
 361:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_SHARED_PTR_ 1
 362:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_TYPE_TRAITS_ 1
 363:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_UNIQUE_PTR_ 1
 364:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 365:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 366:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // C++11 specifies that <tuple> provides std::tuple.
 367:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Some platforms still might not have it, however.
 368:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_LANG_CXX11
 369:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_TUPLE_ 1
 370:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if defined(__clang__)
 371:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Inspired by http://clang.llvm.org/docs/LanguageExtensions.html#__has_include
 372:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  if defined(__has_include) && !__has_include(<tuple>)
 373:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   undef GTEST_HAS_STD_TUPLE_
 374:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif
 375:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(_MSC_VER)
 376:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Inspired by boost/config/stdlib/dinkumware.hpp
 377:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  if defined(_CPPLIB_VER) && _CPPLIB_VER < 520
 378:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   undef GTEST_HAS_STD_TUPLE_
 379:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif
 380:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__GLIBCXX__)
 381:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Inspired by boost/config/stdlib/libstdcpp3.hpp,
 382:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // http://gcc.gnu.org/gcc-4.2/changes.html and
 383:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt01ch01.html#manual.intro.status.standard.20
 384:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 2)
 385:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   undef GTEST_HAS_STD_TUPLE_
 386:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif
 387:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 388:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 389:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 390:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Brings in definitions for functions used in the testing::internal::posix
 391:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // namespace (read, write, close, chdir, isatty, stat). We do not currently
 392:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // use them on Windows Mobile.
 393:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_OS_WINDOWS
 394:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if !GTEST_OS_WINDOWS_MOBILE
 395:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  include <direct.h>
 396:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  include <io.h>
 397:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 398:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // In order to avoid having to include <windows.h>, use forward declaration
 399:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // assuming CRITICAL_SECTION is a typedef of _RTL_CRITICAL_SECTION.
 400:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This assumption is verified by
 401:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // WindowsTypesTest.CRITICAL_SECTIONIs_RTL_CRITICAL_SECTION.
 402:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** struct _RTL_CRITICAL_SECTION;
 403:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 404:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This assumes that non-Windows OSes provide unistd.h. For OSes where this
 405:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // is not the case, we need to include headers that provide the functions
 406:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // mentioned above.
 407:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <unistd.h>
 408:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <strings.h>
 409:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_OS_WINDOWS
 410:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 411:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_OS_LINUX_ANDROID
 412:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Used to define __ANDROID_API__ matching the target NDK API level.
 413:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  include <android/api-level.h>  // NOLINT
 414:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 415:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 416:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Defines this to true iff Google Test can use POSIX regular expressions.
 417:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_POSIX_RE
 418:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_OS_LINUX_ANDROID
 419:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // On Android, <regex.h> is only available starting with Gingerbread.
 420:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_POSIX_RE (__ANDROID_API__ >= 9)
 421:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 422:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_POSIX_RE (!GTEST_OS_WINDOWS)
 423:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 424:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 425:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 426:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_USES_PCRE
 427:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The appropriate headers have already been included.
 428:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 429:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #elif GTEST_HAS_POSIX_RE
 430:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 431:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // On some platforms, <regex.h> needs someone to define size_t, and
 432:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // won't compile otherwise.  We can #include it here as we already
 433:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // included <stdlib.h>, which is guaranteed to define size_t through
 434:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // <stddef.h>.
 435:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <regex.h>  // NOLINT
 436:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 437:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_USES_POSIX_RE 1
 438:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 439:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #elif GTEST_OS_WINDOWS
 440:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 441:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // <regex.h> is not available on Windows.  Use our own simple regex
 442:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // implementation instead.
 443:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_USES_SIMPLE_RE 1
 444:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 445:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 446:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 447:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // <regex.h> may not be available on this platform.  Use our own
 448:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // simple regex implementation instead.
 449:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_USES_SIMPLE_RE 1
 450:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 451:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_USES_PCRE
 452:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 453:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_EXCEPTIONS
 454:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us whether exceptions are enabled, so we need
 455:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // to figure it out.
 456:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if defined(_MSC_VER) || defined(__BORLANDC__)
 457:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // MSVC's and C++Builder's implementations of the STL use the _HAS_EXCEPTIONS
 458:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // macro to enable exceptions, so we'll do the same.
 459:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Assumes that exceptions are enabled by default.
 460:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  ifndef _HAS_EXCEPTIONS
 461:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define _HAS_EXCEPTIONS 1
 462:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif  // _HAS_EXCEPTIONS
 463:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_EXCEPTIONS _HAS_EXCEPTIONS
 464:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__clang__)
 465:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // clang defines __EXCEPTIONS iff exceptions are enabled before clang 220714,
 466:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // but iff cleanups are enabled after that. In Obj-C++ files, there can be
 467:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // cleanups for ObjC exceptions which also need cleanups, even if C++ exceptions
 468:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // are disabled. clang has __has_feature(cxx_exceptions) which checks for C++
 469:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // exceptions starting at clang r206352, but which checked for cleanups prior to
 470:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // that. To reliably check for C++ exception availability with clang, check for
 471:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // __EXCEPTIONS && __has_feature(cxx_exceptions).
 472:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_EXCEPTIONS (__EXCEPTIONS && __has_feature(cxx_exceptions))
 473:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__GNUC__) && __EXCEPTIONS
 474:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // gcc defines __EXCEPTIONS to 1 iff exceptions are enabled.
 475:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_EXCEPTIONS 1
 476:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__SUNPRO_CC)
 477:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Sun Pro CC supports exceptions.  However, there is no compile-time way of
 478:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // detecting whether they are enabled or not.  Therefore, we assume that
 479:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // they are enabled unless the user tells us otherwise.
 480:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_EXCEPTIONS 1
 481:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__IBMCPP__) && __EXCEPTIONS
 482:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // xlC defines __EXCEPTIONS to 1 iff exceptions are enabled.
 483:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_EXCEPTIONS 1
 484:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__HP_aCC)
 485:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Exception handling is in effect by default in HP aCC compiler. It has to
 486:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // be turned of by +noeh compiler option if desired.
 487:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_EXCEPTIONS 1
 488:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 489:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // For other compilers, we assume exceptions are disabled to be
 490:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // conservative.
 491:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_EXCEPTIONS 0
 492:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // defined(_MSC_VER) || defined(__BORLANDC__)
 493:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_EXCEPTIONS
 494:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 495:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if !defined(GTEST_HAS_STD_STRING)
 496:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Even though we don't use this macro any longer, we keep it in case
 497:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // some clients still depend on it.
 498:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_STRING 1
 499:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #elif !GTEST_HAS_STD_STRING
 500:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user told us that ::std::string isn't available.
 501:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # error "Google Test cannot be used where ::std::string isn't available."
 502:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // !defined(GTEST_HAS_STD_STRING)
 503:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 504:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_GLOBAL_STRING
 505:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us whether ::string is available, so we need
 506:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // to figure it out.
 507:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 508:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_GLOBAL_STRING 0
 509:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 510:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_GLOBAL_STRING
 511:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 512:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_STD_WSTRING
 513:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us whether ::std::wstring is available, so we need
 514:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // to figure it out.
 515:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // TODO(wan@google.com): uses autoconf to detect whether ::std::wstring
 516:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   is available.
 517:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 518:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Cygwin 1.7 and below doesn't support ::std::wstring.
 519:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Solaris' libc++ doesn't support it either.  Android has
 520:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // no support for it at least as recent as Froyo (2.2).
 521:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_STD_WSTRING \
 522:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     (!(GTEST_OS_LINUX_ANDROID || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS))
 523:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 524:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_STD_WSTRING
 525:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 526:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_GLOBAL_WSTRING
 527:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us whether ::wstring is available, so we need
 528:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // to figure it out.
 529:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_GLOBAL_WSTRING \
 530:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     (GTEST_HAS_STD_WSTRING && GTEST_HAS_GLOBAL_STRING)
 531:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_GLOBAL_WSTRING
 532:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 533:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether RTTI is available.
 534:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_RTTI
 535:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us whether RTTI is enabled, so we need to
 536:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // figure it out.
 537:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 538:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # ifdef _MSC_VER
 539:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 540:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  ifdef _CPPRTTI  // MSVC defines this macro iff RTTI is enabled.
 541:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define GTEST_HAS_RTTI 1
 542:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  else
 543:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define GTEST_HAS_RTTI 0
 544:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif
 545:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 546:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Starting with version 4.3.2, gcc defines __GXX_RTTI iff RTTI is enabled.
 547:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40302)
 548:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 549:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  ifdef __GXX_RTTI
 550:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // When building against STLport with the Android NDK and with
 551:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // -frtti -fno-exceptions, the build fails at link time with undefined
 552:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // references to __cxa_bad_typeid. Note sure if STL or toolchain bug,
 553:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // so disable RTTI when detected.
 554:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR) && \
 555:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****        !defined(__EXCEPTIONS)
 556:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #    define GTEST_HAS_RTTI 0
 557:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   else
 558:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #    define GTEST_HAS_RTTI 1
 559:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   endif  // GTEST_OS_LINUX_ANDROID && __STLPORT_MAJOR && !__EXCEPTIONS
 560:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  else
 561:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define GTEST_HAS_RTTI 0
 562:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif  // __GXX_RTTI
 563:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 564:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Clang defines __GXX_RTTI starting with version 3.0, but its manual recommends
 565:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // using has_feature instead. has_feature(cxx_rtti) is supported since 2.7, the
 566:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // first version with C++ support.
 567:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__clang__)
 568:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 569:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_RTTI __has_feature(cxx_rtti)
 570:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 571:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Starting with version 9.0 IBM Visual Age defines __RTTI_ALL__ to 1 if
 572:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // both the typeid and dynamic_cast features are present.
 573:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__IBMCPP__) && (__IBMCPP__ >= 900)
 574:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 575:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  ifdef __RTTI_ALL__
 576:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define GTEST_HAS_RTTI 1
 577:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  else
 578:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define GTEST_HAS_RTTI 0
 579:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif
 580:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 581:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 582:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 583:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // For all other compilers, we assume RTTI is enabled.
 584:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_RTTI 1
 585:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 586:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // _MSC_VER
 587:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 588:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_RTTI
 589:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 590:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // It's this header's responsibility to #include <typeinfo> when RTTI
 591:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // is enabled.
 592:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_HAS_RTTI
 593:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <typeinfo>
 594:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 595:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 596:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether Google Test can use the pthreads library.
 597:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_PTHREAD
 598:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us explicitly, so we make reasonable assumptions about
 599:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // which platforms have pthreads support.
 600:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 601:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
 602:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // to your compiler flags.
 603:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_PTHREAD (GTEST_OS_LINUX || GTEST_OS_MAC || GTEST_OS_HPUX \
 604:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     || GTEST_OS_QNX || GTEST_OS_FREEBSD || GTEST_OS_NACL)
 605:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_PTHREAD
 606:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 607:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_HAS_PTHREAD
 608:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is
 609:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // true.
 610:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <pthread.h>  // NOLINT
 611:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 612:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // For timespec and nanosleep, used below.
 613:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <time.h>  // NOLINT
 614:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 615:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 616:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines if hash_map/hash_set are available.
 617:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Only used for testing against those containers.
 618:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if !defined(GTEST_HAS_HASH_MAP_)
 619:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if _MSC_VER
 620:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_HASH_MAP_ 1  // Indicates that hash_map is available.
 621:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_HASH_SET_ 1  // Indicates that hash_set is available.
 622:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // _MSC_VER
 623:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // !defined(GTEST_HAS_HASH_MAP_)
 624:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 625:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether Google Test can use tr1/tuple.  You can define
 626:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // this macro to 0 to prevent Google Test from using tuple (any
 627:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // feature depending on tuple with be disabled in this mode).
 628:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_TR1_TUPLE
 629:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_OS_LINUX_ANDROID && defined(_STLPORT_MAJOR)
 630:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // STLport, provided with the Android NDK, has neither <tr1/tuple> or <tuple>.
 631:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_TR1_TUPLE 0
 632:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 633:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us not to do it, so we assume it's OK.
 634:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_TR1_TUPLE 1
 635:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 636:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_TR1_TUPLE
 637:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 638:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether Google Test's own tr1 tuple implementation
 639:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // should be used.
 640:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_USE_OWN_TR1_TUPLE
 641:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us, so we need to figure it out.
 642:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 643:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // We use our own TR1 tuple if we aren't sure the user has an
 644:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // implementation of it already.  At this time, libstdc++ 4.0.0+ and
 645:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // MSVC 2010 are the only mainstream standard libraries that come
 646:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // with a TR1 tuple implementation.  NVIDIA's CUDA NVCC compiler
 647:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // pretends to be GCC by defining __GNUC__ and friends, but cannot
 648:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // compile GCC's tuple implementation.  MSVC 2008 (9.0) provides TR1
 649:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // tuple in a 323 MB Feature Pack download, which we cannot assume the
 650:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // user has.  QNX's QCC compiler is a modified GCC but it doesn't
 651:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // support TR1 tuple.  libc++ only provides std::tuple, in C++11 mode,
 652:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // and it can be used with some compilers that define __GNUC__.
 653:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if (defined(__GNUC__) && !defined(__CUDACC__) && (GTEST_GCC_VER_ >= 40000) \
 654:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****       && !GTEST_OS_QNX && !defined(_LIBCPP_VERSION)) || _MSC_VER >= 1600
 655:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ENV_HAS_TR1_TUPLE_ 1
 656:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 657:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 658:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // C++11 specifies that <tuple> provides std::tuple. Use that if gtest is used
 659:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // in C++11 mode and libstdc++ isn't very old (binaries targeting OS X 10.6
 660:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // can build with clang but need to use gcc4.2's libstdc++).
 661:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_LANG_CXX11 && (!defined(__GLIBCXX__) || __GLIBCXX__ > 20110325)
 662:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ENV_HAS_STD_TUPLE_ 1
 663:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 664:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 665:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_ENV_HAS_TR1_TUPLE_ || GTEST_ENV_HAS_STD_TUPLE_
 666:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_USE_OWN_TR1_TUPLE 0
 667:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 668:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_USE_OWN_TR1_TUPLE 1
 669:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 670:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 671:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_USE_OWN_TR1_TUPLE
 672:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 673:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // To avoid conditional compilation everywhere, we make it
 674:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // gtest-port.h's responsibility to #include the header implementing
 675:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // tuple.
 676:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_HAS_STD_TUPLE_
 677:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # include <tuple>  // IWYU pragma: export
 678:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_TUPLE_NAMESPACE_ ::std
 679:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_STD_TUPLE_
 680:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 681:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // We include tr1::tuple even if std::tuple is available to define printers for
 682:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // them.
 683:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_HAS_TR1_TUPLE
 684:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # ifndef GTEST_TUPLE_NAMESPACE_
 685:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_TUPLE_NAMESPACE_ ::std::tr1
 686:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // GTEST_TUPLE_NAMESPACE_
 687:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 688:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_USE_OWN_TR1_TUPLE
 689:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  include "./gtest-tuple.h"  // IWYU pragma: export  // NOLINT
 690:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif GTEST_ENV_HAS_STD_TUPLE_
 691:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  include <tuple>
 692:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // C++11 puts its tuple into the ::std namespace rather than
 693:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // ::std::tr1.  gtest expects tuple to live in ::std::tr1, so put it there.
 694:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This causes undefined behavior, but supported compilers react in
 695:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // the way we intend.
 696:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** namespace std {
 697:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** namespace tr1 {
 698:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using ::std::get;
 699:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using ::std::make_tuple;
 700:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using ::std::tuple;
 701:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using ::std::tuple_element;
 702:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using ::std::tuple_size;
 703:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** }
 704:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** }
 705:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 706:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif GTEST_OS_SYMBIAN
 707:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 708:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // On Symbian, BOOST_HAS_TR1_TUPLE causes Boost's TR1 tuple library to
 709:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // use STLport's tuple implementation, which unfortunately doesn't
 710:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // work as the copy of STLport distributed with Symbian is incomplete.
 711:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // By making sure BOOST_HAS_TR1_TUPLE is undefined, we force Boost to
 712:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // use its own tuple implementation.
 713:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  ifdef BOOST_HAS_TR1_TUPLE
 714:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   undef BOOST_HAS_TR1_TUPLE
 715:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif  // BOOST_HAS_TR1_TUPLE
 716:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 717:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This prevents <boost/tr1/detail/config.hpp>, which defines
 718:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // BOOST_HAS_TR1_TUPLE, from being #included by Boost's <tuple>.
 719:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define BOOST_TR1_DETAIL_CONFIG_HPP_INCLUDED
 720:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  include <tuple>  // IWYU pragma: export  // NOLINT
 721:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 722:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif defined(__GNUC__) && (GTEST_GCC_VER_ >= 40000)
 723:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // GCC 4.0+ implements tr1/tuple in the <tr1/tuple> header.  This does
 724:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // not conform to the TR1 spec, which requires the header to be <tuple>.
 725:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 726:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  if !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302
 727:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Until version 4.3.2, gcc has a bug that causes <tr1/functional>,
 728:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // which is #included by <tr1/tuple>, to not compile when RTTI is
 729:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // disabled.  _TR1_FUNCTIONAL is the header guard for
 730:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // <tr1/functional>.  Hence the following #define is a hack to prevent
 731:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // <tr1/functional> from being included.
 732:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define _TR1_FUNCTIONAL 1
 733:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   include <tr1/tuple>
 734:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   undef _TR1_FUNCTIONAL  // Allows the user to #include
 735:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****                         // <tr1/functional> if he chooses to.
 736:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  else
 737:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   include <tr1/tuple>  // NOLINT
 738:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif  // !GTEST_HAS_RTTI && GTEST_GCC_VER_ < 40302
 739:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 740:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 741:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // If the compiler is not GCC 4.0+, we assume the user is using a
 742:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // spec-conforming TR1 implementation.
 743:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  include <tuple>  // IWYU pragma: export  // NOLINT
 744:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // GTEST_USE_OWN_TR1_TUPLE
 745:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 746:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_TR1_TUPLE
 747:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 748:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether clone(2) is supported.
 749:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Usually it will only be available on Linux, excluding
 750:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Linux on the Itanium architecture.
 751:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Also see http://linux.die.net/man/2/clone.
 752:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_CLONE
 753:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us, so we need to figure it out.
 754:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 755:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_OS_LINUX && !defined(__ia64__)
 756:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  if GTEST_OS_LINUX_ANDROID
 757:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // On Android, clone() is only available on ARM starting with Gingerbread.
 758:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #    if defined(__arm__) && __ANDROID_API__ >= 9
 759:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #     define GTEST_HAS_CLONE 1
 760:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #    else
 761:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #     define GTEST_HAS_CLONE 0
 762:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #    endif
 763:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  else
 764:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #   define GTEST_HAS_CLONE 1
 765:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  endif
 766:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 767:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_CLONE 0
 768:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // GTEST_OS_LINUX && !defined(__ia64__)
 769:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 770:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_CLONE
 771:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 772:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether to support stream redirection. This is used to test
 773:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // output correctness and to implement death tests.
 774:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_STREAM_REDIRECTION
 775:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // By default, we assume that stream redirection is supported on all
 776:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // platforms except known mobile ones.
 777:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_SYMBIAN || \
 778:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT
 779:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_STREAM_REDIRECTION 0
 780:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 781:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_STREAM_REDIRECTION 1
 782:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_SYMBIAN
 783:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_STREAM_REDIRECTION
 784:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 785:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether to support death tests.
 786:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Google Test does not support death tests for VC 7.1 and earlier as
 787:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // abort() in a VC 7.1 application compiled as GUI in debug config
 788:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // pops up a dialog window that cannot be suppressed programmatically.
 789:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if (GTEST_OS_LINUX || GTEST_OS_CYGWIN || GTEST_OS_SOLARIS || \
 790:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****      (GTEST_OS_MAC && !GTEST_OS_IOS) || \
 791:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****      (GTEST_OS_WINDOWS_DESKTOP && _MSC_VER >= 1400) || \
 792:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****      GTEST_OS_WINDOWS_MINGW || GTEST_OS_AIX || GTEST_OS_HPUX || \
 793:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****      GTEST_OS_OPENBSD || GTEST_OS_QNX || GTEST_OS_FREEBSD)
 794:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_DEATH_TEST 1
 795:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 796:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 797:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // We don't support MSVC 7.1 with exceptions disabled now.  Therefore
 798:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // all the compilers we care about are adequate for supporting
 799:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // value-parameterized tests.
 800:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #define GTEST_HAS_PARAM_TEST 1
 801:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 802:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether to support type-driven tests.
 803:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 804:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Typed tests need <typeinfo> and variadic macros, which GCC, VC++ 8.0,
 805:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Sun Pro CC, IBM Visual Age, and HP aCC support.
 806:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(__GNUC__) || (_MSC_VER >= 1400) || defined(__SUNPRO_CC) || \
 807:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     defined(__IBMCPP__) || defined(__HP_aCC)
 808:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_TYPED_TEST 1
 809:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_TYPED_TEST_P 1
 810:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 811:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 812:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether to support Combine(). This only makes sense when
 813:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // value-parameterized tests are enabled.  The implementation doesn't
 814:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // work on Sun Studio since it doesn't understand templated conversion
 815:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // operators.
 816:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_HAS_PARAM_TEST && GTEST_HAS_TR1_TUPLE && !defined(__SUNPRO_CC)
 817:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_COMBINE 1
 818:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 819:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 820:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether the system compiler uses UTF-16 for encoding wide strings.
 821:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #define GTEST_WIDE_STRING_USES_UTF16_ \
 822:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     (GTEST_OS_WINDOWS || GTEST_OS_CYGWIN || GTEST_OS_SYMBIAN || GTEST_OS_AIX)
 823:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 824:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determines whether test results can be streamed to a socket.
 825:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_OS_LINUX
 826:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_CAN_STREAM_RESULTS_ 1
 827:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 828:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 829:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Defines some utility macros.
 830:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 831:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The GNU compiler emits a warning if nested "if" statements are followed by
 832:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // an "else" statement and braces are not used to explicitly disambiguate the
 833:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // "else" binding.  This leads to problems with code like:
 834:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 835:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   if (gate)
 836:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     ASSERT_*(condition) << "Some message";
 837:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 838:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The "switch (0) case 0:" idiom is used to suppress this.
 839:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifdef __INTEL_COMPILER
 840:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_AMBIGUOUS_ELSE_BLOCKER_
 841:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 842:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_AMBIGUOUS_ELSE_BLOCKER_ switch (0) case 0: default:  // NOLINT
 843:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 844:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 845:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Use this annotation at the end of a struct/class definition to
 846:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // prevent the compiler from optimizing away instances that are never
 847:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // used.  This is useful when all interesting logic happens inside the
 848:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // c'tor and / or d'tor.  Example:
 849:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 850:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   struct Foo {
 851:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     Foo() { ... }
 852:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   } GTEST_ATTRIBUTE_UNUSED_;
 853:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 854:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Also use it after a variable or parameter declaration to tell the
 855:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // compiler the variable/parameter does not have to be used.
 856:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(__GNUC__) && !defined(COMPILER_ICC)
 857:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))
 858:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #elif defined(__clang__)
 859:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if __has_attribute(unused)
 860:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ATTRIBUTE_UNUSED_ __attribute__ ((unused))
 861:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 862:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 863:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_ATTRIBUTE_UNUSED_
 864:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_ATTRIBUTE_UNUSED_
 865:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 866:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 867:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A macro to disallow operator=
 868:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This should be used in the private: declarations for a class.
 869:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #define GTEST_DISALLOW_ASSIGN_(type)\
 870:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   void operator=(type const &)
 871:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 872:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A macro to disallow copy constructor and operator=
 873:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This should be used in the private: declarations for a class.
 874:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #define GTEST_DISALLOW_COPY_AND_ASSIGN_(type)\
 875:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   type(type const &);\
 876:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   GTEST_DISALLOW_ASSIGN_(type)
 877:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 878:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Tell the compiler to warn about unused return values for functions declared
 879:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // with this macro.  The macro should be used on function declarations
 880:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // following the argument list:
 881:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 882:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   Sprocket* AllocateSprocket() GTEST_MUST_USE_RESULT_;
 883:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(__GNUC__) && (GTEST_GCC_VER_ >= 30400) && !defined(COMPILER_ICC)
 884:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_MUST_USE_RESULT_ __attribute__ ((warn_unused_result))
 885:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 886:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_MUST_USE_RESULT_
 887:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // __GNUC__ && (GTEST_GCC_VER_ >= 30400) && !COMPILER_ICC
 888:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 889:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // MS C++ compiler emits warning when a conditional expression is compile time
 890:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // constant. In some contexts this warning is false positive and needs to be
 891:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // suppressed. Use the following two macros in such cases:
 892:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
 893:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // GTEST_INTENTIONAL_CONST_COND_PUSH_()
 894:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // while (true) {
 895:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // GTEST_INTENTIONAL_CONST_COND_POP_()
 896:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // }
 897:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_INTENTIONAL_CONST_COND_PUSH_() \
 898:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     GTEST_DISABLE_MSC_WARNINGS_PUSH_(4127)
 899:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_INTENTIONAL_CONST_COND_POP_() \
 900:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     GTEST_DISABLE_MSC_WARNINGS_POP_()
 901:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 902:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Determine whether the compiler supports Microsoft's Structured Exception
 903:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Handling.  This is supported by several Windows compilers but generally
 904:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // does not exist on any other system.
 905:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_HAS_SEH
 906:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The user didn't tell us, so we need to figure it out.
 907:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 908:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if defined(_MSC_VER) || defined(__BORLANDC__)
 909:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // These two compilers are known to support SEH.
 910:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_SEH 1
 911:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 912:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Assume no SEH.
 913:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_HAS_SEH 0
 914:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 915:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 916:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #define GTEST_IS_THREADSAFE \
 917:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     (GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ \
 918:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****      || (GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT) \
 919:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****      || GTEST_HAS_PTHREAD)
 920:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 921:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_SEH
 922:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 923:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifdef _MSC_VER
 924:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if GTEST_LINKED_AS_SHARED_LIBRARY
 925:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_API_ __declspec(dllimport)
 926:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # elif GTEST_CREATE_SHARED_LIBRARY
 927:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_API_ __declspec(dllexport)
 928:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif
 929:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #elif __GNUC__ >= 4 || defined(__clang__)
 930:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_API_ __attribute__((visibility ("default")))
 931:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif // _MSC_VER
 932:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 933:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifndef GTEST_API_
 934:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_API_
 935:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 936:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 937:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #ifdef __GNUC__
 938:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Ask the compiler to never inline a given function.
 939:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_NO_INLINE_ __attribute__((noinline))
 940:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 941:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_NO_INLINE_
 942:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 943:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 944:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // _LIBCPP_VERSION is defined by the libc++ library from the LLVM project.
 945:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(__GLIBCXX__) || defined(_LIBCPP_VERSION)
 946:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_CXXABI_H_ 1
 947:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 948:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_HAS_CXXABI_H_ 0
 949:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif
 950:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 951:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A function level attribute to disable checking for use of uninitialized
 952:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // memory when built with MemorySanitizer.
 953:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(__clang__)
 954:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if __has_feature(memory_sanitizer)
 955:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ \
 956:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****        __attribute__((no_sanitize_memory))
 957:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 958:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
 959:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // __has_feature(memory_sanitizer)
 960:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 961:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
 962:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // __clang__
 963:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 964:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A function level attribute to disable AddressSanitizer instrumentation.
 965:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(__clang__)
 966:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if __has_feature(address_sanitizer)
 967:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ \
 968:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****        __attribute__((no_sanitize_address))
 969:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 970:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
 971:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // __has_feature(address_sanitizer)
 972:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 973:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
 974:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // __clang__
 975:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 976:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A function level attribute to disable ThreadSanitizer instrumentation.
 977:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(__clang__)
 978:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # if __has_feature(thread_sanitizer)
 979:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ \
 980:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****        __attribute__((no_sanitize_thread))
 981:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # else
 982:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #  define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
 983:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # endif  // __has_feature(thread_sanitizer)
 984:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
 985:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
 986:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // __clang__
 987:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 988:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** namespace testing {
 989:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 990:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** class Message;
 991:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 992:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if defined(GTEST_TUPLE_NAMESPACE_)
 993:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Import tuple and friends into the ::testing namespace.
 994:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // It is part of our interface, having them in ::testing allows us to change
 995:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // their types as needed.
 996:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using GTEST_TUPLE_NAMESPACE_::get;
 997:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using GTEST_TUPLE_NAMESPACE_::make_tuple;
 998:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using GTEST_TUPLE_NAMESPACE_::tuple;
 999:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using GTEST_TUPLE_NAMESPACE_::tuple_size;
1000:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** using GTEST_TUPLE_NAMESPACE_::tuple_element;
1001:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // defined(GTEST_TUPLE_NAMESPACE_)
1002:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1003:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** namespace internal {
1004:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1005:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A secret type that Google Test users don't know about.  It has no
1006:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // definition on purpose.  Therefore it's impossible to create a
1007:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Secret object, which is what we want.
1008:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** class Secret;
1009:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1010:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The GTEST_COMPILE_ASSERT_ macro can be used to verify that a compile time
1011:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // expression is true. For example, you could use it to verify the
1012:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // size of a static array:
1013:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1014:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_COMPILE_ASSERT_(GTEST_ARRAY_SIZE_(names) == NUM_NAMES,
1015:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                         names_incorrect_size);
1016:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1017:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // or to make sure a struct is smaller than a certain size:
1018:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1019:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   GTEST_COMPILE_ASSERT_(sizeof(foo) < 128, foo_too_large);
1020:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1021:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // The second argument to the macro is the name of the variable. If
1022:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // the expression is false, most compilers will issue a warning/error
1023:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // containing the name of the variable.
1024:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1025:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_LANG_CXX11
1026:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_COMPILE_ASSERT_(expr, msg) static_assert(expr, #msg)
1027:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else  // !GTEST_LANG_CXX11
1028:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** template <bool>
1029:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   struct CompileAssert {
1030:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** };
1031:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1032:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** # define GTEST_COMPILE_ASSERT_(expr, msg) \
1033:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   typedef ::testing::internal::CompileAssert<(static_cast<bool>(expr))> \
1034:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****       msg[static_cast<bool>(expr) ? 1 : -1] GTEST_ATTRIBUTE_UNUSED_
1035:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // !GTEST_LANG_CXX11
1036:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1037:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Implementation details of GTEST_COMPILE_ASSERT_:
1038:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1039:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // (In C++11, we simply use static_assert instead of the following)
1040:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1041:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // - GTEST_COMPILE_ASSERT_ works by defining an array type that has -1
1042:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   elements (and thus is invalid) when the expression is false.
1043:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1044:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // - The simpler definition
1045:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1046:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //    #define GTEST_COMPILE_ASSERT_(expr, msg) typedef char msg[(expr) ? 1 : -1]
1047:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1048:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   does not work, as gcc supports variable-length arrays whose sizes
1049:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   are determined at run-time (this is gcc's extension and not part
1050:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   of the C++ standard).  As a result, gcc fails to reject the
1051:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   following code with the simple definition:
1052:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1053:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     int foo;
1054:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_COMPILE_ASSERT_(foo, msg); // not supposed to compile as foo is
1055:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //                                      // not a compile-time constant.
1056:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1057:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // - By using the type CompileAssert<(bool(expr))>, we ensures that
1058:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   expr is a compile-time constant.  (Template arguments must be
1059:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   determined at compile-time.)
1060:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1061:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // - The outter parentheses in CompileAssert<(bool(expr))> are necessary
1062:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   to work around a bug in gcc 3.4.4 and 4.0.1.  If we had written
1063:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1064:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     CompileAssert<bool(expr)>
1065:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1066:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   instead, these compilers will refuse to compile
1067:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1068:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     GTEST_COMPILE_ASSERT_(5 > 0, some_message);
1069:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1070:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   (They seem to think the ">" in "5 > 0" marks the end of the
1071:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   template argument list.)
1072:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1073:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // - The array size is (bool(expr) ? 1 : -1), instead of simply
1074:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1075:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //     ((expr) ? 1 : -1).
1076:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1077:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   This is to avoid running into a bug in MS VC 7.1, which
1078:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //   causes ((0.0) ? 1 : -1) to incorrectly evaluate to 1.
1079:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1080:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // StaticAssertTypeEqHelper is used by StaticAssertTypeEq defined in gtest.h.
1081:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** //
1082:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This template is declared, but intentionally undefined.
1083:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** template <typename T1, typename T2>
1084:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** struct StaticAssertTypeEqHelper;
1085:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1086:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** template <typename T>
1087:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** struct StaticAssertTypeEqHelper<T, T> {
1088:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   enum { value = true };
1089:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** };
1090:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1091:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Evaluates to the number of elements in 'array'.
1092:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #define GTEST_ARRAY_SIZE_(array) (sizeof(array) / sizeof(array[0]))
1093:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1094:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_HAS_GLOBAL_STRING
1095:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** typedef ::string string;
1096:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #else
1097:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** typedef ::std::string string;
1098:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_GLOBAL_STRING
1099:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1100:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #if GTEST_HAS_GLOBAL_WSTRING
1101:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** typedef ::wstring wstring;
1102:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #elif GTEST_HAS_STD_WSTRING
1103:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** typedef ::std::wstring wstring;
1104:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** #endif  // GTEST_HAS_GLOBAL_WSTRING
1105:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1106:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // A helper for suppressing warnings on constant condition.  It just
1107:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // returns 'condition'.
1108:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** GTEST_API_ bool IsTrue(bool condition);
1109:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1110:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // Defines scoped_ptr.
1111:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1112:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // This implementation of scoped_ptr is PARTIAL - it only contains
1113:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** // enough stuff to satisfy Google Test's need.
1114:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** template <typename T>
1115:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** class scoped_ptr {
1116:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****  public:
1117:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   typedef T element_type;
1118:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1119:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   explicit scoped_ptr(T* p = NULL) : ptr_(p) {}
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   ~scoped_ptr() { reset(); }
1121:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1122:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   T& operator*() const { return *ptr_; }
1123:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   T* operator->() const { return ptr_; }
1124:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   T* get() const { return ptr_; }
 1443              		.loc 10 1124 6 view .LVU322
 1444              	.LBB1265:
 1445              		.loc 10 1124 27 is_stmt 0 view .LVU323
 1446 0000 488B5708 		movq	8(%rdi), %rdx
 1447              	.LVL82:
 1448              		.loc 10 1124 27 view .LVU324
 1449              	.LBE1265:
 1450              	.LBE1264:
 298:quantum/serial_link/tests/gtest/gtest.h ****   }
 1451              		.loc 1 298 35 view .LVU325
 1452 0004 488D0500 		leaq	.LC8(%rip), %rax
 1452      000000
 1453 000b 4885D2   		testq	%rdx, %rdx
 1454 000e 7403     		je	.L24
 1455              	.LVL83:
 1456              	.LBB1266:
 1457              	.LBI1266:
 659:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 660:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 661:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 662:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string.
 663:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 664:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
 665:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator=(const basic_string& __str)
 666:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 667:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->assign(__str);
 668:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 669:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 670:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 671:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 672:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 673:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 674:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
 675:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator=(const _CharT* __s)
 676:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->assign(__s); }
 677:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 678:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 679:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 680:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __c  Source character.
 681:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 682:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 683:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  (*this)[0] == @a c.
 684:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 685:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
 686:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator=(_CharT __c)
 687:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 688:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->assign(1, __c);
 689:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return *this;
 690:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 691:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 692:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
 693:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 694:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 695:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string.
 696:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 697:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 698:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 699:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 700:/usr/include/c++/11.1.0/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 701:/usr/include/c++/11.1.0/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 702:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
 703:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator=(basic_string&& __str)
 704:/usr/include/c++/11.1.0/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 705:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 706:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 707:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 708:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 709:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
 710:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 711:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 712:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_data(_M_local_data());
 713:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_set_length(0);
 714:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
 715:/usr/include/c++/11.1.0/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 716:/usr/include/c++/11.1.0/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 717:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 718:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__str._M_is_local())
 719:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
 720:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it
 721:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    // (unless this is a self-move, because that would violate the
 722:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    // char_traits::copy precondition that the ranges don't overlap).
 723:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    if (__builtin_expect(std::__addressof(__str) != this, true))
 724:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      {
 725:/usr/include/c++/11.1.0/bits/basic_string.h **** 		if (__str.size())
 726:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  this->_S_copy(_M_data(), __str._M_data(), __str.size());
 727:/usr/include/c++/11.1.0/bits/basic_string.h **** 		_M_set_length(__str.size());
 728:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      }
 729:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
 730:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 731:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 732:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 733:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
 734:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 735:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    pointer __data = nullptr;
 736:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    size_type __capacity;
 737:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    if (!_M_is_local())
 738:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      {
 739:/usr/include/c++/11.1.0/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 740:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  {
 741:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    // __str can reuse our existing storage.
 742:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    __data = _M_data();
 743:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 744:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  }
 745:/usr/include/c++/11.1.0/bits/basic_string.h **** 		else // __str can't use it, so free it.
 746:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 747:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      }
 748:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 749:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_data(__str._M_data());
 750:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_length(__str.length());
 751:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 752:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    if (__data)
 753:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      {
 754:/usr/include/c++/11.1.0/bits/basic_string.h **** 		__str._M_data(__data);
 755:/usr/include/c++/11.1.0/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 756:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      }
 757:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    else
 758:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 759:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
 760:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else // Need to do a deep copy
 761:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  assign(__str);
 762:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__str.clear();
 763:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return *this;
 764:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 765:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 766:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 767:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 768:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 769:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 770:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
 771:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 772:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 773:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 774:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return *this;
 775:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 776:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
 777:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 778:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
 779:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 780:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 781:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 782:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 783:/usr/include/c++/11.1.0/bits/basic_string.h ****      template<typename _Tp>
 784:/usr/include/c++/11.1.0/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 785:/usr/include/c++/11.1.0/bits/basic_string.h ****        operator=(const _Tp& __svt)
 786:/usr/include/c++/11.1.0/bits/basic_string.h ****        { return this->assign(__svt); }
 787:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 788:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 789:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 790:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return A string_view.
 791:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 792:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator __sv_type() const noexcept
 793:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 794:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++17
 795:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 796:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Iterators:
 797:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 798:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 799:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the %string.
 800:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 801:/usr/include/c++/11.1.0/bits/basic_string.h ****       iterator
 802:/usr/include/c++/11.1.0/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 803:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return iterator(_M_data()); }
 804:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 805:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 806:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 807:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  character in the %string.
 808:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 809:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_iterator
 810:/usr/include/c++/11.1.0/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 811:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 812:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 813:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 814:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 815:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  character in the %string.
 816:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 817:/usr/include/c++/11.1.0/bits/basic_string.h ****       iterator
 818:/usr/include/c++/11.1.0/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 819:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 820:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 821:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 822:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 823:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  last character in the %string.
 824:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 825:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_iterator
 826:/usr/include/c++/11.1.0/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 827:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 828:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 829:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 830:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 831:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 832:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  order.
 833:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 834:/usr/include/c++/11.1.0/bits/basic_string.h ****       reverse_iterator
 835:/usr/include/c++/11.1.0/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 836:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 837:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 838:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 839:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 840:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 841:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  reverse element order.
 842:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 843:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reverse_iterator
 844:/usr/include/c++/11.1.0/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 845:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 846:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 847:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 848:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 849:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 850:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  element order.
 851:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 852:/usr/include/c++/11.1.0/bits/basic_string.h ****       reverse_iterator
 853:/usr/include/c++/11.1.0/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 854:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 855:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 856:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 857:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 858:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 859:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is done in reverse element order.
 860:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 861:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reverse_iterator
 862:/usr/include/c++/11.1.0/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 863:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 864:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 865:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
 866:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 867:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 868:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  character in the %string.
 869:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 870:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_iterator
 871:/usr/include/c++/11.1.0/bits/basic_string.h ****       cbegin() const noexcept
 872:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 873:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 874:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 875:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 876:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  last character in the %string.
 877:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 878:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_iterator
 879:/usr/include/c++/11.1.0/bits/basic_string.h ****       cend() const noexcept
 880:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 881:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 882:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 883:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 884:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 885:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  reverse element order.
 886:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 887:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reverse_iterator
 888:/usr/include/c++/11.1.0/bits/basic_string.h ****       crbegin() const noexcept
 889:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 890:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 891:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 892:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 893:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 894:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is done in reverse element order.
 895:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 896:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reverse_iterator
 897:/usr/include/c++/11.1.0/bits/basic_string.h ****       crend() const noexcept
 898:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 899:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 900:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 901:/usr/include/c++/11.1.0/bits/basic_string.h ****     public:
 902:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Capacity:
 903:/usr/include/c++/11.1.0/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 904:/usr/include/c++/11.1.0/bits/basic_string.h ****       ///  null-termination.
 905:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type
 906:/usr/include/c++/11.1.0/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 907:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_string_length; }
 908:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 909:/usr/include/c++/11.1.0/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 910:/usr/include/c++/11.1.0/bits/basic_string.h ****       ///  null-termination.
 911:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type
 912:/usr/include/c++/11.1.0/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 913:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_string_length; }
 914:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 915:/usr/include/c++/11.1.0/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 916:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type
 917:/usr/include/c++/11.1.0/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 918:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 919:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 920:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 921:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 922:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 923:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 924:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 925:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 926:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 927:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 928:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 929:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 930:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 931:/usr/include/c++/11.1.0/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 932:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 933:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 934:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 935:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 936:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 937:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 938:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 939:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 940:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 941:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  setting them to 0.
 942:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 943:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 944:/usr/include/c++/11.1.0/bits/basic_string.h ****       resize(size_type __n)
 945:/usr/include/c++/11.1.0/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 946:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 947:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
 948:/usr/include/c++/11.1.0/bits/basic_string.h **** #pragma GCC diagnostic push
 949:/usr/include/c++/11.1.0/bits/basic_string.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 950:/usr/include/c++/11.1.0/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 951:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 952:/usr/include/c++/11.1.0/bits/basic_string.h ****       shrink_to_fit() noexcept
 953:/usr/include/c++/11.1.0/bits/basic_string.h ****       { reserve(); }
 954:/usr/include/c++/11.1.0/bits/basic_string.h **** #pragma GCC diagnostic pop
 955:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 956:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 957:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 958:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 959:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  before needing to allocate more memory.
 960:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 961:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type
 962:/usr/include/c++/11.1.0/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 963:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 964:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 965:/usr/include/c++/11.1.0/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 966:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
 967:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 968:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 969:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 970:/usr/include/c++/11.1.0/bits/basic_string.h ****        *          characters.
 971:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 972:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 973:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 974:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 975:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 976:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 977:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.
 978:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
 979:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 980:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 981:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 982:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 983:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  data.
 984:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 985:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 986:/usr/include/c++/11.1.0/bits/basic_string.h ****       reserve(size_type __res_arg);
 987:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 988:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 989:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Equivalent to shrink_to_fit().
 990:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
 991:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus > 201703L
 992:/usr/include/c++/11.1.0/bits/basic_string.h ****       [[deprecated("use shrink_to_fit() instead")]]
 993:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
 994:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
 995:/usr/include/c++/11.1.0/bits/basic_string.h ****       reserve();
 996:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 997:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
 998:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Erases the string, making it empty.
 999:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1000:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
1001:/usr/include/c++/11.1.0/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1002:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_set_length(0); }
1003:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1004:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1005:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1006:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  <code>*this == ""</code>.
1007:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1008:/usr/include/c++/11.1.0/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
1009:/usr/include/c++/11.1.0/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1010:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->size() == 0; }
1011:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1012:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Element access:
1013:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1014:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1015:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1016:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1017:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1018:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1019:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1020:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1021:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  see at().)
1022:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1023:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reference
1024:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1025:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1026:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1027:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_data()[__pos];
1028:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1029:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1030:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1031:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1032:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1033:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1034:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1035:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1036:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1037:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1038:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  see at().)
1039:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1040:/usr/include/c++/11.1.0/bits/basic_string.h ****       reference
1041:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator[](size_type __pos)
1042:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1043:/usr/include/c++/11.1.0/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1044:/usr/include/c++/11.1.0/bits/basic_string.h **** 	// and in C++11 mode.
1045:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1046:/usr/include/c++/11.1.0/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1047:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1048:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_data()[__pos];
1049:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1050:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1051:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1052:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1053:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n The index of the character to access.
1054:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1055:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1056:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1057:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1058:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1059:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1060:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1061:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reference
1062:/usr/include/c++/11.1.0/bits/basic_string.h ****       at(size_type __n) const
1063:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1064:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__n >= this->size())
1065:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1066:/usr/include/c++/11.1.0/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1067:/usr/include/c++/11.1.0/bits/basic_string.h **** 				       "(which is %zu)"),
1068:/usr/include/c++/11.1.0/bits/basic_string.h **** 				   __n, this->size());
1069:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_data()[__n];
1070:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1071:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1072:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1073:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1074:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n The index of the character to access.
1075:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1076:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1077:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1078:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1079:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1080:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1081:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1082:/usr/include/c++/11.1.0/bits/basic_string.h ****       reference
1083:/usr/include/c++/11.1.0/bits/basic_string.h ****       at(size_type __n)
1084:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1085:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__n >= size())
1086:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1087:/usr/include/c++/11.1.0/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1088:/usr/include/c++/11.1.0/bits/basic_string.h **** 				       "(which is %zu)"),
1089:/usr/include/c++/11.1.0/bits/basic_string.h **** 				   __n, this->size());
1090:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_data()[__n];
1091:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1092:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1093:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1094:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1095:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1096:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  element of the %string.
1097:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1098:/usr/include/c++/11.1.0/bits/basic_string.h ****       reference
1099:/usr/include/c++/11.1.0/bits/basic_string.h ****       front() noexcept
1100:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1101:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1102:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return operator[](0);
1103:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1104:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1105:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1106:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1107:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  element of the %string.
1108:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1109:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reference
1110:/usr/include/c++/11.1.0/bits/basic_string.h ****       front() const noexcept
1111:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1112:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1113:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return operator[](0);
1114:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1115:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1116:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1117:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1118:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  element of the %string.
1119:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1120:/usr/include/c++/11.1.0/bits/basic_string.h ****       reference
1121:/usr/include/c++/11.1.0/bits/basic_string.h ****       back() noexcept
1122:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1123:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1124:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return operator[](this->size() - 1);
1125:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1126:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1127:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1128:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1129:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  last element of the %string.
1130:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1131:/usr/include/c++/11.1.0/bits/basic_string.h ****       const_reference
1132:/usr/include/c++/11.1.0/bits/basic_string.h ****       back() const noexcept
1133:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1134:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1135:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return operator[](this->size() - 1);
1136:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1137:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
1138:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1139:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Modifiers:
1140:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1141:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a string to this string.
1142:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  The string to append.
1143:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1144:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1145:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1146:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator+=(const basic_string& __str)
1147:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->append(__str); }
1148:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1149:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1150:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a C string.
1151:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  The C string to append.
1152:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1153:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1154:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1155:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator+=(const _CharT* __s)
1156:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->append(__s); }
1157:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1158:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1159:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a character.
1160:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  The character to append.
1161:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1162:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1163:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1164:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator+=(_CharT __c)
1165:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1166:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->push_back(__c);
1167:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return *this;
1168:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1169:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1170:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1171:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1172:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1173:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1174:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1175:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1176:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1177:/usr/include/c++/11.1.0/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1178:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1179:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
1180:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1181:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
1182:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1183:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a string_view.
1184:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1185:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1186:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1187:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
1188:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1189:/usr/include/c++/11.1.0/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1190:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{ return this->append(__svt); }
1191:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++17
1192:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1193:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1194:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a string to this string.
1195:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  The string to append.
1196:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1197:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1198:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1199:/usr/include/c++/11.1.0/bits/basic_string.h ****       append(const basic_string& __str)
1200:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1201:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1202:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1203:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a substring.
1204:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  The string to append.
1205:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1206:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1207:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1208:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1209:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1210:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1211:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1212:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1213:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  remainder of @a __str is appended.
1214:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1215:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1216:/usr/include/c++/11.1.0/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1217:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_append(__str._M_data()
1218:/usr/include/c++/11.1.0/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1219:/usr/include/c++/11.1.0/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1220:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1221:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1222:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a C substring.
1223:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  The C string to append.
1224:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1225:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1226:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1227:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1228:/usr/include/c++/11.1.0/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1229:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1230:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1231:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1232:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_append(__s, __n);
1233:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1234:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1235:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1236:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a C string.
1237:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  The C string to append.
1238:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1239:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1240:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1241:/usr/include/c++/11.1.0/bits/basic_string.h ****       append(const _CharT* __s)
1242:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1243:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1244:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1245:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1246:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_append(__s, __n);
1247:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1248:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1249:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1250:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append multiple characters.
1251:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1252:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  The character to use.
1253:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1254:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1255:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1256:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1257:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1258:/usr/include/c++/11.1.0/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1259:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1260:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1261:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1262:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1263:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1264:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1265:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1266:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1267:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1268:/usr/include/c++/11.1.0/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1269:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1270:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
1271:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1272:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1273:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a range of characters.
1274:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1275:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1276:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1277:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1278:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1279:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1280:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1281:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator,
1282:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1283:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
1284:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator>
1285:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
1286:/usr/include/c++/11.1.0/bits/basic_string.h ****         basic_string&
1287:/usr/include/c++/11.1.0/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1288:/usr/include/c++/11.1.0/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1289:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1290:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
1291:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1292:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a string_view.
1293:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1294:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1295:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1296:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
1297:/usr/include/c++/11.1.0/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1298:/usr/include/c++/11.1.0/bits/basic_string.h ****         append(const _Tp& __svt)
1299:/usr/include/c++/11.1.0/bits/basic_string.h ****         {
1300:/usr/include/c++/11.1.0/bits/basic_string.h ****           __sv_type __sv = __svt;
1301:/usr/include/c++/11.1.0/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1302:/usr/include/c++/11.1.0/bits/basic_string.h ****         }
1303:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1304:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1305:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1306:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1307:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1308:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1309:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1310:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1311:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
1312:/usr/include/c++/11.1.0/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1313:/usr/include/c++/11.1.0/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1314:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
1315:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1316:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return _M_append(__sv.data()
1317:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1318:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1319:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
1320:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++17
1321:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1322:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1323:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Append a single character.
1324:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  Character to append.
1325:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1326:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
1327:/usr/include/c++/11.1.0/bits/basic_string.h ****       push_back(_CharT __c)
1328:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1329:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const size_type __size = this->size();
1330:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1331:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1332:/usr/include/c++/11.1.0/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1333:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1334:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1335:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1336:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1337:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1338:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string to use.
1339:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1340:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1341:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1342:/usr/include/c++/11.1.0/bits/basic_string.h ****       assign(const basic_string& __str)
1343:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1344:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1345:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
1346:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  {
1347:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
1348:/usr/include/c++/11.1.0/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
1349:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      {
1350:/usr/include/c++/11.1.0/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
1351:/usr/include/c++/11.1.0/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
1352:/usr/include/c++/11.1.0/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
1353:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  {
1354:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1355:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _M_data(_M_local_data());
1356:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _M_set_length(0);
1357:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  }
1358:/usr/include/c++/11.1.0/bits/basic_string.h **** 		else
1359:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  {
1360:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    const auto __len = __str.size();
1361:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
1362:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
1363:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
1364:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1365:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _M_data(__ptr);
1366:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _M_capacity(__len);
1367:/usr/include/c++/11.1.0/bits/basic_string.h **** 		    _M_set_length(__len);
1368:/usr/include/c++/11.1.0/bits/basic_string.h **** 		  }
1369:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      }
1370:/usr/include/c++/11.1.0/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
1371:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  }
1372:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
1373:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->_M_assign(__str);
1374:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return *this;
1375:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1376:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1377:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1378:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1379:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1380:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param  __str  Source string to use.
1381:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1382:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1383:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1384:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1385:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1386:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1387:/usr/include/c++/11.1.0/bits/basic_string.h ****       assign(basic_string&& __str)
1388:/usr/include/c++/11.1.0/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1389:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1390:/usr/include/c++/11.1.0/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1391:/usr/include/c++/11.1.0/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1392:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return *this = std::move(__str);
1393:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1394:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
1395:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1396:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1397:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1398:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  The string to use.
1399:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1400:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1401:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1402:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1403:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1404:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1405:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1406:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1407:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1408:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1409:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1410:/usr/include/c++/11.1.0/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1411:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1412:/usr/include/c++/11.1.0/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1413:/usr/include/c++/11.1.0/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1414:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1415:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1416:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1417:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  The C string to use.
1418:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1419:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1420:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1421:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1422:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1423:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1424:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1425:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1426:/usr/include/c++/11.1.0/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1427:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1428:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1429:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1430:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1431:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1432:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1433:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1434:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  The C string to use.
1435:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1436:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1437:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1438:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1439:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  function returns.
1440:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1441:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1442:/usr/include/c++/11.1.0/bits/basic_string.h ****       assign(const _CharT* __s)
1443:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1444:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1445:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1446:/usr/include/c++/11.1.0/bits/basic_string.h **** 			  traits_type::length(__s));
1447:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1448:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1449:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1450:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1451:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1452:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  The character to use.
1453:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1454:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1455:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1456:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  character @a __c.
1457:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1458:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1459:/usr/include/c++/11.1.0/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1460:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1461:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1462:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1463:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1464:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1465:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1466:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1467:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1468:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1469:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1470:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1471:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator,
1472:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1473:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
1474:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator>
1475:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
1476:/usr/include/c++/11.1.0/bits/basic_string.h ****         basic_string&
1477:/usr/include/c++/11.1.0/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1478:/usr/include/c++/11.1.0/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1479:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1480:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1481:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1482:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1483:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1484:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1485:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1486:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1487:/usr/include/c++/11.1.0/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1488:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1489:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
1490:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1491:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
1492:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1493:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1494:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1495:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1496:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1497:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
1498:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1499:/usr/include/c++/11.1.0/bits/basic_string.h **** 	assign(const _Tp& __svt)
1500:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
1501:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1502:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1503:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
1504:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1505:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1506:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1507:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1508:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1509:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1510:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1511:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1512:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
1513:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1514:/usr/include/c++/11.1.0/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1515:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
1516:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1517:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1518:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      __sv.data()
1519:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1520:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1521:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
1522:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++17
1523:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1524:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1525:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1526:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1527:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1528:/usr/include/c++/11.1.0/bits/basic_string.h ****        *              insert at.
1529:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1530:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  The character to insert.
1531:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1532:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1533:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1534:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1535:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1536:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1537:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1538:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1539:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1540:/usr/include/c++/11.1.0/bits/basic_string.h ****       iterator
1541:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1542:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1543:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1544:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1545:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1546:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1547:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1548:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
1549:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1550:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1551:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1552:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1553:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  The character to insert.
1554:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1555:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1556:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1557:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1558:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1559:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1560:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1561:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1562:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
1563:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1564:/usr/include/c++/11.1.0/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1565:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
1566:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1567:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1568:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1569:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1570:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1571:/usr/include/c++/11.1.0/bits/basic_string.h ****        *              insert at.
1572:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __beg  Start of range.
1573:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __end  End of range.
1574:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1575:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1576:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1577:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1578:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1579:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1580:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is thrown.
1581:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1582:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator,
1583:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1584:/usr/include/c++/11.1.0/bits/basic_string.h **** 	iterator
1585:/usr/include/c++/11.1.0/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1586:/usr/include/c++/11.1.0/bits/basic_string.h ****         {
1587:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1588:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1589:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1590:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1591:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
1592:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
1593:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1594:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1595:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1596:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __beg  Start of range.
1597:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __end  End of range.
1598:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1599:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1600:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1601:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1602:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1603:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1604:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1605:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator>
1606:/usr/include/c++/11.1.0/bits/basic_string.h ****         void
1607:/usr/include/c++/11.1.0/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1608:/usr/include/c++/11.1.0/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1609:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
1610:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1611:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1612:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1613:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1614:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1615:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1616:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1617:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1618:/usr/include/c++/11.1.0/bits/basic_string.h ****       iterator
1619:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
1620:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1621:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1622:/usr/include/c++/11.1.0/bits/basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1623:/usr/include/c++/11.1.0/bits/basic_string.h ****       // See PR libstdc++/83328
1624:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
1625:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1626:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1627:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1628:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1629:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1630:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
1631:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
1632:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1633:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1634:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert value of a string.
1635:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos1 Position in string to insert at.
1636:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  The string to insert.
1637:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1638:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1639:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1640:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1641:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1642:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1643:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1644:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1645:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1646:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1647:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1648:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1649:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1650:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1651:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert a substring.
1652:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1653:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str   The string to insert.
1654:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1655:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1656:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1657:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1658:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1659:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1660:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1661:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1662:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1663:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1664:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1665:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1666:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1667:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1668:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1669:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1670:/usr/include/c++/11.1.0/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1671:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1672:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1673:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1674:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1675:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1676:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert a C substring.
1677:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1678:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  The C string to insert.
1679:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1680:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1681:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1682:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1683:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string.
1684:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1685:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1686:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1687:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1688:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1689:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1690:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1691:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1692:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1693:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1694:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1695:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1696:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert a C string.
1697:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1698:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  The C string to insert.
1699:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1700:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1701:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1702:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string.
1703:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1704:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1705:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1706:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1707:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1708:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.
1709:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1710:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1711:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1712:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1713:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1714:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1715:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     traits_type::length(__s));
1716:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1717:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1718:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1719:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1720:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1721:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1722:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  The character to insert.
1723:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1724:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1725:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1726:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string.
1727:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1728:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1729:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1730:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1731:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1732:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1733:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1734:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1735:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1736:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1737:/usr/include/c++/11.1.0/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1738:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1739:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1740:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert one character.
1741:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1742:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  The character to insert.
1743:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1744:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1745:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1746:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1747:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1748:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1749:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1750:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1751:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1752:/usr/include/c++/11.1.0/bits/basic_string.h ****       iterator
1753:/usr/include/c++/11.1.0/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1754:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1755:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1756:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1757:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1758:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1759:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1760:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1761:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
1762:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1763:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert a string_view.
1764:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1765:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1766:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1767:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1768:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
1769:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1770:/usr/include/c++/11.1.0/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1771:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
1772:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1773:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1774:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
1775:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1776:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1777:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Insert a string_view.
1778:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1779:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
1780:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1781:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1782:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1783:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1784:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
1785:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1786:/usr/include/c++/11.1.0/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1787:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1788:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
1789:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1790:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0),
1791:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      __sv.data()
1792:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1793:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1794:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
1795:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++17
1796:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1797:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1798:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Remove characters.
1799:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1800:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1801:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1802:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1803:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string.
1804:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1805:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1806:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1807:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1808:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1809:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1810:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1811:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1812:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1813:/usr/include/c++/11.1.0/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1814:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1815:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1816:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__n == npos)
1817:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1818:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else if (__n != 0)
1819:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1820:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return *this;
1821:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1822:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1823:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1824:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Remove one character.
1825:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1826:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1827:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1828:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1829:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1830:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1831:/usr/include/c++/11.1.0/bits/basic_string.h ****       iterator
1832:/usr/include/c++/11.1.0/bits/basic_string.h ****       erase(__const_iterator __position)
1833:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1834:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1835:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __position < end());
1836:/usr/include/c++/11.1.0/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1837:/usr/include/c++/11.1.0/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1838:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1839:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1840:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1841:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1842:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1843:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1844:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1845:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1846:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1847:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1848:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1849:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1850:/usr/include/c++/11.1.0/bits/basic_string.h ****       iterator
1851:/usr/include/c++/11.1.0/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1852:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1853:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1854:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __last <= end());
1855:/usr/include/c++/11.1.0/bits/basic_string.h ****         const size_type __pos = __first - begin();
1856:/usr/include/c++/11.1.0/bits/basic_string.h **** 	if (__last == end())
1857:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1858:/usr/include/c++/11.1.0/bits/basic_string.h **** 	else
1859:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1860:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1861:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1862:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1863:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
1864:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1865:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Remove the last character.
1866:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1867:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The string must be non-empty.
1868:/usr/include/c++/11.1.0/bits/basic_string.h ****        */
1869:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
1870:/usr/include/c++/11.1.0/bits/basic_string.h ****       pop_back() noexcept
1871:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1872:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1873:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1874:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1875:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
1876:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1877:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1878:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1879:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1880:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1881:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  String to insert.
1882:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1883:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1884:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string.
1885:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1886:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1887:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1888:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1889:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1890:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1891:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1892:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  error is thrown.
1893:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1894:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1895:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1896:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1897:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1898:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1899:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1900:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1901:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1902:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  String to insert.
1903:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1904:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1905:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1906:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1907:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  __str.size().
1908:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1909:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1910:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1911:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1912:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1913:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1914:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1915:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1916:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1917:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1918:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1919:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1920:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1921:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1922:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1923:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1924:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1925:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1926:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1927:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  C string to insert.
1928:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1929:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1930:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1931:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1932:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1933:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1934:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1935:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1936:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1937:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1938:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1939:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is thrown.
1940:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1941:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1942:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1943:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      size_type __n2)
1944:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1945:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1946:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1947:/usr/include/c++/11.1.0/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1948:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1949:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1950:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1951:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1952:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1953:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1954:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  C string to insert.
1955:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1956:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1957:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1958:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1959:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1960:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1961:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1962:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1963:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1964:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  change if an error is thrown.
1965:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1966:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1967:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1968:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
1969:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1970:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1971:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
1972:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1973:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1974:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1975:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1976:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1977:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1978:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  Character to insert.
1979:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
1980:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1981:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1982:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
1983:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1984:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1985:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1986:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1987:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1988:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  is thrown.
1989:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
1990:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
1991:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1992:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1993:/usr/include/c++/11.1.0/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1994:/usr/include/c++/11.1.0/bits/basic_string.h **** 
1995:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
1996:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1997:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1998:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1999:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __str  String value to insert.
2000:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2001:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2002:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2003:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2004:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
2005:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
2006:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
2007:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2008:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2009:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2010:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      const basic_string& __str)
2011:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2012:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2013:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2014:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2015:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2016:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2017:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  C string value to insert.
2018:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
2019:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2020:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2021:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2022:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2023:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2024:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2025:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2026:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.
2027:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2028:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2029:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2030:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2031:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
2032:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2033:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __i2 <= end());
2034:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2035:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
2036:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2037:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2038:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2039:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2040:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2041:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  C string value to insert.
2042:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2043:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2044:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2045:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2046:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2047:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2048:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2049:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2050:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2051:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2052:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
2053:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2054:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2055:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
2056:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2057:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2058:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2059:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2060:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2061:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2062:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __c  Character to insert.
2063:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2064:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2065:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2066:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2067:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2068:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2069:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2070:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2071:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2072:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2073:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      _CharT __c)
2074:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
2075:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2076:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __i2 <= end());
2077:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2078:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
2079:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2080:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2081:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2082:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2083:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2084:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2085:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2086:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2087:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2088:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2089:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2090:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2091:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2092:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2093:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.
2094:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2095:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
2096:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator,
2097:/usr/include/c++/11.1.0/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2098:/usr/include/c++/11.1.0/bits/basic_string.h ****         basic_string&
2099:/usr/include/c++/11.1.0/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2100:/usr/include/c++/11.1.0/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2101:/usr/include/c++/11.1.0/bits/basic_string.h ****         {
2102:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2103:/usr/include/c++/11.1.0/bits/basic_string.h **** 				   && __i2 <= end());
2104:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2105:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2106:/usr/include/c++/11.1.0/bits/basic_string.h **** 					   std::__false_type());
2107:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
2108:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
2109:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator>
2110:/usr/include/c++/11.1.0/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2111:/usr/include/c++/11.1.0/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2112:/usr/include/c++/11.1.0/bits/basic_string.h **** #else
2113:/usr/include/c++/11.1.0/bits/basic_string.h ****         basic_string&
2114:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
2115:/usr/include/c++/11.1.0/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2116:/usr/include/c++/11.1.0/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2117:/usr/include/c++/11.1.0/bits/basic_string.h ****         {
2118:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2119:/usr/include/c++/11.1.0/bits/basic_string.h **** 				   && __i2 <= end());
2120:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2121:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2122:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2123:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
2124:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif
2125:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2126:/usr/include/c++/11.1.0/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2127:/usr/include/c++/11.1.0/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2128:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2129:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2130:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2131:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
2132:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2133:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __i2 <= end());
2134:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2135:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2136:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2137:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
2138:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2139:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2140:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2141:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2142:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
2143:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2144:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __i2 <= end());
2145:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2146:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2147:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2148:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
2149:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2150:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2151:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2152:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2153:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
2154:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2155:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __i2 <= end());
2156:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2157:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2158:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2159:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
2160:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2161:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2162:/usr/include/c++/11.1.0/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2163:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2164:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
2165:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2166:/usr/include/c++/11.1.0/bits/basic_string.h **** 				 && __i2 <= end());
2167:/usr/include/c++/11.1.0/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2168:/usr/include/c++/11.1.0/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2169:/usr/include/c++/11.1.0/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2170:/usr/include/c++/11.1.0/bits/basic_string.h ****       }
2171:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2172:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201103L
2173:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2174:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2175:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2176:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2177:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2178:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2179:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2180:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2181:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2182:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2183:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2184:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2185:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  thrown.
2186:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2187:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2188:/usr/include/c++/11.1.0/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2189:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2190:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++11
2191:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2192:/usr/include/c++/11.1.0/bits/basic_string.h **** #if __cplusplus >= 201703L
2193:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2194:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2195:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2196:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2197:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2198:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2199:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2200:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
2201:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2202:/usr/include/c++/11.1.0/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2203:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
2204:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2205:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2206:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
2207:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2208:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2209:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2210:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2211:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2212:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2213:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2214:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2215:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2216:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2217:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
2218:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2219:/usr/include/c++/11.1.0/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2220:/usr/include/c++/11.1.0/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2221:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
2222:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2223:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
2224:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      __sv.data()
2225:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2226:/usr/include/c++/11.1.0/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2227:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
2228:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2229:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2230:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2231:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2232:/usr/include/c++/11.1.0/bits/basic_string.h ****           to replace at.
2233:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2234:/usr/include/c++/11.1.0/bits/basic_string.h ****           for the replace.
2235:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2236:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Reference to this string.
2237:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2238:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<typename _Tp>
2239:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2240:/usr/include/c++/11.1.0/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2241:/usr/include/c++/11.1.0/bits/basic_string.h **** 	{
2242:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2243:/usr/include/c++/11.1.0/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2244:/usr/include/c++/11.1.0/bits/basic_string.h **** 	}
2245:/usr/include/c++/11.1.0/bits/basic_string.h **** #endif // C++17
2246:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2247:/usr/include/c++/11.1.0/bits/basic_string.h ****     private:
2248:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _Integer>
2249:/usr/include/c++/11.1.0/bits/basic_string.h **** 	basic_string&
2250:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2251:/usr/include/c++/11.1.0/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2252:/usr/include/c++/11.1.0/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2253:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2254:/usr/include/c++/11.1.0/bits/basic_string.h ****       template<class _InputIterator>
2255:/usr/include/c++/11.1.0/bits/basic_string.h **** 	basic_string&
2256:/usr/include/c++/11.1.0/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2257:/usr/include/c++/11.1.0/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2258:/usr/include/c++/11.1.0/bits/basic_string.h **** 			    __false_type);
2259:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2260:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2261:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2262:/usr/include/c++/11.1.0/bits/basic_string.h **** 		     _CharT __c);
2263:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2264:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2265:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2266:/usr/include/c++/11.1.0/bits/basic_string.h **** 		 const size_type __len2);
2267:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2268:/usr/include/c++/11.1.0/bits/basic_string.h ****       basic_string&
2269:/usr/include/c++/11.1.0/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2270:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2271:/usr/include/c++/11.1.0/bits/basic_string.h ****     public:
2272:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2273:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2274:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2275:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2276:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2277:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2278:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @return  Number of characters actually copied
2279:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2280:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2281:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2282:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2283:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  out_of_range is thrown.
2284:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2285:/usr/include/c++/11.1.0/bits/basic_string.h ****       size_type
2286:/usr/include/c++/11.1.0/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2287:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2288:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2289:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2290:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @param __s  String to swap with.
2291:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2292:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2293:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  time.
2294:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2295:/usr/include/c++/11.1.0/bits/basic_string.h ****       void
2296:/usr/include/c++/11.1.0/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2297:/usr/include/c++/11.1.0/bits/basic_string.h **** 
2298:/usr/include/c++/11.1.0/bits/basic_string.h ****       // String operations:
2299:/usr/include/c++/11.1.0/bits/basic_string.h ****       /**
2300:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2301:/usr/include/c++/11.1.0/bits/basic_string.h ****        *
2302:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2303:/usr/include/c++/11.1.0/bits/basic_string.h ****        *  happen.
2304:/usr/include/c++/11.1.0/bits/basic_string.h ****       */
2305:/usr/include/c++/11.1.0/bits/basic_string.h ****       const _CharT*
2306:/usr/include/c++/11.1.0/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
 1458              		.loc 3 2306 7 is_stmt 1 discriminator 1 view .LVU326
 1459              	.LBB1267:
 1460              	.LBI1267:
 186:/usr/include/c++/11.1.0/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1461              		.loc 3 186 7 discriminator 1 view .LVU327
 1462              	.LBB1268:
 187:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 1463              		.loc 3 187 28 is_stmt 0 discriminator 1 view .LVU328
 1464 0010 488B02   		movq	(%rdx), %rax
 1465              	.LVL84:
 1466              	.L24:
 187:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 1467              		.loc 3 187 28 discriminator 1 view .LVU329
 1468              	.LBE1268:
 1469              	.LBE1267:
 1470              	.LBE1266:
 299:quantum/serial_link/tests/gtest/gtest.h ****   // TODO(vladl@google.com): Remove this after making sure no clients use it.
 1471              		.loc 1 299 3 view .LVU330
 1472 0013 C3       		ret
 1473              		.cfi_endproc
 1474              	.LFE4124:
 1476              		.section	.text._ZN20TripleBufferedObjectC2Ev,"axG",@progbits,_ZN20TripleBufferedObjectC5Ev,comdat
 1477              		.align 2
 1478              		.weak	_ZN20TripleBufferedObjectC2Ev
 1480              	_ZN20TripleBufferedObjectC2Ev:
 1481              	.LVL85:
 1482              	.LFB4237:
  39:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****         triple_buffer_init((triple_buffer_object_t*)&test_object);
 1483              		.loc 8 39 5 is_stmt 1 view -0
 1484              		.cfi_startproc
  39:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****         triple_buffer_init((triple_buffer_object_t*)&test_object);
 1485              		.loc 8 39 5 is_stmt 0 view .LVU332
 1486 0000 53       		pushq	%rbx
 1487              		.cfi_def_cfa_offset 16
 1488              		.cfi_offset 3, -16
  39:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****         triple_buffer_init((triple_buffer_object_t*)&test_object);
 1489              		.loc 8 39 5 view .LVU333
 1490 0001 4889FB   		movq	%rdi, %rbx
 1491              	.LBB1269:
  39:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****         triple_buffer_init((triple_buffer_object_t*)&test_object);
 1492              		.loc 8 39 28 view .LVU334
 1493 0004 E8000000 		call	_ZN7testing4TestC2Ev@PLT
 1493      00
 1494              	.LVL86:
  39:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****         triple_buffer_init((triple_buffer_object_t*)&test_object);
 1495              		.loc 8 39 28 view .LVU335
 1496 0009 488D0500 		leaq	16+_ZTV20TripleBufferedObject(%rip), %rax
 1496      000000
  40:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     }
 1497              		.loc 8 40 27 view .LVU336
 1498 0010 488D3D00 		leaq	test_object(%rip), %rdi
 1498      000000
  39:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****         triple_buffer_init((triple_buffer_object_t*)&test_object);
 1499              		.loc 8 39 28 view .LVU337
 1500 0017 488903   		movq	%rax, (%rbx)
  40:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     }
 1501              		.loc 8 40 9 is_stmt 1 view .LVU338
 1502              	.LBE1269:
  41:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** };
 1503              		.loc 8 41 5 is_stmt 0 view .LVU339
 1504 001a 5B       		popq	%rbx
 1505              		.cfi_def_cfa_offset 8
 1506              	.LVL87:
 1507              	.LBB1270:
  40:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     }
 1508              		.loc 8 40 27 view .LVU340
 1509 001b E9000000 		jmp	triple_buffer_init@PLT
 1509      00
 1510              	.LVL88:
 1511              	.LBE1270:
 1512              		.cfi_endproc
 1513              	.LFE4237:
 1515              		.weak	_ZN20TripleBufferedObjectC1Ev
 1516              		.set	_ZN20TripleBufferedObjectC1Ev,_ZN20TripleBufferedObjectC2Ev
 1517              		.section	.text._ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_objec
 1518              		.align 2
 1519              		.weak	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE10
 1521              	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE10CreateT
 1522              	.LVL89:
 1523              	.LFB5215:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1524              		.loc 2 484 17 is_stmt 1 view -0
 1525              		.cfi_startproc
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1526              		.loc 2 484 17 is_stmt 0 view .LVU342
 1527 0000 4883EC18 		subq	$24, %rsp
 1528              		.cfi_def_cfa_offset 32
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1529              		.loc 2 484 39 view .LVU343
 1530 0004 BF100000 		movl	$16, %edi
 1530      00
 1531              	.LVL90:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1532              		.loc 2 484 39 view .LVU344
 1533 0009 E8000000 		call	_Znwm@PLT
 1533      00
 1534              	.LVL91:
 1535              	.LBB1274:
 1536              	.LBI1274:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1537              		.loc 8 44 1 is_stmt 1 view .LVU345
 1538              	.LBB1275:
 1539 000e 4889C7   		movq	%rax, %rdi
 1540 0011 48894424 		movq	%rax, 8(%rsp)
 1540      08
 1541 0016 E8000000 		call	_ZN20TripleBufferedObjectC2Ev
 1541      00
 1542              	.LVL92:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1543              		.loc 8 44 1 is_stmt 0 view .LVU346
 1544 001b 488B4424 		movq	8(%rsp), %rax
 1544      08
 1545 0020 488D1500 		leaq	16+_ZTV49TripleBufferedObject_writes_and_reads_object_Test(%rip), %rdx
 1545      000000
 1546 0027 488910   		movq	%rdx, (%rax)
 1547              	.LVL93:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1548              		.loc 8 44 1 view .LVU347
 1549              	.LBE1275:
 1550              	.LBE1274:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1551              		.loc 2 484 54 view .LVU348
 1552 002a 4883C418 		addq	$24, %rsp
 1553              		.cfi_def_cfa_offset 8
 1554 002e C3       		ret
 1555              		.cfi_endproc
 1556              	.LFE5215:
 1558              		.section	.text._ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_Te
 1559              		.align 2
 1560              		.weak	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestE10Crea
 1562              	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestE10CreateTestE
 1563              	.LVL94:
 1564              	.LFB5214:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1565              		.loc 2 484 17 is_stmt 1 view -0
 1566              		.cfi_startproc
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1567              		.loc 2 484 17 is_stmt 0 view .LVU350
 1568 0000 4883EC18 		subq	$24, %rsp
 1569              		.cfi_def_cfa_offset 32
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1570              		.loc 2 484 39 view .LVU351
 1571 0004 BF100000 		movl	$16, %edi
 1571      00
 1572              	.LVL95:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1573              		.loc 2 484 39 view .LVU352
 1574 0009 E8000000 		call	_Znwm@PLT
 1574      00
 1575              	.LVL96:
 1576              	.LBB1279:
 1577              	.LBI1279:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1578              		.loc 8 50 1 is_stmt 1 view .LVU353
 1579              	.LBB1280:
 1580 000e 4889C7   		movq	%rax, %rdi
 1581 0011 48894424 		movq	%rax, 8(%rsp)
 1581      08
 1582 0016 E8000000 		call	_ZN20TripleBufferedObjectC2Ev
 1582      00
 1583              	.LVL97:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1584              		.loc 8 50 1 is_stmt 0 view .LVU354
 1585 001b 488B4424 		movq	8(%rsp), %rax
 1585      08
 1586 0020 488D1500 		leaq	16+_ZTV45TripleBufferedObject_does_not_read_empty_Test(%rip), %rdx
 1586      000000
 1587 0027 488910   		movq	%rdx, (%rax)
 1588              	.LVL98:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1589              		.loc 8 50 1 view .LVU355
 1590              	.LBE1280:
 1591              	.LBE1279:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1592              		.loc 2 484 54 view .LVU356
 1593 002a 4883C418 		addq	$24, %rsp
 1594              		.cfi_def_cfa_offset 8
 1595 002e C3       		ret
 1596              		.cfi_endproc
 1597              	.LFE5214:
 1599              		.section	.text._ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads
 1600              		.align 2
 1601              		.weak	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_T
 1603              	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestE10C
 1604              	.LVL99:
 1605              	.LFB5213:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1606              		.loc 2 484 17 is_stmt 1 view -0
 1607              		.cfi_startproc
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1608              		.loc 2 484 17 is_stmt 0 view .LVU358
 1609 0000 4883EC18 		subq	$24, %rsp
 1610              		.cfi_def_cfa_offset 32
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1611              		.loc 2 484 39 view .LVU359
 1612 0004 BF100000 		movl	$16, %edi
 1612      00
 1613              	.LVL100:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1614              		.loc 2 484 39 view .LVU360
 1615 0009 E8000000 		call	_Znwm@PLT
 1615      00
 1616              	.LVL101:
 1617              	.LBB1284:
 1618              	.LBI1284:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1619              		.loc 8 54 1 is_stmt 1 view .LVU361
 1620              	.LBB1285:
 1621 000e 4889C7   		movq	%rax, %rdi
 1622 0011 48894424 		movq	%rax, 8(%rsp)
 1622      08
 1623 0016 E8000000 		call	_ZN20TripleBufferedObjectC2Ev
 1623      00
 1624              	.LVL102:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1625              		.loc 8 54 1 is_stmt 0 view .LVU362
 1626 001b 488B4424 		movq	8(%rsp), %rax
 1626      08
 1627 0020 488D1500 		leaq	16+_ZTV55TripleBufferedObject_writes_twice_and_reads_object_Test(%rip), %rdx
 1627      000000
 1628 0027 488910   		movq	%rdx, (%rax)
 1629              	.LVL103:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1630              		.loc 8 54 1 view .LVU363
 1631              	.LBE1285:
 1632              	.LBE1284:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1633              		.loc 2 484 54 view .LVU364
 1634 002a 4883C418 		addq	$24, %rsp
 1635              		.cfi_def_cfa_offset 8
 1636 002e C3       		ret
 1637              		.cfi_endproc
 1638              	.LFE5213:
 1640              		.section	.text._ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write
 1641              		.align 2
 1642              		.weak	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_m
 1644              	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_o
 1645              	.LVL104:
 1646              	.LFB5212:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1647              		.loc 2 484 17 is_stmt 1 view -0
 1648              		.cfi_startproc
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1649              		.loc 2 484 17 is_stmt 0 view .LVU366
 1650 0000 4883EC18 		subq	$24, %rsp
 1651              		.cfi_def_cfa_offset 32
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1652              		.loc 2 484 39 view .LVU367
 1653 0004 BF100000 		movl	$16, %edi
 1653      00
 1654              	.LVL105:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1655              		.loc 2 484 39 view .LVU368
 1656 0009 E8000000 		call	_Znwm@PLT
 1656      00
 1657              	.LVL106:
 1658              	.LBB1289:
 1659              	.LBI1289:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1660              		.loc 8 62 1 is_stmt 1 view .LVU369
 1661              	.LBB1290:
 1662 000e 4889C7   		movq	%rax, %rdi
 1663 0011 48894424 		movq	%rax, 8(%rsp)
 1663      08
 1664 0016 E8000000 		call	_ZN20TripleBufferedObjectC2Ev
 1664      00
 1665              	.LVL107:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1666              		.loc 8 62 1 is_stmt 0 view .LVU370
 1667 001b 488B4424 		movq	8(%rsp), %rax
 1667      08
 1668 0020 488D1500 		leaq	16+_ZTV70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test(%rip), %rdx
 1668      000000
 1669 0027 488910   		movq	%rdx, (%rax)
 1670              	.LVL108:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1671              		.loc 8 62 1 view .LVU371
 1672              	.LBE1290:
 1673              	.LBE1289:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1674              		.loc 2 484 54 view .LVU372
 1675 002a 4883C418 		addq	$24, %rsp
 1676              		.cfi_def_cfa_offset 8
 1677 002e C3       		ret
 1678              		.cfi_endproc
 1679              	.LFE5212:
 1681              		.section	.text._ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in
 1682              		.align 2
 1683              		.weak	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_midd
 1685              	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_r
 1686              	.LVL109:
 1687              	.LFB5211:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1688              		.loc 2 484 17 is_stmt 1 view -0
 1689              		.cfi_startproc
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1690              		.loc 2 484 17 is_stmt 0 view .LVU374
 1691 0000 4883EC18 		subq	$24, %rsp
 1692              		.cfi_def_cfa_offset 32
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1693              		.loc 2 484 39 view .LVU375
 1694 0004 BF100000 		movl	$16, %edi
 1694      00
 1695              	.LVL110:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1696              		.loc 2 484 39 view .LVU376
 1697 0009 E8000000 		call	_Znwm@PLT
 1697      00
 1698              	.LVL111:
 1699              	.LBB1294:
 1700              	.LBI1294:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1701              		.loc 8 73 1 is_stmt 1 view .LVU377
 1702              	.LBB1295:
 1703 000e 4889C7   		movq	%rax, %rdi
 1704 0011 48894424 		movq	%rax, 8(%rsp)
 1704      08
 1705 0016 E8000000 		call	_ZN20TripleBufferedObjectC2Ev
 1705      00
 1706              	.LVL112:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1707              		.loc 8 73 1 is_stmt 0 view .LVU378
 1708 001b 488B4424 		movq	8(%rsp), %rax
 1708      08
 1709 0020 488D1500 		leaq	16+_ZTV67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test(%rip), %rdx
 1709      000000
 1710 0027 488910   		movq	%rdx, (%rax)
 1711              	.LVL113:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1712              		.loc 8 73 1 view .LVU379
 1713              	.LBE1295:
 1714              	.LBE1294:
 484:quantum/serial_link/tests/gtest/./internal/gtest-internal.h **** };
 1715              		.loc 2 484 54 view .LVU380
 1716 002a 4883C418 		addq	$24, %rsp
 1717              		.cfi_def_cfa_offset 8
 1718 002e C3       		ret
 1719              		.cfi_endproc
 1720              	.LFE5211:
 1722              		.section	.text._ZN20TripleBufferedObjectD2Ev,"axG",@progbits,_ZN20TripleBufferedObjectD5Ev,comdat
 1723              		.align 2
 1724              		.weak	_ZN20TripleBufferedObjectD2Ev
 1726              	_ZN20TripleBufferedObjectD2Ev:
 1727              	.LVL114:
 1728              	.LFB4241:
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
 1729              		.loc 8 37 7 is_stmt 1 view -0
 1730              		.cfi_startproc
 1731              	.LBB1296:
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
 1732              		.loc 8 37 7 is_stmt 0 view .LVU382
 1733 0000 488D0500 		leaq	16+_ZTV20TripleBufferedObject(%rip), %rax
 1733      000000
 1734 0007 488907   		movq	%rax, (%rdi)
 1735 000a E9000000 		jmp	_ZN7testing4TestD2Ev@PLT
 1735      00
 1736              	.LVL115:
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
 1737              		.loc 8 37 7 view .LVU383
 1738              	.LBE1296:
 1739              		.cfi_endproc
 1740              	.LFE4241:
 1742              		.weak	_ZN20TripleBufferedObjectD1Ev
 1743              		.set	_ZN20TripleBufferedObjectD1Ev,_ZN20TripleBufferedObjectD2Ev
 1744              		.section	.text._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD2Ev,"axG",
 1745              		.align 2
 1746              		.weak	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD2Ev
 1748              	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD2Ev:
 1749              	.LVL116:
 1750              	.LFB5165:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1751              		.loc 8 73 1 is_stmt 1 view -0
 1752              		.cfi_startproc
 1753              	.LBB1297:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1754              		.loc 8 73 1 is_stmt 0 view .LVU385
 1755 0000 488D0500 		leaq	16+_ZTV67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test(%rip), %rax
 1755      000000
 1756 0007 488907   		movq	%rax, (%rdi)
 1757 000a E9000000 		jmp	_ZN20TripleBufferedObjectD2Ev
 1757      00
 1758              	.LVL117:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1759              		.loc 8 73 1 view .LVU386
 1760              	.LBE1297:
 1761              		.cfi_endproc
 1762              	.LFE5165:
 1764              		.weak	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD1Ev
 1765              		.set	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD1Ev,_ZN67TripleBuffe
 1766              		.section	.text._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD0Ev,"axG",
 1767              		.align 2
 1768              		.weak	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD0Ev
 1770              	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD0Ev:
 1771              	.LVL118:
 1772              	.LFB5167:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1773              		.loc 8 73 1 is_stmt 1 view -0
 1774              		.cfi_startproc
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1775              		.loc 8 73 1 is_stmt 0 view .LVU388
 1776 0000 4883EC18 		subq	$24, %rsp
 1777              		.cfi_def_cfa_offset 32
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1778              		.loc 8 73 1 view .LVU389
 1779 0004 48897C24 		movq	%rdi, 8(%rsp)
 1779      08
 1780 0009 E8000000 		call	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD1Ev
 1780      00
 1781              	.LVL119:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1782              		.loc 8 73 1 view .LVU390
 1783 000e 488B7C24 		movq	8(%rsp), %rdi
 1783      08
 1784 0013 4883C418 		addq	$24, %rsp
 1785              		.cfi_def_cfa_offset 8
 1786 0017 E9000000 		jmp	_ZdlPv@PLT
 1786      00
 1787              	.LVL120:
 1788              		.cfi_endproc
 1789              	.LFE5167:
 1791              		.section	.text._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD2Ev,"ax
 1792              		.align 2
 1793              		.weak	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD2Ev
 1795              	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD2Ev:
 1796              	.LVL121:
 1797              	.LFB5173:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1798              		.loc 8 62 1 is_stmt 1 view -0
 1799              		.cfi_startproc
 1800              	.LBB1298:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1801              		.loc 8 62 1 is_stmt 0 view .LVU392
 1802 0000 488D0500 		leaq	16+_ZTV70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test(%rip), %rax
 1802      000000
 1803 0007 488907   		movq	%rax, (%rdi)
 1804 000a E9000000 		jmp	_ZN20TripleBufferedObjectD2Ev
 1804      00
 1805              	.LVL122:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1806              		.loc 8 62 1 view .LVU393
 1807              	.LBE1298:
 1808              		.cfi_endproc
 1809              	.LFE5173:
 1811              		.weak	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD1Ev
 1812              		.set	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD1Ev,_ZN70TripleBu
 1813              		.section	.text._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD0Ev,"ax
 1814              		.align 2
 1815              		.weak	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD0Ev
 1817              	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD0Ev:
 1818              	.LVL123:
 1819              	.LFB5175:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1820              		.loc 8 62 1 is_stmt 1 view -0
 1821              		.cfi_startproc
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1822              		.loc 8 62 1 is_stmt 0 view .LVU395
 1823 0000 4883EC18 		subq	$24, %rsp
 1824              		.cfi_def_cfa_offset 32
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1825              		.loc 8 62 1 view .LVU396
 1826 0004 48897C24 		movq	%rdi, 8(%rsp)
 1826      08
 1827 0009 E8000000 		call	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD1Ev
 1827      00
 1828              	.LVL124:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 1829              		.loc 8 62 1 view .LVU397
 1830 000e 488B7C24 		movq	8(%rsp), %rdi
 1830      08
 1831 0013 4883C418 		addq	$24, %rsp
 1832              		.cfi_def_cfa_offset 8
 1833 0017 E9000000 		jmp	_ZdlPv@PLT
 1833      00
 1834              	.LVL125:
 1835              		.cfi_endproc
 1836              	.LFE5175:
 1838              		.section	.text._ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD2Ev,"axG",@progbits,_Z
 1839              		.align 2
 1840              		.weak	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD2Ev
 1842              	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD2Ev:
 1843              	.LVL126:
 1844              	.LFB5181:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1845              		.loc 8 54 1 is_stmt 1 view -0
 1846              		.cfi_startproc
 1847              	.LBB1299:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1848              		.loc 8 54 1 is_stmt 0 view .LVU399
 1849 0000 488D0500 		leaq	16+_ZTV55TripleBufferedObject_writes_twice_and_reads_object_Test(%rip), %rax
 1849      000000
 1850 0007 488907   		movq	%rax, (%rdi)
 1851 000a E9000000 		jmp	_ZN20TripleBufferedObjectD2Ev
 1851      00
 1852              	.LVL127:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1853              		.loc 8 54 1 view .LVU400
 1854              	.LBE1299:
 1855              		.cfi_endproc
 1856              	.LFE5181:
 1858              		.weak	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD1Ev
 1859              		.set	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD1Ev,_ZN55TripleBufferedObject_wr
 1860              		.section	.text._ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD0Ev,"axG",@progbits,_Z
 1861              		.align 2
 1862              		.weak	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD0Ev
 1864              	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD0Ev:
 1865              	.LVL128:
 1866              	.LFB5183:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1867              		.loc 8 54 1 is_stmt 1 view -0
 1868              		.cfi_startproc
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1869              		.loc 8 54 1 is_stmt 0 view .LVU402
 1870 0000 4883EC18 		subq	$24, %rsp
 1871              		.cfi_def_cfa_offset 32
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1872              		.loc 8 54 1 view .LVU403
 1873 0004 48897C24 		movq	%rdi, 8(%rsp)
 1873      08
 1874 0009 E8000000 		call	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD1Ev
 1874      00
 1875              	.LVL129:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1876              		.loc 8 54 1 view .LVU404
 1877 000e 488B7C24 		movq	8(%rsp), %rdi
 1877      08
 1878 0013 4883C418 		addq	$24, %rsp
 1879              		.cfi_def_cfa_offset 8
 1880 0017 E9000000 		jmp	_ZdlPv@PLT
 1880      00
 1881              	.LVL130:
 1882              		.cfi_endproc
 1883              	.LFE5183:
 1885              		.section	.text._ZN45TripleBufferedObject_does_not_read_empty_TestD2Ev,"axG",@progbits,_ZN45TripleB
 1886              		.align 2
 1887              		.weak	_ZN45TripleBufferedObject_does_not_read_empty_TestD2Ev
 1889              	_ZN45TripleBufferedObject_does_not_read_empty_TestD2Ev:
 1890              	.LVL131:
 1891              	.LFB5189:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1892              		.loc 8 50 1 is_stmt 1 view -0
 1893              		.cfi_startproc
 1894              	.LBB1300:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1895              		.loc 8 50 1 is_stmt 0 view .LVU406
 1896 0000 488D0500 		leaq	16+_ZTV45TripleBufferedObject_does_not_read_empty_Test(%rip), %rax
 1896      000000
 1897 0007 488907   		movq	%rax, (%rdi)
 1898 000a E9000000 		jmp	_ZN20TripleBufferedObjectD2Ev
 1898      00
 1899              	.LVL132:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1900              		.loc 8 50 1 view .LVU407
 1901              	.LBE1300:
 1902              		.cfi_endproc
 1903              	.LFE5189:
 1905              		.weak	_ZN45TripleBufferedObject_does_not_read_empty_TestD1Ev
 1906              		.set	_ZN45TripleBufferedObject_does_not_read_empty_TestD1Ev,_ZN45TripleBufferedObject_does_not_rea
 1907              		.section	.text._ZN45TripleBufferedObject_does_not_read_empty_TestD0Ev,"axG",@progbits,_ZN45TripleB
 1908              		.align 2
 1909              		.weak	_ZN45TripleBufferedObject_does_not_read_empty_TestD0Ev
 1911              	_ZN45TripleBufferedObject_does_not_read_empty_TestD0Ev:
 1912              	.LVL133:
 1913              	.LFB5191:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1914              		.loc 8 50 1 is_stmt 1 view -0
 1915              		.cfi_startproc
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1916              		.loc 8 50 1 is_stmt 0 view .LVU409
 1917 0000 4883EC18 		subq	$24, %rsp
 1918              		.cfi_def_cfa_offset 32
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1919              		.loc 8 50 1 view .LVU410
 1920 0004 48897C24 		movq	%rdi, 8(%rsp)
 1920      08
 1921 0009 E8000000 		call	_ZN45TripleBufferedObject_does_not_read_empty_TestD1Ev
 1921      00
 1922              	.LVL134:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 1923              		.loc 8 50 1 view .LVU411
 1924 000e 488B7C24 		movq	8(%rsp), %rdi
 1924      08
 1925 0013 4883C418 		addq	$24, %rsp
 1926              		.cfi_def_cfa_offset 8
 1927 0017 E9000000 		jmp	_ZdlPv@PLT
 1927      00
 1928              	.LVL135:
 1929              		.cfi_endproc
 1930              	.LFE5191:
 1932              		.section	.text._ZN49TripleBufferedObject_writes_and_reads_object_TestD2Ev,"axG",@progbits,_ZN49Tri
 1933              		.align 2
 1934              		.weak	_ZN49TripleBufferedObject_writes_and_reads_object_TestD2Ev
 1936              	_ZN49TripleBufferedObject_writes_and_reads_object_TestD2Ev:
 1937              	.LVL136:
 1938              	.LFB5197:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1939              		.loc 8 44 1 is_stmt 1 view -0
 1940              		.cfi_startproc
 1941              	.LBB1301:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1942              		.loc 8 44 1 is_stmt 0 view .LVU413
 1943 0000 488D0500 		leaq	16+_ZTV49TripleBufferedObject_writes_and_reads_object_Test(%rip), %rax
 1943      000000
 1944 0007 488907   		movq	%rax, (%rdi)
 1945 000a E9000000 		jmp	_ZN20TripleBufferedObjectD2Ev
 1945      00
 1946              	.LVL137:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1947              		.loc 8 44 1 view .LVU414
 1948              	.LBE1301:
 1949              		.cfi_endproc
 1950              	.LFE5197:
 1952              		.weak	_ZN49TripleBufferedObject_writes_and_reads_object_TestD1Ev
 1953              		.set	_ZN49TripleBufferedObject_writes_and_reads_object_TestD1Ev,_ZN49TripleBufferedObject_writes_a
 1954              		.section	.text._ZN49TripleBufferedObject_writes_and_reads_object_TestD0Ev,"axG",@progbits,_ZN49Tri
 1955              		.align 2
 1956              		.weak	_ZN49TripleBufferedObject_writes_and_reads_object_TestD0Ev
 1958              	_ZN49TripleBufferedObject_writes_and_reads_object_TestD0Ev:
 1959              	.LVL138:
 1960              	.LFB5199:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1961              		.loc 8 44 1 is_stmt 1 view -0
 1962              		.cfi_startproc
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1963              		.loc 8 44 1 is_stmt 0 view .LVU416
 1964 0000 4883EC18 		subq	$24, %rsp
 1965              		.cfi_def_cfa_offset 32
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1966              		.loc 8 44 1 view .LVU417
 1967 0004 48897C24 		movq	%rdi, 8(%rsp)
 1967      08
 1968 0009 E8000000 		call	_ZN49TripleBufferedObject_writes_and_reads_object_TestD1Ev
 1968      00
 1969              	.LVL139:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 1970              		.loc 8 44 1 view .LVU418
 1971 000e 488B7C24 		movq	8(%rsp), %rdi
 1971      08
 1972 0013 4883C418 		addq	$24, %rsp
 1973              		.cfi_def_cfa_offset 8
 1974 0017 E9000000 		jmp	_ZdlPv@PLT
 1974      00
 1975              	.LVL140:
 1976              		.cfi_endproc
 1977              	.LFE5199:
 1979              		.section	.text._ZN20TripleBufferedObjectD0Ev,"axG",@progbits,_ZN20TripleBufferedObjectD5Ev,comdat
 1980              		.align 2
 1981              		.weak	_ZN20TripleBufferedObjectD0Ev
 1983              	_ZN20TripleBufferedObjectD0Ev:
 1984              	.LVL141:
 1985              	.LFB4243:
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
 1986              		.loc 8 37 7 is_stmt 1 view -0
 1987              		.cfi_startproc
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
 1988              		.loc 8 37 7 is_stmt 0 view .LVU420
 1989 0000 4883EC18 		subq	$24, %rsp
 1990              		.cfi_def_cfa_offset 32
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
 1991              		.loc 8 37 7 view .LVU421
 1992 0004 48897C24 		movq	%rdi, 8(%rsp)
 1992      08
 1993 0009 E8000000 		call	_ZN20TripleBufferedObjectD1Ev
 1993      00
 1994              	.LVL142:
  37:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** public:
 1995              		.loc 8 37 7 view .LVU422
 1996 000e 488B7C24 		movq	8(%rsp), %rdi
 1996      08
 1997 0013 4883C418 		addq	$24, %rsp
 1998              		.cfi_def_cfa_offset 8
 1999 0017 E9000000 		jmp	_ZdlPv@PLT
 1999      00
 2000              	.LVL143:
 2001              		.cfi_endproc
 2002              	.LFE4243:
 2004              		.section	.text._ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIc
 2005              		.align 2
 2006              		.weak	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEE
 2008              	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED2Ev:
 2009              	.LVL144:
 2010              	.LFB4519:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2011              		.loc 10 1120 3 is_stmt 1 view -0
 2012              		.cfi_startproc
 2013              	.LBB1307:
 2014              	.LBI1307:
1125:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1126:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   T* release() {
1127:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     T* const ptr = ptr_;
1128:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     ptr_ = NULL;
1129:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     return ptr;
1130:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   }
1131:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
1132:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****   void reset(T* p = NULL) {
 2015              		.loc 10 1132 8 view .LVU424
 2016              	.LBB1308:
1133:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     if (p != ptr_) {
 2017              		.loc 10 1133 5 is_stmt 0 view .LVU425
 2018 0000 48833F00 		cmpq	$0, (%rdi)
 2019 0004 7426     		je	.L67
 2020              	.LBE1308:
 2021              	.LBE1307:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2022              		.loc 10 1120 3 view .LVU426
 2023 0006 53       		pushq	%rbx
 2024              		.cfi_def_cfa_offset 16
 2025              		.cfi_offset 3, -16
 2026 0007 4889FB   		movq	%rdi, %rbx
 2027              	.LVL145:
 2028              	.LBB1315:
 2029              	.LBB1313:
 2030              	.LBB1309:
 2031              	.LBI1309:
1132:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     if (p != ptr_) {
 2032              		.loc 10 1132 8 is_stmt 1 view .LVU427
 2033              	.LBB1310:
1134:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****       if (IsTrue(sizeof(T) > 0)) {  // Makes sure T is a complete type.
 2034              		.loc 10 1134 17 is_stmt 0 view .LVU428
 2035 000a BF010000 		movl	$1, %edi
 2035      00
 2036              	.LVL146:
 2037              		.loc 10 1134 17 view .LVU429
 2038 000f E8000000 		call	_ZN7testing8internal6IsTrueEb@PLT
 2038      00
 2039              	.LVL147:
 2040              		.loc 10 1134 7 view .LVU430
 2041 0014 84C0     		testb	%al, %al
 2042 0016 7412     		je	.L58
1135:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         delete ptr_;
 2043              		.loc 10 1135 16 view .LVU431
 2044 0018 488B3B   		movq	(%rbx), %rdi
 2045              		.loc 10 1135 9 view .LVU432
 2046 001b 4885FF   		testq	%rdi, %rdi
 2047 001e 740A     		je	.L58
 2048 0020 488B07   		movq	(%rdi), %rax
 2049              	.LBE1310:
 2050              	.LBE1309:
 2051              	.LBE1313:
 2052              	.LBE1315:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2053              		.loc 10 1120 28 view .LVU433
 2054 0023 5B       		popq	%rbx
 2055              		.cfi_remember_state
 2056              		.cfi_restore 3
 2057              		.cfi_def_cfa_offset 8
 2058              	.LVL148:
 2059              	.LBB1316:
 2060              	.LBB1314:
 2061              	.LBB1312:
 2062              	.LBB1311:
 2063              		.loc 10 1135 9 view .LVU434
 2064 0024 488B4008 		movq	8(%rax), %rax
 2065 0028 FFE0     		jmp	*%rax
 2066              	.LVL149:
 2067              	.L58:
 2068              		.cfi_restore_state
 2069              		.loc 10 1135 9 view .LVU435
 2070              	.LBE1311:
 2071              	.LBE1312:
 2072              	.LBE1314:
 2073              	.LBE1316:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2074              		.loc 10 1120 28 view .LVU436
 2075 002a 5B       		popq	%rbx
 2076              		.cfi_def_cfa_offset 8
 2077              	.LVL150:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2078              		.loc 10 1120 28 view .LVU437
 2079 002b C3       		ret
 2080              	.LVL151:
 2081              	.L67:
 2082              		.cfi_restore 3
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2083              		.loc 10 1120 28 view .LVU438
 2084 002c C3       		ret
 2085              		.cfi_endproc
 2086              	.LFE4519:
 2088              		.weak	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEE
 2089              		.set	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 2090              		.section	.text._ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcE
 2091              		.align 2
 2092              		.weak	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
 2094              	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
 2095              	.LVL152:
 2096              	.LFB4635:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2097              		.loc 10 1120 3 is_stmt 1 view -0
 2098              		.cfi_startproc
 2099              	.LBB1331:
 2100              	.LBI1331:
1132:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     if (p != ptr_) {
 2101              		.loc 10 1132 8 view .LVU440
 2102              	.LBB1332:
1133:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****       if (IsTrue(sizeof(T) > 0)) {  // Makes sure T is a complete type.
 2103              		.loc 10 1133 5 is_stmt 0 view .LVU441
 2104 0000 48833F00 		cmpq	$0, (%rdi)
 2105 0004 7433     		je	.L79
 2106              	.LBE1332:
 2107              	.LBE1331:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2108              		.loc 10 1120 3 view .LVU442
 2109 0006 55       		pushq	%rbp
 2110              		.cfi_def_cfa_offset 16
 2111              		.cfi_offset 6, -16
 2112 0007 53       		pushq	%rbx
 2113              		.cfi_def_cfa_offset 24
 2114              		.cfi_offset 3, -24
 2115 0008 4889FB   		movq	%rdi, %rbx
 2116              	.LVL153:
 2117              	.LBB1350:
 2118              	.LBB1346:
 2119              	.LBB1333:
 2120              	.LBI1333:
1132:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****     if (p != ptr_) {
 2121              		.loc 10 1132 8 is_stmt 1 view .LVU443
 2122              	.LBB1334:
1134:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         delete ptr_;
 2123              		.loc 10 1134 17 is_stmt 0 view .LVU444
 2124 000b BF010000 		movl	$1, %edi
 2124      00
 2125              	.LVL154:
1134:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         delete ptr_;
 2126              		.loc 10 1134 17 view .LVU445
 2127              	.LBE1334:
 2128              	.LBE1333:
 2129              	.LBE1346:
 2130              	.LBE1350:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2131              		.loc 10 1120 3 view .LVU446
 2132 0010 51       		pushq	%rcx
 2133              		.cfi_def_cfa_offset 32
 2134              	.LBB1351:
 2135              	.LBB1347:
 2136              	.LBB1343:
 2137              	.LBB1340:
1134:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         delete ptr_;
 2138              		.loc 10 1134 17 view .LVU447
 2139 0011 E8000000 		call	_ZN7testing8internal6IsTrueEb@PLT
 2139      00
 2140              	.LVL155:
1134:quantum/serial_link/tests/gtest/./internal/./gtest-port.h ****         delete ptr_;
 2141              		.loc 10 1134 7 view .LVU448
 2142 0016 84C0     		testb	%al, %al
 2143 0018 741B     		je	.L70
 2144              		.loc 10 1135 16 view .LVU449
 2145 001a 488B2B   		movq	(%rbx), %rbp
 2146              		.loc 10 1135 9 view .LVU450
 2147 001d 4885ED   		testq	%rbp, %rbp
 2148 0020 7413     		je	.L70
 2149              	.LVL156:
 2150              	.LBB1335:
 2151              	.LBI1335:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 2152              		.loc 3 657 7 is_stmt 1 view .LVU451
 2153              	.LBB1336:
 658:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 2154              		.loc 3 658 19 is_stmt 0 view .LVU452
 2155 0022 4889EF   		movq	%rbp, %rdi
 2156 0025 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 2156      00
 2157              	.LVL157:
 2158              	.LBB1337:
 2159              	.LBI1337:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 2160              		.loc 3 150 14 is_stmt 1 view .LVU453
 2161              	.LBB1338:
 2162              	.LBI1338:
 2163              		.loc 4 162 7 view .LVU454
 2164              	.LBB1339:
 2165              	.LBI1339:
 2166              		.loc 5 89 7 view .LVU455
 2167              		.loc 5 89 7 is_stmt 0 view .LVU456
 2168              	.LBE1339:
 2169              	.LBE1338:
 2170              	.LBE1337:
 2171              	.LBE1336:
 2172              	.LBE1335:
 2173              	.LBE1340:
 2174              	.LBE1343:
 2175              	.LBE1347:
 2176              	.LBE1351:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2177              		.loc 10 1120 28 view .LVU457
 2178 002a 5A       		popq	%rdx
 2179              		.cfi_remember_state
 2180              		.cfi_def_cfa_offset 24
 2181              	.LBB1352:
 2182              	.LBB1348:
 2183              	.LBB1344:
 2184              	.LBB1341:
 2185              		.loc 10 1135 9 view .LVU458
 2186 002b 4889EF   		movq	%rbp, %rdi
 2187              	.LBE1341:
 2188              	.LBE1344:
 2189              	.LBE1348:
 2190              	.LBE1352:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2191              		.loc 10 1120 28 view .LVU459
 2192 002e 5B       		popq	%rbx
 2193              		.cfi_restore 3
 2194              		.cfi_def_cfa_offset 16
 2195              	.LVL158:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2196              		.loc 10 1120 28 view .LVU460
 2197 002f 5D       		popq	%rbp
 2198              		.cfi_restore 6
 2199              		.cfi_def_cfa_offset 8
 2200              	.LBB1353:
 2201              	.LBB1349:
 2202              	.LBB1345:
 2203              	.LBB1342:
 2204              		.loc 10 1135 9 view .LVU461
 2205 0030 E9000000 		jmp	_ZdlPv@PLT
 2205      00
 2206              	.LVL159:
 2207              	.L70:
 2208              		.cfi_restore_state
 2209              		.loc 10 1135 9 view .LVU462
 2210              	.LBE1342:
 2211              	.LBE1345:
 2212              	.LBE1349:
 2213              	.LBE1353:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2214              		.loc 10 1120 28 view .LVU463
 2215 0035 58       		popq	%rax
 2216              		.cfi_def_cfa_offset 24
 2217 0036 5B       		popq	%rbx
 2218              		.cfi_def_cfa_offset 16
 2219              	.LVL160:
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2220              		.loc 10 1120 28 view .LVU464
 2221 0037 5D       		popq	%rbp
 2222              		.cfi_def_cfa_offset 8
 2223 0038 C3       		ret
 2224              	.LVL161:
 2225              	.L79:
 2226              		.cfi_restore 3
 2227              		.cfi_restore 6
1120:quantum/serial_link/tests/gtest/./internal/./gtest-port.h **** 
 2228              		.loc 10 1120 28 view .LVU465
 2229 0039 C3       		ret
 2230              		.cfi_endproc
 2231              	.LFE4635:
 2233              		.weak	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 2234              		.set	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev,_Z
 2235              		.section	.text._ZN7testing8internal18CmpHelperEQFailureIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_,"
 2236              		.weak	_ZN7testing8internal18CmpHelperEQFailureIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 2238              	_ZN7testing8internal18CmpHelperEQFailureIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_:
 2239              	.LVL162:
 2240              	.LFB4910:
 475:quantum/serial_link/tests/gtest/gtest.h **** 
 476:quantum/serial_link/tests/gtest/gtest.h ****   // We disallow copying Tests.
 477:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(Test);
 478:quantum/serial_link/tests/gtest/gtest.h **** };
 479:quantum/serial_link/tests/gtest/gtest.h **** 
 480:quantum/serial_link/tests/gtest/gtest.h **** typedef internal::TimeInMillis TimeInMillis;
 481:quantum/serial_link/tests/gtest/gtest.h **** 
 482:quantum/serial_link/tests/gtest/gtest.h **** // A copyable object representing a user specified test property which can be
 483:quantum/serial_link/tests/gtest/gtest.h **** // output as a key/value string pair.
 484:quantum/serial_link/tests/gtest/gtest.h **** //
 485:quantum/serial_link/tests/gtest/gtest.h **** // Don't inherit from TestProperty as its destructor is not virtual.
 486:quantum/serial_link/tests/gtest/gtest.h **** class TestProperty {
 487:quantum/serial_link/tests/gtest/gtest.h ****  public:
 488:quantum/serial_link/tests/gtest/gtest.h ****   // C'tor.  TestProperty does NOT have a default constructor.
 489:quantum/serial_link/tests/gtest/gtest.h ****   // Always use this constructor (with parameters) to create a
 490:quantum/serial_link/tests/gtest/gtest.h ****   // TestProperty object.
 491:quantum/serial_link/tests/gtest/gtest.h ****   TestProperty(const std::string& a_key, const std::string& a_value) :
 492:quantum/serial_link/tests/gtest/gtest.h ****     key_(a_key), value_(a_value) {
 493:quantum/serial_link/tests/gtest/gtest.h ****   }
 494:quantum/serial_link/tests/gtest/gtest.h **** 
 495:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the user supplied key.
 496:quantum/serial_link/tests/gtest/gtest.h ****   const char* key() const {
 497:quantum/serial_link/tests/gtest/gtest.h ****     return key_.c_str();
 498:quantum/serial_link/tests/gtest/gtest.h ****   }
 499:quantum/serial_link/tests/gtest/gtest.h **** 
 500:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the user supplied value.
 501:quantum/serial_link/tests/gtest/gtest.h ****   const char* value() const {
 502:quantum/serial_link/tests/gtest/gtest.h ****     return value_.c_str();
 503:quantum/serial_link/tests/gtest/gtest.h ****   }
 504:quantum/serial_link/tests/gtest/gtest.h **** 
 505:quantum/serial_link/tests/gtest/gtest.h ****   // Sets a new value, overriding the one supplied in the constructor.
 506:quantum/serial_link/tests/gtest/gtest.h ****   void SetValue(const std::string& new_value) {
 507:quantum/serial_link/tests/gtest/gtest.h ****     value_ = new_value;
 508:quantum/serial_link/tests/gtest/gtest.h ****   }
 509:quantum/serial_link/tests/gtest/gtest.h **** 
 510:quantum/serial_link/tests/gtest/gtest.h ****  private:
 511:quantum/serial_link/tests/gtest/gtest.h ****   // The key supplied by the user.
 512:quantum/serial_link/tests/gtest/gtest.h ****   std::string key_;
 513:quantum/serial_link/tests/gtest/gtest.h ****   // The value supplied by the user.
 514:quantum/serial_link/tests/gtest/gtest.h ****   std::string value_;
 515:quantum/serial_link/tests/gtest/gtest.h **** };
 516:quantum/serial_link/tests/gtest/gtest.h **** 
 517:quantum/serial_link/tests/gtest/gtest.h **** // The result of a single Test.  This includes a list of
 518:quantum/serial_link/tests/gtest/gtest.h **** // TestPartResults, a list of TestProperties, a count of how many
 519:quantum/serial_link/tests/gtest/gtest.h **** // death tests there are in the Test, and how much time it took to run
 520:quantum/serial_link/tests/gtest/gtest.h **** // the Test.
 521:quantum/serial_link/tests/gtest/gtest.h **** //
 522:quantum/serial_link/tests/gtest/gtest.h **** // TestResult is not copyable.
 523:quantum/serial_link/tests/gtest/gtest.h **** class GTEST_API_ TestResult {
 524:quantum/serial_link/tests/gtest/gtest.h ****  public:
 525:quantum/serial_link/tests/gtest/gtest.h ****   // Creates an empty TestResult.
 526:quantum/serial_link/tests/gtest/gtest.h ****   TestResult();
 527:quantum/serial_link/tests/gtest/gtest.h **** 
 528:quantum/serial_link/tests/gtest/gtest.h ****   // D'tor.  Do not inherit from TestResult.
 529:quantum/serial_link/tests/gtest/gtest.h ****   ~TestResult();
 530:quantum/serial_link/tests/gtest/gtest.h **** 
 531:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of all test parts.  This is the sum of the number
 532:quantum/serial_link/tests/gtest/gtest.h ****   // of successful test parts and the number of failed test parts.
 533:quantum/serial_link/tests/gtest/gtest.h ****   int total_part_count() const;
 534:quantum/serial_link/tests/gtest/gtest.h **** 
 535:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the number of the test properties.
 536:quantum/serial_link/tests/gtest/gtest.h ****   int test_property_count() const;
 537:quantum/serial_link/tests/gtest/gtest.h **** 
 538:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the test passed (i.e. no test part failed).
 539:quantum/serial_link/tests/gtest/gtest.h ****   bool Passed() const { return !Failed(); }
 540:quantum/serial_link/tests/gtest/gtest.h **** 
 541:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the test failed.
 542:quantum/serial_link/tests/gtest/gtest.h ****   bool Failed() const;
 543:quantum/serial_link/tests/gtest/gtest.h **** 
 544:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the test fatally failed.
 545:quantum/serial_link/tests/gtest/gtest.h ****   bool HasFatalFailure() const;
 546:quantum/serial_link/tests/gtest/gtest.h **** 
 547:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the test has a non-fatal failure.
 548:quantum/serial_link/tests/gtest/gtest.h ****   bool HasNonfatalFailure() const;
 549:quantum/serial_link/tests/gtest/gtest.h **** 
 550:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the elapsed time, in milliseconds.
 551:quantum/serial_link/tests/gtest/gtest.h ****   TimeInMillis elapsed_time() const { return elapsed_time_; }
 552:quantum/serial_link/tests/gtest/gtest.h **** 
 553:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the i-th test part result among all the results. i can range
 554:quantum/serial_link/tests/gtest/gtest.h ****   // from 0 to test_property_count() - 1. If i is not in that range, aborts
 555:quantum/serial_link/tests/gtest/gtest.h ****   // the program.
 556:quantum/serial_link/tests/gtest/gtest.h ****   const TestPartResult& GetTestPartResult(int i) const;
 557:quantum/serial_link/tests/gtest/gtest.h **** 
 558:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the i-th test property. i can range from 0 to
 559:quantum/serial_link/tests/gtest/gtest.h ****   // test_property_count() - 1. If i is not in that range, aborts the
 560:quantum/serial_link/tests/gtest/gtest.h ****   // program.
 561:quantum/serial_link/tests/gtest/gtest.h ****   const TestProperty& GetTestProperty(int i) const;
 562:quantum/serial_link/tests/gtest/gtest.h **** 
 563:quantum/serial_link/tests/gtest/gtest.h ****  private:
 564:quantum/serial_link/tests/gtest/gtest.h ****   friend class TestInfo;
 565:quantum/serial_link/tests/gtest/gtest.h ****   friend class TestCase;
 566:quantum/serial_link/tests/gtest/gtest.h ****   friend class UnitTest;
 567:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::DefaultGlobalTestPartResultReporter;
 568:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::ExecDeathTest;
 569:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::TestResultAccessor;
 570:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::UnitTestImpl;
 571:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::WindowsDeathTest;
 572:quantum/serial_link/tests/gtest/gtest.h **** 
 573:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the vector of TestPartResults.
 574:quantum/serial_link/tests/gtest/gtest.h ****   const std::vector<TestPartResult>& test_part_results() const {
 575:quantum/serial_link/tests/gtest/gtest.h ****     return test_part_results_;
 576:quantum/serial_link/tests/gtest/gtest.h ****   }
 577:quantum/serial_link/tests/gtest/gtest.h **** 
 578:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the vector of TestProperties.
 579:quantum/serial_link/tests/gtest/gtest.h ****   const std::vector<TestProperty>& test_properties() const {
 580:quantum/serial_link/tests/gtest/gtest.h ****     return test_properties_;
 581:quantum/serial_link/tests/gtest/gtest.h ****   }
 582:quantum/serial_link/tests/gtest/gtest.h **** 
 583:quantum/serial_link/tests/gtest/gtest.h ****   // Sets the elapsed time.
 584:quantum/serial_link/tests/gtest/gtest.h ****   void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }
 585:quantum/serial_link/tests/gtest/gtest.h **** 
 586:quantum/serial_link/tests/gtest/gtest.h ****   // Adds a test property to the list. The property is validated and may add
 587:quantum/serial_link/tests/gtest/gtest.h ****   // a non-fatal failure if invalid (e.g., if it conflicts with reserved
 588:quantum/serial_link/tests/gtest/gtest.h ****   // key names). If a property is already recorded for the same key, the
 589:quantum/serial_link/tests/gtest/gtest.h ****   // value will be updated, rather than storing multiple values for the same
 590:quantum/serial_link/tests/gtest/gtest.h ****   // key.  xml_element specifies the element for which the property is being
 591:quantum/serial_link/tests/gtest/gtest.h ****   // recorded and is used for validation.
 592:quantum/serial_link/tests/gtest/gtest.h ****   void RecordProperty(const std::string& xml_element,
 593:quantum/serial_link/tests/gtest/gtest.h ****                       const TestProperty& test_property);
 594:quantum/serial_link/tests/gtest/gtest.h **** 
 595:quantum/serial_link/tests/gtest/gtest.h ****   // Adds a failure if the key is a reserved attribute of Google Test
 596:quantum/serial_link/tests/gtest/gtest.h ****   // testcase tags.  Returns true if the property is valid.
 597:quantum/serial_link/tests/gtest/gtest.h ****   // TODO(russr): Validate attribute names are legal and human readable.
 598:quantum/serial_link/tests/gtest/gtest.h ****   static bool ValidateTestProperty(const std::string& xml_element,
 599:quantum/serial_link/tests/gtest/gtest.h ****                                    const TestProperty& test_property);
 600:quantum/serial_link/tests/gtest/gtest.h **** 
 601:quantum/serial_link/tests/gtest/gtest.h ****   // Adds a test part result to the list.
 602:quantum/serial_link/tests/gtest/gtest.h ****   void AddTestPartResult(const TestPartResult& test_part_result);
 603:quantum/serial_link/tests/gtest/gtest.h **** 
 604:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the death test count.
 605:quantum/serial_link/tests/gtest/gtest.h ****   int death_test_count() const { return death_test_count_; }
 606:quantum/serial_link/tests/gtest/gtest.h **** 
 607:quantum/serial_link/tests/gtest/gtest.h ****   // Increments the death test count, returning the new count.
 608:quantum/serial_link/tests/gtest/gtest.h ****   int increment_death_test_count() { return ++death_test_count_; }
 609:quantum/serial_link/tests/gtest/gtest.h **** 
 610:quantum/serial_link/tests/gtest/gtest.h ****   // Clears the test part results.
 611:quantum/serial_link/tests/gtest/gtest.h ****   void ClearTestPartResults();
 612:quantum/serial_link/tests/gtest/gtest.h **** 
 613:quantum/serial_link/tests/gtest/gtest.h ****   // Clears the object.
 614:quantum/serial_link/tests/gtest/gtest.h ****   void Clear();
 615:quantum/serial_link/tests/gtest/gtest.h **** 
 616:quantum/serial_link/tests/gtest/gtest.h ****   // Protects mutable state of the property vector and of owned
 617:quantum/serial_link/tests/gtest/gtest.h ****   // properties, whose values may be updated.
 618:quantum/serial_link/tests/gtest/gtest.h ****   internal::Mutex test_properites_mutex_;
 619:quantum/serial_link/tests/gtest/gtest.h **** 
 620:quantum/serial_link/tests/gtest/gtest.h ****   // The vector of TestPartResults
 621:quantum/serial_link/tests/gtest/gtest.h ****   std::vector<TestPartResult> test_part_results_;
 622:quantum/serial_link/tests/gtest/gtest.h ****   // The vector of TestProperties
 623:quantum/serial_link/tests/gtest/gtest.h ****   std::vector<TestProperty> test_properties_;
 624:quantum/serial_link/tests/gtest/gtest.h ****   // Running count of death tests.
 625:quantum/serial_link/tests/gtest/gtest.h ****   int death_test_count_;
 626:quantum/serial_link/tests/gtest/gtest.h ****   // The elapsed time, in milliseconds.
 627:quantum/serial_link/tests/gtest/gtest.h ****   TimeInMillis elapsed_time_;
 628:quantum/serial_link/tests/gtest/gtest.h **** 
 629:quantum/serial_link/tests/gtest/gtest.h ****   // We disallow copying TestResult.
 630:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(TestResult);
 631:quantum/serial_link/tests/gtest/gtest.h **** };  // class TestResult
 632:quantum/serial_link/tests/gtest/gtest.h **** 
 633:quantum/serial_link/tests/gtest/gtest.h **** // A TestInfo object stores the following information about a test:
 634:quantum/serial_link/tests/gtest/gtest.h **** //
 635:quantum/serial_link/tests/gtest/gtest.h **** //   Test case name
 636:quantum/serial_link/tests/gtest/gtest.h **** //   Test name
 637:quantum/serial_link/tests/gtest/gtest.h **** //   Whether the test should be run
 638:quantum/serial_link/tests/gtest/gtest.h **** //   A function pointer that creates the test object when invoked
 639:quantum/serial_link/tests/gtest/gtest.h **** //   Test result
 640:quantum/serial_link/tests/gtest/gtest.h **** //
 641:quantum/serial_link/tests/gtest/gtest.h **** // The constructor of TestInfo registers itself with the UnitTest
 642:quantum/serial_link/tests/gtest/gtest.h **** // singleton such that the RUN_ALL_TESTS() macro knows which tests to
 643:quantum/serial_link/tests/gtest/gtest.h **** // run.
 644:quantum/serial_link/tests/gtest/gtest.h **** class GTEST_API_ TestInfo {
 645:quantum/serial_link/tests/gtest/gtest.h ****  public:
 646:quantum/serial_link/tests/gtest/gtest.h ****   // Destructs a TestInfo object.  This function is not virtual, so
 647:quantum/serial_link/tests/gtest/gtest.h ****   // don't inherit from TestInfo.
 648:quantum/serial_link/tests/gtest/gtest.h ****   ~TestInfo();
 649:quantum/serial_link/tests/gtest/gtest.h **** 
 650:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the test case name.
 651:quantum/serial_link/tests/gtest/gtest.h ****   const char* test_case_name() const { return test_case_name_.c_str(); }
 652:quantum/serial_link/tests/gtest/gtest.h **** 
 653:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the test name.
 654:quantum/serial_link/tests/gtest/gtest.h ****   const char* name() const { return name_.c_str(); }
 655:quantum/serial_link/tests/gtest/gtest.h **** 
 656:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the name of the parameter type, or NULL if this is not a typed
 657:quantum/serial_link/tests/gtest/gtest.h ****   // or a type-parameterized test.
 658:quantum/serial_link/tests/gtest/gtest.h ****   const char* type_param() const {
 659:quantum/serial_link/tests/gtest/gtest.h ****     if (type_param_.get() != NULL)
 660:quantum/serial_link/tests/gtest/gtest.h ****       return type_param_->c_str();
 661:quantum/serial_link/tests/gtest/gtest.h ****     return NULL;
 662:quantum/serial_link/tests/gtest/gtest.h ****   }
 663:quantum/serial_link/tests/gtest/gtest.h **** 
 664:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the text representation of the value parameter, or NULL if this
 665:quantum/serial_link/tests/gtest/gtest.h ****   // is not a value-parameterized test.
 666:quantum/serial_link/tests/gtest/gtest.h ****   const char* value_param() const {
 667:quantum/serial_link/tests/gtest/gtest.h ****     if (value_param_.get() != NULL)
 668:quantum/serial_link/tests/gtest/gtest.h ****       return value_param_->c_str();
 669:quantum/serial_link/tests/gtest/gtest.h ****     return NULL;
 670:quantum/serial_link/tests/gtest/gtest.h ****   }
 671:quantum/serial_link/tests/gtest/gtest.h **** 
 672:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the file name where this test is defined.
 673:quantum/serial_link/tests/gtest/gtest.h ****   const char* file() const { return location_.file.c_str(); }
 674:quantum/serial_link/tests/gtest/gtest.h **** 
 675:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the line where this test is defined.
 676:quantum/serial_link/tests/gtest/gtest.h ****   int line() const { return location_.line; }
 677:quantum/serial_link/tests/gtest/gtest.h **** 
 678:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true if this test should run, that is if the test is not
 679:quantum/serial_link/tests/gtest/gtest.h ****   // disabled (or it is disabled but the also_run_disabled_tests flag has
 680:quantum/serial_link/tests/gtest/gtest.h ****   // been specified) and its full name matches the user-specified filter.
 681:quantum/serial_link/tests/gtest/gtest.h ****   //
 682:quantum/serial_link/tests/gtest/gtest.h ****   // Google Test allows the user to filter the tests by their full names.
 683:quantum/serial_link/tests/gtest/gtest.h ****   // The full name of a test Bar in test case Foo is defined as
 684:quantum/serial_link/tests/gtest/gtest.h ****   // "Foo.Bar".  Only the tests that match the filter will run.
 685:quantum/serial_link/tests/gtest/gtest.h ****   //
 686:quantum/serial_link/tests/gtest/gtest.h ****   // A filter is a colon-separated list of glob (not regex) patterns,
 687:quantum/serial_link/tests/gtest/gtest.h ****   // optionally followed by a '-' and a colon-separated list of
 688:quantum/serial_link/tests/gtest/gtest.h ****   // negative patterns (tests to exclude).  A test is run if it
 689:quantum/serial_link/tests/gtest/gtest.h ****   // matches one of the positive patterns and does not match any of
 690:quantum/serial_link/tests/gtest/gtest.h ****   // the negative patterns.
 691:quantum/serial_link/tests/gtest/gtest.h ****   //
 692:quantum/serial_link/tests/gtest/gtest.h ****   // For example, *A*:Foo.* is a filter that matches any string that
 693:quantum/serial_link/tests/gtest/gtest.h ****   // contains the character 'A' or starts with "Foo.".
 694:quantum/serial_link/tests/gtest/gtest.h ****   bool should_run() const { return should_run_; }
 695:quantum/serial_link/tests/gtest/gtest.h **** 
 696:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff this test will appear in the XML report.
 697:quantum/serial_link/tests/gtest/gtest.h ****   bool is_reportable() const {
 698:quantum/serial_link/tests/gtest/gtest.h ****     // For now, the XML report includes all tests matching the filter.
 699:quantum/serial_link/tests/gtest/gtest.h ****     // In the future, we may trim tests that are excluded because of
 700:quantum/serial_link/tests/gtest/gtest.h ****     // sharding.
 701:quantum/serial_link/tests/gtest/gtest.h ****     return matches_filter_;
 702:quantum/serial_link/tests/gtest/gtest.h ****   }
 703:quantum/serial_link/tests/gtest/gtest.h **** 
 704:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the result of the test.
 705:quantum/serial_link/tests/gtest/gtest.h ****   const TestResult* result() const { return &result_; }
 706:quantum/serial_link/tests/gtest/gtest.h **** 
 707:quantum/serial_link/tests/gtest/gtest.h ****  private:
 708:quantum/serial_link/tests/gtest/gtest.h **** #if GTEST_HAS_DEATH_TEST
 709:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::DefaultDeathTestFactory;
 710:quantum/serial_link/tests/gtest/gtest.h **** #endif  // GTEST_HAS_DEATH_TEST
 711:quantum/serial_link/tests/gtest/gtest.h ****   friend class Test;
 712:quantum/serial_link/tests/gtest/gtest.h ****   friend class TestCase;
 713:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::UnitTestImpl;
 714:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::StreamingListenerTest;
 715:quantum/serial_link/tests/gtest/gtest.h ****   friend TestInfo* internal::MakeAndRegisterTestInfo(
 716:quantum/serial_link/tests/gtest/gtest.h ****       const char* test_case_name,
 717:quantum/serial_link/tests/gtest/gtest.h ****       const char* name,
 718:quantum/serial_link/tests/gtest/gtest.h ****       const char* type_param,
 719:quantum/serial_link/tests/gtest/gtest.h ****       const char* value_param,
 720:quantum/serial_link/tests/gtest/gtest.h ****       internal::CodeLocation code_location,
 721:quantum/serial_link/tests/gtest/gtest.h ****       internal::TypeId fixture_class_id,
 722:quantum/serial_link/tests/gtest/gtest.h ****       Test::SetUpTestCaseFunc set_up_tc,
 723:quantum/serial_link/tests/gtest/gtest.h ****       Test::TearDownTestCaseFunc tear_down_tc,
 724:quantum/serial_link/tests/gtest/gtest.h ****       internal::TestFactoryBase* factory);
 725:quantum/serial_link/tests/gtest/gtest.h **** 
 726:quantum/serial_link/tests/gtest/gtest.h ****   // Constructs a TestInfo object. The newly constructed instance assumes
 727:quantum/serial_link/tests/gtest/gtest.h ****   // ownership of the factory object.
 728:quantum/serial_link/tests/gtest/gtest.h ****   TestInfo(const std::string& test_case_name,
 729:quantum/serial_link/tests/gtest/gtest.h ****            const std::string& name,
 730:quantum/serial_link/tests/gtest/gtest.h ****            const char* a_type_param,   // NULL if not a type-parameterized test
 731:quantum/serial_link/tests/gtest/gtest.h ****            const char* a_value_param,  // NULL if not a value-parameterized test
 732:quantum/serial_link/tests/gtest/gtest.h ****            internal::CodeLocation a_code_location,
 733:quantum/serial_link/tests/gtest/gtest.h ****            internal::TypeId fixture_class_id,
 734:quantum/serial_link/tests/gtest/gtest.h ****            internal::TestFactoryBase* factory);
 735:quantum/serial_link/tests/gtest/gtest.h **** 
 736:quantum/serial_link/tests/gtest/gtest.h ****   // Increments the number of death tests encountered in this test so
 737:quantum/serial_link/tests/gtest/gtest.h ****   // far.
 738:quantum/serial_link/tests/gtest/gtest.h ****   int increment_death_test_count() {
 739:quantum/serial_link/tests/gtest/gtest.h ****     return result_.increment_death_test_count();
 740:quantum/serial_link/tests/gtest/gtest.h ****   }
 741:quantum/serial_link/tests/gtest/gtest.h **** 
 742:quantum/serial_link/tests/gtest/gtest.h ****   // Creates the test object, runs it, records its result, and then
 743:quantum/serial_link/tests/gtest/gtest.h ****   // deletes it.
 744:quantum/serial_link/tests/gtest/gtest.h ****   void Run();
 745:quantum/serial_link/tests/gtest/gtest.h **** 
 746:quantum/serial_link/tests/gtest/gtest.h ****   static void ClearTestResult(TestInfo* test_info) {
 747:quantum/serial_link/tests/gtest/gtest.h ****     test_info->result_.Clear();
 748:quantum/serial_link/tests/gtest/gtest.h ****   }
 749:quantum/serial_link/tests/gtest/gtest.h **** 
 750:quantum/serial_link/tests/gtest/gtest.h ****   // These fields are immutable properties of the test.
 751:quantum/serial_link/tests/gtest/gtest.h ****   const std::string test_case_name_;     // Test case name
 752:quantum/serial_link/tests/gtest/gtest.h ****   const std::string name_;               // Test name
 753:quantum/serial_link/tests/gtest/gtest.h ****   // Name of the parameter type, or NULL if this is not a typed or a
 754:quantum/serial_link/tests/gtest/gtest.h ****   // type-parameterized test.
 755:quantum/serial_link/tests/gtest/gtest.h ****   const internal::scoped_ptr<const ::std::string> type_param_;
 756:quantum/serial_link/tests/gtest/gtest.h ****   // Text representation of the value parameter, or NULL if this is not a
 757:quantum/serial_link/tests/gtest/gtest.h ****   // value-parameterized test.
 758:quantum/serial_link/tests/gtest/gtest.h ****   const internal::scoped_ptr<const ::std::string> value_param_;
 759:quantum/serial_link/tests/gtest/gtest.h ****   internal::CodeLocation location_;
 760:quantum/serial_link/tests/gtest/gtest.h ****   const internal::TypeId fixture_class_id_;   // ID of the test fixture class
 761:quantum/serial_link/tests/gtest/gtest.h ****   bool should_run_;                 // True iff this test should run
 762:quantum/serial_link/tests/gtest/gtest.h ****   bool is_disabled_;                // True iff this test is disabled
 763:quantum/serial_link/tests/gtest/gtest.h ****   bool matches_filter_;             // True if this test matches the
 764:quantum/serial_link/tests/gtest/gtest.h ****                                     // user-specified filter.
 765:quantum/serial_link/tests/gtest/gtest.h ****   internal::TestFactoryBase* const factory_;  // The factory that creates
 766:quantum/serial_link/tests/gtest/gtest.h ****                                               // the test object
 767:quantum/serial_link/tests/gtest/gtest.h **** 
 768:quantum/serial_link/tests/gtest/gtest.h ****   // This field is mutable and needs to be reset before running the
 769:quantum/serial_link/tests/gtest/gtest.h ****   // test for the second time.
 770:quantum/serial_link/tests/gtest/gtest.h ****   TestResult result_;
 771:quantum/serial_link/tests/gtest/gtest.h **** 
 772:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(TestInfo);
 773:quantum/serial_link/tests/gtest/gtest.h **** };
 774:quantum/serial_link/tests/gtest/gtest.h **** 
 775:quantum/serial_link/tests/gtest/gtest.h **** // A test case, which consists of a vector of TestInfos.
 776:quantum/serial_link/tests/gtest/gtest.h **** //
 777:quantum/serial_link/tests/gtest/gtest.h **** // TestCase is not copyable.
 778:quantum/serial_link/tests/gtest/gtest.h **** class GTEST_API_ TestCase {
 779:quantum/serial_link/tests/gtest/gtest.h ****  public:
 780:quantum/serial_link/tests/gtest/gtest.h ****   // Creates a TestCase with the given name.
 781:quantum/serial_link/tests/gtest/gtest.h ****   //
 782:quantum/serial_link/tests/gtest/gtest.h ****   // TestCase does NOT have a default constructor.  Always use this
 783:quantum/serial_link/tests/gtest/gtest.h ****   // constructor to create a TestCase object.
 784:quantum/serial_link/tests/gtest/gtest.h ****   //
 785:quantum/serial_link/tests/gtest/gtest.h ****   // Arguments:
 786:quantum/serial_link/tests/gtest/gtest.h ****   //
 787:quantum/serial_link/tests/gtest/gtest.h ****   //   name:         name of the test case
 788:quantum/serial_link/tests/gtest/gtest.h ****   //   a_type_param: the name of the test's type parameter, or NULL if
 789:quantum/serial_link/tests/gtest/gtest.h ****   //                 this is not a type-parameterized test.
 790:quantum/serial_link/tests/gtest/gtest.h ****   //   set_up_tc:    pointer to the function that sets up the test case
 791:quantum/serial_link/tests/gtest/gtest.h ****   //   tear_down_tc: pointer to the function that tears down the test case
 792:quantum/serial_link/tests/gtest/gtest.h ****   TestCase(const char* name, const char* a_type_param,
 793:quantum/serial_link/tests/gtest/gtest.h ****            Test::SetUpTestCaseFunc set_up_tc,
 794:quantum/serial_link/tests/gtest/gtest.h ****            Test::TearDownTestCaseFunc tear_down_tc);
 795:quantum/serial_link/tests/gtest/gtest.h **** 
 796:quantum/serial_link/tests/gtest/gtest.h ****   // Destructor of TestCase.
 797:quantum/serial_link/tests/gtest/gtest.h ****   virtual ~TestCase();
 798:quantum/serial_link/tests/gtest/gtest.h **** 
 799:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the name of the TestCase.
 800:quantum/serial_link/tests/gtest/gtest.h ****   const char* name() const { return name_.c_str(); }
 801:quantum/serial_link/tests/gtest/gtest.h **** 
 802:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the name of the parameter type, or NULL if this is not a
 803:quantum/serial_link/tests/gtest/gtest.h ****   // type-parameterized test case.
 804:quantum/serial_link/tests/gtest/gtest.h ****   const char* type_param() const {
 805:quantum/serial_link/tests/gtest/gtest.h ****     if (type_param_.get() != NULL)
 806:quantum/serial_link/tests/gtest/gtest.h ****       return type_param_->c_str();
 807:quantum/serial_link/tests/gtest/gtest.h ****     return NULL;
 808:quantum/serial_link/tests/gtest/gtest.h ****   }
 809:quantum/serial_link/tests/gtest/gtest.h **** 
 810:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true if any test in this test case should run.
 811:quantum/serial_link/tests/gtest/gtest.h ****   bool should_run() const { return should_run_; }
 812:quantum/serial_link/tests/gtest/gtest.h **** 
 813:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of successful tests in this test case.
 814:quantum/serial_link/tests/gtest/gtest.h ****   int successful_test_count() const;
 815:quantum/serial_link/tests/gtest/gtest.h **** 
 816:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of failed tests in this test case.
 817:quantum/serial_link/tests/gtest/gtest.h ****   int failed_test_count() const;
 818:quantum/serial_link/tests/gtest/gtest.h **** 
 819:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of disabled tests that will be reported in the XML report.
 820:quantum/serial_link/tests/gtest/gtest.h ****   int reportable_disabled_test_count() const;
 821:quantum/serial_link/tests/gtest/gtest.h **** 
 822:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of disabled tests in this test case.
 823:quantum/serial_link/tests/gtest/gtest.h ****   int disabled_test_count() const;
 824:quantum/serial_link/tests/gtest/gtest.h **** 
 825:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of tests to be printed in the XML report.
 826:quantum/serial_link/tests/gtest/gtest.h ****   int reportable_test_count() const;
 827:quantum/serial_link/tests/gtest/gtest.h **** 
 828:quantum/serial_link/tests/gtest/gtest.h ****   // Get the number of tests in this test case that should run.
 829:quantum/serial_link/tests/gtest/gtest.h ****   int test_to_run_count() const;
 830:quantum/serial_link/tests/gtest/gtest.h **** 
 831:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of all tests in this test case.
 832:quantum/serial_link/tests/gtest/gtest.h ****   int total_test_count() const;
 833:quantum/serial_link/tests/gtest/gtest.h **** 
 834:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the test case passed.
 835:quantum/serial_link/tests/gtest/gtest.h ****   bool Passed() const { return !Failed(); }
 836:quantum/serial_link/tests/gtest/gtest.h **** 
 837:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the test case failed.
 838:quantum/serial_link/tests/gtest/gtest.h ****   bool Failed() const { return failed_test_count() > 0; }
 839:quantum/serial_link/tests/gtest/gtest.h **** 
 840:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the elapsed time, in milliseconds.
 841:quantum/serial_link/tests/gtest/gtest.h ****   TimeInMillis elapsed_time() const { return elapsed_time_; }
 842:quantum/serial_link/tests/gtest/gtest.h **** 
 843:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the i-th test among all the tests. i can range from 0 to
 844:quantum/serial_link/tests/gtest/gtest.h ****   // total_test_count() - 1. If i is not in that range, returns NULL.
 845:quantum/serial_link/tests/gtest/gtest.h ****   const TestInfo* GetTestInfo(int i) const;
 846:quantum/serial_link/tests/gtest/gtest.h **** 
 847:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the TestResult that holds test properties recorded during
 848:quantum/serial_link/tests/gtest/gtest.h ****   // execution of SetUpTestCase and TearDownTestCase.
 849:quantum/serial_link/tests/gtest/gtest.h ****   const TestResult& ad_hoc_test_result() const { return ad_hoc_test_result_; }
 850:quantum/serial_link/tests/gtest/gtest.h **** 
 851:quantum/serial_link/tests/gtest/gtest.h ****  private:
 852:quantum/serial_link/tests/gtest/gtest.h ****   friend class Test;
 853:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::UnitTestImpl;
 854:quantum/serial_link/tests/gtest/gtest.h **** 
 855:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the (mutable) vector of TestInfos in this TestCase.
 856:quantum/serial_link/tests/gtest/gtest.h ****   std::vector<TestInfo*>& test_info_list() { return test_info_list_; }
 857:quantum/serial_link/tests/gtest/gtest.h **** 
 858:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the (immutable) vector of TestInfos in this TestCase.
 859:quantum/serial_link/tests/gtest/gtest.h ****   const std::vector<TestInfo*>& test_info_list() const {
 860:quantum/serial_link/tests/gtest/gtest.h ****     return test_info_list_;
 861:quantum/serial_link/tests/gtest/gtest.h ****   }
 862:quantum/serial_link/tests/gtest/gtest.h **** 
 863:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the i-th test among all the tests. i can range from 0 to
 864:quantum/serial_link/tests/gtest/gtest.h ****   // total_test_count() - 1. If i is not in that range, returns NULL.
 865:quantum/serial_link/tests/gtest/gtest.h ****   TestInfo* GetMutableTestInfo(int i);
 866:quantum/serial_link/tests/gtest/gtest.h **** 
 867:quantum/serial_link/tests/gtest/gtest.h ****   // Sets the should_run member.
 868:quantum/serial_link/tests/gtest/gtest.h ****   void set_should_run(bool should) { should_run_ = should; }
 869:quantum/serial_link/tests/gtest/gtest.h **** 
 870:quantum/serial_link/tests/gtest/gtest.h ****   // Adds a TestInfo to this test case.  Will delete the TestInfo upon
 871:quantum/serial_link/tests/gtest/gtest.h ****   // destruction of the TestCase object.
 872:quantum/serial_link/tests/gtest/gtest.h ****   void AddTestInfo(TestInfo * test_info);
 873:quantum/serial_link/tests/gtest/gtest.h **** 
 874:quantum/serial_link/tests/gtest/gtest.h ****   // Clears the results of all tests in this test case.
 875:quantum/serial_link/tests/gtest/gtest.h ****   void ClearResult();
 876:quantum/serial_link/tests/gtest/gtest.h **** 
 877:quantum/serial_link/tests/gtest/gtest.h ****   // Clears the results of all tests in the given test case.
 878:quantum/serial_link/tests/gtest/gtest.h ****   static void ClearTestCaseResult(TestCase* test_case) {
 879:quantum/serial_link/tests/gtest/gtest.h ****     test_case->ClearResult();
 880:quantum/serial_link/tests/gtest/gtest.h ****   }
 881:quantum/serial_link/tests/gtest/gtest.h **** 
 882:quantum/serial_link/tests/gtest/gtest.h ****   // Runs every test in this TestCase.
 883:quantum/serial_link/tests/gtest/gtest.h ****   void Run();
 884:quantum/serial_link/tests/gtest/gtest.h **** 
 885:quantum/serial_link/tests/gtest/gtest.h ****   // Runs SetUpTestCase() for this TestCase.  This wrapper is needed
 886:quantum/serial_link/tests/gtest/gtest.h ****   // for catching exceptions thrown from SetUpTestCase().
 887:quantum/serial_link/tests/gtest/gtest.h ****   void RunSetUpTestCase() { (*set_up_tc_)(); }
 888:quantum/serial_link/tests/gtest/gtest.h **** 
 889:quantum/serial_link/tests/gtest/gtest.h ****   // Runs TearDownTestCase() for this TestCase.  This wrapper is
 890:quantum/serial_link/tests/gtest/gtest.h ****   // needed for catching exceptions thrown from TearDownTestCase().
 891:quantum/serial_link/tests/gtest/gtest.h ****   void RunTearDownTestCase() { (*tear_down_tc_)(); }
 892:quantum/serial_link/tests/gtest/gtest.h **** 
 893:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff test passed.
 894:quantum/serial_link/tests/gtest/gtest.h ****   static bool TestPassed(const TestInfo* test_info) {
 895:quantum/serial_link/tests/gtest/gtest.h ****     return test_info->should_run() && test_info->result()->Passed();
 896:quantum/serial_link/tests/gtest/gtest.h ****   }
 897:quantum/serial_link/tests/gtest/gtest.h **** 
 898:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff test failed.
 899:quantum/serial_link/tests/gtest/gtest.h ****   static bool TestFailed(const TestInfo* test_info) {
 900:quantum/serial_link/tests/gtest/gtest.h ****     return test_info->should_run() && test_info->result()->Failed();
 901:quantum/serial_link/tests/gtest/gtest.h ****   }
 902:quantum/serial_link/tests/gtest/gtest.h **** 
 903:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the test is disabled and will be reported in the XML
 904:quantum/serial_link/tests/gtest/gtest.h ****   // report.
 905:quantum/serial_link/tests/gtest/gtest.h ****   static bool TestReportableDisabled(const TestInfo* test_info) {
 906:quantum/serial_link/tests/gtest/gtest.h ****     return test_info->is_reportable() && test_info->is_disabled_;
 907:quantum/serial_link/tests/gtest/gtest.h ****   }
 908:quantum/serial_link/tests/gtest/gtest.h **** 
 909:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff test is disabled.
 910:quantum/serial_link/tests/gtest/gtest.h ****   static bool TestDisabled(const TestInfo* test_info) {
 911:quantum/serial_link/tests/gtest/gtest.h ****     return test_info->is_disabled_;
 912:quantum/serial_link/tests/gtest/gtest.h ****   }
 913:quantum/serial_link/tests/gtest/gtest.h **** 
 914:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff this test will appear in the XML report.
 915:quantum/serial_link/tests/gtest/gtest.h ****   static bool TestReportable(const TestInfo* test_info) {
 916:quantum/serial_link/tests/gtest/gtest.h ****     return test_info->is_reportable();
 917:quantum/serial_link/tests/gtest/gtest.h ****   }
 918:quantum/serial_link/tests/gtest/gtest.h **** 
 919:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true if the given test should run.
 920:quantum/serial_link/tests/gtest/gtest.h ****   static bool ShouldRunTest(const TestInfo* test_info) {
 921:quantum/serial_link/tests/gtest/gtest.h ****     return test_info->should_run();
 922:quantum/serial_link/tests/gtest/gtest.h ****   }
 923:quantum/serial_link/tests/gtest/gtest.h **** 
 924:quantum/serial_link/tests/gtest/gtest.h ****   // Shuffles the tests in this test case.
 925:quantum/serial_link/tests/gtest/gtest.h ****   void ShuffleTests(internal::Random* random);
 926:quantum/serial_link/tests/gtest/gtest.h **** 
 927:quantum/serial_link/tests/gtest/gtest.h ****   // Restores the test order to before the first shuffle.
 928:quantum/serial_link/tests/gtest/gtest.h ****   void UnshuffleTests();
 929:quantum/serial_link/tests/gtest/gtest.h **** 
 930:quantum/serial_link/tests/gtest/gtest.h ****   // Name of the test case.
 931:quantum/serial_link/tests/gtest/gtest.h ****   std::string name_;
 932:quantum/serial_link/tests/gtest/gtest.h ****   // Name of the parameter type, or NULL if this is not a typed or a
 933:quantum/serial_link/tests/gtest/gtest.h ****   // type-parameterized test.
 934:quantum/serial_link/tests/gtest/gtest.h ****   const internal::scoped_ptr<const ::std::string> type_param_;
 935:quantum/serial_link/tests/gtest/gtest.h ****   // The vector of TestInfos in their original order.  It owns the
 936:quantum/serial_link/tests/gtest/gtest.h ****   // elements in the vector.
 937:quantum/serial_link/tests/gtest/gtest.h ****   std::vector<TestInfo*> test_info_list_;
 938:quantum/serial_link/tests/gtest/gtest.h ****   // Provides a level of indirection for the test list to allow easy
 939:quantum/serial_link/tests/gtest/gtest.h ****   // shuffling and restoring the test order.  The i-th element in this
 940:quantum/serial_link/tests/gtest/gtest.h ****   // vector is the index of the i-th test in the shuffled test list.
 941:quantum/serial_link/tests/gtest/gtest.h ****   std::vector<int> test_indices_;
 942:quantum/serial_link/tests/gtest/gtest.h ****   // Pointer to the function that sets up the test case.
 943:quantum/serial_link/tests/gtest/gtest.h ****   Test::SetUpTestCaseFunc set_up_tc_;
 944:quantum/serial_link/tests/gtest/gtest.h ****   // Pointer to the function that tears down the test case.
 945:quantum/serial_link/tests/gtest/gtest.h ****   Test::TearDownTestCaseFunc tear_down_tc_;
 946:quantum/serial_link/tests/gtest/gtest.h ****   // True iff any test in this test case should run.
 947:quantum/serial_link/tests/gtest/gtest.h ****   bool should_run_;
 948:quantum/serial_link/tests/gtest/gtest.h ****   // Elapsed time, in milliseconds.
 949:quantum/serial_link/tests/gtest/gtest.h ****   TimeInMillis elapsed_time_;
 950:quantum/serial_link/tests/gtest/gtest.h ****   // Holds test properties recorded during execution of SetUpTestCase and
 951:quantum/serial_link/tests/gtest/gtest.h ****   // TearDownTestCase.
 952:quantum/serial_link/tests/gtest/gtest.h ****   TestResult ad_hoc_test_result_;
 953:quantum/serial_link/tests/gtest/gtest.h **** 
 954:quantum/serial_link/tests/gtest/gtest.h ****   // We disallow copying TestCases.
 955:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(TestCase);
 956:quantum/serial_link/tests/gtest/gtest.h **** };
 957:quantum/serial_link/tests/gtest/gtest.h **** 
 958:quantum/serial_link/tests/gtest/gtest.h **** // An Environment object is capable of setting up and tearing down an
 959:quantum/serial_link/tests/gtest/gtest.h **** // environment.  You should subclass this to define your own
 960:quantum/serial_link/tests/gtest/gtest.h **** // environment(s).
 961:quantum/serial_link/tests/gtest/gtest.h **** //
 962:quantum/serial_link/tests/gtest/gtest.h **** // An Environment object does the set-up and tear-down in virtual
 963:quantum/serial_link/tests/gtest/gtest.h **** // methods SetUp() and TearDown() instead of the constructor and the
 964:quantum/serial_link/tests/gtest/gtest.h **** // destructor, as:
 965:quantum/serial_link/tests/gtest/gtest.h **** //
 966:quantum/serial_link/tests/gtest/gtest.h **** //   1. You cannot safely throw from a destructor.  This is a problem
 967:quantum/serial_link/tests/gtest/gtest.h **** //      as in some cases Google Test is used where exceptions are enabled, and
 968:quantum/serial_link/tests/gtest/gtest.h **** //      we may want to implement ASSERT_* using exceptions where they are
 969:quantum/serial_link/tests/gtest/gtest.h **** //      available.
 970:quantum/serial_link/tests/gtest/gtest.h **** //   2. You cannot use ASSERT_* directly in a constructor or
 971:quantum/serial_link/tests/gtest/gtest.h **** //      destructor.
 972:quantum/serial_link/tests/gtest/gtest.h **** class Environment {
 973:quantum/serial_link/tests/gtest/gtest.h ****  public:
 974:quantum/serial_link/tests/gtest/gtest.h ****   // The d'tor is virtual as we need to subclass Environment.
 975:quantum/serial_link/tests/gtest/gtest.h ****   virtual ~Environment() {}
 976:quantum/serial_link/tests/gtest/gtest.h **** 
 977:quantum/serial_link/tests/gtest/gtest.h ****   // Override this to define how to set up the environment.
 978:quantum/serial_link/tests/gtest/gtest.h ****   virtual void SetUp() {}
 979:quantum/serial_link/tests/gtest/gtest.h **** 
 980:quantum/serial_link/tests/gtest/gtest.h ****   // Override this to define how to tear down the environment.
 981:quantum/serial_link/tests/gtest/gtest.h ****   virtual void TearDown() {}
 982:quantum/serial_link/tests/gtest/gtest.h ****  private:
 983:quantum/serial_link/tests/gtest/gtest.h ****   // If you see an error about overriding the following function or
 984:quantum/serial_link/tests/gtest/gtest.h ****   // about it being private, you have mis-spelled SetUp() as Setup().
 985:quantum/serial_link/tests/gtest/gtest.h ****   struct Setup_should_be_spelled_SetUp {};
 986:quantum/serial_link/tests/gtest/gtest.h ****   virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }
 987:quantum/serial_link/tests/gtest/gtest.h **** };
 988:quantum/serial_link/tests/gtest/gtest.h **** 
 989:quantum/serial_link/tests/gtest/gtest.h **** // The interface for tracing execution of tests. The methods are organized in
 990:quantum/serial_link/tests/gtest/gtest.h **** // the order the corresponding events are fired.
 991:quantum/serial_link/tests/gtest/gtest.h **** class TestEventListener {
 992:quantum/serial_link/tests/gtest/gtest.h ****  public:
 993:quantum/serial_link/tests/gtest/gtest.h ****   virtual ~TestEventListener() {}
 994:quantum/serial_link/tests/gtest/gtest.h **** 
 995:quantum/serial_link/tests/gtest/gtest.h ****   // Fired before any test activity starts.
 996:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestProgramStart(const UnitTest& unit_test) = 0;
 997:quantum/serial_link/tests/gtest/gtest.h **** 
 998:quantum/serial_link/tests/gtest/gtest.h ****   // Fired before each iteration of tests starts.  There may be more than
 999:quantum/serial_link/tests/gtest/gtest.h ****   // one iteration if GTEST_FLAG(repeat) is set. iteration is the iteration
1000:quantum/serial_link/tests/gtest/gtest.h ****   // index, starting from 0.
1001:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestIterationStart(const UnitTest& unit_test,
1002:quantum/serial_link/tests/gtest/gtest.h ****                                     int iteration) = 0;
1003:quantum/serial_link/tests/gtest/gtest.h **** 
1004:quantum/serial_link/tests/gtest/gtest.h ****   // Fired before environment set-up for each iteration of tests starts.
1005:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsSetUpStart(const UnitTest& unit_test) = 0;
1006:quantum/serial_link/tests/gtest/gtest.h **** 
1007:quantum/serial_link/tests/gtest/gtest.h ****   // Fired after environment set-up for each iteration of tests ends.
1008:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) = 0;
1009:quantum/serial_link/tests/gtest/gtest.h **** 
1010:quantum/serial_link/tests/gtest/gtest.h ****   // Fired before the test case starts.
1011:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestCaseStart(const TestCase& test_case) = 0;
1012:quantum/serial_link/tests/gtest/gtest.h **** 
1013:quantum/serial_link/tests/gtest/gtest.h ****   // Fired before the test starts.
1014:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestStart(const TestInfo& test_info) = 0;
1015:quantum/serial_link/tests/gtest/gtest.h **** 
1016:quantum/serial_link/tests/gtest/gtest.h ****   // Fired after a failed assertion or a SUCCEED() invocation.
1017:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestPartResult(const TestPartResult& test_part_result) = 0;
1018:quantum/serial_link/tests/gtest/gtest.h **** 
1019:quantum/serial_link/tests/gtest/gtest.h ****   // Fired after the test ends.
1020:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestEnd(const TestInfo& test_info) = 0;
1021:quantum/serial_link/tests/gtest/gtest.h **** 
1022:quantum/serial_link/tests/gtest/gtest.h ****   // Fired after the test case ends.
1023:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestCaseEnd(const TestCase& test_case) = 0;
1024:quantum/serial_link/tests/gtest/gtest.h **** 
1025:quantum/serial_link/tests/gtest/gtest.h ****   // Fired before environment tear-down for each iteration of tests starts.
1026:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsTearDownStart(const UnitTest& unit_test) = 0;
1027:quantum/serial_link/tests/gtest/gtest.h **** 
1028:quantum/serial_link/tests/gtest/gtest.h ****   // Fired after environment tear-down for each iteration of tests ends.
1029:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) = 0;
1030:quantum/serial_link/tests/gtest/gtest.h **** 
1031:quantum/serial_link/tests/gtest/gtest.h ****   // Fired after each iteration of tests finishes.
1032:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestIterationEnd(const UnitTest& unit_test,
1033:quantum/serial_link/tests/gtest/gtest.h ****                                   int iteration) = 0;
1034:quantum/serial_link/tests/gtest/gtest.h **** 
1035:quantum/serial_link/tests/gtest/gtest.h ****   // Fired after all test activities have ended.
1036:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestProgramEnd(const UnitTest& unit_test) = 0;
1037:quantum/serial_link/tests/gtest/gtest.h **** };
1038:quantum/serial_link/tests/gtest/gtest.h **** 
1039:quantum/serial_link/tests/gtest/gtest.h **** // The convenience class for users who need to override just one or two
1040:quantum/serial_link/tests/gtest/gtest.h **** // methods and are not concerned that a possible change to a signature of
1041:quantum/serial_link/tests/gtest/gtest.h **** // the methods they override will not be caught during the build.  For
1042:quantum/serial_link/tests/gtest/gtest.h **** // comments about each method please see the definition of TestEventListener
1043:quantum/serial_link/tests/gtest/gtest.h **** // above.
1044:quantum/serial_link/tests/gtest/gtest.h **** class EmptyTestEventListener : public TestEventListener {
1045:quantum/serial_link/tests/gtest/gtest.h ****  public:
1046:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestProgramStart(const UnitTest& /*unit_test*/) {}
1047:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestIterationStart(const UnitTest& /*unit_test*/,
1048:quantum/serial_link/tests/gtest/gtest.h ****                                     int /*iteration*/) {}
1049:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) {}
1050:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) {}
1051:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestCaseStart(const TestCase& /*test_case*/) {}
1052:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestStart(const TestInfo& /*test_info*/) {}
1053:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestPartResult(const TestPartResult& /*test_part_result*/) {}
1054:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestEnd(const TestInfo& /*test_info*/) {}
1055:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestCaseEnd(const TestCase& /*test_case*/) {}
1056:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) {}
1057:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) {}
1058:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestIterationEnd(const UnitTest& /*unit_test*/,
1059:quantum/serial_link/tests/gtest/gtest.h ****                                   int /*iteration*/) {}
1060:quantum/serial_link/tests/gtest/gtest.h ****   virtual void OnTestProgramEnd(const UnitTest& /*unit_test*/) {}
1061:quantum/serial_link/tests/gtest/gtest.h **** };
1062:quantum/serial_link/tests/gtest/gtest.h **** 
1063:quantum/serial_link/tests/gtest/gtest.h **** // TestEventListeners lets users add listeners to track events in Google Test.
1064:quantum/serial_link/tests/gtest/gtest.h **** class GTEST_API_ TestEventListeners {
1065:quantum/serial_link/tests/gtest/gtest.h ****  public:
1066:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListeners();
1067:quantum/serial_link/tests/gtest/gtest.h ****   ~TestEventListeners();
1068:quantum/serial_link/tests/gtest/gtest.h **** 
1069:quantum/serial_link/tests/gtest/gtest.h ****   // Appends an event listener to the end of the list. Google Test assumes
1070:quantum/serial_link/tests/gtest/gtest.h ****   // the ownership of the listener (i.e. it will delete the listener when
1071:quantum/serial_link/tests/gtest/gtest.h ****   // the test program finishes).
1072:quantum/serial_link/tests/gtest/gtest.h ****   void Append(TestEventListener* listener);
1073:quantum/serial_link/tests/gtest/gtest.h **** 
1074:quantum/serial_link/tests/gtest/gtest.h ****   // Removes the given event listener from the list and returns it.  It then
1075:quantum/serial_link/tests/gtest/gtest.h ****   // becomes the caller's responsibility to delete the listener. Returns
1076:quantum/serial_link/tests/gtest/gtest.h ****   // NULL if the listener is not found in the list.
1077:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListener* Release(TestEventListener* listener);
1078:quantum/serial_link/tests/gtest/gtest.h **** 
1079:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the standard listener responsible for the default console
1080:quantum/serial_link/tests/gtest/gtest.h ****   // output.  Can be removed from the listeners list to shut down default
1081:quantum/serial_link/tests/gtest/gtest.h ****   // console output.  Note that removing this object from the listener list
1082:quantum/serial_link/tests/gtest/gtest.h ****   // with Release transfers its ownership to the caller and makes this
1083:quantum/serial_link/tests/gtest/gtest.h ****   // function return NULL the next time.
1084:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListener* default_result_printer() const {
1085:quantum/serial_link/tests/gtest/gtest.h ****     return default_result_printer_;
1086:quantum/serial_link/tests/gtest/gtest.h ****   }
1087:quantum/serial_link/tests/gtest/gtest.h **** 
1088:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the standard listener responsible for the default XML output
1089:quantum/serial_link/tests/gtest/gtest.h ****   // controlled by the --gtest_output=xml flag.  Can be removed from the
1090:quantum/serial_link/tests/gtest/gtest.h ****   // listeners list by users who want to shut down the default XML output
1091:quantum/serial_link/tests/gtest/gtest.h ****   // controlled by this flag and substitute it with custom one.  Note that
1092:quantum/serial_link/tests/gtest/gtest.h ****   // removing this object from the listener list with Release transfers its
1093:quantum/serial_link/tests/gtest/gtest.h ****   // ownership to the caller and makes this function return NULL the next
1094:quantum/serial_link/tests/gtest/gtest.h ****   // time.
1095:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListener* default_xml_generator() const {
1096:quantum/serial_link/tests/gtest/gtest.h ****     return default_xml_generator_;
1097:quantum/serial_link/tests/gtest/gtest.h ****   }
1098:quantum/serial_link/tests/gtest/gtest.h **** 
1099:quantum/serial_link/tests/gtest/gtest.h ****  private:
1100:quantum/serial_link/tests/gtest/gtest.h ****   friend class TestCase;
1101:quantum/serial_link/tests/gtest/gtest.h ****   friend class TestInfo;
1102:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::DefaultGlobalTestPartResultReporter;
1103:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::NoExecDeathTest;
1104:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::TestEventListenersAccessor;
1105:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::UnitTestImpl;
1106:quantum/serial_link/tests/gtest/gtest.h **** 
1107:quantum/serial_link/tests/gtest/gtest.h ****   // Returns repeater that broadcasts the TestEventListener events to all
1108:quantum/serial_link/tests/gtest/gtest.h ****   // subscribers.
1109:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListener* repeater();
1110:quantum/serial_link/tests/gtest/gtest.h **** 
1111:quantum/serial_link/tests/gtest/gtest.h ****   // Sets the default_result_printer attribute to the provided listener.
1112:quantum/serial_link/tests/gtest/gtest.h ****   // The listener is also added to the listener list and previous
1113:quantum/serial_link/tests/gtest/gtest.h ****   // default_result_printer is removed from it and deleted. The listener can
1114:quantum/serial_link/tests/gtest/gtest.h ****   // also be NULL in which case it will not be added to the list. Does
1115:quantum/serial_link/tests/gtest/gtest.h ****   // nothing if the previous and the current listener objects are the same.
1116:quantum/serial_link/tests/gtest/gtest.h ****   void SetDefaultResultPrinter(TestEventListener* listener);
1117:quantum/serial_link/tests/gtest/gtest.h **** 
1118:quantum/serial_link/tests/gtest/gtest.h ****   // Sets the default_xml_generator attribute to the provided listener.  The
1119:quantum/serial_link/tests/gtest/gtest.h ****   // listener is also added to the listener list and previous
1120:quantum/serial_link/tests/gtest/gtest.h ****   // default_xml_generator is removed from it and deleted. The listener can
1121:quantum/serial_link/tests/gtest/gtest.h ****   // also be NULL in which case it will not be added to the list. Does
1122:quantum/serial_link/tests/gtest/gtest.h ****   // nothing if the previous and the current listener objects are the same.
1123:quantum/serial_link/tests/gtest/gtest.h ****   void SetDefaultXmlGenerator(TestEventListener* listener);
1124:quantum/serial_link/tests/gtest/gtest.h **** 
1125:quantum/serial_link/tests/gtest/gtest.h ****   // Controls whether events will be forwarded by the repeater to the
1126:quantum/serial_link/tests/gtest/gtest.h ****   // listeners in the list.
1127:quantum/serial_link/tests/gtest/gtest.h ****   bool EventForwardingEnabled() const;
1128:quantum/serial_link/tests/gtest/gtest.h ****   void SuppressEventForwarding();
1129:quantum/serial_link/tests/gtest/gtest.h **** 
1130:quantum/serial_link/tests/gtest/gtest.h ****   // The actual list of listeners.
1131:quantum/serial_link/tests/gtest/gtest.h ****   internal::TestEventRepeater* repeater_;
1132:quantum/serial_link/tests/gtest/gtest.h ****   // Listener responsible for the standard result output.
1133:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListener* default_result_printer_;
1134:quantum/serial_link/tests/gtest/gtest.h ****   // Listener responsible for the creation of the XML output file.
1135:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListener* default_xml_generator_;
1136:quantum/serial_link/tests/gtest/gtest.h **** 
1137:quantum/serial_link/tests/gtest/gtest.h ****   // We disallow copying TestEventListeners.
1138:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventListeners);
1139:quantum/serial_link/tests/gtest/gtest.h **** };
1140:quantum/serial_link/tests/gtest/gtest.h **** 
1141:quantum/serial_link/tests/gtest/gtest.h **** // A UnitTest consists of a vector of TestCases.
1142:quantum/serial_link/tests/gtest/gtest.h **** //
1143:quantum/serial_link/tests/gtest/gtest.h **** // This is a singleton class.  The only instance of UnitTest is
1144:quantum/serial_link/tests/gtest/gtest.h **** // created when UnitTest::GetInstance() is first called.  This
1145:quantum/serial_link/tests/gtest/gtest.h **** // instance is never deleted.
1146:quantum/serial_link/tests/gtest/gtest.h **** //
1147:quantum/serial_link/tests/gtest/gtest.h **** // UnitTest is not copyable.
1148:quantum/serial_link/tests/gtest/gtest.h **** //
1149:quantum/serial_link/tests/gtest/gtest.h **** // This class is thread-safe as long as the methods are called
1150:quantum/serial_link/tests/gtest/gtest.h **** // according to their specification.
1151:quantum/serial_link/tests/gtest/gtest.h **** class GTEST_API_ UnitTest {
1152:quantum/serial_link/tests/gtest/gtest.h ****  public:
1153:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the singleton UnitTest object.  The first time this method
1154:quantum/serial_link/tests/gtest/gtest.h ****   // is called, a UnitTest object is constructed and returned.
1155:quantum/serial_link/tests/gtest/gtest.h ****   // Consecutive calls will return the same object.
1156:quantum/serial_link/tests/gtest/gtest.h ****   static UnitTest* GetInstance();
1157:quantum/serial_link/tests/gtest/gtest.h **** 
1158:quantum/serial_link/tests/gtest/gtest.h ****   // Runs all tests in this UnitTest object and prints the result.
1159:quantum/serial_link/tests/gtest/gtest.h ****   // Returns 0 if successful, or 1 otherwise.
1160:quantum/serial_link/tests/gtest/gtest.h ****   //
1161:quantum/serial_link/tests/gtest/gtest.h ****   // This method can only be called from the main thread.
1162:quantum/serial_link/tests/gtest/gtest.h ****   //
1163:quantum/serial_link/tests/gtest/gtest.h ****   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
1164:quantum/serial_link/tests/gtest/gtest.h ****   int Run() GTEST_MUST_USE_RESULT_;
1165:quantum/serial_link/tests/gtest/gtest.h **** 
1166:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the working directory when the first TEST() or TEST_F()
1167:quantum/serial_link/tests/gtest/gtest.h ****   // was executed.  The UnitTest object owns the string.
1168:quantum/serial_link/tests/gtest/gtest.h ****   const char* original_working_dir() const;
1169:quantum/serial_link/tests/gtest/gtest.h **** 
1170:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the TestCase object for the test that's currently running,
1171:quantum/serial_link/tests/gtest/gtest.h ****   // or NULL if no test is running.
1172:quantum/serial_link/tests/gtest/gtest.h ****   const TestCase* current_test_case() const
1173:quantum/serial_link/tests/gtest/gtest.h ****       GTEST_LOCK_EXCLUDED_(mutex_);
1174:quantum/serial_link/tests/gtest/gtest.h **** 
1175:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the TestInfo object for the test that's currently running,
1176:quantum/serial_link/tests/gtest/gtest.h ****   // or NULL if no test is running.
1177:quantum/serial_link/tests/gtest/gtest.h ****   const TestInfo* current_test_info() const
1178:quantum/serial_link/tests/gtest/gtest.h ****       GTEST_LOCK_EXCLUDED_(mutex_);
1179:quantum/serial_link/tests/gtest/gtest.h **** 
1180:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the random seed used at the start of the current test run.
1181:quantum/serial_link/tests/gtest/gtest.h ****   int random_seed() const;
1182:quantum/serial_link/tests/gtest/gtest.h **** 
1183:quantum/serial_link/tests/gtest/gtest.h **** #if GTEST_HAS_PARAM_TEST
1184:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the ParameterizedTestCaseRegistry object used to keep track of
1185:quantum/serial_link/tests/gtest/gtest.h ****   // value-parameterized tests and instantiate and register them.
1186:quantum/serial_link/tests/gtest/gtest.h ****   //
1187:quantum/serial_link/tests/gtest/gtest.h ****   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
1188:quantum/serial_link/tests/gtest/gtest.h ****   internal::ParameterizedTestCaseRegistry& parameterized_test_registry()
1189:quantum/serial_link/tests/gtest/gtest.h ****       GTEST_LOCK_EXCLUDED_(mutex_);
1190:quantum/serial_link/tests/gtest/gtest.h **** #endif  // GTEST_HAS_PARAM_TEST
1191:quantum/serial_link/tests/gtest/gtest.h **** 
1192:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of successful test cases.
1193:quantum/serial_link/tests/gtest/gtest.h ****   int successful_test_case_count() const;
1194:quantum/serial_link/tests/gtest/gtest.h **** 
1195:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of failed test cases.
1196:quantum/serial_link/tests/gtest/gtest.h ****   int failed_test_case_count() const;
1197:quantum/serial_link/tests/gtest/gtest.h **** 
1198:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of all test cases.
1199:quantum/serial_link/tests/gtest/gtest.h ****   int total_test_case_count() const;
1200:quantum/serial_link/tests/gtest/gtest.h **** 
1201:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of all test cases that contain at least one test
1202:quantum/serial_link/tests/gtest/gtest.h ****   // that should run.
1203:quantum/serial_link/tests/gtest/gtest.h ****   int test_case_to_run_count() const;
1204:quantum/serial_link/tests/gtest/gtest.h **** 
1205:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of successful tests.
1206:quantum/serial_link/tests/gtest/gtest.h ****   int successful_test_count() const;
1207:quantum/serial_link/tests/gtest/gtest.h **** 
1208:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of failed tests.
1209:quantum/serial_link/tests/gtest/gtest.h ****   int failed_test_count() const;
1210:quantum/serial_link/tests/gtest/gtest.h **** 
1211:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of disabled tests that will be reported in the XML report.
1212:quantum/serial_link/tests/gtest/gtest.h ****   int reportable_disabled_test_count() const;
1213:quantum/serial_link/tests/gtest/gtest.h **** 
1214:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of disabled tests.
1215:quantum/serial_link/tests/gtest/gtest.h ****   int disabled_test_count() const;
1216:quantum/serial_link/tests/gtest/gtest.h **** 
1217:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of tests to be printed in the XML report.
1218:quantum/serial_link/tests/gtest/gtest.h ****   int reportable_test_count() const;
1219:quantum/serial_link/tests/gtest/gtest.h **** 
1220:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of all tests.
1221:quantum/serial_link/tests/gtest/gtest.h ****   int total_test_count() const;
1222:quantum/serial_link/tests/gtest/gtest.h **** 
1223:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the number of tests that should run.
1224:quantum/serial_link/tests/gtest/gtest.h ****   int test_to_run_count() const;
1225:quantum/serial_link/tests/gtest/gtest.h **** 
1226:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the time of the test program start, in ms from the start of the
1227:quantum/serial_link/tests/gtest/gtest.h ****   // UNIX epoch.
1228:quantum/serial_link/tests/gtest/gtest.h ****   TimeInMillis start_timestamp() const;
1229:quantum/serial_link/tests/gtest/gtest.h **** 
1230:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the elapsed time, in milliseconds.
1231:quantum/serial_link/tests/gtest/gtest.h ****   TimeInMillis elapsed_time() const;
1232:quantum/serial_link/tests/gtest/gtest.h **** 
1233:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the unit test passed (i.e. all test cases passed).
1234:quantum/serial_link/tests/gtest/gtest.h ****   bool Passed() const;
1235:quantum/serial_link/tests/gtest/gtest.h **** 
1236:quantum/serial_link/tests/gtest/gtest.h ****   // Returns true iff the unit test failed (i.e. some test case failed
1237:quantum/serial_link/tests/gtest/gtest.h ****   // or something outside of all tests failed).
1238:quantum/serial_link/tests/gtest/gtest.h ****   bool Failed() const;
1239:quantum/serial_link/tests/gtest/gtest.h **** 
1240:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the i-th test case among all the test cases. i can range from 0 to
1241:quantum/serial_link/tests/gtest/gtest.h ****   // total_test_case_count() - 1. If i is not in that range, returns NULL.
1242:quantum/serial_link/tests/gtest/gtest.h ****   const TestCase* GetTestCase(int i) const;
1243:quantum/serial_link/tests/gtest/gtest.h **** 
1244:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the TestResult containing information on test failures and
1245:quantum/serial_link/tests/gtest/gtest.h ****   // properties logged outside of individual test cases.
1246:quantum/serial_link/tests/gtest/gtest.h ****   const TestResult& ad_hoc_test_result() const;
1247:quantum/serial_link/tests/gtest/gtest.h **** 
1248:quantum/serial_link/tests/gtest/gtest.h ****   // Returns the list of event listeners that can be used to track events
1249:quantum/serial_link/tests/gtest/gtest.h ****   // inside Google Test.
1250:quantum/serial_link/tests/gtest/gtest.h ****   TestEventListeners& listeners();
1251:quantum/serial_link/tests/gtest/gtest.h **** 
1252:quantum/serial_link/tests/gtest/gtest.h ****  private:
1253:quantum/serial_link/tests/gtest/gtest.h ****   // Registers and returns a global test environment.  When a test
1254:quantum/serial_link/tests/gtest/gtest.h ****   // program is run, all global test environments will be set-up in
1255:quantum/serial_link/tests/gtest/gtest.h ****   // the order they were registered.  After all tests in the program
1256:quantum/serial_link/tests/gtest/gtest.h ****   // have finished, all global test environments will be torn-down in
1257:quantum/serial_link/tests/gtest/gtest.h ****   // the *reverse* order they were registered.
1258:quantum/serial_link/tests/gtest/gtest.h ****   //
1259:quantum/serial_link/tests/gtest/gtest.h ****   // The UnitTest object takes ownership of the given environment.
1260:quantum/serial_link/tests/gtest/gtest.h ****   //
1261:quantum/serial_link/tests/gtest/gtest.h ****   // This method can only be called from the main thread.
1262:quantum/serial_link/tests/gtest/gtest.h ****   Environment* AddEnvironment(Environment* env);
1263:quantum/serial_link/tests/gtest/gtest.h **** 
1264:quantum/serial_link/tests/gtest/gtest.h ****   // Adds a TestPartResult to the current TestResult object.  All
1265:quantum/serial_link/tests/gtest/gtest.h ****   // Google Test assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc)
1266:quantum/serial_link/tests/gtest/gtest.h ****   // eventually call this to report their results.  The user code
1267:quantum/serial_link/tests/gtest/gtest.h ****   // should use the assertion macros instead of calling this directly.
1268:quantum/serial_link/tests/gtest/gtest.h ****   void AddTestPartResult(TestPartResult::Type result_type,
1269:quantum/serial_link/tests/gtest/gtest.h ****                          const char* file_name,
1270:quantum/serial_link/tests/gtest/gtest.h ****                          int line_number,
1271:quantum/serial_link/tests/gtest/gtest.h ****                          const std::string& message,
1272:quantum/serial_link/tests/gtest/gtest.h ****                          const std::string& os_stack_trace)
1273:quantum/serial_link/tests/gtest/gtest.h ****       GTEST_LOCK_EXCLUDED_(mutex_);
1274:quantum/serial_link/tests/gtest/gtest.h **** 
1275:quantum/serial_link/tests/gtest/gtest.h ****   // Adds a TestProperty to the current TestResult object when invoked from
1276:quantum/serial_link/tests/gtest/gtest.h ****   // inside a test, to current TestCase's ad_hoc_test_result_ when invoked
1277:quantum/serial_link/tests/gtest/gtest.h ****   // from SetUpTestCase or TearDownTestCase, or to the global property set
1278:quantum/serial_link/tests/gtest/gtest.h ****   // when invoked elsewhere.  If the result already contains a property with
1279:quantum/serial_link/tests/gtest/gtest.h ****   // the same key, the value will be updated.
1280:quantum/serial_link/tests/gtest/gtest.h ****   void RecordProperty(const std::string& key, const std::string& value);
1281:quantum/serial_link/tests/gtest/gtest.h **** 
1282:quantum/serial_link/tests/gtest/gtest.h ****   // Gets the i-th test case among all the test cases. i can range from 0 to
1283:quantum/serial_link/tests/gtest/gtest.h ****   // total_test_case_count() - 1. If i is not in that range, returns NULL.
1284:quantum/serial_link/tests/gtest/gtest.h ****   TestCase* GetMutableTestCase(int i);
1285:quantum/serial_link/tests/gtest/gtest.h **** 
1286:quantum/serial_link/tests/gtest/gtest.h ****   // Accessors for the implementation object.
1287:quantum/serial_link/tests/gtest/gtest.h ****   internal::UnitTestImpl* impl() { return impl_; }
1288:quantum/serial_link/tests/gtest/gtest.h ****   const internal::UnitTestImpl* impl() const { return impl_; }
1289:quantum/serial_link/tests/gtest/gtest.h **** 
1290:quantum/serial_link/tests/gtest/gtest.h ****   // These classes and funcions are friends as they need to access private
1291:quantum/serial_link/tests/gtest/gtest.h ****   // members of UnitTest.
1292:quantum/serial_link/tests/gtest/gtest.h ****   friend class Test;
1293:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::AssertHelper;
1294:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::ScopedTrace;
1295:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::StreamingListenerTest;
1296:quantum/serial_link/tests/gtest/gtest.h ****   friend class internal::UnitTestRecordPropertyTestHelper;
1297:quantum/serial_link/tests/gtest/gtest.h ****   friend Environment* AddGlobalTestEnvironment(Environment* env);
1298:quantum/serial_link/tests/gtest/gtest.h ****   friend internal::UnitTestImpl* internal::GetUnitTestImpl();
1299:quantum/serial_link/tests/gtest/gtest.h ****   friend void internal::ReportFailureInUnknownLocation(
1300:quantum/serial_link/tests/gtest/gtest.h ****       TestPartResult::Type result_type,
1301:quantum/serial_link/tests/gtest/gtest.h ****       const std::string& message);
1302:quantum/serial_link/tests/gtest/gtest.h **** 
1303:quantum/serial_link/tests/gtest/gtest.h ****   // Creates an empty UnitTest.
1304:quantum/serial_link/tests/gtest/gtest.h ****   UnitTest();
1305:quantum/serial_link/tests/gtest/gtest.h **** 
1306:quantum/serial_link/tests/gtest/gtest.h ****   // D'tor
1307:quantum/serial_link/tests/gtest/gtest.h ****   virtual ~UnitTest();
1308:quantum/serial_link/tests/gtest/gtest.h **** 
1309:quantum/serial_link/tests/gtest/gtest.h ****   // Pushes a trace defined by SCOPED_TRACE() on to the per-thread
1310:quantum/serial_link/tests/gtest/gtest.h ****   // Google Test trace stack.
1311:quantum/serial_link/tests/gtest/gtest.h ****   void PushGTestTrace(const internal::TraceInfo& trace)
1312:quantum/serial_link/tests/gtest/gtest.h ****       GTEST_LOCK_EXCLUDED_(mutex_);
1313:quantum/serial_link/tests/gtest/gtest.h **** 
1314:quantum/serial_link/tests/gtest/gtest.h ****   // Pops a trace from the per-thread Google Test trace stack.
1315:quantum/serial_link/tests/gtest/gtest.h ****   void PopGTestTrace()
1316:quantum/serial_link/tests/gtest/gtest.h ****       GTEST_LOCK_EXCLUDED_(mutex_);
1317:quantum/serial_link/tests/gtest/gtest.h **** 
1318:quantum/serial_link/tests/gtest/gtest.h ****   // Protects mutable state in *impl_.  This is mutable as some const
1319:quantum/serial_link/tests/gtest/gtest.h ****   // methods need to lock it too.
1320:quantum/serial_link/tests/gtest/gtest.h ****   mutable internal::Mutex mutex_;
1321:quantum/serial_link/tests/gtest/gtest.h **** 
1322:quantum/serial_link/tests/gtest/gtest.h ****   // Opaque implementation object.  This field is never changed once
1323:quantum/serial_link/tests/gtest/gtest.h ****   // the object is constructed.  We don't mark it as const here, as
1324:quantum/serial_link/tests/gtest/gtest.h ****   // doing so will cause a warning in the constructor of UnitTest.
1325:quantum/serial_link/tests/gtest/gtest.h ****   // Mutable state in *impl_ is protected by mutex_.
1326:quantum/serial_link/tests/gtest/gtest.h ****   internal::UnitTestImpl* impl_;
1327:quantum/serial_link/tests/gtest/gtest.h **** 
1328:quantum/serial_link/tests/gtest/gtest.h ****   // We disallow copying UnitTest.
1329:quantum/serial_link/tests/gtest/gtest.h ****   GTEST_DISALLOW_COPY_AND_ASSIGN_(UnitTest);
1330:quantum/serial_link/tests/gtest/gtest.h **** };
1331:quantum/serial_link/tests/gtest/gtest.h **** 
1332:quantum/serial_link/tests/gtest/gtest.h **** // A convenient wrapper for adding an environment for the test
1333:quantum/serial_link/tests/gtest/gtest.h **** // program.
1334:quantum/serial_link/tests/gtest/gtest.h **** //
1335:quantum/serial_link/tests/gtest/gtest.h **** // You should call this before RUN_ALL_TESTS() is called, probably in
1336:quantum/serial_link/tests/gtest/gtest.h **** // main().  If you use gtest_main, you need to call this before main()
1337:quantum/serial_link/tests/gtest/gtest.h **** // starts for it to take effect.  For example, you can define a global
1338:quantum/serial_link/tests/gtest/gtest.h **** // variable like this:
1339:quantum/serial_link/tests/gtest/gtest.h **** //
1340:quantum/serial_link/tests/gtest/gtest.h **** //   testing::Environment* const foo_env =
1341:quantum/serial_link/tests/gtest/gtest.h **** //       testing::AddGlobalTestEnvironment(new FooEnvironment);
1342:quantum/serial_link/tests/gtest/gtest.h **** //
1343:quantum/serial_link/tests/gtest/gtest.h **** // However, we strongly recommend you to write your own main() and
1344:quantum/serial_link/tests/gtest/gtest.h **** // call AddGlobalTestEnvironment() there, as relying on initialization
1345:quantum/serial_link/tests/gtest/gtest.h **** // of global variables makes the code harder to read and may cause
1346:quantum/serial_link/tests/gtest/gtest.h **** // problems when you register multiple environments from different
1347:quantum/serial_link/tests/gtest/gtest.h **** // translation units and the environments have dependencies among them
1348:quantum/serial_link/tests/gtest/gtest.h **** // (remember that the compiler doesn't guarantee the order in which
1349:quantum/serial_link/tests/gtest/gtest.h **** // global variables from different translation units are initialized).
1350:quantum/serial_link/tests/gtest/gtest.h **** inline Environment* AddGlobalTestEnvironment(Environment* env) {
1351:quantum/serial_link/tests/gtest/gtest.h ****   return UnitTest::GetInstance()->AddEnvironment(env);
1352:quantum/serial_link/tests/gtest/gtest.h **** }
1353:quantum/serial_link/tests/gtest/gtest.h **** 
1354:quantum/serial_link/tests/gtest/gtest.h **** // Initializes Google Test.  This must be called before calling
1355:quantum/serial_link/tests/gtest/gtest.h **** // RUN_ALL_TESTS().  In particular, it parses a command line for the
1356:quantum/serial_link/tests/gtest/gtest.h **** // flags that Google Test recognizes.  Whenever a Google Test flag is
1357:quantum/serial_link/tests/gtest/gtest.h **** // seen, it is removed from argv, and *argc is decremented.
1358:quantum/serial_link/tests/gtest/gtest.h **** //
1359:quantum/serial_link/tests/gtest/gtest.h **** // No value is returned.  Instead, the Google Test flag variables are
1360:quantum/serial_link/tests/gtest/gtest.h **** // updated.
1361:quantum/serial_link/tests/gtest/gtest.h **** //
1362:quantum/serial_link/tests/gtest/gtest.h **** // Calling the function for the second time has no user-visible effect.
1363:quantum/serial_link/tests/gtest/gtest.h **** GTEST_API_ void InitGoogleTest(int* argc, char** argv);
1364:quantum/serial_link/tests/gtest/gtest.h **** 
1365:quantum/serial_link/tests/gtest/gtest.h **** // This overloaded version can be used in Windows programs compiled in
1366:quantum/serial_link/tests/gtest/gtest.h **** // UNICODE mode.
1367:quantum/serial_link/tests/gtest/gtest.h **** GTEST_API_ void InitGoogleTest(int* argc, wchar_t** argv);
1368:quantum/serial_link/tests/gtest/gtest.h **** 
1369:quantum/serial_link/tests/gtest/gtest.h **** namespace internal {
1370:quantum/serial_link/tests/gtest/gtest.h **** 
1371:quantum/serial_link/tests/gtest/gtest.h **** // Separate the error generating code from the code path to reduce the stack
1372:quantum/serial_link/tests/gtest/gtest.h **** // frame size of CmpHelperEQ. This helps reduce the overhead of some sanitizers
1373:quantum/serial_link/tests/gtest/gtest.h **** // when calling EXPECT_* in a tight loop.
1374:quantum/serial_link/tests/gtest/gtest.h **** template <typename T1, typename T2>
1375:quantum/serial_link/tests/gtest/gtest.h **** AssertionResult CmpHelperEQFailure(const char* lhs_expression,
 2241              		.loc 1 1375 17 is_stmt 1 view -0
 2242              		.cfi_startproc
 2243              		.loc 1 1375 17 is_stmt 0 view .LVU467
 2244 0000 4157     		pushq	%r15
 2245              		.cfi_def_cfa_offset 16
 2246              		.cfi_offset 15, -16
 2247 0002 4989F7   		movq	%rsi, %r15
 2248 0005 4156     		pushq	%r14
 2249              		.cfi_def_cfa_offset 24
 2250              		.cfi_offset 14, -24
 2251 0007 4989CE   		movq	%rcx, %r14
 2252 000a 4155     		pushq	%r13
 2253              		.cfi_def_cfa_offset 32
 2254              		.cfi_offset 13, -32
 2255 000c 4D89C5   		movq	%r8, %r13
 2256 000f 4154     		pushq	%r12
 2257              		.cfi_def_cfa_offset 40
 2258              		.cfi_offset 12, -40
 2259 0011 4989FC   		movq	%rdi, %r12
 2260 0014 55       		pushq	%rbp
 2261              		.cfi_def_cfa_offset 48
 2262              		.cfi_offset 6, -48
 2263 0015 4881ECF0 		subq	$496, %rsp
 2263      010000
 2264              		.cfi_def_cfa_offset 544
 2265              		.loc 1 1375 17 view .LVU468
 2266 001c 48895424 		movq	%rdx, 24(%rsp)
 2266      18
 2267              	.LBB1398:
 2268              	.LBB1399:
 2269              	.LBB1400:
 2270              	.LBB1401:
 2271              		.file 11 "quantum/serial_link/tests/gtest/././internal/../gtest-printers.h"
   1:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Copyright 2007, Google Inc.
   2:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // All rights reserved.
   3:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
   4:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Redistribution and use in source and binary forms, with or without
   5:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // modification, are permitted provided that the following conditions are
   6:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // met:
   7:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
   8:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //     * Redistributions of source code must retain the above copyright
   9:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // notice, this list of conditions and the following disclaimer.
  10:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //     * Redistributions in binary form must reproduce the above
  11:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // copyright notice, this list of conditions and the following disclaimer
  12:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // in the documentation and/or other materials provided with the
  13:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // distribution.
  14:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //     * Neither the name of Google Inc. nor the names of its
  15:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // contributors may be used to endorse or promote products derived from
  16:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // this software without specific prior written permission.
  17:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  18:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  19:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  20:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  21:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  22:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  23:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  24:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  25:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  26:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  27:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  28:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  29:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  30:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Author: wan@google.com (Zhanyong Wan)
  31:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
  32:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Google Test - The Google C++ Testing Framework
  33:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  34:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // This file implements a universal value printer that can print a
  35:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // value of any type T:
  36:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  37:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   void ::testing::internal::UniversalPrinter<T>::Print(value, ostream_ptr);
  38:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  39:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // A user can teach this function how to print a class type T by
  40:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // defining either operator<<() or PrintTo() in the namespace that
  41:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // defines T.  More specifically, the FIRST defined function in the
  42:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // following list will be used (assuming T is defined in namespace
  43:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // foo):
  44:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  45:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   1. foo::PrintTo(const T&, ostream*)
  46:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   2. operator<<(ostream&, const T&) defined in either foo or the
  47:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //      global namespace.
  48:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  49:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // If none of the above is defined, it will print the debug string of
  50:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // the value if it is a protocol buffer, or print the raw bytes in the
  51:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // value otherwise.
  52:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  53:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // To aid debugging: when T is a reference type, the address of the
  54:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // value is also printed; when T is a (const) char pointer, both the
  55:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // pointer value and the NUL-terminated string it points to are
  56:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // printed.
  57:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  58:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // We also provide some convenient wrappers:
  59:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  60:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // Prints a value to a string.  For a (const or not) char
  61:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // pointer, the NUL-terminated string (but not the pointer) is
  62:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // printed.
  63:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   std::string ::testing::PrintToString(const T& value);
  64:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  65:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // Prints a value tersely: for a reference type, the referenced
  66:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // value (but not the address) is printed; for a (const or not) char
  67:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // pointer, the NUL-terminated string (but not the pointer) is
  68:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // printed.
  69:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   void ::testing::internal::UniversalTersePrint(const T& value, ostream*);
  70:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  71:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // Prints value using the type inferred by the compiler.  The difference
  72:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // from UniversalTersePrint() is that this function prints both the
  73:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // pointer and the NUL-terminated string for a (const or not) char pointer.
  74:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   void ::testing::internal::UniversalPrint(const T& value, ostream*);
  75:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  76:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // Prints the fields of a tuple tersely to a string vector, one
  77:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // element for each field. Tuple support must be enabled in
  78:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   // gtest-port.h.
  79:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //   std::vector<string> UniversalTersePrintTupleFieldsToStrings(
  80:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //       const Tuple& value);
  81:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  82:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Known limitation:
  83:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
  84:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // The print primitives print the elements of an STL-style container
  85:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // using the compiler-inferred type of *iter where iter is a
  86:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // const_iterator of the container.  When const_iterator is an input
  87:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // iterator but not a forward iterator, this inferred type may not
  88:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // match value_type, and the print output may be incorrect.  In
  89:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // practice, this is rarely a problem as for most containers
  90:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // const_iterator is a forward iterator.  We'll fix this if there's an
  91:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // actual need for it.  Note that this fix cannot rely on value_type
  92:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // being defined as many user-defined container types don't have
  93:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // value_type.
  94:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
  95:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #ifndef GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_
  96:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #define GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_
  97:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
  98:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #include <ostream>  // NOLINT
  99:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #include <sstream>
 100:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #include <string>
 101:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #include <utility>
 102:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #include <vector>
 103:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #include "./internal/gtest-port.h"
 104:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #include "./internal/gtest-internal.h"
 105:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 106:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_STD_TUPLE_
 107:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** # include <tuple>
 108:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif
 109:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 110:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** namespace testing {
 111:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 112:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Definitions in the 'internal' and 'internal2' name spaces are
 113:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // subject to change without notice.  DO NOT USE THEM IN USER CODE!
 114:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** namespace internal2 {
 115:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 116:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints the given number of bytes in the given object to the given
 117:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // ostream.
 118:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintBytesInObjectTo(const unsigned char* obj_bytes,
 119:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                                      size_t count,
 120:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                                      ::std::ostream* os);
 121:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 122:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // For selecting which printer to use when a given type has neither <<
 123:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // nor PrintTo().
 124:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** enum TypeKind {
 125:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   kProtobuf,              // a protobuf type
 126:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   kConvertibleToInteger,  // a type implicitly convertible to BiggestInt
 127:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                           // (e.g. a named or unnamed enum type)
 128:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   kOtherType              // anything else
 129:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 130:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 131:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // TypeWithoutFormatter<T, kTypeKind>::PrintValue(value, os) is called
 132:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // by the universal printer to print a value of type T when neither
 133:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // operator<< nor PrintTo() is defined for T, where kTypeKind is the
 134:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // "kind" of T as defined by enum TypeKind.
 135:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T, TypeKind kTypeKind>
 136:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class TypeWithoutFormatter {
 137:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 138:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // This default version is called when kTypeKind is kOtherType.
 139:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void PrintValue(const T& value, ::std::ostream* os) {
 140:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     PrintBytesInObjectTo(reinterpret_cast<const unsigned char*>(&value),
 141:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                          sizeof(value), os);
 142:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 143:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 144:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 145:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // We print a protobuf using its ShortDebugString() when the string
 146:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // doesn't exceed this many characters; otherwise we print it using
 147:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // DebugString() for better readability.
 148:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** const size_t kProtobufOneLinerMaxLength = 50;
 149:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 150:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 151:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class TypeWithoutFormatter<T, kProtobuf> {
 152:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 153:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void PrintValue(const T& value, ::std::ostream* os) {
 154:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const ::testing::internal::string short_str = value.ShortDebugString();
 155:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const ::testing::internal::string pretty_str =
 156:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****         short_str.length() <= kProtobufOneLinerMaxLength ?
 157:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****         short_str : ("\n" + value.DebugString());
 158:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << ("<" + pretty_str + ">");
 159:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 160:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 161:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 162:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 163:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class TypeWithoutFormatter<T, kConvertibleToInteger> {
 164:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 165:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Since T has no << operator or PrintTo() but can be implicitly
 166:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // converted to BiggestInt, we print it as a BiggestInt.
 167:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 168:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Most likely T is an enum type (either named or unnamed), in which
 169:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // case printing it as an integer is the desired behavior.  In case
 170:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // T is not an enum, printing it as an integer is the best we can do
 171:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // given that it has no user-defined printer.
 172:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void PrintValue(const T& value, ::std::ostream* os) {
 173:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const internal::BiggestInt kBigInt = value;
 174:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << kBigInt;
 175:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 176:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 177:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 178:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints the given value to the given ostream.  If the value is a
 179:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // protocol message, its debug string is printed; if it's an enum or
 180:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // of a type implicitly convertible to BiggestInt, it's printed as an
 181:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // integer; otherwise the bytes in the value are printed.  This is
 182:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // what UniversalPrinter<T>::Print() does when it knows nothing about
 183:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // type T and T has neither << operator nor PrintTo().
 184:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 185:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // A user can override this behavior for a class type Foo by defining
 186:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // a << operator in the namespace where Foo is defined.
 187:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 188:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // We put this operator in namespace 'internal2' instead of 'internal'
 189:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // to simplify the implementation, as much code in 'internal' needs to
 190:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // use << in STL, which would conflict with our own << were it defined
 191:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // in 'internal'.
 192:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 193:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Note that this operator<< takes a generic std::basic_ostream<Char,
 194:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // CharTraits> type instead of the more restricted std::ostream.  If
 195:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // we define it to take an std::ostream instead, we'll get an
 196:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // "ambiguous overloads" compiler error when trying to print a type
 197:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Foo that supports streaming to std::basic_ostream<Char,
 198:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // CharTraits>, as the compiler cannot tell whether
 199:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // operator<<(std::ostream&, const T&) or
 200:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // operator<<(std::basic_stream<Char, CharTraits>, const Foo&) is more
 201:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // specific.
 202:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename Char, typename CharTraits, typename T>
 203:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** ::std::basic_ostream<Char, CharTraits>& operator<<(
 204:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     ::std::basic_ostream<Char, CharTraits>& os, const T& x) {
 205:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   TypeWithoutFormatter<T,
 206:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       (internal::IsAProtocolMessage<T>::value ? kProtobuf :
 207:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****        internal::ImplicitlyConvertible<const T&, internal::BiggestInt>::value ?
 208:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****        kConvertibleToInteger : kOtherType)>::PrintValue(x, &os);
 209:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   return os;
 210:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 211:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 212:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }  // namespace internal2
 213:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }  // namespace testing
 214:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 215:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // This namespace MUST NOT BE NESTED IN ::testing, or the name look-up
 216:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // magic needed for implementing UniversalPrinter won't work.
 217:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** namespace testing_internal {
 218:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 219:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Used to print a value that is not an STL-style container when the
 220:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // user doesn't define PrintTo() for it.
 221:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 222:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {
 223:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // With the following statement, during unqualified name lookup,
 224:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // testing::internal2::operator<< appears as if it was declared in
 225:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // the nearest enclosing namespace that contains both
 226:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // ::testing_internal and ::testing::internal2, i.e. the global
 227:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // namespace.  For more details, refer to the C++ Standard section
 228:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // 7.3.4-1 [namespace.udir].  This allows us to fall back onto
 229:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // testing::internal2::operator<< in case T doesn't come with a <<
 230:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // operator.
 231:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 232:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // We cannot write 'using ::testing::internal2::operator<<;', which
 233:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // gcc 3.3 fails to compile due to a compiler bug.
 234:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   using namespace ::testing::internal2;  // NOLINT
 235:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 236:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Assuming T is defined in namespace foo, in the next statement,
 237:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // the compiler will consider all of:
 238:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 239:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //   1. foo::operator<< (thanks to Koenig look-up),
 240:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //   2. ::operator<< (as the current namespace is enclosed in ::),
 241:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //   3. testing::internal2::operator<< (thanks to the using statement above).
 242:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 243:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // The operator<< whose type matches T best will be picked.
 244:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 245:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // We deliberately allow #2 to be a candidate, as sometimes it's
 246:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // impossible to define #1 (e.g. when foo is ::std, defining
 247:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // anything in it is undefined behavior unless you are a compiler
 248:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // vendor.).
 249:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << value;
 250:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 251:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 252:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }  // namespace testing_internal
 253:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 254:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** namespace testing {
 255:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** namespace internal {
 256:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 257:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // FormatForComparison<ToPrint, OtherOperand>::Format(value) formats a
 258:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // value of type ToPrint that is an operand of a comparison assertion
 259:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // (e.g. ASSERT_EQ).  OtherOperand is the type of the other operand in
 260:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // the comparison, and is used to help determine the best way to
 261:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // format the value.  In particular, when the value is a C string
 262:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // (char pointer) and the other operand is an STL string object, we
 263:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // want to format the C string as a string, since we know it is
 264:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // compared by value with the string object.  If the value is a char
 265:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // pointer but the other operand is not an STL string object, we don't
 266:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // know whether the pointer is supposed to point to a NUL-terminated
 267:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // string, and thus want to print it as a pointer to be safe.
 268:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 269:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
 270:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 271:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // The default case.
 272:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename ToPrint, typename OtherOperand>
 273:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class FormatForComparison {
 274:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 275:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static ::std::string Format(const ToPrint& value) {
 276:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return ::testing::PrintToString(value);
 277:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 278:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 279:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 280:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Array.
 281:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename ToPrint, size_t N, typename OtherOperand>
 282:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class FormatForComparison<ToPrint[N], OtherOperand> {
 283:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 284:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static ::std::string Format(const ToPrint* value) {
 285:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return FormatForComparison<const ToPrint*, OtherOperand>::Format(value);
 286:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 287:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 288:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 289:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // By default, print C string as pointers to be safe, as we don't know
 290:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // whether they actually point to a NUL-terminated string.
 291:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 292:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #define GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(CharType)                \
 293:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <typename OtherOperand>                                      \
 294:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   class FormatForComparison<CharType*, OtherOperand> {                  \
 295:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****    public:                                                              \
 296:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     static ::std::string Format(CharType* value) {                      \
 297:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       return ::testing::PrintToString(static_cast<const void*>(value)); \
 298:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }                                                                   \
 299:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 300:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 301:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(char);
 302:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const char);
 303:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(wchar_t);
 304:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const wchar_t);
 305:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 306:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #undef GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
 307:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 308:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // If a C string is compared with an STL string object, we know it's meant
 309:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // to point to a NUL-terminated string, and thus can print it as a string.
 310:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 311:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #define GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(CharType, OtherStringType) \
 312:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <>                                                           \
 313:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   class FormatForComparison<CharType*, OtherStringType> {               \
 314:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****    public:                                                              \
 315:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     static ::std::string Format(CharType* value) {                      \
 316:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       return ::testing::PrintToString(value);                           \
 317:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }                                                                   \
 318:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 319:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 320:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char, ::std::string);
 321:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char, ::std::string);
 322:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 323:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_GLOBAL_STRING
 324:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char, ::string);
 325:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char, ::string);
 326:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif
 327:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 328:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_GLOBAL_WSTRING
 329:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(wchar_t, ::wstring);
 330:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const wchar_t, ::wstring);
 331:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif
 332:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 333:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_STD_WSTRING
 334:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(wchar_t, ::std::wstring);
 335:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const wchar_t, ::std::wstring);
 336:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif
 337:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 338:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #undef GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
 339:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 340:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Formats a comparison assertion (e.g. ASSERT_EQ, EXPECT_LT, and etc)
 341:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // operand to be used in a failure message.  The type (but not value)
 342:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // of the other operand may affect the format.  This allows us to
 343:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // print a char* as a raw pointer when it is compared against another
 344:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // char* or void*, and print it as a C string when it is compared
 345:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // against an std::string object, for example.
 346:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 347:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
 348:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2>
 349:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** std::string FormatForComparisonFailureMessage(
 350:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const T1& value, const T2& /* other_operand */) {
 351:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   return FormatForComparison<T1, T2>::Format(value);
 352:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 353:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 354:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // UniversalPrinter<T>::Print(value, ostream_ptr) prints the given
 355:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // value to the given ostream.  The caller must ensure that
 356:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // 'ostream_ptr' is not NULL, or the behavior is undefined.
 357:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 358:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // We define UniversalPrinter as a class template (as opposed to a
 359:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // function template), as we need to partially specialize it for
 360:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // reference types, which cannot be done with function templates.
 361:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 362:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalPrinter;
 363:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 364:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 365:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void UniversalPrint(const T& value, ::std::ostream* os);
 366:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 367:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Used to print an STL-style container when the user doesn't define
 368:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // a PrintTo() for it.
 369:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename C>
 370:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void DefaultPrintTo(IsContainer /* dummy */,
 371:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     false_type /* is not a pointer */,
 372:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     const C& container, ::std::ostream* os) {
 373:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   const size_t kMaxCount = 32;  // The maximum number of elements to print.
 374:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << '{';
 375:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   size_t count = 0;
 376:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   for (typename C::const_iterator it = container.begin();
 377:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****        it != container.end(); ++it, ++count) {
 378:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     if (count > 0) {
 379:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       *os << ',';
 380:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       if (count == kMaxCount) {  // Enough has been printed.
 381:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****         *os << " ...";
 382:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****         break;
 383:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       }
 384:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }
 385:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << ' ';
 386:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // We cannot call PrintTo(*it, os) here as PrintTo() doesn't
 387:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // handle *it being a native array.
 388:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     internal::UniversalPrint(*it, os);
 389:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 390:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 391:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   if (count > 0) {
 392:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << ' ';
 393:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 394:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << '}';
 395:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 396:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 397:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Used to print a pointer that is neither a char pointer nor a member
 398:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // pointer, when the user doesn't define PrintTo() for it.  (A member
 399:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // variable pointer or member function pointer doesn't really point to
 400:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // a location in the address space.  Their representation is
 401:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // implementation-defined.  Therefore they will be printed as raw
 402:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // bytes.)
 403:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 404:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void DefaultPrintTo(IsNotContainer /* dummy */,
 405:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     true_type /* is a pointer */,
 406:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     T* p, ::std::ostream* os) {
 407:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   if (p == NULL) {
 408:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << "NULL";
 409:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   } else {
 410:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // C++ doesn't allow casting from a function pointer to any object
 411:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // pointer.
 412:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     //
 413:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // IsTrue() silences warnings: "Condition is always true",
 414:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // "unreachable code".
 415:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     if (IsTrue(ImplicitlyConvertible<T*, const void*>::value)) {
 416:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // T is not a function type.  We just call << to print p,
 417:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // relying on ADL to pick up user-defined << for their pointer
 418:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // types, if any.
 419:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       *os << p;
 420:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     } else {
 421:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // T is a function type, so '*os << p' doesn't do what we want
 422:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // (it just prints p as bool).  We want to print p as a const
 423:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // void*.  However, we cannot cast it to const void* directly,
 424:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // even using reinterpret_cast, as earlier versions of gcc
 425:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // (e.g. 3.4.5) cannot compile the cast when p is a function
 426:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // pointer.  Casting to UInt64 first solves the problem.
 427:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       *os << reinterpret_cast<const void*>(
 428:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****           reinterpret_cast<internal::UInt64>(p));
 429:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }
 430:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 431:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 432:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 433:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Used to print a non-container, non-pointer value when the user
 434:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // doesn't define PrintTo() for it.
 435:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 436:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void DefaultPrintTo(IsNotContainer /* dummy */,
 437:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     false_type /* is not a pointer */,
 438:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     const T& value, ::std::ostream* os) {
 439:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   ::testing_internal::DefaultPrintNonContainerTo(value, os);
 440:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 441:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 442:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints the given value using the << operator if it has one;
 443:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // otherwise prints the bytes in it.  This is what
 444:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // UniversalPrinter<T>::Print() does when PrintTo() is not specialized
 445:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // or overloaded for type T.
 446:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 447:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // A user can override this behavior for a class type Foo by defining
 448:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // an overload of PrintTo() in the namespace where Foo is defined.  We
 449:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // give the user this option as sometimes defining a << operator for
 450:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Foo is not desirable (e.g. the coding style may prevent doing it,
 451:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // or there is already a << operator but it doesn't do what the user
 452:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // wants).
 453:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 454:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const T& value, ::std::ostream* os) {
 455:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // DefaultPrintTo() is overloaded.  The type of its first two
 456:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // arguments determine which version will be picked.  If T is an
 457:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // STL-style container, the version for container will be called; if
 458:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // T is a pointer, the pointer version will be called; otherwise the
 459:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // generic version will be called.
 460:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 461:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Note that we check for container types here, prior to we check
 462:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // for protocol message types in our operator<<.  The rationale is:
 463:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 464:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // For protocol messages, we want to give people a chance to
 465:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // override Google Mock's format by defining a PrintTo() or
 466:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // operator<<.  For STL containers, other formats can be
 467:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // incompatible with Google Mock's format for the container
 468:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // elements; therefore we check for container types here to ensure
 469:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // that our format is used.
 470:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 471:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // The second argument of DefaultPrintTo() is needed to bypass a bug
 472:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // in Symbian's C++ compiler that prevents it from picking the right
 473:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // overload between:
 474:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //
 475:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //   PrintTo(const T& x, ...);
 476:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   //   PrintTo(T* x, ...);
 477:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   DefaultPrintTo(IsContainerTest<T>(0), is_pointer<T>(), value, os);
 478:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 479:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 480:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // The following list of PrintTo() overloads tells
 481:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // UniversalPrinter<T>::Print() how to print standard types (built-in
 482:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // types, strings, plain arrays, and pointers).
 483:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 484:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overloads for various char types.
 485:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintTo(unsigned char c, ::std::ostream* os);
 486:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintTo(signed char c, ::std::ostream* os);
 487:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(char c, ::std::ostream* os) {
 488:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // When printing a plain char, we always treat it as unsigned.  This
 489:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // way, the output won't be affected by whether the compiler thinks
 490:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // char is signed or not.
 491:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTo(static_cast<unsigned char>(c), os);
 492:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 493:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 494:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overloads for other simple built-in types.
 495:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(bool x, ::std::ostream* os) {
 496:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << (x ? "true" : "false");
 497:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 498:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 499:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overload for wchar_t type.
 500:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints a wchar_t as a symbol if it is printable or as its internal
 501:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // code otherwise and also as its decimal code (except for L'\0').
 502:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // The L'\0' char is printed as "L'\\0'". The decimal code is printed
 503:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // as signed integer when wchar_t is implemented by the compiler
 504:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // as a signed type and is printed as an unsigned integer when wchar_t
 505:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // is implemented as an unsigned type.
 506:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintTo(wchar_t wc, ::std::ostream* os);
 507:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 508:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overloads for C strings.
 509:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintTo(const char* s, ::std::ostream* os);
 510:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(char* s, ::std::ostream* os) {
 511:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTo(ImplicitCast_<const char*>(s), os);
 512:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 513:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 514:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // signed/unsigned char is often used for representing binary data, so
 515:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // we print pointers to it as void* to be safe.
 516:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(const signed char* s, ::std::ostream* os) {
 517:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTo(ImplicitCast_<const void*>(s), os);
 518:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 519:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(signed char* s, ::std::ostream* os) {
 520:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTo(ImplicitCast_<const void*>(s), os);
 521:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 522:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(const unsigned char* s, ::std::ostream* os) {
 523:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTo(ImplicitCast_<const void*>(s), os);
 524:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 525:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(unsigned char* s, ::std::ostream* os) {
 526:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTo(ImplicitCast_<const void*>(s), os);
 527:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 528:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 529:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // MSVC can be configured to define wchar_t as a typedef of unsigned
 530:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // short.  It defines _NATIVE_WCHAR_T_DEFINED when wchar_t is a native
 531:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // type.  When wchar_t is a typedef, defining an overload for const
 532:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // wchar_t* would cause unsigned short* be printed as a wide string,
 533:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // possibly causing invalid memory accesses.
 534:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if !defined(_MSC_VER) || defined(_NATIVE_WCHAR_T_DEFINED)
 535:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overloads for wide C strings
 536:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintTo(const wchar_t* s, ::std::ostream* os);
 537:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(wchar_t* s, ::std::ostream* os) {
 538:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTo(ImplicitCast_<const wchar_t*>(s), os);
 539:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 540:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif
 541:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 542:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overload for C arrays.  Multi-dimensional arrays are printed
 543:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // properly.
 544:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 545:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints the given number of elements in an array, without printing
 546:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // the curly braces.
 547:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 548:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {
 549:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   UniversalPrint(a[0], os);
 550:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   for (size_t i = 1; i != count; i++) {
 551:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << ", ";
 552:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(a[i], os);
 553:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 554:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 555:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 556:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overloads for ::string and ::std::string.
 557:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_GLOBAL_STRING
 558:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintStringTo(const ::string&s, ::std::ostream* os);
 559:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(const ::string& s, ::std::ostream* os) {
 560:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintStringTo(s, os);
 561:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 562:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_GLOBAL_STRING
 563:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 564:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintStringTo(const ::std::string&s, ::std::ostream* os);
 565:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(const ::std::string& s, ::std::ostream* os) {
 566:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintStringTo(s, os);
 567:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 568:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 569:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overloads for ::wstring and ::std::wstring.
 570:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_GLOBAL_WSTRING
 571:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintWideStringTo(const ::wstring&s, ::std::ostream* os);
 572:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(const ::wstring& s, ::std::ostream* os) {
 573:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintWideStringTo(s, os);
 574:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 575:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_GLOBAL_WSTRING
 576:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 577:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_STD_WSTRING
 578:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void PrintWideStringTo(const ::std::wstring&s, ::std::ostream* os);
 579:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {
 580:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintWideStringTo(s, os);
 581:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 582:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_STD_WSTRING
 583:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 584:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
 585:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Helper function for printing a tuple.  T must be instantiated with
 586:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // a tuple type.
 587:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 588:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTupleTo(const T& t, ::std::ostream* os);
 589:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
 590:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 591:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_TR1_TUPLE
 592:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overload for ::std::tr1::tuple.  Needed for printing function arguments,
 593:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // which are packed as tuples.
 594:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 595:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overloaded PrintTo() for tuples of various arities.  We support
 596:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // tuples of up-to 10 fields.  The following implementation works
 597:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // regardless of whether tr1::tuple is implemented using the
 598:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // non-standard variadic template feature or not.
 599:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 600:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {
 601:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 602:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 603:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 604:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1>
 605:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {
 606:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 607:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 608:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 609:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2>
 610:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {
 611:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 612:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 613:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 614:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3>
 615:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {
 616:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 617:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 618:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 619:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3, typename T4>
 620:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {
 621:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 622:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 623:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 624:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3, typename T4, typename T5>
 625:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,
 626:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****              ::std::ostream* os) {
 627:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 628:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 629:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 630:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3, typename T4, typename T5,
 631:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****           typename T6>
 632:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,
 633:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****              ::std::ostream* os) {
 634:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 635:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 636:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 637:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3, typename T4, typename T5,
 638:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****           typename T6, typename T7>
 639:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,
 640:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****              ::std::ostream* os) {
 641:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 642:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 643:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 644:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3, typename T4, typename T5,
 645:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****           typename T6, typename T7, typename T8>
 646:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,
 647:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****              ::std::ostream* os) {
 648:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 649:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 650:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 651:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3, typename T4, typename T5,
 652:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****           typename T6, typename T7, typename T8, typename T9>
 653:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,
 654:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****              ::std::ostream* os) {
 655:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 656:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 657:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 658:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2, typename T3, typename T4, typename T5,
 659:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****           typename T6, typename T7, typename T8, typename T9, typename T10>
 660:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(
 661:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>& t,
 662:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     ::std::ostream* os) {
 663:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 664:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 665:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_TR1_TUPLE
 666:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 667:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_STD_TUPLE_
 668:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename... Types>
 669:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os) {
 670:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   PrintTupleTo(t, os);
 671:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 672:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_STD_TUPLE_
 673:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 674:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Overload for std::pair.
 675:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T1, typename T2>
 676:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {
 677:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << '(';
 678:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // We cannot use UniversalPrint(value.first, os) here, as T1 may be
 679:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // a reference type.  The same for printing value.second.
 680:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   UniversalPrinter<T1>::Print(value.first, os);
 681:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << ", ";
 682:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   UniversalPrinter<T2>::Print(value.second, os);
 683:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << ')';
 684:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 685:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 686:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Implements printing a non-reference type T by letting the compiler
 687:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // pick the right overload of PrintTo() for T.
 688:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 689:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalPrinter {
 690:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 691:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // MSVC warns about adding const to a function type, so we want to
 692:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // disable the warning.
 693:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4180)
 694:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 695:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Note: we deliberately don't call this PrintTo(), as that name
 696:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // conflicts with ::testing::internal::PrintTo in the body of the
 697:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // function.
 698:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const T& value, ::std::ostream* os) {
 699:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // By default, ::testing::internal::PrintTo() is used for printing
 700:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // the value.
 701:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     //
 702:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // Thanks to Koenig look-up, if T is a class and has its own
 703:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // PrintTo() function defined in its namespace, that function will
 704:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // be visible here.  Since it is more specific than the generic ones
 705:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // in ::testing::internal, it will be picked by the compiler in the
 706:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // following statement - exactly what we want.
 707:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     PrintTo(value, os);
 708:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 709:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 710:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   GTEST_DISABLE_MSC_WARNINGS_POP_()
 711:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 712:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 713:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // UniversalPrintArray(begin, len, os) prints an array of 'len'
 714:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // elements, starting at address 'begin'.
 715:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 716:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {
 717:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   if (len == 0) {
 718:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << "{}";
 719:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   } else {
 720:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << "{ ";
 721:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const size_t kThreshold = 18;
 722:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const size_t kChunkSize = 8;
 723:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // If the array has more than kThreshold elements, we'll have to
 724:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // omit some details by printing only the first and the last
 725:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // kChunkSize elements.
 726:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // TODO(wan@google.com): let the user control the threshold using a flag.
 727:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     if (len <= kThreshold) {
 728:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       PrintRawArrayTo(begin, len, os);
 729:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     } else {
 730:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       PrintRawArrayTo(begin, kChunkSize, os);
 731:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       *os << ", ..., ";
 732:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       PrintRawArrayTo(begin + len - kChunkSize, kChunkSize, os);
 733:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }
 734:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << " }";
 735:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 736:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 737:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // This overload prints a (const) char array compactly.
 738:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void UniversalPrintArray(
 739:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const char* begin, size_t len, ::std::ostream* os);
 740:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 741:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // This overload prints a (const) wchar_t array compactly.
 742:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** GTEST_API_ void UniversalPrintArray(
 743:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const wchar_t* begin, size_t len, ::std::ostream* os);
 744:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 745:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Implements printing an array type T[N].
 746:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T, size_t N>
 747:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalPrinter<T[N]> {
 748:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 749:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Prints the given array, omitting some elements when there are too
 750:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // many.
 751:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const T (&a)[N], ::std::ostream* os) {
 752:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrintArray(a, N, os);
 753:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 754:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 755:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 756:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Implements printing a reference type T&.
 757:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 758:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalPrinter<T&> {
 759:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 760:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // MSVC warns about adding const to a function type, so we want to
 761:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // disable the warning.
 762:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   GTEST_DISABLE_MSC_WARNINGS_PUSH_(4180)
 763:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 764:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const T& value, ::std::ostream* os) {
 765:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // Prints the address of the value.  We use reinterpret_cast here
 766:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // as static_cast doesn't compile when T is a function type.
 767:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << "@" << reinterpret_cast<const void*>(&value) << " ";
 768:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 769:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // Then prints the value itself.
 770:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(value, os);
 771:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 772:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 773:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   GTEST_DISABLE_MSC_WARNINGS_POP_()
 774:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 775:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 776:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints a value tersely: for a reference type, the referenced value
 777:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // (but not the address) is printed; for a (const) char pointer, the
 778:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // NUL-terminated string (but not the pointer) is printed.
 779:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 780:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 781:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalTersePrinter {
 782:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 783:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const T& value, ::std::ostream* os) {
 784:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(value, os);
 785:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 786:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 787:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 788:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalTersePrinter<T&> {
 789:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 790:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const T& value, ::std::ostream* os) {
 791:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(value, os);
 792:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 793:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 794:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T, size_t N>
 795:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalTersePrinter<T[N]> {
 796:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 797:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const T (&value)[N], ::std::ostream* os) {
 798:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrinter<T[N]>::Print(value, os);
 799:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 800:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 801:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <>
 802:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalTersePrinter<const char*> {
 803:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 804:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const char* str, ::std::ostream* os) {
 805:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     if (str == NULL) {
 806:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       *os << "NULL";
 807:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     } else {
 808:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       UniversalPrint(string(str), os);
 809:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }
 810:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 811:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 812:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <>
 813:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalTersePrinter<char*> {
 814:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 815:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(char* str, ::std::ostream* os) {
 816:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalTersePrinter<const char*>::Print(str, os);
 817:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 818:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 819:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 820:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_STD_WSTRING
 821:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <>
 822:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalTersePrinter<const wchar_t*> {
 823:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 824:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(const wchar_t* str, ::std::ostream* os) {
 825:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     if (str == NULL) {
 826:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       *os << "NULL";
 827:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     } else {
 828:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       UniversalPrint(::std::wstring(str), os);
 829:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }
 830:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 831:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 832:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif
 833:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 834:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <>
 835:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** class UniversalTersePrinter<wchar_t*> {
 836:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****  public:
 837:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void Print(wchar_t* str, ::std::ostream* os) {
 838:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalTersePrinter<const wchar_t*>::Print(str, os);
 839:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 840:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 841:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 842:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 843:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void UniversalTersePrint(const T& value, ::std::ostream* os) {
 844:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   UniversalTersePrinter<T>::Print(value, os);
 845:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 846:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 847:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints a value using the type inferred by the compiler.  The
 848:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // difference between this and UniversalTersePrint() is that for a
 849:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // (const) char pointer, this prints both the pointer and the
 850:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // NUL-terminated string.
 851:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 852:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void UniversalPrint(const T& value, ::std::ostream* os) {
 853:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // A workarond for the bug in VC++ 7.1 that prevents us from instantiating
 854:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // UniversalPrinter with T directly.
 855:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   typedef T T1;
 856:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   UniversalPrinter<T1>::Print(value, os);
 857:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 858:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 859:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** typedef ::std::vector<string> Strings;
 860:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 861:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // TuplePolicy<TupleT> must provide:
 862:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // - tuple_size
 863:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //     size of tuple TupleT.
 864:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // - get<size_t I>(const TupleT& t)
 865:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //     static function extracting element I of tuple TupleT.
 866:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // - tuple_element<size_t I>::type
 867:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //     type of element I of tuple TupleT.
 868:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename TupleT>
 869:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** struct TuplePolicy;
 870:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 871:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_TR1_TUPLE
 872:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename TupleT>
 873:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** struct TuplePolicy {
 874:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   typedef TupleT Tuple;
 875:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static const size_t tuple_size = ::std::tr1::tuple_size<Tuple>::value;
 876:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 877:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <size_t I>
 878:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   struct tuple_element : ::std::tr1::tuple_element<I, Tuple> {};
 879:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 880:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <size_t I>
 881:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static typename AddReference<
 882:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       const typename ::std::tr1::tuple_element<I, Tuple>::type>::type get(
 883:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       const Tuple& tuple) {
 884:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return ::std::tr1::get<I>(tuple);
 885:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 886:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 887:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename TupleT>
 888:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** const size_t TuplePolicy<TupleT>::tuple_size;
 889:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_TR1_TUPLE
 890:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 891:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_STD_TUPLE_
 892:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename... Types>
 893:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** struct TuplePolicy< ::std::tuple<Types...> > {
 894:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   typedef ::std::tuple<Types...> Tuple;
 895:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static const size_t tuple_size = ::std::tuple_size<Tuple>::value;
 896:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 897:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <size_t I>
 898:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   struct tuple_element : ::std::tuple_element<I, Tuple> {};
 899:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 900:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <size_t I>
 901:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static const typename ::std::tuple_element<I, Tuple>::type& get(
 902:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       const Tuple& tuple) {
 903:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return ::std::get<I>(tuple);
 904:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 905:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 906:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename... Types>
 907:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** const size_t TuplePolicy< ::std::tuple<Types...> >::tuple_size;
 908:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_STD_TUPLE_
 909:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 910:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #if GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
 911:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // This helper template allows PrintTo() for tuples and
 912:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // UniversalTersePrintTupleFieldsToStrings() to be defined by
 913:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // induction on the number of tuple fields.  The idea is that
 914:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // TuplePrefixPrinter<N>::PrintPrefixTo(t, os) prints the first N
 915:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // fields in tuple t, and can be defined in terms of
 916:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // TuplePrefixPrinter<N - 1>.
 917:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** //
 918:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // The inductive case.
 919:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <size_t N>
 920:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** struct TuplePrefixPrinter {
 921:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Prints the first N fields of a tuple.
 922:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <typename Tuple>
 923:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {
 924:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     TuplePrefixPrinter<N - 1>::PrintPrefixTo(t, os);
 925:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     GTEST_INTENTIONAL_CONST_COND_PUSH_()
 926:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     if (N > 1) {
 927:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     GTEST_INTENTIONAL_CONST_COND_POP_()
 928:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       *os << ", ";
 929:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     }
 930:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrinter<
 931:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****         typename TuplePolicy<Tuple>::template tuple_element<N - 1>::type>
 932:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****         ::Print(TuplePolicy<Tuple>::template get<N - 1>(t), os);
 933:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 934:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 935:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // Tersely prints the first N fields of a tuple to a string vector,
 936:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // one element for each field.
 937:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <typename Tuple>
 938:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {
 939:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     TuplePrefixPrinter<N - 1>::TersePrintPrefixToStrings(t, strings);
 940:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     ::std::stringstream ss;
 941:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalTersePrint(TuplePolicy<Tuple>::template get<N - 1>(t), &ss);
 942:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     strings->push_back(ss.str());
 943:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   }
 944:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 945:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 946:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Base case.
 947:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <>
 948:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** struct TuplePrefixPrinter<0> {
 949:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <typename Tuple>
 950:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}
 951:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 952:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   template <typename Tuple>
 953:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}
 954:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** };
 955:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 956:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Helper function for printing a tuple.
 957:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Tuple must be either std::tr1::tuple or std::tuple type.
 958:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename Tuple>
 959:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** void PrintTupleTo(const Tuple& t, ::std::ostream* os) {
 960:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << "(";
 961:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   TuplePrefixPrinter<TuplePolicy<Tuple>::tuple_size>::PrintPrefixTo(t, os);
 962:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   *os << ")";
 963:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 964:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 965:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // Prints the fields of a tuple tersely to a string vector, one
 966:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // element for each field.  See the comment before
 967:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** // UniversalTersePrint() for how we define "tersely".
 968:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename Tuple>
 969:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {
 970:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   Strings result;
 971:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   TuplePrefixPrinter<TuplePolicy<Tuple>::tuple_size>::
 972:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       TersePrintPrefixToStrings(value, &result);
 973:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   return result;
 974:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 975:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** #endif  // GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
 976:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 977:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }  // namespace internal
 978:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** 
 979:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** template <typename T>
 980:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** ::std::string PrintToString(const T& value) {
 981:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   ::std::stringstream ss;
 2272              		.loc 11 981 23 view .LVU469
 2273 0021 488D6C24 		leaq	96(%rsp), %rbp
 2273      60
 2274 0026 4889EF   		movq	%rbp, %rdi
 2275              	.LBE1401:
 2276              	.LBE1400:
 2277              	.LBE1399:
 2278              	.LBE1398:
 2279              		.loc 1 1375 17 view .LVU470
 2280 0029 64488B04 		movq	%fs:40, %rax
 2280      25280000 
 2280      00
 2281 0032 48898424 		movq	%rax, 488(%rsp)
 2281      E8010000 
 2282 003a 31C0     		xorl	%eax, %eax
 2283              	.LVL163:
 2284              	.LBB1427:
 2285              	.LBI1398:
 349:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const T1& value, const T2& /* other_operand */) {
 2286              		.loc 11 349 13 is_stmt 1 view .LVU471
 2287              	.LBB1426:
 2288              	.LBI1399:
 275:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return ::testing::PrintToString(value);
 2289              		.loc 11 275 24 view .LVU472
 2290              	.LBB1425:
 2291              	.LBI1400:
 980:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   ::std::stringstream ss;
 2292              		.loc 11 980 15 view .LVU473
 2293              	.LBB1424:
 2294              		.loc 11 981 23 is_stmt 0 view .LVU474
 2295 003c E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@PLT
 2295      00
 2296              	.LVL164:
 2297              	.LBB1402:
 2298              	.LBI1402:
 783:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(value, os);
 2299              		.loc 11 783 15 is_stmt 1 view .LVU475
 2300              	.LBB1403:
 2301              	.LBI1403:
 852:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // A workarond for the bug in VC++ 7.1 that prevents us from instantiating
 2302              		.loc 11 852 6 view .LVU476
 2303              	.LBB1404:
 2304              	.LBB1405:
 2305              	.LBI1405:
 698:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // By default, ::testing::internal::PrintTo() is used for printing
 2306              		.loc 11 698 15 view .LVU477
 2307              	.LBB1406:
 2308              	.LBI1406:
 454:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // DefaultPrintTo() is overloaded.  The type of its first two
 2309              		.loc 11 454 6 view .LVU478
 2310              	.LBB1407:
 2311              	.LBI1407:
 436:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     false_type /* is not a pointer */,
 2312              		.loc 11 436 6 view .LVU479
 2313              	.LBB1408:
 2314              	.LBB1409:
 2315              	.LBI1409:
 222:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // With the following statement, during unqualified name lookup,
 2316              		.loc 11 222 6 view .LVU480
 2317              	.LBB1410:
 249:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 2318              		.loc 11 249 7 is_stmt 0 view .LVU481
 2319 0041 4C8D4C24 		leaq	112(%rsp), %r9
 2319      70
 2320 0046 418B7500 		movl	0(%r13), %esi
 2321              	.LBE1410:
 2322              	.LBE1409:
 2323              	.LBE1408:
 2324              	.LBE1407:
 2325              	.LBE1406:
 2326              	.LBE1405:
 2327              	.LBE1404:
 2328              	.LBE1403:
 2329              	.LBE1402:
 2330              	.LBB1419:
 2331              	.LBB1420:
 2332              		.file 12 "/usr/include/c++/11.1.0/sstream"
   1:/usr/include/c++/11.1.0/sstream **** // String based streams -*- C++ -*-
   2:/usr/include/c++/11.1.0/sstream **** 
   3:/usr/include/c++/11.1.0/sstream **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/sstream **** //
   5:/usr/include/c++/11.1.0/sstream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/sstream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/sstream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/sstream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/sstream **** // any later version.
  10:/usr/include/c++/11.1.0/sstream **** 
  11:/usr/include/c++/11.1.0/sstream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/sstream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/sstream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/sstream **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/sstream **** 
  16:/usr/include/c++/11.1.0/sstream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/sstream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/sstream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/sstream **** 
  20:/usr/include/c++/11.1.0/sstream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/sstream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/sstream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/sstream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/sstream **** 
  25:/usr/include/c++/11.1.0/sstream **** /** @file include/sstream
  26:/usr/include/c++/11.1.0/sstream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/11.1.0/sstream ****  */
  28:/usr/include/c++/11.1.0/sstream **** 
  29:/usr/include/c++/11.1.0/sstream **** //
  30:/usr/include/c++/11.1.0/sstream **** // ISO C++ 14882: 27.7  String-based streams
  31:/usr/include/c++/11.1.0/sstream **** //
  32:/usr/include/c++/11.1.0/sstream **** 
  33:/usr/include/c++/11.1.0/sstream **** #ifndef _GLIBCXX_SSTREAM
  34:/usr/include/c++/11.1.0/sstream **** #define _GLIBCXX_SSTREAM 1
  35:/usr/include/c++/11.1.0/sstream **** 
  36:/usr/include/c++/11.1.0/sstream **** #pragma GCC system_header
  37:/usr/include/c++/11.1.0/sstream **** 
  38:/usr/include/c++/11.1.0/sstream **** #include <istream>
  39:/usr/include/c++/11.1.0/sstream **** #include <ostream>
  40:/usr/include/c++/11.1.0/sstream **** #include <bits/alloc_traits.h> // allocator_traits, __allocator_like
  41:/usr/include/c++/11.1.0/sstream **** 
  42:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
  43:/usr/include/c++/11.1.0/sstream **** # define _GLIBCXX_LVAL_REF_QUAL &
  44:/usr/include/c++/11.1.0/sstream **** #else
  45:/usr/include/c++/11.1.0/sstream **** # define _GLIBCXX_LVAL_REF_QUAL
  46:/usr/include/c++/11.1.0/sstream **** #endif
  47:/usr/include/c++/11.1.0/sstream **** 
  48:/usr/include/c++/11.1.0/sstream **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/usr/include/c++/11.1.0/sstream **** {
  50:/usr/include/c++/11.1.0/sstream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/usr/include/c++/11.1.0/sstream **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  52:/usr/include/c++/11.1.0/sstream **** 
  53:/usr/include/c++/11.1.0/sstream ****   // [27.7.1] template class basic_stringbuf
  54:/usr/include/c++/11.1.0/sstream ****   /**
  55:/usr/include/c++/11.1.0/sstream ****    *  @brief  The actual work of input and output (for std::string).
  56:/usr/include/c++/11.1.0/sstream ****    *  @ingroup io
  57:/usr/include/c++/11.1.0/sstream ****    *
  58:/usr/include/c++/11.1.0/sstream ****    *  @tparam _CharT  Type of character stream.
  59:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
  60:/usr/include/c++/11.1.0/sstream ****    *                   char_traits<_CharT>.
  61:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  62:/usr/include/c++/11.1.0/sstream ****    *
  63:/usr/include/c++/11.1.0/sstream ****    *  This class associates either or both of its input and output sequences
  64:/usr/include/c++/11.1.0/sstream ****    *  with a sequence of characters, which can be initialized from, or made
  65:/usr/include/c++/11.1.0/sstream ****    *  available as, a @c std::basic_string.  (Paraphrased from [27.7.1]/1.)
  66:/usr/include/c++/11.1.0/sstream ****    *
  67:/usr/include/c++/11.1.0/sstream ****    *  For this class, open modes (of type @c ios_base::openmode) have
  68:/usr/include/c++/11.1.0/sstream ****    *  @c in set if the input sequence can be read, and @c out set if the
  69:/usr/include/c++/11.1.0/sstream ****    *  output sequence can be written.
  70:/usr/include/c++/11.1.0/sstream ****   */
  71:/usr/include/c++/11.1.0/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
  72:/usr/include/c++/11.1.0/sstream ****     class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
  73:/usr/include/c++/11.1.0/sstream ****     {
  74:/usr/include/c++/11.1.0/sstream ****       struct __xfer_bufptrs;
  75:/usr/include/c++/11.1.0/sstream **** 
  76:/usr/include/c++/11.1.0/sstream **** #if __cplusplus >= 201103L
  77:/usr/include/c++/11.1.0/sstream ****       using allocator_traits = std::allocator_traits<_Alloc>;
  78:/usr/include/c++/11.1.0/sstream ****       using _Noexcept_swap
  79:/usr/include/c++/11.1.0/sstream **** 	= __or_<typename allocator_traits::propagate_on_container_swap,
  80:/usr/include/c++/11.1.0/sstream **** 		typename allocator_traits::is_always_equal>;
  81:/usr/include/c++/11.1.0/sstream **** #endif
  82:/usr/include/c++/11.1.0/sstream **** 
  83:/usr/include/c++/11.1.0/sstream ****     public:
  84:/usr/include/c++/11.1.0/sstream ****       // Types:
  85:/usr/include/c++/11.1.0/sstream ****       typedef _CharT 					char_type;
  86:/usr/include/c++/11.1.0/sstream ****       typedef _Traits 					traits_type;
  87:/usr/include/c++/11.1.0/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  88:/usr/include/c++/11.1.0/sstream ****       // 251. basic_stringbuf missing allocator_type
  89:/usr/include/c++/11.1.0/sstream ****       typedef _Alloc				       	allocator_type;
  90:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::int_type 		int_type;
  91:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::pos_type 		pos_type;
  92:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::off_type 		off_type;
  93:/usr/include/c++/11.1.0/sstream **** 
  94:/usr/include/c++/11.1.0/sstream ****       typedef basic_streambuf<char_type, traits_type>  	__streambuf_type;
  95:/usr/include/c++/11.1.0/sstream ****       typedef basic_string<char_type, _Traits, _Alloc> 	__string_type;
  96:/usr/include/c++/11.1.0/sstream ****       typedef typename __string_type::size_type		__size_type;
  97:/usr/include/c++/11.1.0/sstream **** 
  98:/usr/include/c++/11.1.0/sstream ****     protected:
  99:/usr/include/c++/11.1.0/sstream ****       /// Place to stash in || out || in | out settings for current stringbuf.
 100:/usr/include/c++/11.1.0/sstream ****       ios_base::openmode 	_M_mode;
 101:/usr/include/c++/11.1.0/sstream **** 
 102:/usr/include/c++/11.1.0/sstream ****       // Data Members:
 103:/usr/include/c++/11.1.0/sstream ****       __string_type 		_M_string;
 104:/usr/include/c++/11.1.0/sstream **** 
 105:/usr/include/c++/11.1.0/sstream ****     public:
 106:/usr/include/c++/11.1.0/sstream ****       // Constructors:
 107:/usr/include/c++/11.1.0/sstream **** 
 108:/usr/include/c++/11.1.0/sstream ****       /**
 109:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an empty string buffer.
 110:/usr/include/c++/11.1.0/sstream ****        *
 111:/usr/include/c++/11.1.0/sstream ****        *  The default constructor initializes the parent class using its
 112:/usr/include/c++/11.1.0/sstream ****        *  own default ctor.
 113:/usr/include/c++/11.1.0/sstream ****       */
 114:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf()
 115:/usr/include/c++/11.1.0/sstream ****       : __streambuf_type(), _M_mode(ios_base::in | ios_base::out), _M_string()
 116:/usr/include/c++/11.1.0/sstream ****       { }
 117:/usr/include/c++/11.1.0/sstream **** 
 118:/usr/include/c++/11.1.0/sstream ****       /**
 119:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an empty string buffer.
 120:/usr/include/c++/11.1.0/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 121:/usr/include/c++/11.1.0/sstream ****        *
 122:/usr/include/c++/11.1.0/sstream ****        *  The default constructor initializes the parent class using its
 123:/usr/include/c++/11.1.0/sstream ****        *  own default ctor.
 124:/usr/include/c++/11.1.0/sstream ****       */
 125:/usr/include/c++/11.1.0/sstream ****       explicit
 126:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(ios_base::openmode __mode)
 127:/usr/include/c++/11.1.0/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string()
 128:/usr/include/c++/11.1.0/sstream ****       { }
 129:/usr/include/c++/11.1.0/sstream **** 
 130:/usr/include/c++/11.1.0/sstream ****       /**
 131:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an existing string buffer.
 132:/usr/include/c++/11.1.0/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 133:/usr/include/c++/11.1.0/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 134:/usr/include/c++/11.1.0/sstream ****        *
 135:/usr/include/c++/11.1.0/sstream ****        *  This constructor initializes the parent class using its
 136:/usr/include/c++/11.1.0/sstream ****        *  own default ctor.
 137:/usr/include/c++/11.1.0/sstream ****       */
 138:/usr/include/c++/11.1.0/sstream ****       explicit
 139:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(const __string_type& __str,
 140:/usr/include/c++/11.1.0/sstream **** 		      ios_base::openmode __mode = ios_base::in | ios_base::out)
 141:/usr/include/c++/11.1.0/sstream ****       : __streambuf_type(), _M_mode(),
 142:/usr/include/c++/11.1.0/sstream **** 	_M_string(__str.data(), __str.size(), __str.get_allocator())
 143:/usr/include/c++/11.1.0/sstream ****       { _M_stringbuf_init(__mode); }
 144:/usr/include/c++/11.1.0/sstream **** 
 145:/usr/include/c++/11.1.0/sstream **** #if __cplusplus >= 201103L
 146:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(const basic_stringbuf&) = delete;
 147:/usr/include/c++/11.1.0/sstream **** 
 148:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs)
 149:/usr/include/c++/11.1.0/sstream ****       : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
 150:/usr/include/c++/11.1.0/sstream ****       { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }
 151:/usr/include/c++/11.1.0/sstream **** 
 152:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 153:/usr/include/c++/11.1.0/sstream ****       explicit
 154:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(const allocator_type& __a)
 155:/usr/include/c++/11.1.0/sstream ****       : basic_stringbuf(ios_base::in | std::ios_base::out, __a)
 156:/usr/include/c++/11.1.0/sstream ****       { }
 157:/usr/include/c++/11.1.0/sstream **** 
 158:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(ios_base::openmode __mode,
 159:/usr/include/c++/11.1.0/sstream **** 		      const allocator_type& __a)
 160:/usr/include/c++/11.1.0/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string(__a)
 161:/usr/include/c++/11.1.0/sstream ****       { }
 162:/usr/include/c++/11.1.0/sstream **** 
 163:/usr/include/c++/11.1.0/sstream ****       explicit
 164:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(__string_type&& __s,
 165:/usr/include/c++/11.1.0/sstream **** 		      ios_base::openmode __mode = ios_base::in
 166:/usr/include/c++/11.1.0/sstream **** 						  | ios_base::out)
 167:/usr/include/c++/11.1.0/sstream ****       : __streambuf_type(), _M_mode(__mode), _M_string(std::move(__s))
 168:/usr/include/c++/11.1.0/sstream ****       { _M_stringbuf_init(__mode); }
 169:/usr/include/c++/11.1.0/sstream **** 
 170:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 171:/usr/include/c++/11.1.0/sstream **** 	basic_stringbuf(const basic_string<_CharT, _Traits, _SAlloc>& __s,
 172:/usr/include/c++/11.1.0/sstream **** 			const allocator_type& __a)
 173:/usr/include/c++/11.1.0/sstream **** 	: basic_stringbuf(__s, ios_base::in | std::ios_base::out, __a)
 174:/usr/include/c++/11.1.0/sstream **** 	{ }
 175:/usr/include/c++/11.1.0/sstream **** 
 176:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 177:/usr/include/c++/11.1.0/sstream **** 	basic_stringbuf(const basic_string<_CharT, _Traits, _SAlloc>& __s,
 178:/usr/include/c++/11.1.0/sstream **** 			ios_base::openmode __mode,
 179:/usr/include/c++/11.1.0/sstream **** 			const allocator_type& __a)
 180:/usr/include/c++/11.1.0/sstream **** 	: __streambuf_type(), _M_mode(__mode),
 181:/usr/include/c++/11.1.0/sstream **** 	  _M_string(__s.data(), __s.size(), __a)
 182:/usr/include/c++/11.1.0/sstream **** 	{ _M_stringbuf_init(__mode); }
 183:/usr/include/c++/11.1.0/sstream **** 
 184:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 185:/usr/include/c++/11.1.0/sstream **** 	explicit
 186:/usr/include/c++/11.1.0/sstream **** 	basic_stringbuf(const basic_string<_CharT, _Traits, _SAlloc>& __s,
 187:/usr/include/c++/11.1.0/sstream **** 			ios_base::openmode __mode = ios_base::in
 188:/usr/include/c++/11.1.0/sstream **** 						    | ios_base::out)
 189:/usr/include/c++/11.1.0/sstream **** 	: basic_stringbuf(__s, __mode, allocator_type{})
 190:/usr/include/c++/11.1.0/sstream **** 	{ }
 191:/usr/include/c++/11.1.0/sstream **** 
 192:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs, const allocator_type& __a)
 193:/usr/include/c++/11.1.0/sstream ****       : basic_stringbuf(std::move(__rhs), __a, __xfer_bufptrs(__rhs, this))
 194:/usr/include/c++/11.1.0/sstream ****       { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }
 195:/usr/include/c++/11.1.0/sstream **** 
 196:/usr/include/c++/11.1.0/sstream ****       allocator_type get_allocator() const noexcept
 197:/usr/include/c++/11.1.0/sstream ****       { return _M_string.get_allocator(); }
 198:/usr/include/c++/11.1.0/sstream **** #endif // C++20
 199:/usr/include/c++/11.1.0/sstream **** 
 200:/usr/include/c++/11.1.0/sstream ****       // 27.8.2.2 Assign and swap:
 201:/usr/include/c++/11.1.0/sstream **** 
 202:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf&
 203:/usr/include/c++/11.1.0/sstream ****       operator=(const basic_stringbuf&) = delete;
 204:/usr/include/c++/11.1.0/sstream **** 
 205:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf&
 206:/usr/include/c++/11.1.0/sstream ****       operator=(basic_stringbuf&& __rhs)
 207:/usr/include/c++/11.1.0/sstream ****       {
 208:/usr/include/c++/11.1.0/sstream **** 	__xfer_bufptrs __st{__rhs, this};
 209:/usr/include/c++/11.1.0/sstream **** 	const __streambuf_type& __base = __rhs;
 210:/usr/include/c++/11.1.0/sstream **** 	__streambuf_type::operator=(__base);
 211:/usr/include/c++/11.1.0/sstream **** 	this->pubimbue(__rhs.getloc());
 212:/usr/include/c++/11.1.0/sstream **** 	_M_mode = __rhs._M_mode;
 213:/usr/include/c++/11.1.0/sstream **** 	_M_string = std::move(__rhs._M_string);
 214:/usr/include/c++/11.1.0/sstream **** 	__rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 215:/usr/include/c++/11.1.0/sstream **** 	return *this;
 216:/usr/include/c++/11.1.0/sstream ****       }
 217:/usr/include/c++/11.1.0/sstream **** 
 218:/usr/include/c++/11.1.0/sstream ****       void
 219:/usr/include/c++/11.1.0/sstream ****       swap(basic_stringbuf& __rhs) noexcept(_Noexcept_swap::value)
 220:/usr/include/c++/11.1.0/sstream ****       {
 221:/usr/include/c++/11.1.0/sstream **** 	__xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 222:/usr/include/c++/11.1.0/sstream **** 	__xfer_bufptrs __r_st{__rhs, this};
 223:/usr/include/c++/11.1.0/sstream **** 	__streambuf_type& __base = __rhs;
 224:/usr/include/c++/11.1.0/sstream **** 	__streambuf_type::swap(__base);
 225:/usr/include/c++/11.1.0/sstream **** 	__rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 226:/usr/include/c++/11.1.0/sstream **** 	std::swap(_M_mode, __rhs._M_mode);
 227:/usr/include/c++/11.1.0/sstream **** 	std::swap(_M_string, __rhs._M_string); // XXX not exception safe
 228:/usr/include/c++/11.1.0/sstream ****       }
 229:/usr/include/c++/11.1.0/sstream **** #endif // C++11
 230:/usr/include/c++/11.1.0/sstream **** 
 231:/usr/include/c++/11.1.0/sstream ****       // Getters and setters:
 232:/usr/include/c++/11.1.0/sstream **** 
 233:/usr/include/c++/11.1.0/sstream ****       /**
 234:/usr/include/c++/11.1.0/sstream ****        *  @brief  Copying out the string buffer.
 235:/usr/include/c++/11.1.0/sstream ****        *  @return  A copy of one of the underlying sequences.
 236:/usr/include/c++/11.1.0/sstream ****        *
 237:/usr/include/c++/11.1.0/sstream ****        *  <em>If the buffer is only created in input mode, the underlying
 238:/usr/include/c++/11.1.0/sstream ****        *  character sequence is equal to the input sequence; otherwise, it
 239:/usr/include/c++/11.1.0/sstream ****        *  is equal to the output sequence.</em> [27.7.1.2]/1
 240:/usr/include/c++/11.1.0/sstream ****       */
 241:/usr/include/c++/11.1.0/sstream ****       __string_type
 242:/usr/include/c++/11.1.0/sstream ****       str() const _GLIBCXX_LVAL_REF_QUAL
 243:/usr/include/c++/11.1.0/sstream ****       {
 244:/usr/include/c++/11.1.0/sstream **** 	__string_type __ret(_M_string.get_allocator());
 245:/usr/include/c++/11.1.0/sstream **** 	if (char_type* __hi = _M_high_mark())
 246:/usr/include/c++/11.1.0/sstream **** 	  __ret.assign(this->pbase(), __hi);
 247:/usr/include/c++/11.1.0/sstream **** 	else
 248:/usr/include/c++/11.1.0/sstream **** 	  __ret = _M_string;
 249:/usr/include/c++/11.1.0/sstream **** 	return __ret;
 250:/usr/include/c++/11.1.0/sstream ****       }
 251:/usr/include/c++/11.1.0/sstream **** 
 252:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 253:/usr/include/c++/11.1.0/sstream **** #if __cpp_concepts
 254:/usr/include/c++/11.1.0/sstream ****       template<__allocator_like _SAlloc>
 255:/usr/include/c++/11.1.0/sstream **** 	basic_string<_CharT, _Traits, _SAlloc>
 256:/usr/include/c++/11.1.0/sstream **** 	str(const _SAlloc& __sa) const
 257:/usr/include/c++/11.1.0/sstream **** 	{
 258:/usr/include/c++/11.1.0/sstream **** 	  auto __sv = view();
 259:/usr/include/c++/11.1.0/sstream **** 	  return { __sv.data(), __sv.size(), __sa };
 260:/usr/include/c++/11.1.0/sstream **** 	}
 261:/usr/include/c++/11.1.0/sstream **** #endif
 262:/usr/include/c++/11.1.0/sstream **** 
 263:/usr/include/c++/11.1.0/sstream ****       __string_type
 264:/usr/include/c++/11.1.0/sstream ****       str() &&
 265:/usr/include/c++/11.1.0/sstream ****       {
 266:/usr/include/c++/11.1.0/sstream **** 	if (char_type* __hi = _M_high_mark())
 267:/usr/include/c++/11.1.0/sstream **** 	  {
 268:/usr/include/c++/11.1.0/sstream **** 	    // Set length to end of character sequence and add null terminator.
 269:/usr/include/c++/11.1.0/sstream **** 	    _M_string._M_set_length(_M_high_mark() - this->pbase());
 270:/usr/include/c++/11.1.0/sstream **** 	  }
 271:/usr/include/c++/11.1.0/sstream **** 	auto __str = std::move(_M_string);
 272:/usr/include/c++/11.1.0/sstream **** 	_M_string.clear();
 273:/usr/include/c++/11.1.0/sstream **** 	_M_sync(_M_string.data(), 0, 0);
 274:/usr/include/c++/11.1.0/sstream **** 	return __str;
 275:/usr/include/c++/11.1.0/sstream ****       }
 276:/usr/include/c++/11.1.0/sstream **** 
 277:/usr/include/c++/11.1.0/sstream ****       basic_string_view<char_type, traits_type>
 278:/usr/include/c++/11.1.0/sstream ****       view() const noexcept
 279:/usr/include/c++/11.1.0/sstream ****       {
 280:/usr/include/c++/11.1.0/sstream **** 	if (char_type* __hi = _M_high_mark())
 281:/usr/include/c++/11.1.0/sstream **** 	  return { this->pbase(), __hi };
 282:/usr/include/c++/11.1.0/sstream **** 	else
 283:/usr/include/c++/11.1.0/sstream **** 	  return _M_string;
 284:/usr/include/c++/11.1.0/sstream ****       }
 285:/usr/include/c++/11.1.0/sstream **** #endif // C++20
 286:/usr/include/c++/11.1.0/sstream **** 
 287:/usr/include/c++/11.1.0/sstream ****       /**
 288:/usr/include/c++/11.1.0/sstream ****        *  @brief  Setting a new buffer.
 289:/usr/include/c++/11.1.0/sstream ****        *  @param  __s  The string to use as a new sequence.
 290:/usr/include/c++/11.1.0/sstream ****        *
 291:/usr/include/c++/11.1.0/sstream ****        *  Deallocates any previous stored sequence, then copies @a s to
 292:/usr/include/c++/11.1.0/sstream ****        *  use as a new one.
 293:/usr/include/c++/11.1.0/sstream ****       */
 294:/usr/include/c++/11.1.0/sstream ****       void
 295:/usr/include/c++/11.1.0/sstream ****       str(const __string_type& __s)
 296:/usr/include/c++/11.1.0/sstream ****       {
 297:/usr/include/c++/11.1.0/sstream **** 	// Cannot use _M_string = __s, since v3 strings are COW
 298:/usr/include/c++/11.1.0/sstream **** 	// (not always true now but assign() always works).
 299:/usr/include/c++/11.1.0/sstream **** 	_M_string.assign(__s.data(), __s.size());
 300:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf_init(_M_mode);
 301:/usr/include/c++/11.1.0/sstream ****       }
 302:/usr/include/c++/11.1.0/sstream **** 
 303:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 304:/usr/include/c++/11.1.0/sstream **** #if __cpp_concepts
 305:/usr/include/c++/11.1.0/sstream ****       template<__allocator_like _SAlloc>
 306:/usr/include/c++/11.1.0/sstream **** 	requires (!is_same_v<_SAlloc, _Alloc>)
 307:/usr/include/c++/11.1.0/sstream **** 	void
 308:/usr/include/c++/11.1.0/sstream **** 	str(const basic_string<_CharT, _Traits, _SAlloc>& __s)
 309:/usr/include/c++/11.1.0/sstream **** 	{
 310:/usr/include/c++/11.1.0/sstream **** 	  _M_string.assign(__s.data(), __s.size());
 311:/usr/include/c++/11.1.0/sstream **** 	  _M_stringbuf_init(_M_mode);
 312:/usr/include/c++/11.1.0/sstream **** 	}
 313:/usr/include/c++/11.1.0/sstream **** #endif
 314:/usr/include/c++/11.1.0/sstream **** 
 315:/usr/include/c++/11.1.0/sstream ****       void
 316:/usr/include/c++/11.1.0/sstream ****       str(__string_type&& __s)
 317:/usr/include/c++/11.1.0/sstream ****       {
 318:/usr/include/c++/11.1.0/sstream **** 	_M_string = std::move(__s);
 319:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf_init(_M_mode);
 320:/usr/include/c++/11.1.0/sstream ****       }
 321:/usr/include/c++/11.1.0/sstream **** #endif
 322:/usr/include/c++/11.1.0/sstream **** 
 323:/usr/include/c++/11.1.0/sstream ****     protected:
 324:/usr/include/c++/11.1.0/sstream ****       // Common initialization code goes here.
 325:/usr/include/c++/11.1.0/sstream ****       void
 326:/usr/include/c++/11.1.0/sstream ****       _M_stringbuf_init(ios_base::openmode __mode)
 327:/usr/include/c++/11.1.0/sstream ****       {
 328:/usr/include/c++/11.1.0/sstream **** 	_M_mode = __mode;
 329:/usr/include/c++/11.1.0/sstream **** 	__size_type __len = 0;
 330:/usr/include/c++/11.1.0/sstream **** 	if (_M_mode & (ios_base::ate | ios_base::app))
 331:/usr/include/c++/11.1.0/sstream **** 	  __len = _M_string.size();
 332:/usr/include/c++/11.1.0/sstream **** 	_M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
 333:/usr/include/c++/11.1.0/sstream ****       }
 334:/usr/include/c++/11.1.0/sstream **** 
 335:/usr/include/c++/11.1.0/sstream ****       virtual streamsize
 336:/usr/include/c++/11.1.0/sstream ****       showmanyc()
 337:/usr/include/c++/11.1.0/sstream ****       {
 338:/usr/include/c++/11.1.0/sstream **** 	streamsize __ret = -1;
 339:/usr/include/c++/11.1.0/sstream **** 	if (_M_mode & ios_base::in)
 340:/usr/include/c++/11.1.0/sstream **** 	  {
 341:/usr/include/c++/11.1.0/sstream **** 	    _M_update_egptr();
 342:/usr/include/c++/11.1.0/sstream **** 	    __ret = this->egptr() - this->gptr();
 343:/usr/include/c++/11.1.0/sstream **** 	  }
 344:/usr/include/c++/11.1.0/sstream **** 	return __ret;
 345:/usr/include/c++/11.1.0/sstream ****       }
 346:/usr/include/c++/11.1.0/sstream **** 
 347:/usr/include/c++/11.1.0/sstream ****       virtual int_type
 348:/usr/include/c++/11.1.0/sstream ****       underflow();
 349:/usr/include/c++/11.1.0/sstream **** 
 350:/usr/include/c++/11.1.0/sstream ****       virtual int_type
 351:/usr/include/c++/11.1.0/sstream ****       pbackfail(int_type __c = traits_type::eof());
 352:/usr/include/c++/11.1.0/sstream **** 
 353:/usr/include/c++/11.1.0/sstream ****       virtual int_type
 354:/usr/include/c++/11.1.0/sstream ****       overflow(int_type __c = traits_type::eof());
 355:/usr/include/c++/11.1.0/sstream **** 
 356:/usr/include/c++/11.1.0/sstream ****       /**
 357:/usr/include/c++/11.1.0/sstream ****        *  @brief  Manipulates the buffer.
 358:/usr/include/c++/11.1.0/sstream ****        *  @param  __s  Pointer to a buffer area.
 359:/usr/include/c++/11.1.0/sstream ****        *  @param  __n  Size of @a __s.
 360:/usr/include/c++/11.1.0/sstream ****        *  @return  @c this
 361:/usr/include/c++/11.1.0/sstream ****        *
 362:/usr/include/c++/11.1.0/sstream ****        *  If no buffer has already been created, and both @a __s and @a __n are
 363:/usr/include/c++/11.1.0/sstream ****        *  non-zero, then @c __s is used as a buffer; see
 364:/usr/include/c++/11.1.0/sstream ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
 365:/usr/include/c++/11.1.0/sstream ****        *  for more.
 366:/usr/include/c++/11.1.0/sstream ****       */
 367:/usr/include/c++/11.1.0/sstream ****       virtual __streambuf_type*
 368:/usr/include/c++/11.1.0/sstream ****       setbuf(char_type* __s, streamsize __n)
 369:/usr/include/c++/11.1.0/sstream ****       {
 370:/usr/include/c++/11.1.0/sstream **** 	if (__s && __n >= 0)
 371:/usr/include/c++/11.1.0/sstream **** 	  {
 372:/usr/include/c++/11.1.0/sstream **** 	    // This is implementation-defined behavior, and assumes
 373:/usr/include/c++/11.1.0/sstream **** 	    // that an external char_type array of length __n exists
 374:/usr/include/c++/11.1.0/sstream **** 	    // and has been pre-allocated. If this is not the case,
 375:/usr/include/c++/11.1.0/sstream **** 	    // things will quickly blow up.
 376:/usr/include/c++/11.1.0/sstream **** 
 377:/usr/include/c++/11.1.0/sstream **** 	    // Step 1: Destroy the current internal array.
 378:/usr/include/c++/11.1.0/sstream **** 	    _M_string.clear();
 379:/usr/include/c++/11.1.0/sstream **** 
 380:/usr/include/c++/11.1.0/sstream **** 	    // Step 2: Use the external array.
 381:/usr/include/c++/11.1.0/sstream **** 	    _M_sync(__s, __n, 0);
 382:/usr/include/c++/11.1.0/sstream **** 	  }
 383:/usr/include/c++/11.1.0/sstream **** 	return this;
 384:/usr/include/c++/11.1.0/sstream ****       }
 385:/usr/include/c++/11.1.0/sstream **** 
 386:/usr/include/c++/11.1.0/sstream ****       virtual pos_type
 387:/usr/include/c++/11.1.0/sstream ****       seekoff(off_type __off, ios_base::seekdir __way,
 388:/usr/include/c++/11.1.0/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 389:/usr/include/c++/11.1.0/sstream **** 
 390:/usr/include/c++/11.1.0/sstream ****       virtual pos_type
 391:/usr/include/c++/11.1.0/sstream ****       seekpos(pos_type __sp,
 392:/usr/include/c++/11.1.0/sstream **** 	      ios_base::openmode __mode = ios_base::in | ios_base::out);
 393:/usr/include/c++/11.1.0/sstream **** 
 394:/usr/include/c++/11.1.0/sstream ****       // Internal function for correctly updating the internal buffer
 395:/usr/include/c++/11.1.0/sstream ****       // for a particular _M_string, due to initialization or re-sizing
 396:/usr/include/c++/11.1.0/sstream ****       // of an existing _M_string.
 397:/usr/include/c++/11.1.0/sstream ****       void
 398:/usr/include/c++/11.1.0/sstream ****       _M_sync(char_type* __base, __size_type __i, __size_type __o);
 399:/usr/include/c++/11.1.0/sstream **** 
 400:/usr/include/c++/11.1.0/sstream ****       // Internal function for correctly updating egptr() to the actual
 401:/usr/include/c++/11.1.0/sstream ****       // string end.
 402:/usr/include/c++/11.1.0/sstream ****       void
 403:/usr/include/c++/11.1.0/sstream ****       _M_update_egptr()
 404:/usr/include/c++/11.1.0/sstream ****       {
 405:/usr/include/c++/11.1.0/sstream **** 	if (char_type* __pptr = this->pptr())
 406:/usr/include/c++/11.1.0/sstream **** 	  {
 407:/usr/include/c++/11.1.0/sstream **** 	    char_type* __egptr = this->egptr();
 408:/usr/include/c++/11.1.0/sstream **** 	    if (!__egptr || __pptr > __egptr)
 409:/usr/include/c++/11.1.0/sstream **** 	      {
 410:/usr/include/c++/11.1.0/sstream **** 		if (_M_mode & ios_base::in)
 411:/usr/include/c++/11.1.0/sstream **** 		  this->setg(this->eback(), this->gptr(), __pptr);
 412:/usr/include/c++/11.1.0/sstream **** 		else
 413:/usr/include/c++/11.1.0/sstream **** 		  this->setg(__pptr, __pptr, __pptr);
 414:/usr/include/c++/11.1.0/sstream **** 	      }
 415:/usr/include/c++/11.1.0/sstream **** 	  }
 416:/usr/include/c++/11.1.0/sstream ****       }
 417:/usr/include/c++/11.1.0/sstream **** 
 418:/usr/include/c++/11.1.0/sstream ****       // Works around the issue with pbump, part of the protected
 419:/usr/include/c++/11.1.0/sstream ****       // interface of basic_streambuf, taking just an int.
 420:/usr/include/c++/11.1.0/sstream ****       void
 421:/usr/include/c++/11.1.0/sstream ****       _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
 422:/usr/include/c++/11.1.0/sstream **** 
 423:/usr/include/c++/11.1.0/sstream ****     private:
 424:/usr/include/c++/11.1.0/sstream ****       // Return a pointer to the end of the underlying character sequence.
 425:/usr/include/c++/11.1.0/sstream ****       // This might not be the same character as _M_string.end() because
 426:/usr/include/c++/11.1.0/sstream ****       // basic_stringbuf::overflow might have written to unused capacity
 427:/usr/include/c++/11.1.0/sstream ****       // in _M_string without updating its length.
 428:/usr/include/c++/11.1.0/sstream ****       char_type*
 429:/usr/include/c++/11.1.0/sstream ****       _M_high_mark() const _GLIBCXX_NOEXCEPT
 430:/usr/include/c++/11.1.0/sstream ****       {
 431:/usr/include/c++/11.1.0/sstream **** 	if (char_type* __pptr = this->pptr())
 432:/usr/include/c++/11.1.0/sstream **** 	  {
 433:/usr/include/c++/11.1.0/sstream **** 	    char_type* __egptr = this->egptr();
 434:/usr/include/c++/11.1.0/sstream **** 	    if (!__egptr || __pptr > __egptr)
 435:/usr/include/c++/11.1.0/sstream **** 	      return __pptr;  // Underlying sequence is [pbase, pptr).
 436:/usr/include/c++/11.1.0/sstream **** 	    else
 437:/usr/include/c++/11.1.0/sstream **** 	      return __egptr; // Underlying sequence is [pbase, egptr).
 438:/usr/include/c++/11.1.0/sstream **** 	  }
 439:/usr/include/c++/11.1.0/sstream **** 	return 0; // Underlying character sequence is just _M_string.
 440:/usr/include/c++/11.1.0/sstream ****       }
 441:/usr/include/c++/11.1.0/sstream **** 
 442:/usr/include/c++/11.1.0/sstream **** #if __cplusplus >= 201103L
 443:/usr/include/c++/11.1.0/sstream **** #if _GLIBCXX_USE_CXX11_ABI
 444:/usr/include/c++/11.1.0/sstream ****       // This type captures the state of the gptr / pptr pointers as offsets
 445:/usr/include/c++/11.1.0/sstream ****       // so they can be restored in another object after moving the string.
 446:/usr/include/c++/11.1.0/sstream ****       struct __xfer_bufptrs
 447:/usr/include/c++/11.1.0/sstream ****       {
 448:/usr/include/c++/11.1.0/sstream **** 	__xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 449:/usr/include/c++/11.1.0/sstream **** 	: _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 450:/usr/include/c++/11.1.0/sstream **** 	{
 451:/usr/include/c++/11.1.0/sstream **** 	  const _CharT* const __str = __from._M_string.data();
 452:/usr/include/c++/11.1.0/sstream **** 	  const _CharT* __end = nullptr;
 453:/usr/include/c++/11.1.0/sstream **** 	  if (__from.eback())
 454:/usr/include/c++/11.1.0/sstream **** 	    {
 455:/usr/include/c++/11.1.0/sstream **** 	      _M_goff[0] = __from.eback() - __str;
 456:/usr/include/c++/11.1.0/sstream **** 	      _M_goff[1] = __from.gptr() - __str;
 457:/usr/include/c++/11.1.0/sstream **** 	      _M_goff[2] = __from.egptr() - __str;
 458:/usr/include/c++/11.1.0/sstream **** 	      __end = __from.egptr();
 459:/usr/include/c++/11.1.0/sstream **** 	    }
 460:/usr/include/c++/11.1.0/sstream **** 	  if (__from.pbase())
 461:/usr/include/c++/11.1.0/sstream **** 	    {
 462:/usr/include/c++/11.1.0/sstream **** 	      _M_poff[0] = __from.pbase() - __str;
 463:/usr/include/c++/11.1.0/sstream **** 	      _M_poff[1] = __from.pptr() - __from.pbase();
 464:/usr/include/c++/11.1.0/sstream **** 	      _M_poff[2] = __from.epptr() - __str;
 465:/usr/include/c++/11.1.0/sstream **** 	      if (!__end || __from.pptr() > __end)
 466:/usr/include/c++/11.1.0/sstream **** 		__end = __from.pptr();
 467:/usr/include/c++/11.1.0/sstream **** 	    }
 468:/usr/include/c++/11.1.0/sstream **** 
 469:/usr/include/c++/11.1.0/sstream **** 	  // Set _M_string length to the greater of the get and put areas.
 470:/usr/include/c++/11.1.0/sstream **** 	  if (__end)
 471:/usr/include/c++/11.1.0/sstream **** 	    {
 472:/usr/include/c++/11.1.0/sstream **** 	      // The const_cast avoids changing this constructor's signature,
 473:/usr/include/c++/11.1.0/sstream **** 	      // because it is exported from the dynamic library.
 474:/usr/include/c++/11.1.0/sstream **** 	      auto& __mut_from = const_cast<basic_stringbuf&>(__from);
 475:/usr/include/c++/11.1.0/sstream **** 	      __mut_from._M_string._M_length(__end - __str);
 476:/usr/include/c++/11.1.0/sstream **** 	    }
 477:/usr/include/c++/11.1.0/sstream **** 	}
 478:/usr/include/c++/11.1.0/sstream **** 
 479:/usr/include/c++/11.1.0/sstream **** 	~__xfer_bufptrs()
 480:/usr/include/c++/11.1.0/sstream **** 	{
 481:/usr/include/c++/11.1.0/sstream **** 	  char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
 482:/usr/include/c++/11.1.0/sstream **** 	  if (_M_goff[0] != -1)
 483:/usr/include/c++/11.1.0/sstream **** 	    _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
 484:/usr/include/c++/11.1.0/sstream **** 	  if (_M_poff[0] != -1)
 485:/usr/include/c++/11.1.0/sstream **** 	    _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 486:/usr/include/c++/11.1.0/sstream **** 	}
 487:/usr/include/c++/11.1.0/sstream **** 
 488:/usr/include/c++/11.1.0/sstream **** 	basic_stringbuf* _M_to;
 489:/usr/include/c++/11.1.0/sstream **** 	off_type _M_goff[3];
 490:/usr/include/c++/11.1.0/sstream **** 	off_type _M_poff[3];
 491:/usr/include/c++/11.1.0/sstream ****       };
 492:/usr/include/c++/11.1.0/sstream **** #else
 493:/usr/include/c++/11.1.0/sstream ****       // This type does nothing when using Copy-On-Write strings.
 494:/usr/include/c++/11.1.0/sstream ****       struct __xfer_bufptrs
 495:/usr/include/c++/11.1.0/sstream ****       {
 496:/usr/include/c++/11.1.0/sstream **** 	__xfer_bufptrs(const basic_stringbuf&, basic_stringbuf*) { }
 497:/usr/include/c++/11.1.0/sstream ****       };
 498:/usr/include/c++/11.1.0/sstream **** #endif
 499:/usr/include/c++/11.1.0/sstream **** 
 500:/usr/include/c++/11.1.0/sstream ****       // The move constructor initializes an __xfer_bufptrs temporary then
 501:/usr/include/c++/11.1.0/sstream ****       // delegates to this constructor to performs moves during its lifetime.
 502:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
 503:/usr/include/c++/11.1.0/sstream ****       : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
 504:/usr/include/c++/11.1.0/sstream ****       _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
 505:/usr/include/c++/11.1.0/sstream ****       { }
 506:/usr/include/c++/11.1.0/sstream **** 
 507:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 508:/usr/include/c++/11.1.0/sstream ****       // The move constructor initializes an __xfer_bufptrs temporary then
 509:/usr/include/c++/11.1.0/sstream ****       // delegates to this constructor to performs moves during its lifetime.
 510:/usr/include/c++/11.1.0/sstream ****       basic_stringbuf(basic_stringbuf&& __rhs, const allocator_type& __a,
 511:/usr/include/c++/11.1.0/sstream **** 		      __xfer_bufptrs&&)
 512:/usr/include/c++/11.1.0/sstream ****       : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
 513:/usr/include/c++/11.1.0/sstream ****       _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string), __a)
 514:/usr/include/c++/11.1.0/sstream ****       { }
 515:/usr/include/c++/11.1.0/sstream **** #endif
 516:/usr/include/c++/11.1.0/sstream **** #endif // C++11
 517:/usr/include/c++/11.1.0/sstream ****     };
 518:/usr/include/c++/11.1.0/sstream **** 
 519:/usr/include/c++/11.1.0/sstream **** 
 520:/usr/include/c++/11.1.0/sstream ****   // [27.7.2] Template class basic_istringstream
 521:/usr/include/c++/11.1.0/sstream ****   /**
 522:/usr/include/c++/11.1.0/sstream ****    *  @brief  Controlling input for std::string.
 523:/usr/include/c++/11.1.0/sstream ****    *  @ingroup io
 524:/usr/include/c++/11.1.0/sstream ****    *
 525:/usr/include/c++/11.1.0/sstream ****    *  @tparam _CharT  Type of character stream.
 526:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
 527:/usr/include/c++/11.1.0/sstream ****    *                   char_traits<_CharT>.
 528:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
 529:/usr/include/c++/11.1.0/sstream ****    *
 530:/usr/include/c++/11.1.0/sstream ****    *  This class supports reading from objects of type std::basic_string,
 531:/usr/include/c++/11.1.0/sstream ****    *  using the inherited functions from std::basic_istream.  To control
 532:/usr/include/c++/11.1.0/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 533:/usr/include/c++/11.1.0/sstream ****    *  which this page refers to as @c sb.
 534:/usr/include/c++/11.1.0/sstream ****   */
 535:/usr/include/c++/11.1.0/sstream ****   template<typename _CharT, typename _Traits, typename _Alloc>
 536:/usr/include/c++/11.1.0/sstream ****     class basic_istringstream : public basic_istream<_CharT, _Traits>
 537:/usr/include/c++/11.1.0/sstream ****     {
 538:/usr/include/c++/11.1.0/sstream ****     public:
 539:/usr/include/c++/11.1.0/sstream ****       // Types:
 540:/usr/include/c++/11.1.0/sstream ****       typedef _CharT 					char_type;
 541:/usr/include/c++/11.1.0/sstream ****       typedef _Traits 					traits_type;
 542:/usr/include/c++/11.1.0/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 543:/usr/include/c++/11.1.0/sstream ****       // 251. basic_stringbuf missing allocator_type
 544:/usr/include/c++/11.1.0/sstream ****       typedef _Alloc				       	allocator_type;
 545:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::int_type 		int_type;
 546:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 547:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::off_type 		off_type;
 548:/usr/include/c++/11.1.0/sstream **** 
 549:/usr/include/c++/11.1.0/sstream ****       // Non-standard types:
 550:/usr/include/c++/11.1.0/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 551:/usr/include/c++/11.1.0/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 552:/usr/include/c++/11.1.0/sstream ****       typedef basic_istream<char_type, traits_type>	__istream_type;
 553:/usr/include/c++/11.1.0/sstream **** 
 554:/usr/include/c++/11.1.0/sstream ****     private:
 555:/usr/include/c++/11.1.0/sstream ****       __stringbuf_type	_M_stringbuf;
 556:/usr/include/c++/11.1.0/sstream **** 
 557:/usr/include/c++/11.1.0/sstream ****     public:
 558:/usr/include/c++/11.1.0/sstream ****       // Constructors:
 559:/usr/include/c++/11.1.0/sstream **** 
 560:/usr/include/c++/11.1.0/sstream ****       /**
 561:/usr/include/c++/11.1.0/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 562:/usr/include/c++/11.1.0/sstream ****        *
 563:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using @c in, and passes @c &sb to the base
 564:/usr/include/c++/11.1.0/sstream ****        *  class initializer.  Does not allocate any buffer.
 565:/usr/include/c++/11.1.0/sstream ****        *
 566:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 567:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
 568:/usr/include/c++/11.1.0/sstream ****       */
 569:/usr/include/c++/11.1.0/sstream ****       basic_istringstream()
 570:/usr/include/c++/11.1.0/sstream ****       : __istream_type(), _M_stringbuf(ios_base::in)
 571:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
 572:/usr/include/c++/11.1.0/sstream **** 
 573:/usr/include/c++/11.1.0/sstream ****       /**
 574:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an empty string buffer.
 575:/usr/include/c++/11.1.0/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 576:/usr/include/c++/11.1.0/sstream ****        *
 577:/usr/include/c++/11.1.0/sstream ****        *  @c ios_base::in is automatically included in @a __mode.
 578:/usr/include/c++/11.1.0/sstream ****        *
 579:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using @c __mode|in, and passes @c &sb to the base
 580:/usr/include/c++/11.1.0/sstream ****        *  class initializer.  Does not allocate any buffer.
 581:/usr/include/c++/11.1.0/sstream ****        *
 582:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 583:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
 584:/usr/include/c++/11.1.0/sstream ****       */
 585:/usr/include/c++/11.1.0/sstream ****       explicit
 586:/usr/include/c++/11.1.0/sstream ****       basic_istringstream(ios_base::openmode __mode)
 587:/usr/include/c++/11.1.0/sstream ****       : __istream_type(), _M_stringbuf(__mode | ios_base::in)
 588:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
 589:/usr/include/c++/11.1.0/sstream **** 
 590:/usr/include/c++/11.1.0/sstream ****       /**
 591:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an existing string buffer.
 592:/usr/include/c++/11.1.0/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 593:/usr/include/c++/11.1.0/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 594:/usr/include/c++/11.1.0/sstream ****        *
 595:/usr/include/c++/11.1.0/sstream ****        *  @c ios_base::in is automatically included in @a mode.
 596:/usr/include/c++/11.1.0/sstream ****        *
 597:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using @a str and @c mode|in, and passes @c &sb
 598:/usr/include/c++/11.1.0/sstream ****        *  to the base class initializer.
 599:/usr/include/c++/11.1.0/sstream ****        *
 600:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 601:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
 602:/usr/include/c++/11.1.0/sstream ****       */
 603:/usr/include/c++/11.1.0/sstream ****       explicit
 604:/usr/include/c++/11.1.0/sstream ****       basic_istringstream(const __string_type& __str,
 605:/usr/include/c++/11.1.0/sstream **** 			  ios_base::openmode __mode = ios_base::in)
 606:/usr/include/c++/11.1.0/sstream ****       : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
 607:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
 608:/usr/include/c++/11.1.0/sstream **** 
 609:/usr/include/c++/11.1.0/sstream ****       /**
 610:/usr/include/c++/11.1.0/sstream ****        *  @brief  The destructor does nothing.
 611:/usr/include/c++/11.1.0/sstream ****        *
 612:/usr/include/c++/11.1.0/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 613:/usr/include/c++/11.1.0/sstream ****        *  formatting stream.
 614:/usr/include/c++/11.1.0/sstream ****       */
 615:/usr/include/c++/11.1.0/sstream ****       ~basic_istringstream()
 616:/usr/include/c++/11.1.0/sstream ****       { }
 617:/usr/include/c++/11.1.0/sstream **** 
 618:/usr/include/c++/11.1.0/sstream **** #if __cplusplus >= 201103L
 619:/usr/include/c++/11.1.0/sstream ****       basic_istringstream(const basic_istringstream&) = delete;
 620:/usr/include/c++/11.1.0/sstream **** 
 621:/usr/include/c++/11.1.0/sstream ****       basic_istringstream(basic_istringstream&& __rhs)
 622:/usr/include/c++/11.1.0/sstream ****       : __istream_type(std::move(__rhs)),
 623:/usr/include/c++/11.1.0/sstream ****       _M_stringbuf(std::move(__rhs._M_stringbuf))
 624:/usr/include/c++/11.1.0/sstream ****       { __istream_type::set_rdbuf(&_M_stringbuf); }
 625:/usr/include/c++/11.1.0/sstream **** 
 626:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 627:/usr/include/c++/11.1.0/sstream ****       basic_istringstream(ios_base::openmode __mode, const allocator_type& __a)
 628:/usr/include/c++/11.1.0/sstream ****       : __istream_type(), _M_stringbuf(__mode | ios_base::in, __a)
 629:/usr/include/c++/11.1.0/sstream ****       { this->init(std::__addressof(_M_stringbuf)); }
 630:/usr/include/c++/11.1.0/sstream **** 
 631:/usr/include/c++/11.1.0/sstream ****       explicit
 632:/usr/include/c++/11.1.0/sstream ****       basic_istringstream(__string_type&& __str,
 633:/usr/include/c++/11.1.0/sstream **** 			  ios_base::openmode __mode = ios_base::in)
 634:/usr/include/c++/11.1.0/sstream ****       : __istream_type(), _M_stringbuf(std::move(__str), __mode | ios_base::in)
 635:/usr/include/c++/11.1.0/sstream ****       { this->init(std::__addressof(_M_stringbuf)); }
 636:/usr/include/c++/11.1.0/sstream **** 
 637:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 638:/usr/include/c++/11.1.0/sstream **** 	basic_istringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
 639:/usr/include/c++/11.1.0/sstream **** 			    const allocator_type& __a)
 640:/usr/include/c++/11.1.0/sstream **** 	: basic_istringstream(__str, ios_base::in, __a)
 641:/usr/include/c++/11.1.0/sstream **** 	{ }
 642:/usr/include/c++/11.1.0/sstream **** 
 643:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 644:/usr/include/c++/11.1.0/sstream **** 	basic_istringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
 645:/usr/include/c++/11.1.0/sstream **** 			    ios_base::openmode __mode,
 646:/usr/include/c++/11.1.0/sstream **** 			    const allocator_type& __a)
 647:/usr/include/c++/11.1.0/sstream **** 	: __istream_type(), _M_stringbuf(__str, __mode | ios_base::in, __a)
 648:/usr/include/c++/11.1.0/sstream **** 	{ this->init(std::__addressof(_M_stringbuf)); }
 649:/usr/include/c++/11.1.0/sstream **** 
 650:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 651:/usr/include/c++/11.1.0/sstream **** 	explicit
 652:/usr/include/c++/11.1.0/sstream **** 	basic_istringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
 653:/usr/include/c++/11.1.0/sstream **** 			    ios_base::openmode __mode = ios_base::in)
 654:/usr/include/c++/11.1.0/sstream **** 	: basic_istringstream(__str, __mode, allocator_type())
 655:/usr/include/c++/11.1.0/sstream **** 	{ }
 656:/usr/include/c++/11.1.0/sstream **** #endif // C++20
 657:/usr/include/c++/11.1.0/sstream **** 
 658:/usr/include/c++/11.1.0/sstream ****       // 27.8.3.2 Assign and swap:
 659:/usr/include/c++/11.1.0/sstream **** 
 660:/usr/include/c++/11.1.0/sstream ****       basic_istringstream&
 661:/usr/include/c++/11.1.0/sstream ****       operator=(const basic_istringstream&) = delete;
 662:/usr/include/c++/11.1.0/sstream **** 
 663:/usr/include/c++/11.1.0/sstream ****       basic_istringstream&
 664:/usr/include/c++/11.1.0/sstream ****       operator=(basic_istringstream&& __rhs)
 665:/usr/include/c++/11.1.0/sstream ****       {
 666:/usr/include/c++/11.1.0/sstream **** 	__istream_type::operator=(std::move(__rhs));
 667:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf = std::move(__rhs._M_stringbuf);
 668:/usr/include/c++/11.1.0/sstream **** 	return *this;
 669:/usr/include/c++/11.1.0/sstream ****       }
 670:/usr/include/c++/11.1.0/sstream **** 
 671:/usr/include/c++/11.1.0/sstream ****       void
 672:/usr/include/c++/11.1.0/sstream ****       swap(basic_istringstream& __rhs)
 673:/usr/include/c++/11.1.0/sstream ****       {
 674:/usr/include/c++/11.1.0/sstream **** 	__istream_type::swap(__rhs);
 675:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf.swap(__rhs._M_stringbuf);
 676:/usr/include/c++/11.1.0/sstream ****       }
 677:/usr/include/c++/11.1.0/sstream **** #endif // C++11
 678:/usr/include/c++/11.1.0/sstream **** 
 679:/usr/include/c++/11.1.0/sstream ****       // Members:
 680:/usr/include/c++/11.1.0/sstream ****       /**
 681:/usr/include/c++/11.1.0/sstream ****        *  @brief  Accessing the underlying buffer.
 682:/usr/include/c++/11.1.0/sstream ****        *  @return  The current basic_stringbuf buffer.
 683:/usr/include/c++/11.1.0/sstream ****        *
 684:/usr/include/c++/11.1.0/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 685:/usr/include/c++/11.1.0/sstream ****       */
 686:/usr/include/c++/11.1.0/sstream ****       __stringbuf_type*
 687:/usr/include/c++/11.1.0/sstream ****       rdbuf() const
 688:/usr/include/c++/11.1.0/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 689:/usr/include/c++/11.1.0/sstream **** 
 690:/usr/include/c++/11.1.0/sstream ****       /**
 691:/usr/include/c++/11.1.0/sstream ****        *  @brief  Copying out the string buffer.
 692:/usr/include/c++/11.1.0/sstream ****        *  @return  @c rdbuf()->str()
 693:/usr/include/c++/11.1.0/sstream ****       */
 694:/usr/include/c++/11.1.0/sstream ****       __string_type
 695:/usr/include/c++/11.1.0/sstream ****       str() const _GLIBCXX_LVAL_REF_QUAL
 696:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.str(); }
 697:/usr/include/c++/11.1.0/sstream **** 
 698:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 699:/usr/include/c++/11.1.0/sstream **** #if __cpp_concepts
 700:/usr/include/c++/11.1.0/sstream ****       template<__allocator_like _SAlloc>
 701:/usr/include/c++/11.1.0/sstream **** 	basic_string<_CharT, _Traits, _SAlloc>
 702:/usr/include/c++/11.1.0/sstream **** 	str(const _SAlloc& __sa) const
 703:/usr/include/c++/11.1.0/sstream **** 	{ return _M_stringbuf.str(__sa); }
 704:/usr/include/c++/11.1.0/sstream **** #endif
 705:/usr/include/c++/11.1.0/sstream **** 
 706:/usr/include/c++/11.1.0/sstream ****       __string_type
 707:/usr/include/c++/11.1.0/sstream ****       str() &&
 708:/usr/include/c++/11.1.0/sstream ****       { return std::move(_M_stringbuf).str(); }
 709:/usr/include/c++/11.1.0/sstream **** 
 710:/usr/include/c++/11.1.0/sstream ****       basic_string_view<char_type, traits_type>
 711:/usr/include/c++/11.1.0/sstream ****       view() const noexcept
 712:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.view(); }
 713:/usr/include/c++/11.1.0/sstream **** #endif
 714:/usr/include/c++/11.1.0/sstream **** 
 715:/usr/include/c++/11.1.0/sstream ****       /**
 716:/usr/include/c++/11.1.0/sstream ****        *  @brief  Setting a new buffer.
 717:/usr/include/c++/11.1.0/sstream ****        *  @param  __s  The string to use as a new sequence.
 718:/usr/include/c++/11.1.0/sstream ****        *
 719:/usr/include/c++/11.1.0/sstream ****        *  Calls @c rdbuf()->str(s).
 720:/usr/include/c++/11.1.0/sstream ****       */
 721:/usr/include/c++/11.1.0/sstream ****       void
 722:/usr/include/c++/11.1.0/sstream ****       str(const __string_type& __s)
 723:/usr/include/c++/11.1.0/sstream ****       { _M_stringbuf.str(__s); }
 724:/usr/include/c++/11.1.0/sstream **** 
 725:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 726:/usr/include/c++/11.1.0/sstream **** #if __cpp_concepts
 727:/usr/include/c++/11.1.0/sstream ****       template<__allocator_like _SAlloc>
 728:/usr/include/c++/11.1.0/sstream **** 	requires (!is_same_v<_SAlloc, _Alloc>)
 729:/usr/include/c++/11.1.0/sstream **** 	void
 730:/usr/include/c++/11.1.0/sstream **** 	str(const basic_string<_CharT, _Traits, _SAlloc>& __s)
 731:/usr/include/c++/11.1.0/sstream **** 	{ _M_stringbuf.str(__s); }
 732:/usr/include/c++/11.1.0/sstream **** #endif
 733:/usr/include/c++/11.1.0/sstream **** 
 734:/usr/include/c++/11.1.0/sstream ****       void
 735:/usr/include/c++/11.1.0/sstream ****       str(__string_type&& __s)
 736:/usr/include/c++/11.1.0/sstream ****       { _M_stringbuf.str(std::move(__s)); }
 737:/usr/include/c++/11.1.0/sstream **** #endif
 738:/usr/include/c++/11.1.0/sstream ****     };
 739:/usr/include/c++/11.1.0/sstream **** 
 740:/usr/include/c++/11.1.0/sstream **** 
 741:/usr/include/c++/11.1.0/sstream ****   // [27.7.3] Template class basic_ostringstream
 742:/usr/include/c++/11.1.0/sstream ****   /**
 743:/usr/include/c++/11.1.0/sstream ****    *  @brief  Controlling output for std::string.
 744:/usr/include/c++/11.1.0/sstream ****    *  @ingroup io
 745:/usr/include/c++/11.1.0/sstream ****    *
 746:/usr/include/c++/11.1.0/sstream ****    *  @tparam _CharT  Type of character stream.
 747:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
 748:/usr/include/c++/11.1.0/sstream ****    *                   char_traits<_CharT>.
 749:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
 750:/usr/include/c++/11.1.0/sstream ****    *
 751:/usr/include/c++/11.1.0/sstream ****    *  This class supports writing to objects of type std::basic_string,
 752:/usr/include/c++/11.1.0/sstream ****    *  using the inherited functions from std::basic_ostream.  To control
 753:/usr/include/c++/11.1.0/sstream ****    *  the associated sequence, an instance of std::basic_stringbuf is used,
 754:/usr/include/c++/11.1.0/sstream ****    *  which this page refers to as @c sb.
 755:/usr/include/c++/11.1.0/sstream ****   */
 756:/usr/include/c++/11.1.0/sstream ****   template <typename _CharT, typename _Traits, typename _Alloc>
 757:/usr/include/c++/11.1.0/sstream ****     class basic_ostringstream : public basic_ostream<_CharT, _Traits>
 758:/usr/include/c++/11.1.0/sstream ****     {
 759:/usr/include/c++/11.1.0/sstream ****     public:
 760:/usr/include/c++/11.1.0/sstream ****       // Types:
 761:/usr/include/c++/11.1.0/sstream ****       typedef _CharT 					char_type;
 762:/usr/include/c++/11.1.0/sstream ****       typedef _Traits 					traits_type;
 763:/usr/include/c++/11.1.0/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 764:/usr/include/c++/11.1.0/sstream ****       // 251. basic_stringbuf missing allocator_type
 765:/usr/include/c++/11.1.0/sstream ****       typedef _Alloc				       	allocator_type;
 766:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::int_type 		int_type;
 767:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 768:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::off_type 		off_type;
 769:/usr/include/c++/11.1.0/sstream **** 
 770:/usr/include/c++/11.1.0/sstream ****       // Non-standard types:
 771:/usr/include/c++/11.1.0/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 772:/usr/include/c++/11.1.0/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 773:/usr/include/c++/11.1.0/sstream ****       typedef basic_ostream<char_type, traits_type>	__ostream_type;
 774:/usr/include/c++/11.1.0/sstream **** 
 775:/usr/include/c++/11.1.0/sstream ****     private:
 776:/usr/include/c++/11.1.0/sstream ****       __stringbuf_type	_M_stringbuf;
 777:/usr/include/c++/11.1.0/sstream **** 
 778:/usr/include/c++/11.1.0/sstream ****     public:
 779:/usr/include/c++/11.1.0/sstream ****       // Constructors/destructor:
 780:/usr/include/c++/11.1.0/sstream **** 
 781:/usr/include/c++/11.1.0/sstream ****       /**
 782:/usr/include/c++/11.1.0/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
 783:/usr/include/c++/11.1.0/sstream ****        *
 784:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using @c mode|out, and passes @c &sb to the base
 785:/usr/include/c++/11.1.0/sstream ****        *  class initializer.  Does not allocate any buffer.
 786:/usr/include/c++/11.1.0/sstream ****        *
 787:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 788:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
 789:/usr/include/c++/11.1.0/sstream ****       */
 790:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream()
 791:/usr/include/c++/11.1.0/sstream ****       : __ostream_type(), _M_stringbuf(ios_base::out)
 792:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
 793:/usr/include/c++/11.1.0/sstream **** 
 794:/usr/include/c++/11.1.0/sstream ****       /**
 795:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an empty string buffer.
 796:/usr/include/c++/11.1.0/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 797:/usr/include/c++/11.1.0/sstream ****        *
 798:/usr/include/c++/11.1.0/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 799:/usr/include/c++/11.1.0/sstream ****        *
 800:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using @c mode|out, and passes @c &sb to the base
 801:/usr/include/c++/11.1.0/sstream ****        *  class initializer.  Does not allocate any buffer.
 802:/usr/include/c++/11.1.0/sstream ****        *
 803:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 804:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
 805:/usr/include/c++/11.1.0/sstream ****       */
 806:/usr/include/c++/11.1.0/sstream ****       explicit
 807:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream(ios_base::openmode __mode)
 808:/usr/include/c++/11.1.0/sstream ****       : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
 809:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
 810:/usr/include/c++/11.1.0/sstream **** 
 811:/usr/include/c++/11.1.0/sstream ****       /**
 812:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an existing string buffer.
 813:/usr/include/c++/11.1.0/sstream ****        *  @param  __str  A string to copy as a starting buffer.
 814:/usr/include/c++/11.1.0/sstream ****        *  @param  __mode  Whether the buffer can read, or write, or both.
 815:/usr/include/c++/11.1.0/sstream ****        *
 816:/usr/include/c++/11.1.0/sstream ****        *  @c ios_base::out is automatically included in @a mode.
 817:/usr/include/c++/11.1.0/sstream ****        *
 818:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using @a str and @c mode|out, and passes @c &sb
 819:/usr/include/c++/11.1.0/sstream ****        *  to the base class initializer.
 820:/usr/include/c++/11.1.0/sstream ****        *
 821:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
 822:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
 823:/usr/include/c++/11.1.0/sstream ****       */
 824:/usr/include/c++/11.1.0/sstream ****       explicit
 825:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream(const __string_type& __str,
 826:/usr/include/c++/11.1.0/sstream **** 			  ios_base::openmode __mode = ios_base::out)
 827:/usr/include/c++/11.1.0/sstream ****       : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
 828:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
 829:/usr/include/c++/11.1.0/sstream **** 
 830:/usr/include/c++/11.1.0/sstream ****       /**
 831:/usr/include/c++/11.1.0/sstream ****        *  @brief  The destructor does nothing.
 832:/usr/include/c++/11.1.0/sstream ****        *
 833:/usr/include/c++/11.1.0/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
 834:/usr/include/c++/11.1.0/sstream ****        *  formatting stream.
 835:/usr/include/c++/11.1.0/sstream ****       */
 836:/usr/include/c++/11.1.0/sstream ****       ~basic_ostringstream()
 837:/usr/include/c++/11.1.0/sstream ****       { }
 838:/usr/include/c++/11.1.0/sstream **** 
 839:/usr/include/c++/11.1.0/sstream **** #if __cplusplus >= 201103L
 840:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream(const basic_ostringstream&) = delete;
 841:/usr/include/c++/11.1.0/sstream **** 
 842:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream(basic_ostringstream&& __rhs)
 843:/usr/include/c++/11.1.0/sstream ****       : __ostream_type(std::move(__rhs)),
 844:/usr/include/c++/11.1.0/sstream ****       _M_stringbuf(std::move(__rhs._M_stringbuf))
 845:/usr/include/c++/11.1.0/sstream ****       { __ostream_type::set_rdbuf(&_M_stringbuf); }
 846:/usr/include/c++/11.1.0/sstream **** 
 847:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 848:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream(ios_base::openmode __mode, const allocator_type& __a)
 849:/usr/include/c++/11.1.0/sstream ****       : __ostream_type(), _M_stringbuf(__mode | ios_base::out, __a)
 850:/usr/include/c++/11.1.0/sstream ****       { this->init(std::__addressof(_M_stringbuf)); }
 851:/usr/include/c++/11.1.0/sstream **** 
 852:/usr/include/c++/11.1.0/sstream ****       explicit
 853:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream(__string_type&& __str,
 854:/usr/include/c++/11.1.0/sstream **** 			  ios_base::openmode __mode = ios_base::out)
 855:/usr/include/c++/11.1.0/sstream ****       : __ostream_type(), _M_stringbuf(std::move(__str), __mode | ios_base::out)
 856:/usr/include/c++/11.1.0/sstream ****       { this->init(std::__addressof(_M_stringbuf)); }
 857:/usr/include/c++/11.1.0/sstream **** 
 858:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 859:/usr/include/c++/11.1.0/sstream **** 	basic_ostringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
 860:/usr/include/c++/11.1.0/sstream **** 			    const allocator_type& __a)
 861:/usr/include/c++/11.1.0/sstream **** 	: basic_ostringstream(__str, ios_base::out, __a)
 862:/usr/include/c++/11.1.0/sstream **** 	{ }
 863:/usr/include/c++/11.1.0/sstream **** 
 864:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 865:/usr/include/c++/11.1.0/sstream **** 	basic_ostringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
 866:/usr/include/c++/11.1.0/sstream **** 			    ios_base::openmode __mode,
 867:/usr/include/c++/11.1.0/sstream **** 			    const allocator_type& __a)
 868:/usr/include/c++/11.1.0/sstream **** 	: __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out, __a)
 869:/usr/include/c++/11.1.0/sstream **** 	{ this->init(std::__addressof(_M_stringbuf)); }
 870:/usr/include/c++/11.1.0/sstream **** 
 871:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
 872:/usr/include/c++/11.1.0/sstream **** 	explicit
 873:/usr/include/c++/11.1.0/sstream **** 	basic_ostringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
 874:/usr/include/c++/11.1.0/sstream **** 			    ios_base::openmode __mode = ios_base::out)
 875:/usr/include/c++/11.1.0/sstream **** 	: basic_ostringstream(__str, __mode, allocator_type())
 876:/usr/include/c++/11.1.0/sstream **** 	{ }
 877:/usr/include/c++/11.1.0/sstream **** #endif // C++20
 878:/usr/include/c++/11.1.0/sstream **** 
 879:/usr/include/c++/11.1.0/sstream ****       // 27.8.3.2 Assign and swap:
 880:/usr/include/c++/11.1.0/sstream **** 
 881:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream&
 882:/usr/include/c++/11.1.0/sstream ****       operator=(const basic_ostringstream&) = delete;
 883:/usr/include/c++/11.1.0/sstream **** 
 884:/usr/include/c++/11.1.0/sstream ****       basic_ostringstream&
 885:/usr/include/c++/11.1.0/sstream ****       operator=(basic_ostringstream&& __rhs)
 886:/usr/include/c++/11.1.0/sstream ****       {
 887:/usr/include/c++/11.1.0/sstream **** 	__ostream_type::operator=(std::move(__rhs));
 888:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf = std::move(__rhs._M_stringbuf);
 889:/usr/include/c++/11.1.0/sstream **** 	return *this;
 890:/usr/include/c++/11.1.0/sstream ****       }
 891:/usr/include/c++/11.1.0/sstream **** 
 892:/usr/include/c++/11.1.0/sstream ****       void
 893:/usr/include/c++/11.1.0/sstream ****       swap(basic_ostringstream& __rhs)
 894:/usr/include/c++/11.1.0/sstream ****       {
 895:/usr/include/c++/11.1.0/sstream **** 	__ostream_type::swap(__rhs);
 896:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf.swap(__rhs._M_stringbuf);
 897:/usr/include/c++/11.1.0/sstream ****       }
 898:/usr/include/c++/11.1.0/sstream **** #endif // C++11
 899:/usr/include/c++/11.1.0/sstream **** 
 900:/usr/include/c++/11.1.0/sstream ****       // Members:
 901:/usr/include/c++/11.1.0/sstream ****       /**
 902:/usr/include/c++/11.1.0/sstream ****        *  @brief  Accessing the underlying buffer.
 903:/usr/include/c++/11.1.0/sstream ****        *  @return  The current basic_stringbuf buffer.
 904:/usr/include/c++/11.1.0/sstream ****        *
 905:/usr/include/c++/11.1.0/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
 906:/usr/include/c++/11.1.0/sstream ****       */
 907:/usr/include/c++/11.1.0/sstream ****       __stringbuf_type*
 908:/usr/include/c++/11.1.0/sstream ****       rdbuf() const
 909:/usr/include/c++/11.1.0/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
 910:/usr/include/c++/11.1.0/sstream **** 
 911:/usr/include/c++/11.1.0/sstream ****       /**
 912:/usr/include/c++/11.1.0/sstream ****        *  @brief  Copying out the string buffer.
 913:/usr/include/c++/11.1.0/sstream ****        *  @return  @c rdbuf()->str()
 914:/usr/include/c++/11.1.0/sstream ****       */
 915:/usr/include/c++/11.1.0/sstream ****       __string_type
 916:/usr/include/c++/11.1.0/sstream ****       str() const _GLIBCXX_LVAL_REF_QUAL
 917:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.str(); }
 918:/usr/include/c++/11.1.0/sstream **** 
 919:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 920:/usr/include/c++/11.1.0/sstream **** #if __cpp_concepts
 921:/usr/include/c++/11.1.0/sstream ****       template<__allocator_like _SAlloc>
 922:/usr/include/c++/11.1.0/sstream **** 	basic_string<_CharT, _Traits, _SAlloc>
 923:/usr/include/c++/11.1.0/sstream **** 	str(const _SAlloc& __sa) const
 924:/usr/include/c++/11.1.0/sstream **** 	{ return _M_stringbuf.str(__sa); }
 925:/usr/include/c++/11.1.0/sstream **** #endif
 926:/usr/include/c++/11.1.0/sstream **** 
 927:/usr/include/c++/11.1.0/sstream ****       __string_type
 928:/usr/include/c++/11.1.0/sstream ****       str() &&
 929:/usr/include/c++/11.1.0/sstream ****       { return std::move(_M_stringbuf).str(); }
 930:/usr/include/c++/11.1.0/sstream **** 
 931:/usr/include/c++/11.1.0/sstream ****       basic_string_view<char_type, traits_type>
 932:/usr/include/c++/11.1.0/sstream ****       view() const noexcept
 933:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.view(); }
 934:/usr/include/c++/11.1.0/sstream **** #endif
 935:/usr/include/c++/11.1.0/sstream **** 
 936:/usr/include/c++/11.1.0/sstream ****       /**
 937:/usr/include/c++/11.1.0/sstream ****        *  @brief  Setting a new buffer.
 938:/usr/include/c++/11.1.0/sstream ****        *  @param  __s  The string to use as a new sequence.
 939:/usr/include/c++/11.1.0/sstream ****        *
 940:/usr/include/c++/11.1.0/sstream ****        *  Calls @c rdbuf()->str(s).
 941:/usr/include/c++/11.1.0/sstream ****       */
 942:/usr/include/c++/11.1.0/sstream ****       void
 943:/usr/include/c++/11.1.0/sstream ****       str(const __string_type& __s)
 944:/usr/include/c++/11.1.0/sstream ****       { _M_stringbuf.str(__s); }
 945:/usr/include/c++/11.1.0/sstream **** 
 946:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
 947:/usr/include/c++/11.1.0/sstream **** #if __cpp_concepts
 948:/usr/include/c++/11.1.0/sstream ****       template<__allocator_like _SAlloc>
 949:/usr/include/c++/11.1.0/sstream **** 	requires (!is_same_v<_SAlloc, _Alloc>)
 950:/usr/include/c++/11.1.0/sstream **** 	void
 951:/usr/include/c++/11.1.0/sstream **** 	str(const basic_string<_CharT, _Traits, _SAlloc>& __s)
 952:/usr/include/c++/11.1.0/sstream **** 	{ _M_stringbuf.str(__s); }
 953:/usr/include/c++/11.1.0/sstream **** #endif
 954:/usr/include/c++/11.1.0/sstream **** 
 955:/usr/include/c++/11.1.0/sstream ****       void
 956:/usr/include/c++/11.1.0/sstream ****       str(__string_type&& __s)
 957:/usr/include/c++/11.1.0/sstream ****       { _M_stringbuf.str(std::move(__s)); }
 958:/usr/include/c++/11.1.0/sstream **** #endif
 959:/usr/include/c++/11.1.0/sstream ****     };
 960:/usr/include/c++/11.1.0/sstream **** 
 961:/usr/include/c++/11.1.0/sstream **** 
 962:/usr/include/c++/11.1.0/sstream ****   // [27.7.4] Template class basic_stringstream
 963:/usr/include/c++/11.1.0/sstream ****   /**
 964:/usr/include/c++/11.1.0/sstream ****    *  @brief  Controlling input and output for std::string.
 965:/usr/include/c++/11.1.0/sstream ****    *  @ingroup io
 966:/usr/include/c++/11.1.0/sstream ****    *
 967:/usr/include/c++/11.1.0/sstream ****    *  @tparam _CharT  Type of character stream.
 968:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Traits  Traits for character type, defaults to
 969:/usr/include/c++/11.1.0/sstream ****    *                   char_traits<_CharT>.
 970:/usr/include/c++/11.1.0/sstream ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
 971:/usr/include/c++/11.1.0/sstream ****    *
 972:/usr/include/c++/11.1.0/sstream ****    *  This class supports reading from and writing to objects of type
 973:/usr/include/c++/11.1.0/sstream ****    *  std::basic_string, using the inherited functions from
 974:/usr/include/c++/11.1.0/sstream ****    *  std::basic_iostream.  To control the associated sequence, an instance
 975:/usr/include/c++/11.1.0/sstream ****    *  of std::basic_stringbuf is used, which this page refers to as @c sb.
 976:/usr/include/c++/11.1.0/sstream ****   */
 977:/usr/include/c++/11.1.0/sstream ****   template <typename _CharT, typename _Traits, typename _Alloc>
 978:/usr/include/c++/11.1.0/sstream ****     class basic_stringstream : public basic_iostream<_CharT, _Traits>
 979:/usr/include/c++/11.1.0/sstream ****     {
 980:/usr/include/c++/11.1.0/sstream ****     public:
 981:/usr/include/c++/11.1.0/sstream ****       // Types:
 982:/usr/include/c++/11.1.0/sstream ****       typedef _CharT 					char_type;
 983:/usr/include/c++/11.1.0/sstream ****       typedef _Traits 					traits_type;
 984:/usr/include/c++/11.1.0/sstream ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 985:/usr/include/c++/11.1.0/sstream ****       // 251. basic_stringbuf missing allocator_type
 986:/usr/include/c++/11.1.0/sstream ****       typedef _Alloc				       	allocator_type;
 987:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::int_type 		int_type;
 988:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::pos_type 		pos_type;
 989:/usr/include/c++/11.1.0/sstream ****       typedef typename traits_type::off_type 		off_type;
 990:/usr/include/c++/11.1.0/sstream **** 
 991:/usr/include/c++/11.1.0/sstream ****       // Non-standard Types:
 992:/usr/include/c++/11.1.0/sstream ****       typedef basic_string<_CharT, _Traits, _Alloc> 	__string_type;
 993:/usr/include/c++/11.1.0/sstream ****       typedef basic_stringbuf<_CharT, _Traits, _Alloc> 	__stringbuf_type;
 994:/usr/include/c++/11.1.0/sstream ****       typedef basic_iostream<char_type, traits_type>	__iostream_type;
 995:/usr/include/c++/11.1.0/sstream **** 
 996:/usr/include/c++/11.1.0/sstream ****     private:
 997:/usr/include/c++/11.1.0/sstream ****       __stringbuf_type	_M_stringbuf;
 998:/usr/include/c++/11.1.0/sstream **** 
 999:/usr/include/c++/11.1.0/sstream ****     public:
1000:/usr/include/c++/11.1.0/sstream ****       // Constructors/destructors
1001:/usr/include/c++/11.1.0/sstream **** 
1002:/usr/include/c++/11.1.0/sstream ****       /**
1003:/usr/include/c++/11.1.0/sstream ****        *  @brief  Default constructor starts with an empty string buffer.
1004:/usr/include/c++/11.1.0/sstream ****        *
1005:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using the mode @c in|out, and passes @c &sb
1006:/usr/include/c++/11.1.0/sstream ****        *  to the base class initializer.  Does not allocate any buffer.
1007:/usr/include/c++/11.1.0/sstream ****        *
1008:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
1009:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
1010:/usr/include/c++/11.1.0/sstream ****       */
1011:/usr/include/c++/11.1.0/sstream ****       basic_stringstream()
1012:/usr/include/c++/11.1.0/sstream ****       : __iostream_type(), _M_stringbuf(ios_base::out | ios_base::in)
1013:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
1014:/usr/include/c++/11.1.0/sstream **** 
1015:/usr/include/c++/11.1.0/sstream ****       /**
1016:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an empty string buffer.
1017:/usr/include/c++/11.1.0/sstream ****        *  @param  __m  Whether the buffer can read, or write, or both.
1018:/usr/include/c++/11.1.0/sstream ****        *
1019:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using the mode from @c __m, and passes @c &sb
1020:/usr/include/c++/11.1.0/sstream ****        *  to the base class initializer.  Does not allocate any buffer.
1021:/usr/include/c++/11.1.0/sstream ****        *
1022:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
1023:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
1024:/usr/include/c++/11.1.0/sstream ****       */
1025:/usr/include/c++/11.1.0/sstream ****       explicit
1026:/usr/include/c++/11.1.0/sstream ****       basic_stringstream(ios_base::openmode __m)
1027:/usr/include/c++/11.1.0/sstream ****       : __iostream_type(), _M_stringbuf(__m)
1028:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
1029:/usr/include/c++/11.1.0/sstream **** 
1030:/usr/include/c++/11.1.0/sstream ****       /**
1031:/usr/include/c++/11.1.0/sstream ****        *  @brief  Starts with an existing string buffer.
1032:/usr/include/c++/11.1.0/sstream ****        *  @param  __str  A string to copy as a starting buffer.
1033:/usr/include/c++/11.1.0/sstream ****        *  @param  __m  Whether the buffer can read, or write, or both.
1034:/usr/include/c++/11.1.0/sstream ****        *
1035:/usr/include/c++/11.1.0/sstream ****        *  Initializes @c sb using @a __str and @c __m, and passes @c &sb
1036:/usr/include/c++/11.1.0/sstream ****        *  to the base class initializer.
1037:/usr/include/c++/11.1.0/sstream ****        *
1038:/usr/include/c++/11.1.0/sstream ****        *  That's a lie.  We initialize the base class with NULL, because the
1039:/usr/include/c++/11.1.0/sstream ****        *  string class does its own memory management.
1040:/usr/include/c++/11.1.0/sstream ****       */
1041:/usr/include/c++/11.1.0/sstream ****       explicit
1042:/usr/include/c++/11.1.0/sstream ****       basic_stringstream(const __string_type& __str,
1043:/usr/include/c++/11.1.0/sstream **** 			 ios_base::openmode __m = ios_base::out | ios_base::in)
1044:/usr/include/c++/11.1.0/sstream ****       : __iostream_type(), _M_stringbuf(__str, __m)
1045:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
1046:/usr/include/c++/11.1.0/sstream **** 
1047:/usr/include/c++/11.1.0/sstream ****       /**
1048:/usr/include/c++/11.1.0/sstream ****        *  @brief  The destructor does nothing.
1049:/usr/include/c++/11.1.0/sstream ****        *
1050:/usr/include/c++/11.1.0/sstream ****        *  The buffer is deallocated by the stringbuf object, not the
1051:/usr/include/c++/11.1.0/sstream ****        *  formatting stream.
1052:/usr/include/c++/11.1.0/sstream ****       */
1053:/usr/include/c++/11.1.0/sstream ****       ~basic_stringstream()
1054:/usr/include/c++/11.1.0/sstream ****       { }
1055:/usr/include/c++/11.1.0/sstream **** 
1056:/usr/include/c++/11.1.0/sstream **** #if __cplusplus >= 201103L
1057:/usr/include/c++/11.1.0/sstream ****       basic_stringstream(const basic_stringstream&) = delete;
1058:/usr/include/c++/11.1.0/sstream **** 
1059:/usr/include/c++/11.1.0/sstream ****       basic_stringstream(basic_stringstream&& __rhs)
1060:/usr/include/c++/11.1.0/sstream ****       : __iostream_type(std::move(__rhs)),
1061:/usr/include/c++/11.1.0/sstream ****       _M_stringbuf(std::move(__rhs._M_stringbuf))
1062:/usr/include/c++/11.1.0/sstream ****       { __iostream_type::set_rdbuf(&_M_stringbuf); }
1063:/usr/include/c++/11.1.0/sstream **** 
1064:/usr/include/c++/11.1.0/sstream **** #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI
1065:/usr/include/c++/11.1.0/sstream ****       basic_stringstream(ios_base::openmode __mode, const allocator_type& __a)
1066:/usr/include/c++/11.1.0/sstream ****       : __iostream_type(), _M_stringbuf(__mode, __a)
1067:/usr/include/c++/11.1.0/sstream ****       { this->init(&_M_stringbuf); }
1068:/usr/include/c++/11.1.0/sstream **** 
1069:/usr/include/c++/11.1.0/sstream ****       explicit
1070:/usr/include/c++/11.1.0/sstream ****       basic_stringstream(__string_type&& __str,
1071:/usr/include/c++/11.1.0/sstream **** 			 ios_base::openmode __mode = ios_base::in
1072:/usr/include/c++/11.1.0/sstream **** 						     | ios_base::out)
1073:/usr/include/c++/11.1.0/sstream ****       : __iostream_type(), _M_stringbuf(std::move(__str), __mode)
1074:/usr/include/c++/11.1.0/sstream ****       { this->init(std::__addressof(_M_stringbuf)); }
1075:/usr/include/c++/11.1.0/sstream **** 
1076:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
1077:/usr/include/c++/11.1.0/sstream **** 	basic_stringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
1078:/usr/include/c++/11.1.0/sstream **** 			   const allocator_type& __a)
1079:/usr/include/c++/11.1.0/sstream **** 	: basic_stringstream(__str, ios_base::in | ios_base::out, __a)
1080:/usr/include/c++/11.1.0/sstream **** 	{ }
1081:/usr/include/c++/11.1.0/sstream **** 
1082:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
1083:/usr/include/c++/11.1.0/sstream **** 	basic_stringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
1084:/usr/include/c++/11.1.0/sstream **** 			   ios_base::openmode __mode,
1085:/usr/include/c++/11.1.0/sstream **** 			   const allocator_type& __a)
1086:/usr/include/c++/11.1.0/sstream **** 	: __iostream_type(), _M_stringbuf(__str, __mode, __a)
1087:/usr/include/c++/11.1.0/sstream **** 	{ this->init(std::__addressof(_M_stringbuf)); }
1088:/usr/include/c++/11.1.0/sstream **** 
1089:/usr/include/c++/11.1.0/sstream ****       template<typename _SAlloc>
1090:/usr/include/c++/11.1.0/sstream **** 	explicit
1091:/usr/include/c++/11.1.0/sstream **** 	basic_stringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,
1092:/usr/include/c++/11.1.0/sstream **** 			   ios_base::openmode __mode = ios_base::in
1093:/usr/include/c++/11.1.0/sstream **** 						       | ios_base::out)
1094:/usr/include/c++/11.1.0/sstream **** 	: basic_stringstream(__str, __mode, allocator_type())
1095:/usr/include/c++/11.1.0/sstream **** 	{ }
1096:/usr/include/c++/11.1.0/sstream **** #endif // C++20
1097:/usr/include/c++/11.1.0/sstream **** 
1098:/usr/include/c++/11.1.0/sstream ****       // 27.8.3.2 Assign and swap:
1099:/usr/include/c++/11.1.0/sstream **** 
1100:/usr/include/c++/11.1.0/sstream ****       basic_stringstream&
1101:/usr/include/c++/11.1.0/sstream ****       operator=(const basic_stringstream&) = delete;
1102:/usr/include/c++/11.1.0/sstream **** 
1103:/usr/include/c++/11.1.0/sstream ****       basic_stringstream&
1104:/usr/include/c++/11.1.0/sstream ****       operator=(basic_stringstream&& __rhs)
1105:/usr/include/c++/11.1.0/sstream ****       {
1106:/usr/include/c++/11.1.0/sstream **** 	__iostream_type::operator=(std::move(__rhs));
1107:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf = std::move(__rhs._M_stringbuf);
1108:/usr/include/c++/11.1.0/sstream **** 	return *this;
1109:/usr/include/c++/11.1.0/sstream ****       }
1110:/usr/include/c++/11.1.0/sstream **** 
1111:/usr/include/c++/11.1.0/sstream ****       void
1112:/usr/include/c++/11.1.0/sstream ****       swap(basic_stringstream& __rhs)
1113:/usr/include/c++/11.1.0/sstream ****       {
1114:/usr/include/c++/11.1.0/sstream **** 	__iostream_type::swap(__rhs);
1115:/usr/include/c++/11.1.0/sstream **** 	_M_stringbuf.swap(__rhs._M_stringbuf);
1116:/usr/include/c++/11.1.0/sstream ****       }
1117:/usr/include/c++/11.1.0/sstream **** #endif // C++11
1118:/usr/include/c++/11.1.0/sstream **** 
1119:/usr/include/c++/11.1.0/sstream ****       // Members:
1120:/usr/include/c++/11.1.0/sstream ****       /**
1121:/usr/include/c++/11.1.0/sstream ****        *  @brief  Accessing the underlying buffer.
1122:/usr/include/c++/11.1.0/sstream ****        *  @return  The current basic_stringbuf buffer.
1123:/usr/include/c++/11.1.0/sstream ****        *
1124:/usr/include/c++/11.1.0/sstream ****        *  This hides both signatures of std::basic_ios::rdbuf().
1125:/usr/include/c++/11.1.0/sstream ****       */
1126:/usr/include/c++/11.1.0/sstream ****       __stringbuf_type*
1127:/usr/include/c++/11.1.0/sstream ****       rdbuf() const
1128:/usr/include/c++/11.1.0/sstream ****       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }
1129:/usr/include/c++/11.1.0/sstream **** 
1130:/usr/include/c++/11.1.0/sstream ****       /**
1131:/usr/include/c++/11.1.0/sstream ****        *  @brief  Copying out the string buffer.
1132:/usr/include/c++/11.1.0/sstream ****        *  @return  @c rdbuf()->str()
1133:/usr/include/c++/11.1.0/sstream ****       */
1134:/usr/include/c++/11.1.0/sstream ****       __string_type
1135:/usr/include/c++/11.1.0/sstream ****       str() const _GLIBCXX_LVAL_REF_QUAL
1136:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.str(); }
 2333              		.loc 12 1136 33 view .LVU482
 2334 004a 4C8D6C24 		leaq	64(%rsp), %r13
 2334      40
 2335              	.LBE1420:
 2336              	.LBE1419:
 2337              	.LBB1422:
 2338              	.LBB1418:
 2339              	.LBB1417:
 2340              	.LBB1416:
 2341              	.LBB1415:
 2342              	.LBB1414:
 2343              	.LBB1413:
 2344              	.LBB1412:
 2345              	.LBB1411:
 249:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 2346              		.loc 11 249 7 view .LVU483
 2347 004f 4C89CF   		movq	%r9, %rdi
 2348 0052 4C894C24 		movq	%r9, 16(%rsp)
 2348      10
 2349 0057 E8000000 		call	_ZNSolsEi@PLT
 2349      00
 2350              	.LVL165:
 249:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 2351              		.loc 11 249 7 view .LVU484
 2352              	.LBE1411:
 2353              	.LBE1412:
 2354              	.LBE1413:
 2355              	.LBE1414:
 2356              	.LBE1415:
 2357              	.LBE1416:
 2358              	.LBE1417:
 2359              	.LBE1418:
 2360              	.LBE1422:
 2361              	.LBB1423:
 2362              	.LBI1419:
1135:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.str(); }
 2363              		.loc 12 1135 7 is_stmt 1 view .LVU485
 2364              	.LBB1421:
 2365              		.loc 12 1136 33 is_stmt 0 view .LVU486
 2366 005c 4C8D4424 		leaq	120(%rsp), %r8
 2366      78
 2367 0061 4C89EF   		movq	%r13, %rdi
 2368 0064 4C89C6   		movq	%r8, %rsi
 2369 0067 4C894424 		movq	%r8, 8(%rsp)
 2369      08
 2370 006c E8000000 		call	_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv@PLT
 2370      00
 2371              	.LVL166:
 2372              		.loc 12 1136 33 view .LVU487
 2373              	.LBE1421:
 2374              	.LBE1423:
 982:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   internal::UniversalTersePrinter<T>::Print(value, &ss);
 983:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   return ss.str();
 984:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h **** }
 2375              		.loc 11 984 1 view .LVU488
 2376 0071 4889EF   		movq	%rbp, %rdi
 2377 0074 E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 2377      00
 2378              	.LVL167:
 2379              		.loc 11 984 1 view .LVU489
 2380              	.LBE1424:
 2381              	.LBE1425:
 2382              	.LBE1426:
 2383              	.LBE1427:
 2384              	.LBB1428:
 2385              	.LBI1428:
 349:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const T1& value, const T2& /* other_operand */) {
 2386              		.loc 11 349 13 is_stmt 1 view .LVU490
 2387              	.LBB1429:
 2388              	.LBI1429:
 275:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return ::testing::PrintToString(value);
 2389              		.loc 11 275 24 view .LVU491
 2390              	.LBB1430:
 2391              	.LBI1430:
 980:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   ::std::stringstream ss;
 2392              		.loc 11 980 15 view .LVU492
 2393              	.LBB1431:
 981:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   internal::UniversalTersePrinter<T>::Print(value, &ss);
 2394              		.loc 11 981 23 is_stmt 0 view .LVU493
 2395 0079 4889EF   		movq	%rbp, %rdi
 2396 007c E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@PLT
 2396      00
 2397              	.LVL168:
 2398              	.LBB1432:
 2399              	.LBI1432:
 783:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(value, os);
 2400              		.loc 11 783 15 is_stmt 1 view .LVU494
 2401              	.LBB1433:
 2402              	.LBI1433:
 852:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // A workarond for the bug in VC++ 7.1 that prevents us from instantiating
 2403              		.loc 11 852 6 view .LVU495
 2404              	.LBB1434:
 2405              	.LBB1435:
 2406              	.LBI1435:
 698:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // By default, ::testing::internal::PrintTo() is used for printing
 2407              		.loc 11 698 15 view .LVU496
 2408              	.LBB1436:
 2409              	.LBI1436:
 454:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // DefaultPrintTo() is overloaded.  The type of its first two
 2410              		.loc 11 454 6 view .LVU497
 2411              	.LBB1437:
 2412              	.LBI1437:
 436:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     false_type /* is not a pointer */,
 2413              		.loc 11 436 6 view .LVU498
 2414              	.LBB1438:
 2415              	.LBB1439:
 2416              	.LBI1439:
 222:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // With the following statement, during unqualified name lookup,
 2417              		.loc 11 222 6 view .LVU499
 2418              	.LBB1440:
 2419              	.LBB1441:
 2420              	.LBI1441:
 2421              		.file 13 "/usr/include/c++/11.1.0/ostream"
   1:/usr/include/c++/11.1.0/ostream **** // Output streams -*- C++ -*-
   2:/usr/include/c++/11.1.0/ostream **** 
   3:/usr/include/c++/11.1.0/ostream **** // Copyright (C) 1997-2021 Free Software Foundation, Inc.
   4:/usr/include/c++/11.1.0/ostream **** //
   5:/usr/include/c++/11.1.0/ostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/11.1.0/ostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/11.1.0/ostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/11.1.0/ostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/11.1.0/ostream **** // any later version.
  10:/usr/include/c++/11.1.0/ostream **** 
  11:/usr/include/c++/11.1.0/ostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/11.1.0/ostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/11.1.0/ostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/11.1.0/ostream **** // GNU General Public License for more details.
  15:/usr/include/c++/11.1.0/ostream **** 
  16:/usr/include/c++/11.1.0/ostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/11.1.0/ostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/11.1.0/ostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/11.1.0/ostream **** 
  20:/usr/include/c++/11.1.0/ostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/11.1.0/ostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/11.1.0/ostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/11.1.0/ostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/11.1.0/ostream **** 
  25:/usr/include/c++/11.1.0/ostream **** /** @file include/ostream
  26:/usr/include/c++/11.1.0/ostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/11.1.0/ostream ****  */
  28:/usr/include/c++/11.1.0/ostream **** 
  29:/usr/include/c++/11.1.0/ostream **** //
  30:/usr/include/c++/11.1.0/ostream **** // ISO C++ 14882: 27.6.2  Output streams
  31:/usr/include/c++/11.1.0/ostream **** //
  32:/usr/include/c++/11.1.0/ostream **** 
  33:/usr/include/c++/11.1.0/ostream **** #ifndef _GLIBCXX_OSTREAM
  34:/usr/include/c++/11.1.0/ostream **** #define _GLIBCXX_OSTREAM 1
  35:/usr/include/c++/11.1.0/ostream **** 
  36:/usr/include/c++/11.1.0/ostream **** #pragma GCC system_header
  37:/usr/include/c++/11.1.0/ostream **** 
  38:/usr/include/c++/11.1.0/ostream **** #include <ios>
  39:/usr/include/c++/11.1.0/ostream **** #include <bits/ostream_insert.h>
  40:/usr/include/c++/11.1.0/ostream **** 
  41:/usr/include/c++/11.1.0/ostream **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/11.1.0/ostream **** {
  43:/usr/include/c++/11.1.0/ostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/11.1.0/ostream **** 
  45:/usr/include/c++/11.1.0/ostream ****   /**
  46:/usr/include/c++/11.1.0/ostream ****    *  @brief  Template class basic_ostream.
  47:/usr/include/c++/11.1.0/ostream ****    *  @ingroup io
  48:/usr/include/c++/11.1.0/ostream ****    *
  49:/usr/include/c++/11.1.0/ostream ****    *  @tparam _CharT  Type of character stream.
  50:/usr/include/c++/11.1.0/ostream ****    *  @tparam _Traits  Traits for character type, defaults to
  51:/usr/include/c++/11.1.0/ostream ****    *                   char_traits<_CharT>.
  52:/usr/include/c++/11.1.0/ostream ****    *
  53:/usr/include/c++/11.1.0/ostream ****    *  This is the base class for all output streams.  It provides text
  54:/usr/include/c++/11.1.0/ostream ****    *  formatting of all builtin types, and communicates with any class
  55:/usr/include/c++/11.1.0/ostream ****    *  derived from basic_streambuf to do the actual output.
  56:/usr/include/c++/11.1.0/ostream ****   */
  57:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
  58:/usr/include/c++/11.1.0/ostream ****     class basic_ostream : virtual public basic_ios<_CharT, _Traits>
  59:/usr/include/c++/11.1.0/ostream ****     {
  60:/usr/include/c++/11.1.0/ostream ****     public:
  61:/usr/include/c++/11.1.0/ostream ****       // Types (inherited from basic_ios):
  62:/usr/include/c++/11.1.0/ostream ****       typedef _CharT			 		char_type;
  63:/usr/include/c++/11.1.0/ostream ****       typedef typename _Traits::int_type 		int_type;
  64:/usr/include/c++/11.1.0/ostream ****       typedef typename _Traits::pos_type 		pos_type;
  65:/usr/include/c++/11.1.0/ostream ****       typedef typename _Traits::off_type 		off_type;
  66:/usr/include/c++/11.1.0/ostream ****       typedef _Traits			 		traits_type;
  67:/usr/include/c++/11.1.0/ostream **** 
  68:/usr/include/c++/11.1.0/ostream ****       // Non-standard Types:
  69:/usr/include/c++/11.1.0/ostream ****       typedef basic_streambuf<_CharT, _Traits> 		__streambuf_type;
  70:/usr/include/c++/11.1.0/ostream ****       typedef basic_ios<_CharT, _Traits>		__ios_type;
  71:/usr/include/c++/11.1.0/ostream ****       typedef basic_ostream<_CharT, _Traits>		__ostream_type;
  72:/usr/include/c++/11.1.0/ostream ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  73:/usr/include/c++/11.1.0/ostream ****       							__num_put_type;
  74:/usr/include/c++/11.1.0/ostream ****       typedef ctype<_CharT>	      			__ctype_type;
  75:/usr/include/c++/11.1.0/ostream **** 
  76:/usr/include/c++/11.1.0/ostream ****       /**
  77:/usr/include/c++/11.1.0/ostream ****        *  @brief  Base constructor.
  78:/usr/include/c++/11.1.0/ostream ****        *
  79:/usr/include/c++/11.1.0/ostream ****        *  This ctor is almost never called by the user directly, rather from
  80:/usr/include/c++/11.1.0/ostream ****        *  derived classes' initialization lists, which pass a pointer to
  81:/usr/include/c++/11.1.0/ostream ****        *  their own stream buffer.
  82:/usr/include/c++/11.1.0/ostream ****       */
  83:/usr/include/c++/11.1.0/ostream ****       explicit
  84:/usr/include/c++/11.1.0/ostream ****       basic_ostream(__streambuf_type* __sb)
  85:/usr/include/c++/11.1.0/ostream ****       { this->init(__sb); }
  86:/usr/include/c++/11.1.0/ostream **** 
  87:/usr/include/c++/11.1.0/ostream ****       /**
  88:/usr/include/c++/11.1.0/ostream ****        *  @brief  Base destructor.
  89:/usr/include/c++/11.1.0/ostream ****        *
  90:/usr/include/c++/11.1.0/ostream ****        *  This does very little apart from providing a virtual base dtor.
  91:/usr/include/c++/11.1.0/ostream ****       */
  92:/usr/include/c++/11.1.0/ostream ****       virtual
  93:/usr/include/c++/11.1.0/ostream ****       ~basic_ostream() { }
  94:/usr/include/c++/11.1.0/ostream **** 
  95:/usr/include/c++/11.1.0/ostream ****       /// Safe prefix/suffix operations.
  96:/usr/include/c++/11.1.0/ostream ****       class sentry;
  97:/usr/include/c++/11.1.0/ostream ****       friend class sentry;
  98:/usr/include/c++/11.1.0/ostream **** 
  99:/usr/include/c++/11.1.0/ostream ****       ///@{
 100:/usr/include/c++/11.1.0/ostream ****       /**
 101:/usr/include/c++/11.1.0/ostream ****        *  @brief  Interface for manipulators.
 102:/usr/include/c++/11.1.0/ostream ****        *
 103:/usr/include/c++/11.1.0/ostream ****        *  Manipulators such as @c std::endl and @c std::hex use these
 104:/usr/include/c++/11.1.0/ostream ****        *  functions in constructs like "std::cout << std::endl".  For more
 105:/usr/include/c++/11.1.0/ostream ****        *  information, see the iomanip header.
 106:/usr/include/c++/11.1.0/ostream ****       */
 107:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 108:/usr/include/c++/11.1.0/ostream ****       operator<<(__ostream_type& (*__pf)(__ostream_type&))
 109:/usr/include/c++/11.1.0/ostream ****       {
 110:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 111:/usr/include/c++/11.1.0/ostream **** 	// DR 60. What is a formatted input function?
 112:/usr/include/c++/11.1.0/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 113:/usr/include/c++/11.1.0/ostream **** 	return __pf(*this);
 114:/usr/include/c++/11.1.0/ostream ****       }
 115:/usr/include/c++/11.1.0/ostream **** 
 116:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 117:/usr/include/c++/11.1.0/ostream ****       operator<<(__ios_type& (*__pf)(__ios_type&))
 118:/usr/include/c++/11.1.0/ostream ****       {
 119:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/11.1.0/ostream **** 	// DR 60. What is a formatted input function?
 121:/usr/include/c++/11.1.0/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 122:/usr/include/c++/11.1.0/ostream **** 	__pf(*this);
 123:/usr/include/c++/11.1.0/ostream **** 	return *this;
 124:/usr/include/c++/11.1.0/ostream ****       }
 125:/usr/include/c++/11.1.0/ostream **** 
 126:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 127:/usr/include/c++/11.1.0/ostream ****       operator<<(ios_base& (*__pf) (ios_base&))
 128:/usr/include/c++/11.1.0/ostream ****       {
 129:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 130:/usr/include/c++/11.1.0/ostream **** 	// DR 60. What is a formatted input function?
 131:/usr/include/c++/11.1.0/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 132:/usr/include/c++/11.1.0/ostream **** 	__pf(*this);
 133:/usr/include/c++/11.1.0/ostream **** 	return *this;
 134:/usr/include/c++/11.1.0/ostream ****       }
 135:/usr/include/c++/11.1.0/ostream ****       ///@}
 136:/usr/include/c++/11.1.0/ostream **** 
 137:/usr/include/c++/11.1.0/ostream ****       ///@{
 138:/usr/include/c++/11.1.0/ostream ****       /**
 139:/usr/include/c++/11.1.0/ostream ****        *  @name Inserters
 140:/usr/include/c++/11.1.0/ostream ****        *
 141:/usr/include/c++/11.1.0/ostream ****        *  All the @c operator<< functions (aka <em>formatted output
 142:/usr/include/c++/11.1.0/ostream ****        *  functions</em>) have some common behavior.  Each starts by
 143:/usr/include/c++/11.1.0/ostream ****        *  constructing a temporary object of type std::basic_ostream::sentry.
 144:/usr/include/c++/11.1.0/ostream ****        *  This can have several effects, concluding with the setting of a
 145:/usr/include/c++/11.1.0/ostream ****        *  status flag; see the sentry documentation for more.
 146:/usr/include/c++/11.1.0/ostream ****        *
 147:/usr/include/c++/11.1.0/ostream ****        *  If the sentry status is good, the function tries to generate
 148:/usr/include/c++/11.1.0/ostream ****        *  whatever data is appropriate for the type of the argument.
 149:/usr/include/c++/11.1.0/ostream ****        *
 150:/usr/include/c++/11.1.0/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 151:/usr/include/c++/11.1.0/ostream ****        *  will be turned on in the stream's error state without causing an
 152:/usr/include/c++/11.1.0/ostream ****        *  ios_base::failure to be thrown.  The original exception will then
 153:/usr/include/c++/11.1.0/ostream ****        *  be rethrown.
 154:/usr/include/c++/11.1.0/ostream ****       */
 155:/usr/include/c++/11.1.0/ostream **** 
 156:/usr/include/c++/11.1.0/ostream ****       ///@{
 157:/usr/include/c++/11.1.0/ostream ****       /**
 158:/usr/include/c++/11.1.0/ostream ****        *  @brief Integer arithmetic inserters
 159:/usr/include/c++/11.1.0/ostream ****        *  @param  __n A variable of builtin integral type.
 160:/usr/include/c++/11.1.0/ostream ****        *  @return  @c *this if successful
 161:/usr/include/c++/11.1.0/ostream ****        *
 162:/usr/include/c++/11.1.0/ostream ****        *  These functions use the stream's current locale (specifically, the
 163:/usr/include/c++/11.1.0/ostream ****        *  @c num_get facet) to perform numeric formatting.
 164:/usr/include/c++/11.1.0/ostream ****       */
 165:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 166:/usr/include/c++/11.1.0/ostream ****       operator<<(long __n)
 167:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 168:/usr/include/c++/11.1.0/ostream **** 
 169:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 170:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned long __n)
 171:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 172:/usr/include/c++/11.1.0/ostream **** 
 173:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 174:/usr/include/c++/11.1.0/ostream ****       operator<<(bool __n)
 175:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 176:/usr/include/c++/11.1.0/ostream **** 
 177:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 178:/usr/include/c++/11.1.0/ostream ****       operator<<(short __n);
 179:/usr/include/c++/11.1.0/ostream **** 
 180:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 181:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned short __n)
 182:/usr/include/c++/11.1.0/ostream ****       {
 183:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 184:/usr/include/c++/11.1.0/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 185:/usr/include/c++/11.1.0/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 186:/usr/include/c++/11.1.0/ostream ****       }
 187:/usr/include/c++/11.1.0/ostream **** 
 188:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 189:/usr/include/c++/11.1.0/ostream ****       operator<<(int __n);
 190:/usr/include/c++/11.1.0/ostream **** 
 191:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 192:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned int __n)
 2422              		.loc 13 192 7 view .LVU500
 2423              	.LBB1442:
 193:/usr/include/c++/11.1.0/ostream ****       {
 194:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 195:/usr/include/c++/11.1.0/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 196:/usr/include/c++/11.1.0/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 2424              		.loc 13 196 18 is_stmt 0 view .LVU501
 2425 0081 418B36   		movl	(%r14), %esi
 2426 0084 488B7C24 		movq	16(%rsp), %rdi
 2426      10
 2427              	.LBE1442:
 2428              	.LBE1441:
 2429              	.LBE1440:
 2430              	.LBE1439:
 2431              	.LBE1438:
 2432              	.LBE1437:
 2433              	.LBE1436:
 2434              	.LBE1435:
 2435              	.LBE1434:
 2436              	.LBE1433:
 2437              	.LBE1432:
 2438              	.LBB1453:
 2439              	.LBB1454:
 2440              		.loc 12 1136 33 view .LVU502
 2441 0089 4C8D7424 		leaq	32(%rsp), %r14
 2441      20
 2442              	.LBE1454:
 2443              	.LBE1453:
 2444              	.LBB1456:
 2445              	.LBB1452:
 2446              	.LBB1451:
 2447              	.LBB1450:
 2448              	.LBB1449:
 2449              	.LBB1448:
 2450              	.LBB1447:
 2451              	.LBB1446:
 2452              	.LBB1445:
 2453              	.LBB1444:
 2454              	.LBB1443:
 2455              		.loc 13 196 18 view .LVU503
 2456 008e E8000000 		call	_ZNSo9_M_insertImEERSoT_@PLT
 2456      00
 2457              	.LVL169:
 2458              		.loc 13 196 18 view .LVU504
 2459              	.LBE1443:
 2460              	.LBE1444:
 2461              	.LBE1445:
 2462              	.LBE1446:
 2463              	.LBE1447:
 2464              	.LBE1448:
 2465              	.LBE1449:
 2466              	.LBE1450:
 2467              	.LBE1451:
 2468              	.LBE1452:
 2469              	.LBE1456:
 2470              	.LBB1457:
 2471              	.LBI1453:
1135:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.str(); }
 2472              		.loc 12 1135 7 is_stmt 1 view .LVU505
 2473              	.LBB1455:
 2474              		.loc 12 1136 33 is_stmt 0 view .LVU506
 2475 0093 488B7424 		movq	8(%rsp), %rsi
 2475      08
 2476 0098 4C89F7   		movq	%r14, %rdi
 2477 009b E8000000 		call	_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv@PLT
 2477      00
 2478              	.LVL170:
 2479              		.loc 12 1136 33 view .LVU507
 2480              	.LBE1455:
 2481              	.LBE1457:
 2482              		.loc 11 984 1 view .LVU508
 2483 00a0 4889EF   		movq	%rbp, %rdi
 2484 00a3 E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 2484      00
 2485              	.LVL171:
 2486              		.loc 11 984 1 view .LVU509
 2487              	.LBE1431:
 2488              	.LBE1430:
 2489              	.LBE1429:
 2490              	.LBE1428:
1376:quantum/serial_link/tests/gtest/gtest.h ****                                    const char* rhs_expression,
1377:quantum/serial_link/tests/gtest/gtest.h ****                                    const T1& lhs, const T2& rhs) {
1378:quantum/serial_link/tests/gtest/gtest.h ****   return EqFailure(lhs_expression,
1379:quantum/serial_link/tests/gtest/gtest.h ****                    rhs_expression,
1380:quantum/serial_link/tests/gtest/gtest.h ****                    FormatForComparisonFailureMessage(lhs, rhs),
1381:quantum/serial_link/tests/gtest/gtest.h ****                    FormatForComparisonFailureMessage(rhs, lhs),
1382:quantum/serial_link/tests/gtest/gtest.h ****                    false);
 2491              		.loc 1 1382 25 view .LVU510
 2492 00a8 488B5424 		movq	24(%rsp), %rdx
 2492      18
 2493 00ad 4531C9   		xorl	%r9d, %r9d
 2494 00b0 4D89E8   		movq	%r13, %r8
 2495 00b3 4C89F1   		movq	%r14, %rcx
 2496 00b6 4C89FE   		movq	%r15, %rsi
 2497 00b9 4C89E7   		movq	%r12, %rdi
 2498 00bc E8000000 		call	_ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA
 2498      00
 2499              	.LVL172:
 2500              	.LBB1458:
 2501              	.LBI1458:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 2502              		.loc 3 657 7 is_stmt 1 view .LVU511
 2503              	.LBB1459:
 658:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 2504              		.loc 3 658 19 is_stmt 0 view .LVU512
 2505 00c1 4C89F7   		movq	%r14, %rdi
 2506 00c4 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 2506      00
 2507              	.LVL173:
 2508              	.LBB1460:
 2509              	.LBI1460:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 2510              		.loc 3 150 14 is_stmt 1 view .LVU513
 2511              	.LBB1461:
 2512              	.LBI1461:
 2513              		.loc 4 162 7 view .LVU514
 2514              	.LBB1462:
 2515              	.LBI1462:
 2516              		.loc 5 89 7 view .LVU515
 2517              		.loc 5 89 7 is_stmt 0 view .LVU516
 2518              	.LBE1462:
 2519              	.LBE1461:
 2520              	.LBE1460:
 2521              	.LBE1459:
 2522              	.LBE1458:
 2523              	.LBB1463:
 2524              	.LBI1463:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 2525              		.loc 3 657 7 is_stmt 1 view .LVU517
 2526              	.LBB1464:
 658:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 2527              		.loc 3 658 19 is_stmt 0 view .LVU518
 2528 00c9 4C89EF   		movq	%r13, %rdi
 2529 00cc E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 2529      00
 2530              	.LVL174:
 2531              	.LBB1465:
 2532              	.LBI1465:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 2533              		.loc 3 150 14 is_stmt 1 view .LVU519
 2534              	.LBB1466:
 2535              	.LBI1466:
 2536              		.loc 4 162 7 view .LVU520
 2537              	.LBB1467:
 2538              	.LBI1467:
 2539              		.loc 5 89 7 view .LVU521
 2540              		.loc 5 89 7 is_stmt 0 view .LVU522
 2541              	.LBE1467:
 2542              	.LBE1466:
 2543              	.LBE1465:
 2544              	.LBE1464:
 2545              	.LBE1463:
1383:quantum/serial_link/tests/gtest/gtest.h **** }
 2546              		.loc 1 1383 1 view .LVU523
 2547 00d1 488B8424 		movq	488(%rsp), %rax
 2547      E8010000 
 2548 00d9 64482B04 		subq	%fs:40, %rax
 2548      25280000 
 2548      00
 2549 00e2 7405     		je	.L83
 2550 00e4 E8000000 		call	__stack_chk_fail@PLT
 2550      00
 2551              	.LVL175:
 2552              	.L83:
 2553 00e9 4881C4F0 		addq	$496, %rsp
 2553      010000
 2554              		.cfi_def_cfa_offset 48
 2555 00f0 4C89E0   		movq	%r12, %rax
 2556 00f3 5D       		popq	%rbp
 2557              		.cfi_def_cfa_offset 40
 2558 00f4 415C     		popq	%r12
 2559              		.cfi_def_cfa_offset 32
 2560              	.LVL176:
 2561              		.loc 1 1383 1 view .LVU524
 2562 00f6 415D     		popq	%r13
 2563              		.cfi_def_cfa_offset 24
 2564              	.LVL177:
 2565              		.loc 1 1383 1 view .LVU525
 2566 00f8 415E     		popq	%r14
 2567              		.cfi_def_cfa_offset 16
 2568              	.LVL178:
 2569              		.loc 1 1383 1 view .LVU526
 2570 00fa 415F     		popq	%r15
 2571              		.cfi_def_cfa_offset 8
 2572              	.LVL179:
 2573              		.loc 1 1383 1 view .LVU527
 2574 00fc C3       		ret
 2575              		.cfi_endproc
 2576              	.LFE4910:
 2578              		.section	.text._ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_,"axG",@p
 2579              		.weak	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 2581              	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_:
 2582              	.LVL180:
 2583              	.LFB4806:
1384:quantum/serial_link/tests/gtest/gtest.h **** 
1385:quantum/serial_link/tests/gtest/gtest.h **** // The helper function for {ASSERT|EXPECT}_EQ.
1386:quantum/serial_link/tests/gtest/gtest.h **** template <typename T1, typename T2>
1387:quantum/serial_link/tests/gtest/gtest.h **** AssertionResult CmpHelperEQ(const char* lhs_expression,
 2584              		.loc 1 1387 17 is_stmt 1 view -0
 2585              		.cfi_startproc
 2586              		.loc 1 1387 17 is_stmt 0 view .LVU529
 2587 0000 4154     		pushq	%r12
 2588              		.cfi_def_cfa_offset 16
 2589              		.cfi_offset 12, -16
 2590 0002 4989FC   		movq	%rdi, %r12
 2591 0005 4883EC10 		subq	$16, %rsp
 2592              		.cfi_def_cfa_offset 32
1388:quantum/serial_link/tests/gtest/gtest.h ****                             const char* rhs_expression,
1389:quantum/serial_link/tests/gtest/gtest.h ****                             const T1& lhs,
1390:quantum/serial_link/tests/gtest/gtest.h ****                             const T2& rhs) {
1391:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DISABLE_MSC_WARNINGS_PUSH_(4389 /* signed/unsigned mismatch */)
1392:quantum/serial_link/tests/gtest/gtest.h ****   if (lhs == rhs) {
 2593              		.loc 1 1392 3 view .LVU530
 2594 0009 64488B04 		movq	%fs:40, %rax
 2594      25280000 
 2594      00
 2595 0012 48894424 		movq	%rax, 8(%rsp)
 2595      08
 2596 0017 418B00   		movl	(%r8), %eax
 2597 001a 3901     		cmpl	%eax, (%rcx)
 2598 001c 7507     		jne	.L86
1393:quantum/serial_link/tests/gtest/gtest.h ****     return AssertionSuccess();
 2599              		.loc 1 1393 29 view .LVU531
 2600 001e E8000000 		call	_ZN7testing16AssertionSuccessEv@PLT
 2600      00
 2601              	.LVL181:
 2602              		.loc 1 1393 29 view .LVU532
 2603 0023 EB05     		jmp	.L85
 2604              	.LVL182:
 2605              	.L86:
1394:quantum/serial_link/tests/gtest/gtest.h ****   }
1395:quantum/serial_link/tests/gtest/gtest.h **** GTEST_DISABLE_MSC_WARNINGS_POP_()
1396:quantum/serial_link/tests/gtest/gtest.h **** 
1397:quantum/serial_link/tests/gtest/gtest.h ****   return CmpHelperEQFailure(lhs_expression, rhs_expression, lhs, rhs);
 2606              		.loc 1 1397 69 view .LVU533
 2607 0025 E8000000 		call	_ZN7testing8internal18CmpHelperEQFailureIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 2607      00
 2608              	.LVL183:
 2609              	.L85:
1398:quantum/serial_link/tests/gtest/gtest.h **** }
 2610              		.loc 1 1398 1 view .LVU534
 2611 002a 488B4424 		movq	8(%rsp), %rax
 2611      08
 2612 002f 64482B04 		subq	%fs:40, %rax
 2612      25280000 
 2612      00
 2613 0038 7405     		je	.L88
 2614 003a E8000000 		call	__stack_chk_fail@PLT
 2614      00
 2615              	.LVL184:
 2616              	.L88:
 2617 003f 4883C410 		addq	$16, %rsp
 2618              		.cfi_def_cfa_offset 16
 2619 0043 4C89E0   		movq	%r12, %rax
 2620 0046 415C     		popq	%r12
 2621              		.cfi_def_cfa_offset 8
 2622              	.LVL185:
 2623              		.loc 1 1398 1 view .LVU535
 2624 0048 C3       		ret
 2625              		.cfi_endproc
 2626              	.LFE4806:
 2628              		.section	.rodata._ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv.str1.1,"aMS",@p
 2629              	.LC9:
 2630 0000 30783334 		.string	"0x3456ABCC"
 2630      35364142 
 2630      434300
 2631              	.LC10:
 2632 000b 2A287479 		.string	"*(typeof(*&test_object.buffer[0])*)triple_buffer_read_internal(sizeof(*&test_object.buffe
 2632      70656F66 
 2632      282A2674 
 2632      6573745F 
 2632      6F626A65 
 2633              		.section	.text._ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv,"ax",@progbits
 2634              		.align 2
 2635              		.globl	_ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv
 2637              	_ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv:
 2638              	.LVL186:
 2639              	.LFB4252:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2640              		.loc 8 44 55 is_stmt 1 view -0
 2641              		.cfi_startproc
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2642              		.loc 8 44 55 is_stmt 0 view .LVU537
 2643 0000 4154     		pushq	%r12
 2644              		.cfi_def_cfa_offset 16
 2645              		.cfi_offset 12, -16
  45:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2646              		.loc 8 45 6 view .LVU538
 2647 0002 BF040000 		movl	$4, %edi
 2647      00
 2648              	.LVL187:
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2649              		.loc 8 44 55 view .LVU539
 2650 0007 55       		pushq	%rbp
 2651              		.cfi_def_cfa_offset 24
 2652              		.cfi_offset 6, -24
  45:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2653              		.loc 8 45 6 view .LVU540
 2654 0008 488D2D00 		leaq	test_object(%rip), %rbp
 2654      000000
 2655 000f 4889EE   		movq	%rbp, %rsi
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2656              		.loc 8 44 55 view .LVU541
 2657 0012 4883EC38 		subq	$56, %rsp
 2658              		.cfi_def_cfa_offset 80
  44:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2659              		.loc 8 44 55 view .LVU542
 2660 0016 64488B04 		movq	%fs:40, %rax
 2660      25280000 
 2660      00
 2661 001f 48894424 		movq	%rax, 40(%rsp)
 2661      28
 2662 0024 31C0     		xorl	%eax, %eax
  45:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2663              		.loc 8 45 5 is_stmt 1 view .LVU543
 2664              	.LBB1468:
 2665              	.LBB1469:
 2666              	.LBB1470:
1399:quantum/serial_link/tests/gtest/gtest.h **** 
1400:quantum/serial_link/tests/gtest/gtest.h **** // With this overloaded version, we allow anonymous enums to be used
1401:quantum/serial_link/tests/gtest/gtest.h **** // in {ASSERT|EXPECT}_EQ when compiled with gcc 4, as anonymous enums
1402:quantum/serial_link/tests/gtest/gtest.h **** // can be implicitly cast to BiggestInt.
1403:quantum/serial_link/tests/gtest/gtest.h **** GTEST_API_ AssertionResult CmpHelperEQ(const char* lhs_expression,
1404:quantum/serial_link/tests/gtest/gtest.h ****                                        const char* rhs_expression,
1405:quantum/serial_link/tests/gtest/gtest.h ****                                        BiggestInt lhs,
1406:quantum/serial_link/tests/gtest/gtest.h ****                                        BiggestInt rhs);
1407:quantum/serial_link/tests/gtest/gtest.h **** 
1408:quantum/serial_link/tests/gtest/gtest.h **** // The helper class for {ASSERT|EXPECT}_EQ.  The template argument
1409:quantum/serial_link/tests/gtest/gtest.h **** // lhs_is_null_literal is true iff the first argument to ASSERT_EQ()
1410:quantum/serial_link/tests/gtest/gtest.h **** // is a null pointer literal.  The following default implementation is
1411:quantum/serial_link/tests/gtest/gtest.h **** // for lhs_is_null_literal being false.
1412:quantum/serial_link/tests/gtest/gtest.h **** template <bool lhs_is_null_literal>
1413:quantum/serial_link/tests/gtest/gtest.h **** class EqHelper {
1414:quantum/serial_link/tests/gtest/gtest.h ****  public:
1415:quantum/serial_link/tests/gtest/gtest.h ****   // This templatized version is for the general case.
1416:quantum/serial_link/tests/gtest/gtest.h ****   template <typename T1, typename T2>
1417:quantum/serial_link/tests/gtest/gtest.h ****   static AssertionResult Compare(const char* lhs_expression,
1418:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
1419:quantum/serial_link/tests/gtest/gtest.h ****                                  const T1& lhs,
1420:quantum/serial_link/tests/gtest/gtest.h ****                                  const T2& rhs) {
1421:quantum/serial_link/tests/gtest/gtest.h ****     return CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs);
 2667              		.loc 1 1421 64 is_stmt 0 view .LVU544
 2668 0026 4C8D6424 		leaq	24(%rsp), %r12
 2668      18
 2669              	.LBE1470:
 2670              	.LBE1469:
 2671              	.LBE1468:
  45:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2672              		.loc 8 45 6 view .LVU545
 2673 002b E8000000 		call	triple_buffer_begin_write_internal@PLT
 2673      00
 2674              	.LVL188:
  46:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 0x3456ABCC);
 2675              		.loc 8 46 5 view .LVU546
 2676 0030 4889EF   		movq	%rbp, %rdi
  45:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2677              		.loc 8 45 46 view .LVU547
 2678 0033 C700CCAB 		movl	$878095308, (%rax)
 2678      5634
  46:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 0x3456ABCC);
 2679              		.loc 8 46 5 is_stmt 1 view .LVU548
 2680 0039 E8000000 		call	triple_buffer_end_write_internal@PLT
 2680      00
 2681              	.LVL189:
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2682              		.loc 8 47 5 view .LVU549
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2683              		.loc 8 47 5 view .LVU550
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2684              		.loc 8 47 5 view .LVU551
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2685              		.loc 8 47 5 view .LVU552
 2686              	.LBB1487:
 2687 003e 4889EE   		movq	%rbp, %rsi
 2688 0041 BF040000 		movl	$4, %edi
 2688      00
 2689 0046 C7442410 		movl	$878095308, 16(%rsp)
 2689      CCAB5634 
 2690 004e E8000000 		call	triple_buffer_read_internal@PLT
 2690      00
 2691              	.LVL190:
 2692              	.LBB1473:
 2693              	.LBB1471:
 2694              		.loc 1 1421 64 is_stmt 0 view .LVU553
 2695 0053 488D6C24 		leaq	16(%rsp), %rbp
 2695      10
 2696 0058 488D1500 		leaq	.LC9(%rip), %rdx
 2696      000000
 2697 005f 4C89E7   		movq	%r12, %rdi
 2698              	.LBE1471:
 2699              	.LBE1473:
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2700              		.loc 8 47 5 view .LVU554
 2701 0062 4889C1   		movq	%rax, %rcx
 2702              	.LVL191:
 2703              	.LBB1474:
 2704              	.LBI1469:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 2705              		.loc 1 1417 26 is_stmt 1 view .LVU555
 2706              	.LBB1472:
 2707              		.loc 1 1421 64 is_stmt 0 view .LVU556
 2708 0065 4989E8   		movq	%rbp, %r8
 2709 0068 488D3500 		leaq	.LC10(%rip), %rsi
 2709      000000
 2710 006f E8000000 		call	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 2710      00
 2711              	.LVL192:
 2712              		.loc 1 1421 64 view .LVU557
 2713              	.LBE1472:
 2714              	.LBE1474:
 2715              	.LBB1475:
 2716              	.LBI1475:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 2717              		.loc 1 288 3 is_stmt 1 view .LVU558
 2718              	.LBB1476:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 2719              		.loc 1 288 27 view .LVU559
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 2720              		.loc 1 288 27 is_stmt 0 view .LVU560
 2721              	.LBE1476:
 2722              	.LBE1475:
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2723              		.loc 8 47 5 view .LVU561
 2724 0074 807C2418 		cmpb	$0, 24(%rsp)
 2724      00
 2725 0079 754C     		jne	.L91
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2726              		.loc 8 47 5 is_stmt 1 discriminator 2 view .LVU562
 2727 007b 4889EF   		movq	%rbp, %rdi
 2728 007e E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 2728      00
 2729              	.LVL193:
 2730              	.LBB1477:
 2731              	.LBI1477:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2732              		.loc 1 302 15 discriminator 2 view .LVU563
 2733              	.LBB1478:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2734              		.loc 1 302 41 discriminator 2 view .LVU564
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2735              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU565
 2736 0083 4C89E7   		movq	%r12, %rdi
 2737              	.LBE1478:
 2738              	.LBE1477:
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2739              		.loc 8 47 5 discriminator 2 view .LVU566
 2740 0086 4C8D6424 		leaq	8(%rsp), %r12
 2740      08
 2741              	.LBB1481:
 2742              	.LBB1479:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2743              		.loc 1 302 55 discriminator 2 view .LVU567
 2744 008b E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 2744      00
 2745              	.LVL194:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2746              		.loc 1 302 55 discriminator 2 view .LVU568
 2747              	.LBE1479:
 2748              	.LBE1481:
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2749              		.loc 8 47 5 discriminator 2 view .LVU569
 2750 0090 B92F0000 		movl	$47, %ecx
 2750      00
 2751 0095 BE010000 		movl	$1, %esi
 2751      00
 2752 009a 4C89E7   		movq	%r12, %rdi
 2753              	.LBB1482:
 2754              	.LBB1480:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2755              		.loc 1 302 55 discriminator 2 view .LVU570
 2756 009d 4989C0   		movq	%rax, %r8
 2757              	.LBE1480:
 2758              	.LBE1482:
  47:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2759              		.loc 8 47 5 discriminator 2 view .LVU571
 2760 00a0 488D1500 		leaq	.LC1(%rip), %rdx
 2760      000000
 2761 00a7 E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 2761      00
 2762              	.LVL195:
 2763 00ac 4889EE   		movq	%rbp, %rsi
 2764 00af 4C89E7   		movq	%r12, %rdi
 2765 00b2 E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 2765      00
 2766              	.LVL196:
 2767 00b7 4C89E7   		movq	%r12, %rdi
 2768 00ba E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 2768      00
 2769              	.LVL197:
 2770              	.LBB1483:
 2771              	.LBI1483:
 2772              		.file 14 "quantum/serial_link/tests/gtest/./internal/../gtest-message.h"
   1:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Copyright 2005, Google Inc.
   2:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // All rights reserved.
   3:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
   4:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Redistribution and use in source and binary forms, with or without
   5:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // modification, are permitted provided that the following conditions are
   6:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // met:
   7:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
   8:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //     * Redistributions of source code must retain the above copyright
   9:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // notice, this list of conditions and the following disclaimer.
  10:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //     * Redistributions in binary form must reproduce the above
  11:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // copyright notice, this list of conditions and the following disclaimer
  12:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // in the documentation and/or other materials provided with the
  13:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // distribution.
  14:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //     * Neither the name of Google Inc. nor the names of its
  15:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // contributors may be used to endorse or promote products derived from
  16:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // this software without specific prior written permission.
  17:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  18:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  19:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  20:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  21:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  22:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  23:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  24:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  25:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  26:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  27:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  28:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  29:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  30:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Author: wan@google.com (Zhanyong Wan)
  31:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  32:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // The Google C++ Testing Framework (Google Test)
  33:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  34:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // This header file defines the Message class.
  35:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  36:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // IMPORTANT NOTE: Due to limitation of the C++ language, we have to
  37:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // leave some internal implementation details in this header file.
  38:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // They are clearly marked by comments like this:
  39:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  40:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
  41:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  42:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Such code is NOT meant to be used by a user directly, and is subject
  43:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // to CHANGE WITHOUT NOTICE.  Therefore DO NOT DEPEND ON IT in a user
  44:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // program!
  45:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** 
  46:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** #ifndef GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
  47:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** #define GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_
  48:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** 
  49:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** #include <limits>
  50:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** 
  51:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** #include "./internal/gtest-port.h"
  52:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** 
  53:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Ensures that there is at least one operator<< in the global namespace.
  54:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // See Message& operator<<(...) below for why.
  55:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** void operator<<(const testing::internal::Secret&, int);
  56:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** 
  57:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** namespace testing {
  58:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** 
  59:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // The Message class works like an ostream repeater.
  60:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  61:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Typical usage:
  62:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  63:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //   1. You stream a bunch of values to a Message object.
  64:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //      It will remember the text in a stringstream.
  65:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //   2. Then you stream the Message object to an ostream.
  66:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //      This causes the text in the Message to be streamed
  67:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //      to the ostream.
  68:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  69:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // For example;
  70:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  71:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //   testing::Message foo;
  72:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //   foo << 1 << " != " << 2;
  73:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //   std::cout << foo;
  74:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  75:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // will print "1 != 2".
  76:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  77:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Message is not intended to be inherited from.  In particular, its
  78:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // destructor is not virtual.
  79:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** //
  80:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // Note that stringstream behaves differently in gcc and in MSVC.  You
  81:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // can stream a NULL char pointer to it in the former, but not in the
  82:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // latter (it causes an access violation if you do).  The Message
  83:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // class hides this difference by treating a NULL char pointer as
  84:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** // "(null)".
  85:quantum/serial_link/tests/gtest/./internal/../gtest-message.h **** class GTEST_API_ Message {
 2773              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU572
 2774              	.LBB1484:
 2775 00bf 4889EF   		movq	%rbp, %rdi
 2776 00c2 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 2776      00
 2777              	.LVL198:
 2778              	.L91:
 2779              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU573
 2780              	.LBE1484:
 2781              	.LBE1483:
 2782              	.LBB1485:
 2783              	.LBI1485:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 2784              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU574
 2785              	.LBB1486:
 2786 00c7 488D7C24 		leaq	32(%rsp), %rdi
 2786      20
 2787 00cc E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 2787      00
 2788              	.LVL199:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 2789              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU575
 2790              	.LBE1486:
 2791              	.LBE1485:
 2792              	.LBE1487:
  48:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 2793              		.loc 8 48 1 discriminator 3 view .LVU576
 2794 00d1 488B4424 		movq	40(%rsp), %rax
 2794      28
 2795 00d6 64482B04 		subq	%fs:40, %rax
 2795      25280000 
 2795      00
 2796 00df 7405     		je	.L92
  48:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 2797              		.loc 8 48 1 view .LVU577
 2798 00e1 E8000000 		call	__stack_chk_fail@PLT
 2798      00
 2799              	.LVL200:
 2800              	.L92:
 2801 00e6 4883C438 		addq	$56, %rsp
 2802              		.cfi_def_cfa_offset 24
 2803 00ea 5D       		popq	%rbp
 2804              		.cfi_def_cfa_offset 16
 2805 00eb 415C     		popq	%r12
 2806              		.cfi_def_cfa_offset 8
 2807 00ed C3       		ret
 2808              		.cfi_endproc
 2809              	.LFE4252:
 2811              		.section	.rodata._ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv.str1.1,"a
 2812              	.LC11:
 2813 0000 30783434 		.string	"0x44778899"
 2813      37373838 
 2813      393900
 2814              		.section	.text._ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv,"ax",@progb
 2815              		.align 2
 2816              		.globl	_ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv
 2818              	_ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv:
 2819              	.LVL201:
 2820              	.LFB4269:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2821              		.loc 8 54 61 is_stmt 1 view -0
 2822              		.cfi_startproc
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2823              		.loc 8 54 61 is_stmt 0 view .LVU579
 2824 0000 4154     		pushq	%r12
 2825              		.cfi_def_cfa_offset 16
 2826              		.cfi_offset 12, -16
  55:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2827              		.loc 8 55 6 view .LVU580
 2828 0002 BF040000 		movl	$4, %edi
 2828      00
 2829              	.LVL202:
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2830              		.loc 8 54 61 view .LVU581
 2831 0007 55       		pushq	%rbp
 2832              		.cfi_def_cfa_offset 24
 2833              		.cfi_offset 6, -24
  55:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2834              		.loc 8 55 6 view .LVU582
 2835 0008 488D2D00 		leaq	test_object(%rip), %rbp
 2835      000000
 2836 000f 4889EE   		movq	%rbp, %rsi
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2837              		.loc 8 54 61 view .LVU583
 2838 0012 4883EC38 		subq	$56, %rsp
 2839              		.cfi_def_cfa_offset 80
  54:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x3456ABCC;
 2840              		.loc 8 54 61 view .LVU584
 2841 0016 64488B04 		movq	%fs:40, %rax
 2841      25280000 
 2841      00
 2842 001f 48894424 		movq	%rax, 40(%rsp)
 2842      28
 2843 0024 31C0     		xorl	%eax, %eax
  55:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2844              		.loc 8 55 5 is_stmt 1 view .LVU585
 2845              	.LBB1488:
 2846              	.LBB1489:
 2847              	.LBB1490:
 2848              		.loc 1 1421 64 is_stmt 0 view .LVU586
 2849 0026 4C8D6424 		leaq	24(%rsp), %r12
 2849      18
 2850              	.LBE1490:
 2851              	.LBE1489:
 2852              	.LBE1488:
  55:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2853              		.loc 8 55 6 view .LVU587
 2854 002b E8000000 		call	triple_buffer_begin_write_internal@PLT
 2854      00
 2855              	.LVL203:
  56:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x44778899;
 2856              		.loc 8 56 5 view .LVU588
 2857 0030 4889EF   		movq	%rbp, %rdi
  55:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2858              		.loc 8 55 46 view .LVU589
 2859 0033 C700CCAB 		movl	$878095308, (%rax)
 2859      5634
  56:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 0x44778899;
 2860              		.loc 8 56 5 is_stmt 1 view .LVU590
 2861 0039 E8000000 		call	triple_buffer_end_write_internal@PLT
 2861      00
 2862              	.LVL204:
  57:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2863              		.loc 8 57 5 view .LVU591
  57:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2864              		.loc 8 57 6 is_stmt 0 view .LVU592
 2865 003e 4889EE   		movq	%rbp, %rsi
 2866 0041 BF040000 		movl	$4, %edi
 2866      00
 2867 0046 E8000000 		call	triple_buffer_begin_write_internal@PLT
 2867      00
 2868              	.LVL205:
  58:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 0x44778899);
 2869              		.loc 8 58 5 view .LVU593
 2870 004b 4889EF   		movq	%rbp, %rdi
  57:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 2871              		.loc 8 57 46 view .LVU594
 2872 004e C7009988 		movl	$1148684441, (%rax)
 2872      7744
  58:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 0x44778899);
 2873              		.loc 8 58 5 is_stmt 1 view .LVU595
 2874 0054 E8000000 		call	triple_buffer_end_write_internal@PLT
 2874      00
 2875              	.LVL206:
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2876              		.loc 8 59 5 view .LVU596
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2877              		.loc 8 59 5 view .LVU597
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2878              		.loc 8 59 5 view .LVU598
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2879              		.loc 8 59 5 view .LVU599
 2880              	.LBB1507:
 2881 0059 4889EE   		movq	%rbp, %rsi
 2882 005c BF040000 		movl	$4, %edi
 2882      00
 2883 0061 C7442410 		movl	$1148684441, 16(%rsp)
 2883      99887744 
 2884 0069 E8000000 		call	triple_buffer_read_internal@PLT
 2884      00
 2885              	.LVL207:
 2886              	.LBB1493:
 2887              	.LBB1491:
 2888              		.loc 1 1421 64 is_stmt 0 view .LVU600
 2889 006e 488D6C24 		leaq	16(%rsp), %rbp
 2889      10
 2890 0073 488D1500 		leaq	.LC11(%rip), %rdx
 2890      000000
 2891 007a 4C89E7   		movq	%r12, %rdi
 2892              	.LBE1491:
 2893              	.LBE1493:
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2894              		.loc 8 59 5 view .LVU601
 2895 007d 4889C1   		movq	%rax, %rcx
 2896              	.LVL208:
 2897              	.LBB1494:
 2898              	.LBI1489:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 2899              		.loc 1 1417 26 is_stmt 1 view .LVU602
 2900              	.LBB1492:
 2901              		.loc 1 1421 64 is_stmt 0 view .LVU603
 2902 0080 4989E8   		movq	%rbp, %r8
 2903 0083 488D3500 		leaq	.LC10(%rip), %rsi
 2903      000000
 2904 008a E8000000 		call	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 2904      00
 2905              	.LVL209:
 2906              		.loc 1 1421 64 view .LVU604
 2907              	.LBE1492:
 2908              	.LBE1494:
 2909              	.LBB1495:
 2910              	.LBI1495:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 2911              		.loc 1 288 3 is_stmt 1 view .LVU605
 2912              	.LBB1496:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 2913              		.loc 1 288 27 view .LVU606
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 2914              		.loc 1 288 27 is_stmt 0 view .LVU607
 2915              	.LBE1496:
 2916              	.LBE1495:
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2917              		.loc 8 59 5 view .LVU608
 2918 008f 807C2418 		cmpb	$0, 24(%rsp)
 2918      00
 2919 0094 754C     		jne	.L95
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2920              		.loc 8 59 5 is_stmt 1 discriminator 2 view .LVU609
 2921 0096 4889EF   		movq	%rbp, %rdi
 2922 0099 E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 2922      00
 2923              	.LVL210:
 2924              	.LBB1497:
 2925              	.LBI1497:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2926              		.loc 1 302 15 discriminator 2 view .LVU610
 2927              	.LBB1498:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2928              		.loc 1 302 41 discriminator 2 view .LVU611
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2929              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU612
 2930 009e 4C89E7   		movq	%r12, %rdi
 2931              	.LBE1498:
 2932              	.LBE1497:
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2933              		.loc 8 59 5 discriminator 2 view .LVU613
 2934 00a1 4C8D6424 		leaq	8(%rsp), %r12
 2934      08
 2935              	.LBB1501:
 2936              	.LBB1499:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2937              		.loc 1 302 55 discriminator 2 view .LVU614
 2938 00a6 E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 2938      00
 2939              	.LVL211:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2940              		.loc 1 302 55 discriminator 2 view .LVU615
 2941              	.LBE1499:
 2942              	.LBE1501:
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2943              		.loc 8 59 5 discriminator 2 view .LVU616
 2944 00ab B93B0000 		movl	$59, %ecx
 2944      00
 2945 00b0 BE010000 		movl	$1, %esi
 2945      00
 2946 00b5 4C89E7   		movq	%r12, %rdi
 2947              	.LBB1502:
 2948              	.LBB1500:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 2949              		.loc 1 302 55 discriminator 2 view .LVU617
 2950 00b8 4989C0   		movq	%rax, %r8
 2951              	.LBE1500:
 2952              	.LBE1502:
  59:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 2953              		.loc 8 59 5 discriminator 2 view .LVU618
 2954 00bb 488D1500 		leaq	.LC1(%rip), %rdx
 2954      000000
 2955 00c2 E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 2955      00
 2956              	.LVL212:
 2957 00c7 4889EE   		movq	%rbp, %rsi
 2958 00ca 4C89E7   		movq	%r12, %rdi
 2959 00cd E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 2959      00
 2960              	.LVL213:
 2961 00d2 4C89E7   		movq	%r12, %rdi
 2962 00d5 E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 2962      00
 2963              	.LVL214:
 2964              	.LBB1503:
 2965              	.LBI1503:
 2966              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU619
 2967              	.LBB1504:
 2968 00da 4889EF   		movq	%rbp, %rdi
 2969 00dd E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 2969      00
 2970              	.LVL215:
 2971              	.L95:
 2972              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU620
 2973              	.LBE1504:
 2974              	.LBE1503:
 2975              	.LBB1505:
 2976              	.LBI1505:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 2977              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU621
 2978              	.LBB1506:
 2979 00e2 488D7C24 		leaq	32(%rsp), %rdi
 2979      20
 2980 00e7 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 2980      00
 2981              	.LVL216:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 2982              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU622
 2983              	.LBE1506:
 2984              	.LBE1505:
 2985              	.LBE1507:
  60:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 2986              		.loc 8 60 1 discriminator 3 view .LVU623
 2987 00ec 488B4424 		movq	40(%rsp), %rax
 2987      28
 2988 00f1 64482B04 		subq	%fs:40, %rax
 2988      25280000 
 2988      00
 2989 00fa 7405     		je	.L96
  60:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 2990              		.loc 8 60 1 view .LVU624
 2991 00fc E8000000 		call	__stack_chk_fail@PLT
 2991      00
 2992              	.LVL217:
 2993              	.L96:
 2994 0101 4883C438 		addq	$56, %rsp
 2995              		.cfi_def_cfa_offset 24
 2996 0105 5D       		popq	%rbp
 2997              		.cfi_def_cfa_offset 16
 2998 0106 415C     		popq	%r12
 2999              		.cfi_def_cfa_offset 8
 3000 0108 C3       		ret
 3001              		.cfi_endproc
 3002              	.LFE4269:
 3004              		.section	.rodata._ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT
 3005              	.LC12:
 3006 0000 4E554C4C 		.string	"NULL"
 3006      00
 3007              		.section	.text._ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
 3008              		.weak	_ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
 3010              	_ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_:
 3011              	.LVL218:
 3012              	.LFB4911:
1375:quantum/serial_link/tests/gtest/gtest.h ****                                    const char* rhs_expression,
 3013              		.loc 1 1375 17 is_stmt 1 view -0
 3014              		.cfi_startproc
1375:quantum/serial_link/tests/gtest/gtest.h ****                                    const char* rhs_expression,
 3015              		.loc 1 1375 17 is_stmt 0 view .LVU626
 3016 0000 4157     		pushq	%r15
 3017              		.cfi_def_cfa_offset 16
 3018              		.cfi_offset 15, -16
 3019 0002 4989D7   		movq	%rdx, %r15
 3020 0005 4156     		pushq	%r14
 3021              		.cfi_def_cfa_offset 24
 3022              		.cfi_offset 14, -24
 3023 0007 4155     		pushq	%r13
 3024              		.cfi_def_cfa_offset 32
 3025              		.cfi_offset 13, -32
 3026 0009 4D89C5   		movq	%r8, %r13
 3027 000c 4154     		pushq	%r12
 3028              		.cfi_def_cfa_offset 40
 3029              		.cfi_offset 12, -40
 3030 000e 4989FC   		movq	%rdi, %r12
 3031 0011 55       		pushq	%rbp
 3032              		.cfi_def_cfa_offset 48
 3033              		.cfi_offset 6, -48
 3034 0012 53       		pushq	%rbx
 3035              		.cfi_def_cfa_offset 56
 3036              		.cfi_offset 3, -56
 3037 0013 4881ECE8 		subq	$488, %rsp
 3037      010000
 3038              		.cfi_def_cfa_offset 544
1375:quantum/serial_link/tests/gtest/gtest.h ****                                    const char* rhs_expression,
 3039              		.loc 1 1375 17 view .LVU627
 3040 001a 48894C24 		movq	%rcx, 8(%rsp)
 3040      08
 3041              	.LBB1567:
 3042              	.LBB1568:
 3043              	.LBB1569:
 3044              	.LBB1570:
 981:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   internal::UniversalTersePrinter<T>::Print(value, &ss);
 3045              		.loc 11 981 23 view .LVU628
 3046 001f 488D6C24 		leaq	80(%rsp), %rbp
 3046      50
 3047              	.LBB1571:
 3048              	.LBB1572:
 3049              	.LBB1573:
 3050              	.LBB1574:
 3051              	.LBB1575:
 3052              	.LBB1576:
 3053              	.LBB1577:
 3054              	.LBB1578:
 3055              	.LBB1579:
 3056              	.LBB1580:
 3057              	.LBB1581:
 140:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                          sizeof(value), os);
 3058              		.loc 11 140 25 view .LVU629
 3059 0024 4C8D7424 		leaq	96(%rsp), %r14
 3059      60
 3060              	.LBE1581:
 3061              	.LBE1580:
 3062              	.LBE1579:
 3063              	.LBE1578:
 3064              	.LBE1577:
 3065              	.LBE1576:
 3066              	.LBE1575:
 3067              	.LBE1574:
 3068              	.LBE1573:
 3069              	.LBE1572:
 3070              	.LBE1571:
 3071              	.LBE1570:
 3072              	.LBE1569:
 3073              	.LBE1568:
 3074              	.LBE1567:
1375:quantum/serial_link/tests/gtest/gtest.h ****                                    const char* rhs_expression,
 3075              		.loc 1 1375 17 view .LVU630
 3076 0029 48893424 		movq	%rsi, (%rsp)
 3077              	.LBB1603:
 3078              	.LBB1601:
 3079              	.LBB1599:
 3080              	.LBB1597:
 981:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   internal::UniversalTersePrinter<T>::Print(value, &ss);
 3081              		.loc 11 981 23 view .LVU631
 3082 002d 4889EF   		movq	%rbp, %rdi
 3083              	.LBB1592:
 3084              	.LBB1593:
 3085              		.loc 12 1136 33 view .LVU632
 3086 0030 488D5C24 		leaq	104(%rsp), %rbx
 3086      68
 3087              	.LBE1593:
 3088              	.LBE1592:
 3089              	.LBE1597:
 3090              	.LBE1599:
 3091              	.LBE1601:
 3092              	.LBE1603:
1375:quantum/serial_link/tests/gtest/gtest.h ****                                    const char* rhs_expression,
 3093              		.loc 1 1375 17 view .LVU633
 3094 0035 64488B04 		movq	%fs:40, %rax
 3094      25280000 
 3094      00
 3095 003e 48898424 		movq	%rax, 472(%rsp)
 3095      D8010000 
 3096 0046 31C0     		xorl	%eax, %eax
 3097              	.LVL219:
 3098              	.LBB1604:
 3099              	.LBI1567:
 349:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const T1& value, const T2& /* other_operand */) {
 3100              		.loc 11 349 13 is_stmt 1 view .LVU634
 3101              	.LBB1602:
 3102              	.LBI1568:
 275:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return ::testing::PrintToString(value);
 3103              		.loc 11 275 24 view .LVU635
 3104              	.LBB1600:
 3105              	.LBI1569:
 980:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   ::std::stringstream ss;
 3106              		.loc 11 980 15 view .LVU636
 3107              	.LBB1598:
 981:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   internal::UniversalTersePrinter<T>::Print(value, &ss);
 3108              		.loc 11 981 23 is_stmt 0 view .LVU637
 3109 0048 E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@PLT
 3109      00
 3110              	.LVL220:
 3111              	.LBB1595:
 3112              	.LBI1571:
 783:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(value, os);
 3113              		.loc 11 783 15 is_stmt 1 view .LVU638
 3114              	.LBB1591:
 3115              	.LBI1572:
 852:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // A workarond for the bug in VC++ 7.1 that prevents us from instantiating
 3116              		.loc 11 852 6 view .LVU639
 3117              	.LBB1590:
 3118              	.LBB1589:
 3119              	.LBI1574:
 698:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // By default, ::testing::internal::PrintTo() is used for printing
 3120              		.loc 11 698 15 view .LVU640
 3121              	.LBB1588:
 3122              	.LBI1575:
 454:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // DefaultPrintTo() is overloaded.  The type of its first two
 3123              		.loc 11 454 6 view .LVU641
 3124              	.LBB1587:
 3125              	.LBI1576:
 436:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     false_type /* is not a pointer */,
 3126              		.loc 11 436 6 view .LVU642
 3127              	.LBB1586:
 3128              	.LBI1577:
 222:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // With the following statement, during unqualified name lookup,
 3129              		.loc 11 222 6 view .LVU643
 3130              	.LBB1585:
 3131              	.LBB1584:
 3132              	.LBI1579:
 203:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     ::std::basic_ostream<Char, CharTraits>& os, const T& x) {
 3133              		.loc 11 203 41 view .LVU644
 3134              	.LBB1583:
 3135              	.LBI1580:
 139:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     PrintBytesInObjectTo(reinterpret_cast<const unsigned char*>(&value),
 3136              		.loc 11 139 15 view .LVU645
 3137              	.LBB1582:
 140:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                          sizeof(value), os);
 3138              		.loc 11 140 25 is_stmt 0 view .LVU646
 3139 004d 4C89F2   		movq	%r14, %rdx
 3140 0050 4C89EF   		movq	%r13, %rdi
 3141 0053 BE080000 		movl	$8, %esi
 3141      00
 3142 0058 E8000000 		call	_ZN7testing9internal220PrintBytesInObjectToEPKhmPSo@PLT
 3142      00
 3143              	.LVL221:
 140:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                          sizeof(value), os);
 3144              		.loc 11 140 25 view .LVU647
 3145              	.LBE1582:
 3146              	.LBE1583:
 3147              	.LBE1584:
 3148              	.LBE1585:
 3149              	.LBE1586:
 3150              	.LBE1587:
 3151              	.LBE1588:
 3152              	.LBE1589:
 3153              	.LBE1590:
 3154              	.LBE1591:
 3155              	.LBE1595:
 3156              	.LBB1596:
 3157              	.LBI1592:
1135:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.str(); }
 3158              		.loc 12 1135 7 is_stmt 1 view .LVU648
 3159              	.LBB1594:
 3160              		.loc 12 1136 33 is_stmt 0 view .LVU649
 3161 005d 4C8D6C24 		leaq	48(%rsp), %r13
 3161      30
 3162 0062 4889DE   		movq	%rbx, %rsi
 3163 0065 4C89EF   		movq	%r13, %rdi
 3164 0068 E8000000 		call	_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv@PLT
 3164      00
 3165              	.LVL222:
 3166              		.loc 12 1136 33 view .LVU650
 3167              	.LBE1594:
 3168              	.LBE1596:
 3169              		.loc 11 984 1 view .LVU651
 3170 006d 4889EF   		movq	%rbp, %rdi
 3171 0070 E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 3171      00
 3172              	.LVL223:
 3173              		.loc 11 984 1 view .LVU652
 3174              	.LBE1598:
 3175              	.LBE1600:
 3176              	.LBE1602:
 3177              	.LBE1604:
 3178              	.LBB1605:
 3179              	.LBI1605:
 349:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     const T1& value, const T2& /* other_operand */) {
 3180              		.loc 11 349 13 is_stmt 1 view .LVU653
 3181              	.LBB1606:
 3182              	.LBI1606:
 275:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     return ::testing::PrintToString(value);
 3183              		.loc 11 275 24 view .LVU654
 3184              	.LBB1607:
 3185              	.LBI1607:
 980:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   ::std::stringstream ss;
 3186              		.loc 11 980 15 view .LVU655
 3187              	.LBB1608:
 981:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   internal::UniversalTersePrinter<T>::Print(value, &ss);
 3188              		.loc 11 981 23 is_stmt 0 view .LVU656
 3189 0075 4889EF   		movq	%rbp, %rdi
 3190 0078 E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev@PLT
 3190      00
 3191              	.LVL224:
 3192              	.LBB1609:
 3193              	.LBI1609:
 783:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     UniversalPrint(value, os);
 3194              		.loc 11 783 15 is_stmt 1 view .LVU657
 3195              	.LBB1610:
 3196              	.LBI1610:
 852:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // A workarond for the bug in VC++ 7.1 that prevents us from instantiating
 3197              		.loc 11 852 6 view .LVU658
 3198              	.LBB1611:
 3199              	.LBB1612:
 3200              	.LBI1612:
 698:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     // By default, ::testing::internal::PrintTo() is used for printing
 3201              		.loc 11 698 15 view .LVU659
 3202 007d 488B4C24 		movq	8(%rsp), %rcx
 3202      08
 3203 0082 488B31   		movq	(%rcx), %rsi
 3204              	.LVL225:
 3205              	.LBB1613:
 3206              	.LBB1614:
 3207              	.LBI1614:
 454:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****   // DefaultPrintTo() is overloaded.  The type of its first two
 3208              		.loc 11 454 6 view .LVU660
 3209              	.LBB1615:
 3210              	.LBI1615:
 404:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****                     true_type /* is a pointer */,
 3211              		.loc 11 404 6 view .LVU661
 3212              	.LBB1616:
 407:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****     *os << "NULL";
 3213              		.loc 11 407 3 is_stmt 0 view .LVU662
 3214 0085 4885F6   		testq	%rsi, %rsi
 3215 0088 7516     		jne	.L99
 3216              	.LVL226:
 3217              	.LBB1617:
 3218              	.LBI1617:
 197:/usr/include/c++/11.1.0/ostream ****       }
 198:/usr/include/c++/11.1.0/ostream **** 
 199:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_LONG_LONG
 200:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 201:/usr/include/c++/11.1.0/ostream ****       operator<<(long long __n)
 202:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 203:/usr/include/c++/11.1.0/ostream **** 
 204:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 205:/usr/include/c++/11.1.0/ostream ****       operator<<(unsigned long long __n)
 206:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__n); }
 207:/usr/include/c++/11.1.0/ostream **** #endif
 208:/usr/include/c++/11.1.0/ostream ****       ///@}
 209:/usr/include/c++/11.1.0/ostream **** 
 210:/usr/include/c++/11.1.0/ostream ****       ///@{
 211:/usr/include/c++/11.1.0/ostream ****       /**
 212:/usr/include/c++/11.1.0/ostream ****        *  @brief  Floating point arithmetic inserters
 213:/usr/include/c++/11.1.0/ostream ****        *  @param  __f A variable of builtin floating point type.
 214:/usr/include/c++/11.1.0/ostream ****        *  @return  @c *this if successful
 215:/usr/include/c++/11.1.0/ostream ****        *
 216:/usr/include/c++/11.1.0/ostream ****        *  These functions use the stream's current locale (specifically, the
 217:/usr/include/c++/11.1.0/ostream ****        *  @c num_get facet) to perform numeric formatting.
 218:/usr/include/c++/11.1.0/ostream ****       */
 219:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 220:/usr/include/c++/11.1.0/ostream ****       operator<<(double __f)
 221:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__f); }
 222:/usr/include/c++/11.1.0/ostream **** 
 223:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 224:/usr/include/c++/11.1.0/ostream ****       operator<<(float __f)
 225:/usr/include/c++/11.1.0/ostream ****       {
 226:/usr/include/c++/11.1.0/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 227:/usr/include/c++/11.1.0/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 228:/usr/include/c++/11.1.0/ostream **** 	return _M_insert(static_cast<double>(__f));
 229:/usr/include/c++/11.1.0/ostream ****       }
 230:/usr/include/c++/11.1.0/ostream **** 
 231:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 232:/usr/include/c++/11.1.0/ostream ****       operator<<(long double __f)
 233:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__f); }
 234:/usr/include/c++/11.1.0/ostream ****       ///@}
 235:/usr/include/c++/11.1.0/ostream **** 
 236:/usr/include/c++/11.1.0/ostream ****       /**
 237:/usr/include/c++/11.1.0/ostream ****        *  @brief  Pointer arithmetic inserters
 238:/usr/include/c++/11.1.0/ostream ****        *  @param  __p A variable of pointer type.
 239:/usr/include/c++/11.1.0/ostream ****        *  @return  @c *this if successful
 240:/usr/include/c++/11.1.0/ostream ****        *
 241:/usr/include/c++/11.1.0/ostream ****        *  These functions use the stream's current locale (specifically, the
 242:/usr/include/c++/11.1.0/ostream ****        *  @c num_get facet) to perform numeric formatting.
 243:/usr/include/c++/11.1.0/ostream ****       */
 244:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 245:/usr/include/c++/11.1.0/ostream ****       operator<<(const void* __p)
 246:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__p); }
 247:/usr/include/c++/11.1.0/ostream **** 
 248:/usr/include/c++/11.1.0/ostream **** #if __cplusplus >= 201703L
 249:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 250:/usr/include/c++/11.1.0/ostream ****       operator<<(nullptr_t)
 251:/usr/include/c++/11.1.0/ostream ****       { return *this << "nullptr"; }
 252:/usr/include/c++/11.1.0/ostream **** #endif
 253:/usr/include/c++/11.1.0/ostream **** 
 254:/usr/include/c++/11.1.0/ostream ****       /**
 255:/usr/include/c++/11.1.0/ostream ****        *  @brief  Extracting from another streambuf.
 256:/usr/include/c++/11.1.0/ostream ****        *  @param  __sb  A pointer to a streambuf
 257:/usr/include/c++/11.1.0/ostream ****        *
 258:/usr/include/c++/11.1.0/ostream ****        *  This function behaves like one of the basic arithmetic extractors,
 259:/usr/include/c++/11.1.0/ostream ****        *  in that it also constructs a sentry object and has the same error
 260:/usr/include/c++/11.1.0/ostream ****        *  handling behavior.
 261:/usr/include/c++/11.1.0/ostream ****        *
 262:/usr/include/c++/11.1.0/ostream ****        *  If @p __sb is NULL, the stream will set failbit in its error state.
 263:/usr/include/c++/11.1.0/ostream ****        *
 264:/usr/include/c++/11.1.0/ostream ****        *  Characters are extracted from @p __sb and inserted into @c *this
 265:/usr/include/c++/11.1.0/ostream ****        *  until one of the following occurs:
 266:/usr/include/c++/11.1.0/ostream ****        *
 267:/usr/include/c++/11.1.0/ostream ****        *  - the input stream reaches end-of-file,
 268:/usr/include/c++/11.1.0/ostream ****        *  - insertion into the output sequence fails (in this case, the
 269:/usr/include/c++/11.1.0/ostream ****        *    character that would have been inserted is not extracted), or
 270:/usr/include/c++/11.1.0/ostream ****        *  - an exception occurs while getting a character from @p __sb, which
 271:/usr/include/c++/11.1.0/ostream ****        *    sets failbit in the error state
 272:/usr/include/c++/11.1.0/ostream ****        *
 273:/usr/include/c++/11.1.0/ostream ****        *  If the function inserts no characters, failbit is set.
 274:/usr/include/c++/11.1.0/ostream ****       */
 275:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 276:/usr/include/c++/11.1.0/ostream ****       operator<<(__streambuf_type* __sb);
 277:/usr/include/c++/11.1.0/ostream ****       ///@}
 278:/usr/include/c++/11.1.0/ostream **** 
 279:/usr/include/c++/11.1.0/ostream ****       ///@{
 280:/usr/include/c++/11.1.0/ostream ****       /**
 281:/usr/include/c++/11.1.0/ostream ****        *  @name Unformatted Output Functions
 282:/usr/include/c++/11.1.0/ostream ****        *
 283:/usr/include/c++/11.1.0/ostream ****        *  All the unformatted output functions have some common behavior.
 284:/usr/include/c++/11.1.0/ostream ****        *  Each starts by constructing a temporary object of type
 285:/usr/include/c++/11.1.0/ostream ****        *  std::basic_ostream::sentry.  This has several effects, concluding
 286:/usr/include/c++/11.1.0/ostream ****        *  with the setting of a status flag; see the sentry documentation
 287:/usr/include/c++/11.1.0/ostream ****        *  for more.
 288:/usr/include/c++/11.1.0/ostream ****        *
 289:/usr/include/c++/11.1.0/ostream ****        *  If the sentry status is good, the function tries to generate
 290:/usr/include/c++/11.1.0/ostream ****        *  whatever data is appropriate for the type of the argument.
 291:/usr/include/c++/11.1.0/ostream ****        *
 292:/usr/include/c++/11.1.0/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 293:/usr/include/c++/11.1.0/ostream ****        *  will be turned on in the stream's error state.  If badbit is on in
 294:/usr/include/c++/11.1.0/ostream ****        *  the stream's exceptions mask, the exception will be rethrown
 295:/usr/include/c++/11.1.0/ostream ****        *  without completing its actions.
 296:/usr/include/c++/11.1.0/ostream ****       */
 297:/usr/include/c++/11.1.0/ostream **** 
 298:/usr/include/c++/11.1.0/ostream ****       /**
 299:/usr/include/c++/11.1.0/ostream ****        *  @brief  Simple insertion.
 300:/usr/include/c++/11.1.0/ostream ****        *  @param  __c  The character to insert.
 301:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 302:/usr/include/c++/11.1.0/ostream ****        *
 303:/usr/include/c++/11.1.0/ostream ****        *  Tries to insert @p __c.
 304:/usr/include/c++/11.1.0/ostream ****        *
 305:/usr/include/c++/11.1.0/ostream ****        *  @note  This function is not overloaded on signed char and
 306:/usr/include/c++/11.1.0/ostream ****        *         unsigned char.
 307:/usr/include/c++/11.1.0/ostream ****       */
 308:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 309:/usr/include/c++/11.1.0/ostream ****       put(char_type __c);
 310:/usr/include/c++/11.1.0/ostream **** 
 311:/usr/include/c++/11.1.0/ostream ****       /**
 312:/usr/include/c++/11.1.0/ostream ****        *  @brief  Core write functionality, without sentry.
 313:/usr/include/c++/11.1.0/ostream ****        *  @param  __s  The array to insert.
 314:/usr/include/c++/11.1.0/ostream ****        *  @param  __n  Maximum number of characters to insert.
 315:/usr/include/c++/11.1.0/ostream ****       */
 316:/usr/include/c++/11.1.0/ostream ****       void
 317:/usr/include/c++/11.1.0/ostream ****       _M_write(const char_type* __s, streamsize __n)
 318:/usr/include/c++/11.1.0/ostream ****       {
 319:/usr/include/c++/11.1.0/ostream **** 	const streamsize __put = this->rdbuf()->sputn(__s, __n);
 320:/usr/include/c++/11.1.0/ostream **** 	if (__put != __n)
 321:/usr/include/c++/11.1.0/ostream **** 	  this->setstate(ios_base::badbit);
 322:/usr/include/c++/11.1.0/ostream ****       }
 323:/usr/include/c++/11.1.0/ostream **** 
 324:/usr/include/c++/11.1.0/ostream ****       /**
 325:/usr/include/c++/11.1.0/ostream ****        *  @brief  Character string insertion.
 326:/usr/include/c++/11.1.0/ostream ****        *  @param  __s  The array to insert.
 327:/usr/include/c++/11.1.0/ostream ****        *  @param  __n  Maximum number of characters to insert.
 328:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 329:/usr/include/c++/11.1.0/ostream ****        *
 330:/usr/include/c++/11.1.0/ostream ****        *  Characters are copied from @p __s and inserted into the stream until
 331:/usr/include/c++/11.1.0/ostream ****        *  one of the following happens:
 332:/usr/include/c++/11.1.0/ostream ****        *
 333:/usr/include/c++/11.1.0/ostream ****        *  - @p __n characters are inserted
 334:/usr/include/c++/11.1.0/ostream ****        *  - inserting into the output sequence fails (in this case, badbit
 335:/usr/include/c++/11.1.0/ostream ****        *    will be set in the stream's error state)
 336:/usr/include/c++/11.1.0/ostream ****        *
 337:/usr/include/c++/11.1.0/ostream ****        *  @note  This function is not overloaded on signed char and
 338:/usr/include/c++/11.1.0/ostream ****        *         unsigned char.
 339:/usr/include/c++/11.1.0/ostream ****       */
 340:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 341:/usr/include/c++/11.1.0/ostream ****       write(const char_type* __s, streamsize __n);
 342:/usr/include/c++/11.1.0/ostream ****       ///@}
 343:/usr/include/c++/11.1.0/ostream **** 
 344:/usr/include/c++/11.1.0/ostream ****       /**
 345:/usr/include/c++/11.1.0/ostream ****        *  @brief  Synchronizing the stream buffer.
 346:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 347:/usr/include/c++/11.1.0/ostream ****        *
 348:/usr/include/c++/11.1.0/ostream ****        *  If @c rdbuf() is a null pointer, changes nothing.
 349:/usr/include/c++/11.1.0/ostream ****        *
 350:/usr/include/c++/11.1.0/ostream ****        *  Otherwise, calls @c rdbuf()->pubsync(), and if that returns -1,
 351:/usr/include/c++/11.1.0/ostream ****        *  sets badbit.
 352:/usr/include/c++/11.1.0/ostream ****       */
 353:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 354:/usr/include/c++/11.1.0/ostream ****       flush();
 355:/usr/include/c++/11.1.0/ostream **** 
 356:/usr/include/c++/11.1.0/ostream ****       /**
 357:/usr/include/c++/11.1.0/ostream ****        *  @brief  Getting the current write position.
 358:/usr/include/c++/11.1.0/ostream ****        *  @return  A file position object.
 359:/usr/include/c++/11.1.0/ostream ****        *
 360:/usr/include/c++/11.1.0/ostream ****        *  If @c fail() is not false, returns @c pos_type(-1) to indicate
 361:/usr/include/c++/11.1.0/ostream ****        *  failure.  Otherwise returns @c rdbuf()->pubseekoff(0,cur,out).
 362:/usr/include/c++/11.1.0/ostream ****       */
 363:/usr/include/c++/11.1.0/ostream ****       pos_type
 364:/usr/include/c++/11.1.0/ostream ****       tellp();
 365:/usr/include/c++/11.1.0/ostream **** 
 366:/usr/include/c++/11.1.0/ostream ****       /**
 367:/usr/include/c++/11.1.0/ostream ****        *  @brief  Changing the current write position.
 368:/usr/include/c++/11.1.0/ostream ****        *  @param  __pos  A file position object.
 369:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 370:/usr/include/c++/11.1.0/ostream ****        *
 371:/usr/include/c++/11.1.0/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekpos(pos).  If
 372:/usr/include/c++/11.1.0/ostream ****        *  that function fails, sets failbit.
 373:/usr/include/c++/11.1.0/ostream ****       */
 374:/usr/include/c++/11.1.0/ostream ****       __ostream_type&
 375:/usr/include/c++/11.1.0/ostream ****       seekp(pos_type);
 376:/usr/include/c++/11.1.0/ostream **** 
 377:/usr/include/c++/11.1.0/ostream ****       /**
 378:/usr/include/c++/11.1.0/ostream ****        *  @brief  Changing the current write position.
 379:/usr/include/c++/11.1.0/ostream ****        *  @param  __off  A file offset object.
 380:/usr/include/c++/11.1.0/ostream ****        *  @param  __dir  The direction in which to seek.
 381:/usr/include/c++/11.1.0/ostream ****        *  @return  *this
 382:/usr/include/c++/11.1.0/ostream ****        *
 383:/usr/include/c++/11.1.0/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).
 384:/usr/include/c++/11.1.0/ostream ****        *  If that function fails, sets failbit.
 385:/usr/include/c++/11.1.0/ostream ****       */
 386:/usr/include/c++/11.1.0/ostream ****        __ostream_type&
 387:/usr/include/c++/11.1.0/ostream ****       seekp(off_type, ios_base::seekdir);
 388:/usr/include/c++/11.1.0/ostream **** 
 389:/usr/include/c++/11.1.0/ostream ****     protected:
 390:/usr/include/c++/11.1.0/ostream ****       basic_ostream()
 391:/usr/include/c++/11.1.0/ostream ****       { this->init(0); }
 392:/usr/include/c++/11.1.0/ostream **** 
 393:/usr/include/c++/11.1.0/ostream **** #if __cplusplus >= 201103L
 394:/usr/include/c++/11.1.0/ostream ****       // Non-standard constructor that does not call init()
 395:/usr/include/c++/11.1.0/ostream ****       basic_ostream(basic_iostream<_CharT, _Traits>&) { }
 396:/usr/include/c++/11.1.0/ostream **** 
 397:/usr/include/c++/11.1.0/ostream ****       basic_ostream(const basic_ostream&) = delete;
 398:/usr/include/c++/11.1.0/ostream **** 
 399:/usr/include/c++/11.1.0/ostream ****       basic_ostream(basic_ostream&& __rhs)
 400:/usr/include/c++/11.1.0/ostream ****       : __ios_type()
 401:/usr/include/c++/11.1.0/ostream ****       { __ios_type::move(__rhs); }
 402:/usr/include/c++/11.1.0/ostream **** 
 403:/usr/include/c++/11.1.0/ostream ****       // 27.7.3.3 Assign/swap
 404:/usr/include/c++/11.1.0/ostream **** 
 405:/usr/include/c++/11.1.0/ostream ****       basic_ostream& operator=(const basic_ostream&) = delete;
 406:/usr/include/c++/11.1.0/ostream **** 
 407:/usr/include/c++/11.1.0/ostream ****       basic_ostream&
 408:/usr/include/c++/11.1.0/ostream ****       operator=(basic_ostream&& __rhs)
 409:/usr/include/c++/11.1.0/ostream ****       {
 410:/usr/include/c++/11.1.0/ostream **** 	swap(__rhs);
 411:/usr/include/c++/11.1.0/ostream **** 	return *this;
 412:/usr/include/c++/11.1.0/ostream ****       }
 413:/usr/include/c++/11.1.0/ostream **** 
 414:/usr/include/c++/11.1.0/ostream ****       void
 415:/usr/include/c++/11.1.0/ostream ****       swap(basic_ostream& __rhs)
 416:/usr/include/c++/11.1.0/ostream ****       { __ios_type::swap(__rhs); }
 417:/usr/include/c++/11.1.0/ostream **** #endif
 418:/usr/include/c++/11.1.0/ostream **** 
 419:/usr/include/c++/11.1.0/ostream ****       template<typename _ValueT>
 420:/usr/include/c++/11.1.0/ostream **** 	__ostream_type&
 421:/usr/include/c++/11.1.0/ostream **** 	_M_insert(_ValueT __v);
 422:/usr/include/c++/11.1.0/ostream ****     };
 423:/usr/include/c++/11.1.0/ostream **** 
 424:/usr/include/c++/11.1.0/ostream ****   /**
 425:/usr/include/c++/11.1.0/ostream ****    *  @brief  Performs setup work for output streams.
 426:/usr/include/c++/11.1.0/ostream ****    *
 427:/usr/include/c++/11.1.0/ostream ****    *  Objects of this class are created before all of the standard
 428:/usr/include/c++/11.1.0/ostream ****    *  inserters are run.  It is responsible for <em>exception-safe prefix and
 429:/usr/include/c++/11.1.0/ostream ****    *  suffix operations</em>.
 430:/usr/include/c++/11.1.0/ostream ****   */
 431:/usr/include/c++/11.1.0/ostream ****   template <typename _CharT, typename _Traits>
 432:/usr/include/c++/11.1.0/ostream ****     class basic_ostream<_CharT, _Traits>::sentry
 433:/usr/include/c++/11.1.0/ostream ****     {
 434:/usr/include/c++/11.1.0/ostream ****       // Data Members.
 435:/usr/include/c++/11.1.0/ostream ****       bool 				_M_ok;
 436:/usr/include/c++/11.1.0/ostream ****       basic_ostream<_CharT, _Traits>& 	_M_os;
 437:/usr/include/c++/11.1.0/ostream **** 
 438:/usr/include/c++/11.1.0/ostream ****     public:
 439:/usr/include/c++/11.1.0/ostream ****       /**
 440:/usr/include/c++/11.1.0/ostream ****        *  @brief  The constructor performs preparatory work.
 441:/usr/include/c++/11.1.0/ostream ****        *  @param  __os  The output stream to guard.
 442:/usr/include/c++/11.1.0/ostream ****        *
 443:/usr/include/c++/11.1.0/ostream ****        *  If the stream state is good (@a __os.good() is true), then if the
 444:/usr/include/c++/11.1.0/ostream ****        *  stream is tied to another output stream, @c is.tie()->flush()
 445:/usr/include/c++/11.1.0/ostream ****        *  is called to synchronize the output sequences.
 446:/usr/include/c++/11.1.0/ostream ****        *
 447:/usr/include/c++/11.1.0/ostream ****        *  If the stream state is still good, then the sentry state becomes
 448:/usr/include/c++/11.1.0/ostream ****        *  true (@a okay).
 449:/usr/include/c++/11.1.0/ostream ****       */
 450:/usr/include/c++/11.1.0/ostream ****       explicit
 451:/usr/include/c++/11.1.0/ostream ****       sentry(basic_ostream<_CharT, _Traits>& __os);
 452:/usr/include/c++/11.1.0/ostream **** 
 453:/usr/include/c++/11.1.0/ostream **** #pragma GCC diagnostic push
 454:/usr/include/c++/11.1.0/ostream **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 455:/usr/include/c++/11.1.0/ostream ****       /**
 456:/usr/include/c++/11.1.0/ostream ****        *  @brief  Possibly flushes the stream.
 457:/usr/include/c++/11.1.0/ostream ****        *
 458:/usr/include/c++/11.1.0/ostream ****        *  If @c ios_base::unitbuf is set in @c os.flags(), and
 459:/usr/include/c++/11.1.0/ostream ****        *  @c std::uncaught_exception() is true, the sentry destructor calls
 460:/usr/include/c++/11.1.0/ostream ****        *  @c flush() on the output stream.
 461:/usr/include/c++/11.1.0/ostream ****       */
 462:/usr/include/c++/11.1.0/ostream ****       ~sentry()
 463:/usr/include/c++/11.1.0/ostream ****       {
 464:/usr/include/c++/11.1.0/ostream **** 	// XXX MT
 465:/usr/include/c++/11.1.0/ostream **** 	if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
 466:/usr/include/c++/11.1.0/ostream **** 	  {
 467:/usr/include/c++/11.1.0/ostream **** 	    // Can't call flush directly or else will get into recursive lock.
 468:/usr/include/c++/11.1.0/ostream **** 	    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
 469:/usr/include/c++/11.1.0/ostream **** 	      _M_os.setstate(ios_base::badbit);
 470:/usr/include/c++/11.1.0/ostream **** 	  }
 471:/usr/include/c++/11.1.0/ostream ****       }
 472:/usr/include/c++/11.1.0/ostream **** #pragma GCC diagnostic pop
 473:/usr/include/c++/11.1.0/ostream **** 
 474:/usr/include/c++/11.1.0/ostream ****       /**
 475:/usr/include/c++/11.1.0/ostream ****        *  @brief  Quick status checking.
 476:/usr/include/c++/11.1.0/ostream ****        *  @return  The sentry state.
 477:/usr/include/c++/11.1.0/ostream ****        *
 478:/usr/include/c++/11.1.0/ostream ****        *  For ease of use, sentries may be converted to booleans.  The
 479:/usr/include/c++/11.1.0/ostream ****        *  return value is that of the sentry state (true == okay).
 480:/usr/include/c++/11.1.0/ostream ****       */
 481:/usr/include/c++/11.1.0/ostream **** #if __cplusplus >= 201103L
 482:/usr/include/c++/11.1.0/ostream ****       explicit
 483:/usr/include/c++/11.1.0/ostream **** #endif
 484:/usr/include/c++/11.1.0/ostream ****       operator bool() const
 485:/usr/include/c++/11.1.0/ostream ****       { return _M_ok; }
 486:/usr/include/c++/11.1.0/ostream ****     };
 487:/usr/include/c++/11.1.0/ostream **** 
 488:/usr/include/c++/11.1.0/ostream ****   ///@{
 489:/usr/include/c++/11.1.0/ostream ****   /**
 490:/usr/include/c++/11.1.0/ostream ****    *  @brief  Character inserters
 491:/usr/include/c++/11.1.0/ostream ****    *  @param  __out  An output stream.
 492:/usr/include/c++/11.1.0/ostream ****    *  @param  __c  A character.
 493:/usr/include/c++/11.1.0/ostream ****    *  @return  out
 494:/usr/include/c++/11.1.0/ostream ****    *
 495:/usr/include/c++/11.1.0/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 496:/usr/include/c++/11.1.0/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 497:/usr/include/c++/11.1.0/ostream ****    *  status, this function inserts a single character and any required
 498:/usr/include/c++/11.1.0/ostream ****    *  padding (as determined by [22.2.2.2.2]).  @c __out.width(0) is then
 499:/usr/include/c++/11.1.0/ostream ****    *  called.
 500:/usr/include/c++/11.1.0/ostream ****    *
 501:/usr/include/c++/11.1.0/ostream ****    *  If @p __c is of type @c char and the character type of the stream is not
 502:/usr/include/c++/11.1.0/ostream ****    *  @c char, the character is widened before insertion.
 503:/usr/include/c++/11.1.0/ostream ****   */
 504:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 505:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 506:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
 507:/usr/include/c++/11.1.0/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 508:/usr/include/c++/11.1.0/ostream **** 
 509:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 510:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 511:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
 512:/usr/include/c++/11.1.0/ostream ****     { return (__out << __out.widen(__c)); }
 513:/usr/include/c++/11.1.0/ostream **** 
 514:/usr/include/c++/11.1.0/ostream ****   // Specialization
 515:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 516:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 517:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, char __c)
 518:/usr/include/c++/11.1.0/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 519:/usr/include/c++/11.1.0/ostream **** 
 520:/usr/include/c++/11.1.0/ostream ****   // Signed and unsigned
 521:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 522:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 523:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
 524:/usr/include/c++/11.1.0/ostream ****     { return (__out << static_cast<char>(__c)); }
 525:/usr/include/c++/11.1.0/ostream **** 
 526:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 527:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 528:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
 529:/usr/include/c++/11.1.0/ostream ****     { return (__out << static_cast<char>(__c)); }
 530:/usr/include/c++/11.1.0/ostream **** 
 531:/usr/include/c++/11.1.0/ostream **** #if __cplusplus > 201703L
 532:/usr/include/c++/11.1.0/ostream ****   // The following deleted overloads prevent formatting character values as
 533:/usr/include/c++/11.1.0/ostream ****   // numeric values.
 534:/usr/include/c++/11.1.0/ostream **** 
 535:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_WCHAR_T
 536:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 537:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 538:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, wchar_t) = delete;
 539:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_WCHAR_T
 540:/usr/include/c++/11.1.0/ostream **** 
 541:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_CHAR8_T
 542:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 543:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 544:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, char8_t) = delete;
 545:/usr/include/c++/11.1.0/ostream **** #endif
 546:/usr/include/c++/11.1.0/ostream **** 
 547:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 548:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 549:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, char16_t) = delete;
 550:/usr/include/c++/11.1.0/ostream **** 
 551:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 552:/usr/include/c++/11.1.0/ostream ****     basic_ostream<char, _Traits>&
 553:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>&, char32_t) = delete;
 554:/usr/include/c++/11.1.0/ostream **** 
 555:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_WCHAR_T
 556:/usr/include/c++/11.1.0/ostream **** #ifdef _GLIBCXX_USE_CHAR8_T
 557:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 558:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 559:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, char8_t) = delete;
 560:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_CHAR8_T
 561:/usr/include/c++/11.1.0/ostream **** 
 562:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 563:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 564:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, char16_t) = delete;
 565:/usr/include/c++/11.1.0/ostream **** 
 566:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 567:/usr/include/c++/11.1.0/ostream ****     basic_ostream<wchar_t, _Traits>&
 568:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<wchar_t, _Traits>&, char32_t) = delete;
 569:/usr/include/c++/11.1.0/ostream **** #endif // _GLIBCXX_USE_WCHAR_T
 570:/usr/include/c++/11.1.0/ostream **** #endif // C++20
 571:/usr/include/c++/11.1.0/ostream ****   ///@}
 572:/usr/include/c++/11.1.0/ostream **** 
 573:/usr/include/c++/11.1.0/ostream ****   ///@{
 574:/usr/include/c++/11.1.0/ostream ****   /**
 575:/usr/include/c++/11.1.0/ostream ****    *  @brief  String inserters
 576:/usr/include/c++/11.1.0/ostream ****    *  @param  __out  An output stream.
 577:/usr/include/c++/11.1.0/ostream ****    *  @param  __s  A character string.
 578:/usr/include/c++/11.1.0/ostream ****    *  @return  out
 579:/usr/include/c++/11.1.0/ostream ****    *  @pre  @p __s must be a non-NULL pointer
 580:/usr/include/c++/11.1.0/ostream ****    *
 581:/usr/include/c++/11.1.0/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 582:/usr/include/c++/11.1.0/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 583:/usr/include/c++/11.1.0/ostream ****    *  status, this function inserts @c traits::length(__s) characters starting
 584:/usr/include/c++/11.1.0/ostream ****    *  at @p __s, widened if necessary, followed by any required padding (as
 585:/usr/include/c++/11.1.0/ostream ****    *  determined by [22.2.2.2.2]).  @c __out.width(0) is then called.
 586:/usr/include/c++/11.1.0/ostream ****   */
 587:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 588:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<_CharT, _Traits>&
 589:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
 590:/usr/include/c++/11.1.0/ostream ****     {
 591:/usr/include/c++/11.1.0/ostream ****       if (!__s)
 592:/usr/include/c++/11.1.0/ostream **** 	__out.setstate(ios_base::badbit);
 593:/usr/include/c++/11.1.0/ostream ****       else
 594:/usr/include/c++/11.1.0/ostream **** 	__ostream_insert(__out, __s,
 595:/usr/include/c++/11.1.0/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 596:/usr/include/c++/11.1.0/ostream ****       return __out;
 597:/usr/include/c++/11.1.0/ostream ****     }
 598:/usr/include/c++/11.1.0/ostream **** 
 599:/usr/include/c++/11.1.0/ostream ****   template<typename _CharT, typename _Traits>
 600:/usr/include/c++/11.1.0/ostream ****     basic_ostream<_CharT, _Traits> &
 601:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
 602:/usr/include/c++/11.1.0/ostream **** 
 603:/usr/include/c++/11.1.0/ostream ****   // Partial specializations
 604:/usr/include/c++/11.1.0/ostream ****   template<typename _Traits>
 605:/usr/include/c++/11.1.0/ostream ****     inline basic_ostream<char, _Traits>&
 606:/usr/include/c++/11.1.0/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
 3219              		.loc 13 606 5 is_stmt 1 view .LVU663
 3220              	.LBB1618:
 607:/usr/include/c++/11.1.0/ostream ****     {
 608:/usr/include/c++/11.1.0/ostream ****       if (!__s)
 609:/usr/include/c++/11.1.0/ostream **** 	__out.setstate(ios_base::badbit);
 610:/usr/include/c++/11.1.0/ostream ****       else
 611:/usr/include/c++/11.1.0/ostream **** 	__ostream_insert(__out, __s,
 3221              		.loc 13 611 18 is_stmt 0 view .LVU664
 3222 008a BA040000 		movl	$4, %edx
 3222      00
 3223 008f 488D3500 		leaq	.LC12(%rip), %rsi
 3223      000000
 3224              	.LVL227:
 3225              		.loc 13 611 18 view .LVU665
 3226 0096 4C89F7   		movq	%r14, %rdi
 3227 0099 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT
 3227      00
 3228              	.LVL228:
 612:/usr/include/c++/11.1.0/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 613:/usr/include/c++/11.1.0/ostream ****       return __out;
 3229              		.loc 13 613 14 view .LVU666
 3230 009e EB1C     		jmp	.L100
 3231              	.LVL229:
 3232              	.L99:
 3233              		.loc 13 613 14 view .LVU667
 3234              	.LBE1618:
 3235              	.LBE1617:
 415:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // T is not a function type.  We just call << to print p,
 3236              		.loc 11 415 15 view .LVU668
 3237 00a0 BF010000 		movl	$1, %edi
 3237      00
 3238 00a5 48897424 		movq	%rsi, 8(%rsp)
 3238      08
 3239              	.LVL230:
 415:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // T is not a function type.  We just call << to print p,
 3240              		.loc 11 415 15 view .LVU669
 3241 00aa E8000000 		call	_ZN7testing8internal6IsTrueEb@PLT
 3241      00
 3242              	.LVL231:
 415:quantum/serial_link/tests/gtest/././internal/../gtest-printers.h ****       // T is not a function type.  We just call << to print p,
 3243              		.loc 11 415 5 view .LVU670
 3244 00af 488B7424 		movq	8(%rsp), %rsi
 3244      08
 3245              	.LVL232:
 3246              	.LBB1619:
 3247              	.LBI1619:
 245:/usr/include/c++/11.1.0/ostream ****       { return _M_insert(__p); }
 3248              		.loc 13 245 7 is_stmt 1 view .LVU671
 3249              	.LBE1619:
 3250              	.LBB1621:
 3251              	.LBB1622:
 246:/usr/include/c++/11.1.0/ostream **** 
 3252              		.loc 13 246 25 is_stmt 0 view .LVU672
 3253 00b4 4C89F7   		movq	%r14, %rdi
 3254              	.LBE1622:
 3255              	.LBE1621:
 3256              	.LBB1623:
 3257              	.LBB1620:
 3258 00b7 E8000000 		call	_ZNSo9_M_insertIPKvEERSoT_@PLT
 3258      00
 3259              	.LVL233:
 3260              	.L100:
 246:/usr/include/c++/11.1.0/ostream **** 
 3261              		.loc 13 246 25 view .LVU673
 3262              	.LBE1620:
 3263              	.LBE1623:
 3264              	.LBE1616:
 3265              	.LBE1615:
 3266              	.LBE1614:
 3267              	.LBE1613:
 3268              	.LBE1612:
 3269              	.LBE1611:
 3270              	.LBE1610:
 3271              	.LBE1609:
 3272              	.LBB1624:
 3273              	.LBI1624:
1135:/usr/include/c++/11.1.0/sstream ****       { return _M_stringbuf.str(); }
 3274              		.loc 12 1135 7 is_stmt 1 view .LVU674
 3275              	.LBB1625:
 3276              		.loc 12 1136 33 is_stmt 0 view .LVU675
 3277 00bc 4C8D7424 		leaq	16(%rsp), %r14
 3277      10
 3278 00c1 4889DE   		movq	%rbx, %rsi
 3279 00c4 4C89F7   		movq	%r14, %rdi
 3280 00c7 E8000000 		call	_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv@PLT
 3280      00
 3281              	.LVL234:
 3282              		.loc 12 1136 33 view .LVU676
 3283              	.LBE1625:
 3284              	.LBE1624:
 3285              		.loc 11 984 1 view .LVU677
 3286 00cc 4889EF   		movq	%rbp, %rdi
 3287 00cf E8000000 		call	_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 3287      00
 3288              	.LVL235:
 3289              		.loc 11 984 1 view .LVU678
 3290              	.LBE1608:
 3291              	.LBE1607:
 3292              	.LBE1606:
 3293              	.LBE1605:
1382:quantum/serial_link/tests/gtest/gtest.h **** }
 3294              		.loc 1 1382 25 view .LVU679
 3295 00d4 488B3424 		movq	(%rsp), %rsi
 3296 00d8 4531C9   		xorl	%r9d, %r9d
 3297 00db 4D89E8   		movq	%r13, %r8
 3298 00de 4C89F1   		movq	%r14, %rcx
 3299 00e1 4C89FA   		movq	%r15, %rdx
 3300 00e4 4C89E7   		movq	%r12, %rdi
 3301 00e7 E8000000 		call	_ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA
 3301      00
 3302              	.LVL236:
 3303              	.LBB1626:
 3304              	.LBI1626:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 3305              		.loc 3 657 7 is_stmt 1 view .LVU680
 3306              	.LBB1627:
 658:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 3307              		.loc 3 658 19 is_stmt 0 view .LVU681
 3308 00ec 4C89F7   		movq	%r14, %rdi
 3309 00ef E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 3309      00
 3310              	.LVL237:
 3311              	.LBB1628:
 3312              	.LBI1628:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 3313              		.loc 3 150 14 is_stmt 1 view .LVU682
 3314              	.LBB1629:
 3315              	.LBI1629:
 3316              		.loc 4 162 7 view .LVU683
 3317              	.LBB1630:
 3318              	.LBI1630:
 3319              		.loc 5 89 7 view .LVU684
 3320              		.loc 5 89 7 is_stmt 0 view .LVU685
 3321              	.LBE1630:
 3322              	.LBE1629:
 3323              	.LBE1628:
 3324              	.LBE1627:
 3325              	.LBE1626:
 3326              	.LBB1631:
 3327              	.LBI1631:
 657:/usr/include/c++/11.1.0/bits/basic_string.h ****       { _M_dispose(); }
 3328              		.loc 3 657 7 is_stmt 1 view .LVU686
 3329              	.LBB1632:
 658:/usr/include/c++/11.1.0/bits/basic_string.h **** 
 3330              		.loc 3 658 19 is_stmt 0 view .LVU687
 3331 00f4 4C89EF   		movq	%r13, %rdi
 3332 00f7 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@PLT
 3332      00
 3333              	.LVL238:
 3334              	.LBB1633:
 3335              	.LBI1633:
 150:/usr/include/c++/11.1.0/bits/basic_string.h ****       {
 3336              		.loc 3 150 14 is_stmt 1 view .LVU688
 3337              	.LBB1634:
 3338              	.LBI1634:
 3339              		.loc 4 162 7 view .LVU689
 3340              	.LBB1635:
 3341              	.LBI1635:
 3342              		.loc 5 89 7 view .LVU690
 3343              		.loc 5 89 7 is_stmt 0 view .LVU691
 3344              	.LBE1635:
 3345              	.LBE1634:
 3346              	.LBE1633:
 3347              	.LBE1632:
 3348              	.LBE1631:
1383:quantum/serial_link/tests/gtest/gtest.h **** 
 3349              		.loc 1 1383 1 view .LVU692
 3350 00fc 488B8424 		movq	472(%rsp), %rax
 3350      D8010000 
 3351 0104 64482B04 		subq	%fs:40, %rax
 3351      25280000 
 3351      00
 3352 010d 7405     		je	.L102
 3353 010f E8000000 		call	__stack_chk_fail@PLT
 3353      00
 3354              	.LVL239:
 3355              	.L102:
 3356 0114 4881C4E8 		addq	$488, %rsp
 3356      010000
 3357              		.cfi_def_cfa_offset 56
 3358 011b 4C89E0   		movq	%r12, %rax
 3359 011e 5B       		popq	%rbx
 3360              		.cfi_def_cfa_offset 48
 3361 011f 5D       		popq	%rbp
 3362              		.cfi_def_cfa_offset 40
 3363 0120 415C     		popq	%r12
 3364              		.cfi_def_cfa_offset 32
 3365              	.LVL240:
1383:quantum/serial_link/tests/gtest/gtest.h **** 
 3366              		.loc 1 1383 1 view .LVU693
 3367 0122 415D     		popq	%r13
 3368              		.cfi_def_cfa_offset 24
 3369              	.LVL241:
1383:quantum/serial_link/tests/gtest/gtest.h **** 
 3370              		.loc 1 1383 1 view .LVU694
 3371 0124 415E     		popq	%r14
 3372              		.cfi_def_cfa_offset 16
 3373 0126 415F     		popq	%r15
 3374              		.cfi_def_cfa_offset 8
 3375              	.LVL242:
1383:quantum/serial_link/tests/gtest/gtest.h **** 
 3376              		.loc 1 1383 1 view .LVU695
 3377 0128 C3       		ret
 3378              		.cfi_endproc
 3379              	.LFE4911:
 3381              		.section	.text._ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_,"axG",
 3382              		.weak	_ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
 3384              	_ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_:
 3385              	.LVL243:
 3386              	.LFB4807:
1387:quantum/serial_link/tests/gtest/gtest.h ****                             const char* rhs_expression,
 3387              		.loc 1 1387 17 is_stmt 1 view -0
 3388              		.cfi_startproc
1387:quantum/serial_link/tests/gtest/gtest.h ****                             const char* rhs_expression,
 3389              		.loc 1 1387 17 is_stmt 0 view .LVU697
 3390 0000 4154     		pushq	%r12
 3391              		.cfi_def_cfa_offset 16
 3392              		.cfi_offset 12, -16
 3393 0002 4989FC   		movq	%rdi, %r12
 3394 0005 4883EC10 		subq	$16, %rsp
 3395              		.cfi_def_cfa_offset 32
1387:quantum/serial_link/tests/gtest/gtest.h ****                             const char* rhs_expression,
 3396              		.loc 1 1387 17 view .LVU698
 3397 0009 64488B04 		movq	%fs:40, %rax
 3397      25280000 
 3397      00
 3398 0012 48894424 		movq	%rax, 8(%rsp)
 3398      08
 3399 0017 31C0     		xorl	%eax, %eax
1392:quantum/serial_link/tests/gtest/gtest.h ****     return AssertionSuccess();
 3400              		.loc 1 1392 3 view .LVU699
 3401 0019 48833900 		cmpq	$0, (%rcx)
 3402 001d 7507     		jne	.L105
1393:quantum/serial_link/tests/gtest/gtest.h ****   }
 3403              		.loc 1 1393 29 view .LVU700
 3404 001f E8000000 		call	_ZN7testing16AssertionSuccessEv@PLT
 3404      00
 3405              	.LVL244:
1393:quantum/serial_link/tests/gtest/gtest.h ****   }
 3406              		.loc 1 1393 29 view .LVU701
 3407 0024 EB05     		jmp	.L104
 3408              	.LVL245:
 3409              	.L105:
1397:quantum/serial_link/tests/gtest/gtest.h **** }
 3410              		.loc 1 1397 69 view .LVU702
 3411 0026 E8000000 		call	_ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
 3411      00
 3412              	.LVL246:
 3413              	.L104:
1398:quantum/serial_link/tests/gtest/gtest.h **** 
 3414              		.loc 1 1398 1 view .LVU703
 3415 002b 488B4424 		movq	8(%rsp), %rax
 3415      08
 3416 0030 64482B04 		subq	%fs:40, %rax
 3416      25280000 
 3416      00
 3417 0039 7405     		je	.L107
 3418 003b E8000000 		call	__stack_chk_fail@PLT
 3418      00
 3419              	.LVL247:
 3420              	.L107:
 3421 0040 4883C410 		addq	$16, %rsp
 3422              		.cfi_def_cfa_offset 16
 3423 0044 4C89E0   		movq	%r12, %rax
 3424 0047 415C     		popq	%r12
 3425              		.cfi_def_cfa_offset 8
 3426              	.LVL248:
1398:quantum/serial_link/tests/gtest/gtest.h **** 
 3427              		.loc 1 1398 1 view .LVU704
 3428 0049 C3       		ret
 3429              		.cfi_endproc
 3430              	.LFE4807:
 3432              		.section	.rodata._ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv.str1.1,"aMS",@progb
 3433              	.LC13:
 3434 0000 6E756C6C 		.string	"nullptr"
 3434      70747200 
 3435              	.LC14:
 3436 0008 28747970 		.string	"(typeof(*&test_object.buffer[0])*)triple_buffer_read_internal(sizeof(*&test_object.buffer
 3436      656F6628 
 3436      2A267465 
 3436      73745F6F 
 3436      626A6563 
 3437              		.section	.text._ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv,"ax",@progbits
 3438              		.align 2
 3439              		.globl	_ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv
 3441              	_ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv:
 3442              	.LVL249:
 3443              	.LFB4262:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3444              		.loc 8 50 51 is_stmt 1 view -0
 3445              		.cfi_startproc
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3446              		.loc 8 50 51 is_stmt 0 view .LVU706
 3447 0000 4155     		pushq	%r13
 3448              		.cfi_def_cfa_offset 16
 3449              		.cfi_offset 13, -16
 3450              	.LBB1636:
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3451              		.loc 8 51 5 view .LVU707
 3452 0002 488D3500 		leaq	test_object(%rip), %rsi
 3452      000000
 3453 0009 BF040000 		movl	$4, %edi
 3453      00
 3454              	.LVL250:
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3455              		.loc 8 51 5 view .LVU708
 3456              	.LBE1636:
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3457              		.loc 8 50 51 view .LVU709
 3458 000e 4154     		pushq	%r12
 3459              		.cfi_def_cfa_offset 24
 3460              		.cfi_offset 12, -24
 3461 0010 55       		pushq	%rbp
 3462              		.cfi_def_cfa_offset 32
 3463              		.cfi_offset 6, -32
 3464 0011 4883EC30 		subq	$48, %rsp
 3465              		.cfi_def_cfa_offset 80
  50:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3466              		.loc 8 50 51 view .LVU710
 3467 0015 64488B04 		movq	%fs:40, %rax
 3467      25280000 
 3467      00
 3468 001e 48894424 		movq	%rax, 40(%rsp)
 3468      28
 3469 0023 31C0     		xorl	%eax, %eax
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3470              		.loc 8 51 5 is_stmt 1 view .LVU711
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3471              		.loc 8 51 5 view .LVU712
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3472              		.loc 8 51 5 view .LVU713
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3473              		.loc 8 51 5 view .LVU714
 3474              	.LBB1653:
 3475              	.LBB1637:
 3476              	.LBB1638:
 3477              		.loc 1 1421 64 is_stmt 0 view .LVU715
 3478 0025 4C8D6C24 		leaq	24(%rsp), %r13
 3478      18
 3479 002a 488D6C24 		leaq	16(%rsp), %rbp
 3479      10
 3480              	.LBE1638:
 3481              	.LBE1637:
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3482              		.loc 8 51 5 view .LVU716
 3483 002f 48C74424 		movq	$0, 16(%rsp)
 3483      10000000 
 3483      00
 3484 0038 E8000000 		call	triple_buffer_read_internal@PLT
 3484      00
 3485              	.LVL251:
 3486              	.LBB1641:
 3487              	.LBB1639:
 3488              		.loc 1 1421 64 view .LVU717
 3489 003d 4C8D6424 		leaq	8(%rsp), %r12
 3489      08
 3490 0042 4989E8   		movq	%rbp, %r8
 3491 0045 4C89EF   		movq	%r13, %rdi
 3492 0048 4C89E1   		movq	%r12, %rcx
 3493 004b 488D1500 		leaq	.LC13(%rip), %rdx
 3493      000000
 3494              	.LBE1639:
 3495              	.LBE1641:
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3496              		.loc 8 51 5 view .LVU718
 3497 0052 48894424 		movq	%rax, 8(%rsp)
 3497      08
 3498              	.LVL252:
 3499              	.LBB1642:
 3500              	.LBI1637:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 3501              		.loc 1 1417 26 is_stmt 1 view .LVU719
 3502              	.LBB1640:
 3503              		.loc 1 1421 64 is_stmt 0 view .LVU720
 3504 0057 488D3500 		leaq	.LC14(%rip), %rsi
 3504      000000
 3505 005e E8000000 		call	_ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
 3505      00
 3506              	.LVL253:
 3507              		.loc 1 1421 64 view .LVU721
 3508              	.LBE1640:
 3509              	.LBE1642:
 3510              	.LBB1643:
 3511              	.LBI1643:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3512              		.loc 1 288 3 is_stmt 1 view .LVU722
 3513              	.LBB1644:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3514              		.loc 1 288 27 view .LVU723
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3515              		.loc 1 288 27 is_stmt 0 view .LVU724
 3516              	.LBE1644:
 3517              	.LBE1643:
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3518              		.loc 8 51 5 view .LVU725
 3519 0063 807C2418 		cmpb	$0, 24(%rsp)
 3519      00
 3520 0068 7547     		jne	.L110
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3521              		.loc 8 51 5 is_stmt 1 discriminator 2 view .LVU726
 3522 006a 4889EF   		movq	%rbp, %rdi
 3523 006d E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 3523      00
 3524              	.LVL254:
 3525              	.LBB1645:
 3526              	.LBI1645:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3527              		.loc 1 302 15 discriminator 2 view .LVU727
 3528              	.LBB1646:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3529              		.loc 1 302 41 discriminator 2 view .LVU728
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3530              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU729
 3531 0072 4C89EF   		movq	%r13, %rdi
 3532 0075 E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 3532      00
 3533              	.LVL255:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3534              		.loc 1 302 55 discriminator 2 view .LVU730
 3535              	.LBE1646:
 3536              	.LBE1645:
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3537              		.loc 8 51 5 discriminator 2 view .LVU731
 3538 007a B9330000 		movl	$51, %ecx
 3538      00
 3539 007f BE010000 		movl	$1, %esi
 3539      00
 3540 0084 4C89E7   		movq	%r12, %rdi
 3541              	.LBB1648:
 3542              	.LBB1647:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3543              		.loc 1 302 55 discriminator 2 view .LVU732
 3544 0087 4989C0   		movq	%rax, %r8
 3545              	.LBE1647:
 3546              	.LBE1648:
  51:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3547              		.loc 8 51 5 discriminator 2 view .LVU733
 3548 008a 488D1500 		leaq	.LC1(%rip), %rdx
 3548      000000
 3549 0091 E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 3549      00
 3550              	.LVL256:
 3551 0096 4889EE   		movq	%rbp, %rsi
 3552 0099 4C89E7   		movq	%r12, %rdi
 3553 009c E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 3553      00
 3554              	.LVL257:
 3555 00a1 4C89E7   		movq	%r12, %rdi
 3556 00a4 E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 3556      00
 3557              	.LVL258:
 3558              	.LBB1649:
 3559              	.LBI1649:
 3560              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU734
 3561              	.LBB1650:
 3562 00a9 4889EF   		movq	%rbp, %rdi
 3563 00ac E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 3563      00
 3564              	.LVL259:
 3565              	.L110:
 3566              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU735
 3567              	.LBE1650:
 3568              	.LBE1649:
 3569              	.LBB1651:
 3570              	.LBI1651:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3571              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU736
 3572              	.LBB1652:
 3573 00b1 488D7C24 		leaq	32(%rsp), %rdi
 3573      20
 3574 00b6 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3574      00
 3575              	.LVL260:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3576              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU737
 3577              	.LBE1652:
 3578              	.LBE1651:
 3579              	.LBE1653:
  52:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 3580              		.loc 8 52 1 discriminator 3 view .LVU738
 3581 00bb 488B4424 		movq	40(%rsp), %rax
 3581      28
 3582 00c0 64482B04 		subq	%fs:40, %rax
 3582      25280000 
 3582      00
 3583 00c9 7405     		je	.L111
  52:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 3584              		.loc 8 52 1 view .LVU739
 3585 00cb E8000000 		call	__stack_chk_fail@PLT
 3585      00
 3586              	.LVL261:
 3587              	.L111:
 3588 00d0 4883C430 		addq	$48, %rsp
 3589              		.cfi_def_cfa_offset 32
 3590 00d4 5D       		popq	%rbp
 3591              		.cfi_def_cfa_offset 24
 3592 00d5 415C     		popq	%r12
 3593              		.cfi_def_cfa_offset 16
 3594 00d7 415D     		popq	%r13
 3595              		.cfi_def_cfa_offset 8
 3596 00d9 C3       		ret
 3597              		.cfi_endproc
 3598              	.LFE4262:
 3600              		.section	.rodata._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestB
 3601              	.LC15:
 3602 0000 3100     		.string	"1"
 3603              	.LC16:
 3604 0002 2A726561 		.string	"*read"
 3604      6400
 3605              	.LC17:
 3606 0008 3200     		.string	"2"
 3607              		.section	.text._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBod
 3608              		.align 2
 3609              		.globl	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv
 3611              	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv:
 3612              	.LVL262:
 3613              	.LFB4276:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 3614              		.loc 8 62 76 is_stmt 1 view -0
 3615              		.cfi_startproc
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 3616              		.loc 8 62 76 is_stmt 0 view .LVU741
 3617 0000 4157     		pushq	%r15
 3618              		.cfi_def_cfa_offset 16
 3619              		.cfi_offset 15, -16
  63:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3620              		.loc 8 63 6 view .LVU742
 3621 0002 BF040000 		movl	$4, %edi
 3621      00
 3622              	.LVL263:
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 3623              		.loc 8 62 76 view .LVU743
 3624 0007 4156     		pushq	%r14
 3625              		.cfi_def_cfa_offset 24
 3626              		.cfi_offset 14, -24
 3627 0009 4155     		pushq	%r13
 3628              		.cfi_def_cfa_offset 32
 3629              		.cfi_offset 13, -32
  63:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3630              		.loc 8 63 6 view .LVU744
 3631 000b 4C8D2D00 		leaq	test_object(%rip), %r13
 3631      000000
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 3632              		.loc 8 62 76 view .LVU745
 3633 0012 4154     		pushq	%r12
 3634              		.cfi_def_cfa_offset 40
 3635              		.cfi_offset 12, -40
  63:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3636              		.loc 8 63 6 view .LVU746
 3637 0014 4C89EE   		movq	%r13, %rsi
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 3638              		.loc 8 62 76 view .LVU747
 3639 0017 55       		pushq	%rbp
 3640              		.cfi_def_cfa_offset 48
 3641              		.cfi_offset 6, -48
 3642 0018 4883EC30 		subq	$48, %rsp
 3643              		.cfi_def_cfa_offset 96
  62:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 3644              		.loc 8 62 76 view .LVU748
 3645 001c 64488B04 		movq	%fs:40, %rax
 3645      25280000 
 3645      00
 3646 0025 48894424 		movq	%rax, 40(%rsp)
 3646      28
 3647 002a 31C0     		xorl	%eax, %eax
  63:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3648              		.loc 8 63 5 is_stmt 1 view .LVU749
 3649              	.LBB1654:
 3650              	.LBB1655:
 3651              	.LBB1656:
 3652              		.loc 1 1421 64 is_stmt 0 view .LVU750
 3653 002c 4C8D7424 		leaq	24(%rsp), %r14
 3653      18
 3654 0031 488D6C24 		leaq	16(%rsp), %rbp
 3654      10
 3655              	.LBE1656:
 3656              	.LBE1655:
 3657              	.LBE1654:
  63:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3658              		.loc 8 63 6 view .LVU751
 3659 0036 E8000000 		call	triple_buffer_begin_write_internal@PLT
 3659      00
 3660              	.LVL264:
  64:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint32_t* read = triple_buffer_read(&test_object);
 3661              		.loc 8 64 5 view .LVU752
 3662 003b 4C89EF   		movq	%r13, %rdi
  63:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3663              		.loc 8 63 46 view .LVU753
 3664 003e C7000100 		movl	$1, (%rax)
 3664      0000
  64:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint32_t* read = triple_buffer_read(&test_object);
 3665              		.loc 8 64 5 is_stmt 1 view .LVU754
 3666 0044 E8000000 		call	triple_buffer_end_write_internal@PLT
 3666      00
 3667              	.LVL265:
  65:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
 3668              		.loc 8 65 5 view .LVU755
  65:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
 3669              		.loc 8 65 22 is_stmt 0 view .LVU756
 3670 0049 4C89EE   		movq	%r13, %rsi
 3671 004c BF040000 		movl	$4, %edi
 3671      00
 3672 0051 E8000000 		call	triple_buffer_read_internal@PLT
 3672      00
 3673              	.LVL266:
  66:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3674              		.loc 8 66 6 view .LVU757
 3675 0056 4C89EE   		movq	%r13, %rsi
 3676 0059 BF040000 		movl	$4, %edi
 3676      00
  65:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
 3677              		.loc 8 65 22 view .LVU758
 3678 005e 4989C4   		movq	%rax, %r12
 3679              	.LVL267:
  66:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3680              		.loc 8 66 5 is_stmt 1 view .LVU759
  66:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3681              		.loc 8 66 6 is_stmt 0 view .LVU760
 3682 0061 E8000000 		call	triple_buffer_begin_write_internal@PLT
 3682      00
 3683              	.LVL268:
  67:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*read, 1);
 3684              		.loc 8 67 5 view .LVU761
 3685 0066 4C89EF   		movq	%r13, %rdi
  66:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 3686              		.loc 8 66 46 view .LVU762
 3687 0069 C7000200 		movl	$2, (%rax)
 3687      0000
  67:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*read, 1);
 3688              		.loc 8 67 5 is_stmt 1 view .LVU763
 3689 006f E8000000 		call	triple_buffer_end_write_internal@PLT
 3689      00
 3690              	.LVL269:
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3691              		.loc 8 68 5 view .LVU764
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3692              		.loc 8 68 5 view .LVU765
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3693              		.loc 8 68 5 view .LVU766
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3694              		.loc 8 68 5 view .LVU767
 3695              	.LBB1671:
 3696              	.LBB1659:
 3697              	.LBB1657:
 3698              		.loc 1 1421 64 is_stmt 0 view .LVU768
 3699 0074 4C89E1   		movq	%r12, %rcx
 3700 0077 4989E8   		movq	%rbp, %r8
 3701 007a 4C89F7   		movq	%r14, %rdi
 3702 007d 488D1500 		leaq	.LC15(%rip), %rdx
 3702      000000
 3703 0084 488D3500 		leaq	.LC16(%rip), %rsi
 3703      000000
 3704              	.LBE1657:
 3705              	.LBE1659:
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3706              		.loc 8 68 5 view .LVU769
 3707 008b C7442410 		movl	$1, 16(%rsp)
 3707      01000000 
 3708              	.LVL270:
 3709              	.LBB1660:
 3710              	.LBI1655:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 3711              		.loc 1 1417 26 is_stmt 1 view .LVU770
 3712              	.LBB1658:
 3713              		.loc 1 1421 64 is_stmt 0 view .LVU771
 3714 0093 E8000000 		call	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 3714      00
 3715              	.LVL271:
 3716              		.loc 1 1421 64 view .LVU772
 3717              	.LBE1658:
 3718              	.LBE1660:
 3719              	.LBB1661:
 3720              	.LBI1661:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3721              		.loc 1 288 3 is_stmt 1 view .LVU773
 3722              	.LBB1662:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3723              		.loc 1 288 27 view .LVU774
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3724              		.loc 1 288 27 is_stmt 0 view .LVU775
 3725              	.LBE1662:
 3726              	.LBE1661:
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3727              		.loc 8 68 5 view .LVU776
 3728 0098 807C2418 		cmpb	$0, 24(%rsp)
 3728      00
 3729 009d 4C8D6424 		leaq	8(%rsp), %r12
 3729      08
 3730 00a2 7547     		jne	.L114
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3731              		.loc 8 68 5 is_stmt 1 discriminator 2 view .LVU777
 3732 00a4 4889EF   		movq	%rbp, %rdi
 3733 00a7 E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 3733      00
 3734              	.LVL272:
 3735              	.LBB1663:
 3736              	.LBI1663:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3737              		.loc 1 302 15 discriminator 2 view .LVU778
 3738              	.LBB1664:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3739              		.loc 1 302 41 discriminator 2 view .LVU779
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3740              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU780
 3741 00ac 4C89F7   		movq	%r14, %rdi
 3742 00af E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 3742      00
 3743              	.LVL273:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3744              		.loc 1 302 55 discriminator 2 view .LVU781
 3745              	.LBE1664:
 3746              	.LBE1663:
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3747              		.loc 8 68 5 discriminator 2 view .LVU782
 3748 00b4 B9440000 		movl	$68, %ecx
 3748      00
 3749 00b9 BE010000 		movl	$1, %esi
 3749      00
 3750 00be 4C89E7   		movq	%r12, %rdi
 3751              	.LBB1666:
 3752              	.LBB1665:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3753              		.loc 1 302 55 discriminator 2 view .LVU783
 3754 00c1 4989C0   		movq	%rax, %r8
 3755              	.LBE1665:
 3756              	.LBE1666:
  68:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 2);
 3757              		.loc 8 68 5 discriminator 2 view .LVU784
 3758 00c4 488D1500 		leaq	.LC1(%rip), %rdx
 3758      000000
 3759 00cb E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 3759      00
 3760              	.LVL274:
 3761 00d0 4889EE   		movq	%rbp, %rsi
 3762 00d3 4C89E7   		movq	%r12, %rdi
 3763 00d6 E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 3763      00
 3764              	.LVL275:
 3765 00db 4C89E7   		movq	%r12, %rdi
 3766 00de E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 3766      00
 3767              	.LVL276:
 3768              	.LBB1667:
 3769              	.LBI1667:
 3770              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU785
 3771              	.LBB1668:
 3772 00e3 4889EF   		movq	%rbp, %rdi
 3773 00e6 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 3773      00
 3774              	.LVL277:
 3775              	.L114:
 3776              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU786
 3777              	.LBE1668:
 3778              	.LBE1667:
 3779              	.LBB1669:
 3780              	.LBI1669:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3781              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU787
 3782              	.LBB1670:
 3783 00eb 4C8D7C24 		leaq	32(%rsp), %r15
 3783      20
 3784 00f0 4C89FF   		movq	%r15, %rdi
 3785 00f3 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3785      00
 3786              	.LVL278:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3787              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU788
 3788              	.LBE1670:
 3789              	.LBE1669:
 3790              	.LBE1671:
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3791              		.loc 8 69 5 is_stmt 1 discriminator 3 view .LVU789
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3792              		.loc 8 69 5 discriminator 3 view .LVU790
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3793              		.loc 8 69 5 discriminator 3 view .LVU791
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3794              		.loc 8 69 5 discriminator 3 view .LVU792
 3795              	.LBB1672:
 3796 00f8 4C89EE   		movq	%r13, %rsi
 3797 00fb BF040000 		movl	$4, %edi
 3797      00
 3798 0100 C7442410 		movl	$2, 16(%rsp)
 3798      02000000 
 3799 0108 E8000000 		call	triple_buffer_read_internal@PLT
 3799      00
 3800              	.LVL279:
 3801              	.LBB1673:
 3802              	.LBB1674:
 3803              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU793
 3804 010d 4989E8   		movq	%rbp, %r8
 3805 0110 488D1500 		leaq	.LC17(%rip), %rdx
 3805      000000
 3806 0117 4C89F7   		movq	%r14, %rdi
 3807              	.LBE1674:
 3808              	.LBE1673:
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3809              		.loc 8 69 5 discriminator 3 view .LVU794
 3810 011a 4889C1   		movq	%rax, %rcx
 3811              	.LVL280:
 3812              	.LBB1676:
 3813              	.LBI1673:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 3814              		.loc 1 1417 26 is_stmt 1 discriminator 3 view .LVU795
 3815              	.LBB1675:
 3816              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU796
 3817 011d 488D3500 		leaq	.LC10(%rip), %rsi
 3817      000000
 3818 0124 E8000000 		call	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 3818      00
 3819              	.LVL281:
 3820              		.loc 1 1421 64 discriminator 3 view .LVU797
 3821              	.LBE1675:
 3822              	.LBE1676:
 3823              	.LBB1677:
 3824              	.LBI1677:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3825              		.loc 1 288 3 is_stmt 1 discriminator 3 view .LVU798
 3826              	.LBB1678:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3827              		.loc 1 288 27 discriminator 3 view .LVU799
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3828              		.loc 1 288 27 is_stmt 0 discriminator 3 view .LVU800
 3829              	.LBE1678:
 3830              	.LBE1677:
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3831              		.loc 8 69 5 discriminator 3 view .LVU801
 3832 0129 807C2418 		cmpb	$0, 24(%rsp)
 3832      00
 3833 012e 7547     		jne	.L115
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3834              		.loc 8 69 5 is_stmt 1 discriminator 2 view .LVU802
 3835 0130 4889EF   		movq	%rbp, %rdi
 3836 0133 E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 3836      00
 3837              	.LVL282:
 3838              	.LBB1679:
 3839              	.LBI1679:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3840              		.loc 1 302 15 discriminator 2 view .LVU803
 3841              	.LBB1680:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3842              		.loc 1 302 41 discriminator 2 view .LVU804
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3843              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU805
 3844 0138 4C89F7   		movq	%r14, %rdi
 3845 013b E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 3845      00
 3846              	.LVL283:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3847              		.loc 1 302 55 discriminator 2 view .LVU806
 3848              	.LBE1680:
 3849              	.LBE1679:
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3850              		.loc 8 69 5 discriminator 2 view .LVU807
 3851 0140 B9450000 		movl	$69, %ecx
 3851      00
 3852 0145 BE010000 		movl	$1, %esi
 3852      00
 3853 014a 4C89E7   		movq	%r12, %rdi
 3854              	.LBB1682:
 3855              	.LBB1681:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3856              		.loc 1 302 55 discriminator 2 view .LVU808
 3857 014d 4989C0   		movq	%rax, %r8
 3858              	.LBE1681:
 3859              	.LBE1682:
  69:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 3860              		.loc 8 69 5 discriminator 2 view .LVU809
 3861 0150 488D1500 		leaq	.LC1(%rip), %rdx
 3861      000000
 3862 0157 E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 3862      00
 3863              	.LVL284:
 3864 015c 4889EE   		movq	%rbp, %rsi
 3865 015f 4C89E7   		movq	%r12, %rdi
 3866 0162 E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 3866      00
 3867              	.LVL285:
 3868 0167 4C89E7   		movq	%r12, %rdi
 3869 016a E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 3869      00
 3870              	.LVL286:
 3871              	.LBB1683:
 3872              	.LBI1683:
 3873              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU810
 3874              	.LBB1684:
 3875 016f 4889EF   		movq	%rbp, %rdi
 3876 0172 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 3876      00
 3877              	.LVL287:
 3878              	.L115:
 3879              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU811
 3880              	.LBE1684:
 3881              	.LBE1683:
 3882              	.LBB1685:
 3883              	.LBI1685:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3884              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU812
 3885              	.LBB1686:
 3886 0177 4C89FF   		movq	%r15, %rdi
 3887 017a E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3887      00
 3888              	.LVL288:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3889              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU813
 3890              	.LBE1686:
 3891              	.LBE1685:
 3892              	.LBE1672:
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3893              		.loc 8 70 5 is_stmt 1 discriminator 3 view .LVU814
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3894              		.loc 8 70 5 discriminator 3 view .LVU815
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3895              		.loc 8 70 5 discriminator 3 view .LVU816
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3896              		.loc 8 70 5 discriminator 3 view .LVU817
 3897              	.LBB1687:
 3898 017f 4C89EE   		movq	%r13, %rsi
 3899 0182 BF040000 		movl	$4, %edi
 3899      00
 3900 0187 48C74424 		movq	$0, 16(%rsp)
 3900      10000000 
 3900      00
 3901 0190 E8000000 		call	triple_buffer_read_internal@PLT
 3901      00
 3902              	.LVL289:
 3903              	.LBB1688:
 3904              	.LBB1689:
 3905              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU818
 3906 0195 4989E8   		movq	%rbp, %r8
 3907 0198 4C89E1   		movq	%r12, %rcx
 3908 019b 4C89F7   		movq	%r14, %rdi
 3909 019e 488D1500 		leaq	.LC13(%rip), %rdx
 3909      000000
 3910 01a5 488D3500 		leaq	.LC14(%rip), %rsi
 3910      000000
 3911              	.LBE1689:
 3912              	.LBE1688:
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3913              		.loc 8 70 5 discriminator 3 view .LVU819
 3914 01ac 48894424 		movq	%rax, 8(%rsp)
 3914      08
 3915              	.LVL290:
 3916              	.LBB1691:
 3917              	.LBI1688:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 3918              		.loc 1 1417 26 is_stmt 1 discriminator 3 view .LVU820
 3919              	.LBB1690:
 3920              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU821
 3921 01b1 E8000000 		call	_ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
 3921      00
 3922              	.LVL291:
 3923              		.loc 1 1421 64 discriminator 3 view .LVU822
 3924              	.LBE1690:
 3925              	.LBE1691:
 3926              	.LBB1692:
 3927              	.LBI1692:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3928              		.loc 1 288 3 is_stmt 1 discriminator 3 view .LVU823
 3929              	.LBB1693:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3930              		.loc 1 288 27 discriminator 3 view .LVU824
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 3931              		.loc 1 288 27 is_stmt 0 discriminator 3 view .LVU825
 3932              	.LBE1693:
 3933              	.LBE1692:
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3934              		.loc 8 70 5 discriminator 3 view .LVU826
 3935 01b6 807C2418 		cmpb	$0, 24(%rsp)
 3935      00
 3936 01bb 7547     		jne	.L116
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3937              		.loc 8 70 5 is_stmt 1 discriminator 2 view .LVU827
 3938 01bd 4889EF   		movq	%rbp, %rdi
 3939 01c0 E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 3939      00
 3940              	.LVL292:
 3941              	.LBB1694:
 3942              	.LBI1694:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3943              		.loc 1 302 15 discriminator 2 view .LVU828
 3944              	.LBB1695:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3945              		.loc 1 302 41 discriminator 2 view .LVU829
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3946              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU830
 3947 01c5 4C89F7   		movq	%r14, %rdi
 3948 01c8 E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 3948      00
 3949              	.LVL293:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3950              		.loc 1 302 55 discriminator 2 view .LVU831
 3951              	.LBE1695:
 3952              	.LBE1694:
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3953              		.loc 8 70 5 discriminator 2 view .LVU832
 3954 01cd B9460000 		movl	$70, %ecx
 3954      00
 3955 01d2 BE010000 		movl	$1, %esi
 3955      00
 3956 01d7 4C89E7   		movq	%r12, %rdi
 3957              	.LBB1697:
 3958              	.LBB1696:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 3959              		.loc 1 302 55 discriminator 2 view .LVU833
 3960 01da 4989C0   		movq	%rax, %r8
 3961              	.LBE1696:
 3962              	.LBE1697:
  70:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 3963              		.loc 8 70 5 discriminator 2 view .LVU834
 3964 01dd 488D1500 		leaq	.LC1(%rip), %rdx
 3964      000000
 3965 01e4 E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 3965      00
 3966              	.LVL294:
 3967 01e9 4889EE   		movq	%rbp, %rsi
 3968 01ec 4C89E7   		movq	%r12, %rdi
 3969 01ef E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 3969      00
 3970              	.LVL295:
 3971 01f4 4C89E7   		movq	%r12, %rdi
 3972 01f7 E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 3972      00
 3973              	.LVL296:
 3974              	.LBB1698:
 3975              	.LBI1698:
 3976              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU835
 3977              	.LBB1699:
 3978 01fc 4889EF   		movq	%rbp, %rdi
 3979 01ff E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 3979      00
 3980              	.LVL297:
 3981              	.L116:
 3982              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU836
 3983              	.LBE1699:
 3984              	.LBE1698:
 3985              	.LBB1700:
 3986              	.LBI1700:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3987              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU837
 3988              	.LBB1701:
 3989 0204 4C89FF   		movq	%r15, %rdi
 3990 0207 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 3990      00
 3991              	.LVL298:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 3992              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU838
 3993              	.LBE1701:
 3994              	.LBE1700:
 3995              	.LBE1687:
  71:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 3996              		.loc 8 71 1 discriminator 3 view .LVU839
 3997 020c 488B4424 		movq	40(%rsp), %rax
 3997      28
 3998 0211 64482B04 		subq	%fs:40, %rax
 3998      25280000 
 3998      00
 3999 021a 7405     		je	.L117
  71:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 4000              		.loc 8 71 1 view .LVU840
 4001 021c E8000000 		call	__stack_chk_fail@PLT
 4001      00
 4002              	.LVL299:
 4003              	.L117:
 4004 0221 4883C430 		addq	$48, %rsp
 4005              		.cfi_def_cfa_offset 48
 4006 0225 5D       		popq	%rbp
 4007              		.cfi_def_cfa_offset 40
 4008 0226 415C     		popq	%r12
 4009              		.cfi_def_cfa_offset 32
 4010              	.LVL300:
  71:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** 
 4011              		.loc 8 71 1 view .LVU841
 4012 0228 415D     		popq	%r13
 4013              		.cfi_def_cfa_offset 24
 4014 022a 415E     		popq	%r14
 4015              		.cfi_def_cfa_offset 16
 4016 022c 415F     		popq	%r15
 4017              		.cfi_def_cfa_offset 8
 4018 022e C3       		ret
 4019              		.cfi_endproc
 4020              	.LFE4276:
 4022              		.section	.rodata._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBody
 4023              	.LC18:
 4024 0000 3300     		.string	"3"
 4025              		.section	.text._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBodyEv
 4026              		.align 2
 4027              		.globl	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBodyEv
 4029              	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBodyEv:
 4030              	.LVL301:
 4031              	.LFB4283:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 4032              		.loc 8 73 73 is_stmt 1 view -0
 4033              		.cfi_startproc
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 4034              		.loc 8 73 73 is_stmt 0 view .LVU843
 4035 0000 4157     		pushq	%r15
 4036              		.cfi_def_cfa_offset 16
 4037              		.cfi_offset 15, -16
  74:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4038              		.loc 8 74 6 view .LVU844
 4039 0002 BF040000 		movl	$4, %edi
 4039      00
 4040              	.LVL302:
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 4041              		.loc 8 73 73 view .LVU845
 4042 0007 4156     		pushq	%r14
 4043              		.cfi_def_cfa_offset 24
 4044              		.cfi_offset 14, -24
 4045 0009 4155     		pushq	%r13
 4046              		.cfi_def_cfa_offset 32
 4047              		.cfi_offset 13, -32
  74:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4048              		.loc 8 74 6 view .LVU846
 4049 000b 4C8D2D00 		leaq	test_object(%rip), %r13
 4049      000000
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 4050              		.loc 8 73 73 view .LVU847
 4051 0012 4154     		pushq	%r12
 4052              		.cfi_def_cfa_offset 40
 4053              		.cfi_offset 12, -40
  74:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4054              		.loc 8 74 6 view .LVU848
 4055 0014 4C89EE   		movq	%r13, %rsi
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 4056              		.loc 8 73 73 view .LVU849
 4057 0017 55       		pushq	%rbp
 4058              		.cfi_def_cfa_offset 48
 4059              		.cfi_offset 6, -48
 4060 0018 4883EC30 		subq	$48, %rsp
 4061              		.cfi_def_cfa_offset 96
  73:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 1;
 4062              		.loc 8 73 73 view .LVU850
 4063 001c 64488B04 		movq	%fs:40, %rax
 4063      25280000 
 4063      00
 4064 0025 48894424 		movq	%rax, 40(%rsp)
 4064      28
 4065 002a 31C0     		xorl	%eax, %eax
  74:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4066              		.loc 8 74 5 is_stmt 1 view .LVU851
 4067              	.LBB1702:
 4068              	.LBB1703:
 4069              	.LBB1704:
 4070              		.loc 1 1421 64 is_stmt 0 view .LVU852
 4071 002c 4C8D7424 		leaq	24(%rsp), %r14
 4071      18
 4072 0031 488D6C24 		leaq	16(%rsp), %rbp
 4072      10
 4073              	.LBE1704:
 4074              	.LBE1703:
 4075              	.LBE1702:
  74:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4076              		.loc 8 74 6 view .LVU853
 4077 0036 E8000000 		call	triple_buffer_begin_write_internal@PLT
 4077      00
 4078              	.LVL303:
  75:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint32_t* read = triple_buffer_read(&test_object);
 4079              		.loc 8 75 5 view .LVU854
 4080 003b 4C89EF   		movq	%r13, %rdi
  74:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4081              		.loc 8 74 46 view .LVU855
 4082 003e C7000100 		movl	$1, (%rax)
 4082      0000
  75:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     uint32_t* read = triple_buffer_read(&test_object);
 4083              		.loc 8 75 5 is_stmt 1 view .LVU856
 4084 0044 E8000000 		call	triple_buffer_end_write_internal@PLT
 4084      00
 4085              	.LVL304:
  76:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
 4086              		.loc 8 76 5 view .LVU857
  76:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
 4087              		.loc 8 76 22 is_stmt 0 view .LVU858
 4088 0049 4C89EE   		movq	%r13, %rsi
 4089 004c BF040000 		movl	$4, %edi
 4089      00
 4090 0051 E8000000 		call	triple_buffer_read_internal@PLT
 4090      00
 4091              	.LVL305:
  77:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4092              		.loc 8 77 6 view .LVU859
 4093 0056 4C89EE   		movq	%r13, %rsi
 4094 0059 BF040000 		movl	$4, %edi
 4094      00
  76:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 2;
 4095              		.loc 8 76 22 view .LVU860
 4096 005e 4989C4   		movq	%rax, %r12
 4097              	.LVL306:
  77:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4098              		.loc 8 77 5 is_stmt 1 view .LVU861
  77:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4099              		.loc 8 77 6 is_stmt 0 view .LVU862
 4100 0061 E8000000 		call	triple_buffer_begin_write_internal@PLT
 4100      00
 4101              	.LVL307:
  78:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 3;
 4102              		.loc 8 78 5 view .LVU863
 4103 0066 4C89EF   		movq	%r13, %rdi
  77:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4104              		.loc 8 77 46 view .LVU864
 4105 0069 C7000200 		movl	$2, (%rax)
 4105      0000
  78:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     *triple_buffer_begin_write(&test_object) = 3;
 4106              		.loc 8 78 5 is_stmt 1 view .LVU865
 4107 006f E8000000 		call	triple_buffer_end_write_internal@PLT
 4107      00
 4108              	.LVL308:
  79:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4109              		.loc 8 79 5 view .LVU866
  79:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4110              		.loc 8 79 6 is_stmt 0 view .LVU867
 4111 0074 4C89EE   		movq	%r13, %rsi
 4112 0077 BF040000 		movl	$4, %edi
 4112      00
 4113 007c E8000000 		call	triple_buffer_begin_write_internal@PLT
 4113      00
 4114              	.LVL309:
  80:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*read, 1);
 4115              		.loc 8 80 5 view .LVU868
 4116 0081 4C89EF   		movq	%r13, %rdi
  79:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     triple_buffer_end_write(&test_object);
 4117              		.loc 8 79 46 view .LVU869
 4118 0084 C7000300 		movl	$3, (%rax)
 4118      0000
  80:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*read, 1);
 4119              		.loc 8 80 5 is_stmt 1 view .LVU870
 4120 008a E8000000 		call	triple_buffer_end_write_internal@PLT
 4120      00
 4121              	.LVL310:
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4122              		.loc 8 81 5 view .LVU871
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4123              		.loc 8 81 5 view .LVU872
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4124              		.loc 8 81 5 view .LVU873
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4125              		.loc 8 81 5 view .LVU874
 4126              	.LBB1719:
 4127              	.LBB1707:
 4128              	.LBB1705:
 4129              		.loc 1 1421 64 is_stmt 0 view .LVU875
 4130 008f 4C89E1   		movq	%r12, %rcx
 4131 0092 4989E8   		movq	%rbp, %r8
 4132 0095 4C89F7   		movq	%r14, %rdi
 4133 0098 488D1500 		leaq	.LC15(%rip), %rdx
 4133      000000
 4134 009f 488D3500 		leaq	.LC16(%rip), %rsi
 4134      000000
 4135              	.LBE1705:
 4136              	.LBE1707:
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4137              		.loc 8 81 5 view .LVU876
 4138 00a6 C7442410 		movl	$1, 16(%rsp)
 4138      01000000 
 4139              	.LVL311:
 4140              	.LBB1708:
 4141              	.LBI1703:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 4142              		.loc 1 1417 26 is_stmt 1 view .LVU877
 4143              	.LBB1706:
 4144              		.loc 1 1421 64 is_stmt 0 view .LVU878
 4145 00ae E8000000 		call	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 4145      00
 4146              	.LVL312:
 4147              		.loc 1 1421 64 view .LVU879
 4148              	.LBE1706:
 4149              	.LBE1708:
 4150              	.LBB1709:
 4151              	.LBI1709:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4152              		.loc 1 288 3 is_stmt 1 view .LVU880
 4153              	.LBB1710:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4154              		.loc 1 288 27 view .LVU881
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4155              		.loc 1 288 27 is_stmt 0 view .LVU882
 4156              	.LBE1710:
 4157              	.LBE1709:
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4158              		.loc 8 81 5 view .LVU883
 4159 00b3 807C2418 		cmpb	$0, 24(%rsp)
 4159      00
 4160 00b8 4C8D6424 		leaq	8(%rsp), %r12
 4160      08
 4161 00bd 7547     		jne	.L120
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4162              		.loc 8 81 5 is_stmt 1 discriminator 2 view .LVU884
 4163 00bf 4889EF   		movq	%rbp, %rdi
 4164 00c2 E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 4164      00
 4165              	.LVL313:
 4166              	.LBB1711:
 4167              	.LBI1711:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4168              		.loc 1 302 15 discriminator 2 view .LVU885
 4169              	.LBB1712:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4170              		.loc 1 302 41 discriminator 2 view .LVU886
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4171              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU887
 4172 00c7 4C89F7   		movq	%r14, %rdi
 4173 00ca E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 4173      00
 4174              	.LVL314:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4175              		.loc 1 302 55 discriminator 2 view .LVU888
 4176              	.LBE1712:
 4177              	.LBE1711:
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4178              		.loc 8 81 5 discriminator 2 view .LVU889
 4179 00cf B9510000 		movl	$81, %ecx
 4179      00
 4180 00d4 BE010000 		movl	$1, %esi
 4180      00
 4181 00d9 4C89E7   		movq	%r12, %rdi
 4182              	.LBB1714:
 4183              	.LBB1713:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4184              		.loc 1 302 55 discriminator 2 view .LVU890
 4185 00dc 4989C0   		movq	%rax, %r8
 4186              	.LBE1713:
 4187              	.LBE1714:
  81:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(*triple_buffer_read(&test_object), 3);
 4188              		.loc 8 81 5 discriminator 2 view .LVU891
 4189 00df 488D1500 		leaq	.LC1(%rip), %rdx
 4189      000000
 4190 00e6 E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 4190      00
 4191              	.LVL315:
 4192 00eb 4889EE   		movq	%rbp, %rsi
 4193 00ee 4C89E7   		movq	%r12, %rdi
 4194 00f1 E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 4194      00
 4195              	.LVL316:
 4196 00f6 4C89E7   		movq	%r12, %rdi
 4197 00f9 E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 4197      00
 4198              	.LVL317:
 4199              	.LBB1715:
 4200              	.LBI1715:
 4201              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU892
 4202              	.LBB1716:
 4203 00fe 4889EF   		movq	%rbp, %rdi
 4204 0101 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 4204      00
 4205              	.LVL318:
 4206              	.L120:
 4207              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU893
 4208              	.LBE1716:
 4209              	.LBE1715:
 4210              	.LBB1717:
 4211              	.LBI1717:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 4212              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU894
 4213              	.LBB1718:
 4214 0106 4C8D7C24 		leaq	32(%rsp), %r15
 4214      20
 4215 010b 4C89FF   		movq	%r15, %rdi
 4216 010e E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 4216      00
 4217              	.LVL319:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 4218              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU895
 4219              	.LBE1718:
 4220              	.LBE1717:
 4221              	.LBE1719:
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4222              		.loc 8 82 5 is_stmt 1 discriminator 3 view .LVU896
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4223              		.loc 8 82 5 discriminator 3 view .LVU897
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4224              		.loc 8 82 5 discriminator 3 view .LVU898
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4225              		.loc 8 82 5 discriminator 3 view .LVU899
 4226              	.LBB1720:
 4227 0113 4C89EE   		movq	%r13, %rsi
 4228 0116 BF040000 		movl	$4, %edi
 4228      00
 4229 011b C7442410 		movl	$3, 16(%rsp)
 4229      03000000 
 4230 0123 E8000000 		call	triple_buffer_read_internal@PLT
 4230      00
 4231              	.LVL320:
 4232              	.LBB1721:
 4233              	.LBB1722:
 4234              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU900
 4235 0128 4989E8   		movq	%rbp, %r8
 4236 012b 488D1500 		leaq	.LC18(%rip), %rdx
 4236      000000
 4237 0132 4C89F7   		movq	%r14, %rdi
 4238              	.LBE1722:
 4239              	.LBE1721:
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4240              		.loc 8 82 5 discriminator 3 view .LVU901
 4241 0135 4889C1   		movq	%rax, %rcx
 4242              	.LVL321:
 4243              	.LBB1724:
 4244              	.LBI1721:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 4245              		.loc 1 1417 26 is_stmt 1 discriminator 3 view .LVU902
 4246              	.LBB1723:
 4247              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU903
 4248 0138 488D3500 		leaq	.LC10(%rip), %rsi
 4248      000000
 4249 013f E8000000 		call	_ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
 4249      00
 4250              	.LVL322:
 4251              		.loc 1 1421 64 discriminator 3 view .LVU904
 4252              	.LBE1723:
 4253              	.LBE1724:
 4254              	.LBB1725:
 4255              	.LBI1725:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4256              		.loc 1 288 3 is_stmt 1 discriminator 3 view .LVU905
 4257              	.LBB1726:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4258              		.loc 1 288 27 discriminator 3 view .LVU906
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4259              		.loc 1 288 27 is_stmt 0 discriminator 3 view .LVU907
 4260              	.LBE1726:
 4261              	.LBE1725:
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4262              		.loc 8 82 5 discriminator 3 view .LVU908
 4263 0144 807C2418 		cmpb	$0, 24(%rsp)
 4263      00
 4264 0149 7547     		jne	.L121
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4265              		.loc 8 82 5 is_stmt 1 discriminator 2 view .LVU909
 4266 014b 4889EF   		movq	%rbp, %rdi
 4267 014e E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 4267      00
 4268              	.LVL323:
 4269              	.LBB1727:
 4270              	.LBI1727:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4271              		.loc 1 302 15 discriminator 2 view .LVU910
 4272              	.LBB1728:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4273              		.loc 1 302 41 discriminator 2 view .LVU911
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4274              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU912
 4275 0153 4C89F7   		movq	%r14, %rdi
 4276 0156 E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 4276      00
 4277              	.LVL324:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4278              		.loc 1 302 55 discriminator 2 view .LVU913
 4279              	.LBE1728:
 4280              	.LBE1727:
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4281              		.loc 8 82 5 discriminator 2 view .LVU914
 4282 015b B9520000 		movl	$82, %ecx
 4282      00
 4283 0160 BE010000 		movl	$1, %esi
 4283      00
 4284 0165 4C89E7   		movq	%r12, %rdi
 4285              	.LBB1730:
 4286              	.LBB1729:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4287              		.loc 1 302 55 discriminator 2 view .LVU915
 4288 0168 4989C0   		movq	%rax, %r8
 4289              	.LBE1729:
 4290              	.LBE1730:
  82:quantum/serial_link/tests/triple_buffered_object_tests.cpp ****     EXPECT_EQ(triple_buffer_read(&test_object), nullptr);
 4291              		.loc 8 82 5 discriminator 2 view .LVU916
 4292 016b 488D1500 		leaq	.LC1(%rip), %rdx
 4292      000000
 4293 0172 E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 4293      00
 4294              	.LVL325:
 4295 0177 4889EE   		movq	%rbp, %rsi
 4296 017a 4C89E7   		movq	%r12, %rdi
 4297 017d E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 4297      00
 4298              	.LVL326:
 4299 0182 4C89E7   		movq	%r12, %rdi
 4300 0185 E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 4300      00
 4301              	.LVL327:
 4302              	.LBB1731:
 4303              	.LBI1731:
 4304              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU917
 4305              	.LBB1732:
 4306 018a 4889EF   		movq	%rbp, %rdi
 4307 018d E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 4307      00
 4308              	.LVL328:
 4309              	.L121:
 4310              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU918
 4311              	.LBE1732:
 4312              	.LBE1731:
 4313              	.LBB1733:
 4314              	.LBI1733:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 4315              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU919
 4316              	.LBB1734:
 4317 0192 4C89FF   		movq	%r15, %rdi
 4318 0195 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 4318      00
 4319              	.LVL329:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 4320              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU920
 4321              	.LBE1734:
 4322              	.LBE1733:
 4323              	.LBE1720:
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4324              		.loc 8 83 5 is_stmt 1 discriminator 3 view .LVU921
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4325              		.loc 8 83 5 discriminator 3 view .LVU922
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4326              		.loc 8 83 5 discriminator 3 view .LVU923
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4327              		.loc 8 83 5 discriminator 3 view .LVU924
 4328              	.LBB1735:
 4329 019a 4C89EE   		movq	%r13, %rsi
 4330 019d BF040000 		movl	$4, %edi
 4330      00
 4331 01a2 48C74424 		movq	$0, 16(%rsp)
 4331      10000000 
 4331      00
 4332 01ab E8000000 		call	triple_buffer_read_internal@PLT
 4332      00
 4333              	.LVL330:
 4334              	.LBB1736:
 4335              	.LBB1737:
 4336              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU925
 4337 01b0 4989E8   		movq	%rbp, %r8
 4338 01b3 4C89E1   		movq	%r12, %rcx
 4339 01b6 4C89F7   		movq	%r14, %rdi
 4340 01b9 488D1500 		leaq	.LC13(%rip), %rdx
 4340      000000
 4341 01c0 488D3500 		leaq	.LC14(%rip), %rsi
 4341      000000
 4342              	.LBE1737:
 4343              	.LBE1736:
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4344              		.loc 8 83 5 discriminator 3 view .LVU926
 4345 01c7 48894424 		movq	%rax, 8(%rsp)
 4345      08
 4346              	.LVL331:
 4347              	.LBB1739:
 4348              	.LBI1736:
1417:quantum/serial_link/tests/gtest/gtest.h ****                                  const char* rhs_expression,
 4349              		.loc 1 1417 26 is_stmt 1 discriminator 3 view .LVU927
 4350              	.LBB1738:
 4351              		.loc 1 1421 64 is_stmt 0 discriminator 3 view .LVU928
 4352 01cc E8000000 		call	_ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
 4352      00
 4353              	.LVL332:
 4354              		.loc 1 1421 64 discriminator 3 view .LVU929
 4355              	.LBE1738:
 4356              	.LBE1739:
 4357              	.LBB1740:
 4358              	.LBI1740:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4359              		.loc 1 288 3 is_stmt 1 discriminator 3 view .LVU930
 4360              	.LBB1741:
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4361              		.loc 1 288 27 discriminator 3 view .LVU931
 288:quantum/serial_link/tests/gtest/gtest.h **** 
 4362              		.loc 1 288 27 is_stmt 0 discriminator 3 view .LVU932
 4363              	.LBE1741:
 4364              	.LBE1740:
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4365              		.loc 8 83 5 discriminator 3 view .LVU933
 4366 01d1 807C2418 		cmpb	$0, 24(%rsp)
 4366      00
 4367 01d6 7547     		jne	.L122
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4368              		.loc 8 83 5 is_stmt 1 discriminator 2 view .LVU934
 4369 01d8 4889EF   		movq	%rbp, %rdi
 4370 01db E8000000 		call	_ZN7testing7MessageC1Ev@PLT
 4370      00
 4371              	.LVL333:
 4372              	.LBB1742:
 4373              	.LBI1742:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4374              		.loc 1 302 15 discriminator 2 view .LVU935
 4375              	.LBB1743:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4376              		.loc 1 302 41 discriminator 2 view .LVU936
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4377              		.loc 1 302 55 is_stmt 0 discriminator 2 view .LVU937
 4378 01e0 4C89F7   		movq	%r14, %rdi
 4379 01e3 E8000000 		call	_ZNK7testing15AssertionResult7messageEv
 4379      00
 4380              	.LVL334:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4381              		.loc 1 302 55 discriminator 2 view .LVU938
 4382              	.LBE1743:
 4383              	.LBE1742:
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4384              		.loc 8 83 5 discriminator 2 view .LVU939
 4385 01e8 B9530000 		movl	$83, %ecx
 4385      00
 4386 01ed BE010000 		movl	$1, %esi
 4386      00
 4387 01f2 4C89E7   		movq	%r12, %rdi
 4388              	.LBB1745:
 4389              	.LBB1744:
 302:quantum/serial_link/tests/gtest/gtest.h **** 
 4390              		.loc 1 302 55 discriminator 2 view .LVU940
 4391 01f5 4989C0   		movq	%rax, %r8
 4392              	.LBE1744:
 4393              	.LBE1745:
  83:quantum/serial_link/tests/triple_buffered_object_tests.cpp **** }
 4394              		.loc 8 83 5 discriminator 2 view .LVU941
 4395 01f8 488D1500 		leaq	.LC1(%rip), %rdx
 4395      000000
 4396 01ff E8000000 		call	_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_@PLT
 4396      00
 4397              	.LVL335:
 4398 0204 4889EE   		movq	%rbp, %rsi
 4399 0207 4C89E7   		movq	%r12, %rdi
 4400 020a E8000000 		call	_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE@PLT
 4400      00
 4401              	.LVL336:
 4402 020f 4C89E7   		movq	%r12, %rdi
 4403 0212 E8000000 		call	_ZN7testing8internal12AssertHelperD1Ev@PLT
 4403      00
 4404              	.LVL337:
 4405              	.LBB1746:
 4406              	.LBI1746:
 4407              		.loc 14 85 18 is_stmt 1 discriminator 2 view .LVU942
 4408              	.LBB1747:
 4409 0217 4889EF   		movq	%rbp, %rdi
 4410 021a E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED
 4410      00
 4411              	.LVL338:
 4412              	.L122:
 4413              		.loc 14 85 18 is_stmt 0 discriminator 2 view .LVU943
 4414              	.LBE1747:
 4415              	.LBE1746:
 4416              	.LBB1748:
 4417              	.LBI1748:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 4418              		.loc 1 256 18 is_stmt 1 discriminator 3 view .LVU944
 4419              	.LBB1749:
 4420 021f 4C89FF   		movq	%r15, %rdi
 4421 0222 E8000000 		call	_ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
 4421      00
 4422              	.LVL339:
 256:quantum/serial_link/tests/gtest/gtest.h ****  public:
 4423              		.loc 1 256 18 is_stmt 0 discriminator 3 view .LVU945
 4424              	.LBE1749:
 4425              	.LBE1748:
 4426              	.LBE1735:
 4427              		.loc 8 84 1 discriminator 3 view .LVU946
 4428 0227 488B4424 		movq	40(%rsp), %rax
 4428      28
 4429 022c 64482B04 		subq	%fs:40, %rax
 4429      25280000 
 4429      00
 4430 0235 7405     		je	.L123
 4431              		.loc 8 84 1 view .LVU947
 4432 0237 E8000000 		call	__stack_chk_fail@PLT
 4432      00
 4433              	.LVL340:
 4434              	.L123:
 4435 023c 4883C430 		addq	$48, %rsp
 4436              		.cfi_def_cfa_offset 48
 4437 0240 5D       		popq	%rbp
 4438              		.cfi_def_cfa_offset 40
 4439 0241 415C     		popq	%r12
 4440              		.cfi_def_cfa_offset 32
 4441              	.LVL341:
 4442              		.loc 8 84 1 view .LVU948
 4443 0243 415D     		popq	%r13
 4444              		.cfi_def_cfa_offset 24
 4445 0245 415E     		popq	%r14
 4446              		.cfi_def_cfa_offset 16
 4447 0247 415F     		popq	%r15
 4448              		.cfi_def_cfa_offset 8
 4449 0249 C3       		ret
 4450              		.cfi_endproc
 4451              	.LFE4283:
 4453              		.section	.text.startup._GLOBAL__sub_I_test_object,"ax",@progbits
 4455              	_GLOBAL__sub_I_test_object:
 4456              	.LFB5253:
 4457              		.loc 8 84 1 is_stmt 1 view -0
 4458              		.cfi_startproc
 4459              		.loc 8 84 1 is_stmt 0 view .LVU950
 4460 0000 E9000000 		jmp	_Z41__static_initialization_and_destruction_0ii.constprop.0
 4460      00
 4461              	.LVL342:
 4462              		.cfi_endproc
 4463              	.LFE5253:
 4465              		.section	.init_array,"aw"
 4466              		.align 8
 4467 0000 00000000 		.quad	_GLOBAL__sub_I_test_object
 4467      00000000 
 4468              		.weak	_ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E
 4469              		.section	.bss._ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E,"awG",@nobits,_ZN
 4472              	_ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E:
 4473 0000 00       		.zero	1
 4474              		.weak	_ZTSN7testing8internal15TestFactoryBaseE
 4475              		.section	.rodata._ZTSN7testing8internal15TestFactoryBaseE,"aG",@progbits,_ZTSN7testing8internal15T
 4476              		.align 32
 4479              	_ZTSN7testing8internal15TestFactoryBaseE:
 4480 0000 4E377465 		.string	"N7testing8internal15TestFactoryBaseE"
 4480      7374696E 
 4480      6738696E 
 4480      7465726E 
 4480      616C3135 
 4481              		.weak	_ZTIN7testing8internal15TestFactoryBaseE
 4482              		.section	.data.rel.ro._ZTIN7testing8internal15TestFactoryBaseE,"awG",@progbits,_ZTIN7testing8inter
 4483              		.align 8
 4486              	_ZTIN7testing8internal15TestFactoryBaseE:
 4487 0000 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 4487      00000000 
 4488 0008 00000000 		.quad	_ZTSN7testing8internal15TestFactoryBaseE
 4488      00000000 
 4489              		.weak	_ZTS20TripleBufferedObject
 4490              		.section	.rodata._ZTS20TripleBufferedObject,"aG",@progbits,_ZTS20TripleBufferedObject,comdat
 4491              		.align 16
 4494              	_ZTS20TripleBufferedObject:
 4495 0000 32305472 		.string	"20TripleBufferedObject"
 4495      69706C65 
 4495      42756666 
 4495      65726564 
 4495      4F626A65 
 4496              		.weak	_ZTI20TripleBufferedObject
 4497              		.section	.data.rel.ro._ZTI20TripleBufferedObject,"awG",@progbits,_ZTI20TripleBufferedObject,comdat
 4498              		.align 8
 4501              	_ZTI20TripleBufferedObject:
 4502 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4502      00000000 
 4503 0008 00000000 		.quad	_ZTS20TripleBufferedObject
 4503      00000000 
 4504 0010 00000000 		.quad	_ZTIN7testing4TestE
 4504      00000000 
 4505              		.weak	_ZTS49TripleBufferedObject_writes_and_reads_object_Test
 4506              		.section	.rodata._ZTS49TripleBufferedObject_writes_and_reads_object_Test,"aG",@progbits,_ZTS49Trip
 4507              		.align 32
 4510              	_ZTS49TripleBufferedObject_writes_and_reads_object_Test:
 4511 0000 34395472 		.string	"49TripleBufferedObject_writes_and_reads_object_Test"
 4511      69706C65 
 4511      42756666 
 4511      65726564 
 4511      4F626A65 
 4512              		.weak	_ZTI49TripleBufferedObject_writes_and_reads_object_Test
 4513              		.section	.data.rel.ro._ZTI49TripleBufferedObject_writes_and_reads_object_Test,"awG",@progbits,_ZTI
 4514              		.align 8
 4517              	_ZTI49TripleBufferedObject_writes_and_reads_object_Test:
 4518 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4518      00000000 
 4519 0008 00000000 		.quad	_ZTS49TripleBufferedObject_writes_and_reads_object_Test
 4519      00000000 
 4520 0010 00000000 		.quad	_ZTI20TripleBufferedObject
 4520      00000000 
 4521              		.weak	_ZTSN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE
 4522              		.section	.rodata._ZTSN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_o
 4523              		.align 32
 4526              	_ZTSN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE:
 4527 0000 4E377465 		.string	"N7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE
 4527      7374696E 
 4527      6738696E 
 4527      7465726E 
 4527      616C3135 
 4528              		.weak	_ZTIN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE
 4529              		.section	.data.rel.ro._ZTIN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_re
 4530              		.align 8
 4533              	_ZTIN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE:
 4534 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4534      00000000 
 4535 0008 00000000 		.quad	_ZTSN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE
 4535      00000000 
 4536 0010 00000000 		.quad	_ZTIN7testing8internal15TestFactoryBaseE
 4536      00000000 
 4537              		.weak	_ZTS45TripleBufferedObject_does_not_read_empty_Test
 4538              		.section	.rodata._ZTS45TripleBufferedObject_does_not_read_empty_Test,"aG",@progbits,_ZTS45TripleBu
 4539              		.align 32
 4542              	_ZTS45TripleBufferedObject_does_not_read_empty_Test:
 4543 0000 34355472 		.string	"45TripleBufferedObject_does_not_read_empty_Test"
 4543      69706C65 
 4543      42756666 
 4543      65726564 
 4543      4F626A65 
 4544              		.weak	_ZTI45TripleBufferedObject_does_not_read_empty_Test
 4545              		.section	.data.rel.ro._ZTI45TripleBufferedObject_does_not_read_empty_Test,"awG",@progbits,_ZTI45Tr
 4546              		.align 8
 4549              	_ZTI45TripleBufferedObject_does_not_read_empty_Test:
 4550 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4550      00000000 
 4551 0008 00000000 		.quad	_ZTS45TripleBufferedObject_does_not_read_empty_Test
 4551      00000000 
 4552 0010 00000000 		.quad	_ZTI20TripleBufferedObject
 4552      00000000 
 4553              		.weak	_ZTSN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
 4554              		.section	.rodata._ZTSN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empt
 4555              		.align 32
 4558              	_ZTSN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE:
 4559 0000 4E377465 		.string	"N7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE"
 4559      7374696E 
 4559      6738696E 
 4559      7465726E 
 4559      616C3135 
 4560              		.weak	_ZTIN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
 4561              		.section	.data.rel.ro._ZTIN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read
 4562              		.align 8
 4565              	_ZTIN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE:
 4566 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4566      00000000 
 4567 0008 00000000 		.quad	_ZTSN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
 4567      00000000 
 4568 0010 00000000 		.quad	_ZTIN7testing8internal15TestFactoryBaseE
 4568      00000000 
 4569              		.weak	_ZTS55TripleBufferedObject_writes_twice_and_reads_object_Test
 4570              		.section	.rodata._ZTS55TripleBufferedObject_writes_twice_and_reads_object_Test,"aG",@progbits,_ZTS
 4571              		.align 32
 4574              	_ZTS55TripleBufferedObject_writes_twice_and_reads_object_Test:
 4575 0000 35355472 		.string	"55TripleBufferedObject_writes_twice_and_reads_object_Test"
 4575      69706C65 
 4575      42756666 
 4575      65726564 
 4575      4F626A65 
 4576              		.weak	_ZTI55TripleBufferedObject_writes_twice_and_reads_object_Test
 4577              		.section	.data.rel.ro._ZTI55TripleBufferedObject_writes_twice_and_reads_object_Test,"awG",@progbit
 4578              		.align 8
 4581              	_ZTI55TripleBufferedObject_writes_twice_and_reads_object_Test:
 4582 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4582      00000000 
 4583 0008 00000000 		.quad	_ZTS55TripleBufferedObject_writes_twice_and_reads_object_Test
 4583      00000000 
 4584 0010 00000000 		.quad	_ZTI20TripleBufferedObject
 4584      00000000 
 4585              		.weak	_ZTSN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object
 4586              		.section	.rodata._ZTSN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_r
 4587              		.align 32
 4590              	_ZTSN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE
 4591 0000 4E377465 		.string	"N7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_
 4591      7374696E 
 4591      6738696E 
 4591      7465726E 
 4591      616C3135 
 4592              		.weak	_ZTIN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object
 4593              		.section	.data.rel.ro._ZTIN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_
 4594              		.align 8
 4597              	_ZTIN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE
 4598 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4598      00000000 
 4599 0008 00000000 		.quad	_ZTSN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object
 4599      00000000 
 4600 0010 00000000 		.quad	_ZTIN7testing8internal15TestFactoryBaseE
 4600      00000000 
 4601              		.weak	_ZTS70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
 4602              		.section	.rodata._ZTS70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test,"aG"
 4603              		.align 32
 4606              	_ZTS70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test:
 4607 0000 37305472 		.string	"70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test"
 4607      69706C65 
 4607      42756666 
 4607      65726564 
 4607      4F626A65 
 4608              		.weak	_ZTI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
 4609              		.section	.data.rel.ro._ZTI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
 4610              		.align 8
 4613              	_ZTI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test:
 4614 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4614      00000000 
 4615 0008 00000000 		.quad	_ZTS70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
 4615      00000000 
 4616 0010 00000000 		.quad	_ZTI20TripleBufferedObject
 4616      00000000 
 4617              		.weak	_ZTSN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the
 4618              		.section	.rodata._ZTSN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_w
 4619              		.align 32
 4622              	_ZTSN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle
 4623 0000 4E377465 		.string	"N7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_
 4623      7374696E 
 4623      6738696E 
 4623      7465726E 
 4623      616C3135 
 4624              		.weak	_ZTIN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the
 4625              		.section	.data.rel.ro._ZTIN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_anot
 4626              		.align 8
 4629              	_ZTIN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle
 4630 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4630      00000000 
 4631 0008 00000000 		.quad	_ZTSN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the
 4631      00000000 
 4632 0010 00000000 		.quad	_ZTIN7testing8internal15TestFactoryBaseE
 4632      00000000 
 4633              		.weak	_ZTS67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
 4634              		.section	.rodata._ZTS67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test,"aG",@p
 4635              		.align 32
 4638              	_ZTS67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test:
 4639 0000 36375472 		.string	"67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test"
 4639      69706C65 
 4639      42756666 
 4639      65726564 
 4639      4F626A65 
 4640              		.weak	_ZTI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
 4641              		.section	.data.rel.ro._ZTI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test,"a
 4642              		.align 8
 4645              	_ZTI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test:
 4646 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4646      00000000 
 4647 0008 00000000 		.quad	_ZTS67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
 4647      00000000 
 4648 0010 00000000 		.quad	_ZTI20TripleBufferedObject
 4648      00000000 
 4649              		.weak	_ZTSN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_mi
 4650              		.section	.rodata._ZTSN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_write
 4651              		.align 32
 4654              	_ZTSN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of
 4655 0000 4E377465 		.string	"N7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_mid
 4655      7374696E 
 4655      6738696E 
 4655      7465726E 
 4655      616C3135 
 4656              		.weak	_ZTIN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_mi
 4657              		.section	.data.rel.ro._ZTIN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_
 4658              		.align 8
 4661              	_ZTIN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of
 4662 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 4662      00000000 
 4663 0008 00000000 		.quad	_ZTSN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_mi
 4663      00000000 
 4664 0010 00000000 		.quad	_ZTIN7testing8internal15TestFactoryBaseE
 4664      00000000 
 4665              		.weak	_ZTV20TripleBufferedObject
 4666              		.section	.data.rel.ro._ZTV20TripleBufferedObject,"awG",@progbits,_ZTV20TripleBufferedObject,comdat
 4667              		.align 8
 4670              	_ZTV20TripleBufferedObject:
 4671 0000 00000000 		.quad	0
 4671      00000000 
 4672 0008 00000000 		.quad	_ZTI20TripleBufferedObject
 4672      00000000 
 4673 0010 00000000 		.quad	0
 4673      00000000 
 4674 0018 00000000 		.quad	0
 4674      00000000 
 4675 0020 00000000 		.quad	_ZN7testing4Test5SetUpEv
 4675      00000000 
 4676 0028 00000000 		.quad	_ZN7testing4Test8TearDownEv
 4676      00000000 
 4677 0030 00000000 		.quad	__cxa_pure_virtual
 4677      00000000 
 4678 0038 00000000 		.quad	_ZN7testing4Test5SetupEv
 4678      00000000 
 4679              		.weak	_ZTVN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE
 4680              		.section	.data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_
 4681              		.align 8
 4684              	_ZTVN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE:
 4685 0000 00000000 		.quad	0
 4685      00000000 
 4686 0008 00000000 		.quad	_ZTIN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE
 4686      00000000 
 4687 0010 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED1
 4687      00000000 
 4688 0018 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED0
 4688      00000000 
 4689 0020 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE10
 4689      00000000 
 4690              		.weak	_ZTV49TripleBufferedObject_writes_and_reads_object_Test
 4691              		.section	.data.rel.ro._ZTV49TripleBufferedObject_writes_and_reads_object_Test,"awG",@progbits,_ZTV
 4692              		.align 8
 4695              	_ZTV49TripleBufferedObject_writes_and_reads_object_Test:
 4696 0000 00000000 		.quad	0
 4696      00000000 
 4697 0008 00000000 		.quad	_ZTI49TripleBufferedObject_writes_and_reads_object_Test
 4697      00000000 
 4698 0010 00000000 		.quad	_ZN49TripleBufferedObject_writes_and_reads_object_TestD1Ev
 4698      00000000 
 4699 0018 00000000 		.quad	_ZN49TripleBufferedObject_writes_and_reads_object_TestD0Ev
 4699      00000000 
 4700 0020 00000000 		.quad	_ZN7testing4Test5SetUpEv
 4700      00000000 
 4701 0028 00000000 		.quad	_ZN7testing4Test8TearDownEv
 4701      00000000 
 4702 0030 00000000 		.quad	_ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv
 4702      00000000 
 4703 0038 00000000 		.quad	_ZN7testing4Test5SetupEv
 4703      00000000 
 4704              		.weak	_ZTVN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
 4705              		.section	.data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_no
 4706              		.align 8
 4709              	_ZTVN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE:
 4710 0000 00000000 		.quad	0
 4710      00000000 
 4711 0008 00000000 		.quad	_ZTIN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
 4711      00000000 
 4712 0010 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED1Ev
 4712      00000000 
 4713 0018 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED0Ev
 4713      00000000 
 4714 0020 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestE10Crea
 4714      00000000 
 4715              		.weak	_ZTV45TripleBufferedObject_does_not_read_empty_Test
 4716              		.section	.data.rel.ro._ZTV45TripleBufferedObject_does_not_read_empty_Test,"awG",@progbits,_ZTV45Tr
 4717              		.align 8
 4720              	_ZTV45TripleBufferedObject_does_not_read_empty_Test:
 4721 0000 00000000 		.quad	0
 4721      00000000 
 4722 0008 00000000 		.quad	_ZTI45TripleBufferedObject_does_not_read_empty_Test
 4722      00000000 
 4723 0010 00000000 		.quad	_ZN45TripleBufferedObject_does_not_read_empty_TestD1Ev
 4723      00000000 
 4724 0018 00000000 		.quad	_ZN45TripleBufferedObject_does_not_read_empty_TestD0Ev
 4724      00000000 
 4725 0020 00000000 		.quad	_ZN7testing4Test5SetUpEv
 4725      00000000 
 4726 0028 00000000 		.quad	_ZN7testing4Test8TearDownEv
 4726      00000000 
 4727 0030 00000000 		.quad	_ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv
 4727      00000000 
 4728 0038 00000000 		.quad	_ZN7testing4Test5SetupEv
 4728      00000000 
 4729              		.weak	_ZTVN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object
 4730              		.section	.data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_
 4731              		.align 8
 4734              	_ZTVN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE
 4735 0000 00000000 		.quad	0
 4735      00000000 
 4736 0008 00000000 		.quad	_ZTIN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object
 4736      00000000 
 4737 0010 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_T
 4737      00000000 
 4738 0018 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_T
 4738      00000000 
 4739 0020 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_T
 4739      00000000 
 4740              		.weak	_ZTV55TripleBufferedObject_writes_twice_and_reads_object_Test
 4741              		.section	.data.rel.ro._ZTV55TripleBufferedObject_writes_twice_and_reads_object_Test,"awG",@progbit
 4742              		.align 8
 4745              	_ZTV55TripleBufferedObject_writes_twice_and_reads_object_Test:
 4746 0000 00000000 		.quad	0
 4746      00000000 
 4747 0008 00000000 		.quad	_ZTI55TripleBufferedObject_writes_twice_and_reads_object_Test
 4747      00000000 
 4748 0010 00000000 		.quad	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD1Ev
 4748      00000000 
 4749 0018 00000000 		.quad	_ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD0Ev
 4749      00000000 
 4750 0020 00000000 		.quad	_ZN7testing4Test5SetUpEv
 4750      00000000 
 4751 0028 00000000 		.quad	_ZN7testing4Test8TearDownEv
 4751      00000000 
 4752 0030 00000000 		.quad	_ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv
 4752      00000000 
 4753 0038 00000000 		.quad	_ZN7testing4Test5SetupEv
 4753      00000000 
 4754              		.weak	_ZTVN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the
 4755              		.section	.data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI70TripleBufferedObject_perform
 4756              		.align 8
 4759              	_ZTVN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle
 4760 0000 00000000 		.quad	0
 4760      00000000 
 4761 0008 00000000 		.quad	_ZTIN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the
 4761      00000000 
 4762 0010 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_m
 4762      00000000 
 4763 0018 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_m
 4763      00000000 
 4764 0020 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_m
 4764      00000000 
 4765              		.weak	_ZTV70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
 4766              		.section	.data.rel.ro._ZTV70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
 4767              		.align 8
 4770              	_ZTV70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test:
 4771 0000 00000000 		.quad	0
 4771      00000000 
 4772 0008 00000000 		.quad	_ZTI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
 4772      00000000 
 4773 0010 00000000 		.quad	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD1Ev
 4773      00000000 
 4774 0018 00000000 		.quad	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD0Ev
 4774      00000000 
 4775 0020 00000000 		.quad	_ZN7testing4Test5SetUpEv
 4775      00000000 
 4776 0028 00000000 		.quad	_ZN7testing4Test8TearDownEv
 4776      00000000 
 4777 0030 00000000 		.quad	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv
 4777      00000000 
 4778 0038 00000000 		.quad	_ZN7testing4Test5SetupEv
 4778      00000000 
 4779              		.weak	_ZTVN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_mi
 4780              		.section	.data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI67TripleBufferedObject_perform
 4781              		.align 8
 4784              	_ZTVN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of
 4785 0000 00000000 		.quad	0
 4785      00000000 
 4786 0008 00000000 		.quad	_ZTIN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_mi
 4786      00000000 
 4787 0010 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_midd
 4787      00000000 
 4788 0018 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_midd
 4788      00000000 
 4789 0020 00000000 		.quad	_ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_midd
 4789      00000000 
 4790              		.weak	_ZTV67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
 4791              		.section	.data.rel.ro._ZTV67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test,"a
 4792              		.align 8
 4795              	_ZTV67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test:
 4796 0000 00000000 		.quad	0
 4796      00000000 
 4797 0008 00000000 		.quad	_ZTI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
 4797      00000000 
 4798 0010 00000000 		.quad	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD1Ev
 4798      00000000 
 4799 0018 00000000 		.quad	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD0Ev
 4799      00000000 
 4800 0020 00000000 		.quad	_ZN7testing4Test5SetUpEv
 4800      00000000 
 4801 0028 00000000 		.quad	_ZN7testing4Test8TearDownEv
 4801      00000000 
 4802 0030 00000000 		.quad	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBodyEv
 4802      00000000 
 4803 0038 00000000 		.quad	_ZN7testing4Test5SetupEv
 4803      00000000 
 4804              		.globl	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test10test_info_E
 4805              		.section	.bss._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test10test_info_
 4806              		.align 8
 4809              	_ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test10test_info_E:
 4810 0000 00000000 		.zero	8
 4810      00000000 
 4811              		.globl	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test10test_info_E
 4812              		.section	.bss._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test10test_in
 4813              		.align 8
 4816              	_ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test10test_info_E:
 4817 0000 00000000 		.zero	8
 4817      00000000 
 4818              		.globl	_ZN55TripleBufferedObject_writes_twice_and_reads_object_Test10test_info_E
 4819              		.section	.bss._ZN55TripleBufferedObject_writes_twice_and_reads_object_Test10test_info_E,"aw",@nobi
 4820              		.align 8
 4823              	_ZN55TripleBufferedObject_writes_twice_and_reads_object_Test10test_info_E:
 4824 0000 00000000 		.zero	8
 4824      00000000 
 4825              		.globl	_ZN45TripleBufferedObject_does_not_read_empty_Test10test_info_E
 4826              		.section	.bss._ZN45TripleBufferedObject_does_not_read_empty_Test10test_info_E,"aw",@nobits
 4827              		.align 8
 4830              	_ZN45TripleBufferedObject_does_not_read_empty_Test10test_info_E:
 4831 0000 00000000 		.zero	8
 4831      00000000 
 4832              		.globl	_ZN49TripleBufferedObject_writes_and_reads_object_Test10test_info_E
 4833              		.section	.bss._ZN49TripleBufferedObject_writes_and_reads_object_Test10test_info_E,"aw",@nobits
 4834              		.align 8
 4837              	_ZN49TripleBufferedObject_writes_and_reads_object_Test10test_info_E:
 4838 0000 00000000 		.zero	8
 4838      00000000 
 4839              		.globl	test_object
 4840              		.section	.bss.test_object,"aw",@nobits
 4841              		.align 16
 4844              	test_object:
 4845 0000 00000000 		.zero	16
 4845      00000000 
 4845      00000000 
 4845      00000000 
 4846              		.section	.bss._ZStL8__ioinit,"aw",@nobits
 4849              	_ZStL8__ioinit:
 4850 0000 00       		.zero	1
 4851              		.weak	__cxa_pure_virtual
 4852              		.text
 4853              	.Letext0:
 4854              		.file 15 "/usr/include/c++/11.1.0/cwchar"
 4855              		.file 16 "/usr/include/c++/11.1.0/bits/exception_ptr.h"
 4856              		.file 17 "/usr/include/c++/11.1.0/x86_64-pc-linux-gnu/bits/c++config.h"
 4857              		.file 18 "/usr/include/c++/11.1.0/type_traits"
 4858              		.file 19 "/usr/include/c++/11.1.0/bits/stl_pair.h"
 4859              		.file 20 "/usr/include/c++/11.1.0/bits/cpp_type_traits.h"
 4860              		.file 21 "/usr/include/c++/11.1.0/bits/stl_iterator_base_types.h"
 4861              		.file 22 "/usr/include/c++/11.1.0/debug/debug.h"
 4862              		.file 23 "/usr/include/c++/11.1.0/bits/postypes.h"
 4863              		.file 24 "/usr/include/c++/11.1.0/cstdint"
 4864              		.file 25 "/usr/include/c++/11.1.0/clocale"
 4865              		.file 26 "/usr/include/c++/11.1.0/cstdlib"
 4866              		.file 27 "/usr/include/c++/11.1.0/cstdio"
 4867              		.file 28 "/usr/include/c++/11.1.0/bits/alloc_traits.h"
 4868              		.file 29 "/usr/include/c++/11.1.0/typeinfo"
 4869              		.file 30 "/usr/include/c++/11.1.0/bits/sstream.tcc"
 4870              		.file 31 "/usr/include/c++/11.1.0/initializer_list"
 4871              		.file 32 "/usr/include/c++/11.1.0/bits/stringfwd.h"
 4872              		.file 33 "/usr/include/c++/11.1.0/bits/locale_classes.h"
 4873              		.file 34 "/usr/include/c++/11.1.0/bits/ios_base.h"
 4874              		.file 35 "/usr/include/c++/11.1.0/cwctype"
 4875              		.file 36 "/usr/include/c++/11.1.0/bits/ostream.tcc"
 4876              		.file 37 "/usr/include/c++/11.1.0/bits/std_abs.h"
 4877              		.file 38 "/usr/include/c++/11.1.0/istream"
 4878              		.file 39 "/usr/include/c++/11.1.0/streambuf"
 4879              		.file 40 "/usr/include/c++/11.1.0/bits/streambuf.tcc"
 4880              		.file 41 "/usr/include/c++/11.1.0/iosfwd"
 4881              		.file 42 "/usr/include/c++/11.1.0/bits/uses_allocator.h"
 4882              		.file 43 "/usr/include/c++/11.1.0/tuple"
 4883              		.file 44 "/usr/include/c++/11.1.0/ctime"
 4884              		.file 45 "/usr/include/c++/11.1.0/bits/stl_vector.h"
 4885              		.file 46 "/usr/include/c++/11.1.0/bits/vector.tcc"
 4886              		.file 47 "/usr/include/c++/11.1.0/bits/ptr_traits.h"
 4887              		.file 48 "/usr/include/c++/11.1.0/bits/functexcept.h"
 4888              		.file 49 "/usr/include/c++/11.1.0/bits/basic_ios.tcc"
 4889              		.file 50 "/usr/include/c++/11.1.0/bits/basic_ios.h"
 4890              		.file 51 "/usr/include/c++/11.1.0/bits/ostream_insert.h"
 4891              		.file 52 "/usr/include/c++/11.1.0/bits/stl_iterator_base_funcs.h"
 4892              		.file 53 "/usr/include/c++/11.1.0/bits/move.h"
 4893              		.file 54 "/usr/lib/gcc/x86_64-pc-linux-gnu/11.1.0/include/stddef.h"
 4894              		.file 55 "<built-in>"
 4895              		.file 56 "/usr/include/bits/types/wint_t.h"
 4896              		.file 57 "/usr/include/bits/types/__mbstate_t.h"
 4897              		.file 58 "/usr/include/bits/types/mbstate_t.h"
 4898              		.file 59 "/usr/include/bits/types/__FILE.h"
 4899              		.file 60 "/usr/include/bits/types/struct_FILE.h"
 4900              		.file 61 "/usr/include/bits/types/FILE.h"
 4901              		.file 62 "/usr/include/wchar.h"
 4902              		.file 63 "/usr/include/bits/types/struct_tm.h"
 4903              		.file 64 "/usr/include/c++/11.1.0/bits/predefined_ops.h"
 4904              		.file 65 "/usr/include/c++/11.1.0/ext/alloc_traits.h"
 4905              		.file 66 "/usr/include/c++/11.1.0/bits/stl_iterator.h"
 4906              		.file 67 "/usr/include/c++/11.1.0/ext/type_traits.h"
 4907              		.file 68 "/usr/include/bits/types.h"
 4908              		.file 69 "/usr/include/bits/stdint-intn.h"
 4909              		.file 70 "/usr/include/bits/stdint-uintn.h"
 4910              		.file 71 "/usr/include/stdint.h"
 4911              		.file 72 "/usr/include/locale.h"
 4912              		.file 73 "/usr/include/bits/types/time_t.h"
 4913              		.file 74 "/usr/include/bits/types/clock_t.h"
 4914              		.file 75 "/usr/include/bits/thread-shared-types.h"
 4915              		.file 76 "/usr/include/bits/struct_mutex.h"
 4916              		.file 77 "/usr/include/bits/pthreadtypes.h"
 4917              		.file 78 "/usr/include/c++/11.1.0/x86_64-pc-linux-gnu/bits/atomic_word.h"
 4918              		.file 79 "/usr/include/stdlib.h"
 4919              		.file 80 "/usr/include/bits/types/__fpos_t.h"
 4920              		.file 81 "/usr/include/stdio.h"
 4921              		.file 82 "/usr/include/bits/wctype-wchar.h"
 4922              		.file 83 "/usr/include/wctype.h"
 4923              		.file 84 "/usr/include/c++/11.1.0/stdlib.h"
 4924              		.file 85 "quantum/serial_link/tests/gtest/././internal/gtest-death-test-internal.h"
 4925              		.file 86 "quantum/serial_link/tests/gtest/./gtest-test-part.h"
 4926              		.file 87 "/usr/include/time.h"
 4927              		.file 88 "/usr/include/c++/11.1.0/bits/cxxabi_init_exception.h"
 4928              		.file 89 "/usr/include/c++/11.1.0/cxxabi.h"
 4929              		.file 90 "./quantum/serial_link/protocol/triple_buffered_object.h"
 4930              		.file 91 "/usr/include/c++/11.1.0/new"
 4931              		.file 92 "/usr/include/c++/11.1.0/system_error"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 triple_buffered_object_tests.cpp
     /tmp/cczFUE3O.s:7      .text._ZN7testing4Test13SetUpTestCaseEv:0000000000000000 _ZN7testing4Test13SetUpTestCaseEv
     /tmp/cczFUE3O.s:20     .text._ZN7testing4Test16TearDownTestCaseEv:0000000000000000 _ZN7testing4Test16TearDownTestCaseEv
     /tmp/cczFUE3O.s:33     .text._ZN7testing4Test5SetupEv:0000000000000000 _ZN7testing4Test5SetupEv
     /tmp/cczFUE3O.s:49     .text._ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestED2Ev
     /tmp/cczFUE3O.s:49     .text._ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestED1Ev
     /tmp/cczFUE3O.s:71     .text._ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestED2Ev
     /tmp/cczFUE3O.s:71     .text._ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestED1Ev
     /tmp/cczFUE3O.s:92     .text._ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED2Ev
     /tmp/cczFUE3O.s:92     .text._ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED1Ev
     /tmp/cczFUE3O.s:113    .text._ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED2Ev
     /tmp/cczFUE3O.s:113    .text._ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED1Ev
     /tmp/cczFUE3O.s:134    .text._ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED2Ev
     /tmp/cczFUE3O.s:134    .text._ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED2Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED1Ev
     /tmp/cczFUE3O.s:155    .text._ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED0Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED0Ev
     /tmp/cczFUE3O.s:180    .text._ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED0Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED0Ev
     /tmp/cczFUE3O.s:205    .text._ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED0Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED0Ev
     /tmp/cczFUE3O.s:230    .text._ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestED0Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestED0Ev
     /tmp/cczFUE3O.s:255    .text._ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestED0Ev:0000000000000000 _ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestED0Ev
     /tmp/cczFUE3O.s:282    .text.startup._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0
     /tmp/cczFUE3O.s:550    .text.startup._Z41__static_initialization_and_destruction_0ii.constprop.0:0000000000000000 _Z41__static_initialization_and_destruction_0ii.constprop.0
     /tmp/cczFUE3O.s:4849   .bss._ZStL8__ioinit:0000000000000000 _ZStL8__ioinit
     /tmp/cczFUE3O.s:4684   .data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE:0000000000000000 _ZTVN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE
     /tmp/cczFUE3O.s:4472   .bss._ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E:0000000000000000 _ZN7testing8internal12TypeIdHelperI20TripleBufferedObjectE6dummy_E
     /tmp/cczFUE3O.s:4837   .bss._ZN49TripleBufferedObject_writes_and_reads_object_Test10test_info_E:0000000000000000 _ZN49TripleBufferedObject_writes_and_reads_object_Test10test_info_E
     /tmp/cczFUE3O.s:4709   .data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE:0000000000000000 _ZTVN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
     /tmp/cczFUE3O.s:4830   .bss._ZN45TripleBufferedObject_does_not_read_empty_Test10test_info_E:0000000000000000 _ZN45TripleBufferedObject_does_not_read_empty_Test10test_info_E
     /tmp/cczFUE3O.s:4734   .data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE:0000000000000000 _ZTVN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE
     /tmp/cczFUE3O.s:4823   .bss._ZN55TripleBufferedObject_writes_twice_and_reads_object_Test10test_info_E:0000000000000000 _ZN55TripleBufferedObject_writes_twice_and_reads_object_Test10test_info_E
     /tmp/cczFUE3O.s:4759   .data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestEE:0000000000000000 _ZTVN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestEE
     /tmp/cczFUE3O.s:4816   .bss._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test10test_info_E:0000000000000000 _ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test10test_info_E
     /tmp/cczFUE3O.s:4784   .data.rel.ro.local._ZTVN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestEE:0000000000000000 _ZTVN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestEE
     /tmp/cczFUE3O.s:4809   .bss._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test10test_info_E:0000000000000000 _ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test10test_info_E
     /tmp/cczFUE3O.s:1434   .text._ZNK7testing15AssertionResult7messageEv:0000000000000000 _ZNK7testing15AssertionResult7messageEv
     /tmp/cczFUE3O.s:1480   .text._ZN20TripleBufferedObjectC2Ev:0000000000000000 _ZN20TripleBufferedObjectC2Ev
     /tmp/cczFUE3O.s:4670   .data.rel.ro._ZTV20TripleBufferedObject:0000000000000000 _ZTV20TripleBufferedObject
     /tmp/cczFUE3O.s:4844   .bss.test_object:0000000000000000 test_object
     /tmp/cczFUE3O.s:1480   .text._ZN20TripleBufferedObjectC2Ev:0000000000000000 _ZN20TripleBufferedObjectC1Ev
     /tmp/cczFUE3O.s:1521   .text._ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE10CreateTestEv:0000000000000000 _ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestE10CreateTestEv
     /tmp/cczFUE3O.s:4695   .data.rel.ro._ZTV49TripleBufferedObject_writes_and_reads_object_Test:0000000000000000 _ZTV49TripleBufferedObject_writes_and_reads_object_Test
     /tmp/cczFUE3O.s:1562   .text._ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestE10CreateTestEv:0000000000000000 _ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestE10CreateTestEv
     /tmp/cczFUE3O.s:4720   .data.rel.ro._ZTV45TripleBufferedObject_does_not_read_empty_Test:0000000000000000 _ZTV45TripleBufferedObject_does_not_read_empty_Test
     /tmp/cczFUE3O.s:1603   .text._ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestE10CreateTestEv:0000000000000000 _ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestE10CreateTestEv
     /tmp/cczFUE3O.s:4745   .data.rel.ro._ZTV55TripleBufferedObject_writes_twice_and_reads_object_Test:0000000000000000 _ZTV55TripleBufferedObject_writes_twice_and_reads_object_Test
     /tmp/cczFUE3O.s:1644   .text._ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestE10CreateTestEv:0000000000000000 _ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestE10CreateTestEv
     /tmp/cczFUE3O.s:4770   .data.rel.ro._ZTV70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test:0000000000000000 _ZTV70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
     /tmp/cczFUE3O.s:1685   .text._ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestE10CreateTestEv:0000000000000000 _ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestE10CreateTestEv
     /tmp/cczFUE3O.s:4795   .data.rel.ro._ZTV67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test:0000000000000000 _ZTV67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
     /tmp/cczFUE3O.s:1726   .text._ZN20TripleBufferedObjectD2Ev:0000000000000000 _ZN20TripleBufferedObjectD2Ev
     /tmp/cczFUE3O.s:1726   .text._ZN20TripleBufferedObjectD2Ev:0000000000000000 _ZN20TripleBufferedObjectD1Ev
     /tmp/cczFUE3O.s:1748   .text._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD2Ev:0000000000000000 _ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD2Ev
     /tmp/cczFUE3O.s:1748   .text._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD2Ev:0000000000000000 _ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD1Ev
     /tmp/cczFUE3O.s:1770   .text._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD0Ev:0000000000000000 _ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD0Ev
     /tmp/cczFUE3O.s:1795   .text._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD2Ev:0000000000000000 _ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD2Ev
     /tmp/cczFUE3O.s:1795   .text._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD2Ev:0000000000000000 _ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD1Ev
     /tmp/cczFUE3O.s:1817   .text._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD0Ev:0000000000000000 _ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD0Ev
     /tmp/cczFUE3O.s:1842   .text._ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD2Ev:0000000000000000 _ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD2Ev
     /tmp/cczFUE3O.s:1842   .text._ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD2Ev:0000000000000000 _ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD1Ev
     /tmp/cczFUE3O.s:1864   .text._ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD0Ev:0000000000000000 _ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD0Ev
     /tmp/cczFUE3O.s:1889   .text._ZN45TripleBufferedObject_does_not_read_empty_TestD2Ev:0000000000000000 _ZN45TripleBufferedObject_does_not_read_empty_TestD2Ev
     /tmp/cczFUE3O.s:1889   .text._ZN45TripleBufferedObject_does_not_read_empty_TestD2Ev:0000000000000000 _ZN45TripleBufferedObject_does_not_read_empty_TestD1Ev
     /tmp/cczFUE3O.s:1911   .text._ZN45TripleBufferedObject_does_not_read_empty_TestD0Ev:0000000000000000 _ZN45TripleBufferedObject_does_not_read_empty_TestD0Ev
     /tmp/cczFUE3O.s:1936   .text._ZN49TripleBufferedObject_writes_and_reads_object_TestD2Ev:0000000000000000 _ZN49TripleBufferedObject_writes_and_reads_object_TestD2Ev
     /tmp/cczFUE3O.s:1936   .text._ZN49TripleBufferedObject_writes_and_reads_object_TestD2Ev:0000000000000000 _ZN49TripleBufferedObject_writes_and_reads_object_TestD1Ev
     /tmp/cczFUE3O.s:1958   .text._ZN49TripleBufferedObject_writes_and_reads_object_TestD0Ev:0000000000000000 _ZN49TripleBufferedObject_writes_and_reads_object_TestD0Ev
     /tmp/cczFUE3O.s:1983   .text._ZN20TripleBufferedObjectD0Ev:0000000000000000 _ZN20TripleBufferedObjectD0Ev
     /tmp/cczFUE3O.s:2008   .text._ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED2Ev
     /tmp/cczFUE3O.s:2008   .text._ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED1Ev
     /tmp/cczFUE3O.s:2094   .text._ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev
     /tmp/cczFUE3O.s:2094   .text._ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:0000000000000000 _ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev
     /tmp/cczFUE3O.s:2238   .text._ZN7testing8internal18CmpHelperEQFailureIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_:0000000000000000 _ZN7testing8internal18CmpHelperEQFailureIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
     /tmp/cczFUE3O.s:2581   .text._ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_:0000000000000000 _ZN7testing8internal11CmpHelperEQIjiEENS_15AssertionResultEPKcS4_RKT_RKT0_
     /tmp/cczFUE3O.s:2637   .text._ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv:0000000000000000 _ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv
     /tmp/cczFUE3O.s:2818   .text._ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv:0000000000000000 _ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv
     /tmp/cczFUE3O.s:3010   .text._ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_:0000000000000000 _ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
     /tmp/cczFUE3O.s:3384   .text._ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_:0000000000000000 _ZN7testing8internal11CmpHelperEQIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_
     /tmp/cczFUE3O.s:3441   .text._ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv:0000000000000000 _ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv
     /tmp/cczFUE3O.s:3611   .text._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv:0000000000000000 _ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv
     /tmp/cczFUE3O.s:4029   .text._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBodyEv:0000000000000000 _ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBodyEv
     /tmp/cczFUE3O.s:4455   .text.startup._GLOBAL__sub_I_test_object:0000000000000000 _GLOBAL__sub_I_test_object
     /tmp/cczFUE3O.s:4479   .rodata._ZTSN7testing8internal15TestFactoryBaseE:0000000000000000 _ZTSN7testing8internal15TestFactoryBaseE
     /tmp/cczFUE3O.s:4486   .data.rel.ro._ZTIN7testing8internal15TestFactoryBaseE:0000000000000000 _ZTIN7testing8internal15TestFactoryBaseE
     /tmp/cczFUE3O.s:4494   .rodata._ZTS20TripleBufferedObject:0000000000000000 _ZTS20TripleBufferedObject
     /tmp/cczFUE3O.s:4501   .data.rel.ro._ZTI20TripleBufferedObject:0000000000000000 _ZTI20TripleBufferedObject
     /tmp/cczFUE3O.s:4510   .rodata._ZTS49TripleBufferedObject_writes_and_reads_object_Test:0000000000000000 _ZTS49TripleBufferedObject_writes_and_reads_object_Test
     /tmp/cczFUE3O.s:4517   .data.rel.ro._ZTI49TripleBufferedObject_writes_and_reads_object_Test:0000000000000000 _ZTI49TripleBufferedObject_writes_and_reads_object_Test
     /tmp/cczFUE3O.s:4526   .rodata._ZTSN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE:0000000000000000 _ZTSN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE
     /tmp/cczFUE3O.s:4533   .data.rel.ro._ZTIN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE:0000000000000000 _ZTIN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestEE
     /tmp/cczFUE3O.s:4542   .rodata._ZTS45TripleBufferedObject_does_not_read_empty_Test:0000000000000000 _ZTS45TripleBufferedObject_does_not_read_empty_Test
     /tmp/cczFUE3O.s:4549   .data.rel.ro._ZTI45TripleBufferedObject_does_not_read_empty_Test:0000000000000000 _ZTI45TripleBufferedObject_does_not_read_empty_Test
     /tmp/cczFUE3O.s:4558   .rodata._ZTSN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE:0000000000000000 _ZTSN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
     /tmp/cczFUE3O.s:4565   .data.rel.ro._ZTIN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE:0000000000000000 _ZTIN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestEE
     /tmp/cczFUE3O.s:4574   .rodata._ZTS55TripleBufferedObject_writes_twice_and_reads_object_Test:0000000000000000 _ZTS55TripleBufferedObject_writes_twice_and_reads_object_Test
     /tmp/cczFUE3O.s:4581   .data.rel.ro._ZTI55TripleBufferedObject_writes_twice_and_reads_object_Test:0000000000000000 _ZTI55TripleBufferedObject_writes_twice_and_reads_object_Test
     /tmp/cczFUE3O.s:4590   .rodata._ZTSN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE:0000000000000000 _ZTSN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE
     /tmp/cczFUE3O.s:4597   .data.rel.ro._ZTIN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE:0000000000000000 _ZTIN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestEE
     /tmp/cczFUE3O.s:4606   .rodata._ZTS70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test:0000000000000000 _ZTS70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
     /tmp/cczFUE3O.s:4613   .data.rel.ro._ZTI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test:0000000000000000 _ZTI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test
     /tmp/cczFUE3O.s:4622   .rodata._ZTSN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestEE:0000000000000000 _ZTSN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestEE
     /tmp/cczFUE3O.s:4629   .data.rel.ro._ZTIN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestEE:0000000000000000 _ZTIN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestEE
     /tmp/cczFUE3O.s:4638   .rodata._ZTS67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test:0000000000000000 _ZTS67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
     /tmp/cczFUE3O.s:4645   .data.rel.ro._ZTI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test:0000000000000000 _ZTI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test
     /tmp/cczFUE3O.s:4654   .rodata._ZTSN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestEE:0000000000000000 _ZTSN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestEE
     /tmp/cczFUE3O.s:4661   .data.rel.ro._ZTIN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestEE:0000000000000000 _ZTIN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestEE
     /tmp/cczFUE3O.s:277    .rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0.str1.1:0000000000000000 .LC0
     /tmp/cczFUE3O.s:534    .rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1:0000000000000000 .LC1
     /tmp/cczFUE3O.s:538    .rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1:0000000000000053 .LC3
     /tmp/cczFUE3O.s:536    .rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1:000000000000003b .LC2
     /tmp/cczFUE3O.s:540    .rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1:0000000000000068 .LC4
     /tmp/cczFUE3O.s:542    .rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1:000000000000007c .LC5
     /tmp/cczFUE3O.s:544    .rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1:000000000000009a .LC6
     /tmp/cczFUE3O.s:546    .rodata._Z41__static_initialization_and_destruction_0ii.constprop.0.str1.1:00000000000000c7 .LC7
     /tmp/cczFUE3O.s:1428   .rodata._ZNK7testing15AssertionResult7messageEv.str1.1:0000000000000000 .LC8
     /tmp/cczFUE3O.s:2629   .rodata._ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv.str1.1:0000000000000000 .LC9
     /tmp/cczFUE3O.s:2631   .rodata._ZN49TripleBufferedObject_writes_and_reads_object_Test8TestBodyEv.str1.1:000000000000000b .LC10
     /tmp/cczFUE3O.s:2812   .rodata._ZN55TripleBufferedObject_writes_twice_and_reads_object_Test8TestBodyEv.str1.1:0000000000000000 .LC11
     /tmp/cczFUE3O.s:3005   .rodata._ZN7testing8internal18CmpHelperEQFailureIPjDnEENS_15AssertionResultEPKcS5_RKT_RKT0_.str1.1:0000000000000000 .LC12
     /tmp/cczFUE3O.s:3433   .rodata._ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv.str1.1:0000000000000000 .LC13
     /tmp/cczFUE3O.s:3435   .rodata._ZN45TripleBufferedObject_does_not_read_empty_Test8TestBodyEv.str1.1:0000000000000008 .LC14
     /tmp/cczFUE3O.s:3601   .rodata._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv.str1.1:0000000000000000 .LC15
     /tmp/cczFUE3O.s:3603   .rodata._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv.str1.1:0000000000000002 .LC16
     /tmp/cczFUE3O.s:3605   .rodata._ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_Test8TestBodyEv.str1.1:0000000000000008 .LC17
     /tmp/cczFUE3O.s:4023   .rodata._ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_Test8TestBodyEv.str1.1:0000000000000000 .LC18
                           .group:0000000000000000 _ZN7testing8internal15TestFactoryImplI67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestED5Ev
                           .group:0000000000000000 _ZN7testing8internal15TestFactoryImplI70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestED5Ev
                           .group:0000000000000000 _ZN7testing8internal15TestFactoryImplI55TripleBufferedObject_writes_twice_and_reads_object_TestED5Ev
                           .group:0000000000000000 _ZN7testing8internal15TestFactoryImplI45TripleBufferedObject_does_not_read_empty_TestED5Ev
                           .group:0000000000000000 _ZN7testing8internal15TestFactoryImplI49TripleBufferedObject_writes_and_reads_object_TestED5Ev
                           .group:0000000000000000 _ZN20TripleBufferedObjectC5Ev
                           .group:0000000000000000 _ZN20TripleBufferedObjectD5Ev
                           .group:0000000000000000 _ZN67TripleBufferedObject_performs_two_writes_in_the_middle_of_read_TestD5Ev
                           .group:0000000000000000 _ZN70TripleBufferedObject_performs_another_write_in_the_middle_of_read_TestD5Ev
                           .group:0000000000000000 _ZN55TripleBufferedObject_writes_twice_and_reads_object_TestD5Ev
                           .group:0000000000000000 _ZN45TripleBufferedObject_does_not_read_empty_TestD5Ev
                           .group:0000000000000000 _ZN49TripleBufferedObject_writes_and_reads_object_TestD5Ev
                           .group:0000000000000000 _ZN7testing8internal10scoped_ptrINSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEEED5Ev
                           .group:0000000000000000 _ZN7testing8internal10scoped_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED5Ev

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZdlPv
strlen
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_
__stack_chk_fail
_ZSt19__throw_logic_errorPKc
_ZNSt8ios_base4InitC1Ev
_ZNSt8ios_base4InitD1Ev
__dso_handle
__cxa_atexit
_Znwm
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_
_ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
_ZN7testing4TestC2Ev
triple_buffer_init
_ZN7testing4TestD2Ev
_ZN7testing8internal6IsTrueEb
_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev
_ZNSolsEi
_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv
_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZNSo9_M_insertImEERSoT_
_ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b
_ZN7testing16AssertionSuccessEv
triple_buffer_begin_write_internal
triple_buffer_end_write_internal
triple_buffer_read_internal
_ZN7testing7MessageC1Ev
_ZN7testing8internal12AssertHelperC1ENS_14TestPartResult4TypeEPKciS5_
_ZNK7testing8internal12AssertHelperaSERKNS_7MessageE
_ZN7testing8internal12AssertHelperD1Ev
_ZN7testing9internal220PrintBytesInObjectToEPKhmPSo
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
_ZNSo9_M_insertIPKvEERSoT_
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN7testing4TestE
_ZN7testing4Test5SetUpEv
_ZN7testing4Test8TearDownEv
__cxa_pure_virtual
