   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.matrix_init_user,"ax",@progbits
  12               		.weak	matrix_init_user
  14               	matrix_init_user:
  15               	.LFB10:
  16               		.file 1 "quantum/matrix.c"
   1:quantum/matrix.c **** /*
   2:quantum/matrix.c **** Copyright 2012 Jun Wako
   3:quantum/matrix.c **** Copyright 2014 Jack Humbert
   4:quantum/matrix.c **** 
   5:quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   6:quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   7:quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   8:quantum/matrix.c **** (at your option) any later version.
   9:quantum/matrix.c **** 
  10:quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  11:quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/matrix.c **** GNU General Public License for more details.
  14:quantum/matrix.c **** 
  15:quantum/matrix.c **** You should have received a copy of the GNU General Public License
  16:quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/matrix.c **** */
  18:quantum/matrix.c **** #include <stdint.h>
  19:quantum/matrix.c **** #include <stdbool.h>
  20:quantum/matrix.c **** #if defined(__AVR__)
  21:quantum/matrix.c **** #include <avr/io.h>
  22:quantum/matrix.c **** #endif
  23:quantum/matrix.c **** #include "wait.h"
  24:quantum/matrix.c **** #include "print.h"
  25:quantum/matrix.c **** #include "debug.h"
  26:quantum/matrix.c **** #include "util.h"
  27:quantum/matrix.c **** #include "matrix.h"
  28:quantum/matrix.c **** #include "timer.h"
  29:quantum/matrix.c **** 
  30:quantum/matrix.c **** 
  31:quantum/matrix.c **** /* Set 0 if debouncing isn't needed */
  32:quantum/matrix.c **** 
  33:quantum/matrix.c **** #ifndef DEBOUNCING_DELAY
  34:quantum/matrix.c **** #   define DEBOUNCING_DELAY 5
  35:quantum/matrix.c **** #endif
  36:quantum/matrix.c **** 
  37:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
  38:quantum/matrix.c ****     static uint16_t debouncing_time;
  39:quantum/matrix.c ****     static bool debouncing = false;
  40:quantum/matrix.c **** #endif
  41:quantum/matrix.c **** 
  42:quantum/matrix.c **** #if (MATRIX_COLS <= 8)
  43:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 01234567\n")
  44:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse8(matrix_get_row(row))
  45:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop(matrix[i])
  46:quantum/matrix.c **** #    define ROW_SHIFTER ((uint8_t)1)
  47:quantum/matrix.c **** #elif (MATRIX_COLS <= 16)
  48:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF\n")
  49:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse16(matrix_get_row(row))
  50:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop16(matrix[i])
  51:quantum/matrix.c **** #    define ROW_SHIFTER ((uint16_t)1)
  52:quantum/matrix.c **** #elif (MATRIX_COLS <= 32)
  53:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  54:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse32(matrix_get_row(row))
  55:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop32(matrix[i])
  56:quantum/matrix.c **** #    define ROW_SHIFTER  ((uint32_t)1)
  57:quantum/matrix.c **** #endif
  58:quantum/matrix.c **** 
  59:quantum/matrix.c **** #ifdef MATRIX_MASKED
  60:quantum/matrix.c ****     extern const matrix_row_t matrix_mask[];
  61:quantum/matrix.c **** #endif
  62:quantum/matrix.c **** 
  63:quantum/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  64:quantum/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  65:quantum/matrix.c **** 
  66:quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  67:quantum/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  68:quantum/matrix.c **** 
  69:quantum/matrix.c **** static matrix_row_t matrix_raw[MATRIX_ROWS];
  70:quantum/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  71:quantum/matrix.c **** 
  72:quantum/matrix.c **** 
  73:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
  74:quantum/matrix.c ****     static void init_cols(void);
  75:quantum/matrix.c ****     static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row);
  76:quantum/matrix.c ****     static void unselect_rows(void);
  77:quantum/matrix.c ****     static void select_row(uint8_t row);
  78:quantum/matrix.c ****     static void unselect_row(uint8_t row);
  79:quantum/matrix.c **** #else // ROW2COL
  80:quantum/matrix.c ****     static void init_rows(void);
  81:quantum/matrix.c ****     static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col);
  82:quantum/matrix.c ****     static void unselect_cols(void);
  83:quantum/matrix.c ****     static void unselect_col(uint8_t col);
  84:quantum/matrix.c ****     static void select_col(uint8_t col);
  85:quantum/matrix.c **** #endif
  86:quantum/matrix.c **** 
  87:quantum/matrix.c **** __attribute__ ((weak))
  88:quantum/matrix.c **** void matrix_init_quantum(void) {
  89:quantum/matrix.c ****     matrix_init_kb();
  90:quantum/matrix.c **** }
  91:quantum/matrix.c **** 
  92:quantum/matrix.c **** __attribute__ ((weak))
  93:quantum/matrix.c **** void matrix_scan_quantum(void) {
  94:quantum/matrix.c ****     matrix_scan_kb();
  95:quantum/matrix.c **** }
  96:quantum/matrix.c **** 
  97:quantum/matrix.c **** __attribute__ ((weak))
  98:quantum/matrix.c **** void matrix_init_kb(void) {
  99:quantum/matrix.c ****     matrix_init_user();
 100:quantum/matrix.c **** }
 101:quantum/matrix.c **** 
 102:quantum/matrix.c **** __attribute__ ((weak))
 103:quantum/matrix.c **** void matrix_scan_kb(void) {
 104:quantum/matrix.c ****     matrix_scan_user();
 105:quantum/matrix.c **** }
 106:quantum/matrix.c **** 
 107:quantum/matrix.c **** __attribute__ ((weak))
 108:quantum/matrix.c **** void matrix_init_user(void) {
  17               		.loc 1 108 29 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 109:quantum/matrix.c **** }
  23               		.loc 1 109 1 view .LVU1
  24               	/* epilogue start */
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE10:
  29               		.set	matrix_init_user.localalias.0,matrix_init_user
  30               		.section	.text.matrix_init_kb,"ax",@progbits
  31               		.weak	matrix_init_kb
  33               	matrix_init_kb:
  34               	.LFB8:
  98:quantum/matrix.c ****     matrix_init_user();
  35               		.loc 1 98 27 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  99:quantum/matrix.c **** }
  41               		.loc 1 99 5 view .LVU3
  42 0000 0C94 0000 		jmp matrix_init_user
  43               	.LVL0:
  44               		.cfi_endproc
  45               	.LFE8:
  47               		.section	.text.matrix_init_quantum,"ax",@progbits
  48               		.weak	matrix_init_quantum
  50               	matrix_init_quantum:
  51               	.LFB6:
  88:quantum/matrix.c ****     matrix_init_kb();
  52               		.loc 1 88 32 view -0
  53               		.cfi_startproc
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
  89:quantum/matrix.c **** }
  58               		.loc 1 89 5 view .LVU5
  59 0000 0C94 0000 		jmp matrix_init_kb
  60               	.LVL1:
  61               		.cfi_endproc
  62               	.LFE6:
  64               		.section	.text.matrix_scan_user,"ax",@progbits
  65               		.weak	matrix_scan_user
  67               	matrix_scan_user:
  68               	.LFB27:
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74               	/* epilogue start */
  75 0000 0895      		ret
  76               		.cfi_endproc
  77               	.LFE27:
  79               		.section	.text.matrix_scan_kb,"ax",@progbits
  80               		.weak	matrix_scan_kb
  82               	matrix_scan_kb:
  83               	.LFB9:
 103:quantum/matrix.c ****     matrix_scan_user();
  84               		.loc 1 103 27 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
 104:quantum/matrix.c **** }
  90               		.loc 1 104 5 view .LVU7
  91 0000 0C94 0000 		jmp matrix_scan_user
  92               	.LVL2:
  93               		.cfi_endproc
  94               	.LFE9:
  96               		.section	.text.matrix_scan_quantum,"ax",@progbits
  97               		.weak	matrix_scan_quantum
  99               	matrix_scan_quantum:
 100               	.LFB7:
  93:quantum/matrix.c ****     matrix_scan_kb();
 101               		.loc 1 93 32 view -0
 102               		.cfi_startproc
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
  94:quantum/matrix.c **** }
 107               		.loc 1 94 5 view .LVU9
 108 0000 0C94 0000 		jmp matrix_scan_kb
 109               	.LVL3:
 110               		.cfi_endproc
 111               	.LFE7:
 113               		.section	.text.matrix_rows,"ax",@progbits
 114               	.global	matrix_rows
 116               	matrix_rows:
 117               	.LFB12:
 110:quantum/matrix.c **** 
 111:quantum/matrix.c **** __attribute__ ((weak))
 112:quantum/matrix.c **** void matrix_scan_user(void) {
 113:quantum/matrix.c **** }
 114:quantum/matrix.c **** 
 115:quantum/matrix.c **** inline
 116:quantum/matrix.c **** uint8_t matrix_rows(void) {
 118               		.loc 1 116 27 view -0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
 117:quantum/matrix.c ****     return MATRIX_ROWS;
 124               		.loc 1 117 5 view .LVU11
 118:quantum/matrix.c **** }
 125               		.loc 1 118 1 is_stmt 0 view .LVU12
 126 0000 89E0      		ldi r24,lo8(9)
 127               	/* epilogue start */
 128 0002 0895      		ret
 129               		.cfi_endproc
 130               	.LFE12:
 132               		.section	.text.matrix_cols,"ax",@progbits
 133               	.global	matrix_cols
 135               	matrix_cols:
 136               	.LFB13:
 119:quantum/matrix.c **** 
 120:quantum/matrix.c **** inline
 121:quantum/matrix.c **** uint8_t matrix_cols(void) {
 137               		.loc 1 121 27 is_stmt 1 view -0
 138               		.cfi_startproc
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
 122:quantum/matrix.c ****     return MATRIX_COLS;
 143               		.loc 1 122 5 view .LVU14
 123:quantum/matrix.c **** }
 144               		.loc 1 123 1 is_stmt 0 view .LVU15
 145 0000 8FE0      		ldi r24,lo8(15)
 146               	/* epilogue start */
 147 0002 0895      		ret
 148               		.cfi_endproc
 149               	.LFE13:
 151               		.section	.text.matrix_init,"ax",@progbits
 152               	.global	matrix_init
 154               	matrix_init:
 155               	.LFB14:
 124:quantum/matrix.c **** 
 125:quantum/matrix.c **** // void matrix_power_up(void) {
 126:quantum/matrix.c **** // #if (DIODE_DIRECTION == COL2ROW)
 127:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 128:quantum/matrix.c **** //         /* DDRxn */
 129:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 1) |= _BV(row_pins[r] & 0xF);
 130:quantum/matrix.c **** //         toggle_row(r);
 131:quantum/matrix.c **** //     }
 132:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 133:quantum/matrix.c **** //         /* PORTxn */
 134:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 2) |= _BV(col_pins[c] & 0xF);
 135:quantum/matrix.c **** //     }
 136:quantum/matrix.c **** // #else
 137:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 138:quantum/matrix.c **** //         /* DDRxn */
 139:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 1) |= _BV(col_pins[c] & 0xF);
 140:quantum/matrix.c **** //         toggle_col(c);
 141:quantum/matrix.c **** //     }
 142:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 143:quantum/matrix.c **** //         /* PORTxn */
 144:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 2) |= _BV(row_pins[r] & 0xF);
 145:quantum/matrix.c **** //     }
 146:quantum/matrix.c **** // #endif
 147:quantum/matrix.c **** // }
 148:quantum/matrix.c **** 
 149:quantum/matrix.c **** void matrix_init(void) {
 156               		.loc 1 149 24 is_stmt 1 view -0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 150:quantum/matrix.c **** 
 151:quantum/matrix.c ****     // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
 152:quantum/matrix.c ****     #if  (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) || defined(__AVR_ATmega32U4_
 153:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 162               		.loc 1 153 9 view .LVU17
 163               		.loc 1 153 15 is_stmt 0 view .LVU18
 164 0000 85B7      		in r24,0x35
 165 0002 8068      		ori r24,lo8(-128)
 166 0004 85BF      		out 0x35,r24
 154:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 167               		.loc 1 154 9 is_stmt 1 view .LVU19
 168               		.loc 1 154 15 is_stmt 0 view .LVU20
 169 0006 85B7      		in r24,0x35
 170 0008 8068      		ori r24,lo8(-128)
 171 000a 85BF      		out 0x35,r24
 155:quantum/matrix.c ****     #endif
 156:quantum/matrix.c **** 
 157:quantum/matrix.c ****     // initialize row and col
 158:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 159:quantum/matrix.c ****     unselect_rows();
 172               		.loc 1 159 5 is_stmt 1 view .LVU21
 173               	.LBB19:
 174               	.LBI19:
 160:quantum/matrix.c ****     init_cols();
 161:quantum/matrix.c **** #else // ROW2COL
 162:quantum/matrix.c ****     unselect_cols();
 163:quantum/matrix.c ****     init_rows();
 164:quantum/matrix.c **** #endif
 165:quantum/matrix.c **** 
 166:quantum/matrix.c ****     // initialize matrix state: all keys off
 167:quantum/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 168:quantum/matrix.c ****         matrix[i] = 0;
 169:quantum/matrix.c ****         matrix_raw[i] = 0;
 170:quantum/matrix.c ****         matrix_debouncing[i] = 0;
 171:quantum/matrix.c ****     }
 172:quantum/matrix.c **** 
 173:quantum/matrix.c ****     matrix_init_quantum();
 174:quantum/matrix.c **** }
 175:quantum/matrix.c **** 
 176:quantum/matrix.c **** uint8_t matrix_scan(void)
 177:quantum/matrix.c **** {
 178:quantum/matrix.c **** 
 179:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 180:quantum/matrix.c **** 
 181:quantum/matrix.c ****     // Set row, read cols
 182:quantum/matrix.c ****     for (uint8_t current_row = 0; current_row < MATRIX_ROWS; current_row++) {
 183:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 184:quantum/matrix.c ****             bool matrix_changed = read_cols_on_row(matrix_debouncing, current_row);
 185:quantum/matrix.c **** 
 186:quantum/matrix.c ****             if (matrix_changed) {
 187:quantum/matrix.c ****                 debouncing = true;
 188:quantum/matrix.c ****                 debouncing_time = timer_read();
 189:quantum/matrix.c ****             }
 190:quantum/matrix.c **** 
 191:quantum/matrix.c **** #       else
 192:quantum/matrix.c ****             read_cols_on_row(matrix, current_row);
 193:quantum/matrix.c **** #       endif
 194:quantum/matrix.c **** 
 195:quantum/matrix.c ****     }
 196:quantum/matrix.c **** 
 197:quantum/matrix.c **** #else // ROW2COL
 198:quantum/matrix.c **** 
 199:quantum/matrix.c ****     // Set col, read rows
 200:quantum/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 201:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 202:quantum/matrix.c ****             bool matrix_changed = read_rows_on_col(matrix_debouncing, current_col);
 203:quantum/matrix.c ****             if (matrix_changed) {
 204:quantum/matrix.c ****                 debouncing = true;
 205:quantum/matrix.c ****                 debouncing_time = timer_read();
 206:quantum/matrix.c ****             }
 207:quantum/matrix.c **** #       else
 208:quantum/matrix.c ****              read_rows_on_col(matrix, current_col);
 209:quantum/matrix.c **** #       endif
 210:quantum/matrix.c **** 
 211:quantum/matrix.c ****     }
 212:quantum/matrix.c **** 
 213:quantum/matrix.c **** #endif
 214:quantum/matrix.c **** 
 215:quantum/matrix.c **** #   if (DEBOUNCING_DELAY > 0)
 216:quantum/matrix.c ****         if (debouncing && (timer_elapsed(debouncing_time) > DEBOUNCING_DELAY)) {
 217:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 218:quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 219:quantum/matrix.c ****             }
 220:quantum/matrix.c ****             debouncing = false;
 221:quantum/matrix.c ****         }
 222:quantum/matrix.c **** #   endif
 223:quantum/matrix.c **** 
 224:quantum/matrix.c ****     matrix_scan_quantum();
 225:quantum/matrix.c ****     return 1;
 226:quantum/matrix.c **** }
 227:quantum/matrix.c **** 
 228:quantum/matrix.c **** bool matrix_is_modified(void)
 229:quantum/matrix.c **** {
 230:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 231:quantum/matrix.c ****     if (debouncing) return false;
 232:quantum/matrix.c **** #endif
 233:quantum/matrix.c ****     return true;
 234:quantum/matrix.c **** }
 235:quantum/matrix.c **** 
 236:quantum/matrix.c **** inline
 237:quantum/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 238:quantum/matrix.c **** {
 239:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 240:quantum/matrix.c **** }
 241:quantum/matrix.c **** 
 242:quantum/matrix.c **** inline
 243:quantum/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 244:quantum/matrix.c **** {
 245:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 246:quantum/matrix.c ****     // switch blocker installed and the switch is always pressed.
 247:quantum/matrix.c **** #ifdef MATRIX_MASKED
 248:quantum/matrix.c ****     return matrix[row] & matrix_mask[row];
 249:quantum/matrix.c **** #else
 250:quantum/matrix.c ****     return matrix[row];
 251:quantum/matrix.c **** #endif
 252:quantum/matrix.c **** }
 253:quantum/matrix.c **** 
 254:quantum/matrix.c **** void matrix_print(void)
 255:quantum/matrix.c **** {
 256:quantum/matrix.c ****     print_matrix_header();
 257:quantum/matrix.c **** 
 258:quantum/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 259:quantum/matrix.c ****         phex(row); print(": ");
 260:quantum/matrix.c ****         print_matrix_row(row);
 261:quantum/matrix.c ****         print("\n");
 262:quantum/matrix.c ****     }
 263:quantum/matrix.c **** }
 264:quantum/matrix.c **** 
 265:quantum/matrix.c **** uint8_t matrix_key_count(void)
 266:quantum/matrix.c **** {
 267:quantum/matrix.c ****     uint8_t count = 0;
 268:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 269:quantum/matrix.c ****         count += matrix_bitpop(i);
 270:quantum/matrix.c ****     }
 271:quantum/matrix.c ****     return count;
 272:quantum/matrix.c **** }
 273:quantum/matrix.c **** 
 274:quantum/matrix.c **** 
 275:quantum/matrix.c **** 
 276:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 277:quantum/matrix.c **** 
 278:quantum/matrix.c **** static void init_cols(void)
 279:quantum/matrix.c **** {
 280:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_COLS; x++) {
 281:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 283:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 284:quantum/matrix.c ****     }
 285:quantum/matrix.c **** }
 286:quantum/matrix.c **** 
 287:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row)
 288:quantum/matrix.c **** {
 289:quantum/matrix.c ****     // Store last value of row prior to reading
 290:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
 291:quantum/matrix.c **** 
 292:quantum/matrix.c ****     // Clear data in matrix row
 293:quantum/matrix.c ****     current_matrix[current_row] = 0;
 294:quantum/matrix.c **** 
 295:quantum/matrix.c ****     // Select row and wait for row selecton to stabilize
 296:quantum/matrix.c ****     select_row(current_row);
 297:quantum/matrix.c ****     wait_us(30);
 298:quantum/matrix.c **** 
 299:quantum/matrix.c ****     // For each col...
 300:quantum/matrix.c ****     for(uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 301:quantum/matrix.c **** 
 302:quantum/matrix.c ****         // Select the col pin to read (active low)
 303:quantum/matrix.c ****         uint8_t pin = col_pins[col_index];
 304:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 305:quantum/matrix.c **** 
 306:quantum/matrix.c ****         // Populate the matrix row with the state of the col pin
 307:quantum/matrix.c ****         current_matrix[current_row] |=  pin_state ? 0 : (ROW_SHIFTER << col_index);
 308:quantum/matrix.c ****     }
 309:quantum/matrix.c **** 
 310:quantum/matrix.c ****     // Unselect row
 311:quantum/matrix.c ****     unselect_row(current_row);
 312:quantum/matrix.c **** 
 313:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 314:quantum/matrix.c **** }
 315:quantum/matrix.c **** 
 316:quantum/matrix.c **** static void select_row(uint8_t row)
 317:quantum/matrix.c **** {
 318:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 320:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 321:quantum/matrix.c **** }
 322:quantum/matrix.c **** 
 323:quantum/matrix.c **** static void unselect_row(uint8_t row)
 324:quantum/matrix.c **** {
 325:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 327:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 328:quantum/matrix.c **** }
 329:quantum/matrix.c **** 
 330:quantum/matrix.c **** static void unselect_rows(void)
 175               		.loc 1 330 13 view .LVU22
 176               	.LBE19:
 331:quantum/matrix.c **** {
 332:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_ROWS; x++) {
 177               		.loc 1 332 5 view .LVU23
 178               	.LBB22:
 179               	.LBB20:
 180               		.loc 1 332 9 view .LVU24
 181               	.LVL4:
 182               		.loc 1 332 9 is_stmt 0 view .LVU25
 183 000c A0E0      		ldi r26,lo8(row_pins)
 184 000e B0E0      		ldi r27,hi8(row_pins)
 185               	.LBB21:
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 334:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 186               		.loc 1 334 38 view .LVU26
 187 0010 61E0      		ldi r22,lo8(1)
 188 0012 70E0      		ldi r23,0
 189               	.LVL5:
 190               	.L10:
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 191               		.loc 1 333 9 is_stmt 1 view .LVU27
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 192               		.loc 1 333 17 is_stmt 0 view .LVU28
 193 0014 8D91      		ld r24,X+
 194               	.LVL6:
 195               		.loc 1 334 9 is_stmt 1 view .LVU29
 196               		.loc 1 334 34 is_stmt 0 view .LVU30
 197 0016 E82F      		mov r30,r24
 198 0018 E295      		swap r30
 199 001a EF70      		andi r30,lo8(15)
 200 001c F0E0      		ldi r31,0
 201 001e 41A1      		ldd r20,Z+33
 202               		.loc 1 334 38 view .LVU31
 203 0020 8F70      		andi r24,lo8(15)
 204               	.LVL7:
 205               		.loc 1 334 38 view .LVU32
 206 0022 9B01      		movw r18,r22
 207 0024 00C0      		rjmp 2f
 208               		1:
 209 0026 220F      		lsl r18
 210               		2:
 211 0028 8A95      		dec r24
 212 002a 02F4      		brpl 1b
 213               		.loc 1 334 34 view .LVU33
 214 002c 922F      		mov r25,r18
 215 002e 9095      		com r25
 216 0030 9423      		and r25,r20
 217 0032 91A3      		std Z+33,r25
 218               	.LVL8:
 335:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 219               		.loc 1 335 9 is_stmt 1 view .LVU34
 220               		.loc 1 335 34 is_stmt 0 view .LVU35
 221 0034 82A1      		ldd r24,Z+34
 222 0036 822B      		or r24,r18
 223 0038 82A3      		std Z+34,r24
 224               	.LVL9:
 225               		.loc 1 335 34 view .LVU36
 226               	.LBE21:
 332:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 227               		.loc 1 332 5 view .LVU37
 228 003a 80E0      		ldi r24,hi8(row_pins+9)
 229 003c A030      		cpi r26,lo8(row_pins+9)
 230 003e B807      		cpc r27,r24
 231 0040 01F4      		brne .L10
 232 0042 A0E0      		ldi r26,lo8(col_pins)
 233 0044 B0E0      		ldi r27,hi8(col_pins)
 234               	.LVL10:
 332:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 235               		.loc 1 332 5 view .LVU38
 236               	.LBE20:
 237               	.LBE22:
 238               	.LBB23:
 239               	.LBB24:
 240               	.LBB25:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 241               		.loc 1 282 38 view .LVU39
 242 0046 61E0      		ldi r22,lo8(1)
 243 0048 70E0      		ldi r23,0
 244               	.L11:
 245               	.LVL11:
 281:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 246               		.loc 1 281 9 is_stmt 1 view .LVU40
 281:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 247               		.loc 1 281 17 is_stmt 0 view .LVU41
 248 004a 8D91      		ld r24,X+
 249               	.LVL12:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 250               		.loc 1 282 9 is_stmt 1 view .LVU42
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 251               		.loc 1 282 34 is_stmt 0 view .LVU43
 252 004c E82F      		mov r30,r24
 253 004e E295      		swap r30
 254 0050 EF70      		andi r30,lo8(15)
 255 0052 F0E0      		ldi r31,0
 256 0054 41A1      		ldd r20,Z+33
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 257               		.loc 1 282 38 view .LVU44
 258 0056 8F70      		andi r24,lo8(15)
 259               	.LVL13:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 260               		.loc 1 282 38 view .LVU45
 261 0058 9B01      		movw r18,r22
 262 005a 00C0      		rjmp 2f
 263               		1:
 264 005c 220F      		lsl r18
 265               		2:
 266 005e 8A95      		dec r24
 267 0060 02F4      		brpl 1b
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 268               		.loc 1 282 34 view .LVU46
 269 0062 922F      		mov r25,r18
 270 0064 9095      		com r25
 271 0066 9423      		and r25,r20
 272 0068 91A3      		std Z+33,r25
 273               	.LVL14:
 283:quantum/matrix.c ****     }
 274               		.loc 1 283 9 is_stmt 1 view .LVU47
 283:quantum/matrix.c ****     }
 275               		.loc 1 283 34 is_stmt 0 view .LVU48
 276 006a 82A1      		ldd r24,Z+34
 277 006c 822B      		or r24,r18
 278 006e 82A3      		std Z+34,r24
 279               	.LVL15:
 283:quantum/matrix.c ****     }
 280               		.loc 1 283 34 view .LVU49
 281               	.LBE25:
 280:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 282               		.loc 1 280 5 view .LVU50
 283 0070 80E0      		ldi r24,hi8(col_pins+15)
 284 0072 A030      		cpi r26,lo8(col_pins+15)
 285 0074 B807      		cpc r27,r24
 286 0076 01F4      		brne .L11
 287 0078 E0E0      		ldi r30,lo8(matrix)
 288 007a F0E0      		ldi r31,hi8(matrix)
 289 007c A0E0      		ldi r26,lo8(matrix_debouncing)
 290 007e B0E0      		ldi r27,hi8(matrix_debouncing)
 291               	.LVL16:
 280:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 292               		.loc 1 280 5 view .LVU51
 293 0080 80E0      		ldi r24,lo8(matrix+18)
 294 0082 90E0      		ldi r25,hi8(matrix+18)
 295               	.L12:
 296               	.LBE24:
 297               	.LBE23:
 298               	.LBB26:
 168:quantum/matrix.c ****         matrix_raw[i] = 0;
 299               		.loc 1 168 9 is_stmt 1 discriminator 3 view .LVU52
 168:quantum/matrix.c ****         matrix_raw[i] = 0;
 300               		.loc 1 168 19 is_stmt 0 discriminator 3 view .LVU53
 301 0084 1192      		st Z+,__zero_reg__
 302 0086 1192      		st Z+,__zero_reg__
 169:quantum/matrix.c ****         matrix_debouncing[i] = 0;
 303               		.loc 1 169 9 is_stmt 1 discriminator 3 view .LVU54
 170:quantum/matrix.c ****     }
 304               		.loc 1 170 9 discriminator 3 view .LVU55
 170:quantum/matrix.c ****     }
 305               		.loc 1 170 30 is_stmt 0 discriminator 3 view .LVU56
 306 0088 1D92      		st X+,__zero_reg__
 307 008a 1D92      		st X+,__zero_reg__
 308               	.LVL17:
 167:quantum/matrix.c ****         matrix[i] = 0;
 309               		.loc 1 167 5 discriminator 3 view .LVU57
 310 008c 8E17      		cp r24,r30
 311 008e 9F07      		cpc r25,r31
 312 0090 01F4      		brne .L12
 313               	.LBE26:
 173:quantum/matrix.c **** }
 314               		.loc 1 173 5 is_stmt 1 view .LVU58
 315 0092 0C94 0000 		jmp matrix_init_quantum
 316               	.LVL18:
 317               		.cfi_endproc
 318               	.LFE14:
 320               		.section	.text.matrix_scan,"ax",@progbits
 321               	.global	matrix_scan
 323               	matrix_scan:
 324               	.LFB15:
 177:quantum/matrix.c **** 
 325               		.loc 1 177 1 view -0
 326               		.cfi_startproc
 327 0000 2F92      		push r2
 328               	.LCFI0:
 329               		.cfi_def_cfa_offset 3
 330               		.cfi_offset 2, -2
 331 0002 3F92      		push r3
 332               	.LCFI1:
 333               		.cfi_def_cfa_offset 4
 334               		.cfi_offset 3, -3
 335 0004 4F92      		push r4
 336               	.LCFI2:
 337               		.cfi_def_cfa_offset 5
 338               		.cfi_offset 4, -4
 339 0006 5F92      		push r5
 340               	.LCFI3:
 341               		.cfi_def_cfa_offset 6
 342               		.cfi_offset 5, -5
 343 0008 6F92      		push r6
 344               	.LCFI4:
 345               		.cfi_def_cfa_offset 7
 346               		.cfi_offset 6, -6
 347 000a 7F92      		push r7
 348               	.LCFI5:
 349               		.cfi_def_cfa_offset 8
 350               		.cfi_offset 7, -7
 351 000c 8F92      		push r8
 352               	.LCFI6:
 353               		.cfi_def_cfa_offset 9
 354               		.cfi_offset 8, -8
 355 000e 9F92      		push r9
 356               	.LCFI7:
 357               		.cfi_def_cfa_offset 10
 358               		.cfi_offset 9, -9
 359 0010 AF92      		push r10
 360               	.LCFI8:
 361               		.cfi_def_cfa_offset 11
 362               		.cfi_offset 10, -10
 363 0012 BF92      		push r11
 364               	.LCFI9:
 365               		.cfi_def_cfa_offset 12
 366               		.cfi_offset 11, -11
 367 0014 CF92      		push r12
 368               	.LCFI10:
 369               		.cfi_def_cfa_offset 13
 370               		.cfi_offset 12, -12
 371 0016 DF92      		push r13
 372               	.LCFI11:
 373               		.cfi_def_cfa_offset 14
 374               		.cfi_offset 13, -13
 375 0018 EF92      		push r14
 376               	.LCFI12:
 377               		.cfi_def_cfa_offset 15
 378               		.cfi_offset 14, -14
 379 001a FF92      		push r15
 380               	.LCFI13:
 381               		.cfi_def_cfa_offset 16
 382               		.cfi_offset 15, -15
 383 001c 0F93      		push r16
 384               	.LCFI14:
 385               		.cfi_def_cfa_offset 17
 386               		.cfi_offset 16, -16
 387 001e 1F93      		push r17
 388               	.LCFI15:
 389               		.cfi_def_cfa_offset 18
 390               		.cfi_offset 17, -17
 391 0020 CF93      		push r28
 392               	.LCFI16:
 393               		.cfi_def_cfa_offset 19
 394               		.cfi_offset 28, -18
 395 0022 DF93      		push r29
 396               	.LCFI17:
 397               		.cfi_def_cfa_offset 20
 398               		.cfi_offset 29, -19
 399               	/* prologue: function */
 400               	/* frame size = 0 */
 401               	/* stack size = 18 */
 402               	.L__stack_usage = 18
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 403               		.loc 1 182 5 view .LVU60
 404               	.LBB40:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 405               		.loc 1 182 10 view .LVU61
 406               	.LVL19:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 407               		.loc 1 182 10 is_stmt 0 view .LVU62
 408 0024 00E0      		ldi r16,lo8(matrix_debouncing)
 409 0026 10E0      		ldi r17,hi8(matrix_debouncing)
 410 0028 80E0      		ldi r24,lo8(row_pins)
 411 002a C82E      		mov r12,r24
 412 002c 80E0      		ldi r24,hi8(row_pins)
 413 002e D82E      		mov r13,r24
 414               	.LBE40:
 177:quantum/matrix.c **** 
 415               		.loc 1 177 1 view .LVU63
 416 0030 1801      		movw r2,r16
 417               	.LBB64:
 418               	.LBB41:
 419               	.LBB42:
 420               	.LBB43:
 421               	.LBB44:
 422               	.LBB45:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 423               		.loc 1 319 34 view .LVU64
 424 0032 EE24      		clr r14
 425 0034 E394      		inc r14
 426 0036 F12C      		mov r15,__zero_reg__
 427               	.LBE45:
 428               	.LBE44:
 429               	.LBE43:
 430               	.LBE42:
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 431               		.loc 1 187 28 view .LVU65
 432 0038 6624      		clr r6
 433 003a 6394      		inc r6
 434               	.LVL20:
 435               	.L20:
 184:quantum/matrix.c **** 
 436               		.loc 1 184 13 is_stmt 1 view .LVU66
 437               	.LBB61:
 438               	.LBI42:
 287:quantum/matrix.c **** {
 439               		.loc 1 287 13 view .LVU67
 440               	.LBB59:
 290:quantum/matrix.c **** 
 441               		.loc 1 290 5 view .LVU68
 290:quantum/matrix.c **** 
 442               		.loc 1 290 18 is_stmt 0 view .LVU69
 443 003c D101      		movw r26,r2
 444 003e 8D90      		ld r8,X+
 445 0040 9D90      		ld r9,X+
 446 0042 1D01      		movw r2,r26
 447               	.LVL21:
 293:quantum/matrix.c **** 
 448               		.loc 1 293 5 is_stmt 1 view .LVU70
 293:quantum/matrix.c **** 
 449               		.loc 1 293 33 is_stmt 0 view .LVU71
 450 0044 1E92      		st -X,__zero_reg__
 451 0046 1E92      		st -X,__zero_reg__
 296:quantum/matrix.c ****     wait_us(30);
 452               		.loc 1 296 5 is_stmt 1 view .LVU72
 453               	.LVL22:
 454               	.LBB47:
 455               	.LBI44:
 316:quantum/matrix.c **** {
 456               		.loc 1 316 13 view .LVU73
 457               	.LBB46:
 318:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 458               		.loc 1 318 5 view .LVU74
 318:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 459               		.loc 1 318 13 is_stmt 0 view .LVU75
 460 0048 E601      		movw r28,r12
 461 004a 8991      		ld r24,Y+
 462 004c 6E01      		movw r12,r28
 463               	.LVL23:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 464               		.loc 1 319 5 is_stmt 1 view .LVU76
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 465               		.loc 1 319 30 is_stmt 0 view .LVU77
 466 004e E82F      		mov r30,r24
 467 0050 E295      		swap r30
 468 0052 EF70      		andi r30,lo8(15)
 469 0054 F0E0      		ldi r31,0
 470 0056 91A1      		ldd r25,Z+33
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 471               		.loc 1 319 34 view .LVU78
 472 0058 8F70      		andi r24,lo8(15)
 473               	.LVL24:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 474               		.loc 1 319 34 view .LVU79
 475 005a 9701      		movw r18,r14
 476 005c 00C0      		rjmp 2f
 477               		1:
 478 005e 220F      		lsl r18
 479               		2:
 480 0060 8A95      		dec r24
 481 0062 02F4      		brpl 1b
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 482               		.loc 1 319 30 view .LVU80
 483 0064 892F      		mov r24,r25
 484 0066 822B      		or r24,r18
 485 0068 81A3      		std Z+33,r24
 486               	.LVL25:
 320:quantum/matrix.c **** }
 487               		.loc 1 320 5 is_stmt 1 view .LVU81
 320:quantum/matrix.c **** }
 488               		.loc 1 320 30 is_stmt 0 view .LVU82
 489 006a 82A1      		ldd r24,Z+34
 490 006c 722E      		mov r7,r18
 491 006e 7094      		com r7
 492 0070 8721      		and r24,r7
 493 0072 82A3      		std Z+34,r24
 494               	.LVL26:
 320:quantum/matrix.c **** }
 495               		.loc 1 320 30 view .LVU83
 496               	.LBE46:
 497               	.LBE47:
 297:quantum/matrix.c **** 
 498               		.loc 1 297 5 is_stmt 1 view .LVU84
 499               	.LBB48:
 500               	.LBI48:
 501               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 502               		.loc 2 255 1 view .LVU85
 503               	.LBB49:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 504               		.loc 2 257 2 view .LVU86
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 505               		.loc 2 261 2 view .LVU87
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 506               		.loc 2 262 2 view .LVU88
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 507               		.loc 2 263 2 view .LVU89
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 508               		.loc 2 273 3 view .LVU90
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 509               		.loc 2 276 2 view .LVU91
 510 0074 D0EA      		ldi r29,lo8(-96)
 511 0076 DA95      	1:	dec r29
 512 0078 01F4      		brne 1b
 513               	.LVL27:
 514               		.loc 2 276 2 is_stmt 0 view .LVU92
 515               	.LBE49:
 516               	.LBE48:
 300:quantum/matrix.c **** 
 517               		.loc 1 300 5 is_stmt 1 view .LVU93
 518               	.LBB51:
 300:quantum/matrix.c **** 
 519               		.loc 1 300 9 view .LVU94
 300:quantum/matrix.c **** 
 520               		.loc 1 300 9 is_stmt 0 view .LVU95
 521 007a 60E0      		ldi r22,lo8(col_pins)
 522 007c 70E0      		ldi r23,hi8(col_pins)
 523               	.LBE51:
 524               	.LBB54:
 525               	.LBB50:
 526               		.loc 2 276 2 view .LVU96
 527 007e 90E0      		ldi r25,0
 528 0080 80E0      		ldi r24,0
 529               	.LVL28:
 530               	.L18:
 531               		.loc 2 276 2 view .LVU97
 532               	.LBE50:
 533               	.LBE54:
 534               	.LBB55:
 535               	.LBB52:
 303:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 536               		.loc 1 303 9 is_stmt 1 view .LVU98
 303:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 537               		.loc 1 303 17 is_stmt 0 view .LVU99
 538 0082 EB01      		movw r28,r22
 539 0084 5990      		ld r5,Y+
 540 0086 BE01      		movw r22,r28
 541               	.LVL29:
 304:quantum/matrix.c **** 
 542               		.loc 1 304 9 is_stmt 1 view .LVU100
 304:quantum/matrix.c **** 
 543               		.loc 1 304 30 is_stmt 0 view .LVU101
 544 0088 452D      		mov r20,r5
 545 008a 4295      		swap r20
 546 008c 4F70      		andi r20,lo8(15)
 547 008e 50E0      		ldi r21,0
 548 0090 EA01      		movw r28,r20
 549 0092 48A0      		ldd r4,Y+32
 550               	.LVL30:
 307:quantum/matrix.c ****     }
 551               		.loc 1 307 9 is_stmt 1 view .LVU102
 307:quantum/matrix.c ****     }
 552               		.loc 1 307 37 is_stmt 0 view .LVU103
 553 0094 AD90      		ld r10,X+
 554 0096 BC90      		ld r11,X
 555 0098 1197      		sbiw r26,1
 304:quantum/matrix.c **** 
 556               		.loc 1 304 51 view .LVU104
 557 009a 552D      		mov r21,r5
 558 009c 5F70      		andi r21,lo8(15)
 559               	.LVL31:
 304:quantum/matrix.c **** 
 560               		.loc 1 304 51 view .LVU105
 561 009e E701      		movw r28,r14
 562 00a0 00C0      		rjmp 2f
 563               		1:
 564 00a2 CC0F      		lsl r28
 565 00a4 DD1F      		rol r29
 566               		2:
 567 00a6 5A95      		dec r21
 568 00a8 02F4      		brpl 1b
 569 00aa AE01      		movw r20,r28
 304:quantum/matrix.c **** 
 570               		.loc 1 304 49 view .LVU106
 571 00ac 4421      		and r20,r4
 307:quantum/matrix.c ****     }
 572               		.loc 1 307 55 view .LVU107
 573 00ae 01F0      		breq .+2
 574 00b0 00C0      		rjmp .L25
 575 00b2 A701      		movw r20,r14
 576 00b4 082E      		mov r0,r24
 577 00b6 00C0      		rjmp 2f
 578               		1:
 579 00b8 440F      		lsl r20
 580 00ba 551F      		rol r21
 581               		2:
 582 00bc 0A94      		dec r0
 583 00be 02F4      		brpl 1b
 584               	.LVL32:
 585               	.L17:
 307:quantum/matrix.c ****     }
 586               		.loc 1 307 37 view .LVU108
 587 00c0 4A29      		or r20,r10
 588 00c2 5B29      		or r21,r11
 589 00c4 1196      		adiw r26,1
 590 00c6 5C93      		st X,r21
 591 00c8 4E93      		st -X,r20
 592               	.LVL33:
 307:quantum/matrix.c ****     }
 593               		.loc 1 307 37 view .LVU109
 594 00ca 0196      		adiw r24,1
 595               	.LVL34:
 307:quantum/matrix.c ****     }
 596               		.loc 1 307 37 view .LVU110
 597               	.LBE52:
 300:quantum/matrix.c **** 
 598               		.loc 1 300 5 view .LVU111
 599 00cc 8F30      		cpi r24,15
 600 00ce 9105      		cpc r25,__zero_reg__
 601 00d0 01F4      		brne .L18
 602               	.LBE55:
 311:quantum/matrix.c **** 
 603               		.loc 1 311 5 is_stmt 1 view .LVU112
 604               	.LVL35:
 605               	.LBB56:
 606               	.LBI56:
 323:quantum/matrix.c **** {
 607               		.loc 1 323 13 view .LVU113
 608               	.LBB57:
 325:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 609               		.loc 1 325 5 view .LVU114
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 610               		.loc 1 326 5 view .LVU115
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 611               		.loc 1 326 30 is_stmt 0 view .LVU116
 612 00d2 81A1      		ldd r24,Z+33
 613               	.LVL36:
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 614               		.loc 1 326 30 view .LVU117
 615 00d4 7822      		and r7,r24
 616 00d6 71A2      		std Z+33,r7
 327:quantum/matrix.c **** }
 617               		.loc 1 327 5 is_stmt 1 view .LVU118
 327:quantum/matrix.c **** }
 618               		.loc 1 327 30 is_stmt 0 view .LVU119
 619 00d8 82A1      		ldd r24,Z+34
 620 00da 282B      		or r18,r24
 621 00dc 22A3      		std Z+34,r18
 622               	.LVL37:
 327:quantum/matrix.c **** }
 623               		.loc 1 327 30 view .LVU120
 624               	.LBE57:
 625               	.LBE56:
 313:quantum/matrix.c **** }
 626               		.loc 1 313 5 is_stmt 1 view .LVU121
 313:quantum/matrix.c **** }
 627               		.loc 1 313 5 is_stmt 0 view .LVU122
 628               	.LBE59:
 629               	.LBE61:
 186:quantum/matrix.c ****                 debouncing = true;
 630               		.loc 1 186 13 is_stmt 1 view .LVU123
 186:quantum/matrix.c ****                 debouncing = true;
 631               		.loc 1 186 16 is_stmt 0 view .LVU124
 632 00de 8D91      		ld r24,X+
 633 00e0 9C91      		ld r25,X
 634 00e2 8816      		cp r8,r24
 635 00e4 9906      		cpc r9,r25
 636 00e6 01F0      		breq .L19
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 637               		.loc 1 187 17 is_stmt 1 view .LVU125
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 638               		.loc 1 187 28 is_stmt 0 view .LVU126
 639 00e8 6092 0000 		sts debouncing,r6
 188:quantum/matrix.c ****             }
 640               		.loc 1 188 17 is_stmt 1 view .LVU127
 188:quantum/matrix.c ****             }
 641               		.loc 1 188 35 is_stmt 0 view .LVU128
 642 00ec 0E94 0000 		call timer_read
 643               	.LVL38:
 188:quantum/matrix.c ****             }
 644               		.loc 1 188 33 view .LVU129
 645 00f0 9093 0000 		sts debouncing_time+1,r25
 646 00f4 8093 0000 		sts debouncing_time,r24
 647               	.L19:
 648               	.LVL39:
 188:quantum/matrix.c ****             }
 649               		.loc 1 188 33 view .LVU130
 650               	.LBE41:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 651               		.loc 1 182 5 discriminator 2 view .LVU131
 652 00f8 D0E0      		ldi r29,lo8(matrix_debouncing+18)
 653 00fa 2D16      		cp r2,r29
 654 00fc D0E0      		ldi r29,hi8(matrix_debouncing+18)
 655 00fe 3D06      		cpc r3,r29
 656 0100 01F0      		breq .+2
 657 0102 00C0      		rjmp .L20
 658               	.LBE64:
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 659               		.loc 1 216 9 is_stmt 1 view .LVU132
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 660               		.loc 1 216 12 is_stmt 0 view .LVU133
 661 0104 8091 0000 		lds r24,debouncing
 662 0108 8823      		tst r24
 663 010a 01F0      		breq .L22
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 664               		.loc 1 216 28 discriminator 1 view .LVU134
 665 010c 8091 0000 		lds r24,debouncing_time
 666 0110 9091 0000 		lds r25,debouncing_time+1
 667 0114 0E94 0000 		call timer_elapsed
 668               	.LVL40:
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 669               		.loc 1 216 24 discriminator 1 view .LVU135
 670 0118 0697      		sbiw r24,6
 671 011a 00F0      		brlo .L22
 672 011c E0E0      		ldi r30,lo8(matrix)
 673 011e F0E0      		ldi r31,hi8(matrix)
 674               	.L24:
 675               	.LBB65:
 218:quantum/matrix.c ****             }
 676               		.loc 1 218 17 is_stmt 1 discriminator 3 view .LVU136
 218:quantum/matrix.c ****             }
 677               		.loc 1 218 46 is_stmt 0 discriminator 3 view .LVU137
 678 0120 D801      		movw r26,r16
 679 0122 8D91      		ld r24,X+
 680 0124 9D91      		ld r25,X+
 681 0126 8D01      		movw r16,r26
 218:quantum/matrix.c ****             }
 682               		.loc 1 218 27 discriminator 3 view .LVU138
 683 0128 8193      		st Z+,r24
 684 012a 9193      		st Z+,r25
 685               	.LVL41:
 217:quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 686               		.loc 1 217 13 discriminator 3 view .LVU139
 687 012c B0E0      		ldi r27,hi8(matrix_debouncing+18)
 688 012e 0030      		cpi r16,lo8(matrix_debouncing+18)
 689 0130 1B07      		cpc r17,r27
 690 0132 01F4      		brne .L24
 691               	.LBE65:
 220:quantum/matrix.c ****         }
 692               		.loc 1 220 13 is_stmt 1 view .LVU140
 220:quantum/matrix.c ****         }
 693               		.loc 1 220 24 is_stmt 0 view .LVU141
 694 0134 1092 0000 		sts debouncing,__zero_reg__
 695               	.L22:
 224:quantum/matrix.c ****     return 1;
 696               		.loc 1 224 5 is_stmt 1 view .LVU142
 697 0138 0E94 0000 		call matrix_scan_quantum
 698               	.LVL42:
 225:quantum/matrix.c **** }
 699               		.loc 1 225 5 view .LVU143
 226:quantum/matrix.c **** 
 700               		.loc 1 226 1 is_stmt 0 view .LVU144
 701 013c 81E0      		ldi r24,lo8(1)
 702               	/* epilogue start */
 703 013e DF91      		pop r29
 704 0140 CF91      		pop r28
 705 0142 1F91      		pop r17
 706 0144 0F91      		pop r16
 707 0146 FF90      		pop r15
 708 0148 EF90      		pop r14
 709 014a DF90      		pop r13
 710 014c CF90      		pop r12
 711               	.LVL43:
 226:quantum/matrix.c **** 
 712               		.loc 1 226 1 view .LVU145
 713 014e BF90      		pop r11
 714 0150 AF90      		pop r10
 715 0152 9F90      		pop r9
 716 0154 8F90      		pop r8
 226:quantum/matrix.c **** 
 717               		.loc 1 226 1 view .LVU146
 718 0156 7F90      		pop r7
 719 0158 6F90      		pop r6
 720 015a 5F90      		pop r5
 721               	.LVL44:
 226:quantum/matrix.c **** 
 722               		.loc 1 226 1 view .LVU147
 723 015c 4F90      		pop r4
 724 015e 3F90      		pop r3
 725 0160 2F90      		pop r2
 726 0162 0895      		ret
 727               	.LVL45:
 728               	.L25:
 729               	.LBB66:
 730               	.LBB63:
 731               	.LBB62:
 732               	.LBB60:
 733               	.LBB58:
 734               	.LBB53:
 307:quantum/matrix.c ****     }
 735               		.loc 1 307 55 view .LVU148
 736 0164 50E0      		ldi r21,0
 737               	.LVL46:
 307:quantum/matrix.c ****     }
 738               		.loc 1 307 55 view .LVU149
 739 0166 40E0      		ldi r20,0
 740 0168 00C0      		rjmp .L17
 741               	.LBE53:
 742               	.LBE58:
 743               	.LBE60:
 744               	.LBE62:
 745               	.LBE63:
 746               	.LBE66:
 747               		.cfi_endproc
 748               	.LFE15:
 750               		.section	.text.matrix_is_modified,"ax",@progbits
 751               	.global	matrix_is_modified
 753               	matrix_is_modified:
 754               	.LFB16:
 229:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 755               		.loc 1 229 1 is_stmt 1 view -0
 756               		.cfi_startproc
 757               	/* prologue: function */
 758               	/* frame size = 0 */
 759               	/* stack size = 0 */
 760               	.L__stack_usage = 0
 231:quantum/matrix.c **** #endif
 761               		.loc 1 231 5 view .LVU151
 231:quantum/matrix.c **** #endif
 762               		.loc 1 231 8 is_stmt 0 view .LVU152
 763 0000 9091 0000 		lds r25,debouncing
 234:quantum/matrix.c **** 
 764               		.loc 1 234 1 view .LVU153
 765 0004 81E0      		ldi r24,lo8(1)
 766 0006 8927      		eor r24,r25
 767               	/* epilogue start */
 768 0008 0895      		ret
 769               		.cfi_endproc
 770               	.LFE16:
 772               		.section	.text.matrix_is_on,"ax",@progbits
 773               	.global	matrix_is_on
 775               	matrix_is_on:
 776               	.LVL47:
 777               	.LFB17:
 238:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 778               		.loc 1 238 1 is_stmt 1 view -0
 779               		.cfi_startproc
 780               	/* prologue: function */
 781               	/* frame size = 0 */
 782               	/* stack size = 0 */
 783               	.L__stack_usage = 0
 239:quantum/matrix.c **** }
 784               		.loc 1 239 5 view .LVU155
 239:quantum/matrix.c **** }
 785               		.loc 1 239 19 is_stmt 0 view .LVU156
 786 0000 E82F      		mov r30,r24
 787 0002 F0E0      		ldi r31,0
 788 0004 EE0F      		lsl r30
 789 0006 FF1F      		rol r31
 790               	.LVL48:
 239:quantum/matrix.c **** }
 791               		.loc 1 239 19 view .LVU157
 792 0008 E050      		subi r30,lo8(-(matrix))
 793 000a F040      		sbci r31,hi8(-(matrix))
 239:quantum/matrix.c **** }
 794               		.loc 1 239 43 view .LVU158
 795 000c 81E0      		ldi r24,lo8(1)
 796 000e 90E0      		ldi r25,0
 797 0010 6230      		cpi r22,lo8(2)
 798 0012 00F4      		brsh .L31
 799 0014 80E0      		ldi r24,0
 800               	.L31:
 239:quantum/matrix.c **** }
 801               		.loc 1 239 25 view .LVU159
 802 0016 2081      		ld r18,Z
 803 0018 3181      		ldd r19,Z+1
 804 001a 8223      		and r24,r18
 240:quantum/matrix.c **** 
 805               		.loc 1 240 1 view .LVU160
 806 001c 8170      		andi r24,lo8(1)
 807               	/* epilogue start */
 808 001e 0895      		ret
 809               		.cfi_endproc
 810               	.LFE17:
 812               		.section	.text.matrix_get_row,"ax",@progbits
 813               	.global	matrix_get_row
 815               	matrix_get_row:
 816               	.LVL49:
 817               	.LFB18:
 244:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 818               		.loc 1 244 1 is_stmt 1 view -0
 819               		.cfi_startproc
 820               	/* prologue: function */
 821               	/* frame size = 0 */
 822               	/* stack size = 0 */
 823               	.L__stack_usage = 0
 250:quantum/matrix.c **** #endif
 824               		.loc 1 250 5 view .LVU162
 250:quantum/matrix.c **** #endif
 825               		.loc 1 250 18 is_stmt 0 view .LVU163
 826 0000 E82F      		mov r30,r24
 827 0002 F0E0      		ldi r31,0
 828 0004 EE0F      		lsl r30
 829 0006 FF1F      		rol r31
 830               	.LVL50:
 250:quantum/matrix.c **** #endif
 831               		.loc 1 250 18 view .LVU164
 832 0008 E050      		subi r30,lo8(-(matrix))
 833 000a F040      		sbci r31,hi8(-(matrix))
 252:quantum/matrix.c **** 
 834               		.loc 1 252 1 view .LVU165
 835 000c 8081      		ld r24,Z
 836 000e 9181      		ldd r25,Z+1
 837               	/* epilogue start */
 838 0010 0895      		ret
 839               		.cfi_endproc
 840               	.LFE18:
 842               		.section	.text.matrix_print,"ax",@progbits
 843               	.global	matrix_print
 845               	matrix_print:
 846               	.LFB19:
 255:quantum/matrix.c ****     print_matrix_header();
 847               		.loc 1 255 1 is_stmt 1 view -0
 848               		.cfi_startproc
 849               	/* prologue: function */
 850               	/* frame size = 0 */
 851               	/* stack size = 0 */
 852               	.L__stack_usage = 0
 256:quantum/matrix.c **** 
 853               		.loc 1 256 26 view .LVU167
 258:quantum/matrix.c ****         phex(row); print(": ");
 854               		.loc 1 258 5 view .LVU168
 258:quantum/matrix.c ****         phex(row); print(": ");
 855               		.loc 1 258 10 view .LVU169
 856               	.LVL51:
 857               	/* epilogue start */
 263:quantum/matrix.c **** 
 858               		.loc 1 263 1 is_stmt 0 view .LVU170
 859 0000 0895      		ret
 860               		.cfi_endproc
 861               	.LFE19:
 863               		.section	.text.matrix_key_count,"ax",@progbits
 864               	.global	matrix_key_count
 866               	matrix_key_count:
 867               	.LFB20:
 266:quantum/matrix.c ****     uint8_t count = 0;
 868               		.loc 1 266 1 is_stmt 1 view -0
 869               		.cfi_startproc
 870 0000 0F93      		push r16
 871               	.LCFI18:
 872               		.cfi_def_cfa_offset 3
 873               		.cfi_offset 16, -2
 874 0002 1F93      		push r17
 875               	.LCFI19:
 876               		.cfi_def_cfa_offset 4
 877               		.cfi_offset 17, -3
 878 0004 CF93      		push r28
 879               	.LCFI20:
 880               		.cfi_def_cfa_offset 5
 881               		.cfi_offset 28, -4
 882               	/* prologue: function */
 883               	/* frame size = 0 */
 884               	/* stack size = 3 */
 885               	.L__stack_usage = 3
 267:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 886               		.loc 1 267 5 view .LVU172
 887               	.LVL52:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 888               		.loc 1 268 5 view .LVU173
 889               	.LBB67:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 890               		.loc 1 268 10 view .LVU174
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 891               		.loc 1 268 10 is_stmt 0 view .LVU175
 892 0006 00E0      		ldi r16,lo8(matrix)
 893 0008 10E0      		ldi r17,hi8(matrix)
 894               	.LBE67:
 267:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 895               		.loc 1 267 13 view .LVU176
 896 000a C0E0      		ldi r28,0
 897               	.LVL53:
 898               	.L35:
 899               	.LBB68:
 269:quantum/matrix.c ****     }
 900               		.loc 1 269 9 is_stmt 1 discriminator 3 view .LVU177
 269:quantum/matrix.c ****     }
 901               		.loc 1 269 18 is_stmt 0 discriminator 3 view .LVU178
 902 000c F801      		movw r30,r16
 903 000e 8191      		ld r24,Z+
 904 0010 9191      		ld r25,Z+
 905 0012 8F01      		movw r16,r30
 906 0014 0E94 0000 		call bitpop16
 907               	.LVL54:
 269:quantum/matrix.c ****     }
 908               		.loc 1 269 15 discriminator 3 view .LVU179
 909 0018 C80F      		add r28,r24
 910               	.LVL55:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 911               		.loc 1 268 5 discriminator 3 view .LVU180
 912 001a F0E0      		ldi r31,hi8(matrix+18)
 913 001c 0030      		cpi r16,lo8(matrix+18)
 914 001e 1F07      		cpc r17,r31
 915 0020 01F4      		brne .L35
 916               	.LBE68:
 271:quantum/matrix.c **** }
 917               		.loc 1 271 5 is_stmt 1 view .LVU181
 272:quantum/matrix.c **** 
 918               		.loc 1 272 1 is_stmt 0 view .LVU182
 919 0022 8C2F      		mov r24,r28
 920               	/* epilogue start */
 921 0024 CF91      		pop r28
 922               	.LVL56:
 272:quantum/matrix.c **** 
 923               		.loc 1 272 1 view .LVU183
 924 0026 1F91      		pop r17
 925 0028 0F91      		pop r16
 926 002a 0895      		ret
 927               		.cfi_endproc
 928               	.LFE20:
 930               		.section	.bss.matrix_debouncing,"aw",@nobits
 933               	matrix_debouncing:
 934 0000 0000 0000 		.zero	18
 934      0000 0000 
 934      0000 0000 
 934      0000 0000 
 934      0000 
 935               		.section	.bss.matrix,"aw",@nobits
 938               	matrix:
 939 0000 0000 0000 		.zero	18
 939      0000 0000 
 939      0000 0000 
 939      0000 0000 
 939      0000 
 940               		.section	.rodata.col_pins,"a"
 943               	col_pins:
 944 0000 C7        		.byte	-57
 945 0001 67        		.byte	103
 946 0002 66        		.byte	102
 947 0003 60        		.byte	96
 948 0004 C1        		.byte	-63
 949 0005 C0        		.byte	-64
 950 0006 97        		.byte	-105
 951 0007 34        		.byte	52
 952 0008 95        		.byte	-107
 953 0009 94        		.byte	-108
 954 000a 93        		.byte	-109
 955 000b 92        		.byte	-110
 956 000c 90        		.byte	-112
 957 000d 36        		.byte	54
 958 000e 06        		.byte	6
 959               		.section	.rodata.row_pins,"a"
 962               	row_pins:
 963 0000 F7        		.byte	-9
 964 0001 F6        		.byte	-10
 965 0002 F5        		.byte	-11
 966 0003 F4        		.byte	-12
 967 0004 F3        		.byte	-13
 968 0005 F2        		.byte	-14
 969 0006 C2        		.byte	-62
 970 0007 F0        		.byte	-16
 971 0008 62        		.byte	98
 972               		.section	.bss.debouncing,"aw",@nobits
 975               	debouncing:
 976 0000 00        		.zero	1
 977               		.section	.bss.debouncing_time,"aw",@nobits
 980               	debouncing_time:
 981 0000 0000      		.zero	2
 982               		.text
 983               	.Letext0:
 984               		.file 3 "/usr/avr/include/stdint.h"
 985               		.file 4 "./tmk_core/common/debug.h"
 986               		.file 5 "./tmk_core/common/matrix.h"
 987               		.file 6 "./tmk_core/common/timer.h"
 988               		.file 7 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/ccN8AQRo.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccN8AQRo.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccN8AQRo.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccN8AQRo.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccN8AQRo.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccN8AQRo.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccN8AQRo.s:14     .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/ccN8AQRo.s:14     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias.0
     /tmp/ccN8AQRo.s:33     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/ccN8AQRo.s:50     .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccN8AQRo.s:67     .text.matrix_scan_user:0000000000000000 matrix_scan_user
     /tmp/ccN8AQRo.s:82     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
     /tmp/ccN8AQRo.s:99     .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccN8AQRo.s:116    .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/ccN8AQRo.s:135    .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/ccN8AQRo.s:154    .text.matrix_init:0000000000000000 matrix_init
     /tmp/ccN8AQRo.s:962    .rodata.row_pins:0000000000000000 row_pins
     /tmp/ccN8AQRo.s:943    .rodata.col_pins:0000000000000000 col_pins
     /tmp/ccN8AQRo.s:938    .bss.matrix:0000000000000000 matrix
     /tmp/ccN8AQRo.s:933    .bss.matrix_debouncing:0000000000000000 matrix_debouncing
     /tmp/ccN8AQRo.s:323    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/ccN8AQRo.s:975    .bss.debouncing:0000000000000000 debouncing
     /tmp/ccN8AQRo.s:980    .bss.debouncing_time:0000000000000000 debouncing_time
     /tmp/ccN8AQRo.s:753    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/ccN8AQRo.s:775    .text.matrix_is_on:0000000000000000 matrix_is_on
     /tmp/ccN8AQRo.s:815    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/ccN8AQRo.s:845    .text.matrix_print:0000000000000000 matrix_print
     /tmp/ccN8AQRo.s:866    .text.matrix_key_count:0000000000000000 matrix_key_count

UNDEFINED SYMBOLS
timer_read
timer_elapsed
bitpop16
__do_copy_data
__do_clear_bss
