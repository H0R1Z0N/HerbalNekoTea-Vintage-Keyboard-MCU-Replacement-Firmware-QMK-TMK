   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_macro_play,"ax",@progbits
  12               	.global	action_macro_play
  14               	action_macro_play:
  15               	.LVL0:
  16               	.LFB103:
  17               		.file 1 "./tmk_core/common/action_macro.c"
   1:./tmk_core/common/action_macro.c **** /*
   2:./tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_macro.c **** 
   4:./tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_macro.c **** (at your option) any later version.
   8:./tmk_core/common/action_macro.c **** 
   9:./tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_macro.c **** 
  14:./tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_macro.c **** */
  17:./tmk_core/common/action_macro.c **** #include "action.h"
  18:./tmk_core/common/action_macro.c **** #include "action_util.h"
  19:./tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:./tmk_core/common/action_macro.c **** #include "wait.h"
  21:./tmk_core/common/action_macro.c **** 
  22:./tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:./tmk_core/common/action_macro.c **** #include "debug.h"
  24:./tmk_core/common/action_macro.c **** #else
  25:./tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:./tmk_core/common/action_macro.c **** #endif
  27:./tmk_core/common/action_macro.c **** 
  28:./tmk_core/common/action_macro.c **** 
  29:./tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:./tmk_core/common/action_macro.c **** 
  31:./tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:./tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:./tmk_core/common/action_macro.c **** {
  18               		.loc 1 33 1 view -0
  19               		.cfi_startproc
  20               		.loc 1 33 1 is_stmt 0 view .LVU1
  21 0000 EF92      		push r14
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 14, -2
  25 0002 FF92      		push r15
  26               	.LCFI1:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 15, -3
  29 0004 0F93      		push r16
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 16, -4
  33 0006 1F93      		push r17
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 17, -5
  37 0008 CF93      		push r28
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 28, -6
  41 000a DF93      		push r29
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 29, -7
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 6 */
  48               	.L__stack_usage = 6
  49 000c 8C01      		movw r16,r24
  34:./tmk_core/common/action_macro.c ****     macro_t macro = END;
  50               		.loc 1 34 5 is_stmt 1 view .LVU2
  51               	.LVL1:
  35:./tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  52               		.loc 1 35 5 view .LVU3
  36:./tmk_core/common/action_macro.c **** 
  37:./tmk_core/common/action_macro.c ****     if (!macro_p) return;
  53               		.loc 1 37 5 view .LVU4
  54               		.loc 1 37 8 is_stmt 0 view .LVU5
  55 000e 892B      		or r24,r25
  56 0010 01F0      		breq .L1
  35:./tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  57               		.loc 1 35 13 view .LVU6
  58 0012 F12C      		mov r15,__zero_reg__
  38:./tmk_core/common/action_macro.c ****     while (true) {
  39:./tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  40:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  41:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  42:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  43:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  44:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  59               		.loc 1 44 36 view .LVU7
  60 0014 EE24      		clr r14
  61 0016 E394      		inc r14
  62               	.LVL2:
  63               	.L17:
  38:./tmk_core/common/action_macro.c ****     while (true) {
  64               		.loc 1 38 5 is_stmt 1 view .LVU8
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  65               		.loc 1 39 9 view .LVU9
  66               	.LBB13:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  67               		.loc 1 39 17 view .LVU10
  68 0018 E801      		movw r28,r16
  69 001a 2196      		adiw r28,1
  70               	.LVL3:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  71               		.loc 1 39 17 view .LVU11
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  72               		.loc 1 39 17 view .LVU12
  73 001c F801      		movw r30,r16
  74               	/* #APP */
  75               	 ;  39 "./tmk_core/common/action_macro.c" 1
  76 001e 8491      		lpm r24, Z
  77               		
  78               	 ;  0 "" 2
  79               	.LVL4:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  80               		.loc 1 39 17 view .LVU13
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  81               		.loc 1 39 17 is_stmt 0 view .LVU14
  82               	/* #NOAPP */
  83               	.LBE13:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  84               		.loc 1 39 9 view .LVU15
  85 0020 8437      		cpi r24,lo8(116)
  86 0022 00F4      		brsh .L3
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
  87               		.loc 1 39 9 view .LVU16
  88 0024 8430      		cpi r24,lo8(4)
  89 0026 00F0      		brlo .+2
  90 0028 00C0      		rjmp .L4
  91 002a 8130      		cpi r24,lo8(1)
  92 002c 01F0      		breq .L5
  93 002e 8230      		cpi r24,lo8(2)
  94 0030 01F0      		breq .L6
  95               	.LVL5:
  96               	.L1:
  97               	/* epilogue start */
  45:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
  46:./tmk_core/common/action_macro.c ****                 } else {
  47:./tmk_core/common/action_macro.c ****                     register_code(macro);
  48:./tmk_core/common/action_macro.c ****                 }
  49:./tmk_core/common/action_macro.c ****                 break;
  50:./tmk_core/common/action_macro.c ****             case KEY_UP:
  51:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  52:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  53:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  54:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  55:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
  56:./tmk_core/common/action_macro.c ****                 } else {
  57:./tmk_core/common/action_macro.c ****                     unregister_code(macro);
  58:./tmk_core/common/action_macro.c ****                 }
  59:./tmk_core/common/action_macro.c ****                 break;
  60:./tmk_core/common/action_macro.c ****             case WAIT:
  61:./tmk_core/common/action_macro.c ****                 MACRO_READ();
  62:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  63:./tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
  64:./tmk_core/common/action_macro.c ****                 break;
  65:./tmk_core/common/action_macro.c ****             case INTERVAL:
  66:./tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  67:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  68:./tmk_core/common/action_macro.c ****                 break;
  69:./tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  70:./tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  71:./tmk_core/common/action_macro.c ****                 register_code(macro);
  72:./tmk_core/common/action_macro.c ****                 break;
  73:./tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  74:./tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  75:./tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
  76:./tmk_core/common/action_macro.c ****                 break;
  77:./tmk_core/common/action_macro.c ****             case END:
  78:./tmk_core/common/action_macro.c ****             default:
  79:./tmk_core/common/action_macro.c ****                 return;
  80:./tmk_core/common/action_macro.c ****         }
  81:./tmk_core/common/action_macro.c ****         // interval
  82:./tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
  83:./tmk_core/common/action_macro.c ****     }
  84:./tmk_core/common/action_macro.c **** }
  98               		.loc 1 84 1 view .LVU17
  99 0032 DF91      		pop r29
 100 0034 CF91      		pop r28
 101 0036 1F91      		pop r17
 102 0038 0F91      		pop r16
 103 003a FF90      		pop r15
 104 003c EF90      		pop r14
 105 003e 0895      		ret
 106               	.LVL6:
 107               	.L3:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
 108               		.loc 1 39 9 view .LVU18
 109 0040 8537      		cpi r24,lo8(117)
 110 0042 01F4      		brne .+2
 111 0044 00C0      		rjmp .L7
 112 0046 00F4      		brsh .+2
 113 0048 00C0      		rjmp .L8
 114 004a 9CE7      		ldi r25,lo8(124)
 115 004c 980F      		add r25,r24
 116 004e 9037      		cpi r25,lo8(112)
 117 0050 00F4      		brsh .L1
  74:./tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
 118               		.loc 1 74 45 is_stmt 1 view .LVU19
  75:./tmk_core/common/action_macro.c ****                 break;
 119               		.loc 1 75 17 view .LVU20
 120 0052 8F77      		andi r24,lo8(127)
 121               	.LVL7:
  75:./tmk_core/common/action_macro.c ****                 break;
 122               		.loc 1 75 17 is_stmt 0 view .LVU21
 123 0054 0E94 0000 		call unregister_code
 124               	.LVL8:
 125 0058 00C0      		rjmp .L23
 126               	.LVL9:
 127               	.L5:
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 128               		.loc 1 41 17 is_stmt 1 view .LVU22
 129               	.LBB14:
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 130               		.loc 1 41 17 view .LVU23
 131 005a 0E5F      		subi r16,-2
 132 005c 1F4F      		sbci r17,-1
 133               	.LVL10:
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 134               		.loc 1 41 17 view .LVU24
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 135               		.loc 1 41 17 view .LVU25
 136 005e FE01      		movw r30,r28
 137               	.LVL11:
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 138               		.loc 1 41 17 is_stmt 0 view .LVU26
 139               	/* #APP */
 140               	 ;  41 "./tmk_core/common/action_macro.c" 1
 141 0060 8491      		lpm r24, Z
 142               		
 143               	 ;  0 "" 2
 144               	.LVL12:
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 145               		.loc 1 41 17 is_stmt 1 view .LVU27
  41:./tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 146               		.loc 1 41 17 is_stmt 0 view .LVU28
 147               	/* #NOAPP */
 148               	.LBE14:
  42:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 149               		.loc 1 42 51 is_stmt 1 view .LVU29
  43:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 150               		.loc 1 43 17 view .LVU30
  43:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 151               		.loc 1 43 21 is_stmt 0 view .LVU31
 152 0062 90E2      		ldi r25,lo8(32)
 153 0064 980F      		add r25,r24
  43:./tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
 154               		.loc 1 43 20 view .LVU32
 155 0066 9830      		cpi r25,lo8(8)
 156 0068 00F4      		brsh .L10
  44:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 157               		.loc 1 44 21 is_stmt 1 view .LVU33
  44:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 158               		.loc 1 44 36 is_stmt 0 view .LVU34
 159 006a 8770      		andi r24,lo8(7)
 160               	.LVL13:
  44:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 161               		.loc 1 44 21 view .LVU35
 162 006c FE2D      		mov r31,r14
 163 006e 00C0      		rjmp 2f
 164               		1:
 165 0070 FF0F      		lsl r31
 166               		2:
 167 0072 8A95      		dec r24
 168 0074 02F4      		brpl 1b
 169 0076 8F2F      		mov r24,r31
 170 0078 0E94 0000 		call add_macro_mods
 171               	.LVL14:
  45:./tmk_core/common/action_macro.c ****                 } else {
 172               		.loc 1 45 21 is_stmt 1 view .LVU36
 173               	.L22:
  55:./tmk_core/common/action_macro.c ****                 } else {
 174               		.loc 1 55 21 view .LVU37
 175 007c 0E94 0000 		call send_keyboard_report
 176               	.LVL15:
 177 0080 00C0      		rjmp .L11
 178               	.LVL16:
 179               	.L10:
  47:./tmk_core/common/action_macro.c ****                 }
 180               		.loc 1 47 21 view .LVU38
 181 0082 0E94 0000 		call register_code
 182               	.LVL17:
 183               	.L11:
 184               	.LBB15:
  82:./tmk_core/common/action_macro.c ****     }
 185               		.loc 1 82 11 view .LVU39
  82:./tmk_core/common/action_macro.c ****     }
 186               		.loc 1 82 34 view .LVU40
  82:./tmk_core/common/action_macro.c ****     }
 187               		.loc 1 82 19 is_stmt 0 view .LVU41
 188 0086 8F2D      		mov r24,r15
 189               	.LVL18:
 190               	.L15:
  82:./tmk_core/common/action_macro.c ****     }
 191               		.loc 1 82 43 discriminator 1 view .LVU42
 192               	.LVL19:
 193 0088 8150      		subi r24,1
 194 008a 00F0      		brcs .L17
  82:./tmk_core/common/action_macro.c ****     }
 195               		.loc 1 82 47 is_stmt 1 view .LVU43
 196               	.LBB16:
 197               	.LBI16:
 198               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 199               		.loc 2 166 1 view .LVU44
 200               	.LBB17:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 201               		.loc 2 168 2 view .LVU45
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 202               		.loc 2 172 2 view .LVU46
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 203               		.loc 2 173 2 view .LVU47
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 204               		.loc 2 174 2 view .LVU48
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 205               		.loc 2 184 3 view .LVU49
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 206               		.loc 2 187 2 view .LVU50
 207 008c EFE9      		ldi r30,lo8(3999)
 208 008e FFE0      		ldi r31,hi8(3999)
 209 0090 3197      	1:	sbiw r30,1
 210 0092 01F4      		brne 1b
 211 0094 00C0      		rjmp .
 212 0096 0000      		nop
 213 0098 00C0      		rjmp .L15
 214               	.LVL20:
 215               	.L6:
 216               		.loc 2 187 2 is_stmt 0 view .LVU51
 217               	.LBE17:
 218               	.LBE16:
 219               	.LBE15:
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 220               		.loc 1 51 17 is_stmt 1 view .LVU52
 221               	.LBB18:
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 222               		.loc 1 51 17 view .LVU53
 223 009a 0E5F      		subi r16,-2
 224 009c 1F4F      		sbci r17,-1
 225               	.LVL21:
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 226               		.loc 1 51 17 view .LVU54
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 227               		.loc 1 51 17 view .LVU55
 228 009e FE01      		movw r30,r28
 229               	.LVL22:
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 230               		.loc 1 51 17 is_stmt 0 view .LVU56
 231               	/* #APP */
 232               	 ;  51 "./tmk_core/common/action_macro.c" 1
 233 00a0 8491      		lpm r24, Z
 234               		
 235               	 ;  0 "" 2
 236               	.LVL23:
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 237               		.loc 1 51 17 is_stmt 1 view .LVU57
  51:./tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 238               		.loc 1 51 17 is_stmt 0 view .LVU58
 239               	/* #NOAPP */
 240               	.LBE18:
  52:./tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 241               		.loc 1 52 49 is_stmt 1 view .LVU59
  53:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 242               		.loc 1 53 17 view .LVU60
  53:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 243               		.loc 1 53 21 is_stmt 0 view .LVU61
 244 00a2 90E2      		ldi r25,lo8(32)
 245 00a4 980F      		add r25,r24
  53:./tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 246               		.loc 1 53 20 view .LVU62
 247 00a6 9830      		cpi r25,lo8(8)
 248 00a8 00F4      		brsh .L12
  54:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 249               		.loc 1 54 21 is_stmt 1 view .LVU63
  54:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 250               		.loc 1 54 36 is_stmt 0 view .LVU64
 251 00aa 8770      		andi r24,lo8(7)
 252               	.LVL24:
  54:./tmk_core/common/action_macro.c ****                     send_keyboard_report();
 253               		.loc 1 54 21 view .LVU65
 254 00ac FE2D      		mov r31,r14
 255 00ae 00C0      		rjmp 2f
 256               		1:
 257 00b0 FF0F      		lsl r31
 258               		2:
 259 00b2 8A95      		dec r24
 260 00b4 02F4      		brpl 1b
 261 00b6 8F2F      		mov r24,r31
 262 00b8 0E94 0000 		call del_macro_mods
 263               	.LVL25:
 264 00bc 00C0      		rjmp .L22
 265               	.LVL26:
 266               	.L12:
  57:./tmk_core/common/action_macro.c ****                 }
 267               		.loc 1 57 21 is_stmt 1 view .LVU66
 268 00be 0E94 0000 		call unregister_code
 269               	.LVL27:
  57:./tmk_core/common/action_macro.c ****                 }
 270               		.loc 1 57 21 is_stmt 0 view .LVU67
 271 00c2 00C0      		rjmp .L11
 272               	.LVL28:
 273               	.L8:
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 274               		.loc 1 61 17 is_stmt 1 view .LVU68
 275               	.LBB19:
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 276               		.loc 1 61 17 view .LVU69
 277 00c4 0E5F      		subi r16,-2
 278 00c6 1F4F      		sbci r17,-1
 279               	.LVL29:
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 280               		.loc 1 61 17 view .LVU70
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 281               		.loc 1 61 17 view .LVU71
 282 00c8 FE01      		movw r30,r28
 283               	.LVL30:
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 284               		.loc 1 61 17 is_stmt 0 view .LVU72
 285               	/* #APP */
 286               	 ;  61 "./tmk_core/common/action_macro.c" 1
 287 00ca C491      		lpm r28, Z
 288               		
 289               	 ;  0 "" 2
 290               	.LVL31:
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 291               		.loc 1 61 17 is_stmt 1 view .LVU73
  61:./tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 292               		.loc 1 61 17 is_stmt 0 view .LVU74
 293               	/* #NOAPP */
 294               	.LBE19:
  62:./tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
 295               		.loc 1 62 45 is_stmt 1 view .LVU75
 296               	.LBB20:
  63:./tmk_core/common/action_macro.c ****                 break;
 297               		.loc 1 63 19 view .LVU76
  63:./tmk_core/common/action_macro.c ****                 break;
 298               		.loc 1 63 39 view .LVU77
 299               	.L13:
  63:./tmk_core/common/action_macro.c ****                 break;
 300               		.loc 1 63 48 is_stmt 0 discriminator 1 view .LVU78
 301               	.LVL32:
 302 00cc C150      		subi r28,1
 303 00ce 00F0      		brcs .L11
  63:./tmk_core/common/action_macro.c ****                 break;
 304               		.loc 1 63 52 is_stmt 1 view .LVU79
 305               	.LBB21:
 306               	.LBI21:
 166:/usr/avr/include/util/delay.h **** {
 307               		.loc 2 166 1 view .LVU80
 308               	.LBB22:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 309               		.loc 2 168 2 view .LVU81
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 310               		.loc 2 172 2 view .LVU82
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 311               		.loc 2 173 2 view .LVU83
 174:/usr/avr/include/util/delay.h **** 
 312               		.loc 2 174 2 view .LVU84
 184:/usr/avr/include/util/delay.h **** 	#endif
 313               		.loc 2 184 3 view .LVU85
 314               		.loc 2 187 2 view .LVU86
 315 00d0 8FE9      		ldi r24,lo8(3999)
 316 00d2 9FE0      		ldi r25,hi8(3999)
 317 00d4 0197      	1:	sbiw r24,1
 318 00d6 01F4      		brne 1b
 319 00d8 00C0      		rjmp .
 320 00da 0000      		nop
 321 00dc 00C0      		rjmp .L13
 322               	.LVL33:
 323               	.L7:
 324               		.loc 2 187 2 is_stmt 0 view .LVU87
 325               	.LBE22:
 326               	.LBE21:
 327               	.LBE20:
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 328               		.loc 1 66 17 is_stmt 1 view .LVU88
 329               	.LBB23:
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 330               		.loc 1 66 28 view .LVU89
 331 00de 0E5F      		subi r16,-2
 332 00e0 1F4F      		sbci r17,-1
 333               	.LVL34:
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 334               		.loc 1 66 28 view .LVU90
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 335               		.loc 1 66 28 view .LVU91
 336 00e2 FE01      		movw r30,r28
 337               	.LVL35:
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 338               		.loc 1 66 28 is_stmt 0 view .LVU92
 339               	/* #APP */
 340               	 ;  66 "./tmk_core/common/action_macro.c" 1
 341 00e4 F490      		lpm r15, Z
 342               		
 343               	 ;  0 "" 2
 344               	.LVL36:
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 345               		.loc 1 66 28 is_stmt 1 view .LVU93
  66:./tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 346               		.loc 1 66 28 is_stmt 0 view .LVU94
 347               	/* #NOAPP */
 348               	.LBE23:
  67:./tmk_core/common/action_macro.c ****                 break;
 349               		.loc 1 67 52 is_stmt 1 view .LVU95
  68:./tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 350               		.loc 1 68 17 view .LVU96
 351 00e6 00C0      		rjmp .L11
 352               	.LVL37:
 353               	.L4:
  70:./tmk_core/common/action_macro.c ****                 register_code(macro);
 354               		.loc 1 70 47 view .LVU97
  71:./tmk_core/common/action_macro.c ****                 break;
 355               		.loc 1 71 17 view .LVU98
 356 00e8 0E94 0000 		call register_code
 357               	.LVL38:
  72:./tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
 358               		.loc 1 72 17 view .LVU99
 359               	.L23:
  76:./tmk_core/common/action_macro.c ****             case END:
 360               		.loc 1 76 17 view .LVU100
 361               	.LBB24:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
 362               		.loc 1 39 17 is_stmt 0 view .LVU101
 363 00ec 8E01      		movw r16,r28
 364               	.LVL39:
  39:./tmk_core/common/action_macro.c ****             case KEY_DOWN:
 365               		.loc 1 39 17 view .LVU102
 366               	.LBE24:
  76:./tmk_core/common/action_macro.c ****             case END:
 367               		.loc 1 76 17 view .LVU103
 368 00ee 00C0      		rjmp .L11
 369               		.cfi_endproc
 370               	.LFE103:
 372               		.text
 373               	.Letext0:
 374               		.file 3 "/usr/avr/include/stdint.h"
 375               		.file 4 "./tmk_core/common/action_macro.h"
 376               		.file 5 "./tmk_core/common/keycode.h"
 377               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 378               		.file 7 "./tmk_core/common/action.h"
 379               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 380               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 381               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/HostStandardReq.h"
 382               		.file 11 "/usr/avr/include/stdio.h"
 383               		.file 12 "./tmk_core/common/report.h"
 384               		.file 13 "./tmk_core/common/action_util.h"
 385               		.file 14 "./tmk_core/common/debug.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccNC20wu.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccNC20wu.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccNC20wu.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccNC20wu.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccNC20wu.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccNC20wu.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccNC20wu.s:14     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
unregister_code
add_macro_mods
send_keyboard_report
register_code
del_macro_mods
