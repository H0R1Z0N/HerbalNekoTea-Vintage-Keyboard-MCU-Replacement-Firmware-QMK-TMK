   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.default_layer_debug,"ax",@progbits
  12               	.global	default_layer_debug
  14               	default_layer_debug:
  15               	.LFB5:
  16               		.file 1 "./tmk_core/common/action_layer.c"
   1:./tmk_core/common/action_layer.c **** #include <stdint.h>
   2:./tmk_core/common/action_layer.c **** #include "keyboard.h"
   3:./tmk_core/common/action_layer.c **** #include "action.h"
   4:./tmk_core/common/action_layer.c **** #include "util.h"
   5:./tmk_core/common/action_layer.c **** #include "action_layer.h"
   6:./tmk_core/common/action_layer.c **** 
   7:./tmk_core/common/action_layer.c **** #ifdef DEBUG_ACTION
   8:./tmk_core/common/action_layer.c **** #include "debug.h"
   9:./tmk_core/common/action_layer.c **** #else
  10:./tmk_core/common/action_layer.c **** #include "nodebug.h"
  11:./tmk_core/common/action_layer.c **** #endif
  12:./tmk_core/common/action_layer.c **** 
  13:./tmk_core/common/action_layer.c **** 
  14:./tmk_core/common/action_layer.c **** /*
  15:./tmk_core/common/action_layer.c ****  * Default Layer State
  16:./tmk_core/common/action_layer.c ****  */
  17:./tmk_core/common/action_layer.c **** uint32_t default_layer_state = 0;
  18:./tmk_core/common/action_layer.c **** 
  19:./tmk_core/common/action_layer.c **** static void default_layer_state_set(uint32_t state)
  20:./tmk_core/common/action_layer.c **** {
  21:./tmk_core/common/action_layer.c ****     debug("default_layer_state: ");
  22:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug(" to ");
  23:./tmk_core/common/action_layer.c ****     default_layer_state = state;
  24:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
  25:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  26:./tmk_core/common/action_layer.c **** }
  27:./tmk_core/common/action_layer.c **** 
  28:./tmk_core/common/action_layer.c **** void default_layer_debug(void)
  29:./tmk_core/common/action_layer.c **** {
  17               		.loc 1 29 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  30:./tmk_core/common/action_layer.c ****     dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
  23               		.loc 1 30 76 view .LVU1
  24               	/* epilogue start */
  31:./tmk_core/common/action_layer.c **** }
  25               		.loc 1 31 1 is_stmt 0 view .LVU2
  26 0000 0895      		ret
  27               		.cfi_endproc
  28               	.LFE5:
  30               		.section	.text.default_layer_set,"ax",@progbits
  31               	.global	default_layer_set
  33               	default_layer_set:
  34               	.LVL0:
  35               	.LFB6:
  32:./tmk_core/common/action_layer.c **** 
  33:./tmk_core/common/action_layer.c **** void default_layer_set(uint32_t state)
  34:./tmk_core/common/action_layer.c **** {
  36               		.loc 1 34 1 is_stmt 1 view -0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  35:./tmk_core/common/action_layer.c ****     default_layer_state_set(state);
  42               		.loc 1 35 5 view .LVU4
  43               	.LBB4:
  44               	.LBI4:
  19:./tmk_core/common/action_layer.c **** {
  45               		.loc 1 19 13 view .LVU5
  46               	.LBB5:
  21:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug(" to ");
  47               		.loc 1 21 35 view .LVU6
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
  48               		.loc 1 22 5 view .LVU7
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
  49               		.loc 1 22 41 view .LVU8
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
  50               		.loc 1 23 5 view .LVU9
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
  51               		.loc 1 23 25 is_stmt 0 view .LVU10
  52 0000 6093 0000 		sts default_layer_state,r22
  53 0004 7093 0000 		sts default_layer_state+1,r23
  54 0008 8093 0000 		sts default_layer_state+2,r24
  55 000c 9093 0000 		sts default_layer_state+3,r25
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  56               		.loc 1 24 5 is_stmt 1 view .LVU11
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  57               		.loc 1 24 39 view .LVU12
  25:./tmk_core/common/action_layer.c **** }
  58               		.loc 1 25 5 view .LVU13
  59 0010 0C94 0000 		jmp clear_keyboard_but_mods
  60               	.LVL1:
  25:./tmk_core/common/action_layer.c **** }
  61               		.loc 1 25 5 is_stmt 0 view .LVU14
  62               	.LBE5:
  63               	.LBE4:
  64               		.cfi_endproc
  65               	.LFE6:
  67               		.section	.text.default_layer_or,"ax",@progbits
  68               	.global	default_layer_or
  70               	default_layer_or:
  71               	.LVL2:
  72               	.LFB7:
  36:./tmk_core/common/action_layer.c **** }
  37:./tmk_core/common/action_layer.c **** 
  38:./tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  39:./tmk_core/common/action_layer.c **** void default_layer_or(uint32_t state)
  40:./tmk_core/common/action_layer.c **** {
  73               		.loc 1 40 1 is_stmt 1 view -0
  74               		.cfi_startproc
  75               		.loc 1 40 1 is_stmt 0 view .LVU16
  76 0000 0F93      		push r16
  77               	.LCFI0:
  78               		.cfi_def_cfa_offset 3
  79               		.cfi_offset 16, -2
  80 0002 1F93      		push r17
  81               	.LCFI1:
  82               		.cfi_def_cfa_offset 4
  83               		.cfi_offset 17, -3
  84               	/* prologue: function */
  85               	/* frame size = 0 */
  86               	/* stack size = 2 */
  87               	.L__stack_usage = 2
  41:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state | state);
  88               		.loc 1 41 5 is_stmt 1 view .LVU17
  89               	.LVL3:
  90               	.LBB8:
  91               	.LBI8:
  19:./tmk_core/common/action_layer.c **** {
  92               		.loc 1 19 13 view .LVU18
  93               	.LBB9:
  21:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug(" to ");
  94               		.loc 1 21 35 view .LVU19
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
  95               		.loc 1 22 5 view .LVU20
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
  96               		.loc 1 22 41 view .LVU21
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
  97               		.loc 1 23 5 view .LVU22
  98               	.LBE9:
  99               	.LBE8:
 100               		.loc 1 41 5 is_stmt 0 view .LVU23
 101 0004 0091 0000 		lds r16,default_layer_state
 102 0008 1091 0000 		lds r17,default_layer_state+1
 103 000c 2091 0000 		lds r18,default_layer_state+2
 104 0010 3091 0000 		lds r19,default_layer_state+3
 105 0014 DC01      		movw r26,r24
 106 0016 CB01      		movw r24,r22
 107 0018 802B      		or r24,r16
 108 001a 912B      		or r25,r17
 109 001c A22B      		or r26,r18
 110 001e B32B      		or r27,r19
 111               	.LBB12:
 112               	.LBB10:
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
 113               		.loc 1 23 25 view .LVU24
 114 0020 8093 0000 		sts default_layer_state,r24
 115 0024 9093 0000 		sts default_layer_state+1,r25
 116 0028 A093 0000 		sts default_layer_state+2,r26
 117 002c B093 0000 		sts default_layer_state+3,r27
 118               	.LVL4:
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 119               		.loc 1 24 5 is_stmt 1 view .LVU25
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 120               		.loc 1 24 39 view .LVU26
  25:./tmk_core/common/action_layer.c **** }
 121               		.loc 1 25 5 view .LVU27
 122               	/* epilogue start */
 123               	.LBE10:
 124               	.LBE12:
  42:./tmk_core/common/action_layer.c **** }
 125               		.loc 1 42 1 is_stmt 0 view .LVU28
 126 0030 1F91      		pop r17
 127 0032 0F91      		pop r16
 128               	.LVL5:
 129               	.LBB13:
 130               	.LBB11:
  25:./tmk_core/common/action_layer.c **** }
 131               		.loc 1 25 5 view .LVU29
 132 0034 0C94 0000 		jmp clear_keyboard_but_mods
 133               	.LVL6:
  25:./tmk_core/common/action_layer.c **** }
 134               		.loc 1 25 5 view .LVU30
 135               	.LBE11:
 136               	.LBE13:
 137               		.cfi_endproc
 138               	.LFE7:
 140               		.section	.text.default_layer_and,"ax",@progbits
 141               	.global	default_layer_and
 143               	default_layer_and:
 144               	.LVL7:
 145               	.LFB8:
  43:./tmk_core/common/action_layer.c **** void default_layer_and(uint32_t state)
  44:./tmk_core/common/action_layer.c **** {
 146               		.loc 1 44 1 is_stmt 1 view -0
 147               		.cfi_startproc
 148               		.loc 1 44 1 is_stmt 0 view .LVU32
 149 0000 0F93      		push r16
 150               	.LCFI2:
 151               		.cfi_def_cfa_offset 3
 152               		.cfi_offset 16, -2
 153 0002 1F93      		push r17
 154               	.LCFI3:
 155               		.cfi_def_cfa_offset 4
 156               		.cfi_offset 17, -3
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 2 */
 160               	.L__stack_usage = 2
  45:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state & state);
 161               		.loc 1 45 5 is_stmt 1 view .LVU33
 162               	.LVL8:
 163               	.LBB16:
 164               	.LBI16:
  19:./tmk_core/common/action_layer.c **** {
 165               		.loc 1 19 13 view .LVU34
 166               	.LBB17:
  21:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug(" to ");
 167               		.loc 1 21 35 view .LVU35
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
 168               		.loc 1 22 5 view .LVU36
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
 169               		.loc 1 22 41 view .LVU37
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
 170               		.loc 1 23 5 view .LVU38
 171               	.LBE17:
 172               	.LBE16:
 173               		.loc 1 45 5 is_stmt 0 view .LVU39
 174 0004 0091 0000 		lds r16,default_layer_state
 175 0008 1091 0000 		lds r17,default_layer_state+1
 176 000c 2091 0000 		lds r18,default_layer_state+2
 177 0010 3091 0000 		lds r19,default_layer_state+3
 178 0014 DC01      		movw r26,r24
 179 0016 CB01      		movw r24,r22
 180 0018 8023      		and r24,r16
 181 001a 9123      		and r25,r17
 182 001c A223      		and r26,r18
 183 001e B323      		and r27,r19
 184               	.LBB20:
 185               	.LBB18:
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
 186               		.loc 1 23 25 view .LVU40
 187 0020 8093 0000 		sts default_layer_state,r24
 188 0024 9093 0000 		sts default_layer_state+1,r25
 189 0028 A093 0000 		sts default_layer_state+2,r26
 190 002c B093 0000 		sts default_layer_state+3,r27
 191               	.LVL9:
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 192               		.loc 1 24 5 is_stmt 1 view .LVU41
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 193               		.loc 1 24 39 view .LVU42
  25:./tmk_core/common/action_layer.c **** }
 194               		.loc 1 25 5 view .LVU43
 195               	/* epilogue start */
 196               	.LBE18:
 197               	.LBE20:
  46:./tmk_core/common/action_layer.c **** }
 198               		.loc 1 46 1 is_stmt 0 view .LVU44
 199 0030 1F91      		pop r17
 200 0032 0F91      		pop r16
 201               	.LVL10:
 202               	.LBB21:
 203               	.LBB19:
  25:./tmk_core/common/action_layer.c **** }
 204               		.loc 1 25 5 view .LVU45
 205 0034 0C94 0000 		jmp clear_keyboard_but_mods
 206               	.LVL11:
  25:./tmk_core/common/action_layer.c **** }
 207               		.loc 1 25 5 view .LVU46
 208               	.LBE19:
 209               	.LBE21:
 210               		.cfi_endproc
 211               	.LFE8:
 213               		.section	.text.default_layer_xor,"ax",@progbits
 214               	.global	default_layer_xor
 216               	default_layer_xor:
 217               	.LVL12:
 218               	.LFB9:
  47:./tmk_core/common/action_layer.c **** void default_layer_xor(uint32_t state)
  48:./tmk_core/common/action_layer.c **** {
 219               		.loc 1 48 1 is_stmt 1 view -0
 220               		.cfi_startproc
 221               		.loc 1 48 1 is_stmt 0 view .LVU48
 222 0000 0F93      		push r16
 223               	.LCFI4:
 224               		.cfi_def_cfa_offset 3
 225               		.cfi_offset 16, -2
 226 0002 1F93      		push r17
 227               	.LCFI5:
 228               		.cfi_def_cfa_offset 4
 229               		.cfi_offset 17, -3
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 2 */
 233               	.L__stack_usage = 2
  49:./tmk_core/common/action_layer.c ****     default_layer_state_set(default_layer_state ^ state);
 234               		.loc 1 49 5 is_stmt 1 view .LVU49
 235               	.LVL13:
 236               	.LBB24:
 237               	.LBI24:
  19:./tmk_core/common/action_layer.c **** {
 238               		.loc 1 19 13 view .LVU50
 239               	.LBB25:
  21:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug(" to ");
 240               		.loc 1 21 35 view .LVU51
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
 241               		.loc 1 22 5 view .LVU52
  22:./tmk_core/common/action_layer.c ****     default_layer_state = state;
 242               		.loc 1 22 41 view .LVU53
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
 243               		.loc 1 23 5 view .LVU54
 244               	.LBE25:
 245               	.LBE24:
 246               		.loc 1 49 5 is_stmt 0 view .LVU55
 247 0004 0091 0000 		lds r16,default_layer_state
 248 0008 1091 0000 		lds r17,default_layer_state+1
 249 000c 2091 0000 		lds r18,default_layer_state+2
 250 0010 3091 0000 		lds r19,default_layer_state+3
 251 0014 DC01      		movw r26,r24
 252 0016 CB01      		movw r24,r22
 253 0018 8027      		eor r24,r16
 254 001a 9127      		eor r25,r17
 255 001c A227      		eor r26,r18
 256 001e B327      		eor r27,r19
 257               	.LBB28:
 258               	.LBB26:
  23:./tmk_core/common/action_layer.c ****     default_layer_debug(); debug("\n");
 259               		.loc 1 23 25 view .LVU56
 260 0020 8093 0000 		sts default_layer_state,r24
 261 0024 9093 0000 		sts default_layer_state+1,r25
 262 0028 A093 0000 		sts default_layer_state+2,r26
 263 002c B093 0000 		sts default_layer_state+3,r27
 264               	.LVL14:
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 265               		.loc 1 24 5 is_stmt 1 view .LVU57
  24:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 266               		.loc 1 24 39 view .LVU58
  25:./tmk_core/common/action_layer.c **** }
 267               		.loc 1 25 5 view .LVU59
 268               	/* epilogue start */
 269               	.LBE26:
 270               	.LBE28:
  50:./tmk_core/common/action_layer.c **** }
 271               		.loc 1 50 1 is_stmt 0 view .LVU60
 272 0030 1F91      		pop r17
 273 0032 0F91      		pop r16
 274               	.LVL15:
 275               	.LBB29:
 276               	.LBB27:
  25:./tmk_core/common/action_layer.c **** }
 277               		.loc 1 25 5 view .LVU61
 278 0034 0C94 0000 		jmp clear_keyboard_but_mods
 279               	.LVL16:
  25:./tmk_core/common/action_layer.c **** }
 280               		.loc 1 25 5 view .LVU62
 281               	.LBE27:
 282               	.LBE29:
 283               		.cfi_endproc
 284               	.LFE9:
 286               		.section	.text.layer_clear,"ax",@progbits
 287               	.global	layer_clear
 289               	layer_clear:
 290               	.LFB11:
  51:./tmk_core/common/action_layer.c **** #endif
  52:./tmk_core/common/action_layer.c **** 
  53:./tmk_core/common/action_layer.c **** 
  54:./tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  55:./tmk_core/common/action_layer.c **** /*
  56:./tmk_core/common/action_layer.c ****  * Keymap Layer State
  57:./tmk_core/common/action_layer.c ****  */
  58:./tmk_core/common/action_layer.c **** uint32_t layer_state = 0;
  59:./tmk_core/common/action_layer.c **** 
  60:./tmk_core/common/action_layer.c **** static void layer_state_set(uint32_t state)
  61:./tmk_core/common/action_layer.c **** {
  62:./tmk_core/common/action_layer.c ****     dprint("layer_state: ");
  63:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
  64:./tmk_core/common/action_layer.c ****     layer_state = state;
  65:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
  66:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  67:./tmk_core/common/action_layer.c **** }
  68:./tmk_core/common/action_layer.c **** 
  69:./tmk_core/common/action_layer.c **** void layer_clear(void)
  70:./tmk_core/common/action_layer.c **** {
 291               		.loc 1 70 1 is_stmt 1 view -0
 292               		.cfi_startproc
 293               	/* prologue: function */
 294               	/* frame size = 0 */
 295               	/* stack size = 0 */
 296               	.L__stack_usage = 0
  71:./tmk_core/common/action_layer.c ****     layer_state_set(0);
 297               		.loc 1 71 5 view .LVU64
 298               	.LVL17:
 299               	.LBB32:
 300               	.LBI32:
  60:./tmk_core/common/action_layer.c **** {
 301               		.loc 1 60 13 view .LVU65
 302               	.LBB33:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 303               		.loc 1 62 28 view .LVU66
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 304               		.loc 1 63 5 view .LVU67
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 305               		.loc 1 63 34 view .LVU68
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 306               		.loc 1 64 5 view .LVU69
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 307               		.loc 1 64 17 is_stmt 0 view .LVU70
 308 0000 1092 0000 		sts layer_state,__zero_reg__
 309 0004 1092 0000 		sts layer_state+1,__zero_reg__
 310 0008 1092 0000 		sts layer_state+2,__zero_reg__
 311 000c 1092 0000 		sts layer_state+3,__zero_reg__
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 312               		.loc 1 65 5 is_stmt 1 view .LVU71
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 313               		.loc 1 65 30 view .LVU72
  66:./tmk_core/common/action_layer.c **** }
 314               		.loc 1 66 5 view .LVU73
 315 0010 0C94 0000 		jmp clear_keyboard_but_mods
 316               	.LVL18:
 317               	.LBE33:
 318               	.LBE32:
 319               		.cfi_endproc
 320               	.LFE11:
 322               		.section	.text.layer_move,"ax",@progbits
 323               	.global	layer_move
 325               	layer_move:
 326               	.LVL19:
 327               	.LFB12:
  72:./tmk_core/common/action_layer.c **** }
  73:./tmk_core/common/action_layer.c **** 
  74:./tmk_core/common/action_layer.c **** void layer_move(uint8_t layer)
  75:./tmk_core/common/action_layer.c **** {
 328               		.loc 1 75 1 view -0
 329               		.cfi_startproc
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
  76:./tmk_core/common/action_layer.c ****     layer_state_set(1UL<<layer);
 334               		.loc 1 76 5 view .LVU75
 335               	.LBB36:
 336               	.LBI36:
  60:./tmk_core/common/action_layer.c **** {
 337               		.loc 1 60 13 view .LVU76
 338               	.LBB37:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 339               		.loc 1 62 28 view .LVU77
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 340               		.loc 1 63 5 view .LVU78
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 341               		.loc 1 63 34 view .LVU79
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 342               		.loc 1 64 5 view .LVU80
 343               	.LBE37:
 344               	.LBE36:
 345               		.loc 1 76 5 is_stmt 0 view .LVU81
 346 0000 41E0      		ldi r20,lo8(1)
 347 0002 50E0      		ldi r21,0
 348 0004 60E0      		ldi r22,0
 349 0006 70E0      		ldi r23,0
 350 0008 00C0      		rjmp 2f
 351               		1:
 352 000a 440F      		lsl r20
 353 000c 551F      		rol r21
 354 000e 661F      		rol r22
 355 0010 771F      		rol r23
 356               		2:
 357 0012 8A95      		dec r24
 358 0014 02F4      		brpl 1b
 359               	.LBB39:
 360               	.LBB38:
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 361               		.loc 1 64 17 view .LVU82
 362 0016 4093 0000 		sts layer_state,r20
 363 001a 5093 0000 		sts layer_state+1,r21
 364 001e 6093 0000 		sts layer_state+2,r22
 365 0022 7093 0000 		sts layer_state+3,r23
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 366               		.loc 1 65 5 is_stmt 1 view .LVU83
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 367               		.loc 1 65 30 view .LVU84
  66:./tmk_core/common/action_layer.c **** }
 368               		.loc 1 66 5 view .LVU85
 369 0026 0C94 0000 		jmp clear_keyboard_but_mods
 370               	.LVL20:
  66:./tmk_core/common/action_layer.c **** }
 371               		.loc 1 66 5 is_stmt 0 view .LVU86
 372               	.LBE38:
 373               	.LBE39:
 374               		.cfi_endproc
 375               	.LFE12:
 377               		.section	.text.layer_on,"ax",@progbits
 378               	.global	layer_on
 380               	layer_on:
 381               	.LVL21:
 382               	.LFB13:
  77:./tmk_core/common/action_layer.c **** }
  78:./tmk_core/common/action_layer.c **** 
  79:./tmk_core/common/action_layer.c **** void layer_on(uint8_t layer)
  80:./tmk_core/common/action_layer.c **** {
 383               		.loc 1 80 1 is_stmt 1 view -0
 384               		.cfi_startproc
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 0 */
 388               	.L__stack_usage = 0
  81:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state | (1UL<<layer));
 389               		.loc 1 81 5 view .LVU88
 390               	.LBB42:
 391               	.LBI42:
  60:./tmk_core/common/action_layer.c **** {
 392               		.loc 1 60 13 view .LVU89
 393               	.LBB43:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 394               		.loc 1 62 28 view .LVU90
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 395               		.loc 1 63 5 view .LVU91
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 396               		.loc 1 63 34 view .LVU92
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 397               		.loc 1 64 5 view .LVU93
 398               	.LBE43:
 399               	.LBE42:
 400               		.loc 1 81 39 is_stmt 0 view .LVU94
 401 0000 41E0      		ldi r20,lo8(1)
 402 0002 50E0      		ldi r21,0
 403 0004 60E0      		ldi r22,0
 404 0006 70E0      		ldi r23,0
 405 0008 00C0      		rjmp 2f
 406               		1:
 407 000a 440F      		lsl r20
 408 000c 551F      		rol r21
 409 000e 661F      		rol r22
 410 0010 771F      		rol r23
 411               		2:
 412 0012 8A95      		dec r24
 413 0014 02F4      		brpl 1b
 414               		.loc 1 81 5 view .LVU95
 415 0016 8091 0000 		lds r24,layer_state
 416 001a 9091 0000 		lds r25,layer_state+1
 417 001e A091 0000 		lds r26,layer_state+2
 418 0022 B091 0000 		lds r27,layer_state+3
 419               	.LVL22:
 420               		.loc 1 81 5 view .LVU96
 421 0026 842B      		or r24,r20
 422 0028 952B      		or r25,r21
 423 002a A62B      		or r26,r22
 424 002c B72B      		or r27,r23
 425               	.LBB45:
 426               	.LBB44:
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 427               		.loc 1 64 17 view .LVU97
 428 002e 8093 0000 		sts layer_state,r24
 429 0032 9093 0000 		sts layer_state+1,r25
 430 0036 A093 0000 		sts layer_state+2,r26
 431 003a B093 0000 		sts layer_state+3,r27
 432               	.LVL23:
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 433               		.loc 1 65 5 is_stmt 1 view .LVU98
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 434               		.loc 1 65 30 view .LVU99
  66:./tmk_core/common/action_layer.c **** }
 435               		.loc 1 66 5 view .LVU100
 436 003e 0C94 0000 		jmp clear_keyboard_but_mods
 437               	.LVL24:
 438               	.LBE44:
 439               	.LBE45:
 440               		.cfi_endproc
 441               	.LFE13:
 443               		.section	.text.layer_off,"ax",@progbits
 444               	.global	layer_off
 446               	layer_off:
 447               	.LVL25:
 448               	.LFB14:
  82:./tmk_core/common/action_layer.c **** }
  83:./tmk_core/common/action_layer.c **** 
  84:./tmk_core/common/action_layer.c **** void layer_off(uint8_t layer)
  85:./tmk_core/common/action_layer.c **** {
 449               		.loc 1 85 1 view -0
 450               		.cfi_startproc
 451               	/* prologue: function */
 452               	/* frame size = 0 */
 453               	/* stack size = 0 */
 454               	.L__stack_usage = 0
  86:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state & ~(1UL<<layer));
 455               		.loc 1 86 5 view .LVU102
 456               	.LBB48:
 457               	.LBI48:
  60:./tmk_core/common/action_layer.c **** {
 458               		.loc 1 60 13 view .LVU103
 459               	.LBB49:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 460               		.loc 1 62 28 view .LVU104
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 461               		.loc 1 63 5 view .LVU105
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 462               		.loc 1 63 34 view .LVU106
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 463               		.loc 1 64 5 view .LVU107
 464               	.LBE49:
 465               	.LBE48:
 466               		.loc 1 86 40 is_stmt 0 view .LVU108
 467 0000 41E0      		ldi r20,lo8(1)
 468 0002 50E0      		ldi r21,0
 469 0004 60E0      		ldi r22,0
 470 0006 70E0      		ldi r23,0
 471 0008 00C0      		rjmp 2f
 472               		1:
 473 000a 440F      		lsl r20
 474 000c 551F      		rol r21
 475 000e 661F      		rol r22
 476 0010 771F      		rol r23
 477               		2:
 478 0012 8A95      		dec r24
 479 0014 02F4      		brpl 1b
 480               		.loc 1 86 35 view .LVU109
 481 0016 4095      		com r20
 482 0018 5095      		com r21
 483 001a 6095      		com r22
 484 001c 7095      		com r23
 485               		.loc 1 86 5 view .LVU110
 486 001e 8091 0000 		lds r24,layer_state
 487 0022 9091 0000 		lds r25,layer_state+1
 488 0026 A091 0000 		lds r26,layer_state+2
 489 002a B091 0000 		lds r27,layer_state+3
 490               	.LVL26:
 491               		.loc 1 86 5 view .LVU111
 492 002e 8423      		and r24,r20
 493 0030 9523      		and r25,r21
 494 0032 A623      		and r26,r22
 495 0034 B723      		and r27,r23
 496               	.LBB51:
 497               	.LBB50:
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 498               		.loc 1 64 17 view .LVU112
 499 0036 8093 0000 		sts layer_state,r24
 500 003a 9093 0000 		sts layer_state+1,r25
 501 003e A093 0000 		sts layer_state+2,r26
 502 0042 B093 0000 		sts layer_state+3,r27
 503               	.LVL27:
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 504               		.loc 1 65 5 is_stmt 1 view .LVU113
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 505               		.loc 1 65 30 view .LVU114
  66:./tmk_core/common/action_layer.c **** }
 506               		.loc 1 66 5 view .LVU115
 507 0046 0C94 0000 		jmp clear_keyboard_but_mods
 508               	.LVL28:
 509               	.LBE50:
 510               	.LBE51:
 511               		.cfi_endproc
 512               	.LFE14:
 514               		.section	.text.layer_invert,"ax",@progbits
 515               	.global	layer_invert
 517               	layer_invert:
 518               	.LVL29:
 519               	.LFB15:
  87:./tmk_core/common/action_layer.c **** }
  88:./tmk_core/common/action_layer.c **** 
  89:./tmk_core/common/action_layer.c **** void layer_invert(uint8_t layer)
  90:./tmk_core/common/action_layer.c **** {
 520               		.loc 1 90 1 view -0
 521               		.cfi_startproc
 522               	/* prologue: function */
 523               	/* frame size = 0 */
 524               	/* stack size = 0 */
 525               	.L__stack_usage = 0
  91:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ (1UL<<layer));
 526               		.loc 1 91 5 view .LVU117
 527               	.LBB54:
 528               	.LBI54:
  60:./tmk_core/common/action_layer.c **** {
 529               		.loc 1 60 13 view .LVU118
 530               	.LBB55:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 531               		.loc 1 62 28 view .LVU119
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 532               		.loc 1 63 5 view .LVU120
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 533               		.loc 1 63 34 view .LVU121
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 534               		.loc 1 64 5 view .LVU122
 535               	.LBE55:
 536               	.LBE54:
 537               		.loc 1 91 39 is_stmt 0 view .LVU123
 538 0000 41E0      		ldi r20,lo8(1)
 539 0002 50E0      		ldi r21,0
 540 0004 60E0      		ldi r22,0
 541 0006 70E0      		ldi r23,0
 542 0008 00C0      		rjmp 2f
 543               		1:
 544 000a 440F      		lsl r20
 545 000c 551F      		rol r21
 546 000e 661F      		rol r22
 547 0010 771F      		rol r23
 548               		2:
 549 0012 8A95      		dec r24
 550 0014 02F4      		brpl 1b
 551               		.loc 1 91 5 view .LVU124
 552 0016 8091 0000 		lds r24,layer_state
 553 001a 9091 0000 		lds r25,layer_state+1
 554 001e A091 0000 		lds r26,layer_state+2
 555 0022 B091 0000 		lds r27,layer_state+3
 556               	.LVL30:
 557               		.loc 1 91 5 view .LVU125
 558 0026 8427      		eor r24,r20
 559 0028 9527      		eor r25,r21
 560 002a A627      		eor r26,r22
 561 002c B727      		eor r27,r23
 562               	.LBB57:
 563               	.LBB56:
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 564               		.loc 1 64 17 view .LVU126
 565 002e 8093 0000 		sts layer_state,r24
 566 0032 9093 0000 		sts layer_state+1,r25
 567 0036 A093 0000 		sts layer_state+2,r26
 568 003a B093 0000 		sts layer_state+3,r27
 569               	.LVL31:
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 570               		.loc 1 65 5 is_stmt 1 view .LVU127
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 571               		.loc 1 65 30 view .LVU128
  66:./tmk_core/common/action_layer.c **** }
 572               		.loc 1 66 5 view .LVU129
 573 003e 0C94 0000 		jmp clear_keyboard_but_mods
 574               	.LVL32:
 575               	.LBE56:
 576               	.LBE57:
 577               		.cfi_endproc
 578               	.LFE15:
 580               		.section	.text.layer_or,"ax",@progbits
 581               	.global	layer_or
 583               	layer_or:
 584               	.LVL33:
 585               	.LFB16:
  92:./tmk_core/common/action_layer.c **** }
  93:./tmk_core/common/action_layer.c **** 
  94:./tmk_core/common/action_layer.c **** void layer_or(uint32_t state)
  95:./tmk_core/common/action_layer.c **** {
 586               		.loc 1 95 1 view -0
 587               		.cfi_startproc
 588               		.loc 1 95 1 is_stmt 0 view .LVU131
 589 0000 0F93      		push r16
 590               	.LCFI6:
 591               		.cfi_def_cfa_offset 3
 592               		.cfi_offset 16, -2
 593 0002 1F93      		push r17
 594               	.LCFI7:
 595               		.cfi_def_cfa_offset 4
 596               		.cfi_offset 17, -3
 597               	/* prologue: function */
 598               	/* frame size = 0 */
 599               	/* stack size = 2 */
 600               	.L__stack_usage = 2
  96:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state | state);
 601               		.loc 1 96 5 is_stmt 1 view .LVU132
 602               	.LVL34:
 603               	.LBB60:
 604               	.LBI60:
  60:./tmk_core/common/action_layer.c **** {
 605               		.loc 1 60 13 view .LVU133
 606               	.LBB61:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 607               		.loc 1 62 28 view .LVU134
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 608               		.loc 1 63 5 view .LVU135
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 609               		.loc 1 63 34 view .LVU136
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 610               		.loc 1 64 5 view .LVU137
 611               	.LBE61:
 612               	.LBE60:
 613               		.loc 1 96 5 is_stmt 0 view .LVU138
 614 0004 0091 0000 		lds r16,layer_state
 615 0008 1091 0000 		lds r17,layer_state+1
 616 000c 2091 0000 		lds r18,layer_state+2
 617 0010 3091 0000 		lds r19,layer_state+3
 618 0014 DC01      		movw r26,r24
 619 0016 CB01      		movw r24,r22
 620 0018 802B      		or r24,r16
 621 001a 912B      		or r25,r17
 622 001c A22B      		or r26,r18
 623 001e B32B      		or r27,r19
 624               	.LBB64:
 625               	.LBB62:
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 626               		.loc 1 64 17 view .LVU139
 627 0020 8093 0000 		sts layer_state,r24
 628 0024 9093 0000 		sts layer_state+1,r25
 629 0028 A093 0000 		sts layer_state+2,r26
 630 002c B093 0000 		sts layer_state+3,r27
 631               	.LVL35:
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 632               		.loc 1 65 5 is_stmt 1 view .LVU140
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 633               		.loc 1 65 30 view .LVU141
  66:./tmk_core/common/action_layer.c **** }
 634               		.loc 1 66 5 view .LVU142
 635               	/* epilogue start */
 636               	.LBE62:
 637               	.LBE64:
  97:./tmk_core/common/action_layer.c **** }
 638               		.loc 1 97 1 is_stmt 0 view .LVU143
 639 0030 1F91      		pop r17
 640 0032 0F91      		pop r16
 641               	.LVL36:
 642               	.LBB65:
 643               	.LBB63:
  66:./tmk_core/common/action_layer.c **** }
 644               		.loc 1 66 5 view .LVU144
 645 0034 0C94 0000 		jmp clear_keyboard_but_mods
 646               	.LVL37:
  66:./tmk_core/common/action_layer.c **** }
 647               		.loc 1 66 5 view .LVU145
 648               	.LBE63:
 649               	.LBE65:
 650               		.cfi_endproc
 651               	.LFE16:
 653               		.section	.text.layer_and,"ax",@progbits
 654               	.global	layer_and
 656               	layer_and:
 657               	.LVL38:
 658               	.LFB17:
  98:./tmk_core/common/action_layer.c **** void layer_and(uint32_t state)
  99:./tmk_core/common/action_layer.c **** {
 659               		.loc 1 99 1 is_stmt 1 view -0
 660               		.cfi_startproc
 661               		.loc 1 99 1 is_stmt 0 view .LVU147
 662 0000 0F93      		push r16
 663               	.LCFI8:
 664               		.cfi_def_cfa_offset 3
 665               		.cfi_offset 16, -2
 666 0002 1F93      		push r17
 667               	.LCFI9:
 668               		.cfi_def_cfa_offset 4
 669               		.cfi_offset 17, -3
 670               	/* prologue: function */
 671               	/* frame size = 0 */
 672               	/* stack size = 2 */
 673               	.L__stack_usage = 2
 100:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state & state);
 674               		.loc 1 100 5 is_stmt 1 view .LVU148
 675               	.LVL39:
 676               	.LBB68:
 677               	.LBI68:
  60:./tmk_core/common/action_layer.c **** {
 678               		.loc 1 60 13 view .LVU149
 679               	.LBB69:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 680               		.loc 1 62 28 view .LVU150
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 681               		.loc 1 63 5 view .LVU151
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 682               		.loc 1 63 34 view .LVU152
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 683               		.loc 1 64 5 view .LVU153
 684               	.LBE69:
 685               	.LBE68:
 686               		.loc 1 100 5 is_stmt 0 view .LVU154
 687 0004 0091 0000 		lds r16,layer_state
 688 0008 1091 0000 		lds r17,layer_state+1
 689 000c 2091 0000 		lds r18,layer_state+2
 690 0010 3091 0000 		lds r19,layer_state+3
 691 0014 DC01      		movw r26,r24
 692 0016 CB01      		movw r24,r22
 693 0018 8023      		and r24,r16
 694 001a 9123      		and r25,r17
 695 001c A223      		and r26,r18
 696 001e B323      		and r27,r19
 697               	.LBB72:
 698               	.LBB70:
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 699               		.loc 1 64 17 view .LVU155
 700 0020 8093 0000 		sts layer_state,r24
 701 0024 9093 0000 		sts layer_state+1,r25
 702 0028 A093 0000 		sts layer_state+2,r26
 703 002c B093 0000 		sts layer_state+3,r27
 704               	.LVL40:
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 705               		.loc 1 65 5 is_stmt 1 view .LVU156
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 706               		.loc 1 65 30 view .LVU157
  66:./tmk_core/common/action_layer.c **** }
 707               		.loc 1 66 5 view .LVU158
 708               	/* epilogue start */
 709               	.LBE70:
 710               	.LBE72:
 101:./tmk_core/common/action_layer.c **** }
 711               		.loc 1 101 1 is_stmt 0 view .LVU159
 712 0030 1F91      		pop r17
 713 0032 0F91      		pop r16
 714               	.LVL41:
 715               	.LBB73:
 716               	.LBB71:
  66:./tmk_core/common/action_layer.c **** }
 717               		.loc 1 66 5 view .LVU160
 718 0034 0C94 0000 		jmp clear_keyboard_but_mods
 719               	.LVL42:
  66:./tmk_core/common/action_layer.c **** }
 720               		.loc 1 66 5 view .LVU161
 721               	.LBE71:
 722               	.LBE73:
 723               		.cfi_endproc
 724               	.LFE17:
 726               		.section	.text.layer_xor,"ax",@progbits
 727               	.global	layer_xor
 729               	layer_xor:
 730               	.LVL43:
 731               	.LFB18:
 102:./tmk_core/common/action_layer.c **** void layer_xor(uint32_t state)
 103:./tmk_core/common/action_layer.c **** {
 732               		.loc 1 103 1 is_stmt 1 view -0
 733               		.cfi_startproc
 734               		.loc 1 103 1 is_stmt 0 view .LVU163
 735 0000 0F93      		push r16
 736               	.LCFI10:
 737               		.cfi_def_cfa_offset 3
 738               		.cfi_offset 16, -2
 739 0002 1F93      		push r17
 740               	.LCFI11:
 741               		.cfi_def_cfa_offset 4
 742               		.cfi_offset 17, -3
 743               	/* prologue: function */
 744               	/* frame size = 0 */
 745               	/* stack size = 2 */
 746               	.L__stack_usage = 2
 104:./tmk_core/common/action_layer.c ****     layer_state_set(layer_state ^ state);
 747               		.loc 1 104 5 is_stmt 1 view .LVU164
 748               	.LVL44:
 749               	.LBB76:
 750               	.LBI76:
  60:./tmk_core/common/action_layer.c **** {
 751               		.loc 1 60 13 view .LVU165
 752               	.LBB77:
  62:./tmk_core/common/action_layer.c ****     layer_debug(); dprint(" to ");
 753               		.loc 1 62 28 view .LVU166
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 754               		.loc 1 63 5 view .LVU167
  63:./tmk_core/common/action_layer.c ****     layer_state = state;
 755               		.loc 1 63 34 view .LVU168
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 756               		.loc 1 64 5 view .LVU169
 757               	.LBE77:
 758               	.LBE76:
 759               		.loc 1 104 5 is_stmt 0 view .LVU170
 760 0004 0091 0000 		lds r16,layer_state
 761 0008 1091 0000 		lds r17,layer_state+1
 762 000c 2091 0000 		lds r18,layer_state+2
 763 0010 3091 0000 		lds r19,layer_state+3
 764 0014 DC01      		movw r26,r24
 765 0016 CB01      		movw r24,r22
 766 0018 8027      		eor r24,r16
 767 001a 9127      		eor r25,r17
 768 001c A227      		eor r26,r18
 769 001e B327      		eor r27,r19
 770               	.LBB80:
 771               	.LBB78:
  64:./tmk_core/common/action_layer.c ****     layer_debug(); dprintln();
 772               		.loc 1 64 17 view .LVU171
 773 0020 8093 0000 		sts layer_state,r24
 774 0024 9093 0000 		sts layer_state+1,r25
 775 0028 A093 0000 		sts layer_state+2,r26
 776 002c B093 0000 		sts layer_state+3,r27
 777               	.LVL45:
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 778               		.loc 1 65 5 is_stmt 1 view .LVU172
  65:./tmk_core/common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 779               		.loc 1 65 30 view .LVU173
  66:./tmk_core/common/action_layer.c **** }
 780               		.loc 1 66 5 view .LVU174
 781               	/* epilogue start */
 782               	.LBE78:
 783               	.LBE80:
 105:./tmk_core/common/action_layer.c **** }
 784               		.loc 1 105 1 is_stmt 0 view .LVU175
 785 0030 1F91      		pop r17
 786 0032 0F91      		pop r16
 787               	.LVL46:
 788               	.LBB81:
 789               	.LBB79:
  66:./tmk_core/common/action_layer.c **** }
 790               		.loc 1 66 5 view .LVU176
 791 0034 0C94 0000 		jmp clear_keyboard_but_mods
 792               	.LVL47:
  66:./tmk_core/common/action_layer.c **** }
 793               		.loc 1 66 5 view .LVU177
 794               	.LBE79:
 795               	.LBE81:
 796               		.cfi_endproc
 797               	.LFE18:
 799               		.section	.text.layer_debug,"ax",@progbits
 800               	.global	layer_debug
 802               	layer_debug:
 803               	.LFB26:
 804               		.cfi_startproc
 805               	/* prologue: function */
 806               	/* frame size = 0 */
 807               	/* stack size = 0 */
 808               	.L__stack_usage = 0
 809               	/* epilogue start */
 810 0000 0895      		ret
 811               		.cfi_endproc
 812               	.LFE26:
 814               		.section	.text.update_source_layers_cache,"ax",@progbits
 815               	.global	update_source_layers_cache
 817               	update_source_layers_cache:
 818               	.LVL48:
 819               	.LFB20:
 106:./tmk_core/common/action_layer.c **** 
 107:./tmk_core/common/action_layer.c **** void layer_debug(void)
 108:./tmk_core/common/action_layer.c **** {
 109:./tmk_core/common/action_layer.c ****     dprintf("%08lX(%u)", layer_state, biton32(layer_state));
 110:./tmk_core/common/action_layer.c **** }
 111:./tmk_core/common/action_layer.c **** #endif
 112:./tmk_core/common/action_layer.c **** 
 113:./tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 114:./tmk_core/common/action_layer.c **** uint8_t source_layers_cache[(MATRIX_ROWS * MATRIX_COLS + 7) / 8][MAX_LAYER_BITS] = {{0}};
 115:./tmk_core/common/action_layer.c **** 
 116:./tmk_core/common/action_layer.c **** void update_source_layers_cache(keypos_t key, uint8_t layer)
 117:./tmk_core/common/action_layer.c **** {
 820               		.loc 1 117 1 is_stmt 1 view -0
 821               		.cfi_startproc
 822               	/* prologue: function */
 823               	/* frame size = 0 */
 824               	/* stack size = 0 */
 825               	.L__stack_usage = 0
 118:./tmk_core/common/action_layer.c ****     const uint8_t key_number = key.col + (key.row * MATRIX_COLS);
 826               		.loc 1 118 5 view .LVU179
 827               		.loc 1 118 19 is_stmt 0 view .LVU180
 828 0000 2FE0      		ldi r18,lo8(15)
 829               		.loc 1 118 19 view .LVU181
 830 0002 929F      		mul r25,r18
 831 0004 800D      		add r24,r0
 832 0006 1124      		clr __zero_reg__
 833               	.LVL49:
 119:./tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 834               		.loc 1 119 5 is_stmt 1 view .LVU182
 120:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 835               		.loc 1 120 5 view .LVU183
 121:./tmk_core/common/action_layer.c **** 
 122:./tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 836               		.loc 1 122 5 view .LVU184
 837               	.LBB82:
 838               		.loc 1 122 10 view .LVU185
 839               		.loc 1 122 10 is_stmt 0 view .LVU186
 840               	.LBE82:
 120:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 841               		.loc 1 120 19 view .LVU187
 842 0008 982F      		mov r25,r24
 120:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 843               		.loc 1 120 19 view .LVU188
 844 000a 9770      		andi r25,lo8(7)
 845               	.LVL50:
 846               	.LBB83:
 123:./tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^=
 124:./tmk_core/common/action_layer.c ****             (-((layer & (1U << bit_number)) != 0)
 125:./tmk_core/common/action_layer.c ****              ^ source_layers_cache[storage_row][bit_number])
 126:./tmk_core/common/action_layer.c ****             & (1U << storage_bit);
 847               		.loc 1 126 13 view .LVU189
 848 000c 41E0      		ldi r20,lo8(1)
 849 000e 00C0      		rjmp 2f
 850               		1:
 851 0010 440F      		lsl r20
 852               		2:
 853 0012 9A95      		dec r25
 854 0014 02F4      		brpl 1b
 855               	.LBE83:
 119:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 856               		.loc 1 119 19 view .LVU190
 857 0016 8695      		lsr r24
 858 0018 8695      		lsr r24
 859 001a 8695      		lsr r24
 860               	.LVL51:
 119:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 861               		.loc 1 119 19 view .LVU191
 862 001c 95E0      		ldi r25,lo8(5)
 863               	.LVL52:
 119:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 864               		.loc 1 119 19 view .LVU192
 865 001e 899F      		mul r24,r25
 866 0020 F001      		movw r30,r0
 867 0022 1124      		clr __zero_reg__
 868 0024 E050      		subi r30,lo8(-(source_layers_cache))
 869 0026 F040      		sbci r31,hi8(-(source_layers_cache))
 870               	.LBB84:
 871               		.loc 1 126 13 view .LVU193
 872 0028 90E0      		ldi r25,0
 873 002a 80E0      		ldi r24,0
 874               	.LVL53:
 124:./tmk_core/common/action_layer.c ****              ^ source_layers_cache[storage_row][bit_number])
 875               		.loc 1 124 45 view .LVU194
 876 002c 70E0      		ldi r23,0
 877               	.LVL54:
 878               	.L16:
 123:./tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^=
 879               		.loc 1 123 9 is_stmt 1 discriminator 3 view .LVU195
 123:./tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^=
 880               		.loc 1 123 54 is_stmt 0 discriminator 3 view .LVU196
 881 002e 5191      		ld r21,Z+
 882 0030 DF01      		movw r26,r30
 883 0032 1197      		sbiw r26,1
 124:./tmk_core/common/action_layer.c ****              ^ source_layers_cache[storage_row][bit_number])
 884               		.loc 1 124 45 discriminator 3 view .LVU197
 885 0034 9B01      		movw r18,r22
 886 0036 082E      		mov r0,r24
 887 0038 00C0      		rjmp 2f
 888               		1:
 889 003a 3695      		lsr r19
 890 003c 2795      		ror r18
 891               		2:
 892 003e 0A94      		dec r0
 893 0040 02F4      		brpl 1b
 894 0042 2170      		andi r18,lo8(1)
 125:./tmk_core/common/action_layer.c ****             & (1U << storage_bit);
 895               		.loc 1 125 14 discriminator 3 view .LVU198
 896 0044 2195      		neg r18
 897 0046 2527      		eor r18,r21
 898               		.loc 1 126 13 discriminator 3 view .LVU199
 899 0048 2423      		and r18,r20
 123:./tmk_core/common/action_layer.c ****             (-((layer & (1U << bit_number)) != 0)
 900               		.loc 1 123 54 discriminator 3 view .LVU200
 901 004a 2527      		eor r18,r21
 902 004c 2C93      		st X,r18
 903               	.LVL55:
 123:./tmk_core/common/action_layer.c ****             (-((layer & (1U << bit_number)) != 0)
 904               		.loc 1 123 54 discriminator 3 view .LVU201
 905 004e 0196      		adiw r24,1
 906               	.LVL56:
 122:./tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^=
 907               		.loc 1 122 5 discriminator 3 view .LVU202
 908 0050 8530      		cpi r24,5
 909 0052 9105      		cpc r25,__zero_reg__
 910 0054 01F4      		brne .L16
 911               	/* epilogue start */
 912               	.LBE84:
 127:./tmk_core/common/action_layer.c ****     }
 128:./tmk_core/common/action_layer.c **** }
 913               		.loc 1 128 1 view .LVU203
 914 0056 0895      		ret
 915               		.cfi_endproc
 916               	.LFE20:
 918               		.section	.text.read_source_layers_cache,"ax",@progbits
 919               	.global	read_source_layers_cache
 921               	read_source_layers_cache:
 922               	.LVL57:
 923               	.LFB21:
 129:./tmk_core/common/action_layer.c **** 
 130:./tmk_core/common/action_layer.c **** uint8_t read_source_layers_cache(keypos_t key)
 131:./tmk_core/common/action_layer.c **** {
 924               		.loc 1 131 1 is_stmt 1 view -0
 925               		.cfi_startproc
 926               	/* prologue: function */
 927               	/* frame size = 0 */
 928               	/* stack size = 0 */
 929               	.L__stack_usage = 0
 132:./tmk_core/common/action_layer.c ****     const uint8_t key_number = key.col + (key.row * MATRIX_COLS);
 930               		.loc 1 132 5 view .LVU205
 931               		.loc 1 132 19 is_stmt 0 view .LVU206
 932 0000 2FE0      		ldi r18,lo8(15)
 933               		.loc 1 132 19 view .LVU207
 934 0002 929F      		mul r25,r18
 935 0004 800D      		add r24,r0
 936 0006 1124      		clr __zero_reg__
 937               	.LVL58:
 133:./tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 938               		.loc 1 133 5 is_stmt 1 view .LVU208
 134:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 939               		.loc 1 134 5 view .LVU209
 940               		.loc 1 134 19 is_stmt 0 view .LVU210
 941 0008 982F      		mov r25,r24
 942               		.loc 1 134 19 view .LVU211
 943 000a 9770      		andi r25,lo8(7)
 944               	.LVL59:
 135:./tmk_core/common/action_layer.c ****     uint8_t layer = 0;
 945               		.loc 1 135 5 is_stmt 1 view .LVU212
 136:./tmk_core/common/action_layer.c **** 
 137:./tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 946               		.loc 1 137 5 view .LVU213
 947               	.LBB85:
 948               		.loc 1 137 10 view .LVU214
 949               		.loc 1 137 10 is_stmt 0 view .LVU215
 950               	.LBE85:
 133:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 951               		.loc 1 133 19 view .LVU216
 952 000c 8695      		lsr r24
 953 000e 8695      		lsr r24
 954 0010 8695      		lsr r24
 955               	.LVL60:
 133:./tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 956               		.loc 1 133 19 view .LVU217
 957 0012 25E0      		ldi r18,lo8(5)
 958 0014 829F      		mul r24,r18
 959 0016 F001      		movw r30,r0
 960 0018 1124      		clr __zero_reg__
 961 001a E050      		subi r30,lo8(-(source_layers_cache))
 962 001c F040      		sbci r31,hi8(-(source_layers_cache))
 134:./tmk_core/common/action_layer.c ****     uint8_t layer = 0;
 963               		.loc 1 134 19 view .LVU218
 964 001e 50E0      		ldi r21,0
 965 0020 40E0      		ldi r20,0
 135:./tmk_core/common/action_layer.c **** 
 966               		.loc 1 135 13 view .LVU219
 967 0022 80E0      		ldi r24,0
 968               	.LVL61:
 969               	.L19:
 970               	.LBB86:
 138:./tmk_core/common/action_layer.c ****         layer |=
 971               		.loc 1 138 9 is_stmt 1 discriminator 3 view .LVU220
 139:./tmk_core/common/action_layer.c ****             ((source_layers_cache[storage_row][bit_number]
 972               		.loc 1 139 47 is_stmt 0 discriminator 3 view .LVU221
 973 0024 2191      		ld r18,Z+
 974 0026 30E0      		ldi r19,0
 140:./tmk_core/common/action_layer.c ****               & (1U << storage_bit)) != 0)
 975               		.loc 1 140 38 discriminator 3 view .LVU222
 976 0028 092E      		mov r0,r25
 977 002a 00C0      		rjmp 2f
 978               		1:
 979 002c 3695      		lsr r19
 980 002e 2795      		ror r18
 981               		2:
 982 0030 0A94      		dec r0
 983 0032 02F4      		brpl 1b
 984 0034 2170      		andi r18,1
 985 0036 3327      		clr r19
 141:./tmk_core/common/action_layer.c ****             << bit_number;
 986               		.loc 1 141 13 discriminator 3 view .LVU223
 987 0038 042E      		mov r0,r20
 988 003a 00C0      		rjmp 2f
 989               		1:
 990 003c 220F      		lsl r18
 991               		2:
 992 003e 0A94      		dec r0
 993 0040 02F4      		brpl 1b
 138:./tmk_core/common/action_layer.c ****             ((source_layers_cache[storage_row][bit_number]
 994               		.loc 1 138 15 discriminator 3 view .LVU224
 995 0042 822B      		or r24,r18
 996               	.LVL62:
 138:./tmk_core/common/action_layer.c ****             ((source_layers_cache[storage_row][bit_number]
 997               		.loc 1 138 15 discriminator 3 view .LVU225
 998 0044 4F5F      		subi r20,-1
 999 0046 5F4F      		sbci r21,-1
 1000               	.LVL63:
 137:./tmk_core/common/action_layer.c ****         layer |=
 1001               		.loc 1 137 5 discriminator 3 view .LVU226
 1002 0048 4530      		cpi r20,5
 1003 004a 5105      		cpc r21,__zero_reg__
 1004 004c 01F4      		brne .L19
 1005               	/* epilogue start */
 1006               	.LBE86:
 142:./tmk_core/common/action_layer.c ****     }
 143:./tmk_core/common/action_layer.c **** 
 144:./tmk_core/common/action_layer.c ****     return layer;
 145:./tmk_core/common/action_layer.c **** }
 1007               		.loc 1 145 1 view .LVU227
 1008 004e 0895      		ret
 1009               		.cfi_endproc
 1010               	.LFE21:
 1012               		.section	.text.layer_switch_get_layer,"ax",@progbits
 1013               	.global	layer_switch_get_layer
 1015               	layer_switch_get_layer:
 1016               	.LVL64:
 1017               	.LFB23:
 146:./tmk_core/common/action_layer.c **** #endif
 147:./tmk_core/common/action_layer.c **** 
 148:./tmk_core/common/action_layer.c **** /*
 149:./tmk_core/common/action_layer.c ****  * Make sure the action triggered when the key is released is the same
 150:./tmk_core/common/action_layer.c ****  * one as the one triggered on press. It's important for the mod keys
 151:./tmk_core/common/action_layer.c ****  * when the layer is switched after the down event but before the up
 152:./tmk_core/common/action_layer.c ****  * event as they may get stuck otherwise.
 153:./tmk_core/common/action_layer.c ****  */
 154:./tmk_core/common/action_layer.c **** action_t store_or_get_action(bool pressed, keypos_t key)
 155:./tmk_core/common/action_layer.c **** {
 156:./tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 157:./tmk_core/common/action_layer.c ****     if (disable_action_cache) {
 158:./tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 159:./tmk_core/common/action_layer.c ****     }
 160:./tmk_core/common/action_layer.c **** 
 161:./tmk_core/common/action_layer.c ****     uint8_t layer;
 162:./tmk_core/common/action_layer.c **** 
 163:./tmk_core/common/action_layer.c ****     if (pressed) {
 164:./tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 165:./tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 166:./tmk_core/common/action_layer.c ****     }
 167:./tmk_core/common/action_layer.c ****     else {
 168:./tmk_core/common/action_layer.c ****         layer = read_source_layers_cache(key);
 169:./tmk_core/common/action_layer.c ****     }
 170:./tmk_core/common/action_layer.c ****     return action_for_key(layer, key);
 171:./tmk_core/common/action_layer.c **** #else
 172:./tmk_core/common/action_layer.c ****     return layer_switch_get_action(key);
 173:./tmk_core/common/action_layer.c **** #endif
 174:./tmk_core/common/action_layer.c **** }
 175:./tmk_core/common/action_layer.c **** 
 176:./tmk_core/common/action_layer.c **** 
 177:./tmk_core/common/action_layer.c **** int8_t layer_switch_get_layer(keypos_t key)
 178:./tmk_core/common/action_layer.c **** {
 1018               		.loc 1 178 1 is_stmt 1 view -0
 1019               		.cfi_startproc
 1020               		.loc 1 178 1 is_stmt 0 view .LVU229
 1021 0000 BF92      		push r11
 1022               	.LCFI12:
 1023               		.cfi_def_cfa_offset 3
 1024               		.cfi_offset 11, -2
 1025 0002 CF92      		push r12
 1026               	.LCFI13:
 1027               		.cfi_def_cfa_offset 4
 1028               		.cfi_offset 12, -3
 1029 0004 DF92      		push r13
 1030               	.LCFI14:
 1031               		.cfi_def_cfa_offset 5
 1032               		.cfi_offset 13, -4
 1033 0006 EF92      		push r14
 1034               	.LCFI15:
 1035               		.cfi_def_cfa_offset 6
 1036               		.cfi_offset 14, -5
 1037 0008 FF92      		push r15
 1038               	.LCFI16:
 1039               		.cfi_def_cfa_offset 7
 1040               		.cfi_offset 15, -6
 1041 000a 0F93      		push r16
 1042               	.LCFI17:
 1043               		.cfi_def_cfa_offset 8
 1044               		.cfi_offset 16, -7
 1045 000c 1F93      		push r17
 1046               	.LCFI18:
 1047               		.cfi_def_cfa_offset 9
 1048               		.cfi_offset 17, -8
 1049 000e CF93      		push r28
 1050               	.LCFI19:
 1051               		.cfi_def_cfa_offset 10
 1052               		.cfi_offset 28, -9
 1053 0010 DF93      		push r29
 1054               	.LCFI20:
 1055               		.cfi_def_cfa_offset 11
 1056               		.cfi_offset 29, -10
 1057               	/* prologue: function */
 1058               	/* frame size = 0 */
 1059               	/* stack size = 9 */
 1060               	.L__stack_usage = 9
 1061 0012 8C01      		movw r16,r24
 179:./tmk_core/common/action_layer.c ****     action_t action;
 1062               		.loc 1 179 5 is_stmt 1 view .LVU230
 180:./tmk_core/common/action_layer.c ****     action.code = ACTION_TRANSPARENT;
 1063               		.loc 1 180 5 view .LVU231
 1064               	.LVL65:
 181:./tmk_core/common/action_layer.c **** 
 182:./tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
 183:./tmk_core/common/action_layer.c ****     uint32_t layers = layer_state | default_layer_state;
 1065               		.loc 1 183 5 view .LVU232
 1066               		.loc 1 183 14 is_stmt 0 view .LVU233
 1067 0014 C090 0000 		lds r12,layer_state
 1068 0018 D090 0000 		lds r13,layer_state+1
 1069 001c E090 0000 		lds r14,layer_state+2
 1070 0020 F090 0000 		lds r15,layer_state+3
 1071 0024 8091 0000 		lds r24,default_layer_state
 1072 0028 9091 0000 		lds r25,default_layer_state+1
 1073 002c A091 0000 		lds r26,default_layer_state+2
 1074 0030 B091 0000 		lds r27,default_layer_state+3
 1075               	.LVL66:
 1076               		.loc 1 183 14 view .LVU234
 1077 0034 C82A      		or r12,r24
 1078 0036 D92A      		or r13,r25
 1079 0038 EA2A      		or r14,r26
 1080 003a FB2A      		or r15,r27
 1081               	.LVL67:
 184:./tmk_core/common/action_layer.c ****     /* check top layer first */
 185:./tmk_core/common/action_layer.c ****     for (int8_t i = 31; i >= 0; i--) {
 1082               		.loc 1 185 5 is_stmt 1 view .LVU235
 1083               	.LBB87:
 1084               		.loc 1 185 10 view .LVU236
 1085               		.loc 1 185 10 is_stmt 0 view .LVU237
 1086               	.LBE87:
 183:./tmk_core/common/action_layer.c ****     /* check top layer first */
 1087               		.loc 1 183 14 view .LVU238
 1088 003c CFE1      		ldi r28,lo8(31)
 1089 003e D0E0      		ldi r29,0
 1090               	.LVL68:
 1091               	.L23:
 183:./tmk_core/common/action_layer.c ****     /* check top layer first */
 1092               		.loc 1 183 14 view .LVU239
 1093 0040 BC2E      		mov r11,r28
 1094               	.LVL69:
 1095               	.LBB88:
 186:./tmk_core/common/action_layer.c ****         if (layers & (1UL<<i)) {
 1096               		.loc 1 186 9 is_stmt 1 view .LVU240
 1097               		.loc 1 186 13 is_stmt 0 view .LVU241
 1098 0042 D701      		movw r26,r14
 1099 0044 C601      		movw r24,r12
 1100 0046 0C2E      		mov r0,r28
 1101 0048 00C0      		rjmp 2f
 1102               		1:
 1103 004a B695      		lsr r27
 1104 004c A795      		ror r26
 1105 004e 9795      		ror r25
 1106 0050 8795      		ror r24
 1107               		2:
 1108 0052 0A94      		dec r0
 1109 0054 02F4      		brpl 1b
 1110               		.loc 1 186 12 view .LVU242
 1111 0056 80FD      		sbrc r24,0
 1112 0058 00C0      		rjmp .L22
 1113               	.L25:
 1114               	.LVL70:
 1115               		.loc 1 186 12 view .LVU243
 1116               	.LVL71:
 1117 005a 2197      		sbiw r28,1
 1118 005c 00F4      		brcc .L23
 1119               		.loc 1 186 12 view .LVU244
 1120               	.LBE88:
 187:./tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 188:./tmk_core/common/action_layer.c ****             if (action.code != ACTION_TRANSPARENT) {
 189:./tmk_core/common/action_layer.c ****                 return i;
 190:./tmk_core/common/action_layer.c ****             }
 191:./tmk_core/common/action_layer.c ****         }
 192:./tmk_core/common/action_layer.c ****     }
 193:./tmk_core/common/action_layer.c ****     /* fall back to layer 0 */
 194:./tmk_core/common/action_layer.c ****     return 0;
 1121               		.loc 1 194 12 view .LVU245
 1122 005e B12C      		mov r11,__zero_reg__
 1123               	.LVL72:
 1124               	.L21:
 195:./tmk_core/common/action_layer.c **** #else
 196:./tmk_core/common/action_layer.c ****     return biton32(default_layer_state);
 197:./tmk_core/common/action_layer.c **** #endif
 198:./tmk_core/common/action_layer.c **** }
 1125               		.loc 1 198 1 view .LVU246
 1126 0060 8B2D      		mov r24,r11
 1127               	/* epilogue start */
 1128 0062 DF91      		pop r29
 1129 0064 CF91      		pop r28
 1130 0066 1F91      		pop r17
 1131 0068 0F91      		pop r16
 1132               	.LVL73:
 1133               		.loc 1 198 1 view .LVU247
 1134 006a FF90      		pop r15
 1135 006c EF90      		pop r14
 1136 006e DF90      		pop r13
 1137 0070 CF90      		pop r12
 1138               	.LVL74:
 1139               		.loc 1 198 1 view .LVU248
 1140 0072 BF90      		pop r11
 1141 0074 0895      		ret
 1142               	.LVL75:
 1143               	.L22:
 1144               	.LBB89:
 187:./tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 1145               		.loc 1 187 13 is_stmt 1 view .LVU249
 187:./tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 1146               		.loc 1 187 22 is_stmt 0 view .LVU250
 1147 0076 B801      		movw r22,r16
 1148 0078 8C2F      		mov r24,r28
 1149 007a 0E94 0000 		call action_for_key
 1150               	.LVL76:
 188:./tmk_core/common/action_layer.c ****                 return i;
 1151               		.loc 1 188 13 is_stmt 1 view .LVU251
 188:./tmk_core/common/action_layer.c ****                 return i;
 1152               		.loc 1 188 16 is_stmt 0 view .LVU252
 1153 007e 0197      		sbiw r24,1
 1154 0080 01F0      		breq .L25
 1155 0082 00C0      		rjmp .L21
 1156               	.LBE89:
 1157               		.cfi_endproc
 1158               	.LFE23:
 1160               		.section	.text.layer_switch_get_action,"ax",@progbits
 1161               	.global	layer_switch_get_action
 1163               	layer_switch_get_action:
 1164               	.LVL77:
 1165               	.LFB24:
 199:./tmk_core/common/action_layer.c **** 
 200:./tmk_core/common/action_layer.c **** action_t layer_switch_get_action(keypos_t key)
 201:./tmk_core/common/action_layer.c **** {
 1166               		.loc 1 201 1 is_stmt 1 view -0
 1167               		.cfi_startproc
 1168               		.loc 1 201 1 is_stmt 0 view .LVU254
 1169 0000 CF93      		push r28
 1170               	.LCFI21:
 1171               		.cfi_def_cfa_offset 3
 1172               		.cfi_offset 28, -2
 1173 0002 DF93      		push r29
 1174               	.LCFI22:
 1175               		.cfi_def_cfa_offset 4
 1176               		.cfi_offset 29, -3
 1177               	/* prologue: function */
 1178               	/* frame size = 0 */
 1179               	/* stack size = 2 */
 1180               	.L__stack_usage = 2
 1181 0004 EC01      		movw r28,r24
 202:./tmk_core/common/action_layer.c ****     return action_for_key(layer_switch_get_layer(key), key);
 1182               		.loc 1 202 5 is_stmt 1 view .LVU255
 1183               		.loc 1 202 27 is_stmt 0 view .LVU256
 1184 0006 0E94 0000 		call layer_switch_get_layer
 1185               	.LVL78:
 1186               		.loc 1 202 12 view .LVU257
 1187 000a BE01      		movw r22,r28
 1188               	/* epilogue start */
 203:./tmk_core/common/action_layer.c **** }
 1189               		.loc 1 203 1 view .LVU258
 1190 000c DF91      		pop r29
 1191 000e CF91      		pop r28
 1192               	.LVL79:
 202:./tmk_core/common/action_layer.c ****     return action_for_key(layer_switch_get_layer(key), key);
 1193               		.loc 1 202 12 view .LVU259
 1194 0010 0C94 0000 		jmp action_for_key
 1195               	.LVL80:
 1196               		.cfi_endproc
 1197               	.LFE24:
 1199               		.section	.text.store_or_get_action,"ax",@progbits
 1200               	.global	store_or_get_action
 1202               	store_or_get_action:
 1203               	.LVL81:
 1204               	.LFB22:
 155:./tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 1205               		.loc 1 155 1 is_stmt 1 view -0
 1206               		.cfi_startproc
 155:./tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 1207               		.loc 1 155 1 is_stmt 0 view .LVU261
 1208 0000 1F93      		push r17
 1209               	.LCFI23:
 1210               		.cfi_def_cfa_offset 3
 1211               		.cfi_offset 17, -2
 1212 0002 CF93      		push r28
 1213               	.LCFI24:
 1214               		.cfi_def_cfa_offset 4
 1215               		.cfi_offset 28, -3
 1216 0004 DF93      		push r29
 1217               	.LCFI25:
 1218               		.cfi_def_cfa_offset 5
 1219               		.cfi_offset 29, -4
 1220               	/* prologue: function */
 1221               	/* frame size = 0 */
 1222               	/* stack size = 3 */
 1223               	.L__stack_usage = 3
 1224 0006 EB01      		movw r28,r22
 157:./tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 1225               		.loc 1 157 5 is_stmt 1 view .LVU262
 157:./tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 1226               		.loc 1 157 8 is_stmt 0 view .LVU263
 1227 0008 9091 0000 		lds r25,disable_action_cache
 1228 000c 9923      		tst r25
 1229 000e 01F0      		breq .L32
 158:./tmk_core/common/action_layer.c ****     }
 1230               		.loc 1 158 9 is_stmt 1 view .LVU264
 158:./tmk_core/common/action_layer.c ****     }
 1231               		.loc 1 158 16 is_stmt 0 view .LVU265
 1232 0010 CB01      		movw r24,r22
 1233               	.LVL82:
 1234               	/* epilogue start */
 174:./tmk_core/common/action_layer.c **** 
 1235               		.loc 1 174 1 view .LVU266
 1236 0012 DF91      		pop r29
 1237 0014 CF91      		pop r28
 1238 0016 1F91      		pop r17
 158:./tmk_core/common/action_layer.c ****     }
 1239               		.loc 1 158 16 view .LVU267
 1240 0018 0C94 0000 		jmp layer_switch_get_action
 1241               	.LVL83:
 1242               	.L32:
 161:./tmk_core/common/action_layer.c **** 
 1243               		.loc 1 161 5 is_stmt 1 view .LVU268
 163:./tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 1244               		.loc 1 163 5 view .LVU269
 163:./tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 1245               		.loc 1 163 8 is_stmt 0 view .LVU270
 1246 001c 8823      		tst r24
 1247 001e 01F0      		breq .L33
 164:./tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1248               		.loc 1 164 9 is_stmt 1 view .LVU271
 164:./tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1249               		.loc 1 164 17 is_stmt 0 view .LVU272
 1250 0020 CB01      		movw r24,r22
 1251               	.LVL84:
 164:./tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1252               		.loc 1 164 17 view .LVU273
 1253 0022 0E94 0000 		call layer_switch_get_layer
 1254               	.LVL85:
 1255 0026 182F      		mov r17,r24
 1256               	.LVL86:
 165:./tmk_core/common/action_layer.c ****     }
 1257               		.loc 1 165 9 is_stmt 1 view .LVU274
 1258 0028 682F      		mov r22,r24
 1259 002a CE01      		movw r24,r28
 1260 002c 0E94 0000 		call update_source_layers_cache
 1261               	.LVL87:
 1262               	.L34:
 170:./tmk_core/common/action_layer.c **** #else
 1263               		.loc 1 170 5 view .LVU275
 170:./tmk_core/common/action_layer.c **** #else
 1264               		.loc 1 170 12 is_stmt 0 view .LVU276
 1265 0030 BE01      		movw r22,r28
 1266 0032 812F      		mov r24,r17
 1267               	/* epilogue start */
 174:./tmk_core/common/action_layer.c **** 
 1268               		.loc 1 174 1 view .LVU277
 1269 0034 DF91      		pop r29
 1270 0036 CF91      		pop r28
 1271               	.LVL88:
 174:./tmk_core/common/action_layer.c **** 
 1272               		.loc 1 174 1 view .LVU278
 1273 0038 1F91      		pop r17
 1274               	.LVL89:
 170:./tmk_core/common/action_layer.c **** #else
 1275               		.loc 1 170 12 view .LVU279
 1276 003a 0C94 0000 		jmp action_for_key
 1277               	.LVL90:
 1278               	.L33:
 168:./tmk_core/common/action_layer.c ****     }
 1279               		.loc 1 168 9 is_stmt 1 view .LVU280
 168:./tmk_core/common/action_layer.c ****     }
 1280               		.loc 1 168 17 is_stmt 0 view .LVU281
 1281 003e CB01      		movw r24,r22
 1282               	.LVL91:
 168:./tmk_core/common/action_layer.c ****     }
 1283               		.loc 1 168 17 view .LVU282
 1284 0040 0E94 0000 		call read_source_layers_cache
 1285               	.LVL92:
 1286 0044 182F      		mov r17,r24
 1287               	.LVL93:
 168:./tmk_core/common/action_layer.c ****     }
 1288               		.loc 1 168 17 view .LVU283
 1289 0046 00C0      		rjmp .L34
 1290               		.cfi_endproc
 1291               	.LFE22:
 1293               	.global	source_layers_cache
 1294               		.section	.bss.source_layers_cache,"aw",@nobits
 1297               	source_layers_cache:
 1298 0000 0000 0000 		.zero	85
 1298      0000 0000 
 1298      0000 0000 
 1298      0000 0000 
 1298      0000 0000 
 1299               	.global	layer_state
 1300               		.section	.bss.layer_state,"aw",@nobits
 1303               	layer_state:
 1304 0000 0000 0000 		.zero	4
 1305               	.global	default_layer_state
 1306               		.section	.bss.default_layer_state,"aw",@nobits
 1309               	default_layer_state:
 1310 0000 0000 0000 		.zero	4
 1311               		.text
 1312               	.Letext0:
 1313               		.file 2 "/usr/avr/include/stdint.h"
 1314               		.file 3 "./tmk_core/common/keyboard.h"
 1315               		.file 4 "./tmk_core/common/action_code.h"
 1316               		.file 5 "./tmk_core/common/action.h"
 1317               		.file 6 "./tmk_core/common/action_layer.h"
 1318               		.file 7 "./tmk_core/common/debug.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_layer.c
     /tmp/cc9363Cy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9363Cy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9363Cy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9363Cy.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc9363Cy.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9363Cy.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9363Cy.s:14     .text.default_layer_debug:0000000000000000 default_layer_debug
     /tmp/cc9363Cy.s:33     .text.default_layer_set:0000000000000000 default_layer_set
     /tmp/cc9363Cy.s:1309   .bss.default_layer_state:0000000000000000 default_layer_state
     /tmp/cc9363Cy.s:70     .text.default_layer_or:0000000000000000 default_layer_or
     /tmp/cc9363Cy.s:143    .text.default_layer_and:0000000000000000 default_layer_and
     /tmp/cc9363Cy.s:216    .text.default_layer_xor:0000000000000000 default_layer_xor
     /tmp/cc9363Cy.s:289    .text.layer_clear:0000000000000000 layer_clear
     /tmp/cc9363Cy.s:1303   .bss.layer_state:0000000000000000 layer_state
     /tmp/cc9363Cy.s:325    .text.layer_move:0000000000000000 layer_move
     /tmp/cc9363Cy.s:380    .text.layer_on:0000000000000000 layer_on
     /tmp/cc9363Cy.s:446    .text.layer_off:0000000000000000 layer_off
     /tmp/cc9363Cy.s:517    .text.layer_invert:0000000000000000 layer_invert
     /tmp/cc9363Cy.s:583    .text.layer_or:0000000000000000 layer_or
     /tmp/cc9363Cy.s:656    .text.layer_and:0000000000000000 layer_and
     /tmp/cc9363Cy.s:729    .text.layer_xor:0000000000000000 layer_xor
     /tmp/cc9363Cy.s:802    .text.layer_debug:0000000000000000 layer_debug
     /tmp/cc9363Cy.s:817    .text.update_source_layers_cache:0000000000000000 update_source_layers_cache
     /tmp/cc9363Cy.s:1297   .bss.source_layers_cache:0000000000000000 source_layers_cache
     /tmp/cc9363Cy.s:921    .text.read_source_layers_cache:0000000000000000 read_source_layers_cache
     /tmp/cc9363Cy.s:1015   .text.layer_switch_get_layer:0000000000000000 layer_switch_get_layer
     /tmp/cc9363Cy.s:1163   .text.layer_switch_get_action:0000000000000000 layer_switch_get_action
     /tmp/cc9363Cy.s:1202   .text.store_or_get_action:0000000000000000 store_or_get_action

UNDEFINED SYMBOLS
clear_keyboard_but_mods
action_for_key
disable_action_cache
__do_clear_bss
