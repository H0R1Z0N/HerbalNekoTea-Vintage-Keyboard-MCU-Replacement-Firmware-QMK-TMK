   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.timer_init,"ax",@progbits
  12               	.global	timer_init
  14               	timer_init:
  15               	.LFB5:
  16               		.file 1 "./tmk_core/common/avr/timer.c"
   1:./tmk_core/common/avr/timer.c **** /*
   2:./tmk_core/common/avr/timer.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/avr/timer.c **** 
   4:./tmk_core/common/avr/timer.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/avr/timer.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/avr/timer.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/avr/timer.c **** (at your option) any later version.
   8:./tmk_core/common/avr/timer.c **** 
   9:./tmk_core/common/avr/timer.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/avr/timer.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/avr/timer.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/avr/timer.c **** GNU General Public License for more details.
  13:./tmk_core/common/avr/timer.c **** 
  14:./tmk_core/common/avr/timer.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/avr/timer.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/avr/timer.c **** */
  17:./tmk_core/common/avr/timer.c **** 
  18:./tmk_core/common/avr/timer.c **** #include <avr/io.h>
  19:./tmk_core/common/avr/timer.c **** #include <avr/interrupt.h>
  20:./tmk_core/common/avr/timer.c **** #include <util/atomic.h>
  21:./tmk_core/common/avr/timer.c **** #include <stdint.h>
  22:./tmk_core/common/avr/timer.c **** #include "timer_avr.h"
  23:./tmk_core/common/avr/timer.c **** #include "timer.h"
  24:./tmk_core/common/avr/timer.c **** 
  25:./tmk_core/common/avr/timer.c **** 
  26:./tmk_core/common/avr/timer.c **** // counter resolution 1ms
  27:./tmk_core/common/avr/timer.c **** // NOTE: union { uint32_t timer32; struct { uint16_t dummy; uint16_t timer16; }}
  28:./tmk_core/common/avr/timer.c **** volatile uint32_t timer_count;
  29:./tmk_core/common/avr/timer.c **** 
  30:./tmk_core/common/avr/timer.c **** void timer_init(void)
  31:./tmk_core/common/avr/timer.c **** {
  17               		.loc 1 31 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  32:./tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  33:./tmk_core/common/avr/timer.c ****     TCCR0A = 0x02;
  23               		.loc 1 33 5 view .LVU1
  24               		.loc 1 33 12 is_stmt 0 view .LVU2
  25 0000 82E0      		ldi r24,lo8(2)
  26 0002 84BD      		out 0x24,r24
  34:./tmk_core/common/avr/timer.c **** 
  35:./tmk_core/common/avr/timer.c **** #if TIMER_PRESCALER == 1
  36:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x01;
  37:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 8
  38:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x02;
  39:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 64
  40:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x03;
  27               		.loc 1 40 5 is_stmt 1 view .LVU3
  28               		.loc 1 40 12 is_stmt 0 view .LVU4
  29 0004 93E0      		ldi r25,lo8(3)
  30 0006 95BD      		out 0x25,r25
  41:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 256
  42:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x04;
  43:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 1024
  44:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x05;
  45:./tmk_core/common/avr/timer.c **** #else
  46:./tmk_core/common/avr/timer.c **** #   error "Timer prescaler value is NOT vaild."
  47:./tmk_core/common/avr/timer.c **** #endif
  48:./tmk_core/common/avr/timer.c **** 
  49:./tmk_core/common/avr/timer.c ****     OCR0A = TIMER_RAW_TOP;
  31               		.loc 1 49 5 is_stmt 1 view .LVU5
  32               		.loc 1 49 11 is_stmt 0 view .LVU6
  33 0008 9AEF      		ldi r25,lo8(-6)
  34 000a 97BD      		out 0x27,r25
  50:./tmk_core/common/avr/timer.c ****     TIMSK0 = (1<<OCIE0A);
  35               		.loc 1 50 5 is_stmt 1 view .LVU7
  36               		.loc 1 50 12 is_stmt 0 view .LVU8
  37 000c 8093 6E00 		sts 110,r24
  38               	/* epilogue start */
  51:./tmk_core/common/avr/timer.c **** }
  39               		.loc 1 51 1 view .LVU9
  40 0010 0895      		ret
  41               		.cfi_endproc
  42               	.LFE5:
  44               		.section	.text.timer_clear,"ax",@progbits
  45               	.global	timer_clear
  47               	timer_clear:
  48               	.LFB6:
  52:./tmk_core/common/avr/timer.c **** 
  53:./tmk_core/common/avr/timer.c **** inline
  54:./tmk_core/common/avr/timer.c **** void timer_clear(void)
  55:./tmk_core/common/avr/timer.c **** {
  49               		.loc 1 55 1 is_stmt 1 view -0
  50               		.cfi_startproc
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 0 */
  54               	.L__stack_usage = 0
  56:./tmk_core/common/avr/timer.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  55               		.loc 1 56 3 view .LVU11
  56               	.LBB27:
  57               		.loc 1 56 3 view .LVU12
  58 0000 8FB7      		in r24,__SREG__
  59               	.LVL0:
  60               	.LBB28:
  61               	.LBI28:
  62               		.file 2 "/usr/avr/include/util/atomic.h"
   1:/usr/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/avr/include/util/atomic.h **** 
   4:/usr/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/avr/include/util/atomic.h **** 
   7:/usr/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/avr/include/util/atomic.h **** 
  10:/usr/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/avr/include/util/atomic.h ****      distribution.
  14:/usr/avr/include/util/atomic.h **** 
  15:/usr/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/avr/include/util/atomic.h **** 
  19:/usr/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/avr/include/util/atomic.h **** */
  31:/usr/avr/include/util/atomic.h **** 
  32:/usr/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/avr/include/util/atomic.h **** 
  34:/usr/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/avr/include/util/atomic.h **** 
  37:/usr/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/avr/include/util/atomic.h **** 
  40:/usr/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/avr/include/util/atomic.h **** {
  44:/usr/avr/include/util/atomic.h ****     sei();
  45:/usr/avr/include/util/atomic.h ****     return 1;
  46:/usr/avr/include/util/atomic.h **** }
  47:/usr/avr/include/util/atomic.h **** 
  48:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  63               		.loc 2 48 27 view .LVU13
  64               	.LBB29:
  49:/usr/avr/include/util/atomic.h **** {
  50:/usr/avr/include/util/atomic.h ****     cli();
  65               		.loc 2 50 5 view .LVU14
  66               	/* #APP */
  67               	 ;  50 "/usr/avr/include/util/atomic.h" 1
  68 0002 F894      		cli
  69               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h ****     return 1;
  70               		.loc 2 51 5 view .LVU15
  71               	.LVL1:
  72               		.loc 2 51 5 is_stmt 0 view .LVU16
  73               	/* #NOAPP */
  74               	.LBE29:
  75               	.LBE28:
  57:./tmk_core/common/avr/timer.c ****     timer_count = 0;
  76               		.loc 1 57 5 is_stmt 1 view .LVU17
  77               		.loc 1 57 17 is_stmt 0 view .LVU18
  78 0004 1092 0000 		sts timer_count,__zero_reg__
  79 0008 1092 0000 		sts timer_count+1,__zero_reg__
  80 000c 1092 0000 		sts timer_count+2,__zero_reg__
  81 0010 1092 0000 		sts timer_count+3,__zero_reg__
  82               	.LVL2:
  83               	.LBB30:
  84               	.LBI30:
  52:/usr/avr/include/util/atomic.h **** }
  53:/usr/avr/include/util/atomic.h **** 
  54:/usr/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/avr/include/util/atomic.h **** {
  56:/usr/avr/include/util/atomic.h ****     sei();
  57:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/avr/include/util/atomic.h **** }
  60:/usr/avr/include/util/atomic.h **** 
  61:/usr/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/avr/include/util/atomic.h **** {
  63:/usr/avr/include/util/atomic.h ****     cli();
  64:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/avr/include/util/atomic.h **** }
  67:/usr/avr/include/util/atomic.h **** 
  68:/usr/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  85               		.loc 2 68 24 is_stmt 1 view .LVU19
  86               	.LBB31:
  69:/usr/avr/include/util/atomic.h **** {
  70:/usr/avr/include/util/atomic.h ****     SREG = *__s;
  87               		.loc 2 70 5 view .LVU20
  88               		.loc 2 70 10 is_stmt 0 view .LVU21
  89 0014 8FBF      		out __SREG__,r24
  71:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  90               		.loc 2 71 5 is_stmt 1 view .LVU22
  91               	.LVL3:
  92               	/* epilogue start */
  93               		.loc 2 71 5 is_stmt 0 view .LVU23
  94               	.LBE31:
  95               	.LBE30:
  96               	.LBE27:
  58:./tmk_core/common/avr/timer.c ****   }
  59:./tmk_core/common/avr/timer.c **** }
  97               		.loc 1 59 1 view .LVU24
  98 0016 0895      		ret
  99               		.cfi_endproc
 100               	.LFE6:
 102               		.section	.text.timer_read,"ax",@progbits
 103               	.global	timer_read
 105               	timer_read:
 106               	.LFB7:
  60:./tmk_core/common/avr/timer.c **** 
  61:./tmk_core/common/avr/timer.c **** inline
  62:./tmk_core/common/avr/timer.c **** uint16_t timer_read(void)
  63:./tmk_core/common/avr/timer.c **** {
 107               		.loc 1 63 1 is_stmt 1 view -0
 108               		.cfi_startproc
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
  64:./tmk_core/common/avr/timer.c ****     uint32_t t;
 113               		.loc 1 64 5 view .LVU26
  65:./tmk_core/common/avr/timer.c **** 
  66:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 114               		.loc 1 66 5 view .LVU27
 115               	.LBB32:
 116               		.loc 1 66 5 view .LVU28
 117 0000 2FB7      		in r18,__SREG__
 118               	.LVL4:
 119               	.LBB33:
 120               	.LBI33:
  48:/usr/avr/include/util/atomic.h **** {
 121               		.loc 2 48 27 view .LVU29
 122               	.LBB34:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 123               		.loc 2 50 5 view .LVU30
 124               	/* #APP */
 125               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 126 0002 F894      		cli
 127               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 128               		.loc 2 51 5 view .LVU31
 129               	.LVL5:
  51:/usr/avr/include/util/atomic.h **** }
 130               		.loc 2 51 5 is_stmt 0 view .LVU32
 131               	/* #NOAPP */
 132               	.LBE34:
 133               	.LBE33:
  67:./tmk_core/common/avr/timer.c ****       t = timer_count;
 134               		.loc 1 67 7 is_stmt 1 view .LVU33
 135               		.loc 1 67 9 is_stmt 0 view .LVU34
 136 0004 8091 0000 		lds r24,timer_count
 137 0008 9091 0000 		lds r25,timer_count+1
 138 000c A091 0000 		lds r26,timer_count+2
 139 0010 B091 0000 		lds r27,timer_count+3
 140               	.LVL6:
 141               	.LBB35:
 142               	.LBI35:
  68:/usr/avr/include/util/atomic.h **** {
 143               		.loc 2 68 24 is_stmt 1 view .LVU35
 144               	.LBB36:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 145               		.loc 2 70 5 view .LVU36
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 146               		.loc 2 70 10 is_stmt 0 view .LVU37
 147 0014 2FBF      		out __SREG__,r18
 148               		.loc 2 71 5 is_stmt 1 view .LVU38
 149               	.LVL7:
 150               		.loc 2 71 5 is_stmt 0 view .LVU39
 151               	.LBE36:
 152               	.LBE35:
 153               	.LBE32:
  68:./tmk_core/common/avr/timer.c ****     }
  69:./tmk_core/common/avr/timer.c **** 
  70:./tmk_core/common/avr/timer.c ****     return (t & 0xFFFF);
 154               		.loc 1 70 5 is_stmt 1 view .LVU40
 155               	/* epilogue start */
  71:./tmk_core/common/avr/timer.c **** }
 156               		.loc 1 71 1 is_stmt 0 view .LVU41
 157 0016 0895      		ret
 158               		.cfi_endproc
 159               	.LFE7:
 161               		.section	.text.timer_read32,"ax",@progbits
 162               	.global	timer_read32
 164               	timer_read32:
 165               	.LFB8:
  72:./tmk_core/common/avr/timer.c **** 
  73:./tmk_core/common/avr/timer.c **** inline
  74:./tmk_core/common/avr/timer.c **** uint32_t timer_read32(void)
  75:./tmk_core/common/avr/timer.c **** {
 166               		.loc 1 75 1 is_stmt 1 view -0
 167               		.cfi_startproc
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 0 */
 171               	.L__stack_usage = 0
  76:./tmk_core/common/avr/timer.c ****     uint32_t t;
 172               		.loc 1 76 5 view .LVU43
  77:./tmk_core/common/avr/timer.c **** 
  78:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 173               		.loc 1 78 5 view .LVU44
 174               	.LBB37:
 175               		.loc 1 78 5 view .LVU45
 176 0000 2FB7      		in r18,__SREG__
 177               	.LVL8:
 178               	.LBB38:
 179               	.LBI38:
  48:/usr/avr/include/util/atomic.h **** {
 180               		.loc 2 48 27 view .LVU46
 181               	.LBB39:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 182               		.loc 2 50 5 view .LVU47
 183               	/* #APP */
 184               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 185 0002 F894      		cli
 186               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 187               		.loc 2 51 5 view .LVU48
 188               	.LVL9:
  51:/usr/avr/include/util/atomic.h **** }
 189               		.loc 2 51 5 is_stmt 0 view .LVU49
 190               	/* #NOAPP */
 191               	.LBE39:
 192               	.LBE38:
  79:./tmk_core/common/avr/timer.c ****       t = timer_count;
 193               		.loc 1 79 7 is_stmt 1 view .LVU50
 194               		.loc 1 79 9 is_stmt 0 view .LVU51
 195 0004 6091 0000 		lds r22,timer_count
 196 0008 7091 0000 		lds r23,timer_count+1
 197 000c 8091 0000 		lds r24,timer_count+2
 198 0010 9091 0000 		lds r25,timer_count+3
 199               	.LVL10:
 200               	.LBB40:
 201               	.LBI40:
  68:/usr/avr/include/util/atomic.h **** {
 202               		.loc 2 68 24 is_stmt 1 view .LVU52
 203               	.LBB41:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 204               		.loc 2 70 5 view .LVU53
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 205               		.loc 2 70 10 is_stmt 0 view .LVU54
 206 0014 2FBF      		out __SREG__,r18
 207               		.loc 2 71 5 is_stmt 1 view .LVU55
 208               	.LVL11:
 209               		.loc 2 71 5 is_stmt 0 view .LVU56
 210               	.LBE41:
 211               	.LBE40:
 212               	.LBE37:
  80:./tmk_core/common/avr/timer.c ****     }
  81:./tmk_core/common/avr/timer.c **** 
  82:./tmk_core/common/avr/timer.c ****     return t;
 213               		.loc 1 82 5 is_stmt 1 view .LVU57
 214               	/* epilogue start */
  83:./tmk_core/common/avr/timer.c **** }
 215               		.loc 1 83 1 is_stmt 0 view .LVU58
 216 0016 0895      		ret
 217               		.cfi_endproc
 218               	.LFE8:
 220               		.section	.text.timer_elapsed,"ax",@progbits
 221               	.global	timer_elapsed
 223               	timer_elapsed:
 224               	.LVL12:
 225               	.LFB9:
  84:./tmk_core/common/avr/timer.c **** 
  85:./tmk_core/common/avr/timer.c **** inline
  86:./tmk_core/common/avr/timer.c **** uint16_t timer_elapsed(uint16_t last)
  87:./tmk_core/common/avr/timer.c **** {
 226               		.loc 1 87 1 is_stmt 1 view -0
 227               		.cfi_startproc
 228               		.loc 1 87 1 is_stmt 0 view .LVU60
 229 0000 CF92      		push r12
 230               	.LCFI0:
 231               		.cfi_def_cfa_offset 3
 232               		.cfi_offset 12, -2
 233 0002 DF92      		push r13
 234               	.LCFI1:
 235               		.cfi_def_cfa_offset 4
 236               		.cfi_offset 13, -3
 237 0004 EF92      		push r14
 238               	.LCFI2:
 239               		.cfi_def_cfa_offset 5
 240               		.cfi_offset 14, -4
 241 0006 FF92      		push r15
 242               	.LCFI3:
 243               		.cfi_def_cfa_offset 6
 244               		.cfi_offset 15, -5
 245 0008 0F93      		push r16
 246               	.LCFI4:
 247               		.cfi_def_cfa_offset 7
 248               		.cfi_offset 16, -6
 249 000a 1F93      		push r17
 250               	.LCFI5:
 251               		.cfi_def_cfa_offset 8
 252               		.cfi_offset 17, -7
 253               	/* prologue: function */
 254               	/* frame size = 0 */
 255               	/* stack size = 6 */
 256               	.L__stack_usage = 6
  88:./tmk_core/common/avr/timer.c ****     uint32_t t;
 257               		.loc 1 88 5 is_stmt 1 view .LVU61
  89:./tmk_core/common/avr/timer.c **** 
  90:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 258               		.loc 1 90 5 view .LVU62
 259               	.LBB42:
 260               		.loc 1 90 5 view .LVU63
 261 000c 2FB7      		in r18,__SREG__
 262               	.LVL13:
 263               	.LBB43:
 264               	.LBI43:
  48:/usr/avr/include/util/atomic.h **** {
 265               		.loc 2 48 27 view .LVU64
 266               	.LBB44:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 267               		.loc 2 50 5 view .LVU65
 268               	/* #APP */
 269               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 270 000e F894      		cli
 271               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 272               		.loc 2 51 5 view .LVU66
 273               	.LVL14:
  51:/usr/avr/include/util/atomic.h **** }
 274               		.loc 2 51 5 is_stmt 0 view .LVU67
 275               	/* #NOAPP */
 276               	.LBE44:
 277               	.LBE43:
  91:./tmk_core/common/avr/timer.c ****       t = timer_count;
 278               		.loc 1 91 7 is_stmt 1 view .LVU68
 279               		.loc 1 91 9 is_stmt 0 view .LVU69
 280 0010 4091 0000 		lds r20,timer_count
 281 0014 5091 0000 		lds r21,timer_count+1
 282 0018 6091 0000 		lds r22,timer_count+2
 283 001c 7091 0000 		lds r23,timer_count+3
 284               	.LVL15:
 285               	.LBB45:
 286               	.LBI45:
  68:/usr/avr/include/util/atomic.h **** {
 287               		.loc 2 68 24 is_stmt 1 view .LVU70
 288               	.LBB46:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 289               		.loc 2 70 5 view .LVU71
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 290               		.loc 2 70 10 is_stmt 0 view .LVU72
 291 0020 2FBF      		out __SREG__,r18
 292               		.loc 2 71 5 is_stmt 1 view .LVU73
 293               	.LVL16:
 294               		.loc 2 71 5 is_stmt 0 view .LVU74
 295               	.LBE46:
 296               	.LBE45:
 297               	.LBE42:
  92:./tmk_core/common/avr/timer.c ****     }
  93:./tmk_core/common/avr/timer.c **** 
  94:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_16((t & 0xFFFF), last);
 298               		.loc 1 94 5 is_stmt 1 view .LVU75
 299               		.loc 1 94 12 is_stmt 0 view .LVU76
 300 0022 6A01      		movw r12,r20
 301 0024 7B01      		movw r14,r22
 302 0026 EE24      		clr r14
 303 0028 FF24      		clr r15
 304 002a 8C01      		movw r16,r24
 305 002c 30E0      		ldi r19,0
 306 002e 20E0      		ldi r18,0
 307 0030 C016      		cp r12,r16
 308 0032 D106      		cpc r13,r17
 309 0034 E206      		cpc r14,r18
 310 0036 F306      		cpc r15,r19
 311 0038 00F0      		brlo .L6
 312               	.LVL17:
 313               	.L8:
 314               		.loc 1 94 12 discriminator 2 view .LVU77
 315 003a 481B      		sub r20,r24
 316 003c 590B      		sbc r21,r25
  95:./tmk_core/common/avr/timer.c **** }
 317               		.loc 1 95 1 discriminator 2 view .LVU78
 318 003e CA01      		movw r24,r20
 319               	.LVL18:
 320               	/* epilogue start */
 321               		.loc 1 95 1 discriminator 2 view .LVU79
 322 0040 1F91      		pop r17
 323 0042 0F91      		pop r16
 324               	.LVL19:
 325               		.loc 1 95 1 discriminator 2 view .LVU80
 326 0044 FF90      		pop r15
 327 0046 EF90      		pop r14
 328 0048 DF90      		pop r13
 329 004a CF90      		pop r12
 330 004c 0895      		ret
 331               	.LVL20:
 332               	.L6:
  94:./tmk_core/common/avr/timer.c **** }
 333               		.loc 1 94 12 discriminator 2 view .LVU81
 334 004e 4150      		subi r20,1
 335 0050 5109      		sbc r21,__zero_reg__
 336               	.LVL21:
  94:./tmk_core/common/avr/timer.c **** }
 337               		.loc 1 94 12 discriminator 2 view .LVU82
 338 0052 00C0      		rjmp .L8
 339               		.cfi_endproc
 340               	.LFE9:
 342               		.section	.text.timer_elapsed32,"ax",@progbits
 343               	.global	timer_elapsed32
 345               	timer_elapsed32:
 346               	.LVL22:
 347               	.LFB10:
  96:./tmk_core/common/avr/timer.c **** 
  97:./tmk_core/common/avr/timer.c **** inline
  98:./tmk_core/common/avr/timer.c **** uint32_t timer_elapsed32(uint32_t last)
  99:./tmk_core/common/avr/timer.c **** {
 348               		.loc 1 99 1 is_stmt 1 view -0
 349               		.cfi_startproc
 350               	/* prologue: function */
 351               	/* frame size = 0 */
 352               	/* stack size = 0 */
 353               	.L__stack_usage = 0
 354               		.loc 1 99 1 is_stmt 0 view .LVU84
 355 0000 AB01      		movw r20,r22
 356 0002 BC01      		movw r22,r24
 357               	.LVL23:
 100:./tmk_core/common/avr/timer.c ****     uint32_t t;
 358               		.loc 1 100 5 is_stmt 1 view .LVU85
 101:./tmk_core/common/avr/timer.c **** 
 102:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 359               		.loc 1 102 5 view .LVU86
 360               	.LBB47:
 361               		.loc 1 102 5 view .LVU87
 362 0004 2FB7      		in r18,__SREG__
 363               	.LVL24:
 364               	.LBB48:
 365               	.LBI48:
  48:/usr/avr/include/util/atomic.h **** {
 366               		.loc 2 48 27 view .LVU88
 367               	.LBB49:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 368               		.loc 2 50 5 view .LVU89
 369               	/* #APP */
 370               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 371 0006 F894      		cli
 372               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 373               		.loc 2 51 5 view .LVU90
 374               	.LVL25:
  51:/usr/avr/include/util/atomic.h **** }
 375               		.loc 2 51 5 is_stmt 0 view .LVU91
 376               	/* #NOAPP */
 377               	.LBE49:
 378               	.LBE48:
 103:./tmk_core/common/avr/timer.c ****       t = timer_count;
 379               		.loc 1 103 7 is_stmt 1 view .LVU92
 380               		.loc 1 103 9 is_stmt 0 view .LVU93
 381 0008 8091 0000 		lds r24,timer_count
 382 000c 9091 0000 		lds r25,timer_count+1
 383 0010 A091 0000 		lds r26,timer_count+2
 384 0014 B091 0000 		lds r27,timer_count+3
 385               	.LVL26:
 386               	.LBB50:
 387               	.LBI50:
  68:/usr/avr/include/util/atomic.h **** {
 388               		.loc 2 68 24 is_stmt 1 view .LVU94
 389               	.LBB51:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 390               		.loc 2 70 5 view .LVU95
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 391               		.loc 2 70 10 is_stmt 0 view .LVU96
 392 0018 2FBF      		out __SREG__,r18
 393               		.loc 2 71 5 is_stmt 1 view .LVU97
 394               	.LVL27:
 395               		.loc 2 71 5 is_stmt 0 view .LVU98
 396               	.LBE51:
 397               	.LBE50:
 398               	.LBE47:
 104:./tmk_core/common/avr/timer.c ****     }
 105:./tmk_core/common/avr/timer.c **** 
 106:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_32(t, last);
 399               		.loc 1 106 5 is_stmt 1 view .LVU99
 400               		.loc 1 106 12 is_stmt 0 view .LVU100
 401 001a 8417      		cp r24,r20
 402 001c 9507      		cpc r25,r21
 403 001e A607      		cpc r26,r22
 404 0020 B707      		cpc r27,r23
 405 0022 00F0      		brlo .L10
 406               	.LVL28:
 407               	.L12:
 408               		.loc 1 106 12 discriminator 2 view .LVU101
 409 0024 841B      		sub r24,r20
 410 0026 950B      		sbc r25,r21
 411 0028 A60B      		sbc r26,r22
 412 002a B70B      		sbc r27,r23
 107:./tmk_core/common/avr/timer.c **** }
 413               		.loc 1 107 1 discriminator 2 view .LVU102
 414 002c BC01      		movw r22,r24
 415 002e CD01      		movw r24,r26
 416               	/* epilogue start */
 417 0030 0895      		ret
 418               	.LVL29:
 419               	.L10:
 106:./tmk_core/common/avr/timer.c **** }
 420               		.loc 1 106 12 discriminator 2 view .LVU103
 421 0032 0197      		sbiw r24,1
 422 0034 A109      		sbc r26,__zero_reg__
 423 0036 B109      		sbc r27,__zero_reg__
 424               	.LVL30:
 106:./tmk_core/common/avr/timer.c **** }
 425               		.loc 1 106 12 discriminator 2 view .LVU104
 426 0038 00C0      		rjmp .L12
 427               		.cfi_endproc
 428               	.LFE10:
 430               		.section	.text.__vector_21,"ax",@progbits
 431               	.global	__vector_21
 433               	__vector_21:
 434               	.LFB11:
 108:./tmk_core/common/avr/timer.c **** 
 109:./tmk_core/common/avr/timer.c **** // excecuted once per 1ms.(excess for just timer count?)
 110:./tmk_core/common/avr/timer.c **** ISR(TIMER0_COMPA_vect)
 111:./tmk_core/common/avr/timer.c **** {
 435               		.loc 1 111 1 is_stmt 1 view -0
 436               		.cfi_startproc
 437 0000 1F92 1FB6 		__gcc_isr 1
 437      1F92 1124 
 437      8F93 
 438 000a 9F93      		push r25
 439               	.LCFI6:
 440               		.cfi_def_cfa_offset 3
 441               		.cfi_offset 25, -2
 442 000c AF93      		push r26
 443               	.LCFI7:
 444               		.cfi_def_cfa_offset 4
 445               		.cfi_offset 26, -3
 446 000e BF93      		push r27
 447               	.LCFI8:
 448               		.cfi_def_cfa_offset 5
 449               		.cfi_offset 27, -4
 450               	/* prologue: Signal */
 451               	/* frame size = 0 */
 452               	/* stack size = 3...7 */
 453               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 112:./tmk_core/common/avr/timer.c ****     timer_count++;
 454               		.loc 1 112 5 view .LVU106
 455               		.loc 1 112 16 is_stmt 0 view .LVU107
 456 0010 8091 0000 		lds r24,timer_count
 457 0014 9091 0000 		lds r25,timer_count+1
 458 0018 A091 0000 		lds r26,timer_count+2
 459 001c B091 0000 		lds r27,timer_count+3
 460 0020 0196      		adiw r24,1
 461 0022 A11D      		adc r26,__zero_reg__
 462 0024 B11D      		adc r27,__zero_reg__
 463 0026 8093 0000 		sts timer_count,r24
 464 002a 9093 0000 		sts timer_count+1,r25
 465 002e A093 0000 		sts timer_count+2,r26
 466 0032 B093 0000 		sts timer_count+3,r27
 467               	/* epilogue start */
 113:./tmk_core/common/avr/timer.c **** }
 468               		.loc 1 113 1 view .LVU108
 469 0036 BF91      		pop r27
 470 0038 AF91      		pop r26
 471 003a 9F91      		pop r25
 472 003c 8F91 1F90 		__gcc_isr 2
 472      1FBE 1F90 
 473 0044 1895      		reti
 474               		__gcc_isr 0,r24
 475               		.cfi_endproc
 476               	.LFE11:
 478               		.comm	timer_count,4,1
 479               		.text
 480               	.Letext0:
 481               		.file 3 "/usr/avr/include/stdint.h"
 482               		.file 4 "./tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccndO7jS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccndO7jS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccndO7jS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccndO7jS.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccndO7jS.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccndO7jS.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccndO7jS.s:14     .text.timer_init:0000000000000000 timer_init
     /tmp/ccndO7jS.s:47     .text.timer_clear:0000000000000000 timer_clear
                            *COM*:0000000000000004 timer_count
     /tmp/ccndO7jS.s:105    .text.timer_read:0000000000000000 timer_read
     /tmp/ccndO7jS.s:164    .text.timer_read32:0000000000000000 timer_read32
     /tmp/ccndO7jS.s:223    .text.timer_elapsed:0000000000000000 timer_elapsed
     /tmp/ccndO7jS.s:345    .text.timer_elapsed32:0000000000000000 timer_elapsed32
     /tmp/ccndO7jS.s:433    .text.__vector_21:0000000000000000 __vector_21
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
__do_clear_bss
