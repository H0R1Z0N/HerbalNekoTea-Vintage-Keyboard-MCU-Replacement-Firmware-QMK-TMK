   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.do_code16,"ax",@progbits
  13               	do_code16:
  14               	.LVL0:
  15               	.LFB111:
  16               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** #ifndef TAPPING_TERM
   4:quantum/quantum.c **** #define TAPPING_TERM 200
   5:quantum/quantum.c **** #endif
   6:quantum/quantum.c **** 
   7:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  17               		.loc 1 7 60 view -0
  18               		.cfi_startproc
  19               		.loc 1 7 60 is_stmt 0 view .LVU1
  20 0000 0F93      		push r16
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 16, -2
  24 0002 1F93      		push r17
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 17, -3
  28 0004 CF93      		push r28
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 28, -4
  32 0006 DF93      		push r29
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 29, -5
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 4 */
  39               	.L__stack_usage = 4
  40 0008 8C01      		movw r16,r24
  41 000a EB01      		movw r28,r22
   8:quantum/quantum.c ****   switch (code) {
  42               		.loc 1 8 3 is_stmt 1 view .LVU2
  43 000c 9A95      		dec r25
  44               	.LVL1:
  45               		.loc 1 8 3 is_stmt 0 view .LVU3
  46 000e 8115      		cp r24,__zero_reg__
  47 0010 9F41      		sbci r25,31
  48 0012 00F4      		brsh .L1
   9:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  10:quantum/quantum.c ****     break;
  49               		.loc 1 10 5 is_stmt 1 view .LVU4
  11:quantum/quantum.c ****   default:
  12:quantum/quantum.c ****     return;
  13:quantum/quantum.c ****   }
  14:quantum/quantum.c **** 
  15:quantum/quantum.c ****   if (code & QK_LCTL)
  50               		.loc 1 15 3 view .LVU5
  51               		.loc 1 15 6 is_stmt 0 view .LVU6
  52 0014 10FF      		sbrs r17,0
  53 0016 00C0      		rjmp .L4
  16:quantum/quantum.c ****     f(KC_LCTL);
  54               		.loc 1 16 5 is_stmt 1 view .LVU7
  55 0018 80EE      		ldi r24,lo8(-32)
  56 001a FB01      		movw r30,r22
  57 001c 0995      		icall
  58               	.LVL2:
  59               	.L4:
  17:quantum/quantum.c ****   if (code & QK_LSFT)
  60               		.loc 1 17 3 view .LVU8
  61               		.loc 1 17 6 is_stmt 0 view .LVU9
  62 001e 11FF      		sbrs r17,1
  63 0020 00C0      		rjmp .L5
  18:quantum/quantum.c ****     f(KC_LSFT);
  64               		.loc 1 18 5 is_stmt 1 view .LVU10
  65 0022 81EE      		ldi r24,lo8(-31)
  66 0024 FE01      		movw r30,r28
  67 0026 0995      		icall
  68               	.LVL3:
  69               	.L5:
  19:quantum/quantum.c ****   if (code & QK_LALT)
  70               		.loc 1 19 3 view .LVU11
  71               		.loc 1 19 6 is_stmt 0 view .LVU12
  72 0028 12FF      		sbrs r17,2
  73 002a 00C0      		rjmp .L6
  20:quantum/quantum.c ****     f(KC_LALT);
  74               		.loc 1 20 5 is_stmt 1 view .LVU13
  75 002c 82EE      		ldi r24,lo8(-30)
  76 002e FE01      		movw r30,r28
  77 0030 0995      		icall
  78               	.LVL4:
  79               	.L6:
  21:quantum/quantum.c ****   if (code & QK_LGUI)
  80               		.loc 1 21 3 view .LVU14
  81               		.loc 1 21 6 is_stmt 0 view .LVU15
  82 0032 13FF      		sbrs r17,3
  83 0034 00C0      		rjmp .L7
  22:quantum/quantum.c ****     f(KC_LGUI);
  84               		.loc 1 22 5 is_stmt 1 view .LVU16
  85 0036 83EE      		ldi r24,lo8(-29)
  86 0038 FE01      		movw r30,r28
  87 003a 0995      		icall
  88               	.LVL5:
  89               	.L7:
  23:quantum/quantum.c **** 
  24:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  90               		.loc 1 24 3 view .LVU17
  91               		.loc 1 24 6 is_stmt 0 view .LVU18
  92 003c 0115      		cp r16,__zero_reg__
  93 003e 1041      		sbci r17,16
  94 0040 00F0      		brlo .L1
  25:quantum/quantum.c **** 
  26:quantum/quantum.c ****   if (code & QK_RCTL)
  95               		.loc 1 26 3 is_stmt 1 view .LVU19
  27:quantum/quantum.c ****     f(KC_RCTL);
  96               		.loc 1 27 5 view .LVU20
  97 0042 84EE      		ldi r24,lo8(-28)
  98 0044 FE01      		movw r30,r28
  99 0046 0995      		icall
 100               	.LVL6:
  28:quantum/quantum.c ****   if (code & QK_RSFT)
 101               		.loc 1 28 3 view .LVU21
  29:quantum/quantum.c ****     f(KC_RSFT);
 102               		.loc 1 29 5 view .LVU22
 103 0048 85EE      		ldi r24,lo8(-27)
 104 004a FE01      		movw r30,r28
 105 004c 0995      		icall
 106               	.LVL7:
  30:quantum/quantum.c ****   if (code & QK_RALT)
 107               		.loc 1 30 3 view .LVU23
  31:quantum/quantum.c ****     f(KC_RALT);
 108               		.loc 1 31 5 view .LVU24
 109 004e 86EE      		ldi r24,lo8(-26)
 110 0050 FE01      		movw r30,r28
 111 0052 0995      		icall
 112               	.LVL8:
  32:quantum/quantum.c ****   if (code & QK_RGUI)
 113               		.loc 1 32 3 view .LVU25
  33:quantum/quantum.c ****     f(KC_RGUI);
 114               		.loc 1 33 5 view .LVU26
 115 0054 87EE      		ldi r24,lo8(-25)
 116 0056 FE01      		movw r30,r28
 117               	/* epilogue start */
  34:quantum/quantum.c **** }
 118               		.loc 1 34 1 is_stmt 0 view .LVU27
 119 0058 DF91      		pop r29
 120 005a CF91      		pop r28
 121               	.LVL9:
 122               		.loc 1 34 1 view .LVU28
 123 005c 1F91      		pop r17
 124 005e 0F91      		pop r16
 125               	.LVL10:
  33:quantum/quantum.c ****     f(KC_RGUI);
 126               		.loc 1 33 5 view .LVU29
 127 0060 0994      		ijmp
 128               	.LVL11:
 129               	.L1:
 130               	/* epilogue start */
 131               		.loc 1 34 1 view .LVU30
 132 0062 DF91      		pop r29
 133 0064 CF91      		pop r28
 134               	.LVL12:
 135               		.loc 1 34 1 view .LVU31
 136 0066 1F91      		pop r17
 137 0068 0F91      		pop r16
 138               	.LVL13:
 139               		.loc 1 34 1 view .LVU32
 140 006a 0895      		ret
 141               		.cfi_endproc
 142               	.LFE111:
 144               		.section	.text.register_code16,"ax",@progbits
 145               	.global	register_code16
 147               	register_code16:
 148               	.LVL14:
 149               	.LFB112:
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** void register_code16 (uint16_t code) {
 150               		.loc 1 36 38 is_stmt 1 view -0
 151               		.cfi_startproc
 152               		.loc 1 36 38 is_stmt 0 view .LVU34
 153 0000 CF93      		push r28
 154               	.LCFI4:
 155               		.cfi_def_cfa_offset 3
 156               		.cfi_offset 28, -2
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 1 */
 160               	.L__stack_usage = 1
 161 0002 C82F      		mov r28,r24
  37:quantum/quantum.c ****   do_code16 (code, register_code);
 162               		.loc 1 37 3 is_stmt 1 view .LVU35
 163 0004 60E0      		ldi r22,lo8(gs(register_code))
 164 0006 70E0      		ldi r23,hi8(gs(register_code))
 165 0008 0E94 0000 		call do_code16
 166               	.LVL15:
  38:quantum/quantum.c ****   register_code (code);
 167               		.loc 1 38 3 view .LVU36
 168 000c 8C2F      		mov r24,r28
 169               	/* epilogue start */
  39:quantum/quantum.c **** }
 170               		.loc 1 39 1 is_stmt 0 view .LVU37
 171 000e CF91      		pop r28
  38:quantum/quantum.c ****   register_code (code);
 172               		.loc 1 38 3 view .LVU38
 173 0010 0C94 0000 		jmp register_code
 174               	.LVL16:
 175               		.cfi_endproc
 176               	.LFE112:
 178               		.section	.text.unregister_code16,"ax",@progbits
 179               	.global	unregister_code16
 181               	unregister_code16:
 182               	.LVL17:
 183               	.LFB113:
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 184               		.loc 1 41 40 is_stmt 1 view -0
 185               		.cfi_startproc
 186               		.loc 1 41 40 is_stmt 0 view .LVU40
 187 0000 CF93      		push r28
 188               	.LCFI5:
 189               		.cfi_def_cfa_offset 3
 190               		.cfi_offset 28, -2
 191 0002 DF93      		push r29
 192               	.LCFI6:
 193               		.cfi_def_cfa_offset 4
 194               		.cfi_offset 29, -3
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 2 */
 198               	.L__stack_usage = 2
 199 0004 EC01      		movw r28,r24
  42:quantum/quantum.c ****   unregister_code (code);
 200               		.loc 1 42 3 is_stmt 1 view .LVU41
 201 0006 0E94 0000 		call unregister_code
 202               	.LVL18:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 203               		.loc 1 43 3 view .LVU42
 204 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 205 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 206 000e CE01      		movw r24,r28
 207               	/* epilogue start */
  44:quantum/quantum.c **** }
 208               		.loc 1 44 1 is_stmt 0 view .LVU43
 209 0010 DF91      		pop r29
 210 0012 CF91      		pop r28
 211               	.LVL19:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 212               		.loc 1 43 3 view .LVU44
 213 0014 0C94 0000 		jmp do_code16
 214               	.LVL20:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 215               		.loc 1 43 3 view .LVU45
 216               		.cfi_endproc
 217               	.LFE113:
 219               		.section	.text.process_action_kb,"ax",@progbits
 220               		.weak	process_action_kb
 222               	process_action_kb:
 223               	.LVL21:
 224               	.LFB114:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** __attribute__ ((weak))
  47:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 225               		.loc 1 47 45 is_stmt 1 view -0
 226               		.cfi_startproc
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
  48:quantum/quantum.c ****   return true;
 231               		.loc 1 48 3 view .LVU47
  49:quantum/quantum.c **** }
 232               		.loc 1 49 1 is_stmt 0 view .LVU48
 233 0000 81E0      		ldi r24,lo8(1)
 234               	.LVL22:
 235               	/* epilogue start */
 236               		.loc 1 49 1 view .LVU49
 237 0002 0895      		ret
 238               		.cfi_endproc
 239               	.LFE114:
 241               		.section	.text.process_record_user,"ax",@progbits
 242               		.weak	process_record_user
 244               	process_record_user:
 245               	.LVL23:
 246               	.LFB116:
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** __attribute__ ((weak))
  52:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  53:quantum/quantum.c ****   return process_record_user(keycode, record);
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** __attribute__ ((weak))
  57:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 247               		.loc 1 57 65 is_stmt 1 view -0
 248               		.cfi_startproc
 249               	/* prologue: function */
 250               	/* frame size = 0 */
 251               	/* stack size = 0 */
 252               	.L__stack_usage = 0
  58:quantum/quantum.c ****   return true;
 253               		.loc 1 58 3 view .LVU51
  59:quantum/quantum.c **** }
 254               		.loc 1 59 1 is_stmt 0 view .LVU52
 255 0000 81E0      		ldi r24,lo8(1)
 256               	.LVL24:
 257               	/* epilogue start */
 258               		.loc 1 59 1 view .LVU53
 259 0002 0895      		ret
 260               		.cfi_endproc
 261               	.LFE116:
 263               		.section	.text.process_record_kb,"ax",@progbits
 264               		.weak	process_record_kb
 266               	process_record_kb:
 267               	.LVL25:
 268               	.LFB115:
  52:quantum/quantum.c ****   return process_record_user(keycode, record);
 269               		.loc 1 52 63 is_stmt 1 view -0
 270               		.cfi_startproc
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
  53:quantum/quantum.c **** }
 275               		.loc 1 53 3 view .LVU55
  53:quantum/quantum.c **** }
 276               		.loc 1 53 10 is_stmt 0 view .LVU56
 277 0000 0C94 0000 		jmp process_record_user
 278               	.LVL26:
  53:quantum/quantum.c **** }
 279               		.loc 1 53 10 view .LVU57
 280               		.cfi_endproc
 281               	.LFE115:
 283               		.section	.text.reset_keyboard,"ax",@progbits
 284               	.global	reset_keyboard
 286               	reset_keyboard:
 287               	.LFB117:
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** void reset_keyboard(void) {
 288               		.loc 1 61 27 is_stmt 1 view -0
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
  62:quantum/quantum.c ****   clear_keyboard();
 294               		.loc 1 62 3 view .LVU59
 295 0000 0E94 0000 		call clear_keyboard
 296               	.LVL27:
  63:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  64:quantum/quantum.c ****   stop_all_notes();
  65:quantum/quantum.c ****   shutdown_user();
  66:quantum/quantum.c **** #endif
  67:quantum/quantum.c ****   wait_ms(250);
 297               		.loc 1 67 3 view .LVU60
 298               	.LBB8:
 299               	.LBI8:
 300               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2551 2020-10-10 20:33:35Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 301               		.loc 2 166 1 view .LVU61
 302               	.LBB9:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 303               		.loc 2 168 2 view .LVU62
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 304               		.loc 2 172 2 view .LVU63
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 305               		.loc 2 173 2 view .LVU64
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 306               		.loc 2 174 2 view .LVU65
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 307               		.loc 2 184 3 view .LVU66
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 308               		.loc 2 187 2 view .LVU67
 309 0004 2FEF      		ldi r18,lo8(799999)
 310 0006 84E3      		ldi r24,hi8(799999)
 311 0008 9CE0      		ldi r25,hlo8(799999)
 312 000a 2150      	1:	subi r18,1
 313 000c 8040      		sbci r24,0
 314 000e 9040      		sbci r25,0
 315 0010 01F4      		brne 1b
 316 0012 00C0      		rjmp .
 317 0014 0000      		nop
 318               	.LVL28:
 319               		.loc 2 187 2 is_stmt 0 view .LVU68
 320               	.LBE9:
 321               	.LBE8:
  68:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  69:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  70:quantum/quantum.c **** #endif
  71:quantum/quantum.c ****   bootloader_jump();
 322               		.loc 1 71 3 is_stmt 1 view .LVU69
 323 0016 0C94 0000 		jmp bootloader_jump
 324               	.LVL29:
 325               		.cfi_endproc
 326               	.LFE117:
 328               		.section	.text.process_record_quantum,"ax",@progbits
 329               	.global	process_record_quantum
 331               	process_record_quantum:
 332               	.LVL30:
 333               	.LFB118:
  72:quantum/quantum.c **** }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c **** // Shift / paren setup
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** #ifndef LSPO_KEY
  77:quantum/quantum.c ****   #define LSPO_KEY KC_9
  78:quantum/quantum.c **** #endif
  79:quantum/quantum.c **** #ifndef RSPC_KEY
  80:quantum/quantum.c ****   #define RSPC_KEY KC_0
  81:quantum/quantum.c **** #endif
  82:quantum/quantum.c **** 
  83:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  84:quantum/quantum.c **** static uint16_t scs_timer = 0;
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 334               		.loc 1 86 50 view -0
 335               		.cfi_startproc
 336               		.loc 1 86 50 is_stmt 0 view .LVU71
 337 0000 EF92      		push r14
 338               	.LCFI7:
 339               		.cfi_def_cfa_offset 3
 340               		.cfi_offset 14, -2
 341 0002 FF92      		push r15
 342               	.LCFI8:
 343               		.cfi_def_cfa_offset 4
 344               		.cfi_offset 15, -3
 345 0004 0F93      		push r16
 346               	.LCFI9:
 347               		.cfi_def_cfa_offset 5
 348               		.cfi_offset 16, -4
 349 0006 1F93      		push r17
 350               	.LCFI10:
 351               		.cfi_def_cfa_offset 6
 352               		.cfi_offset 17, -5
 353 0008 CF93      		push r28
 354               	.LCFI11:
 355               		.cfi_def_cfa_offset 7
 356               		.cfi_offset 28, -6
 357 000a DF93      		push r29
 358               	.LCFI12:
 359               		.cfi_def_cfa_offset 8
 360               		.cfi_offset 29, -7
 361               	/* prologue: function */
 362               	/* frame size = 0 */
 363               	/* stack size = 6 */
 364               	.L__stack_usage = 6
 365 000c 8C01      		movw r16,r24
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  89:quantum/quantum.c ****   keypos_t key = record->event.key;
 366               		.loc 1 89 3 is_stmt 1 view .LVU72
 367               		.loc 1 89 12 is_stmt 0 view .LVU73
 368 000e FC01      		movw r30,r24
 369 0010 E080      		ld r14,Z
 370 0012 F180      		ldd r15,Z+1
 371               	.LVL31:
  90:quantum/quantum.c ****   uint16_t keycode;
 372               		.loc 1 90 3 is_stmt 1 view .LVU74
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  93:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  94:quantum/quantum.c ****     if (!disable_action_cache) {
 373               		.loc 1 94 5 view .LVU75
 374               		.loc 1 94 8 is_stmt 0 view .LVU76
 375 0014 8091 0000 		lds r24,disable_action_cache
 376               	.LVL32:
 377               		.loc 1 94 8 view .LVU77
 378 0018 8111      		cpse r24,__zero_reg__
 379 001a 00C0      		rjmp .L28
 380               	.LBB10:
  95:quantum/quantum.c ****       uint8_t layer;
 381               		.loc 1 95 7 is_stmt 1 view .LVU78
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****       if (record->event.pressed) {
 382               		.loc 1 97 7 view .LVU79
 383               		.loc 1 97 10 is_stmt 0 view .LVU80
 384 001c 8281      		ldd r24,Z+2
 385 001e 8823      		tst r24
 386 0020 01F0      		breq .L29
  98:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 387               		.loc 1 98 9 is_stmt 1 view .LVU81
 388               	.LVL33:
 389               		.loc 1 98 17 is_stmt 0 view .LVU82
 390 0022 C701      		movw r24,r14
 391 0024 0E94 0000 		call layer_switch_get_layer
 392               	.LVL34:
 393 0028 C82F      		mov r28,r24
 394               	.LVL35:
  99:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 395               		.loc 1 99 9 is_stmt 1 view .LVU83
 396 002a 682F      		mov r22,r24
 397 002c C701      		movw r24,r14
 398               	.LVL36:
 399               		.loc 1 99 9 is_stmt 0 view .LVU84
 400 002e 0E94 0000 		call update_source_layers_cache
 401               	.LVL37:
 402               	.L30:
 100:quantum/quantum.c ****       } else {
 101:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 102:quantum/quantum.c ****       }
 103:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 403               		.loc 1 103 7 is_stmt 1 view .LVU85
 404               		.loc 1 103 17 is_stmt 0 view .LVU86
 405 0032 B701      		movw r22,r14
 406 0034 8C2F      		mov r24,r28
 407               	.LVL38:
 408               	.L85:
 409               		.loc 1 103 17 view .LVU87
 410               	.LBE10:
 104:quantum/quantum.c ****     } else
 105:quantum/quantum.c ****   #endif
 106:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 411               		.loc 1 106 15 view .LVU88
 412 0036 0E94 0000 		call keymap_key_to_keycode
 413               	.LVL39:
 414 003a EC01      		movw r28,r24
 415               	.LVL40:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c ****     // This is how you use actions here
 109:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 110:quantum/quantum.c ****     //   action_t action;
 111:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 112:quantum/quantum.c ****     //   process_action(record, action);
 113:quantum/quantum.c ****     //   return false;
 114:quantum/quantum.c ****     // }
 115:quantum/quantum.c **** 
 116:quantum/quantum.c ****   if (!(
 416               		.loc 1 116 3 is_stmt 1 view .LVU89
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 417               		.loc 1 117 5 is_stmt 0 view .LVU90
 418 003c B801      		movw r22,r16
 419 003e 0E94 0000 		call process_record_kb
 420               	.LVL41:
 421               		.loc 1 117 40 view .LVU91
 422 0042 8823      		tst r24
 423 0044 01F4      		brne .+2
 424 0046 00C0      		rjmp .L33
 118:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 119:quantum/quantum.c ****     process_midi(keycode, record) &&
 120:quantum/quantum.c ****   #endif
 121:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 122:quantum/quantum.c ****     process_music(keycode, record) &&
 123:quantum/quantum.c ****   #endif
 124:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 125:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 126:quantum/quantum.c ****   #endif
 127:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 128:quantum/quantum.c ****     process_leader(keycode, record) &&
 425               		.loc 1 128 5 discriminator 2 view .LVU92
 426 0048 B801      		movw r22,r16
 427 004a CE01      		movw r24,r28
 428 004c 0E94 0000 		call process_leader
 429               	.LVL42:
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 430               		.loc 1 117 40 discriminator 2 view .LVU93
 431 0050 8823      		tst r24
 432 0052 01F4      		brne .+2
 433 0054 00C0      		rjmp .L33
 129:quantum/quantum.c ****   #endif
 130:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 131:quantum/quantum.c ****     process_chording(keycode, record) &&
 132:quantum/quantum.c ****   #endif
 133:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 134:quantum/quantum.c ****     process_unicode(keycode, record) &&
 135:quantum/quantum.c ****   #endif
 136:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 137:quantum/quantum.c ****     process_ucis(keycode, record) &&
 138:quantum/quantum.c ****   #endif
 139:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 140:quantum/quantum.c ****     process_printer(keycode, record) &&
 141:quantum/quantum.c ****   #endif
 142:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 143:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 144:quantum/quantum.c ****   #endif
 145:quantum/quantum.c ****       true)) {
 146:quantum/quantum.c ****     return false;
 147:quantum/quantum.c ****   }
 148:quantum/quantum.c **** 
 149:quantum/quantum.c ****   // Shift / paren setup
 150:quantum/quantum.c **** 
 151:quantum/quantum.c ****   switch(keycode) {
 434               		.loc 1 151 3 is_stmt 1 view .LVU94
 435 0056 C531      		cpi r28,21
 436 0058 F0E7      		ldi r31,112
 437 005a DF07      		cpc r29,r31
 438 005c 00F4      		brsh .L35
 439 005e C230      		cpi r28,2
 440 0060 80E7      		ldi r24,112
 441 0062 D807      		cpc r29,r24
 442 0064 00F0      		brlo .+2
 443 0066 00C0      		rjmp .L36
 444 0068 C115      		cp r28,__zero_reg__
 445 006a E0E7      		ldi r30,112
 446 006c DE07      		cpc r29,r30
 447 006e 01F0      		breq .L37
 448 0070 C130      		cpi r28,1
 449 0072 D047      		sbci r29,112
 450 0074 01F0      		breq .L38
 451               	.L39:
 152:quantum/quantum.c ****     case RESET:
 153:quantum/quantum.c ****       if (record->event.pressed) {
 154:quantum/quantum.c ****         reset_keyboard();
 155:quantum/quantum.c ****       }
 156:quantum/quantum.c **** 	  return false;
 157:quantum/quantum.c ****       break;
 158:quantum/quantum.c ****     case DEBUG:
 159:quantum/quantum.c ****       if (record->event.pressed) {
 160:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 161:quantum/quantum.c ****           debug_enable = true;
 162:quantum/quantum.c ****       }
 163:quantum/quantum.c **** 	  return false;
 164:quantum/quantum.c ****       break;
 165:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 166:quantum/quantum.c **** 	case RGB_TOG:
 167:quantum/quantum.c **** 		if (record->event.pressed) {
 168:quantum/quantum.c **** 			rgblight_toggle();
 169:quantum/quantum.c ****       }
 170:quantum/quantum.c **** 	  return false;
 171:quantum/quantum.c ****       break;
 172:quantum/quantum.c **** 	case RGB_MOD:
 173:quantum/quantum.c **** 		if (record->event.pressed) {
 174:quantum/quantum.c **** 			rgblight_step();
 175:quantum/quantum.c ****       }
 176:quantum/quantum.c **** 	  return false;
 177:quantum/quantum.c ****       break;
 178:quantum/quantum.c **** 	case RGB_HUI:
 179:quantum/quantum.c **** 		if (record->event.pressed) {
 180:quantum/quantum.c **** 			rgblight_increase_hue();
 181:quantum/quantum.c ****       }
 182:quantum/quantum.c **** 	  return false;
 183:quantum/quantum.c ****       break;
 184:quantum/quantum.c **** 	case RGB_HUD:
 185:quantum/quantum.c **** 		if (record->event.pressed) {
 186:quantum/quantum.c **** 			rgblight_decrease_hue();
 187:quantum/quantum.c ****       }
 188:quantum/quantum.c **** 	  return false;
 189:quantum/quantum.c ****       break;
 190:quantum/quantum.c **** 	case RGB_SAI:
 191:quantum/quantum.c **** 		if (record->event.pressed) {
 192:quantum/quantum.c **** 			rgblight_increase_sat();
 193:quantum/quantum.c ****       }
 194:quantum/quantum.c **** 	  return false;
 195:quantum/quantum.c ****       break;
 196:quantum/quantum.c **** 	case RGB_SAD:
 197:quantum/quantum.c **** 		if (record->event.pressed) {
 198:quantum/quantum.c **** 			rgblight_decrease_sat();
 199:quantum/quantum.c ****       }
 200:quantum/quantum.c **** 	  return false;
 201:quantum/quantum.c ****       break;
 202:quantum/quantum.c **** 	case RGB_VAI:
 203:quantum/quantum.c **** 		if (record->event.pressed) {
 204:quantum/quantum.c **** 			rgblight_increase_val();
 205:quantum/quantum.c ****       }
 206:quantum/quantum.c **** 	  return false;
 207:quantum/quantum.c ****       break;
 208:quantum/quantum.c **** 	case RGB_VAD:
 209:quantum/quantum.c **** 		if (record->event.pressed) {
 210:quantum/quantum.c **** 			rgblight_decrease_val();
 211:quantum/quantum.c ****       }
 212:quantum/quantum.c **** 	  return false;
 213:quantum/quantum.c ****       break;
 214:quantum/quantum.c **** 	#endif
 215:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 216:quantum/quantum.c ****       if (record->event.pressed) {
 217:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 218:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 219:quantum/quantum.c ****             eeconfig_init();
 220:quantum/quantum.c ****         }
 221:quantum/quantum.c ****         /* keymap config */
 222:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 223:quantum/quantum.c ****         switch (keycode)
 224:quantum/quantum.c ****         {
 225:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 226:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 227:quantum/quantum.c ****             break;
 228:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 229:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 230:quantum/quantum.c ****             break;
 231:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 232:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 233:quantum/quantum.c ****             break;
 234:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 235:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 236:quantum/quantum.c ****             break;
 237:quantum/quantum.c ****           case MAGIC_NO_GUI:
 238:quantum/quantum.c ****             keymap_config.no_gui = true;
 239:quantum/quantum.c ****             break;
 240:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 241:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 244:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 247:quantum/quantum.c ****             keymap_config.nkro = true;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 251:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 252:quantum/quantum.c ****             break;
 253:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 254:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 255:quantum/quantum.c ****             break;
 256:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 257:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 258:quantum/quantum.c ****             break;
 259:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 260:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 261:quantum/quantum.c ****             break;
 262:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 263:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 264:quantum/quantum.c ****             break;
 265:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 266:quantum/quantum.c ****             keymap_config.no_gui = false;
 267:quantum/quantum.c ****             break;
 268:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 269:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 272:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 275:quantum/quantum.c ****             keymap_config.nkro = false;
 276:quantum/quantum.c ****             break;
 277:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 278:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 279:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 280:quantum/quantum.c ****             break;
 281:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 282:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 283:quantum/quantum.c ****             break;
 284:quantum/quantum.c ****           default:
 285:quantum/quantum.c ****             break;
 286:quantum/quantum.c ****         }
 287:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 288:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 289:quantum/quantum.c **** 
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****       }
 292:quantum/quantum.c ****       break;
 293:quantum/quantum.c ****     case KC_LSPO: {
 294:quantum/quantum.c ****       if (record->event.pressed) {
 295:quantum/quantum.c ****         shift_interrupted[0] = false;
 296:quantum/quantum.c ****         scs_timer = timer_read ();
 297:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 298:quantum/quantum.c ****       }
 299:quantum/quantum.c ****       else {
 300:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 301:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 302:quantum/quantum.c ****             shift_interrupted[0] = true;
 303:quantum/quantum.c ****             shift_interrupted[1] = true;
 304:quantum/quantum.c ****           }
 305:quantum/quantum.c ****         #endif
 306:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 307:quantum/quantum.c ****           register_code(LSPO_KEY);
 308:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 309:quantum/quantum.c ****         }
 310:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****       return false;
 313:quantum/quantum.c ****       // break;
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c **** 
 316:quantum/quantum.c ****     case KC_RSPC: {
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         shift_interrupted[1] = false;
 319:quantum/quantum.c ****         scs_timer = timer_read ();
 320:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 321:quantum/quantum.c ****       }
 322:quantum/quantum.c ****       else {
 323:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 324:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 325:quantum/quantum.c ****             shift_interrupted[0] = true;
 326:quantum/quantum.c ****             shift_interrupted[1] = true;
 327:quantum/quantum.c ****           }
 328:quantum/quantum.c ****         #endif
 329:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 330:quantum/quantum.c ****           register_code(RSPC_KEY);
 331:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****       return false;
 336:quantum/quantum.c ****       // break;
 337:quantum/quantum.c ****     }
 338:quantum/quantum.c ****     default: {
 339:quantum/quantum.c ****       shift_interrupted[0] = true;
 452               		.loc 1 339 7 view .LVU95
 453               		.loc 1 339 28 is_stmt 0 view .LVU96
 454 0076 81E0      		ldi r24,lo8(1)
 455 0078 8093 0000 		sts shift_interrupted,r24
 340:quantum/quantum.c ****       shift_interrupted[1] = true;
 456               		.loc 1 340 7 is_stmt 1 view .LVU97
 457               		.loc 1 340 28 is_stmt 0 view .LVU98
 458 007c 8093 0000 		sts shift_interrupted+1,r24
 341:quantum/quantum.c ****       break;
 459               		.loc 1 341 7 is_stmt 1 view .LVU99
 460               	.L42:
 342:quantum/quantum.c ****     }
 343:quantum/quantum.c ****   }
 344:quantum/quantum.c **** 
 345:quantum/quantum.c ****   return process_action_kb(record);
 461               		.loc 1 345 3 view .LVU100
 462               		.loc 1 345 10 is_stmt 0 view .LVU101
 463 0080 C801      		movw r24,r16
 464               	/* epilogue start */
 346:quantum/quantum.c **** }
 465               		.loc 1 346 1 view .LVU102
 466 0082 DF91      		pop r29
 467 0084 CF91      		pop r28
 468               	.LVL43:
 469               		.loc 1 346 1 view .LVU103
 470 0086 1F91      		pop r17
 471 0088 0F91      		pop r16
 472               	.LVL44:
 473               		.loc 1 346 1 view .LVU104
 474 008a FF90      		pop r15
 475 008c EF90      		pop r14
 476               	.LVL45:
 345:quantum/quantum.c **** }
 477               		.loc 1 345 10 view .LVU105
 478 008e 0C94 0000 		jmp process_action_kb
 479               	.LVL46:
 480               	.L29:
 481               	.LBB11:
 101:quantum/quantum.c ****       }
 482               		.loc 1 101 9 is_stmt 1 view .LVU106
 101:quantum/quantum.c ****       }
 483               		.loc 1 101 17 is_stmt 0 view .LVU107
 484 0092 C701      		movw r24,r14
 485 0094 0E94 0000 		call read_source_layers_cache
 486               	.LVL47:
 487 0098 C82F      		mov r28,r24
 488               	.LVL48:
 101:quantum/quantum.c ****       }
 489               		.loc 1 101 17 view .LVU108
 490 009a 00C0      		rjmp .L30
 491               	.LVL49:
 492               	.L28:
 101:quantum/quantum.c ****       }
 493               		.loc 1 101 17 view .LVU109
 494               	.LBE11:
 106:quantum/quantum.c **** 
 495               		.loc 1 106 5 is_stmt 1 view .LVU110
 106:quantum/quantum.c **** 
 496               		.loc 1 106 37 is_stmt 0 view .LVU111
 497 009c C701      		movw r24,r14
 498 009e 0E94 0000 		call layer_switch_get_layer
 499               	.LVL50:
 106:quantum/quantum.c **** 
 500               		.loc 1 106 15 view .LVU112
 501 00a2 B701      		movw r22,r14
 502 00a4 00C0      		rjmp .L85
 503               	.LVL51:
 504               	.L35:
 151:quantum/quantum.c ****     case RESET:
 505               		.loc 1 151 3 view .LVU113
 506 00a6 CC33      		cpi r28,60
 507 00a8 80E7      		ldi r24,112
 508 00aa D807      		cpc r29,r24
 509 00ac 01F4      		brne .+2
 510 00ae 00C0      		rjmp .L40
 511 00b0 CD33      		cpi r28,61
 512 00b2 D047      		sbci r29,112
 513 00b4 01F4      		brne .L39
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 514               		.loc 1 317 7 is_stmt 1 view .LVU114
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 515               		.loc 1 317 24 is_stmt 0 view .LVU115
 516 00b6 F801      		movw r30,r16
 517 00b8 8281      		ldd r24,Z+2
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 518               		.loc 1 317 10 view .LVU116
 519 00ba 8823      		tst r24
 520 00bc 01F4      		brne .+2
 521 00be 00C0      		rjmp .L69
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 522               		.loc 1 318 9 is_stmt 1 view .LVU117
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 523               		.loc 1 318 30 is_stmt 0 view .LVU118
 524 00c0 1092 0000 		sts shift_interrupted+1,__zero_reg__
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 525               		.loc 1 319 9 is_stmt 1 view .LVU119
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 526               		.loc 1 319 21 is_stmt 0 view .LVU120
 527 00c4 0E94 0000 		call timer_read
 528               	.LVL52:
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 529               		.loc 1 319 19 view .LVU121
 530 00c8 9093 0000 		sts scs_timer+1,r25
 531 00cc 8093 0000 		sts scs_timer,r24
 320:quantum/quantum.c ****       }
 532               		.loc 1 320 9 is_stmt 1 view .LVU122
 533 00d0 80E2      		ldi r24,lo8(32)
 534 00d2 00C0      		rjmp .L87
 535               	.L37:
 153:quantum/quantum.c ****         reset_keyboard();
 536               		.loc 1 153 7 view .LVU123
 153:quantum/quantum.c ****         reset_keyboard();
 537               		.loc 1 153 10 is_stmt 0 view .LVU124
 538 00d4 F801      		movw r30,r16
 539 00d6 8281      		ldd r24,Z+2
 540 00d8 8111      		cpse r24,__zero_reg__
 154:quantum/quantum.c ****       }
 541               		.loc 1 154 9 is_stmt 1 view .LVU125
 542 00da 0E94 0000 		call reset_keyboard
 543               	.LVL53:
 544               	.L33:
 545               		.loc 1 346 1 is_stmt 0 view .LVU126
 546 00de 80E0      		ldi r24,0
 547               	/* epilogue start */
 548 00e0 DF91      		pop r29
 549 00e2 CF91      		pop r28
 550               	.LVL54:
 551               		.loc 1 346 1 view .LVU127
 552 00e4 1F91      		pop r17
 553 00e6 0F91      		pop r16
 554               	.LVL55:
 555               		.loc 1 346 1 view .LVU128
 556 00e8 FF90      		pop r15
 557 00ea EF90      		pop r14
 558               	.LVL56:
 559               		.loc 1 346 1 view .LVU129
 560 00ec 0895      		ret
 561               	.LVL57:
 562               	.L38:
 157:quantum/quantum.c ****     case DEBUG:
 563               		.loc 1 157 7 is_stmt 1 view .LVU130
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 564               		.loc 1 159 7 view .LVU131
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 565               		.loc 1 159 10 is_stmt 0 view .LVU132
 566 00ee F801      		movw r30,r16
 567 00f0 8281      		ldd r24,Z+2
 568 00f2 8823      		tst r24
 569 00f4 01F0      		breq .L33
 160:quantum/quantum.c ****           debug_enable = true;
 570               		.loc 1 160 39 is_stmt 1 view .LVU133
 161:quantum/quantum.c ****       }
 571               		.loc 1 161 11 view .LVU134
 161:quantum/quantum.c ****       }
 572               		.loc 1 161 24 is_stmt 0 view .LVU135
 573 00f6 8091 0000 		lds r24,debug_config
 574 00fa 8160      		ori r24,lo8(1<<0)
 575 00fc 8093 0000 		sts debug_config,r24
 576 0100 00C0      		rjmp .L33
 577               	.L36:
 164:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 578               		.loc 1 164 7 is_stmt 1 view .LVU136
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 579               		.loc 1 216 7 view .LVU137
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 580               		.loc 1 216 10 is_stmt 0 view .LVU138
 581 0102 F801      		movw r30,r16
 582 0104 8281      		ldd r24,Z+2
 583 0106 8823      		tst r24
 584 0108 01F4      		brne .+2
 585 010a 00C0      		rjmp .L42
 218:quantum/quantum.c ****             eeconfig_init();
 586               		.loc 1 218 9 is_stmt 1 view .LVU139
 218:quantum/quantum.c ****             eeconfig_init();
 587               		.loc 1 218 14 is_stmt 0 view .LVU140
 588 010c 0E94 0000 		call eeconfig_is_enabled
 589               	.LVL58:
 218:quantum/quantum.c ****             eeconfig_init();
 590               		.loc 1 218 12 view .LVU141
 591 0110 8111      		cpse r24,__zero_reg__
 592 0112 00C0      		rjmp .L43
 219:quantum/quantum.c ****         }
 593               		.loc 1 219 13 is_stmt 1 view .LVU142
 594 0114 0E94 0000 		call eeconfig_init
 595               	.LVL59:
 596               	.L43:
 222:quantum/quantum.c ****         switch (keycode)
 597               		.loc 1 222 9 view .LVU143
 222:quantum/quantum.c ****         switch (keycode)
 598               		.loc 1 222 29 is_stmt 0 view .LVU144
 599 0118 0E94 0000 		call eeconfig_read_keymap
 600               	.LVL60:
 601 011c 90E0      		ldi r25,0
 602 011e 9093 0000 		sts keymap_config+1,r25
 603 0122 8093 0000 		sts keymap_config,r24
 223:quantum/quantum.c ****         {
 604               		.loc 1 223 9 is_stmt 1 view .LVU145
 605 0126 FE01      		movw r30,r28
 606 0128 E350      		subi r30,3
 607 012a F047      		sbci r31,112
 226:quantum/quantum.c ****             break;
 608               		.loc 1 226 49 is_stmt 0 view .LVU146
 609 012c 8091 0000 		lds r24,keymap_config
 610 0130 8160      		ori r24,lo8(1<<0)
 611 0132 E231      		cpi r30,18
 612 0134 F105      		cpc r31,__zero_reg__
 613 0136 00F4      		brsh .L86
 614 0138 E050      		subi r30,lo8(-(gs(.L46)))
 615 013a F040      		sbci r31,hi8(-(gs(.L46)))
 616 013c 0C94 0000 		jmp __tablejump2__
 617               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 618               		.p2align	1
 619               	.L46:
 620 0000 0000      		.word gs(.L63)
 621 0002 0000      		.word gs(.L62)
 622 0004 0000      		.word gs(.L61)
 623 0006 0000      		.word gs(.L60)
 624 0008 0000      		.word gs(.L59)
 625 000a 0000      		.word gs(.L58)
 626 000c 0000      		.word gs(.L57)
 627 000e 0000      		.word gs(.L56)
 628 0010 0000      		.word gs(.L55)
 629 0012 0000      		.word gs(.L54)
 630 0014 0000      		.word gs(.L53)
 631 0016 0000      		.word gs(.L52)
 632 0018 0000      		.word gs(.L51)
 633 001a 0000      		.word gs(.L50)
 634 001c 0000      		.word gs(.L49)
 635 001e 0000      		.word gs(.L48)
 636 0020 0000      		.word gs(.L47)
 637 0022 0000      		.word gs(.L45)
 638               		.section	.text.process_record_quantum
 639               	.L63:
 229:quantum/quantum.c ****             break;
 640               		.loc 1 229 13 is_stmt 1 view .LVU147
 229:quantum/quantum.c ****             break;
 641               		.loc 1 229 47 is_stmt 0 view .LVU148
 642 0140 8091 0000 		lds r24,keymap_config
 643 0144 8260      		ori r24,lo8(1<<1)
 644               	.L86:
 282:quantum/quantum.c ****             break;
 645               		.loc 1 282 32 view .LVU149
 646 0146 8093 0000 		sts keymap_config,r24
 283:quantum/quantum.c ****           default:
 647               		.loc 1 283 13 is_stmt 1 view .LVU150
 287:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 648               		.loc 1 287 9 view .LVU151
 649 014a 8091 0000 		lds r24,keymap_config
 650 014e 0E94 0000 		call eeconfig_update_keymap
 651               	.LVL61:
 288:quantum/quantum.c **** 
 652               		.loc 1 288 9 view .LVU152
 653 0152 0E94 0000 		call clear_keyboard
 654               	.LVL62:
 290:quantum/quantum.c ****       }
 655               		.loc 1 290 9 view .LVU153
 290:quantum/quantum.c ****       }
 656               		.loc 1 290 16 is_stmt 0 view .LVU154
 657 0156 00C0      		rjmp .L33
 658               	.L62:
 232:quantum/quantum.c ****             break;
 659               		.loc 1 232 13 is_stmt 1 view .LVU155
 232:quantum/quantum.c ****             break;
 660               		.loc 1 232 42 is_stmt 0 view .LVU156
 661 0158 8091 0000 		lds r24,keymap_config
 662 015c 8460      		ori r24,lo8(1<<2)
 663 015e 00C0      		rjmp .L86
 664               	.L61:
 235:quantum/quantum.c ****             break;
 665               		.loc 1 235 13 is_stmt 1 view .LVU157
 235:quantum/quantum.c ****             break;
 666               		.loc 1 235 42 is_stmt 0 view .LVU158
 667 0160 8091 0000 		lds r24,keymap_config
 668 0164 8860      		ori r24,lo8(1<<3)
 669 0166 00C0      		rjmp .L86
 670               	.L60:
 238:quantum/quantum.c ****             break;
 671               		.loc 1 238 13 is_stmt 1 view .LVU159
 238:quantum/quantum.c ****             break;
 672               		.loc 1 238 34 is_stmt 0 view .LVU160
 673 0168 8091 0000 		lds r24,keymap_config
 674 016c 8061      		ori r24,lo8(1<<4)
 675 016e 00C0      		rjmp .L86
 676               	.L59:
 241:quantum/quantum.c ****             break;
 677               		.loc 1 241 13 is_stmt 1 view .LVU161
 241:quantum/quantum.c ****             break;
 678               		.loc 1 241 42 is_stmt 0 view .LVU162
 679 0170 8091 0000 		lds r24,keymap_config
 680 0174 8062      		ori r24,lo8(1<<5)
 681 0176 00C0      		rjmp .L86
 682               	.L58:
 244:quantum/quantum.c ****             break;
 683               		.loc 1 244 13 is_stmt 1 view .LVU163
 244:quantum/quantum.c ****             break;
 684               		.loc 1 244 52 is_stmt 0 view .LVU164
 685 0178 8091 0000 		lds r24,keymap_config
 686 017c 8064      		ori r24,lo8(1<<6)
 687 017e 00C0      		rjmp .L86
 688               	.L57:
 247:quantum/quantum.c ****             break;
 689               		.loc 1 247 13 is_stmt 1 view .LVU165
 247:quantum/quantum.c ****             break;
 690               		.loc 1 247 32 is_stmt 0 view .LVU166
 691 0180 8091 0000 		lds r24,keymap_config
 692 0184 8068      		ori r24,lo8(1<<7)
 693 0186 00C0      		rjmp .L86
 694               	.L56:
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 695               		.loc 1 250 13 is_stmt 1 view .LVU167
 251:quantum/quantum.c ****             break;
 696               		.loc 1 251 13 view .LVU168
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 697               		.loc 1 250 42 is_stmt 0 view .LVU169
 698 0188 8091 0000 		lds r24,keymap_config
 699 018c 8C60      		ori r24,lo8(12)
 700 018e 00C0      		rjmp .L86
 701               	.L55:
 254:quantum/quantum.c ****             break;
 702               		.loc 1 254 13 is_stmt 1 view .LVU170
 254:quantum/quantum.c ****             break;
 703               		.loc 1 254 49 is_stmt 0 view .LVU171
 704 0190 8091 0000 		lds r24,keymap_config
 705 0194 8E7F      		andi r24,lo8(~(1<<0))
 706 0196 00C0      		rjmp .L86
 707               	.L54:
 257:quantum/quantum.c ****             break;
 708               		.loc 1 257 13 is_stmt 1 view .LVU172
 257:quantum/quantum.c ****             break;
 709               		.loc 1 257 47 is_stmt 0 view .LVU173
 710 0198 8091 0000 		lds r24,keymap_config
 711 019c 8D7F      		andi r24,lo8(~(1<<1))
 712 019e 00C0      		rjmp .L86
 713               	.L53:
 260:quantum/quantum.c ****             break;
 714               		.loc 1 260 13 is_stmt 1 view .LVU174
 260:quantum/quantum.c ****             break;
 715               		.loc 1 260 42 is_stmt 0 view .LVU175
 716 01a0 8091 0000 		lds r24,keymap_config
 717 01a4 8B7F      		andi r24,lo8(~(1<<2))
 718 01a6 00C0      		rjmp .L86
 719               	.L52:
 263:quantum/quantum.c ****             break;
 720               		.loc 1 263 13 is_stmt 1 view .LVU176
 263:quantum/quantum.c ****             break;
 721               		.loc 1 263 42 is_stmt 0 view .LVU177
 722 01a8 8091 0000 		lds r24,keymap_config
 723 01ac 877F      		andi r24,lo8(~(1<<3))
 724 01ae 00C0      		rjmp .L86
 725               	.L51:
 266:quantum/quantum.c ****             break;
 726               		.loc 1 266 13 is_stmt 1 view .LVU178
 266:quantum/quantum.c ****             break;
 727               		.loc 1 266 34 is_stmt 0 view .LVU179
 728 01b0 8091 0000 		lds r24,keymap_config
 729 01b4 8F7E      		andi r24,lo8(~(1<<4))
 730 01b6 00C0      		rjmp .L86
 731               	.L50:
 269:quantum/quantum.c ****             break;
 732               		.loc 1 269 13 is_stmt 1 view .LVU180
 269:quantum/quantum.c ****             break;
 733               		.loc 1 269 42 is_stmt 0 view .LVU181
 734 01b8 8091 0000 		lds r24,keymap_config
 735 01bc 8F7D      		andi r24,lo8(~(1<<5))
 736 01be 00C0      		rjmp .L86
 737               	.L49:
 272:quantum/quantum.c ****             break;
 738               		.loc 1 272 13 is_stmt 1 view .LVU182
 272:quantum/quantum.c ****             break;
 739               		.loc 1 272 52 is_stmt 0 view .LVU183
 740 01c0 8091 0000 		lds r24,keymap_config
 741 01c4 8F7B      		andi r24,lo8(~(1<<6))
 742 01c6 00C0      		rjmp .L86
 743               	.L48:
 275:quantum/quantum.c ****             break;
 744               		.loc 1 275 13 is_stmt 1 view .LVU184
 275:quantum/quantum.c ****             break;
 745               		.loc 1 275 32 is_stmt 0 view .LVU185
 746 01c8 8091 0000 		lds r24,keymap_config
 747 01cc 8F77      		andi r24,lo8(~(1<<7))
 748 01ce 00C0      		rjmp .L86
 749               	.L47:
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 750               		.loc 1 278 13 is_stmt 1 view .LVU186
 279:quantum/quantum.c ****             break;
 751               		.loc 1 279 13 view .LVU187
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 752               		.loc 1 278 42 is_stmt 0 view .LVU188
 753 01d0 8091 0000 		lds r24,keymap_config
 754 01d4 837F      		andi r24,lo8(-13)
 755 01d6 00C0      		rjmp .L86
 756               	.L45:
 282:quantum/quantum.c ****             break;
 757               		.loc 1 282 13 is_stmt 1 view .LVU189
 282:quantum/quantum.c ****             break;
 758               		.loc 1 282 48 is_stmt 0 view .LVU190
 759 01d8 9091 0000 		lds r25,keymap_config
 282:quantum/quantum.c ****             break;
 760               		.loc 1 282 32 view .LVU191
 761 01dc 892F      		mov r24,r25
 762 01de 97FB      		bst r25,7
 763 01e0 87F9      		bld r24,7
 764 01e2 8058      		subi r24,0x80
 765 01e4 00C0      		rjmp .L86
 766               	.L40:
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 767               		.loc 1 294 7 is_stmt 1 view .LVU192
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 768               		.loc 1 294 24 is_stmt 0 view .LVU193
 769 01e6 F801      		movw r30,r16
 770 01e8 8281      		ldd r24,Z+2
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 771               		.loc 1 294 10 view .LVU194
 772 01ea 8823      		tst r24
 773 01ec 01F0      		breq .L65
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 774               		.loc 1 295 9 is_stmt 1 view .LVU195
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 775               		.loc 1 295 30 is_stmt 0 view .LVU196
 776 01ee 1092 0000 		sts shift_interrupted,__zero_reg__
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 777               		.loc 1 296 9 is_stmt 1 view .LVU197
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 778               		.loc 1 296 21 is_stmt 0 view .LVU198
 779 01f2 0E94 0000 		call timer_read
 780               	.LVL63:
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 781               		.loc 1 296 19 view .LVU199
 782 01f6 9093 0000 		sts scs_timer+1,r25
 783 01fa 8093 0000 		sts scs_timer,r24
 297:quantum/quantum.c ****       }
 784               		.loc 1 297 9 is_stmt 1 view .LVU200
 785 01fe 82E0      		ldi r24,lo8(2)
 786               	.L87:
 320:quantum/quantum.c ****       }
 787               		.loc 1 320 9 is_stmt 0 view .LVU201
 788 0200 0E94 0000 		call register_mods
 789               	.LVL64:
 790 0204 00C0      		rjmp .L33
 791               	.L65:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 792               		.loc 1 306 9 is_stmt 1 view .LVU202
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 793               		.loc 1 306 12 is_stmt 0 view .LVU203
 794 0206 8091 0000 		lds r24,shift_interrupted
 795 020a 8111      		cpse r24,__zero_reg__
 796 020c 00C0      		rjmp .L67
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 797               		.loc 1 306 38 discriminator 1 view .LVU204
 798 020e 8091 0000 		lds r24,scs_timer
 799 0212 9091 0000 		lds r25,scs_timer+1
 800 0216 0E94 0000 		call timer_elapsed
 801               	.LVL65:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 802               		.loc 1 306 35 discriminator 1 view .LVU205
 803 021a 883C      		cpi r24,-56
 804 021c 9105      		cpc r25,__zero_reg__
 805 021e 00F4      		brsh .L67
 307:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 806               		.loc 1 307 11 is_stmt 1 view .LVU206
 807 0220 86E2      		ldi r24,lo8(38)
 808 0222 0E94 0000 		call register_code
 809               	.LVL66:
 308:quantum/quantum.c ****         }
 810               		.loc 1 308 11 view .LVU207
 811 0226 86E2      		ldi r24,lo8(38)
 812 0228 0E94 0000 		call unregister_code
 813               	.LVL67:
 814               	.L67:
 310:quantum/quantum.c ****       }
 815               		.loc 1 310 9 view .LVU208
 816 022c 82E0      		ldi r24,lo8(2)
 817               	.L88:
 333:quantum/quantum.c ****       }
 818               		.loc 1 333 9 is_stmt 0 view .LVU209
 819 022e 0E94 0000 		call unregister_mods
 820               	.LVL68:
 821 0232 00C0      		rjmp .L33
 822               	.L69:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 823               		.loc 1 329 9 is_stmt 1 view .LVU210
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 824               		.loc 1 329 12 is_stmt 0 view .LVU211
 825 0234 8091 0000 		lds r24,shift_interrupted+1
 826 0238 8111      		cpse r24,__zero_reg__
 827 023a 00C0      		rjmp .L71
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 828               		.loc 1 329 38 discriminator 1 view .LVU212
 829 023c 8091 0000 		lds r24,scs_timer
 830 0240 9091 0000 		lds r25,scs_timer+1
 831 0244 0E94 0000 		call timer_elapsed
 832               	.LVL69:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 833               		.loc 1 329 35 discriminator 1 view .LVU213
 834 0248 883C      		cpi r24,-56
 835 024a 9105      		cpc r25,__zero_reg__
 836 024c 00F4      		brsh .L71
 330:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 837               		.loc 1 330 11 is_stmt 1 view .LVU214
 838 024e 87E2      		ldi r24,lo8(39)
 839 0250 0E94 0000 		call register_code
 840               	.LVL70:
 331:quantum/quantum.c ****         }
 841               		.loc 1 331 11 view .LVU215
 842 0254 87E2      		ldi r24,lo8(39)
 843 0256 0E94 0000 		call unregister_code
 844               	.LVL71:
 845               	.L71:
 333:quantum/quantum.c ****       }
 846               		.loc 1 333 9 view .LVU216
 847 025a 80E2      		ldi r24,lo8(32)
 848 025c 00C0      		rjmp .L88
 849               		.cfi_endproc
 850               	.LFE118:
 852               		.section	.text.send_string,"ax",@progbits
 853               	.global	send_string
 855               	send_string:
 856               	.LVL72:
 857               	.LFB119:
 347:quantum/quantum.c **** 
 348:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 353:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 354:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 355:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 356:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 357:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 358:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 359:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 360:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 361:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 362:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 363:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 364:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 365:quantum/quantum.c **** };
 366:quantum/quantum.c **** 
 367:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 368:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 369:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 370:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 371:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 372:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 373:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 374:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 375:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 376:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 377:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 378:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 379:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 380:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 381:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 382:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 383:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 387:quantum/quantum.c **** #if 0
 388:quantum/quantum.c **** #include "keymap_colemak.h"
 389:quantum/quantum.c **** 
 390:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 395:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 396:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 397:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 398:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 399:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 400:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 401:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 402:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 403:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 404:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 405:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 406:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 407:quantum/quantum.c **** };
 408:quantum/quantum.c **** 
 409:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 410:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 411:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 412:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 413:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 414:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 415:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 416:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 417:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 418:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 419:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 420:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 421:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 422:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 423:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 424:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 425:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 426:quantum/quantum.c **** };
 427:quantum/quantum.c **** 
 428:quantum/quantum.c **** #endif
 429:quantum/quantum.c **** 
 430:quantum/quantum.c **** void send_string(const char *str) {
 858               		.loc 1 430 35 view -0
 859               		.cfi_startproc
 860               		.loc 1 430 35 is_stmt 0 view .LVU218
 861 0000 0F93      		push r16
 862               	.LCFI13:
 863               		.cfi_def_cfa_offset 3
 864               		.cfi_offset 16, -2
 865 0002 1F93      		push r17
 866               	.LCFI14:
 867               		.cfi_def_cfa_offset 4
 868               		.cfi_offset 17, -3
 869 0004 CF93      		push r28
 870               	.LCFI15:
 871               		.cfi_def_cfa_offset 5
 872               		.cfi_offset 28, -4
 873               	/* prologue: function */
 874               	/* frame size = 0 */
 875               	/* stack size = 3 */
 876               	.L__stack_usage = 3
 877 0006 8C01      		movw r16,r24
 878               	.LVL73:
 879               	.L93:
 431:quantum/quantum.c ****     while (1) {
 880               		.loc 1 431 5 is_stmt 1 view .LVU219
 881               	.LBB12:
 432:quantum/quantum.c ****         uint8_t keycode;
 882               		.loc 1 432 9 view .LVU220
 433:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 883               		.loc 1 433 9 view .LVU221
 884               	.LBB13:
 885               		.loc 1 433 30 view .LVU222
 886               		.loc 1 433 30 view .LVU223
 887               		.loc 1 433 30 view .LVU224
 888 0008 F801      		movw r30,r16
 889               	/* #APP */
 890               	 ;  433 "quantum/quantum.c" 1
 891 000a 2491      		lpm r18, Z
 892               		
 893               	 ;  0 "" 2
 894               	.LVL74:
 895               		.loc 1 433 30 view .LVU225
 896               		.loc 1 433 30 is_stmt 0 view .LVU226
 897               	/* #NOAPP */
 898               	.LBE13:
 434:quantum/quantum.c ****         if (!ascii_code) break;
 899               		.loc 1 434 9 is_stmt 1 view .LVU227
 900               		.loc 1 434 12 is_stmt 0 view .LVU228
 901 000c 2223      		tst r18
 902 000e 01F0      		breq .L89
 435:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 903               		.loc 1 435 9 is_stmt 1 view .LVU229
 904               	.LBB14:
 905               		.loc 1 435 19 view .LVU230
 906 0010 30E0      		ldi r19,0
 907               	.LVL75:
 908               		.loc 1 435 19 view .LVU231
 909               		.loc 1 435 19 view .LVU232
 910 0012 F901      		movw r30,r18
 911 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 912 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 913               	.LVL76:
 914               		.loc 1 435 19 is_stmt 0 view .LVU233
 915               	/* #APP */
 916               	 ;  435 "quantum/quantum.c" 1
 917 0018 C491      		lpm r28, Z
 918               		
 919               	 ;  0 "" 2
 920               	.LVL77:
 921               		.loc 1 435 19 is_stmt 1 view .LVU234
 922               		.loc 1 435 19 is_stmt 0 view .LVU235
 923               	/* #NOAPP */
 924               	.LBE14:
 436:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 925               		.loc 1 436 9 is_stmt 1 view .LVU236
 926               	.LBB15:
 927               		.loc 1 436 13 view .LVU237
 928               		.loc 1 436 13 view .LVU238
 929               		.loc 1 436 13 view .LVU239
 930 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 931 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 932               	.LVL78:
 933               		.loc 1 436 13 is_stmt 0 view .LVU240
 934 001e F901      		movw r30,r18
 935               	.LVL79:
 936               		.loc 1 436 13 view .LVU241
 937               	/* #APP */
 938               	 ;  436 "quantum/quantum.c" 1
 939 0020 2491      		lpm r18, Z
 940               		
 941               	 ;  0 "" 2
 942               	.LVL80:
 943               		.loc 1 436 13 is_stmt 1 view .LVU242
 944               	/* #NOAPP */
 945               	.LBE15:
 946               		.loc 1 436 12 is_stmt 0 view .LVU243
 947 0022 2223      		tst r18
 948 0024 01F0      		breq .L91
 437:quantum/quantum.c ****             register_code(KC_LSFT);
 949               		.loc 1 437 13 is_stmt 1 view .LVU244
 950 0026 81EE      		ldi r24,lo8(-31)
 951 0028 0E94 0000 		call register_code
 952               	.LVL81:
 438:quantum/quantum.c ****             register_code(keycode);
 953               		.loc 1 438 13 view .LVU245
 954 002c 8C2F      		mov r24,r28
 955 002e 0E94 0000 		call register_code
 956               	.LVL82:
 439:quantum/quantum.c ****             unregister_code(keycode);
 957               		.loc 1 439 13 view .LVU246
 958 0032 8C2F      		mov r24,r28
 959 0034 0E94 0000 		call unregister_code
 960               	.LVL83:
 440:quantum/quantum.c ****             unregister_code(KC_LSFT);
 961               		.loc 1 440 13 view .LVU247
 962 0038 81EE      		ldi r24,lo8(-31)
 963               	.L94:
 441:quantum/quantum.c ****         }
 442:quantum/quantum.c ****         else {
 443:quantum/quantum.c ****             register_code(keycode);
 444:quantum/quantum.c ****             unregister_code(keycode);
 964               		.loc 1 444 13 is_stmt 0 view .LVU248
 965 003a 0E94 0000 		call unregister_code
 966               	.LVL84:
 445:quantum/quantum.c ****         }
 446:quantum/quantum.c ****         ++str;
 967               		.loc 1 446 9 is_stmt 1 view .LVU249
 968 003e 0F5F      		subi r16,-1
 969 0040 1F4F      		sbci r17,-1
 970               	.LVL85:
 971               		.loc 1 446 9 is_stmt 0 view .LVU250
 972               	.LBE12:
 431:quantum/quantum.c ****         uint8_t keycode;
 973               		.loc 1 431 11 is_stmt 1 view .LVU251
 431:quantum/quantum.c ****         uint8_t keycode;
 974               		.loc 1 431 15 is_stmt 0 view .LVU252
 975 0042 00C0      		rjmp .L93
 976               	.LVL86:
 977               	.L91:
 978               	.LBB16:
 443:quantum/quantum.c ****             unregister_code(keycode);
 979               		.loc 1 443 13 is_stmt 1 view .LVU253
 980 0044 8C2F      		mov r24,r28
 981 0046 0E94 0000 		call register_code
 982               	.LVL87:
 444:quantum/quantum.c ****         }
 983               		.loc 1 444 13 view .LVU254
 984 004a 8C2F      		mov r24,r28
 985 004c 00C0      		rjmp .L94
 986               	.LVL88:
 987               	.L89:
 988               	/* epilogue start */
 444:quantum/quantum.c ****         }
 989               		.loc 1 444 13 is_stmt 0 view .LVU255
 990               	.LBE16:
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c **** }
 991               		.loc 1 448 1 view .LVU256
 992 004e CF91      		pop r28
 993 0050 1F91      		pop r17
 994 0052 0F91      		pop r16
 995               	.LVL89:
 996               		.loc 1 448 1 view .LVU257
 997 0054 0895      		ret
 998               		.cfi_endproc
 999               	.LFE119:
 1001               		.section	.text.update_tri_layer,"ax",@progbits
 1002               	.global	update_tri_layer
 1004               	update_tri_layer:
 1005               	.LVL90:
 1006               	.LFB120:
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1007               		.loc 1 450 71 is_stmt 1 view -0
 1008               		.cfi_startproc
 1009               		.loc 1 450 71 is_stmt 0 view .LVU259
 1010 0000 CF92      		push r12
 1011               	.LCFI16:
 1012               		.cfi_def_cfa_offset 3
 1013               		.cfi_offset 12, -2
 1014 0002 DF92      		push r13
 1015               	.LCFI17:
 1016               		.cfi_def_cfa_offset 4
 1017               		.cfi_offset 13, -3
 1018 0004 EF92      		push r14
 1019               	.LCFI18:
 1020               		.cfi_def_cfa_offset 5
 1021               		.cfi_offset 14, -4
 1022 0006 FF92      		push r15
 1023               	.LCFI19:
 1024               		.cfi_def_cfa_offset 6
 1025               		.cfi_offset 15, -5
 1026 0008 0F93      		push r16
 1027               	.LCFI20:
 1028               		.cfi_def_cfa_offset 7
 1029               		.cfi_offset 16, -6
 1030 000a 1F93      		push r17
 1031               	.LCFI21:
 1032               		.cfi_def_cfa_offset 8
 1033               		.cfi_offset 17, -7
 1034               	/* prologue: function */
 1035               	/* frame size = 0 */
 1036               	/* stack size = 6 */
 1037               	.L__stack_usage = 6
 1038 000c 982F      		mov r25,r24
 1039 000e 842F      		mov r24,r20
 1040               	.LVL91:
 451:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1041               		.loc 1 451 3 is_stmt 1 view .LVU260
 1042 0010 01E0      		ldi r16,lo8(1)
 1043 0012 10E0      		ldi r17,0
 1044 0014 20E0      		ldi r18,0
 1045 0016 30E0      		ldi r19,0
 1046 0018 6801      		movw r12,r16
 1047 001a 7901      		movw r14,r18
 1048 001c 00C0      		rjmp 2f
 1049               		1:
 1050 001e CC0C      		lsl r12
 1051 0020 DD1C      		rol r13
 1052 0022 EE1C      		rol r14
 1053 0024 FF1C      		rol r15
 1054               		2:
 1055 0026 6A95      		dec r22
 1056 0028 02F4      		brpl 1b
 1057 002a B701      		movw r22,r14
 1058               	.LVL92:
 1059               		.loc 1 451 3 is_stmt 0 view .LVU261
 1060 002c A601      		movw r20,r12
 1061               	.LVL93:
 1062               		.loc 1 451 3 view .LVU262
 1063 002e 00C0      		rjmp 2f
 1064               		1:
 1065 0030 000F      		lsl r16
 1066 0032 111F      		rol r17
 1067 0034 221F      		rol r18
 1068 0036 331F      		rol r19
 1069               		2:
 1070 0038 9A95      		dec r25
 1071 003a 02F4      		brpl 1b
 1072 003c 402B      		or r20,r16
 1073 003e 512B      		or r21,r17
 1074 0040 622B      		or r22,r18
 1075 0042 732B      		or r23,r19
 1076               		.loc 1 451 27 view .LVU263
 1077 0044 0091 0000 		lds r16,layer_state
 1078 0048 1091 0000 		lds r17,layer_state+1
 1079 004c 2091 0000 		lds r18,layer_state+2
 1080 0050 3091 0000 		lds r19,layer_state+3
 1081 0054 0423      		and r16,r20
 1082 0056 1523      		and r17,r21
 1083 0058 2623      		and r18,r22
 1084 005a 3723      		and r19,r23
 1085 005c 4017      		cp r20,r16
 1086 005e 5107      		cpc r21,r17
 1087 0060 6207      		cpc r22,r18
 1088 0062 7307      		cpc r23,r19
 1089 0064 01F4      		brne .L96
 452:quantum/quantum.c ****     layer_on(layer3);
 1090               		.loc 1 452 5 is_stmt 1 view .LVU264
 1091               	/* epilogue start */
 453:quantum/quantum.c ****   } else {
 454:quantum/quantum.c ****     layer_off(layer3);
 455:quantum/quantum.c ****   }
 456:quantum/quantum.c **** }
 1092               		.loc 1 456 1 is_stmt 0 view .LVU265
 1093 0066 1F91      		pop r17
 1094 0068 0F91      		pop r16
 1095 006a FF90      		pop r15
 1096 006c EF90      		pop r14
 1097 006e DF90      		pop r13
 1098 0070 CF90      		pop r12
 452:quantum/quantum.c ****     layer_on(layer3);
 1099               		.loc 1 452 5 view .LVU266
 1100 0072 0C94 0000 		jmp layer_on
 1101               	.LVL94:
 1102               	.L96:
 454:quantum/quantum.c ****   }
 1103               		.loc 1 454 5 is_stmt 1 view .LVU267
 1104               	/* epilogue start */
 1105               		.loc 1 456 1 is_stmt 0 view .LVU268
 1106 0076 1F91      		pop r17
 1107 0078 0F91      		pop r16
 1108 007a FF90      		pop r15
 1109 007c EF90      		pop r14
 1110 007e DF90      		pop r13
 1111 0080 CF90      		pop r12
 454:quantum/quantum.c ****   }
 1112               		.loc 1 454 5 view .LVU269
 1113 0082 0C94 0000 		jmp layer_off
 1114               	.LVL95:
 454:quantum/quantum.c ****   }
 1115               		.loc 1 454 5 view .LVU270
 1116               		.cfi_endproc
 1117               	.LFE120:
 1119               		.section	.text.tap_random_base64,"ax",@progbits
 1120               	.global	tap_random_base64
 1122               	tap_random_base64:
 1123               	.LFB121:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void tap_random_base64(void) {
 1124               		.loc 1 458 30 is_stmt 1 view -0
 1125               		.cfi_startproc
 1126 0000 CF93      		push r28
 1127               	.LCFI22:
 1128               		.cfi_def_cfa_offset 3
 1129               		.cfi_offset 28, -2
 1130 0002 DF93      		push r29
 1131               	.LCFI23:
 1132               		.cfi_def_cfa_offset 4
 1133               		.cfi_offset 29, -3
 1134               	/* prologue: function */
 1135               	/* frame size = 0 */
 1136               	/* stack size = 2 */
 1137               	.L__stack_usage = 2
 459:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 460:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 461:quantum/quantum.c ****   #else
 462:quantum/quantum.c ****     uint8_t key = rand() % 64;
 1138               		.loc 1 462 5 view .LVU272
 1139               		.loc 1 462 19 is_stmt 0 view .LVU273
 1140 0004 0E94 0000 		call rand
 1141               	.LVL96:
 1142               		.loc 1 462 26 view .LVU274
 1143 0008 60E4      		ldi r22,lo8(64)
 1144 000a 70E0      		ldi r23,0
 1145 000c 0E94 0000 		call __divmodhi4
 1146 0010 EC01      		movw r28,r24
 1147               	.LVL97:
 463:quantum/quantum.c ****   #endif
 464:quantum/quantum.c ****   switch (key) {
 1148               		.loc 1 464 3 is_stmt 1 view .LVU275
 1149 0012 9927      		clr r25
 1150               	.LVL98:
 1151               		.loc 1 464 3 is_stmt 0 view .LVU276
 1152 0014 8E33      		cpi r24,62
 1153 0016 9105      		cpc r25,__zero_reg__
 1154 0018 04F4      		brge .L98
 1155 001a 8533      		cpi r24,53
 1156 001c 9105      		cpc r25,__zero_reg__
 1157 001e 04F4      		brge .L99
 1158 0020 8433      		cpi r24,52
 1159 0022 9105      		cpc r25,__zero_reg__
 1160 0024 01F0      		breq .L100
 1161 0026 4A97      		sbiw r24,26
 1162 0028 04F4      		brge .L101
 465:quantum/quantum.c ****     case 0 ... 25:
 466:quantum/quantum.c ****       register_code(KC_LSFT);
 1163               		.loc 1 466 7 is_stmt 1 view .LVU277
 1164 002a 81EE      		ldi r24,lo8(-31)
 1165 002c 0E94 0000 		call register_code
 1166               	.LVL99:
 467:quantum/quantum.c ****       register_code(key + KC_A);
 1167               		.loc 1 467 7 view .LVU278
 1168 0030 CC5F      		subi r28,lo8(-(4))
 1169               	.LVL100:
 1170               		.loc 1 467 7 is_stmt 0 view .LVU279
 1171 0032 8C2F      		mov r24,r28
 1172 0034 0E94 0000 		call register_code
 1173               	.LVL101:
 468:quantum/quantum.c ****       unregister_code(key + KC_A);
 1174               		.loc 1 468 7 is_stmt 1 view .LVU280
 1175 0038 8C2F      		mov r24,r28
 1176               	.L107:
 469:quantum/quantum.c ****       unregister_code(KC_LSFT);
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 26 ... 51:
 472:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 473:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 474:quantum/quantum.c ****       break;
 475:quantum/quantum.c ****     case 52:
 476:quantum/quantum.c ****       register_code(KC_0);
 477:quantum/quantum.c ****       unregister_code(KC_0);
 478:quantum/quantum.c ****       break;
 479:quantum/quantum.c ****     case 53 ... 61:
 480:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 481:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 482:quantum/quantum.c ****       break;
 483:quantum/quantum.c ****     case 62:
 484:quantum/quantum.c ****       register_code(KC_LSFT);
 485:quantum/quantum.c ****       register_code(KC_EQL);
 486:quantum/quantum.c ****       unregister_code(KC_EQL);
 1177               		.loc 1 486 7 is_stmt 0 view .LVU281
 1178 003a 0E94 0000 		call unregister_code
 1179               	.LVL102:
 487:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1180               		.loc 1 487 7 is_stmt 1 view .LVU282
 1181 003e 81EE      		ldi r24,lo8(-31)
 1182 0040 00C0      		rjmp .L106
 1183               	.LVL103:
 1184               	.L98:
 464:quantum/quantum.c ****     case 0 ... 25:
 1185               		.loc 1 464 3 is_stmt 0 view .LVU283
 1186 0042 8E33      		cpi r24,62
 1187 0044 9105      		cpc r25,__zero_reg__
 1188 0046 01F0      		breq .L102
 1189 0048 CF97      		sbiw r24,63
 1190 004a 01F0      		breq .L103
 1191               	/* epilogue start */
 488:quantum/quantum.c ****       break;
 489:quantum/quantum.c ****     case 63:
 490:quantum/quantum.c ****       register_code(KC_SLSH);
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 492:quantum/quantum.c ****       break;
 493:quantum/quantum.c ****   }
 494:quantum/quantum.c **** }
 1192               		.loc 1 494 1 view .LVU284
 1193 004c DF91      		pop r29
 1194 004e CF91      		pop r28
 1195               	.LVL104:
 1196               		.loc 1 494 1 view .LVU285
 1197 0050 0895      		ret
 1198               	.LVL105:
 1199               	.L101:
 472:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 1200               		.loc 1 472 7 is_stmt 1 view .LVU286
 1201 0052 C651      		subi r28,lo8(-(-22))
 1202               	.LVL106:
 1203               	.L108:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1204               		.loc 1 480 7 is_stmt 0 view .LVU287
 1205 0054 8C2F      		mov r24,r28
 1206 0056 0E94 0000 		call register_code
 1207               	.LVL107:
 481:quantum/quantum.c ****       break;
 1208               		.loc 1 481 7 is_stmt 1 view .LVU288
 1209 005a 8C2F      		mov r24,r28
 1210 005c 00C0      		rjmp .L106
 1211               	.LVL108:
 1212               	.L100:
 476:quantum/quantum.c ****       unregister_code(KC_0);
 1213               		.loc 1 476 7 view .LVU289
 1214 005e 87E2      		ldi r24,lo8(39)
 1215 0060 0E94 0000 		call register_code
 1216               	.LVL109:
 477:quantum/quantum.c ****       break;
 1217               		.loc 1 477 7 view .LVU290
 1218 0064 87E2      		ldi r24,lo8(39)
 1219               	.LVL110:
 1220               	.L106:
 1221               	/* epilogue start */
 1222               		.loc 1 494 1 is_stmt 0 view .LVU291
 1223 0066 DF91      		pop r29
 1224 0068 CF91      		pop r28
 491:quantum/quantum.c ****       break;
 1225               		.loc 1 491 7 view .LVU292
 1226 006a 0C94 0000 		jmp unregister_code
 1227               	.LVL111:
 1228               	.L99:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1229               		.loc 1 480 7 is_stmt 1 view .LVU293
 1230 006e C751      		subi r28,lo8(-(-23))
 1231               	.LVL112:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1232               		.loc 1 480 7 is_stmt 0 view .LVU294
 1233 0070 00C0      		rjmp .L108
 1234               	.LVL113:
 1235               	.L102:
 484:quantum/quantum.c ****       register_code(KC_EQL);
 1236               		.loc 1 484 7 is_stmt 1 view .LVU295
 1237 0072 81EE      		ldi r24,lo8(-31)
 1238 0074 0E94 0000 		call register_code
 1239               	.LVL114:
 485:quantum/quantum.c ****       unregister_code(KC_EQL);
 1240               		.loc 1 485 7 view .LVU296
 1241 0078 8EE2      		ldi r24,lo8(46)
 1242 007a 0E94 0000 		call register_code
 1243               	.LVL115:
 486:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1244               		.loc 1 486 7 view .LVU297
 1245 007e 8EE2      		ldi r24,lo8(46)
 1246 0080 00C0      		rjmp .L107
 1247               	.L103:
 490:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1248               		.loc 1 490 7 view .LVU298
 1249 0082 88E3      		ldi r24,lo8(56)
 1250 0084 0E94 0000 		call register_code
 1251               	.LVL116:
 491:quantum/quantum.c ****       break;
 1252               		.loc 1 491 7 view .LVU299
 1253 0088 88E3      		ldi r24,lo8(56)
 1254 008a 00C0      		rjmp .L106
 1255               		.cfi_endproc
 1256               	.LFE121:
 1258               		.section	.text.matrix_init_quantum,"ax",@progbits
 1259               	.global	matrix_init_quantum
 1261               	matrix_init_quantum:
 1262               	.LFB122:
 495:quantum/quantum.c **** 
 496:quantum/quantum.c **** void matrix_init_quantum() {
 1263               		.loc 1 496 28 view -0
 1264               		.cfi_startproc
 1265               	/* prologue: function */
 1266               	/* frame size = 0 */
 1267               	/* stack size = 0 */
 1268               	.L__stack_usage = 0
 497:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 498:quantum/quantum.c ****     backlight_init_ports();
 499:quantum/quantum.c ****   #endif
 500:quantum/quantum.c ****   matrix_init_kb();
 1269               		.loc 1 500 3 view .LVU301
 1270 0000 0C94 0000 		jmp matrix_init_kb
 1271               	.LVL117:
 1272               		.cfi_endproc
 1273               	.LFE122:
 1275               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1276               	.global	matrix_scan_quantum
 1278               	matrix_scan_quantum:
 1279               	.LFB123:
 501:quantum/quantum.c **** }
 502:quantum/quantum.c **** 
 503:quantum/quantum.c **** void matrix_scan_quantum() {
 1280               		.loc 1 503 28 view -0
 1281               		.cfi_startproc
 1282               	/* prologue: function */
 1283               	/* frame size = 0 */
 1284               	/* stack size = 0 */
 1285               	.L__stack_usage = 0
 504:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 505:quantum/quantum.c ****     matrix_scan_music();
 506:quantum/quantum.c ****   #endif
 507:quantum/quantum.c **** 
 508:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 509:quantum/quantum.c ****     matrix_scan_tap_dance();
 510:quantum/quantum.c ****   #endif
 511:quantum/quantum.c ****   matrix_scan_kb();
 1286               		.loc 1 511 3 view .LVU303
 1287 0000 0C94 0000 		jmp matrix_scan_kb
 1288               	.LVL118:
 1289               		.cfi_endproc
 1290               	.LFE123:
 1292               		.section	.text.backlight_init_ports,"ax",@progbits
 1293               		.weak	backlight_init_ports
 1295               	backlight_init_ports:
 1296               	.LFB142:
 1297               		.cfi_startproc
 1298               	/* prologue: function */
 1299               	/* frame size = 0 */
 1300               	/* stack size = 0 */
 1301               	.L__stack_usage = 0
 1302               	/* epilogue start */
 1303 0000 0895      		ret
 1304               		.cfi_endproc
 1305               	.LFE142:
 1307               		.section	.text.send_nibble,"ax",@progbits
 1308               	.global	send_nibble
 1310               	send_nibble:
 1311               	.LVL119:
 1312               	.LFB129:
 512:quantum/quantum.c **** }
 513:quantum/quantum.c **** 
 514:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 515:quantum/quantum.c **** 
 516:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 517:quantum/quantum.c **** 
 518:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 519:quantum/quantum.c **** #  define COM1x1 COM1C1
 520:quantum/quantum.c **** #  define OCR1x  OCR1C
 521:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 522:quantum/quantum.c **** #  define COM1x1 COM1B1
 523:quantum/quantum.c **** #  define OCR1x  OCR1B
 524:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 525:quantum/quantum.c **** #  define COM1x1 COM1A1
 526:quantum/quantum.c **** #  define OCR1x  OCR1A
 527:quantum/quantum.c **** #else
 528:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 529:quantum/quantum.c **** #endif
 530:quantum/quantum.c **** 
 531:quantum/quantum.c **** __attribute__ ((weak))
 532:quantum/quantum.c **** void backlight_init_ports(void)
 533:quantum/quantum.c **** {
 534:quantum/quantum.c **** 
 535:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 536:quantum/quantum.c ****   // DDRx |= n
 537:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 538:quantum/quantum.c ****   // PORTx &= ~n
 539:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 540:quantum/quantum.c **** 
 541:quantum/quantum.c ****   // Use full 16-bit resolution.
 542:quantum/quantum.c ****   ICR1 = 0xFFFF;
 543:quantum/quantum.c **** 
 544:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 545:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 546:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 547:quantum/quantum.c **** 
 548:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 549:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 550:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 551:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 552:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 553:quantum/quantum.c **** 
 554:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 555:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 556:quantum/quantum.c **** 
 557:quantum/quantum.c ****   backlight_init();
 558:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 559:quantum/quantum.c ****     breathing_defaults();
 560:quantum/quantum.c ****   #endif
 561:quantum/quantum.c **** }
 562:quantum/quantum.c **** 
 563:quantum/quantum.c **** __attribute__ ((weak))
 564:quantum/quantum.c **** void backlight_set(uint8_t level)
 565:quantum/quantum.c **** {
 566:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 567:quantum/quantum.c ****   // PORTx &= ~n
 568:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 569:quantum/quantum.c **** 
 570:quantum/quantum.c ****   if ( level == 0 ) {
 571:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 572:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 573:quantum/quantum.c ****     OCR1x = 0x0;
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 575:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 576:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 577:quantum/quantum.c ****     // Set the brightness
 578:quantum/quantum.c ****     OCR1x = 0xFFFF;
 579:quantum/quantum.c ****   } else {
 580:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 581:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 582:quantum/quantum.c ****     // Set the brightness
 583:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** 
 586:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 587:quantum/quantum.c ****     breathing_intensity_default();
 588:quantum/quantum.c ****   #endif
 589:quantum/quantum.c **** }
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** 
 592:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 595:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 596:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** static uint8_t breath_intensity;
 599:quantum/quantum.c **** static uint8_t breath_speed;
 600:quantum/quantum.c **** static uint16_t breathing_index;
 601:quantum/quantum.c **** static uint8_t breathing_halt;
 602:quantum/quantum.c **** 
 603:quantum/quantum.c **** void breathing_enable(void)
 604:quantum/quantum.c **** {
 605:quantum/quantum.c ****     if (get_backlight_level() == 0)
 606:quantum/quantum.c ****     {
 607:quantum/quantum.c ****         breathing_index = 0;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c ****     else
 610:quantum/quantum.c ****     {
 611:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 612:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 613:quantum/quantum.c ****     }
 614:quantum/quantum.c **** 
 615:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 616:quantum/quantum.c **** 
 617:quantum/quantum.c ****     // Enable breathing interrupt
 618:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 619:quantum/quantum.c **** }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c **** void breathing_pulse(void)
 622:quantum/quantum.c **** {
 623:quantum/quantum.c ****     if (get_backlight_level() == 0)
 624:quantum/quantum.c ****     {
 625:quantum/quantum.c ****         breathing_index = 0;
 626:quantum/quantum.c ****     }
 627:quantum/quantum.c ****     else
 628:quantum/quantum.c ****     {
 629:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 630:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 631:quantum/quantum.c ****     }
 632:quantum/quantum.c **** 
 633:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 634:quantum/quantum.c **** 
 635:quantum/quantum.c ****     // Enable breathing interrupt
 636:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 637:quantum/quantum.c **** }
 638:quantum/quantum.c **** 
 639:quantum/quantum.c **** void breathing_disable(void)
 640:quantum/quantum.c **** {
 641:quantum/quantum.c ****     // Disable breathing interrupt
 642:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 643:quantum/quantum.c ****     backlight_set(get_backlight_level());
 644:quantum/quantum.c **** }
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** void breathing_self_disable(void)
 647:quantum/quantum.c **** {
 648:quantum/quantum.c ****     if (get_backlight_level() == 0)
 649:quantum/quantum.c ****     {
 650:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 651:quantum/quantum.c ****     }
 652:quantum/quantum.c ****     else
 653:quantum/quantum.c ****     {
 654:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 655:quantum/quantum.c ****     }
 656:quantum/quantum.c **** 
 657:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 658:quantum/quantum.c **** }
 659:quantum/quantum.c **** 
 660:quantum/quantum.c **** void breathing_toggle(void)
 661:quantum/quantum.c **** {
 662:quantum/quantum.c ****     if (!is_breathing())
 663:quantum/quantum.c ****     {
 664:quantum/quantum.c ****         if (get_backlight_level() == 0)
 665:quantum/quantum.c ****         {
 666:quantum/quantum.c ****             breathing_index = 0;
 667:quantum/quantum.c ****         }
 668:quantum/quantum.c ****         else
 669:quantum/quantum.c ****         {
 670:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 671:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 672:quantum/quantum.c ****         }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c ****     // Toggle breathing interrupt
 678:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 679:quantum/quantum.c **** 
 680:quantum/quantum.c ****     // Restore backlight level
 681:quantum/quantum.c ****     if (!is_breathing())
 682:quantum/quantum.c ****     {
 683:quantum/quantum.c ****         backlight_set(get_backlight_level());
 684:quantum/quantum.c ****     }
 685:quantum/quantum.c **** }
 686:quantum/quantum.c **** 
 687:quantum/quantum.c **** bool is_breathing(void)
 688:quantum/quantum.c **** {
 689:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 690:quantum/quantum.c **** }
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void breathing_intensity_default(void)
 693:quantum/quantum.c **** {
 694:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 695:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 696:quantum/quantum.c **** }
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 699:quantum/quantum.c **** {
 700:quantum/quantum.c ****     breath_intensity = value;
 701:quantum/quantum.c **** }
 702:quantum/quantum.c **** 
 703:quantum/quantum.c **** void breathing_speed_default(void)
 704:quantum/quantum.c **** {
 705:quantum/quantum.c ****     breath_speed = 4;
 706:quantum/quantum.c **** }
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 709:quantum/quantum.c **** {
 710:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 711:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****     if (is_breathing_now)
 714:quantum/quantum.c ****     {
 715:quantum/quantum.c ****         // Disable breathing interrupt
 716:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 717:quantum/quantum.c ****     }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     breath_speed = value;
 720:quantum/quantum.c **** 
 721:quantum/quantum.c ****     if (is_breathing_now)
 722:quantum/quantum.c ****     {
 723:quantum/quantum.c ****         // Adjust index to account for new speed
 724:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 725:quantum/quantum.c **** 
 726:quantum/quantum.c ****         // Enable breathing interrupt
 727:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 728:quantum/quantum.c ****     }
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(0);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 747:quantum/quantum.c ****     {
 748:quantum/quantum.c ****         breathing_speed_set(10);
 749:quantum/quantum.c ****     }
 750:quantum/quantum.c ****     else
 751:quantum/quantum.c ****     {
 752:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 753:quantum/quantum.c ****     }
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void breathing_defaults(void)
 757:quantum/quantum.c **** {
 758:quantum/quantum.c ****     breathing_intensity_default();
 759:quantum/quantum.c ****     breathing_speed_default();
 760:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 764:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 765:quantum/quantum.c ****  *
 766:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 767:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 768:quantum/quantum.c ****  */
 769:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 770:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 771:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 772:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 773:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 777:quantum/quantum.c **** {
 778:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** 
 781:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 784:quantum/quantum.c ****     {
 785:quantum/quantum.c ****         // Disable breathing interrupt
 786:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 787:quantum/quantum.c ****     }
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** 
 794:quantum/quantum.c **** 
 795:quantum/quantum.c **** #endif // breathing
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** #else // backlight
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** __attribute__ ((weak))
 800:quantum/quantum.c **** void backlight_init_ports(void)
 801:quantum/quantum.c **** {
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** }
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** void backlight_set(uint8_t level)
 807:quantum/quantum.c **** {
 808:quantum/quantum.c **** 
 809:quantum/quantum.c **** }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c **** #endif // backlight
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** // Functions for spitting out values
 815:quantum/quantum.c **** //
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 818:quantum/quantum.c ****     uint16_t word = (number >> 16);
 819:quantum/quantum.c ****     send_word(word);
 820:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 821:quantum/quantum.c **** }
 822:quantum/quantum.c **** 
 823:quantum/quantum.c **** void send_word(uint16_t number) {
 824:quantum/quantum.c ****     uint8_t byte = number >> 8;
 825:quantum/quantum.c ****     send_byte(byte);
 826:quantum/quantum.c ****     send_byte(number & 0xFF);
 827:quantum/quantum.c **** }
 828:quantum/quantum.c **** 
 829:quantum/quantum.c **** void send_byte(uint8_t number) {
 830:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 831:quantum/quantum.c ****     send_nibble(nibble);
 832:quantum/quantum.c ****     send_nibble(number & 0xF);
 833:quantum/quantum.c **** }
 834:quantum/quantum.c **** 
 835:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1313               		.loc 1 835 34 view -0
 1314               		.cfi_startproc
 1315               		.loc 1 835 34 is_stmt 0 view .LVU305
 1316 0000 CF93      		push r28
 1317               	.LCFI24:
 1318               		.cfi_def_cfa_offset 3
 1319               		.cfi_offset 28, -2
 1320               	/* prologue: function */
 1321               	/* frame size = 0 */
 1322               	/* stack size = 1 */
 1323               	.L__stack_usage = 1
 1324 0002 C82F      		mov r28,r24
 836:quantum/quantum.c ****     switch (number) {
 1325               		.loc 1 836 5 is_stmt 1 view .LVU306
 1326 0004 8A30      		cpi r24,lo8(10)
 1327 0006 00F4      		brsh .L113
 1328 0008 8823      		tst r24
 1329 000a 01F0      		breq .L118
 837:quantum/quantum.c ****         case 0:
 838:quantum/quantum.c ****             register_code(KC_0);
 839:quantum/quantum.c ****             unregister_code(KC_0);
 840:quantum/quantum.c ****             break;
 841:quantum/quantum.c ****         case 1 ... 9:
 842:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1330               		.loc 1 842 13 view .LVU307
 1331 000c C35E      		subi r28,lo8(-(29))
 1332               	.L121:
 843:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 844:quantum/quantum.c ****             break;
 845:quantum/quantum.c ****         case 0xA ... 0xF:
 846:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1333               		.loc 1 846 13 is_stmt 0 view .LVU308
 1334 000e 8C2F      		mov r24,r28
 1335               	.LVL120:
 1336               		.loc 1 846 13 view .LVU309
 1337 0010 0E94 0000 		call register_code
 1338               	.LVL121:
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1339               		.loc 1 847 13 is_stmt 1 view .LVU310
 1340 0014 8C2F      		mov r24,r28
 1341 0016 00C0      		rjmp .L120
 1342               	.LVL122:
 1343               	.L113:
 836:quantum/quantum.c ****         case 0:
 1344               		.loc 1 836 5 is_stmt 0 view .LVU311
 1345 0018 96EF      		ldi r25,lo8(-10)
 1346 001a 980F      		add r25,r24
 846:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1347               		.loc 1 846 13 view .LVU312
 1348 001c C650      		subi r28,lo8(-(-6))
 836:quantum/quantum.c ****         case 0:
 1349               		.loc 1 836 5 view .LVU313
 1350 001e 9630      		cpi r25,lo8(6)
 1351 0020 00F0      		brlo .L121
 1352               	/* epilogue start */
 848:quantum/quantum.c ****             break;
 849:quantum/quantum.c ****     }
 850:quantum/quantum.c **** }
 1353               		.loc 1 850 1 view .LVU314
 1354 0022 CF91      		pop r28
 1355 0024 0895      		ret
 1356               	.L118:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1357               		.loc 1 838 13 is_stmt 1 view .LVU315
 1358 0026 87E2      		ldi r24,lo8(39)
 1359               	.LVL123:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1360               		.loc 1 838 13 is_stmt 0 view .LVU316
 1361 0028 0E94 0000 		call register_code
 1362               	.LVL124:
 839:quantum/quantum.c ****             break;
 1363               		.loc 1 839 13 is_stmt 1 view .LVU317
 1364 002c 87E2      		ldi r24,lo8(39)
 1365               	.LVL125:
 1366               	.L120:
 1367               	/* epilogue start */
 1368               		.loc 1 850 1 is_stmt 0 view .LVU318
 1369 002e CF91      		pop r28
 847:quantum/quantum.c ****             break;
 1370               		.loc 1 847 13 view .LVU319
 1371 0030 0C94 0000 		jmp unregister_code
 1372               	.LVL126:
 1373               		.cfi_endproc
 1374               	.LFE129:
 1376               		.section	.text.send_byte,"ax",@progbits
 1377               	.global	send_byte
 1379               	send_byte:
 1380               	.LVL127:
 1381               	.LFB128:
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1382               		.loc 1 829 32 is_stmt 1 view -0
 1383               		.cfi_startproc
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1384               		.loc 1 829 32 is_stmt 0 view .LVU321
 1385 0000 CF93      		push r28
 1386               	.LCFI25:
 1387               		.cfi_def_cfa_offset 3
 1388               		.cfi_offset 28, -2
 1389               	/* prologue: function */
 1390               	/* frame size = 0 */
 1391               	/* stack size = 1 */
 1392               	.L__stack_usage = 1
 1393 0002 C82F      		mov r28,r24
 830:quantum/quantum.c ****     send_nibble(nibble);
 1394               		.loc 1 830 5 is_stmt 1 view .LVU322
 1395               	.LVL128:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1396               		.loc 1 831 5 view .LVU323
 1397 0004 8295      		swap r24
 1398               	.LVL129:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1399               		.loc 1 831 5 is_stmt 0 view .LVU324
 1400 0006 8F70      		andi r24,lo8(15)
 1401 0008 0E94 0000 		call send_nibble
 1402               	.LVL130:
 832:quantum/quantum.c **** }
 1403               		.loc 1 832 5 is_stmt 1 view .LVU325
 1404 000c 8C2F      		mov r24,r28
 1405 000e 8F70      		andi r24,lo8(15)
 1406               	/* epilogue start */
 833:quantum/quantum.c **** 
 1407               		.loc 1 833 1 is_stmt 0 view .LVU326
 1408 0010 CF91      		pop r28
 1409               	.LVL131:
 832:quantum/quantum.c **** }
 1410               		.loc 1 832 5 view .LVU327
 1411 0012 0C94 0000 		jmp send_nibble
 1412               	.LVL132:
 1413               		.cfi_endproc
 1414               	.LFE128:
 1416               		.section	.text.send_word,"ax",@progbits
 1417               	.global	send_word
 1419               	send_word:
 1420               	.LVL133:
 1421               	.LFB127:
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1422               		.loc 1 823 33 is_stmt 1 view -0
 1423               		.cfi_startproc
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1424               		.loc 1 823 33 is_stmt 0 view .LVU329
 1425 0000 CF93      		push r28
 1426               	.LCFI26:
 1427               		.cfi_def_cfa_offset 3
 1428               		.cfi_offset 28, -2
 1429               	/* prologue: function */
 1430               	/* frame size = 0 */
 1431               	/* stack size = 1 */
 1432               	.L__stack_usage = 1
 1433 0002 C82F      		mov r28,r24
 1434 0004 892F      		mov r24,r25
 1435               	.LVL134:
 824:quantum/quantum.c ****     send_byte(byte);
 1436               		.loc 1 824 5 is_stmt 1 view .LVU330
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1437               		.loc 1 825 5 view .LVU331
 1438 0006 0E94 0000 		call send_byte
 1439               	.LVL135:
 826:quantum/quantum.c **** }
 1440               		.loc 1 826 5 view .LVU332
 1441 000a 8C2F      		mov r24,r28
 1442               	/* epilogue start */
 827:quantum/quantum.c **** 
 1443               		.loc 1 827 1 is_stmt 0 view .LVU333
 1444 000c CF91      		pop r28
 826:quantum/quantum.c **** }
 1445               		.loc 1 826 5 view .LVU334
 1446 000e 0C94 0000 		jmp send_byte
 1447               	.LVL136:
 1448               		.cfi_endproc
 1449               	.LFE127:
 1451               		.section	.text.send_dword,"ax",@progbits
 1452               	.global	send_dword
 1454               	send_dword:
 1455               	.LVL137:
 1456               	.LFB126:
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1457               		.loc 1 817 34 is_stmt 1 view -0
 1458               		.cfi_startproc
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1459               		.loc 1 817 34 is_stmt 0 view .LVU336
 1460 0000 CF93      		push r28
 1461               	.LCFI27:
 1462               		.cfi_def_cfa_offset 3
 1463               		.cfi_offset 28, -2
 1464 0002 DF93      		push r29
 1465               	.LCFI28:
 1466               		.cfi_def_cfa_offset 4
 1467               		.cfi_offset 29, -3
 1468               	/* prologue: function */
 1469               	/* frame size = 0 */
 1470               	/* stack size = 2 */
 1471               	.L__stack_usage = 2
 1472 0004 D62F      		mov r29,r22
 1473 0006 C72F      		mov r28,r23
 818:quantum/quantum.c ****     send_word(word);
 1474               		.loc 1 818 5 is_stmt 1 view .LVU337
 1475               	.LVL138:
 819:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1476               		.loc 1 819 5 view .LVU338
 1477 0008 0E94 0000 		call send_word
 1478               	.LVL139:
 820:quantum/quantum.c **** }
 1479               		.loc 1 820 5 view .LVU339
 1480 000c 8D2F      		mov r24,r29
 1481 000e 9C2F      		mov r25,r28
 1482               	/* epilogue start */
 821:quantum/quantum.c **** 
 1483               		.loc 1 821 1 is_stmt 0 view .LVU340
 1484 0010 DF91      		pop r29
 821:quantum/quantum.c **** 
 1485               		.loc 1 821 1 view .LVU341
 1486 0012 CF91      		pop r28
 820:quantum/quantum.c **** }
 1487               		.loc 1 820 5 view .LVU342
 1488 0014 0C94 0000 		jmp send_word
 1489               	.LVL140:
 820:quantum/quantum.c **** }
 1490               		.loc 1 820 5 view .LVU343
 1491               		.cfi_endproc
 1492               	.LFE126:
 1494               		.section	.text.api_send_unicode,"ax",@progbits
 1495               	.global	api_send_unicode
 1497               	api_send_unicode:
 1498               	.LVL141:
 1499               	.LFB130:
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1500               		.loc 1 852 41 is_stmt 1 view -0
 1501               		.cfi_startproc
 1502               	/* prologue: function */
 1503               	/* frame size = 0 */
 1504               	/* stack size = 0 */
 1505               	.L__stack_usage = 0
 853:quantum/quantum.c **** #ifdef API_ENABLE
 854:quantum/quantum.c ****     uint8_t chunk[4];
 855:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 856:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 857:quantum/quantum.c **** #endif
 858:quantum/quantum.c **** }
 1506               		.loc 1 858 1 view .LVU345
 1507               	/* epilogue start */
 1508 0000 0895      		ret
 1509               		.cfi_endproc
 1510               	.LFE130:
 1512               		.section	.text.led_set_user,"ax",@progbits
 1513               		.weak	led_set_user
 1515               	led_set_user:
 1516               	.LVL142:
 1517               	.LFB131:
 859:quantum/quantum.c **** 
 860:quantum/quantum.c **** __attribute__ ((weak))
 861:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1518               		.loc 1 861 36 view -0
 1519               		.cfi_startproc
 1520               	/* prologue: function */
 1521               	/* frame size = 0 */
 1522               	/* stack size = 0 */
 1523               	.L__stack_usage = 0
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** }
 1524               		.loc 1 863 1 view .LVU347
 1525               	/* epilogue start */
 1526 0000 0895      		ret
 1527               		.cfi_endproc
 1528               	.LFE131:
 1530               		.set	led_set_user.localalias,led_set_user
 1531               		.section	.text.backlight_set,"ax",@progbits
 1532               		.weak	backlight_set
 1534               	backlight_set:
 1535               	.LFB144:
 1536               		.cfi_startproc
 1537               	/* prologue: function */
 1538               	/* frame size = 0 */
 1539               	/* stack size = 0 */
 1540               	.L__stack_usage = 0
 1541               	/* epilogue start */
 1542 0000 0895      		ret
 1543               		.cfi_endproc
 1544               	.LFE144:
 1546               		.section	.text.led_set_kb,"ax",@progbits
 1547               		.weak	led_set_kb
 1549               	led_set_kb:
 1550               	.LVL143:
 1551               	.LFB132:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** __attribute__ ((weak))
 866:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1552               		.loc 1 866 34 view -0
 1553               		.cfi_startproc
 1554               	/* prologue: function */
 1555               	/* frame size = 0 */
 1556               	/* stack size = 0 */
 1557               	.L__stack_usage = 0
 867:quantum/quantum.c ****     led_set_user(usb_led);
 1558               		.loc 1 867 5 view .LVU349
 1559 0000 0C94 0000 		jmp led_set_user
 1560               	.LVL144:
 1561               		.loc 1 867 5 is_stmt 0 view .LVU350
 1562               		.cfi_endproc
 1563               	.LFE132:
 1565               		.section	.text.led_init_ports,"ax",@progbits
 1566               		.weak	led_init_ports
 1568               	led_init_ports:
 1569               	.LFB133:
 868:quantum/quantum.c **** }
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** __attribute__ ((weak))
 871:quantum/quantum.c **** void led_init_ports(void)
 872:quantum/quantum.c **** {
 1570               		.loc 1 872 1 is_stmt 1 view -0
 1571               		.cfi_startproc
 1572               	/* prologue: function */
 1573               	/* frame size = 0 */
 1574               	/* stack size = 0 */
 1575               	.L__stack_usage = 0
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** }
 1576               		.loc 1 874 1 view .LVU352
 1577               	/* epilogue start */
 1578 0000 0895      		ret
 1579               		.cfi_endproc
 1580               	.LFE133:
 1582               		.section	.text.led_set,"ax",@progbits
 1583               		.weak	led_set
 1585               	led_set:
 1586               	.LVL145:
 1587               	.LFB134:
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** __attribute__ ((weak))
 877:quantum/quantum.c **** void led_set(uint8_t usb_led)
 878:quantum/quantum.c **** {
 1588               		.loc 1 878 1 view -0
 1589               		.cfi_startproc
 1590               	/* prologue: function */
 1591               	/* frame size = 0 */
 1592               	/* stack size = 0 */
 1593               	.L__stack_usage = 0
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   // Example LED Code
 881:quantum/quantum.c ****   //
 882:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 883:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 884:quantum/quantum.c ****     // {
 885:quantum/quantum.c ****     //     // Output high.
 886:quantum/quantum.c ****     //     DDRE |= (1<<6);
 887:quantum/quantum.c ****     //     PORTE |= (1<<6);
 888:quantum/quantum.c ****     // }
 889:quantum/quantum.c ****     // else
 890:quantum/quantum.c ****     // {
 891:quantum/quantum.c ****     //     // Output low.
 892:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 893:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 894:quantum/quantum.c ****     // }
 895:quantum/quantum.c **** 
 896:quantum/quantum.c ****   led_set_kb(usb_led);
 1594               		.loc 1 896 3 view .LVU354
 1595 0000 0C94 0000 		jmp led_set_kb
 1596               	.LVL146:
 1597               		.loc 1 896 3 is_stmt 0 view .LVU355
 1598               		.cfi_endproc
 1599               	.LFE134:
 1601               		.section	.text.startup_user,"ax",@progbits
 1602               		.weak	startup_user
 1604               	startup_user:
 1605               	.LFB138:
 1606               		.cfi_startproc
 1607               	/* prologue: function */
 1608               	/* frame size = 0 */
 1609               	/* stack size = 0 */
 1610               	.L__stack_usage = 0
 1611               	/* epilogue start */
 1612 0000 0895      		ret
 1613               		.cfi_endproc
 1614               	.LFE138:
 1616               		.section	.text.shutdown_user,"ax",@progbits
 1617               		.weak	shutdown_user
 1619               	shutdown_user:
 1620               	.LFB140:
 1621               		.cfi_startproc
 1622               	/* prologue: function */
 1623               	/* frame size = 0 */
 1624               	/* stack size = 0 */
 1625               	.L__stack_usage = 0
 1626               	/* epilogue start */
 1627 0000 0895      		ret
 1628               		.cfi_endproc
 1629               	.LFE140:
 1631               	.global	ascii_to_qwerty_keycode_lut
 1632               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a"
 1635               	ascii_to_qwerty_keycode_lut:
 1636 0000 00        		.string	""
 1637 0001 00        		.string	""
 1638 0002 00        		.string	""
 1639 0003 00        		.string	""
 1640 0004 00        		.string	""
 1641 0005 00        		.string	""
 1642 0006 00        		.string	""
 1643 0007 00        		.string	""
 1644 0008 2A2B 2800 		.string	"*+("
 1645 000c 00        		.string	""
 1646 000d 00        		.string	""
 1647 000e 00        		.string	""
 1648 000f 00        		.string	""
 1649 0010 00        		.string	""
 1650 0011 00        		.string	""
 1651 0012 00        		.string	""
 1652 0013 00        		.string	""
 1653 0014 00        		.string	""
 1654 0015 00        		.string	""
 1655 0016 00        		.string	""
 1656 0017 00        		.string	""
 1657 0018 00        		.string	""
 1658 0019 00        		.string	""
 1659 001a 00        		.string	""
 1660 001b 2900      		.string	")"
 1661 001d 00        		.string	""
 1662 001e 00        		.string	""
 1663 001f 00        		.string	""
 1664 0020 2C1E 3420 		.ascii	",\0364 !\"$4&'%.6-78'\036\037 !\"#$%&336.78\037\004\005\006\007"
 1664      2122 2434 
 1664      2627 252E 
 1664      362D 3738 
 1664      271E 1F20 
 1665 0045 0809 0A0B 		.ascii	"\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031"
 1665      0C0D 0E0F 
 1665      1011 1213 
 1665      1415 1617 
 1665      1819 
 1666 0057 1A1B 1C1D 		.ascii	"\032\033\034\035/10#-5\004\005\006\007\b\t\n\013\f\r\016\017"
 1666      2F31 3023 
 1666      2D35 0405 
 1666      0607 0809 
 1666      0A0B 0C0D 
 1667 006d 1011 1213 		.ascii	"\020\021\022\023\024\025\026\027\030\031\032\033\034\035/105"
 1667      1415 1617 
 1667      1819 1A1B 
 1667      1C1D 2F31 
 1667      3035 
 1668 007f 4C        		.ascii	"L"
 1669               	.global	ascii_to_qwerty_shift_lut
 1670               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a"
 1673               	ascii_to_qwerty_shift_lut:
 1674 0000 00        		.byte	0
 1675 0001 00        		.byte	0
 1676 0002 00        		.byte	0
 1677 0003 00        		.byte	0
 1678 0004 00        		.byte	0
 1679 0005 00        		.byte	0
 1680 0006 00        		.byte	0
 1681 0007 00        		.byte	0
 1682 0008 00        		.byte	0
 1683 0009 00        		.byte	0
 1684 000a 00        		.byte	0
 1685 000b 00        		.byte	0
 1686 000c 00        		.byte	0
 1687 000d 00        		.byte	0
 1688 000e 00        		.byte	0
 1689 000f 00        		.byte	0
 1690 0010 00        		.byte	0
 1691 0011 00        		.byte	0
 1692 0012 00        		.byte	0
 1693 0013 00        		.byte	0
 1694 0014 00        		.byte	0
 1695 0015 00        		.byte	0
 1696 0016 00        		.byte	0
 1697 0017 00        		.byte	0
 1698 0018 00        		.byte	0
 1699 0019 00        		.byte	0
 1700 001a 00        		.byte	0
 1701 001b 00        		.byte	0
 1702 001c 00        		.byte	0
 1703 001d 00        		.byte	0
 1704 001e 00        		.byte	0
 1705 001f 00        		.byte	0
 1706 0020 00        		.byte	0
 1707 0021 01        		.byte	1
 1708 0022 01        		.byte	1
 1709 0023 01        		.byte	1
 1710 0024 01        		.byte	1
 1711 0025 01        		.byte	1
 1712 0026 01        		.byte	1
 1713 0027 00        		.byte	0
 1714 0028 01        		.byte	1
 1715 0029 01        		.byte	1
 1716 002a 01        		.byte	1
 1717 002b 01        		.byte	1
 1718 002c 00        		.byte	0
 1719 002d 00        		.byte	0
 1720 002e 00        		.byte	0
 1721 002f 00        		.byte	0
 1722 0030 00        		.byte	0
 1723 0031 00        		.byte	0
 1724 0032 00        		.byte	0
 1725 0033 00        		.byte	0
 1726 0034 00        		.byte	0
 1727 0035 00        		.byte	0
 1728 0036 00        		.byte	0
 1729 0037 00        		.byte	0
 1730 0038 00        		.byte	0
 1731 0039 00        		.byte	0
 1732 003a 01        		.byte	1
 1733 003b 00        		.byte	0
 1734 003c 01        		.byte	1
 1735 003d 00        		.byte	0
 1736 003e 01        		.byte	1
 1737 003f 01        		.byte	1
 1738 0040 01        		.byte	1
 1739 0041 01        		.byte	1
 1740 0042 01        		.byte	1
 1741 0043 01        		.byte	1
 1742 0044 01        		.byte	1
 1743 0045 01        		.byte	1
 1744 0046 01        		.byte	1
 1745 0047 01        		.byte	1
 1746 0048 01        		.byte	1
 1747 0049 01        		.byte	1
 1748 004a 01        		.byte	1
 1749 004b 01        		.byte	1
 1750 004c 01        		.byte	1
 1751 004d 01        		.byte	1
 1752 004e 01        		.byte	1
 1753 004f 01        		.byte	1
 1754 0050 01        		.byte	1
 1755 0051 01        		.byte	1
 1756 0052 01        		.byte	1
 1757 0053 01        		.byte	1
 1758 0054 01        		.byte	1
 1759 0055 01        		.byte	1
 1760 0056 01        		.byte	1
 1761 0057 01        		.byte	1
 1762 0058 01        		.byte	1
 1763 0059 01        		.byte	1
 1764 005a 01        		.byte	1
 1765 005b 00        		.byte	0
 1766 005c 00        		.byte	0
 1767 005d 00        		.byte	0
 1768 005e 01        		.byte	1
 1769 005f 01        		.byte	1
 1770 0060 00        		.byte	0
 1771 0061 00        		.byte	0
 1772 0062 00        		.byte	0
 1773 0063 00        		.byte	0
 1774 0064 00        		.byte	0
 1775 0065 00        		.byte	0
 1776 0066 00        		.byte	0
 1777 0067 00        		.byte	0
 1778 0068 00        		.byte	0
 1779 0069 00        		.byte	0
 1780 006a 00        		.byte	0
 1781 006b 00        		.byte	0
 1782 006c 00        		.byte	0
 1783 006d 00        		.byte	0
 1784 006e 00        		.byte	0
 1785 006f 00        		.byte	0
 1786 0070 00        		.byte	0
 1787 0071 00        		.byte	0
 1788 0072 00        		.byte	0
 1789 0073 00        		.byte	0
 1790 0074 00        		.byte	0
 1791 0075 00        		.byte	0
 1792 0076 00        		.byte	0
 1793 0077 00        		.byte	0
 1794 0078 00        		.byte	0
 1795 0079 00        		.byte	0
 1796 007a 00        		.byte	0
 1797 007b 01        		.byte	1
 1798 007c 01        		.byte	1
 1799 007d 01        		.byte	1
 1800 007e 01        		.byte	1
 1801 007f 00        		.byte	0
 1802               		.section	.bss.scs_timer,"aw",@nobits
 1805               	scs_timer:
 1806 0000 0000      		.zero	2
 1807               		.section	.bss.shift_interrupted,"aw",@nobits
 1810               	shift_interrupted:
 1811 0000 0000      		.zero	2
 1812               		.text
 1813               	.Letext0:
 1814               		.file 3 "/usr/avr/include/stdint.h"
 1815               		.file 4 "./tmk_core/common/keyboard.h"
 1816               		.file 5 "./tmk_core/common/action.h"
 1817               		.file 6 "./tmk_core/common/debug.h"
 1818               		.file 7 "quantum/keycode_config.h"
 1819               		.file 8 "./tmk_core/common/keycode.h"
 1820               		.file 9 "quantum/quantum_keycodes.h"
 1821               		.file 10 "./tmk_core/common/action_layer.h"
 1822               		.file 11 "quantum/quantum.h"
 1823               		.file 12 "/usr/avr/include/stdlib.h"
 1824               		.file 13 "./tmk_core/common/timer.h"
 1825               		.file 14 "./tmk_core/common/eeconfig.h"
 1826               		.file 15 "./quantum/process_keycode/process_leader.h"
 1827               		.file 16 "quantum/keymap.h"
 1828               		.file 17 "./tmk_core/common/bootloader.h"
 1829               		.file 18 "/usr/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccXUDrQn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccXUDrQn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccXUDrQn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccXUDrQn.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccXUDrQn.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccXUDrQn.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccXUDrQn.s:13     .text.do_code16:0000000000000000 do_code16
     /tmp/ccXUDrQn.s:147    .text.register_code16:0000000000000000 register_code16
     /tmp/ccXUDrQn.s:181    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccXUDrQn.s:222    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccXUDrQn.s:244    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccXUDrQn.s:266    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccXUDrQn.s:286    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccXUDrQn.s:331    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccXUDrQn.s:1810   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccXUDrQn.s:1805   .bss.scs_timer:0000000000000000 scs_timer
     /tmp/ccXUDrQn.s:855    .text.send_string:0000000000000000 send_string
     /tmp/ccXUDrQn.s:1635   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
     /tmp/ccXUDrQn.s:1673   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
     /tmp/ccXUDrQn.s:1004   .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccXUDrQn.s:1122   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccXUDrQn.s:1261   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccXUDrQn.s:1278   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccXUDrQn.s:1295   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccXUDrQn.s:1310   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccXUDrQn.s:1379   .text.send_byte:0000000000000000 send_byte
     /tmp/ccXUDrQn.s:1419   .text.send_word:0000000000000000 send_word
     /tmp/ccXUDrQn.s:1454   .text.send_dword:0000000000000000 send_dword
     /tmp/ccXUDrQn.s:1497   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccXUDrQn.s:1515   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccXUDrQn.s:1515   .text.led_set_user:0000000000000000 led_set_user.localalias
     /tmp/ccXUDrQn.s:1534   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccXUDrQn.s:1549   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccXUDrQn.s:1568   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccXUDrQn.s:1585   .text.led_set:0000000000000000 led_set
     /tmp/ccXUDrQn.s:1604   .text.startup_user:0000000000000000 startup_user
     /tmp/ccXUDrQn.s:1619   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
process_leader
read_source_layers_cache
timer_read
debug_config
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
layer_state
layer_on
layer_off
rand
__divmodhi4
matrix_init_kb
matrix_scan_kb
__do_clear_bss
