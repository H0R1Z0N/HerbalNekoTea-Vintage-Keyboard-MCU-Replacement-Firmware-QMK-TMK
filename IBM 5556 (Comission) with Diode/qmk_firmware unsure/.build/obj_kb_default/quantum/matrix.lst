   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.file 1 "quantum/matrix.c"
  12               		.section	.text.matrix_init_user,"ax",@progbits
  13               		.weak	matrix_init_user
  15               	matrix_init_user:
  16               	.LFB14:
   1:quantum/matrix.c **** /*
   2:quantum/matrix.c **** Copyright 2012 Jun Wako
   3:quantum/matrix.c **** Copyright 2014 Jack Humbert
   4:quantum/matrix.c **** 
   5:quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   6:quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   7:quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   8:quantum/matrix.c **** (at your option) any later version.
   9:quantum/matrix.c **** 
  10:quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  11:quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/matrix.c **** GNU General Public License for more details.
  14:quantum/matrix.c **** 
  15:quantum/matrix.c **** You should have received a copy of the GNU General Public License
  16:quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/matrix.c **** */
  18:quantum/matrix.c **** #include <stdint.h>
  19:quantum/matrix.c **** #include <stdbool.h>
  20:quantum/matrix.c **** #if defined(__AVR__)
  21:quantum/matrix.c **** #include <avr/io.h>
  22:quantum/matrix.c **** #endif
  23:quantum/matrix.c **** #include "wait.h"
  24:quantum/matrix.c **** #include "print.h"
  25:quantum/matrix.c **** #include "debug.h"
  26:quantum/matrix.c **** #include "util.h"
  27:quantum/matrix.c **** #include "matrix.h"
  28:quantum/matrix.c **** #include "timer.h"
  29:quantum/matrix.c **** 
  30:quantum/matrix.c **** 
  31:quantum/matrix.c **** /* Set 0 if debouncing isn't needed */
  32:quantum/matrix.c **** 
  33:quantum/matrix.c **** #ifndef DEBOUNCING_DELAY
  34:quantum/matrix.c **** #   define DEBOUNCING_DELAY 5
  35:quantum/matrix.c **** #endif
  36:quantum/matrix.c **** 
  37:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
  38:quantum/matrix.c ****     static uint16_t debouncing_time;
  39:quantum/matrix.c ****     static bool debouncing = false;
  40:quantum/matrix.c **** #endif
  41:quantum/matrix.c **** 
  42:quantum/matrix.c **** #if (MATRIX_COLS <= 8)
  43:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 01234567\n")
  44:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse8(matrix_get_row(row))
  45:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop(matrix[i])
  46:quantum/matrix.c **** #    define ROW_SHIFTER ((uint8_t)1)
  47:quantum/matrix.c **** #elif (MATRIX_COLS <= 16)
  48:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF\n")
  49:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse16(matrix_get_row(row))
  50:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop16(matrix[i])
  51:quantum/matrix.c **** #    define ROW_SHIFTER ((uint16_t)1)
  52:quantum/matrix.c **** #elif (MATRIX_COLS <= 32)
  53:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  54:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse32(matrix_get_row(row))
  55:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop32(matrix[i])
  56:quantum/matrix.c **** #    define ROW_SHIFTER  ((uint32_t)1)
  57:quantum/matrix.c **** #endif
  58:quantum/matrix.c **** 
  59:quantum/matrix.c **** #ifdef MATRIX_MASKED
  60:quantum/matrix.c ****     extern const matrix_row_t matrix_mask[];
  61:quantum/matrix.c **** #endif
  62:quantum/matrix.c **** 
  63:quantum/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  64:quantum/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  65:quantum/matrix.c **** 
  66:quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  67:quantum/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  68:quantum/matrix.c **** 
  69:quantum/matrix.c **** static matrix_row_t matrix_raw[MATRIX_ROWS];
  70:quantum/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  71:quantum/matrix.c **** 
  72:quantum/matrix.c **** 
  73:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
  74:quantum/matrix.c ****     static void init_cols(void);
  75:quantum/matrix.c ****     static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row);
  76:quantum/matrix.c ****     static void unselect_rows(void);
  77:quantum/matrix.c ****     static void select_row(uint8_t row);
  78:quantum/matrix.c ****     static void unselect_row(uint8_t row);
  79:quantum/matrix.c **** #else // ROW2COL
  80:quantum/matrix.c ****     static void init_rows(void);
  81:quantum/matrix.c ****     static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col);
  82:quantum/matrix.c ****     static void unselect_cols(void);
  83:quantum/matrix.c ****     static void unselect_col(uint8_t col);
  84:quantum/matrix.c ****     static void select_col(uint8_t col);
  85:quantum/matrix.c **** #endif
  86:quantum/matrix.c **** 
  87:quantum/matrix.c **** __attribute__ ((weak))
  88:quantum/matrix.c **** void matrix_init_quantum(void) {
  89:quantum/matrix.c ****     matrix_init_kb();
  90:quantum/matrix.c **** }
  91:quantum/matrix.c **** 
  92:quantum/matrix.c **** __attribute__ ((weak))
  93:quantum/matrix.c **** void matrix_scan_quantum(void) {
  94:quantum/matrix.c ****     matrix_scan_kb();
  95:quantum/matrix.c **** }
  96:quantum/matrix.c **** 
  97:quantum/matrix.c **** __attribute__ ((weak))
  98:quantum/matrix.c **** void matrix_init_kb(void) {
  99:quantum/matrix.c ****     matrix_init_user();
 100:quantum/matrix.c **** }
 101:quantum/matrix.c **** 
 102:quantum/matrix.c **** __attribute__ ((weak))
 103:quantum/matrix.c **** void matrix_scan_kb(void) {
 104:quantum/matrix.c ****     matrix_scan_user();
 105:quantum/matrix.c **** }
 106:quantum/matrix.c **** 
 107:quantum/matrix.c **** __attribute__ ((weak))
 108:quantum/matrix.c **** void matrix_init_user(void) {
  17               		.loc 1 108 29 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 109:quantum/matrix.c **** }
  23               		.loc 1 109 1 view .LVU1
  24               	/* epilogue start */
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE14:
  29               		.set	matrix_init_user.localalias,matrix_init_user
  30               		.section	.text.matrix_init_kb,"ax",@progbits
  31               		.weak	matrix_init_kb
  33               	matrix_init_kb:
  34               	.LFB12:
  98:quantum/matrix.c ****     matrix_init_user();
  35               		.loc 1 98 27 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  99:quantum/matrix.c **** }
  41               		.loc 1 99 5 view .LVU3
  42 0000 0C94 0000 		jmp matrix_init_user
  43               	.LVL0:
  44               		.cfi_endproc
  45               	.LFE12:
  47               		.section	.text.matrix_init_quantum,"ax",@progbits
  48               		.weak	matrix_init_quantum
  50               	matrix_init_quantum:
  51               	.LFB10:
  88:quantum/matrix.c ****     matrix_init_kb();
  52               		.loc 1 88 32 view -0
  53               		.cfi_startproc
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
  89:quantum/matrix.c **** }
  58               		.loc 1 89 5 view .LVU5
  59 0000 0C94 0000 		jmp matrix_init_kb
  60               	.LVL1:
  61               		.cfi_endproc
  62               	.LFE10:
  64               		.section	.text.matrix_scan_user,"ax",@progbits
  65               		.weak	matrix_scan_user
  67               	matrix_scan_user:
  68               	.LFB31:
  69               		.cfi_startproc
 110:quantum/matrix.c **** 
 111:quantum/matrix.c **** __attribute__ ((weak))
 112:quantum/matrix.c **** void matrix_scan_user(void) {
  70               		.loc 1 112 6 view -0
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
  75               	/* epilogue start */
  76 0000 0895      		ret
  77               		.cfi_endproc
  78               	.LFE31:
  80               		.section	.text.matrix_scan_kb,"ax",@progbits
  81               		.weak	matrix_scan_kb
  83               	matrix_scan_kb:
  84               	.LFB13:
 103:quantum/matrix.c ****     matrix_scan_user();
  85               		.loc 1 103 27 view -0
  86               		.cfi_startproc
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
 104:quantum/matrix.c **** }
  91               		.loc 1 104 5 view .LVU8
  92 0000 0C94 0000 		jmp matrix_scan_user
  93               	.LVL2:
  94               		.cfi_endproc
  95               	.LFE13:
  97               		.section	.text.matrix_scan_quantum,"ax",@progbits
  98               		.weak	matrix_scan_quantum
 100               	matrix_scan_quantum:
 101               	.LFB11:
  93:quantum/matrix.c ****     matrix_scan_kb();
 102               		.loc 1 93 32 view -0
 103               		.cfi_startproc
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
  94:quantum/matrix.c **** }
 108               		.loc 1 94 5 view .LVU10
 109 0000 0C94 0000 		jmp matrix_scan_kb
 110               	.LVL3:
 111               		.cfi_endproc
 112               	.LFE11:
 114               		.section	.text.matrix_rows,"ax",@progbits
 115               	.global	matrix_rows
 117               	matrix_rows:
 118               	.LFB16:
 113:quantum/matrix.c **** }
 114:quantum/matrix.c **** 
 115:quantum/matrix.c **** inline
 116:quantum/matrix.c **** uint8_t matrix_rows(void) {
 119               		.loc 1 116 27 view -0
 120               		.cfi_startproc
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 117:quantum/matrix.c ****     return MATRIX_ROWS;
 125               		.loc 1 117 5 view .LVU12
 118:quantum/matrix.c **** }
 126               		.loc 1 118 1 is_stmt 0 view .LVU13
 127 0000 88E0      		ldi r24,lo8(8)
 128               	/* epilogue start */
 129 0002 0895      		ret
 130               		.cfi_endproc
 131               	.LFE16:
 133               		.section	.text.matrix_cols,"ax",@progbits
 134               	.global	matrix_cols
 136               	matrix_cols:
 137               	.LFB17:
 119:quantum/matrix.c **** 
 120:quantum/matrix.c **** inline
 121:quantum/matrix.c **** uint8_t matrix_cols(void) {
 138               		.loc 1 121 27 is_stmt 1 view -0
 139               		.cfi_startproc
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 122:quantum/matrix.c ****     return MATRIX_COLS;
 144               		.loc 1 122 5 view .LVU15
 123:quantum/matrix.c **** }
 145               		.loc 1 123 1 is_stmt 0 view .LVU16
 146 0000 80E1      		ldi r24,lo8(16)
 147               	/* epilogue start */
 148 0002 0895      		ret
 149               		.cfi_endproc
 150               	.LFE17:
 152               		.section	.text.matrix_init,"ax",@progbits
 153               	.global	matrix_init
 155               	matrix_init:
 156               	.LFB18:
 124:quantum/matrix.c **** 
 125:quantum/matrix.c **** // void matrix_power_up(void) {
 126:quantum/matrix.c **** // #if (DIODE_DIRECTION == COL2ROW)
 127:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 128:quantum/matrix.c **** //         /* DDRxn */
 129:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 1) |= _BV(row_pins[r] & 0xF);
 130:quantum/matrix.c **** //         toggle_row(r);
 131:quantum/matrix.c **** //     }
 132:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 133:quantum/matrix.c **** //         /* PORTxn */
 134:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 2) |= _BV(col_pins[c] & 0xF);
 135:quantum/matrix.c **** //     }
 136:quantum/matrix.c **** // #else
 137:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 138:quantum/matrix.c **** //         /* DDRxn */
 139:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 1) |= _BV(col_pins[c] & 0xF);
 140:quantum/matrix.c **** //         toggle_col(c);
 141:quantum/matrix.c **** //     }
 142:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 143:quantum/matrix.c **** //         /* PORTxn */
 144:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 2) |= _BV(row_pins[r] & 0xF);
 145:quantum/matrix.c **** //     }
 146:quantum/matrix.c **** // #endif
 147:quantum/matrix.c **** // }
 148:quantum/matrix.c **** 
 149:quantum/matrix.c **** void matrix_init(void) {
 157               		.loc 1 149 24 is_stmt 1 view -0
 158               		.cfi_startproc
 159 0000 CF93      		push r28
 160               	.LCFI0:
 161               		.cfi_def_cfa_offset 3
 162               		.cfi_offset 28, -2
 163 0002 DF93      		push r29
 164               	.LCFI1:
 165               		.cfi_def_cfa_offset 4
 166               		.cfi_offset 29, -3
 167               	/* prologue: function */
 168               	/* frame size = 0 */
 169               	/* stack size = 2 */
 170               	.L__stack_usage = 2
 150:quantum/matrix.c **** 
 151:quantum/matrix.c ****     // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
 152:quantum/matrix.c ****     #if  (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) || defined(__AVR_ATmega32U4_
 153:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 171               		.loc 1 153 9 view .LVU18
 172 0004 85B7      		in r24,0x35
 173               		.loc 1 153 15 is_stmt 0 view .LVU19
 174 0006 8068      		ori r24,lo8(-128)
 175 0008 85BF      		out 0x35,r24
 154:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 176               		.loc 1 154 9 is_stmt 1 view .LVU20
 177 000a 85B7      		in r24,0x35
 178               		.loc 1 154 15 is_stmt 0 view .LVU21
 179 000c 8068      		ori r24,lo8(-128)
 180 000e 85BF      		out 0x35,r24
 155:quantum/matrix.c ****     #endif
 156:quantum/matrix.c **** 
 157:quantum/matrix.c ****     // initialize row and col
 158:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 159:quantum/matrix.c ****     unselect_rows();
 160:quantum/matrix.c ****     init_cols();
 161:quantum/matrix.c **** #else // ROW2COL
 162:quantum/matrix.c ****     unselect_cols();
 181               		.loc 1 162 5 is_stmt 1 view .LVU22
 182               	.LBB21:
 183               	.LBI21:
 163:quantum/matrix.c ****     init_rows();
 164:quantum/matrix.c **** #endif
 165:quantum/matrix.c **** 
 166:quantum/matrix.c ****     // initialize matrix state: all keys off
 167:quantum/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 168:quantum/matrix.c ****         matrix[i] = 0;
 169:quantum/matrix.c ****         matrix_raw[i] = 0;
 170:quantum/matrix.c ****         matrix_debouncing[i] = 0;
 171:quantum/matrix.c ****     }
 172:quantum/matrix.c **** 
 173:quantum/matrix.c ****     matrix_init_quantum();
 174:quantum/matrix.c **** }
 175:quantum/matrix.c **** 
 176:quantum/matrix.c **** uint8_t matrix_scan(void)
 177:quantum/matrix.c **** {
 178:quantum/matrix.c **** 
 179:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 180:quantum/matrix.c **** 
 181:quantum/matrix.c ****     // Set row, read cols
 182:quantum/matrix.c ****     for (uint8_t current_row = 0; current_row < MATRIX_ROWS; current_row++) {
 183:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 184:quantum/matrix.c ****             bool matrix_changed = read_cols_on_row(matrix_debouncing, current_row);
 185:quantum/matrix.c **** 
 186:quantum/matrix.c ****             if (matrix_changed) {
 187:quantum/matrix.c ****                 debouncing = true;
 188:quantum/matrix.c ****                 debouncing_time = timer_read();
 189:quantum/matrix.c ****             }
 190:quantum/matrix.c **** 
 191:quantum/matrix.c **** #       else
 192:quantum/matrix.c ****             read_cols_on_row(matrix, current_row);
 193:quantum/matrix.c **** #       endif
 194:quantum/matrix.c **** 
 195:quantum/matrix.c ****     }
 196:quantum/matrix.c **** 
 197:quantum/matrix.c **** #else // ROW2COL
 198:quantum/matrix.c **** 
 199:quantum/matrix.c ****     // Set col, read rows
 200:quantum/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 201:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 202:quantum/matrix.c ****             bool matrix_changed = read_rows_on_col(matrix_debouncing, current_col);
 203:quantum/matrix.c ****             if (matrix_changed) {
 204:quantum/matrix.c ****                 debouncing = true;
 205:quantum/matrix.c ****                 debouncing_time = timer_read();
 206:quantum/matrix.c ****             }
 207:quantum/matrix.c **** #       else
 208:quantum/matrix.c ****              read_rows_on_col(matrix, current_col);
 209:quantum/matrix.c **** #       endif
 210:quantum/matrix.c **** 
 211:quantum/matrix.c ****     }
 212:quantum/matrix.c **** 
 213:quantum/matrix.c **** #endif
 214:quantum/matrix.c **** 
 215:quantum/matrix.c **** #   if (DEBOUNCING_DELAY > 0)
 216:quantum/matrix.c ****         if (debouncing && (timer_elapsed(debouncing_time) > DEBOUNCING_DELAY)) {
 217:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 218:quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 219:quantum/matrix.c ****             }
 220:quantum/matrix.c ****             debouncing = false;
 221:quantum/matrix.c ****         }
 222:quantum/matrix.c **** #   endif
 223:quantum/matrix.c **** 
 224:quantum/matrix.c ****     matrix_scan_quantum();
 225:quantum/matrix.c ****     return 1;
 226:quantum/matrix.c **** }
 227:quantum/matrix.c **** 
 228:quantum/matrix.c **** bool matrix_is_modified(void)
 229:quantum/matrix.c **** {
 230:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 231:quantum/matrix.c ****     if (debouncing) return false;
 232:quantum/matrix.c **** #endif
 233:quantum/matrix.c ****     return true;
 234:quantum/matrix.c **** }
 235:quantum/matrix.c **** 
 236:quantum/matrix.c **** inline
 237:quantum/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 238:quantum/matrix.c **** {
 239:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 240:quantum/matrix.c **** }
 241:quantum/matrix.c **** 
 242:quantum/matrix.c **** inline
 243:quantum/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 244:quantum/matrix.c **** {
 245:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 246:quantum/matrix.c ****     // switch blocker installed and the switch is always pressed.
 247:quantum/matrix.c **** #ifdef MATRIX_MASKED
 248:quantum/matrix.c ****     return matrix[row] & matrix_mask[row];
 249:quantum/matrix.c **** #else
 250:quantum/matrix.c ****     return matrix[row];
 251:quantum/matrix.c **** #endif
 252:quantum/matrix.c **** }
 253:quantum/matrix.c **** 
 254:quantum/matrix.c **** void matrix_print(void)
 255:quantum/matrix.c **** {
 256:quantum/matrix.c ****     print_matrix_header();
 257:quantum/matrix.c **** 
 258:quantum/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 259:quantum/matrix.c ****         phex(row); print(": ");
 260:quantum/matrix.c ****         print_matrix_row(row);
 261:quantum/matrix.c ****         print("\n");
 262:quantum/matrix.c ****     }
 263:quantum/matrix.c **** }
 264:quantum/matrix.c **** 
 265:quantum/matrix.c **** uint8_t matrix_key_count(void)
 266:quantum/matrix.c **** {
 267:quantum/matrix.c ****     uint8_t count = 0;
 268:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 269:quantum/matrix.c ****         count += matrix_bitpop(i);
 270:quantum/matrix.c ****     }
 271:quantum/matrix.c ****     return count;
 272:quantum/matrix.c **** }
 273:quantum/matrix.c **** 
 274:quantum/matrix.c **** 
 275:quantum/matrix.c **** 
 276:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 277:quantum/matrix.c **** 
 278:quantum/matrix.c **** static void init_cols(void)
 279:quantum/matrix.c **** {
 280:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_COLS; x++) {
 281:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 283:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 284:quantum/matrix.c ****     }
 285:quantum/matrix.c **** }
 286:quantum/matrix.c **** 
 287:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row)
 288:quantum/matrix.c **** {
 289:quantum/matrix.c ****     // Store last value of row prior to reading
 290:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
 291:quantum/matrix.c **** 
 292:quantum/matrix.c ****     // Clear data in matrix row
 293:quantum/matrix.c ****     current_matrix[current_row] = 0;
 294:quantum/matrix.c **** 
 295:quantum/matrix.c ****     // Select row and wait for row selecton to stabilize
 296:quantum/matrix.c ****     select_row(current_row);
 297:quantum/matrix.c ****     wait_us(30);
 298:quantum/matrix.c **** 
 299:quantum/matrix.c ****     // For each col...
 300:quantum/matrix.c ****     for(uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 301:quantum/matrix.c **** 
 302:quantum/matrix.c ****         // Select the col pin to read (active low)
 303:quantum/matrix.c ****         uint8_t pin = col_pins[col_index];
 304:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 305:quantum/matrix.c **** 
 306:quantum/matrix.c ****         // Populate the matrix row with the state of the col pin
 307:quantum/matrix.c ****         current_matrix[current_row] |=  pin_state ? 0 : (ROW_SHIFTER << col_index);
 308:quantum/matrix.c ****     }
 309:quantum/matrix.c **** 
 310:quantum/matrix.c ****     // Unselect row
 311:quantum/matrix.c ****     unselect_row(current_row);
 312:quantum/matrix.c **** 
 313:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 314:quantum/matrix.c **** }
 315:quantum/matrix.c **** 
 316:quantum/matrix.c **** static void select_row(uint8_t row)
 317:quantum/matrix.c **** {
 318:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 320:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 321:quantum/matrix.c **** }
 322:quantum/matrix.c **** 
 323:quantum/matrix.c **** static void unselect_row(uint8_t row)
 324:quantum/matrix.c **** {
 325:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 327:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 328:quantum/matrix.c **** }
 329:quantum/matrix.c **** 
 330:quantum/matrix.c **** static void unselect_rows(void)
 331:quantum/matrix.c **** {
 332:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_ROWS; x++) {
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 334:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 335:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 336:quantum/matrix.c ****     }
 337:quantum/matrix.c **** }
 338:quantum/matrix.c **** 
 339:quantum/matrix.c **** #else // ROW2COL
 340:quantum/matrix.c **** 
 341:quantum/matrix.c **** static void init_rows(void)
 342:quantum/matrix.c **** {
 343:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_ROWS; x++) {
 344:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 345:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 346:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 347:quantum/matrix.c ****     }
 348:quantum/matrix.c **** }
 349:quantum/matrix.c **** 
 350:quantum/matrix.c **** static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col)
 351:quantum/matrix.c **** {
 352:quantum/matrix.c ****     bool matrix_changed = false;
 353:quantum/matrix.c **** 
 354:quantum/matrix.c ****     // Select col and wait for col selecton to stabilize
 355:quantum/matrix.c ****     select_col(current_col);
 356:quantum/matrix.c ****     wait_us(30);
 357:quantum/matrix.c **** 
 358:quantum/matrix.c ****     // For each row...
 359:quantum/matrix.c ****     for(uint8_t row_index = 0; row_index < MATRIX_ROWS; row_index++)
 360:quantum/matrix.c ****     {
 361:quantum/matrix.c **** 
 362:quantum/matrix.c ****         // Store last value of row prior to reading
 363:quantum/matrix.c ****         matrix_row_t last_row_value = current_matrix[row_index];
 364:quantum/matrix.c **** 
 365:quantum/matrix.c ****         // Check row pin state
 366:quantum/matrix.c ****         if ((_SFR_IO8(row_pins[row_index] >> 4) & _BV(row_pins[row_index] & 0xF)) == 0)
 367:quantum/matrix.c ****         {
 368:quantum/matrix.c ****             // Pin LO, set col bit
 369:quantum/matrix.c ****             current_matrix[row_index] |= (ROW_SHIFTER << current_col);
 370:quantum/matrix.c ****         }
 371:quantum/matrix.c ****         else
 372:quantum/matrix.c ****         {
 373:quantum/matrix.c ****             // Pin HI, clear col bit
 374:quantum/matrix.c ****             current_matrix[row_index] &= ~(ROW_SHIFTER << current_col);
 375:quantum/matrix.c ****         }
 376:quantum/matrix.c **** 
 377:quantum/matrix.c ****         // Determine if the matrix changed state
 378:quantum/matrix.c ****         if ((last_row_value != current_matrix[row_index]) && !(matrix_changed))
 379:quantum/matrix.c ****         {
 380:quantum/matrix.c ****             matrix_changed = true;
 381:quantum/matrix.c ****         }
 382:quantum/matrix.c ****     }
 383:quantum/matrix.c **** 
 384:quantum/matrix.c ****     // Unselect col
 385:quantum/matrix.c ****     unselect_col(current_col);
 386:quantum/matrix.c **** 
 387:quantum/matrix.c ****     return matrix_changed;
 388:quantum/matrix.c **** }
 389:quantum/matrix.c **** 
 390:quantum/matrix.c **** static void select_col(uint8_t col)
 391:quantum/matrix.c **** {
 392:quantum/matrix.c ****     uint8_t pin = col_pins[col];
 393:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 394:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 395:quantum/matrix.c **** }
 396:quantum/matrix.c **** 
 397:quantum/matrix.c **** static void unselect_col(uint8_t col)
 398:quantum/matrix.c **** {
 399:quantum/matrix.c ****     uint8_t pin = col_pins[col];
 400:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 401:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 402:quantum/matrix.c **** }
 403:quantum/matrix.c **** 
 404:quantum/matrix.c **** static void unselect_cols(void)
 184               		.loc 1 404 13 view .LVU23
 405:quantum/matrix.c **** {
 406:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_COLS; x++) {
 185               		.loc 1 406 5 view .LVU24
 186               	.LBB22:
 187               		.loc 1 406 9 view .LVU25
 188               	.LVL4:
 189               		.loc 1 406 26 view .LVU26
 190 0010 A0E0      		ldi r26,lo8(col_pins)
 191 0012 B0E0      		ldi r27,hi8(col_pins)
 192 0014 20E0      		ldi r18,lo8(col_pins+16)
 193 0016 30E0      		ldi r19,hi8(col_pins+16)
 194               	.LBB23:
 407:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 408:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 195               		.loc 1 408 38 is_stmt 0 view .LVU27
 196 0018 61E0      		ldi r22,lo8(1)
 197 001a 70E0      		ldi r23,0
 198               	.LVL5:
 199               	.L10:
 407:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 200               		.loc 1 407 9 is_stmt 1 view .LVU28
 407:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 201               		.loc 1 407 17 is_stmt 0 view .LVU29
 202 001c 8D91      		ld r24,X+
 203               	.LVL6:
 204               		.loc 1 408 9 is_stmt 1 view .LVU30
 205 001e E82F      		mov r30,r24
 206 0020 E295      		swap r30
 207 0022 EF70      		andi r30,lo8(15)
 208 0024 F0E0      		ldi r31,0
 209 0026 41A1      		ldd r20,Z+33
 210               		.loc 1 408 38 is_stmt 0 view .LVU31
 211 0028 8F70      		andi r24,lo8(15)
 212               	.LVL7:
 213               		.loc 1 408 38 view .LVU32
 214 002a EB01      		movw r28,r22
 215 002c 00C0      		rjmp 2f
 216               		1:
 217 002e CC0F      		lsl r28
 218 0030 DD1F      		rol r29
 219               		2:
 220 0032 8A95      		dec r24
 221 0034 02F4      		brpl 1b
 222 0036 CE01      		movw r24,r28
 223               		.loc 1 408 34 view .LVU33
 224 0038 9C2F      		mov r25,r28
 225 003a 9095      		com r25
 226 003c 9423      		and r25,r20
 227 003e 91A3      		std Z+33,r25
 228               	.LVL8:
 409:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 229               		.loc 1 409 9 is_stmt 1 view .LVU34
 230 0040 92A1      		ldd r25,Z+34
 231               		.loc 1 409 34 is_stmt 0 view .LVU35
 232 0042 892B      		or r24,r25
 233 0044 82A3      		std Z+34,r24
 234               	.LBE23:
 406:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 235               		.loc 1 406 42 is_stmt 1 view .LVU36
 236               	.LVL9:
 406:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 237               		.loc 1 406 26 view .LVU37
 238 0046 2A17      		cp r18,r26
 239 0048 3B07      		cpc r19,r27
 240 004a 01F4      		brne .L10
 241 004c A0E0      		ldi r26,lo8(row_pins)
 242 004e B0E0      		ldi r27,hi8(row_pins)
 243               	.LVL10:
 406:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 244               		.loc 1 406 26 is_stmt 0 view .LVU38
 245 0050 20E0      		ldi r18,lo8(row_pins+8)
 246 0052 30E0      		ldi r19,hi8(row_pins+8)
 247               	.LBE22:
 248               	.LBE21:
 249               	.LBB24:
 250               	.LBB25:
 251               	.LBB26:
 345:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 252               		.loc 1 345 38 view .LVU39
 253 0054 61E0      		ldi r22,lo8(1)
 254 0056 70E0      		ldi r23,0
 255               	.LVL11:
 256               	.L11:
 344:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 257               		.loc 1 344 9 is_stmt 1 view .LVU40
 344:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 258               		.loc 1 344 17 is_stmt 0 view .LVU41
 259 0058 8D91      		ld r24,X+
 260               	.LVL12:
 345:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 261               		.loc 1 345 9 is_stmt 1 view .LVU42
 262 005a E82F      		mov r30,r24
 263 005c E295      		swap r30
 264 005e EF70      		andi r30,lo8(15)
 265 0060 F0E0      		ldi r31,0
 266 0062 41A1      		ldd r20,Z+33
 345:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 267               		.loc 1 345 38 is_stmt 0 view .LVU43
 268 0064 8F70      		andi r24,lo8(15)
 269               	.LVL13:
 345:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 270               		.loc 1 345 38 view .LVU44
 271 0066 EB01      		movw r28,r22
 272 0068 00C0      		rjmp 2f
 273               		1:
 274 006a CC0F      		lsl r28
 275 006c DD1F      		rol r29
 276               		2:
 277 006e 8A95      		dec r24
 278 0070 02F4      		brpl 1b
 279 0072 CE01      		movw r24,r28
 345:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 280               		.loc 1 345 34 view .LVU45
 281 0074 9C2F      		mov r25,r28
 282 0076 9095      		com r25
 283 0078 9423      		and r25,r20
 284 007a 91A3      		std Z+33,r25
 285               	.LVL14:
 346:quantum/matrix.c ****     }
 286               		.loc 1 346 9 is_stmt 1 view .LVU46
 287 007c 92A1      		ldd r25,Z+34
 346:quantum/matrix.c ****     }
 288               		.loc 1 346 34 is_stmt 0 view .LVU47
 289 007e 892B      		or r24,r25
 290 0080 82A3      		std Z+34,r24
 291               	.LBE26:
 343:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 292               		.loc 1 343 42 is_stmt 1 view .LVU48
 293               	.LVL15:
 343:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 294               		.loc 1 343 26 view .LVU49
 295 0082 2A17      		cp r18,r26
 296 0084 3B07      		cpc r19,r27
 297 0086 01F4      		brne .L11
 298               	.LBE25:
 299               	.LBE24:
 300               	.LBB27:
 168:quantum/matrix.c ****         matrix_raw[i] = 0;
 301               		.loc 1 168 19 is_stmt 0 view .LVU50
 302 0088 80E1      		ldi r24,lo8(16)
 303 008a E0E0      		ldi r30,lo8(matrix)
 304 008c F0E0      		ldi r31,hi8(matrix)
 305 008e DF01      		movw r26,r30
 306               	.LVL16:
 168:quantum/matrix.c ****         matrix_raw[i] = 0;
 307               		.loc 1 168 19 view .LVU51
 308 0090 C82F      		mov r28,r24
 309               		0:
 310 0092 1D92      		st X+,__zero_reg__
 311 0094 CA95      		dec r28
 312 0096 01F4      		brne 0b
 170:quantum/matrix.c ****     }
 313               		.loc 1 170 30 view .LVU52
 314 0098 E0E0      		ldi r30,lo8(matrix_debouncing)
 315 009a F0E0      		ldi r31,hi8(matrix_debouncing)
 316 009c DF01      		movw r26,r30
 317               		0:
 318 009e 1D92      		st X+,__zero_reg__
 319 00a0 8A95      		dec r24
 320 00a2 01F4      		brne 0b
 321               	.LVL17:
 170:quantum/matrix.c ****     }
 322               		.loc 1 170 30 view .LVU53
 323               	.LBE27:
 173:quantum/matrix.c **** }
 324               		.loc 1 173 5 is_stmt 1 view .LVU54
 325               	/* epilogue start */
 174:quantum/matrix.c **** 
 326               		.loc 1 174 1 is_stmt 0 view .LVU55
 327 00a4 DF91      		pop r29
 328 00a6 CF91      		pop r28
 173:quantum/matrix.c **** }
 329               		.loc 1 173 5 view .LVU56
 330 00a8 0C94 0000 		jmp matrix_init_quantum
 331               	.LVL18:
 332               		.cfi_endproc
 333               	.LFE18:
 335               		.section	.text.matrix_scan,"ax",@progbits
 336               	.global	matrix_scan
 338               	matrix_scan:
 339               	.LFB19:
 177:quantum/matrix.c **** 
 340               		.loc 1 177 1 is_stmt 1 view -0
 341               		.cfi_startproc
 342 0000 3F92      		push r3
 343               	.LCFI2:
 344               		.cfi_def_cfa_offset 3
 345               		.cfi_offset 3, -2
 346 0002 4F92      		push r4
 347               	.LCFI3:
 348               		.cfi_def_cfa_offset 4
 349               		.cfi_offset 4, -3
 350 0004 5F92      		push r5
 351               	.LCFI4:
 352               		.cfi_def_cfa_offset 5
 353               		.cfi_offset 5, -4
 354 0006 6F92      		push r6
 355               	.LCFI5:
 356               		.cfi_def_cfa_offset 6
 357               		.cfi_offset 6, -5
 358 0008 7F92      		push r7
 359               	.LCFI6:
 360               		.cfi_def_cfa_offset 7
 361               		.cfi_offset 7, -6
 362 000a 8F92      		push r8
 363               	.LCFI7:
 364               		.cfi_def_cfa_offset 8
 365               		.cfi_offset 8, -7
 366 000c 9F92      		push r9
 367               	.LCFI8:
 368               		.cfi_def_cfa_offset 9
 369               		.cfi_offset 9, -8
 370 000e AF92      		push r10
 371               	.LCFI9:
 372               		.cfi_def_cfa_offset 10
 373               		.cfi_offset 10, -9
 374 0010 BF92      		push r11
 375               	.LCFI10:
 376               		.cfi_def_cfa_offset 11
 377               		.cfi_offset 11, -10
 378 0012 CF92      		push r12
 379               	.LCFI11:
 380               		.cfi_def_cfa_offset 12
 381               		.cfi_offset 12, -11
 382 0014 DF92      		push r13
 383               	.LCFI12:
 384               		.cfi_def_cfa_offset 13
 385               		.cfi_offset 13, -12
 386 0016 EF92      		push r14
 387               	.LCFI13:
 388               		.cfi_def_cfa_offset 14
 389               		.cfi_offset 14, -13
 390 0018 FF92      		push r15
 391               	.LCFI14:
 392               		.cfi_def_cfa_offset 15
 393               		.cfi_offset 15, -14
 394 001a 0F93      		push r16
 395               	.LCFI15:
 396               		.cfi_def_cfa_offset 16
 397               		.cfi_offset 16, -15
 398 001c 1F93      		push r17
 399               	.LCFI16:
 400               		.cfi_def_cfa_offset 17
 401               		.cfi_offset 17, -16
 402 001e CF93      		push r28
 403               	.LCFI17:
 404               		.cfi_def_cfa_offset 18
 405               		.cfi_offset 28, -17
 406 0020 DF93      		push r29
 407               	.LCFI18:
 408               		.cfi_def_cfa_offset 19
 409               		.cfi_offset 29, -18
 410 0022 00D0      		rcall .
 411 0024 00D0      		rcall .
 412               	.LCFI19:
 413               		.cfi_def_cfa_offset 23
 414 0026 CDB7      		in r28,__SP_L__
 415 0028 DEB7      		in r29,__SP_H__
 416               	.LCFI20:
 417               		.cfi_def_cfa_register 28
 418               	/* prologue: function */
 419               	/* frame size = 4 */
 420               	/* stack size = 21 */
 421               	.L__stack_usage = 21
 200:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 422               		.loc 1 200 5 view .LVU58
 423               	.LBB45:
 200:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 424               		.loc 1 200 10 view .LVU59
 425               	.LVL19:
 200:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 426               		.loc 1 200 47 view .LVU60
 427 002a 00E0      		ldi r16,lo8(col_pins)
 428 002c 10E0      		ldi r17,hi8(col_pins)
 429               	.LBE45:
 177:quantum/matrix.c **** 
 430               		.loc 1 177 1 is_stmt 0 view .LVU61
 431 002e 1A82      		std Y+2,__zero_reg__
 432 0030 1982      		std Y+1,__zero_reg__
 433               	.LBB70:
 434               	.LBB46:
 435               	.LBB47:
 436               	.LBB48:
 437               	.LBB49:
 438               	.LBB50:
 393:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 439               		.loc 1 393 34 view .LVU62
 440 0032 EE24      		clr r14
 441 0034 E394      		inc r14
 442 0036 F12C      		mov r15,__zero_reg__
 443 0038 90E0      		ldi r25,lo8(matrix_debouncing+16)
 444 003a 692E      		mov r6,r25
 445 003c 90E0      		ldi r25,hi8(matrix_debouncing+16)
 446 003e 792E      		mov r7,r25
 447               	.LBE50:
 448               	.LBE49:
 449               	.LBB52:
 450               	.LBB53:
 451 0040 3324      		clr r3
 452 0042 3394      		inc r3
 453               	.LVL20:
 454               	.L20:
 393:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 455               		.loc 1 393 34 view .LVU63
 456               	.LBE53:
 457               	.LBE52:
 458               	.LBE48:
 459               	.LBE47:
 202:quantum/matrix.c ****             if (matrix_changed) {
 460               		.loc 1 202 13 is_stmt 1 view .LVU64
 461               	.LBB67:
 462               	.LBI47:
 350:quantum/matrix.c **** {
 463               		.loc 1 350 13 view .LVU65
 464               	.LBB65:
 352:quantum/matrix.c **** 
 465               		.loc 1 352 5 view .LVU66
 355:quantum/matrix.c ****     wait_us(30);
 466               		.loc 1 355 5 view .LVU67
 467               	.LBB57:
 468               	.LBI49:
 390:quantum/matrix.c **** {
 469               		.loc 1 390 13 view .LVU68
 470               	.LBB51:
 392:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 471               		.loc 1 392 5 view .LVU69
 392:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 472               		.loc 1 392 13 is_stmt 0 view .LVU70
 473 0044 D801      		movw r26,r16
 474 0046 8D91      		ld r24,X+
 475 0048 8D01      		movw r16,r26
 476               	.LVL21:
 393:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 477               		.loc 1 393 5 is_stmt 1 view .LVU71
 478 004a E82F      		mov r30,r24
 479 004c E295      		swap r30
 480 004e EF70      		andi r30,lo8(15)
 481 0050 F0E0      		ldi r31,0
 482 0052 91A1      		ldd r25,Z+33
 393:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 483               		.loc 1 393 34 is_stmt 0 view .LVU72
 484 0054 8F70      		andi r24,lo8(15)
 485               	.LVL22:
 393:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 486               		.loc 1 393 34 view .LVU73
 487 0056 5701      		movw r10,r14
 488 0058 00C0      		rjmp 2f
 489               		1:
 490 005a AA0C      		lsl r10
 491               		2:
 492 005c 8A95      		dec r24
 493 005e 02F4      		brpl 1b
 393:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 494               		.loc 1 393 30 view .LVU74
 495 0060 892F      		mov r24,r25
 496 0062 8A29      		or r24,r10
 497 0064 81A3      		std Z+33,r24
 498               	.LVL23:
 394:quantum/matrix.c **** }
 499               		.loc 1 394 5 is_stmt 1 view .LVU75
 500 0066 82A1      		ldd r24,Z+34
 394:quantum/matrix.c **** }
 501               		.loc 1 394 30 is_stmt 0 view .LVU76
 502 0068 5A2C      		mov r5,r10
 503 006a 5094      		com r5
 504 006c 8521      		and r24,r5
 505 006e 82A3      		std Z+34,r24
 506               	.LVL24:
 394:quantum/matrix.c **** }
 507               		.loc 1 394 30 view .LVU77
 508               	.LBE51:
 509               	.LBE57:
 356:quantum/matrix.c **** 
 510               		.loc 1 356 5 is_stmt 1 view .LVU78
 511               	.LBB58:
 512               	.LBI58:
 513               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2551 2020-10-10 20:33:35Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 514               		.loc 2 255 1 view .LVU79
 515               	.LBB59:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 516               		.loc 2 257 2 view .LVU80
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 517               		.loc 2 261 2 view .LVU81
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 518               		.loc 2 262 2 view .LVU82
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 519               		.loc 2 263 2 view .LVU83
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 520               		.loc 2 273 3 view .LVU84
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 521               		.loc 2 276 2 view .LVU85
 522 0070 B0EA      		ldi r27,lo8(-96)
 523 0072 BA95      	1:	dec r27
 524 0074 01F4      		brne 1b
 525               	.LVL25:
 526               		.loc 2 276 2 is_stmt 0 view .LVU86
 527               	.LBE59:
 528               	.LBE58:
 359:quantum/matrix.c ****     {
 529               		.loc 1 359 5 is_stmt 1 view .LVU87
 530               	.LBB60:
 359:quantum/matrix.c ****     {
 531               		.loc 1 359 9 view .LVU88
 359:quantum/matrix.c ****     {
 532               		.loc 1 359 42 view .LVU89
 533               	.LBB54:
 374:quantum/matrix.c ****         }
 534               		.loc 1 374 56 is_stmt 0 view .LVU90
 535 0076 B701      		movw r22,r14
 536 0078 0980      		ldd r0,Y+1
 537 007a 00C0      		rjmp 2f
 538               		1:
 539 007c 660F      		lsl r22
 540 007e 771F      		rol r23
 541               		2:
 542 0080 0A94      		dec r0
 543 0082 02F4      		brpl 1b
 374:quantum/matrix.c ****         }
 544               		.loc 1 374 42 view .LVU91
 545 0084 4B01      		movw r8,r22
 546 0086 8094      		com r8
 547 0088 9094      		com r9
 548 008a 80E0      		ldi r24,lo8(matrix_debouncing)
 549 008c 90E0      		ldi r25,hi8(matrix_debouncing)
 550 008e 9C83      		std Y+4,r25
 551 0090 8B83      		std Y+3,r24
 552 0092 40E0      		ldi r20,lo8(row_pins)
 553 0094 50E0      		ldi r21,hi8(row_pins)
 554               	.LBE54:
 555               	.LBE60:
 352:quantum/matrix.c **** 
 556               		.loc 1 352 10 view .LVU92
 557 0096 412C      		mov r4,__zero_reg__
 558               	.LVL26:
 559               	.L18:
 560               	.LBB61:
 561               	.LBB55:
 363:quantum/matrix.c **** 
 562               		.loc 1 363 9 is_stmt 1 view .LVU93
 363:quantum/matrix.c **** 
 563               		.loc 1 363 22 is_stmt 0 view .LVU94
 564 0098 AB81      		ldd r26,Y+3
 565 009a BC81      		ldd r27,Y+4
 566 009c 2D91      		ld r18,X+
 567 009e 3D91      		ld r19,X+
 568 00a0 BC83      		std Y+4,r27
 569 00a2 AB83      		std Y+3,r26
 570               	.LVL27:
 366:quantum/matrix.c ****         {
 571               		.loc 1 366 9 is_stmt 1 view .LVU95
 366:quantum/matrix.c ****         {
 572               		.loc 1 366 14 is_stmt 0 view .LVU96
 573 00a4 DA01      		movw r26,r20
 574 00a6 DD90      		ld r13,X+
 575 00a8 AD01      		movw r20,r26
 576               	.LVL28:
 366:quantum/matrix.c ****         {
 577               		.loc 1 366 14 view .LVU97
 578 00aa 8D2D      		mov r24,r13
 579 00ac 8295      		swap r24
 580 00ae 8F70      		andi r24,lo8(15)
 581 00b0 805E      		subi r24,lo8(-(32))
 582 00b2 90E0      		ldi r25,0
 583 00b4 DC01      		movw r26,r24
 584 00b6 8C91      		ld r24,X
 585 00b8 90E0      		ldi r25,0
 366:quantum/matrix.c ****         {
 586               		.loc 1 366 51 view .LVU98
 587 00ba BD2D      		mov r27,r13
 588 00bc BF70      		andi r27,lo8(15)
 366:quantum/matrix.c ****         {
 589               		.loc 1 366 83 view .LVU99
 590 00be 00C0      		rjmp 2f
 591               		1:
 592 00c0 9595      		asr r25
 593 00c2 8795      		ror r24
 594               		2:
 595 00c4 BA95      		dec r27
 596 00c6 02F4      		brpl 1b
 366:quantum/matrix.c ****         {
 597               		.loc 1 366 12 view .LVU100
 598 00c8 80FD      		sbrc r24,0
 599 00ca 00C0      		rjmp .L15
 369:quantum/matrix.c ****         }
 600               		.loc 1 369 13 is_stmt 1 view .LVU101
 369:quantum/matrix.c ****         }
 601               		.loc 1 369 39 is_stmt 0 view .LVU102
 602 00cc C901      		movw r24,r18
 603 00ce 862B      		or r24,r22
 604 00d0 972B      		or r25,r23
 605               	.L16:
 606 00d2 CB80      		ldd r12,Y+3
 607 00d4 DC80      		ldd r13,Y+4
 608 00d6 A2E0      		ldi r26,2
 609 00d8 CA1A      		sub r12,r26
 610 00da D108      		sbc r13,__zero_reg__
 611 00dc D601      		movw r26,r12
 612 00de 8D93      		st X+,r24
 613 00e0 9C93      		st X,r25
 378:quantum/matrix.c ****         {
 614               		.loc 1 378 9 is_stmt 1 view .LVU103
 378:quantum/matrix.c ****         {
 615               		.loc 1 378 12 is_stmt 0 view .LVU104
 616 00e2 2817      		cp r18,r24
 617 00e4 3907      		cpc r19,r25
 618 00e6 01F0      		breq .L17
 619 00e8 4424      		clr r4
 620 00ea 4394      		inc r4
 621               	.LVL29:
 622               	.L17:
 378:quantum/matrix.c ****         {
 623               		.loc 1 378 12 view .LVU105
 624               	.LBE55:
 359:quantum/matrix.c ****     {
 625               		.loc 1 359 66 is_stmt 1 view .LVU106
 359:quantum/matrix.c ****     {
 626               		.loc 1 359 42 view .LVU107
 627 00ec 8B81      		ldd r24,Y+3
 628 00ee 9C81      		ldd r25,Y+4
 629 00f0 6816      		cp r6,r24
 630 00f2 7906      		cpc r7,r25
 631 00f4 01F4      		brne .L18
 632               	.LBE61:
 385:quantum/matrix.c **** 
 633               		.loc 1 385 5 view .LVU108
 634               	.LVL30:
 635               	.LBB62:
 636               	.LBI62:
 397:quantum/matrix.c **** {
 637               		.loc 1 397 13 view .LVU109
 638               	.LBB63:
 399:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 639               		.loc 1 399 5 view .LVU110
 400:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 640               		.loc 1 400 5 view .LVU111
 641 00f6 81A1      		ldd r24,Z+33
 400:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 642               		.loc 1 400 30 is_stmt 0 view .LVU112
 643 00f8 5822      		and r5,r24
 644 00fa 51A2      		std Z+33,r5
 401:quantum/matrix.c **** }
 645               		.loc 1 401 5 is_stmt 1 view .LVU113
 646 00fc 82A1      		ldd r24,Z+34
 401:quantum/matrix.c **** }
 647               		.loc 1 401 30 is_stmt 0 view .LVU114
 648 00fe 8A29      		or r24,r10
 649 0100 82A3      		std Z+34,r24
 650               	.LVL31:
 401:quantum/matrix.c **** }
 651               		.loc 1 401 30 view .LVU115
 652               	.LBE63:
 653               	.LBE62:
 387:quantum/matrix.c **** }
 654               		.loc 1 387 5 is_stmt 1 view .LVU116
 387:quantum/matrix.c **** }
 655               		.loc 1 387 5 is_stmt 0 view .LVU117
 656               	.LBE65:
 657               	.LBE67:
 203:quantum/matrix.c ****                 debouncing = true;
 658               		.loc 1 203 13 is_stmt 1 view .LVU118
 203:quantum/matrix.c ****                 debouncing = true;
 659               		.loc 1 203 16 is_stmt 0 view .LVU119
 660 0102 4420      		tst r4
 661 0104 01F0      		breq .L19
 662               	.LVL32:
 204:quantum/matrix.c ****                 debouncing_time = timer_read();
 663               		.loc 1 204 17 is_stmt 1 view .LVU120
 204:quantum/matrix.c ****                 debouncing_time = timer_read();
 664               		.loc 1 204 28 is_stmt 0 view .LVU121
 665 0106 3092 0000 		sts debouncing,r3
 205:quantum/matrix.c ****             }
 666               		.loc 1 205 17 is_stmt 1 view .LVU122
 205:quantum/matrix.c ****             }
 667               		.loc 1 205 35 is_stmt 0 view .LVU123
 668 010a 0E94 0000 		call timer_read
 669               	.LVL33:
 205:quantum/matrix.c ****             }
 670               		.loc 1 205 33 view .LVU124
 671 010e 9093 0000 		sts debouncing_time+1,r25
 672 0112 8093 0000 		sts debouncing_time,r24
 673               	.LVL34:
 674               	.L19:
 205:quantum/matrix.c ****             }
 675               		.loc 1 205 33 view .LVU125
 676               	.LBE46:
 200:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 677               		.loc 1 200 73 is_stmt 1 discriminator 2 view .LVU126
 200:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 678               		.loc 1 200 47 discriminator 2 view .LVU127
 679 0116 A981      		ldd r26,Y+1
 680 0118 BA81      		ldd r27,Y+2
 681 011a 1196      		adiw r26,1
 682 011c BA83      		std Y+2,r27
 683 011e A983      		std Y+1,r26
 684               	.LVL35:
 200:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 685               		.loc 1 200 47 is_stmt 0 discriminator 2 view .LVU128
 686 0120 5097      		sbiw r26,16
 687 0122 01F0      		breq .+2
 688 0124 00C0      		rjmp .L20
 689               	.LBE70:
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 690               		.loc 1 216 9 is_stmt 1 view .LVU129
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 691               		.loc 1 216 12 is_stmt 0 view .LVU130
 692 0126 8091 0000 		lds r24,debouncing
 693 012a 8823      		tst r24
 694 012c 01F0      		breq .L22
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 695               		.loc 1 216 28 discriminator 1 view .LVU131
 696 012e 8091 0000 		lds r24,debouncing_time
 697 0132 9091 0000 		lds r25,debouncing_time+1
 698 0136 0E94 0000 		call timer_elapsed
 699               	.LVL36:
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 700               		.loc 1 216 24 discriminator 1 view .LVU132
 701 013a 0697      		sbiw r24,6
 702 013c 00F0      		brlo .L22
 703               	.LBB71:
 218:quantum/matrix.c ****             }
 704               		.loc 1 218 27 view .LVU133
 705 013e 80E1      		ldi r24,lo8(16)
 706 0140 E0E0      		ldi r30,lo8(matrix_debouncing)
 707 0142 F0E0      		ldi r31,hi8(matrix_debouncing)
 708 0144 A0E0      		ldi r26,lo8(matrix)
 709 0146 B0E0      		ldi r27,hi8(matrix)
 710               		0:
 711 0148 0190      		ld r0,Z+
 712 014a 0D92      		st X+,r0
 713 014c 8A95      		dec r24
 714 014e 01F4      		brne 0b
 715               	.LBE71:
 220:quantum/matrix.c ****         }
 716               		.loc 1 220 13 is_stmt 1 view .LVU134
 220:quantum/matrix.c ****         }
 717               		.loc 1 220 24 is_stmt 0 view .LVU135
 718 0150 1092 0000 		sts debouncing,__zero_reg__
 719               	.L22:
 224:quantum/matrix.c ****     return 1;
 720               		.loc 1 224 5 is_stmt 1 view .LVU136
 721 0154 0E94 0000 		call matrix_scan_quantum
 722               	.LVL37:
 225:quantum/matrix.c **** }
 723               		.loc 1 225 5 view .LVU137
 226:quantum/matrix.c **** 
 724               		.loc 1 226 1 is_stmt 0 view .LVU138
 725 0158 81E0      		ldi r24,lo8(1)
 726               	/* epilogue start */
 727 015a 0F90      		pop __tmp_reg__
 728 015c 0F90      		pop __tmp_reg__
 729 015e 0F90      		pop __tmp_reg__
 730 0160 0F90      		pop __tmp_reg__
 731 0162 DF91      		pop r29
 732 0164 CF91      		pop r28
 733 0166 1F91      		pop r17
 734 0168 0F91      		pop r16
 735 016a FF90      		pop r15
 736 016c EF90      		pop r14
 737 016e DF90      		pop r13
 738 0170 CF90      		pop r12
 739 0172 BF90      		pop r11
 740 0174 AF90      		pop r10
 741 0176 9F90      		pop r9
 742 0178 8F90      		pop r8
 743 017a 7F90      		pop r7
 744 017c 6F90      		pop r6
 745 017e 5F90      		pop r5
 746 0180 4F90      		pop r4
 747 0182 3F90      		pop r3
 748 0184 0895      		ret
 749               	.LVL38:
 750               	.L15:
 751               	.LBB72:
 752               	.LBB69:
 753               	.LBB68:
 754               	.LBB66:
 755               	.LBB64:
 756               	.LBB56:
 374:quantum/matrix.c ****         }
 757               		.loc 1 374 13 is_stmt 1 view .LVU139
 374:quantum/matrix.c ****         }
 758               		.loc 1 374 39 is_stmt 0 view .LVU140
 759 0186 C901      		movw r24,r18
 760 0188 8821      		and r24,r8
 761 018a 9921      		and r25,r9
 762 018c 00C0      		rjmp .L16
 763               	.LBE56:
 764               	.LBE64:
 765               	.LBE66:
 766               	.LBE68:
 767               	.LBE69:
 768               	.LBE72:
 769               		.cfi_endproc
 770               	.LFE19:
 772               		.section	.text.matrix_is_modified,"ax",@progbits
 773               	.global	matrix_is_modified
 775               	matrix_is_modified:
 776               	.LFB20:
 229:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 777               		.loc 1 229 1 is_stmt 1 view -0
 778               		.cfi_startproc
 779               	/* prologue: function */
 780               	/* frame size = 0 */
 781               	/* stack size = 0 */
 782               	.L__stack_usage = 0
 231:quantum/matrix.c **** #endif
 783               		.loc 1 231 5 view .LVU142
 231:quantum/matrix.c **** #endif
 784               		.loc 1 231 8 is_stmt 0 view .LVU143
 785 0000 8091 0000 		lds r24,debouncing
 234:quantum/matrix.c **** 
 786               		.loc 1 234 1 view .LVU144
 787 0004 91E0      		ldi r25,lo8(1)
 788 0006 8927      		eor r24,r25
 789               	/* epilogue start */
 790 0008 0895      		ret
 791               		.cfi_endproc
 792               	.LFE20:
 794               		.section	.text.matrix_is_on,"ax",@progbits
 795               	.global	matrix_is_on
 797               	matrix_is_on:
 798               	.LVL39:
 799               	.LFB21:
 238:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 800               		.loc 1 238 1 is_stmt 1 view -0
 801               		.cfi_startproc
 802               	/* prologue: function */
 803               	/* frame size = 0 */
 804               	/* stack size = 0 */
 805               	.L__stack_usage = 0
 239:quantum/matrix.c **** }
 806               		.loc 1 239 5 view .LVU146
 239:quantum/matrix.c **** }
 807               		.loc 1 239 19 is_stmt 0 view .LVU147
 808 0000 E82F      		mov r30,r24
 809 0002 F0E0      		ldi r31,0
 810 0004 EE0F      		lsl r30
 811 0006 FF1F      		rol r31
 812               	.LVL40:
 239:quantum/matrix.c **** }
 813               		.loc 1 239 19 view .LVU148
 814 0008 E050      		subi r30,lo8(-(matrix))
 815 000a F040      		sbci r31,hi8(-(matrix))
 239:quantum/matrix.c **** }
 816               		.loc 1 239 43 view .LVU149
 817 000c 21E0      		ldi r18,lo8(1)
 818 000e 30E0      		ldi r19,0
 819 0010 6230      		cpi r22,lo8(2)
 820 0012 00F4      		brsh .L32
 821 0014 20E0      		ldi r18,0
 822 0016 30E0      		ldi r19,0
 823               	.L32:
 239:quantum/matrix.c **** }
 824               		.loc 1 239 25 view .LVU150
 825 0018 8081      		ld r24,Z
 826 001a 9181      		ldd r25,Z+1
 827 001c 8223      		and r24,r18
 828 001e 9323      		and r25,r19
 240:quantum/matrix.c **** 
 829               		.loc 1 240 1 view .LVU151
 830 0020 8170      		andi r24,lo8(1)
 831               	/* epilogue start */
 832 0022 0895      		ret
 833               		.cfi_endproc
 834               	.LFE21:
 836               		.section	.text.matrix_get_row,"ax",@progbits
 837               	.global	matrix_get_row
 839               	matrix_get_row:
 840               	.LVL41:
 841               	.LFB22:
 244:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 842               		.loc 1 244 1 is_stmt 1 view -0
 843               		.cfi_startproc
 844               	/* prologue: function */
 845               	/* frame size = 0 */
 846               	/* stack size = 0 */
 847               	.L__stack_usage = 0
 250:quantum/matrix.c **** #endif
 848               		.loc 1 250 5 view .LVU153
 250:quantum/matrix.c **** #endif
 849               		.loc 1 250 18 is_stmt 0 view .LVU154
 850 0000 E82F      		mov r30,r24
 851 0002 F0E0      		ldi r31,0
 852 0004 EE0F      		lsl r30
 853 0006 FF1F      		rol r31
 854               	.LVL42:
 250:quantum/matrix.c **** #endif
 855               		.loc 1 250 18 view .LVU155
 856 0008 E050      		subi r30,lo8(-(matrix))
 857 000a F040      		sbci r31,hi8(-(matrix))
 252:quantum/matrix.c **** 
 858               		.loc 1 252 1 view .LVU156
 859 000c 8081      		ld r24,Z
 860 000e 9181      		ldd r25,Z+1
 861               	/* epilogue start */
 862 0010 0895      		ret
 863               		.cfi_endproc
 864               	.LFE22:
 866               		.section	.text.matrix_print,"ax",@progbits
 867               	.global	matrix_print
 869               	matrix_print:
 870               	.LFB23:
 255:quantum/matrix.c ****     print_matrix_header();
 871               		.loc 1 255 1 is_stmt 1 view -0
 872               		.cfi_startproc
 873               	/* prologue: function */
 874               	/* frame size = 0 */
 875               	/* stack size = 0 */
 876               	.L__stack_usage = 0
 256:quantum/matrix.c **** 
 877               		.loc 1 256 26 view .LVU158
 258:quantum/matrix.c ****         phex(row); print(": ");
 878               		.loc 1 258 5 view .LVU159
 258:quantum/matrix.c ****         phex(row); print(": ");
 879               		.loc 1 258 10 view .LVU160
 258:quantum/matrix.c ****         phex(row); print(": ");
 880               		.loc 1 258 31 view .LVU161
 881               	/* epilogue start */
 263:quantum/matrix.c **** 
 882               		.loc 1 263 1 is_stmt 0 view .LVU162
 883 0000 0895      		ret
 884               		.cfi_endproc
 885               	.LFE23:
 887               		.section	.text.matrix_key_count,"ax",@progbits
 888               	.global	matrix_key_count
 890               	matrix_key_count:
 891               	.LFB24:
 266:quantum/matrix.c ****     uint8_t count = 0;
 892               		.loc 1 266 1 is_stmt 1 view -0
 893               		.cfi_startproc
 894 0000 0F93      		push r16
 895               	.LCFI21:
 896               		.cfi_def_cfa_offset 3
 897               		.cfi_offset 16, -2
 898 0002 1F93      		push r17
 899               	.LCFI22:
 900               		.cfi_def_cfa_offset 4
 901               		.cfi_offset 17, -3
 902 0004 CF93      		push r28
 903               	.LCFI23:
 904               		.cfi_def_cfa_offset 5
 905               		.cfi_offset 28, -4
 906               	/* prologue: function */
 907               	/* frame size = 0 */
 908               	/* stack size = 3 */
 909               	.L__stack_usage = 3
 267:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 910               		.loc 1 267 5 view .LVU164
 911               	.LVL43:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 912               		.loc 1 268 5 view .LVU165
 913               	.LBB73:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 914               		.loc 1 268 10 view .LVU166
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 915               		.loc 1 268 27 view .LVU167
 916 0006 00E0      		ldi r16,lo8(matrix)
 917 0008 10E0      		ldi r17,hi8(matrix)
 918               	.LBE73:
 267:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 919               		.loc 1 267 13 is_stmt 0 view .LVU168
 920 000a C0E0      		ldi r28,0
 921               	.LVL44:
 922               	.L36:
 923               	.LBB74:
 269:quantum/matrix.c ****     }
 924               		.loc 1 269 9 is_stmt 1 discriminator 3 view .LVU169
 269:quantum/matrix.c ****     }
 925               		.loc 1 269 18 is_stmt 0 discriminator 3 view .LVU170
 926 000c F801      		movw r30,r16
 927 000e 8191      		ld r24,Z+
 928 0010 9191      		ld r25,Z+
 929 0012 8F01      		movw r16,r30
 930               	.LVL45:
 269:quantum/matrix.c ****     }
 931               		.loc 1 269 18 discriminator 3 view .LVU171
 932 0014 0E94 0000 		call bitpop16
 933               	.LVL46:
 269:quantum/matrix.c ****     }
 934               		.loc 1 269 15 discriminator 3 view .LVU172
 935 0018 C80F      		add r28,r24
 936               	.LVL47:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 937               		.loc 1 268 43 is_stmt 1 discriminator 3 view .LVU173
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 938               		.loc 1 268 27 discriminator 3 view .LVU174
 939 001a F0E0      		ldi r31,hi8(matrix+16)
 940 001c 0030      		cpi r16,lo8(matrix+16)
 941 001e 1F07      		cpc r17,r31
 942 0020 01F4      		brne .L36
 943               	.LBE74:
 271:quantum/matrix.c **** }
 944               		.loc 1 271 5 view .LVU175
 272:quantum/matrix.c **** 
 945               		.loc 1 272 1 is_stmt 0 view .LVU176
 946 0022 8C2F      		mov r24,r28
 947               	/* epilogue start */
 948 0024 CF91      		pop r28
 949               	.LVL48:
 272:quantum/matrix.c **** 
 950               		.loc 1 272 1 view .LVU177
 951 0026 1F91      		pop r17
 952 0028 0F91      		pop r16
 953               	.LVL49:
 272:quantum/matrix.c **** 
 954               		.loc 1 272 1 view .LVU178
 955 002a 0895      		ret
 956               		.cfi_endproc
 957               	.LFE24:
 959               		.section	.bss.matrix_debouncing,"aw",@nobits
 962               	matrix_debouncing:
 963 0000 0000 0000 		.zero	16
 963      0000 0000 
 963      0000 0000 
 963      0000 0000 
 964               		.section	.bss.matrix,"aw",@nobits
 967               	matrix:
 968 0000 0000 0000 		.zero	16
 968      0000 0000 
 968      0000 0000 
 968      0000 0000 
 969               		.section	.rodata.col_pins,"a"
 972               	col_pins:
 973 0000 F7F6 F5F4 		.ascii	"\367\366\365\364\363\362\361\360\306gfedcba"
 973      F3F2 F1F0 
 973      C667 6665 
 973      6463 6261 
 974               		.section	.rodata.row_pins,"a"
 977               	row_pins:
 978 0000 C730 3132 		.ascii	"\3070123465"
 978      3334 3635 
 979               		.section	.bss.debouncing,"aw",@nobits
 982               	debouncing:
 983 0000 00        		.zero	1
 984               		.section	.bss.debouncing_time,"aw",@nobits
 987               	debouncing_time:
 988 0000 0000      		.zero	2
 989               		.text
 990               	.Letext0:
 991               		.file 3 "/usr/avr/include/stdint.h"
 992               		.file 4 "./tmk_core/common/matrix.h"
 993               		.file 5 "./tmk_core/common/util.h"
 994               		.file 6 "./tmk_core/common/timer.h"
 995               		.file 7 "/usr/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/cc4g1S6g.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4g1S6g.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4g1S6g.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4g1S6g.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc4g1S6g.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4g1S6g.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4g1S6g.s:15     .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/cc4g1S6g.s:17     .text.matrix_init_user:0000000000000000 .Loc.0
     /tmp/cc4g1S6g.s:18     .text.matrix_init_user:0000000000000000 L0
     /tmp/cc4g1S6g.s:23     .text.matrix_init_user:0000000000000000 .Loc.1
     /tmp/cc4g1S6g.s:26     .text.matrix_init_user:0000000000000002 L0
     /tmp/cc4g1S6g.s:15     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias
     /tmp/cc4g1S6g.s:33     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/cc4g1S6g.s:35     .text.matrix_init_kb:0000000000000000 .Loc.2
     /tmp/cc4g1S6g.s:36     .text.matrix_init_kb:0000000000000000 L0
     /tmp/cc4g1S6g.s:41     .text.matrix_init_kb:0000000000000000 .Loc.3
     /tmp/cc4g1S6g.s:44     .text.matrix_init_kb:0000000000000004 L0
     /tmp/cc4g1S6g.s:50     .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/cc4g1S6g.s:52     .text.matrix_init_quantum:0000000000000000 .Loc.4
     /tmp/cc4g1S6g.s:53     .text.matrix_init_quantum:0000000000000000 L0
     /tmp/cc4g1S6g.s:58     .text.matrix_init_quantum:0000000000000000 .Loc.5
     /tmp/cc4g1S6g.s:61     .text.matrix_init_quantum:0000000000000004 L0
     /tmp/cc4g1S6g.s:67     .text.matrix_scan_user:0000000000000000 matrix_scan_user
     /tmp/cc4g1S6g.s:69     .text.matrix_scan_user:0000000000000000 L0
     /tmp/cc4g1S6g.s:70     .text.matrix_scan_user:0000000000000000 .Loc.6
     /tmp/cc4g1S6g.s:77     .text.matrix_scan_user:0000000000000002 L0
     /tmp/cc4g1S6g.s:83     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
     /tmp/cc4g1S6g.s:85     .text.matrix_scan_kb:0000000000000000 .Loc.7
     /tmp/cc4g1S6g.s:86     .text.matrix_scan_kb:0000000000000000 L0
     /tmp/cc4g1S6g.s:91     .text.matrix_scan_kb:0000000000000000 .Loc.8
     /tmp/cc4g1S6g.s:94     .text.matrix_scan_kb:0000000000000004 L0
     /tmp/cc4g1S6g.s:100    .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/cc4g1S6g.s:102    .text.matrix_scan_quantum:0000000000000000 .Loc.9
     /tmp/cc4g1S6g.s:103    .text.matrix_scan_quantum:0000000000000000 L0
     /tmp/cc4g1S6g.s:108    .text.matrix_scan_quantum:0000000000000000 .Loc.10
     /tmp/cc4g1S6g.s:111    .text.matrix_scan_quantum:0000000000000004 L0
     /tmp/cc4g1S6g.s:117    .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/cc4g1S6g.s:119    .text.matrix_rows:0000000000000000 .Loc.11
     /tmp/cc4g1S6g.s:120    .text.matrix_rows:0000000000000000 L0
     /tmp/cc4g1S6g.s:125    .text.matrix_rows:0000000000000000 .Loc.12
     /tmp/cc4g1S6g.s:126    .text.matrix_rows:0000000000000000 .Loc.13
     /tmp/cc4g1S6g.s:130    .text.matrix_rows:0000000000000004 L0
     /tmp/cc4g1S6g.s:136    .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/cc4g1S6g.s:138    .text.matrix_cols:0000000000000000 .Loc.14
     /tmp/cc4g1S6g.s:139    .text.matrix_cols:0000000000000000 L0
     /tmp/cc4g1S6g.s:144    .text.matrix_cols:0000000000000000 .Loc.15
     /tmp/cc4g1S6g.s:145    .text.matrix_cols:0000000000000000 .Loc.16
     /tmp/cc4g1S6g.s:149    .text.matrix_cols:0000000000000004 L0
     /tmp/cc4g1S6g.s:155    .text.matrix_init:0000000000000000 matrix_init
     /tmp/cc4g1S6g.s:157    .text.matrix_init:0000000000000000 .Loc.17
     /tmp/cc4g1S6g.s:158    .text.matrix_init:0000000000000000 L0
     /tmp/cc4g1S6g.s:171    .text.matrix_init:0000000000000004 .Loc.18
     /tmp/cc4g1S6g.s:173    .text.matrix_init:0000000000000006 .Loc.19
     /tmp/cc4g1S6g.s:176    .text.matrix_init:000000000000000a .Loc.20
     /tmp/cc4g1S6g.s:178    .text.matrix_init:000000000000000c .Loc.21
     /tmp/cc4g1S6g.s:181    .text.matrix_init:0000000000000010 .Loc.22
     /tmp/cc4g1S6g.s:184    .text.matrix_init:0000000000000010 .Loc.23
     /tmp/cc4g1S6g.s:185    .text.matrix_init:0000000000000010 .Loc.24
     /tmp/cc4g1S6g.s:187    .text.matrix_init:0000000000000010 .Loc.25
     /tmp/cc4g1S6g.s:189    .text.matrix_init:0000000000000010 .Loc.26
     /tmp/cc4g1S6g.s:972    .rodata.col_pins:0000000000000000 col_pins
     /tmp/cc4g1S6g.s:195    .text.matrix_init:0000000000000018 .Loc.27
     /tmp/cc4g1S6g.s:200    .text.matrix_init:000000000000001c .Loc.28
     /tmp/cc4g1S6g.s:201    .text.matrix_init:000000000000001c .Loc.29
     /tmp/cc4g1S6g.s:204    .text.matrix_init:000000000000001e .Loc.30
     /tmp/cc4g1S6g.s:210    .text.matrix_init:0000000000000028 .Loc.31
     /tmp/cc4g1S6g.s:213    .text.matrix_init:000000000000002a .Loc.32
     /tmp/cc4g1S6g.s:223    .text.matrix_init:0000000000000038 .Loc.33
     /tmp/cc4g1S6g.s:229    .text.matrix_init:0000000000000040 .Loc.34
     /tmp/cc4g1S6g.s:231    .text.matrix_init:0000000000000042 .Loc.35
     /tmp/cc4g1S6g.s:235    .text.matrix_init:0000000000000046 .Loc.36
     /tmp/cc4g1S6g.s:237    .text.matrix_init:0000000000000046 .Loc.37
     /tmp/cc4g1S6g.s:977    .rodata.row_pins:0000000000000000 row_pins
     /tmp/cc4g1S6g.s:244    .text.matrix_init:0000000000000050 .Loc.38
     /tmp/cc4g1S6g.s:252    .text.matrix_init:0000000000000054 .Loc.39
     /tmp/cc4g1S6g.s:257    .text.matrix_init:0000000000000058 .Loc.40
     /tmp/cc4g1S6g.s:258    .text.matrix_init:0000000000000058 .Loc.41
     /tmp/cc4g1S6g.s:261    .text.matrix_init:000000000000005a .Loc.42
     /tmp/cc4g1S6g.s:267    .text.matrix_init:0000000000000064 .Loc.43
     /tmp/cc4g1S6g.s:270    .text.matrix_init:0000000000000066 .Loc.44
     /tmp/cc4g1S6g.s:280    .text.matrix_init:0000000000000074 .Loc.45
     /tmp/cc4g1S6g.s:286    .text.matrix_init:000000000000007c .Loc.46
     /tmp/cc4g1S6g.s:288    .text.matrix_init:000000000000007e .Loc.47
     /tmp/cc4g1S6g.s:292    .text.matrix_init:0000000000000082 .Loc.48
     /tmp/cc4g1S6g.s:294    .text.matrix_init:0000000000000082 .Loc.49
     /tmp/cc4g1S6g.s:301    .text.matrix_init:0000000000000088 .Loc.50
     /tmp/cc4g1S6g.s:967    .bss.matrix:0000000000000000 matrix
     /tmp/cc4g1S6g.s:307    .text.matrix_init:0000000000000090 .Loc.51
     /tmp/cc4g1S6g.s:313    .text.matrix_init:0000000000000098 .Loc.52
     /tmp/cc4g1S6g.s:962    .bss.matrix_debouncing:0000000000000000 matrix_debouncing
     /tmp/cc4g1S6g.s:322    .text.matrix_init:00000000000000a4 .Loc.53
     /tmp/cc4g1S6g.s:324    .text.matrix_init:00000000000000a4 .Loc.54
     /tmp/cc4g1S6g.s:326    .text.matrix_init:00000000000000a4 .Loc.55
     /tmp/cc4g1S6g.s:329    .text.matrix_init:00000000000000a8 .Loc.56
     /tmp/cc4g1S6g.s:332    .text.matrix_init:00000000000000ac L0
     /tmp/cc4g1S6g.s:338    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/cc4g1S6g.s:340    .text.matrix_scan:0000000000000000 .Loc.57
     /tmp/cc4g1S6g.s:341    .text.matrix_scan:0000000000000000 L0
     /tmp/cc4g1S6g.s:410    .text.matrix_scan:0000000000000024 L0
     /tmp/cc4g1S6g.s:411    .text.matrix_scan:0000000000000026 L0
     /tmp/cc4g1S6g.s:422    .text.matrix_scan:000000000000002a .Loc.58
     /tmp/cc4g1S6g.s:424    .text.matrix_scan:000000000000002a .Loc.59
     /tmp/cc4g1S6g.s:426    .text.matrix_scan:000000000000002a .Loc.60
     /tmp/cc4g1S6g.s:430    .text.matrix_scan:000000000000002e .Loc.61
     /tmp/cc4g1S6g.s:439    .text.matrix_scan:0000000000000032 .Loc.62
     /tmp/cc4g1S6g.s:455    .text.matrix_scan:0000000000000044 .Loc.63
     /tmp/cc4g1S6g.s:460    .text.matrix_scan:0000000000000044 .Loc.64
     /tmp/cc4g1S6g.s:463    .text.matrix_scan:0000000000000044 .Loc.65
     /tmp/cc4g1S6g.s:465    .text.matrix_scan:0000000000000044 .Loc.66
     /tmp/cc4g1S6g.s:466    .text.matrix_scan:0000000000000044 .Loc.67
     /tmp/cc4g1S6g.s:469    .text.matrix_scan:0000000000000044 .Loc.68
     /tmp/cc4g1S6g.s:471    .text.matrix_scan:0000000000000044 .Loc.69
     /tmp/cc4g1S6g.s:472    .text.matrix_scan:0000000000000044 .Loc.70
     /tmp/cc4g1S6g.s:477    .text.matrix_scan:000000000000004a .Loc.71
     /tmp/cc4g1S6g.s:483    .text.matrix_scan:0000000000000054 .Loc.72
     /tmp/cc4g1S6g.s:486    .text.matrix_scan:0000000000000056 .Loc.73
     /tmp/cc4g1S6g.s:494    .text.matrix_scan:0000000000000060 .Loc.74
     /tmp/cc4g1S6g.s:499    .text.matrix_scan:0000000000000066 .Loc.75
     /tmp/cc4g1S6g.s:501    .text.matrix_scan:0000000000000068 .Loc.76
     /tmp/cc4g1S6g.s:507    .text.matrix_scan:0000000000000070 .Loc.77
     /tmp/cc4g1S6g.s:510    .text.matrix_scan:0000000000000070 .Loc.78
     /tmp/cc4g1S6g.s:514    .text.matrix_scan:0000000000000070 .Loc.79
     /tmp/cc4g1S6g.s:516    .text.matrix_scan:0000000000000070 .Loc.80
     /tmp/cc4g1S6g.s:517    .text.matrix_scan:0000000000000070 .Loc.81
     /tmp/cc4g1S6g.s:518    .text.matrix_scan:0000000000000070 .Loc.82
     /tmp/cc4g1S6g.s:519    .text.matrix_scan:0000000000000070 .Loc.83
     /tmp/cc4g1S6g.s:520    .text.matrix_scan:0000000000000070 .Loc.84
     /tmp/cc4g1S6g.s:521    .text.matrix_scan:0000000000000070 .Loc.85
     /tmp/cc4g1S6g.s:526    .text.matrix_scan:0000000000000076 .Loc.86
     /tmp/cc4g1S6g.s:529    .text.matrix_scan:0000000000000076 .Loc.87
     /tmp/cc4g1S6g.s:531    .text.matrix_scan:0000000000000076 .Loc.88
     /tmp/cc4g1S6g.s:532    .text.matrix_scan:0000000000000076 .Loc.89
     /tmp/cc4g1S6g.s:534    .text.matrix_scan:0000000000000076 .Loc.90
     /tmp/cc4g1S6g.s:544    .text.matrix_scan:0000000000000084 .Loc.91
     /tmp/cc4g1S6g.s:556    .text.matrix_scan:0000000000000096 .Loc.92
     /tmp/cc4g1S6g.s:562    .text.matrix_scan:0000000000000098 .Loc.93
     /tmp/cc4g1S6g.s:563    .text.matrix_scan:0000000000000098 .Loc.94
     /tmp/cc4g1S6g.s:571    .text.matrix_scan:00000000000000a4 .Loc.95
     /tmp/cc4g1S6g.s:572    .text.matrix_scan:00000000000000a4 .Loc.96
     /tmp/cc4g1S6g.s:577    .text.matrix_scan:00000000000000aa .Loc.97
     /tmp/cc4g1S6g.s:586    .text.matrix_scan:00000000000000ba .Loc.98
     /tmp/cc4g1S6g.s:589    .text.matrix_scan:00000000000000be .Loc.99
     /tmp/cc4g1S6g.s:597    .text.matrix_scan:00000000000000c8 .Loc.100
     /tmp/cc4g1S6g.s:600    .text.matrix_scan:00000000000000cc .Loc.101
     /tmp/cc4g1S6g.s:601    .text.matrix_scan:00000000000000cc .Loc.102
     /tmp/cc4g1S6g.s:614    .text.matrix_scan:00000000000000e2 .Loc.103
     /tmp/cc4g1S6g.s:615    .text.matrix_scan:00000000000000e2 .Loc.104
     /tmp/cc4g1S6g.s:623    .text.matrix_scan:00000000000000ec .Loc.105
     /tmp/cc4g1S6g.s:625    .text.matrix_scan:00000000000000ec .Loc.106
     /tmp/cc4g1S6g.s:626    .text.matrix_scan:00000000000000ec .Loc.107
     /tmp/cc4g1S6g.s:633    .text.matrix_scan:00000000000000f6 .Loc.108
     /tmp/cc4g1S6g.s:637    .text.matrix_scan:00000000000000f6 .Loc.109
     /tmp/cc4g1S6g.s:639    .text.matrix_scan:00000000000000f6 .Loc.110
     /tmp/cc4g1S6g.s:640    .text.matrix_scan:00000000000000f6 .Loc.111
     /tmp/cc4g1S6g.s:642    .text.matrix_scan:00000000000000f8 .Loc.112
     /tmp/cc4g1S6g.s:645    .text.matrix_scan:00000000000000fc .Loc.113
     /tmp/cc4g1S6g.s:647    .text.matrix_scan:00000000000000fe .Loc.114
     /tmp/cc4g1S6g.s:651    .text.matrix_scan:0000000000000102 .Loc.115
     /tmp/cc4g1S6g.s:654    .text.matrix_scan:0000000000000102 .Loc.116
     /tmp/cc4g1S6g.s:655    .text.matrix_scan:0000000000000102 .Loc.117
     /tmp/cc4g1S6g.s:658    .text.matrix_scan:0000000000000102 .Loc.118
     /tmp/cc4g1S6g.s:659    .text.matrix_scan:0000000000000102 .Loc.119
     /tmp/cc4g1S6g.s:663    .text.matrix_scan:0000000000000106 .Loc.120
     /tmp/cc4g1S6g.s:664    .text.matrix_scan:0000000000000106 .Loc.121
     /tmp/cc4g1S6g.s:982    .bss.debouncing:0000000000000000 debouncing
     /tmp/cc4g1S6g.s:666    .text.matrix_scan:000000000000010a .Loc.122
     /tmp/cc4g1S6g.s:667    .text.matrix_scan:000000000000010a .Loc.123
     /tmp/cc4g1S6g.s:670    .text.matrix_scan:000000000000010e .Loc.124
     /tmp/cc4g1S6g.s:987    .bss.debouncing_time:0000000000000000 debouncing_time
     /tmp/cc4g1S6g.s:675    .text.matrix_scan:0000000000000116 .Loc.125
     /tmp/cc4g1S6g.s:677    .text.matrix_scan:0000000000000116 .Loc.126
     /tmp/cc4g1S6g.s:678    .text.matrix_scan:0000000000000116 .Loc.127
     /tmp/cc4g1S6g.s:685    .text.matrix_scan:0000000000000120 .Loc.128
     /tmp/cc4g1S6g.s:687    .text.matrix_scan:0000000000000124 L0
     /tmp/cc4g1S6g.s:690    .text.matrix_scan:0000000000000126 .Loc.129
     /tmp/cc4g1S6g.s:691    .text.matrix_scan:0000000000000126 .Loc.130
     /tmp/cc4g1S6g.s:695    .text.matrix_scan:000000000000012e .Loc.131
     /tmp/cc4g1S6g.s:700    .text.matrix_scan:000000000000013a .Loc.132
     /tmp/cc4g1S6g.s:704    .text.matrix_scan:000000000000013e .Loc.133
     /tmp/cc4g1S6g.s:716    .text.matrix_scan:0000000000000150 .Loc.134
     /tmp/cc4g1S6g.s:717    .text.matrix_scan:0000000000000150 .Loc.135
     /tmp/cc4g1S6g.s:720    .text.matrix_scan:0000000000000154 .Loc.136
     /tmp/cc4g1S6g.s:723    .text.matrix_scan:0000000000000158 .Loc.137
     /tmp/cc4g1S6g.s:724    .text.matrix_scan:0000000000000158 .Loc.138
     /tmp/cc4g1S6g.s:757    .text.matrix_scan:0000000000000186 .Loc.139
     /tmp/cc4g1S6g.s:758    .text.matrix_scan:0000000000000186 .Loc.140
     /tmp/cc4g1S6g.s:769    .text.matrix_scan:000000000000018e L0
     /tmp/cc4g1S6g.s:775    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/cc4g1S6g.s:777    .text.matrix_is_modified:0000000000000000 .Loc.141
     /tmp/cc4g1S6g.s:778    .text.matrix_is_modified:0000000000000000 L0
     /tmp/cc4g1S6g.s:783    .text.matrix_is_modified:0000000000000000 .Loc.142
     /tmp/cc4g1S6g.s:784    .text.matrix_is_modified:0000000000000000 .Loc.143
     /tmp/cc4g1S6g.s:786    .text.matrix_is_modified:0000000000000004 .Loc.144
     /tmp/cc4g1S6g.s:791    .text.matrix_is_modified:000000000000000a L0
     /tmp/cc4g1S6g.s:797    .text.matrix_is_on:0000000000000000 matrix_is_on
     /tmp/cc4g1S6g.s:800    .text.matrix_is_on:0000000000000000 .Loc.145
     /tmp/cc4g1S6g.s:801    .text.matrix_is_on:0000000000000000 L0
     /tmp/cc4g1S6g.s:806    .text.matrix_is_on:0000000000000000 .Loc.146
     /tmp/cc4g1S6g.s:807    .text.matrix_is_on:0000000000000000 .Loc.147
     /tmp/cc4g1S6g.s:813    .text.matrix_is_on:0000000000000008 .Loc.148
     /tmp/cc4g1S6g.s:816    .text.matrix_is_on:000000000000000c .Loc.149
     /tmp/cc4g1S6g.s:824    .text.matrix_is_on:0000000000000018 .Loc.150
     /tmp/cc4g1S6g.s:829    .text.matrix_is_on:0000000000000020 .Loc.151
     /tmp/cc4g1S6g.s:833    .text.matrix_is_on:0000000000000024 L0
     /tmp/cc4g1S6g.s:839    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/cc4g1S6g.s:842    .text.matrix_get_row:0000000000000000 .Loc.152
     /tmp/cc4g1S6g.s:843    .text.matrix_get_row:0000000000000000 L0
     /tmp/cc4g1S6g.s:848    .text.matrix_get_row:0000000000000000 .Loc.153
     /tmp/cc4g1S6g.s:849    .text.matrix_get_row:0000000000000000 .Loc.154
     /tmp/cc4g1S6g.s:855    .text.matrix_get_row:0000000000000008 .Loc.155
     /tmp/cc4g1S6g.s:858    .text.matrix_get_row:000000000000000c .Loc.156
     /tmp/cc4g1S6g.s:863    .text.matrix_get_row:0000000000000012 L0
     /tmp/cc4g1S6g.s:869    .text.matrix_print:0000000000000000 matrix_print
     /tmp/cc4g1S6g.s:871    .text.matrix_print:0000000000000000 .Loc.157
     /tmp/cc4g1S6g.s:872    .text.matrix_print:0000000000000000 L0
     /tmp/cc4g1S6g.s:877    .text.matrix_print:0000000000000000 .Loc.158
     /tmp/cc4g1S6g.s:878    .text.matrix_print:0000000000000000 .Loc.159
     /tmp/cc4g1S6g.s:879    .text.matrix_print:0000000000000000 .Loc.160
     /tmp/cc4g1S6g.s:880    .text.matrix_print:0000000000000000 .Loc.161
     /tmp/cc4g1S6g.s:882    .text.matrix_print:0000000000000000 .Loc.162
     /tmp/cc4g1S6g.s:884    .text.matrix_print:0000000000000002 L0
     /tmp/cc4g1S6g.s:890    .text.matrix_key_count:0000000000000000 matrix_key_count
     /tmp/cc4g1S6g.s:892    .text.matrix_key_count:0000000000000000 .Loc.163
     /tmp/cc4g1S6g.s:893    .text.matrix_key_count:0000000000000000 L0
     /tmp/cc4g1S6g.s:910    .text.matrix_key_count:0000000000000006 .Loc.164
     /tmp/cc4g1S6g.s:912    .text.matrix_key_count:0000000000000006 .Loc.165
     /tmp/cc4g1S6g.s:914    .text.matrix_key_count:0000000000000006 .Loc.166
     /tmp/cc4g1S6g.s:915    .text.matrix_key_count:0000000000000006 .Loc.167
     /tmp/cc4g1S6g.s:919    .text.matrix_key_count:000000000000000a .Loc.168
     /tmp/cc4g1S6g.s:924    .text.matrix_key_count:000000000000000c .Loc.169
     /tmp/cc4g1S6g.s:925    .text.matrix_key_count:000000000000000c .Loc.170
     /tmp/cc4g1S6g.s:931    .text.matrix_key_count:0000000000000014 .Loc.171
     /tmp/cc4g1S6g.s:934    .text.matrix_key_count:0000000000000018 .Loc.172
     /tmp/cc4g1S6g.s:937    .text.matrix_key_count:000000000000001a .Loc.173
     /tmp/cc4g1S6g.s:938    .text.matrix_key_count:000000000000001a .Loc.174
     /tmp/cc4g1S6g.s:944    .text.matrix_key_count:0000000000000022 .Loc.175
     /tmp/cc4g1S6g.s:945    .text.matrix_key_count:0000000000000022 .Loc.176
     /tmp/cc4g1S6g.s:950    .text.matrix_key_count:0000000000000026 .Loc.177
     /tmp/cc4g1S6g.s:954    .text.matrix_key_count:000000000000002a .Loc.178
     /tmp/cc4g1S6g.s:956    .text.matrix_key_count:000000000000002c L0
     /tmp/cc4g1S6g.s:30     .text.matrix_init_user:0000000000000002 L0
     /tmp/cc4g1S6g.s:47     .text.matrix_init_kb:0000000000000004 L0
     /tmp/cc4g1S6g.s:64     .text.matrix_init_quantum:0000000000000004 L0
     /tmp/cc4g1S6g.s:80     .text.matrix_scan_user:0000000000000002 L0
     /tmp/cc4g1S6g.s:97     .text.matrix_scan_kb:0000000000000004 L0
     /tmp/cc4g1S6g.s:114    .text.matrix_scan_quantum:0000000000000004 L0
     /tmp/cc4g1S6g.s:133    .text.matrix_rows:0000000000000004 L0
     /tmp/cc4g1S6g.s:152    .text.matrix_cols:0000000000000004 L0
     /tmp/cc4g1S6g.s:335    .text.matrix_init:00000000000000ac L0
     /tmp/cc4g1S6g.s:772    .text.matrix_scan:000000000000018e L0
     /tmp/cc4g1S6g.s:794    .text.matrix_is_modified:000000000000000a L0
     /tmp/cc4g1S6g.s:836    .text.matrix_is_on:0000000000000024 L0
     /tmp/cc4g1S6g.s:866    .text.matrix_get_row:0000000000000012 L0
     /tmp/cc4g1S6g.s:887    .text.matrix_print:0000000000000002 L0
     /tmp/cc4g1S6g.s:959    .text.matrix_key_count:000000000000002c L0
                     .debug_frame:0000000000000000 L0
     /tmp/cc4g1S6g.s:219    .text.matrix_init:0000000000000032 .L21
     /tmp/cc4g1S6g.s:216    .text.matrix_init:000000000000002e .L11
     /tmp/cc4g1S6g.s:199    .text.matrix_init:000000000000001c .L10
     /tmp/cc4g1S6g.s:276    .text.matrix_init:000000000000006e .L22
     /tmp/cc4g1S6g.s:273    .text.matrix_init:000000000000006a .L12
     /tmp/cc4g1S6g.s:256    .text.matrix_init:0000000000000058 .L11
     /tmp/cc4g1S6g.s:309    .text.matrix_init:0000000000000092 .L1
     /tmp/cc4g1S6g.s:317    .text.matrix_init:000000000000009e .L2
     /tmp/cc4g1S6g.s:491    .text.matrix_scan:000000000000005c .L23
     /tmp/cc4g1S6g.s:489    .text.matrix_scan:000000000000005a .L13
     /tmp/cc4g1S6g.s:523    .text.matrix_scan:0000000000000072 .L14
     /tmp/cc4g1S6g.s:541    .text.matrix_scan:0000000000000080 .L24
     /tmp/cc4g1S6g.s:538    .text.matrix_scan:000000000000007c .L15
     /tmp/cc4g1S6g.s:594    .text.matrix_scan:00000000000000c4 .L25
     /tmp/cc4g1S6g.s:591    .text.matrix_scan:00000000000000c0 .L16
     /tmp/cc4g1S6g.s:750    .text.matrix_scan:0000000000000186 .L15
     /tmp/cc4g1S6g.s:622    .text.matrix_scan:00000000000000ec .L17
     /tmp/cc4g1S6g.s:559    .text.matrix_scan:0000000000000098 .L18
     /tmp/cc4g1S6g.s:674    .text.matrix_scan:0000000000000116 .L19
     /tmp/cc4g1S6g.s:454    .text.matrix_scan:0000000000000044 .L20
     /tmp/cc4g1S6g.s:719    .text.matrix_scan:0000000000000154 .L22
     /tmp/cc4g1S6g.s:710    .text.matrix_scan:0000000000000148 .L3
     /tmp/cc4g1S6g.s:605    .text.matrix_scan:00000000000000d2 .L16
     /tmp/cc4g1S6g.s:823    .text.matrix_is_on:0000000000000018 .L32
     /tmp/cc4g1S6g.s:922    .text.matrix_key_count:000000000000000c .L36
     /tmp/cc4g1S6g.s:1916   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc4g1S6g.s:3537   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cc4g1S6g.s:3625   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc4g1S6g.s:891    .text.matrix_key_count:0000000000000000 .LFB24
     /tmp/cc4g1S6g.s:957    .text.matrix_key_count:000000000000002c .LFE24
     /tmp/cc4g1S6g.s:2893   .debug_loc:0000000000000000 .LLST17
     /tmp/cc4g1S6g.s:2927   .debug_loc:0000000000000042 .LLST18
     /tmp/cc4g1S6g.s:2920   .debug_loc:000000000000003c .LVUS18
     /tmp/cc4g1S6g.s:2952   .debug_loc:0000000000000074 .LLST19
     /tmp/cc4g1S6g.s:2943   .debug_loc:000000000000006c .LVUS19
     /tmp/cc4g1S6g.s:933    .text.matrix_key_count:0000000000000018 .LVL46
     /tmp/cc4g1S6g.s:870    .text.matrix_print:0000000000000000 .LFB23
     /tmp/cc4g1S6g.s:885    .text.matrix_print:0000000000000002 .LFE23
     /tmp/cc4g1S6g.s:841    .text.matrix_get_row:0000000000000000 .LFB22
     /tmp/cc4g1S6g.s:864    .text.matrix_get_row:0000000000000012 .LFE22
     /tmp/cc4g1S6g.s:3000   .debug_loc:00000000000000cd .LLST16
     /tmp/cc4g1S6g.s:2995   .debug_loc:00000000000000c9 .LVUS16
     /tmp/cc4g1S6g.s:799    .text.matrix_is_on:0000000000000000 .LFB21
     /tmp/cc4g1S6g.s:834    .text.matrix_is_on:0000000000000024 .LFE21
     /tmp/cc4g1S6g.s:3019   .debug_loc:00000000000000f2 .LLST15
     /tmp/cc4g1S6g.s:3014   .debug_loc:00000000000000ee .LVUS15
     /tmp/cc4g1S6g.s:776    .text.matrix_is_modified:0000000000000000 .LFB20
     /tmp/cc4g1S6g.s:792    .text.matrix_is_modified:000000000000000a .LFE20
     /tmp/cc4g1S6g.s:339    .text.matrix_scan:0000000000000000 .LFB19
     /tmp/cc4g1S6g.s:770    .text.matrix_scan:000000000000018e .LFE19
     /tmp/cc4g1S6g.s:3033   .debug_loc:0000000000000113 .LLST5
     /tmp/cc4g1S6g.s:3160   .debug_loc:0000000000000222 .LLST6
     /tmp/cc4g1S6g.s:3155   .debug_loc:000000000000021e .LVUS6
     /tmp/cc4g1S6g.s:3183   .debug_loc:000000000000024b .LLST7
     /tmp/cc4g1S6g.s:3178   .debug_loc:0000000000000247 .LVUS7
     /tmp/cc4g1S6g.s:462    .text.matrix_scan:0000000000000044 .LBI47
     /tmp/cc4g1S6g.s:3202   .debug_loc:0000000000000270 .LLST8
     /tmp/cc4g1S6g.s:3195   .debug_loc:000000000000026a .LVUS8
     /tmp/cc4g1S6g.s:468    .text.matrix_scan:0000000000000044 .LBI49
     /tmp/cc4g1S6g.s:3223   .debug_loc:000000000000029e .LLST9
     /tmp/cc4g1S6g.s:3218   .debug_loc:000000000000029a .LVUS9
     /tmp/cc4g1S6g.s:3246   .debug_loc:00000000000002c7 .LLST10
     /tmp/cc4g1S6g.s:3235   .debug_loc:00000000000002bd .LVUS10
     /tmp/cc4g1S6g.s:3299   .debug_loc:000000000000032f .LLST11
     /tmp/cc4g1S6g.s:3294   .debug_loc:000000000000032b .LVUS11
     /tmp/cc4g1S6g.s:512    .text.matrix_scan:0000000000000070 .LBI58
     /tmp/cc4g1S6g.s:511    .text.matrix_scan:0000000000000070 .LBB58
     /tmp/cc4g1S6g.s:528    .text.matrix_scan:0000000000000076 .LBE58
     /tmp/cc4g1S6g.s:3323   .debug_loc:0000000000000359 .LLST12
     /tmp/cc4g1S6g.s:3320   .debug_loc:0000000000000357 .LVUS12
     /tmp/cc4g1S6g.s:3335   .debug_loc:0000000000000373 .LLST13
     /tmp/cc4g1S6g.s:3332   .debug_loc:0000000000000371 .LVUS13
     /tmp/cc4g1S6g.s:3347   .debug_loc:000000000000038d .LLST14
     /tmp/cc4g1S6g.s:3344   .debug_loc:000000000000038b .LVUS14
     /tmp/cc4g1S6g.s:636    .text.matrix_scan:00000000000000f6 .LBI62
     /tmp/cc4g1S6g.s:635    .text.matrix_scan:00000000000000f6 .LBB62
     /tmp/cc4g1S6g.s:653    .text.matrix_scan:0000000000000102 .LBE62
     /tmp/cc4g1S6g.s:669    .text.matrix_scan:000000000000010e .LVL33
     /tmp/cc4g1S6g.s:703    .text.matrix_scan:000000000000013e .LBB71
     /tmp/cc4g1S6g.s:715    .text.matrix_scan:0000000000000150 .LBE71
     /tmp/cc4g1S6g.s:699    .text.matrix_scan:000000000000013a .LVL36
     /tmp/cc4g1S6g.s:722    .text.matrix_scan:0000000000000158 .LVL37
     /tmp/cc4g1S6g.s:156    .text.matrix_init:0000000000000000 .LFB18
     /tmp/cc4g1S6g.s:333    .text.matrix_init:00000000000000ac .LFE18
     /tmp/cc4g1S6g.s:3356   .debug_loc:00000000000003a3 .LLST0
     /tmp/cc4g1S6g.s:300    .text.matrix_init:0000000000000088 .LBB27
     /tmp/cc4g1S6g.s:323    .text.matrix_init:00000000000000a4 .LBE27
     /tmp/cc4g1S6g.s:183    .text.matrix_init:0000000000000010 .LBI21
     /tmp/cc4g1S6g.s:182    .text.matrix_init:0000000000000010 .LBB21
     /tmp/cc4g1S6g.s:248    .text.matrix_init:0000000000000054 .LBE21
     /tmp/cc4g1S6g.s:186    .text.matrix_init:0000000000000010 .LBB22
     /tmp/cc4g1S6g.s:247    .text.matrix_init:0000000000000054 .LBE22
     /tmp/cc4g1S6g.s:3386   .debug_loc:00000000000003da .LLST1
     /tmp/cc4g1S6g.s:3377   .debug_loc:00000000000003d2 .LVUS1
     /tmp/cc4g1S6g.s:194    .text.matrix_init:0000000000000018 .LBB23
     /tmp/cc4g1S6g.s:234    .text.matrix_init:0000000000000046 .LBE23
     /tmp/cc4g1S6g.s:3428   .debug_loc:000000000000042d .LLST2
     /tmp/cc4g1S6g.s:3423   .debug_loc:0000000000000429 .LVUS2
     /tmp/cc4g1S6g.s:249    .text.matrix_init:0000000000000054 .LBB24
     /tmp/cc4g1S6g.s:299    .text.matrix_init:0000000000000088 .LBE24
     /tmp/cc4g1S6g.s:250    .text.matrix_init:0000000000000054 .LBB25
     /tmp/cc4g1S6g.s:298    .text.matrix_init:0000000000000088 .LBE25
     /tmp/cc4g1S6g.s:3447   .debug_loc:0000000000000452 .LLST3
     /tmp/cc4g1S6g.s:3440   .debug_loc:000000000000044c .LVUS3
     /tmp/cc4g1S6g.s:251    .text.matrix_init:0000000000000054 .LBB26
     /tmp/cc4g1S6g.s:291    .text.matrix_init:0000000000000082 .LBE26
     /tmp/cc4g1S6g.s:3484   .debug_loc:0000000000000499 .LLST4
     /tmp/cc4g1S6g.s:3479   .debug_loc:0000000000000495 .LVUS4
     /tmp/cc4g1S6g.s:331    .text.matrix_init:00000000000000ac .LVL18
     /tmp/cc4g1S6g.s:137    .text.matrix_cols:0000000000000000 .LFB17
     /tmp/cc4g1S6g.s:150    .text.matrix_cols:0000000000000004 .LFE17
     /tmp/cc4g1S6g.s:118    .text.matrix_rows:0000000000000000 .LFB16
     /tmp/cc4g1S6g.s:131    .text.matrix_rows:0000000000000004 .LFE16
     /tmp/cc4g1S6g.s:16     .text.matrix_init_user:0000000000000000 .LFB14
     /tmp/cc4g1S6g.s:27     .text.matrix_init_user:0000000000000002 .LFE14
     /tmp/cc4g1S6g.s:84     .text.matrix_scan_kb:0000000000000000 .LFB13
     /tmp/cc4g1S6g.s:95     .text.matrix_scan_kb:0000000000000004 .LFE13
     /tmp/cc4g1S6g.s:93     .text.matrix_scan_kb:0000000000000004 .LVL2
     /tmp/cc4g1S6g.s:34     .text.matrix_init_kb:0000000000000000 .LFB12
     /tmp/cc4g1S6g.s:45     .text.matrix_init_kb:0000000000000004 .LFE12
     /tmp/cc4g1S6g.s:43     .text.matrix_init_kb:0000000000000004 .LVL0
     /tmp/cc4g1S6g.s:101    .text.matrix_scan_quantum:0000000000000000 .LFB11
     /tmp/cc4g1S6g.s:112    .text.matrix_scan_quantum:0000000000000004 .LFE11
     /tmp/cc4g1S6g.s:110    .text.matrix_scan_quantum:0000000000000004 .LVL3
     /tmp/cc4g1S6g.s:51     .text.matrix_init_quantum:0000000000000000 .LFB10
     /tmp/cc4g1S6g.s:62     .text.matrix_init_quantum:0000000000000004 .LFE10
     /tmp/cc4g1S6g.s:60     .text.matrix_init_quantum:0000000000000004 .LVL1
     /tmp/cc4g1S6g.s:895    .text.matrix_key_count:0000000000000002 .LCFI21
     /tmp/cc4g1S6g.s:899    .text.matrix_key_count:0000000000000004 .LCFI22
     /tmp/cc4g1S6g.s:903    .text.matrix_key_count:0000000000000006 .LCFI23
     /tmp/cc4g1S6g.s:911    .text.matrix_key_count:0000000000000006 .LVL43
     /tmp/cc4g1S6g.s:921    .text.matrix_key_count:000000000000000c .LVL44
     /tmp/cc4g1S6g.s:949    .text.matrix_key_count:0000000000000026 .LVL48
     /tmp/cc4g1S6g.s:930    .text.matrix_key_count:0000000000000014 .LVL45
     /tmp/cc4g1S6g.s:936    .text.matrix_key_count:000000000000001a .LVL47
     /tmp/cc4g1S6g.s:953    .text.matrix_key_count:000000000000002a .LVL49
     /tmp/cc4g1S6g.s:840    .text.matrix_get_row:0000000000000000 .LVL41
     /tmp/cc4g1S6g.s:854    .text.matrix_get_row:0000000000000008 .LVL42
     /tmp/cc4g1S6g.s:798    .text.matrix_is_on:0000000000000000 .LVL39
     /tmp/cc4g1S6g.s:812    .text.matrix_is_on:0000000000000008 .LVL40
     /tmp/cc4g1S6g.s:343    .text.matrix_scan:0000000000000002 .LCFI2
     /tmp/cc4g1S6g.s:347    .text.matrix_scan:0000000000000004 .LCFI3
     /tmp/cc4g1S6g.s:351    .text.matrix_scan:0000000000000006 .LCFI4
     /tmp/cc4g1S6g.s:355    .text.matrix_scan:0000000000000008 .LCFI5
     /tmp/cc4g1S6g.s:359    .text.matrix_scan:000000000000000a .LCFI6
     /tmp/cc4g1S6g.s:363    .text.matrix_scan:000000000000000c .LCFI7
     /tmp/cc4g1S6g.s:367    .text.matrix_scan:000000000000000e .LCFI8
     /tmp/cc4g1S6g.s:371    .text.matrix_scan:0000000000000010 .LCFI9
     /tmp/cc4g1S6g.s:375    .text.matrix_scan:0000000000000012 .LCFI10
     /tmp/cc4g1S6g.s:379    .text.matrix_scan:0000000000000014 .LCFI11
     /tmp/cc4g1S6g.s:383    .text.matrix_scan:0000000000000016 .LCFI12
     /tmp/cc4g1S6g.s:387    .text.matrix_scan:0000000000000018 .LCFI13
     /tmp/cc4g1S6g.s:391    .text.matrix_scan:000000000000001a .LCFI14
     /tmp/cc4g1S6g.s:395    .text.matrix_scan:000000000000001c .LCFI15
     /tmp/cc4g1S6g.s:399    .text.matrix_scan:000000000000001e .LCFI16
     /tmp/cc4g1S6g.s:403    .text.matrix_scan:0000000000000020 .LCFI17
     /tmp/cc4g1S6g.s:407    .text.matrix_scan:0000000000000022 .LCFI18
     /tmp/cc4g1S6g.s:412    .text.matrix_scan:0000000000000026 .LCFI19
     /tmp/cc4g1S6g.s:416    .text.matrix_scan:000000000000002a .LCFI20
     /tmp/cc4g1S6g.s:425    .text.matrix_scan:000000000000002a .LVL19
     /tmp/cc4g1S6g.s:453    .text.matrix_scan:0000000000000044 .LVL20
     /tmp/cc4g1S6g.s:673    .text.matrix_scan:0000000000000116 .LVL34
     /tmp/cc4g1S6g.s:684    .text.matrix_scan:0000000000000120 .LVL35
     /tmp/cc4g1S6g.s:650    .text.matrix_scan:0000000000000102 .LVL31
     /tmp/cc4g1S6g.s:662    .text.matrix_scan:0000000000000106 .LVL32
     /tmp/cc4g1S6g.s:558    .text.matrix_scan:0000000000000098 .LVL26
     /tmp/cc4g1S6g.s:749    .text.matrix_scan:0000000000000186 .LVL38
     /tmp/cc4g1S6g.s:476    .text.matrix_scan:000000000000004a .LVL21
     /tmp/cc4g1S6g.s:485    .text.matrix_scan:0000000000000056 .LVL22
     /tmp/cc4g1S6g.s:498    .text.matrix_scan:0000000000000066 .LVL23
     /tmp/cc4g1S6g.s:525    .text.matrix_scan:0000000000000076 .LVL25
     /tmp/cc4g1S6g.s:576    .text.matrix_scan:00000000000000aa .LVL28
     /tmp/cc4g1S6g.s:621    .text.matrix_scan:00000000000000ec .LVL29
     /tmp/cc4g1S6g.s:570    .text.matrix_scan:00000000000000a4 .LVL27
     /tmp/cc4g1S6g.s:506    .text.matrix_scan:0000000000000070 .LVL24
     /tmp/cc4g1S6g.s:160    .text.matrix_init:0000000000000002 .LCFI0
     /tmp/cc4g1S6g.s:164    .text.matrix_init:0000000000000004 .LCFI1
     /tmp/cc4g1S6g.s:188    .text.matrix_init:0000000000000010 .LVL4
     /tmp/cc4g1S6g.s:198    .text.matrix_init:000000000000001c .LVL5
     /tmp/cc4g1S6g.s:203    .text.matrix_init:000000000000001e .LVL6
     /tmp/cc4g1S6g.s:236    .text.matrix_init:0000000000000046 .LVL9
     /tmp/cc4g1S6g.s:243    .text.matrix_init:0000000000000050 .LVL10
     /tmp/cc4g1S6g.s:212    .text.matrix_init:000000000000002a .LVL7
     /tmp/cc4g1S6g.s:228    .text.matrix_init:0000000000000040 .LVL8
     /tmp/cc4g1S6g.s:255    .text.matrix_init:0000000000000058 .LVL11
     /tmp/cc4g1S6g.s:260    .text.matrix_init:000000000000005a .LVL12
     /tmp/cc4g1S6g.s:293    .text.matrix_init:0000000000000082 .LVL15
     /tmp/cc4g1S6g.s:306    .text.matrix_init:0000000000000090 .LVL16
     /tmp/cc4g1S6g.s:269    .text.matrix_init:0000000000000066 .LVL13
     /tmp/cc4g1S6g.s:285    .text.matrix_init:000000000000007c .LVL14
     /tmp/cc4g1S6g.s:997    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cc4g1S6g.s:68     .text.matrix_scan_user:0000000000000000 .LFB31
     /tmp/cc4g1S6g.s:78     .text.matrix_scan_user:0000000000000002 .LFE31
     /tmp/cc4g1S6g.s:423    .text.matrix_scan:000000000000002a .LBB45
     /tmp/cc4g1S6g.s:429    .text.matrix_scan:000000000000002e .LBE45
     /tmp/cc4g1S6g.s:433    .text.matrix_scan:0000000000000032 .LBB70
     /tmp/cc4g1S6g.s:689    .text.matrix_scan:0000000000000126 .LBE70
     /tmp/cc4g1S6g.s:751    .text.matrix_scan:0000000000000186 .LBB72
     /tmp/cc4g1S6g.s:768    .text.matrix_scan:000000000000018e .LBE72
     /tmp/cc4g1S6g.s:434    .text.matrix_scan:0000000000000032 .LBB46
     /tmp/cc4g1S6g.s:676    .text.matrix_scan:0000000000000116 .LBE46
     /tmp/cc4g1S6g.s:752    .text.matrix_scan:0000000000000186 .LBB69
     /tmp/cc4g1S6g.s:767    .text.matrix_scan:000000000000018e .LBE69
     /tmp/cc4g1S6g.s:435    .text.matrix_scan:0000000000000032 .LBB47
     /tmp/cc4g1S6g.s:459    .text.matrix_scan:0000000000000044 .LBE47
     /tmp/cc4g1S6g.s:461    .text.matrix_scan:0000000000000044 .LBB67
     /tmp/cc4g1S6g.s:657    .text.matrix_scan:0000000000000102 .LBE67
     /tmp/cc4g1S6g.s:753    .text.matrix_scan:0000000000000186 .LBB68
     /tmp/cc4g1S6g.s:766    .text.matrix_scan:000000000000018e .LBE68
     /tmp/cc4g1S6g.s:437    .text.matrix_scan:0000000000000032 .LBB49
     /tmp/cc4g1S6g.s:448    .text.matrix_scan:0000000000000040 .LBE49
     /tmp/cc4g1S6g.s:467    .text.matrix_scan:0000000000000044 .LBB57
     /tmp/cc4g1S6g.s:509    .text.matrix_scan:0000000000000070 .LBE57
     /tmp/cc4g1S6g.s:449    .text.matrix_scan:0000000000000040 .LBB52
     /tmp/cc4g1S6g.s:457    .text.matrix_scan:0000000000000044 .LBE52
     /tmp/cc4g1S6g.s:530    .text.matrix_scan:0000000000000076 .LBB60
     /tmp/cc4g1S6g.s:555    .text.matrix_scan:0000000000000096 .LBE60
     /tmp/cc4g1S6g.s:560    .text.matrix_scan:0000000000000098 .LBB61
     /tmp/cc4g1S6g.s:632    .text.matrix_scan:00000000000000f6 .LBE61
     /tmp/cc4g1S6g.s:755    .text.matrix_scan:0000000000000186 .LBB64
     /tmp/cc4g1S6g.s:764    .text.matrix_scan:000000000000018e .LBE64
     /tmp/cc4g1S6g.s:450    .text.matrix_scan:0000000000000040 .LBB53
     /tmp/cc4g1S6g.s:456    .text.matrix_scan:0000000000000044 .LBE53
     /tmp/cc4g1S6g.s:533    .text.matrix_scan:0000000000000076 .LBB54
     /tmp/cc4g1S6g.s:554    .text.matrix_scan:0000000000000096 .LBE54
     /tmp/cc4g1S6g.s:561    .text.matrix_scan:0000000000000098 .LBB55
     /tmp/cc4g1S6g.s:624    .text.matrix_scan:00000000000000ec .LBE55
     /tmp/cc4g1S6g.s:756    .text.matrix_scan:0000000000000186 .LBB56
     /tmp/cc4g1S6g.s:763    .text.matrix_scan:000000000000018e .LBE56
     /tmp/cc4g1S6g.s:913    .text.matrix_key_count:0000000000000006 .LBB73
     /tmp/cc4g1S6g.s:918    .text.matrix_key_count:000000000000000a .LBE73
     /tmp/cc4g1S6g.s:923    .text.matrix_key_count:000000000000000c .LBB74
     /tmp/cc4g1S6g.s:943    .text.matrix_key_count:0000000000000022 .LBE74

UNDEFINED SYMBOLS
timer_read
timer_elapsed
bitpop16
__do_copy_data
__do_clear_bss
