   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.file 1 "./tmk_core/common/avr/suspend.c"
  12               		.section	.text.suspend_idle,"ax",@progbits
  13               	.global	suspend_idle
  15               	suspend_idle:
  16               	.LVL0:
  17               	.LFB112:
   1:./tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:./tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:./tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:./tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:./tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:./tmk_core/common/avr/suspend.c **** #include "action.h"
   7:./tmk_core/common/avr/suspend.c **** #include "backlight.h"
   8:./tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   9:./tmk_core/common/avr/suspend.c **** #include "suspend.h"
  10:./tmk_core/common/avr/suspend.c **** #include "timer.h"
  11:./tmk_core/common/avr/suspend.c **** #include "led.h"
  12:./tmk_core/common/avr/suspend.c **** 
  13:./tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  14:./tmk_core/common/avr/suspend.c **** 	#include "lufa.h"
  15:./tmk_core/common/avr/suspend.c **** #endif
  16:./tmk_core/common/avr/suspend.c **** 
  17:./tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  18:./tmk_core/common/avr/suspend.c ****     #include "audio.h"
  19:./tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  20:./tmk_core/common/avr/suspend.c **** 
  21:./tmk_core/common/avr/suspend.c **** 
  22:./tmk_core/common/avr/suspend.c **** 
  23:./tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  24:./tmk_core/common/avr/suspend.c **** __asm__ __volatile__ (  \
  25:./tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  26:./tmk_core/common/avr/suspend.c ****     "cli" "\n\t"    \
  27:./tmk_core/common/avr/suspend.c ****     "wdr" "\n\t"    \
  28:./tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  29:./tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  30:./tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  31:./tmk_core/common/avr/suspend.c ****     : /* no outputs */  \
  32:./tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  33:./tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  34:./tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  35:./tmk_core/common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  36:./tmk_core/common/avr/suspend.c ****     : "r0"  \
  37:./tmk_core/common/avr/suspend.c **** )
  38:./tmk_core/common/avr/suspend.c **** 
  39:./tmk_core/common/avr/suspend.c **** 
  40:./tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time)
  41:./tmk_core/common/avr/suspend.c **** {
  18               		.loc 1 41 1 view -0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  42:./tmk_core/common/avr/suspend.c ****     cli();
  24               		.loc 1 42 5 view .LVU1
  25               	/* #APP */
  26               	 ;  42 "./tmk_core/common/avr/suspend.c" 1
  27 0000 F894      		cli
  28               	 ;  0 "" 2
  43:./tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  29               		.loc 1 43 5 view .LVU2
  30               		.loc 1 43 5 view .LVU3
  31               	/* #NOAPP */
  32 0002 83B7      		in r24,0x33
  33               	.LVL1:
  34               		.loc 1 43 5 is_stmt 0 view .LVU4
  35 0004 817F      		andi r24,lo8(-15)
  36 0006 83BF      		out 0x33,r24
  37               		.loc 1 43 5 is_stmt 1 view .LVU5
  44:./tmk_core/common/avr/suspend.c ****     sleep_enable();
  38               		.loc 1 44 5 view .LVU6
  39               		.loc 1 44 5 view .LVU7
  40 0008 83B7      		in r24,0x33
  41 000a 8160      		ori r24,lo8(1)
  42 000c 83BF      		out 0x33,r24
  43               		.loc 1 44 5 view .LVU8
  45:./tmk_core/common/avr/suspend.c ****     sei();
  44               		.loc 1 45 5 view .LVU9
  45               	/* #APP */
  46               	 ;  45 "./tmk_core/common/avr/suspend.c" 1
  47 000e 7894      		sei
  48               	 ;  0 "" 2
  46:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
  49               		.loc 1 46 5 view .LVU10
  50               		.loc 1 46 5 view .LVU11
  51               	 ;  46 "./tmk_core/common/avr/suspend.c" 1
  52 0010 8895      		sleep
  53               		
  54               	 ;  0 "" 2
  55               		.loc 1 46 5 view .LVU12
  47:./tmk_core/common/avr/suspend.c ****     sleep_disable();
  56               		.loc 1 47 5 view .LVU13
  57               		.loc 1 47 5 view .LVU14
  58               	/* #NOAPP */
  59 0012 83B7      		in r24,0x33
  60 0014 8E7F      		andi r24,lo8(-2)
  61 0016 83BF      		out 0x33,r24
  62               		.loc 1 47 5 view .LVU15
  63               	/* epilogue start */
  48:./tmk_core/common/avr/suspend.c **** }
  64               		.loc 1 48 1 is_stmt 0 view .LVU16
  65 0018 0895      		ret
  66               		.cfi_endproc
  67               	.LFE112:
  69               		.section	.text.suspend_power_down,"ax",@progbits
  70               	.global	suspend_power_down
  72               	suspend_power_down:
  73               	.LFB114:
  49:./tmk_core/common/avr/suspend.c **** 
  50:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  51:./tmk_core/common/avr/suspend.c **** /* Power down MCU with watchdog timer
  52:./tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  53:./tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  54:./tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  55:./tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  56:./tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  57:./tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  58:./tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  59:./tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  60:./tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  61:./tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  62:./tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  63:./tmk_core/common/avr/suspend.c ****  */
  64:./tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  65:./tmk_core/common/avr/suspend.c **** 
  66:./tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto)
  67:./tmk_core/common/avr/suspend.c **** {
  68:./tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  69:./tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  70:./tmk_core/common/avr/suspend.c **** #endif
  71:./tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
  72:./tmk_core/common/avr/suspend.c **** 
  73:./tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
  74:./tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
  75:./tmk_core/common/avr/suspend.c **** 
  76:./tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  77:./tmk_core/common/avr/suspend.c **** 	backlight_set(0);
  78:./tmk_core/common/avr/suspend.c **** #endif
  79:./tmk_core/common/avr/suspend.c **** 
  80:./tmk_core/common/avr/suspend.c **** 	// Turn off LED indicators
  81:./tmk_core/common/avr/suspend.c **** 	led_set(0);
  82:./tmk_core/common/avr/suspend.c **** 
  83:./tmk_core/common/avr/suspend.c **** 	#ifdef AUDIO_ENABLE
  84:./tmk_core/common/avr/suspend.c ****         // This sometimes disables the start-up noise, so it's been disabled
  85:./tmk_core/common/avr/suspend.c **** 		// stop_all_notes();
  86:./tmk_core/common/avr/suspend.c **** 	#endif /* AUDIO_ENABLE */
  87:./tmk_core/common/avr/suspend.c **** 
  88:./tmk_core/common/avr/suspend.c ****     // TODO: more power saving
  89:./tmk_core/common/avr/suspend.c ****     // See PicoPower application note
  90:./tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
  91:./tmk_core/common/avr/suspend.c ****     // - prescale clock
  92:./tmk_core/common/avr/suspend.c ****     // - BOD disable
  93:./tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
  94:./tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  95:./tmk_core/common/avr/suspend.c ****     sleep_enable();
  96:./tmk_core/common/avr/suspend.c ****     sei();
  97:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
  98:./tmk_core/common/avr/suspend.c ****     sleep_disable();
  99:./tmk_core/common/avr/suspend.c **** 
 100:./tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 101:./tmk_core/common/avr/suspend.c ****     wdt_disable();
 102:./tmk_core/common/avr/suspend.c **** }
 103:./tmk_core/common/avr/suspend.c **** #endif
 104:./tmk_core/common/avr/suspend.c **** 
 105:./tmk_core/common/avr/suspend.c **** void suspend_power_down(void)
 106:./tmk_core/common/avr/suspend.c **** {
  74               		.loc 1 106 1 is_stmt 1 view -0
  75               		.cfi_startproc
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
 107:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 108:./tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
  80               		.loc 1 108 5 view .LVU18
  81               	.LBB13:
  82               	.LBI13:
  66:./tmk_core/common/avr/suspend.c **** {
  83               		.loc 1 66 13 view .LVU19
  84               	.LVL2:
  85               	.LBB14:
  69:./tmk_core/common/avr/suspend.c **** #endif
  86               		.loc 1 69 5 view .LVU20
  69:./tmk_core/common/avr/suspend.c **** #endif
  87               		.loc 1 69 25 is_stmt 0 view .LVU21
  88 0000 8091 0000 		lds r24,USB_DeviceState
  69:./tmk_core/common/avr/suspend.c **** #endif
  89               		.loc 1 69 8 view .LVU22
  90 0004 8430      		cpi r24,lo8(4)
  91 0006 01F0      		breq .L2
  71:./tmk_core/common/avr/suspend.c **** 
  92               		.loc 1 71 5 is_stmt 1 view .LVU23
  71:./tmk_core/common/avr/suspend.c **** 
  93               		.loc 1 71 17 is_stmt 0 view .LVU24
  94 0008 1092 0000 		sts wdt_timeout,__zero_reg__
  74:./tmk_core/common/avr/suspend.c **** 
  95               		.loc 1 74 5 is_stmt 1 view .LVU25
  96 000c 88E1      		ldi r24,lo8(24)
  97 000e 90E0      		ldi r25,0
  98 0010 20E4      		ldi r18,lo8(64)
  99               	/* #APP */
 100               	 ;  74 "./tmk_core/common/avr/suspend.c" 1
 101 0012 0FB6      		in __tmp_reg__,__SREG__
 102 0014 F894      		cli
 103 0016 A895      		wdr
 104 0018 8093 6000 		sts 96,r24
 105 001c 0FBE      		out __SREG__,__tmp_reg__
 106 001e 2093 6000 		sts 96,r18
 107               		
 108               	 ;  0 "" 2
  81:./tmk_core/common/avr/suspend.c **** 
 109               		.loc 1 81 2 view .LVU26
 110               	/* #NOAPP */
 111 0022 80E0      		ldi r24,0
 112 0024 0E94 0000 		call led_set
 113               	.LVL3:
  94:./tmk_core/common/avr/suspend.c ****     sleep_enable();
 114               		.loc 1 94 5 view .LVU27
  94:./tmk_core/common/avr/suspend.c ****     sleep_enable();
 115               		.loc 1 94 5 view .LVU28
 116 0028 83B7      		in r24,0x33
 117 002a 817F      		andi r24,lo8(-15)
 118 002c 8460      		ori r24,lo8(4)
 119 002e 83BF      		out 0x33,r24
  94:./tmk_core/common/avr/suspend.c ****     sleep_enable();
 120               		.loc 1 94 5 view .LVU29
  95:./tmk_core/common/avr/suspend.c ****     sei();
 121               		.loc 1 95 5 view .LVU30
  95:./tmk_core/common/avr/suspend.c ****     sei();
 122               		.loc 1 95 5 view .LVU31
 123 0030 83B7      		in r24,0x33
 124 0032 8160      		ori r24,lo8(1)
 125 0034 83BF      		out 0x33,r24
  95:./tmk_core/common/avr/suspend.c ****     sei();
 126               		.loc 1 95 5 view .LVU32
  96:./tmk_core/common/avr/suspend.c ****     sleep_cpu();
 127               		.loc 1 96 5 view .LVU33
 128               	/* #APP */
 129               	 ;  96 "./tmk_core/common/avr/suspend.c" 1
 130 0036 7894      		sei
 131               	 ;  0 "" 2
  97:./tmk_core/common/avr/suspend.c ****     sleep_disable();
 132               		.loc 1 97 5 view .LVU34
  97:./tmk_core/common/avr/suspend.c ****     sleep_disable();
 133               		.loc 1 97 5 view .LVU35
 134               	 ;  97 "./tmk_core/common/avr/suspend.c" 1
 135 0038 8895      		sleep
 136               		
 137               	 ;  0 "" 2
  97:./tmk_core/common/avr/suspend.c ****     sleep_disable();
 138               		.loc 1 97 5 view .LVU36
  98:./tmk_core/common/avr/suspend.c **** 
 139               		.loc 1 98 5 view .LVU37
  98:./tmk_core/common/avr/suspend.c **** 
 140               		.loc 1 98 5 view .LVU38
 141               	/* #NOAPP */
 142 003a 83B7      		in r24,0x33
 143 003c 8E7F      		andi r24,lo8(-2)
 144 003e 83BF      		out 0x33,r24
  98:./tmk_core/common/avr/suspend.c **** 
 145               		.loc 1 98 5 view .LVU39
 101:./tmk_core/common/avr/suspend.c **** }
 146               		.loc 1 101 5 view .LVU40
 147               	.LBB15:
 148               	.LBI15:
 149               		.file 2 "/usr/avr/include/avr/wdt.h"
   1:/usr/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/avr/include/avr/wdt.h **** 
   5:/usr/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/avr/wdt.h **** 
   8:/usr/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/avr/wdt.h **** 
  11:/usr/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/wdt.h ****      distribution.
  15:/usr/avr/include/avr/wdt.h **** 
  16:/usr/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/avr/wdt.h **** 
  20:/usr/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/avr/wdt.h **** 
  32:/usr/avr/include/avr/wdt.h **** /* $Id: wdt.h 2522 2016-04-20 05:43:23Z joerg_wunsch $ */
  33:/usr/avr/include/avr/wdt.h **** 
  34:/usr/avr/include/avr/wdt.h **** /*
  35:/usr/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/avr/include/avr/wdt.h ****  */
  37:/usr/avr/include/avr/wdt.h **** 
  38:/usr/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/avr/include/avr/wdt.h **** 
  41:/usr/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/avr/include/avr/wdt.h **** 
  44:/usr/avr/include/avr/wdt.h **** /** \file */
  45:/usr/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/avr/include/avr/wdt.h **** 
  48:/usr/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/avr/include/avr/wdt.h **** 
  57:/usr/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/avr/include/avr/wdt.h **** 
  61:/usr/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/avr/include/avr/wdt.h ****     the following:
  68:/usr/avr/include/avr/wdt.h **** 
  69:/usr/avr/include/avr/wdt.h ****     \code
  70:/usr/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/avr/include/avr/wdt.h **** 
  73:/usr/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/avr/include/avr/wdt.h **** 
  75:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/avr/include/avr/wdt.h ****     {
  80:/usr/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/avr/include/avr/wdt.h ****     }
  84:/usr/avr/include/avr/wdt.h ****     \endcode
  85:/usr/avr/include/avr/wdt.h **** 
  86:/usr/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/avr/include/avr/wdt.h **** */
  91:/usr/avr/include/avr/wdt.h **** 
  92:/usr/avr/include/avr/wdt.h **** /**
  93:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/avr/include/avr/wdt.h **** */
  98:/usr/avr/include/avr/wdt.h **** 
  99:/usr/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/avr/include/avr/wdt.h **** 
 101:/usr/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/avr/include/avr/wdt.h **** 
 103:/usr/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/avr/include/avr/wdt.h **** #else
 106:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/avr/include/avr/wdt.h **** #endif
 108:/usr/avr/include/avr/wdt.h **** 
 109:/usr/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/avr/include/avr/wdt.h **** #else
 114:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/avr/include/avr/wdt.h **** #endif
 116:/usr/avr/include/avr/wdt.h **** 
 117:/usr/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/avr/include/avr/wdt.h **** #else
 120:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/avr/include/avr/wdt.h **** #endif
 122:/usr/avr/include/avr/wdt.h **** 
 123:/usr/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/avr/include/avr/wdt.h **** 
 125:/usr/avr/include/avr/wdt.h **** 
 126:/usr/avr/include/avr/wdt.h **** /**
 127:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/avr/include/avr/wdt.h **** 
 134:/usr/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/avr/include/avr/wdt.h **** */
 136:/usr/avr/include/avr/wdt.h **** 
 137:/usr/avr/include/avr/wdt.h **** 
 138:/usr/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/avr/include/avr/wdt.h **** 
 140:/usr/avr/include/avr/wdt.h **** /*
 141:/usr/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/avr/include/avr/wdt.h **** */
 152:/usr/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/avr/include/avr/wdt.h **** do { \
 154:/usr/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/avr/include/avr/wdt.h **** ); \
 174:/usr/avr/include/avr/wdt.h **** } while(0)
 175:/usr/avr/include/avr/wdt.h **** 
 176:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/avr/include/avr/wdt.h ****     : \
 184:/usr/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/avr/include/avr/wdt.h **** );
 191:/usr/avr/include/avr/wdt.h **** 
 192:/usr/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/avr/include/avr/wdt.h **** 
 194:/usr/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/avr/include/avr/wdt.h **** )
 210:/usr/avr/include/avr/wdt.h **** 
 211:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/avr/include/avr/wdt.h **** do { \
 213:/usr/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/avr/include/avr/wdt.h **** ); \
 231:/usr/avr/include/avr/wdt.h **** }while(0)
 232:/usr/avr/include/avr/wdt.h **** 
 233:/usr/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/avr/include/avr/wdt.h **** 
 235:/usr/avr/include/avr/wdt.h **** static __inline__
 236:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/avr/include/avr/wdt.h **** {
 239:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/avr/include/avr/wdt.h **** 	{
 241:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/avr/include/avr/wdt.h **** 			);
 256:/usr/avr/include/avr/wdt.h **** 	}
 257:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/avr/include/avr/wdt.h **** 	{
 259:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/avr/include/avr/wdt.h **** 			);
 274:/usr/avr/include/avr/wdt.h **** 	}
 275:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/avr/include/avr/wdt.h **** 	{
 277:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/avr/include/avr/wdt.h **** 			);
 292:/usr/avr/include/avr/wdt.h **** 	}
 293:/usr/avr/include/avr/wdt.h **** 	else
 294:/usr/avr/include/avr/wdt.h ****  	{
 295:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/avr/include/avr/wdt.h **** 			);
 310:/usr/avr/include/avr/wdt.h **** 	}
 311:/usr/avr/include/avr/wdt.h **** }
 312:/usr/avr/include/avr/wdt.h **** 
 313:/usr/avr/include/avr/wdt.h **** static __inline__
 314:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/avr/include/avr/wdt.h **** {
 317:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/avr/include/avr/wdt.h **** 	{
 319:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/avr/include/avr/wdt.h **** 				);
 337:/usr/avr/include/avr/wdt.h **** 	}
 338:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/avr/include/avr/wdt.h **** 	{
 340:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/avr/include/avr/wdt.h **** 				);
 358:/usr/avr/include/avr/wdt.h **** 	}
 359:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/avr/include/avr/wdt.h **** 	{
 361:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/avr/include/avr/wdt.h **** 				);
 379:/usr/avr/include/avr/wdt.h **** 	}
 380:/usr/avr/include/avr/wdt.h **** 	else
 381:/usr/avr/include/avr/wdt.h **** 	{
 382:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/avr/include/avr/wdt.h **** 				);
 400:/usr/avr/include/avr/wdt.h **** 	}
 401:/usr/avr/include/avr/wdt.h **** }
 402:/usr/avr/include/avr/wdt.h **** 
 403:/usr/avr/include/avr/wdt.h **** #else
 404:/usr/avr/include/avr/wdt.h **** 
 405:/usr/avr/include/avr/wdt.h **** static __inline__
 406:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/avr/include/avr/wdt.h **** {
 409:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/avr/include/avr/wdt.h **** 	{
 411:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/avr/include/avr/wdt.h **** 		);
 425:/usr/avr/include/avr/wdt.h **** 	}
 426:/usr/avr/include/avr/wdt.h **** 	else
 427:/usr/avr/include/avr/wdt.h **** 	{
 428:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/avr/include/avr/wdt.h **** 		);
 442:/usr/avr/include/avr/wdt.h **** 	}
 443:/usr/avr/include/avr/wdt.h **** }
 444:/usr/avr/include/avr/wdt.h **** 
 445:/usr/avr/include/avr/wdt.h **** static __inline__
 446:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 150               		.loc 2 447 6 view .LVU41
 151               	.LBB16:
 448:/usr/avr/include/avr/wdt.h **** {
 449:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 152               		.loc 2 449 2 view .LVU42
 153               	.LBB17:
 450:/usr/avr/include/avr/wdt.h **** 	{
 451:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/avr/include/avr/wdt.h **** 		);
 466:/usr/avr/include/avr/wdt.h **** 	}
 467:/usr/avr/include/avr/wdt.h **** 	else
 468:/usr/avr/include/avr/wdt.h **** 	{
 469:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 154               		.loc 2 469 9 view .LVU43
 470:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 155               		.loc 2 470 3 view .LVU44
 156               	/* #APP */
 157               	 ;  470 "/usr/avr/include/avr/wdt.h" 1
 158 0040 0FB6      		in __tmp_reg__,__SREG__
 159 0042 F894      		cli
 160 0044 A895      		wdr
 161 0046 8091 6000 		lds r24,96
 162 004a 8861      		ori r24,24
 163 004c 8093 6000 		sts 96,r24
 164 0050 1092 6000 		sts 96,__zero_reg__
 165 0054 0FBE      		out __SREG__,__tmp_reg__
 166               		
 167               	 ;  0 "" 2
 168               	.LVL4:
 169               	/* #NOAPP */
 170               	.L2:
 171               	/* epilogue start */
 172               		.loc 2 470 3 is_stmt 0 view .LVU45
 173               	.LBE17:
 174               	.LBE16:
 175               	.LBE15:
 176               	.LBE14:
 177               	.LBE13:
 109:./tmk_core/common/avr/suspend.c **** #endif
 110:./tmk_core/common/avr/suspend.c **** }
 178               		.loc 1 110 1 view .LVU46
 179 0056 0895      		ret
 180               		.cfi_endproc
 181               	.LFE114:
 183               		.section	.text.matrix_power_up,"ax",@progbits
 184               		.weak	matrix_power_up
 186               	matrix_power_up:
 187               	.LFB115:
 111:./tmk_core/common/avr/suspend.c **** 
 112:./tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_up(void) {}
 188               		.loc 1 112 51 is_stmt 1 view -0
 189               		.cfi_startproc
 190               	/* prologue: function */
 191               	/* frame size = 0 */
 192               	/* stack size = 0 */
 193               	.L__stack_usage = 0
 194               		.loc 1 112 52 view .LVU48
 195               	/* epilogue start */
 196 0000 0895      		ret
 197               		.cfi_endproc
 198               	.LFE115:
 200               		.set	matrix_power_up.localalias,matrix_power_up
 201               		.section	.text.matrix_power_down,"ax",@progbits
 202               		.weak	matrix_power_down
 204               	matrix_power_down:
 205               	.LFB121:
 206               		.cfi_startproc
 113:./tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_down(void) {}
 207               		.loc 1 113 29 view -0
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 0 */
 211               	.L__stack_usage = 0
 212               	/* epilogue start */
 213 0000 0895      		ret
 214               		.cfi_endproc
 215               	.LFE121:
 217               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 218               	.global	suspend_wakeup_condition
 220               	suspend_wakeup_condition:
 221               	.LFB117:
 114:./tmk_core/common/avr/suspend.c **** bool suspend_wakeup_condition(void)
 115:./tmk_core/common/avr/suspend.c **** {
 222               		.loc 1 115 1 view -0
 223               		.cfi_startproc
 224 0000 CF93      		push r28
 225               	.LCFI0:
 226               		.cfi_def_cfa_offset 3
 227               		.cfi_offset 28, -2
 228               	/* prologue: function */
 229               	/* frame size = 0 */
 230               	/* stack size = 1 */
 231               	.L__stack_usage = 1
 116:./tmk_core/common/avr/suspend.c ****     matrix_power_up();
 232               		.loc 1 116 5 view .LVU51
 233 0002 0E94 0000 		call matrix_power_up
 234               	.LVL5:
 117:./tmk_core/common/avr/suspend.c ****     matrix_scan();
 235               		.loc 1 117 5 view .LVU52
 236 0006 0E94 0000 		call matrix_scan
 237               	.LVL6:
 118:./tmk_core/common/avr/suspend.c ****     matrix_power_down();
 238               		.loc 1 118 5 view .LVU53
 239 000a 0E94 0000 		call matrix_power_down
 240               	.LVL7:
 119:./tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 241               		.loc 1 119 5 view .LVU54
 242               	.LBB18:
 243               		.loc 1 119 10 view .LVU55
 244               		.loc 1 119 27 view .LVU56
 245               		.loc 1 119 18 is_stmt 0 view .LVU57
 246 000e C0E0      		ldi r28,0
 247               	.LVL8:
 248               	.L11:
 120:./tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 249               		.loc 1 120 9 is_stmt 1 view .LVU58
 250               		.loc 1 120 13 is_stmt 0 view .LVU59
 251 0010 8C2F      		mov r24,r28
 252 0012 0E94 0000 		call matrix_get_row
 253               	.LVL9:
 254               		.loc 1 120 12 view .LVU60
 255 0016 892B      		or r24,r25
 256 0018 01F4      		brne .L12
 119:./tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 257               		.loc 1 119 43 is_stmt 1 discriminator 2 view .LVU61
 258 001a CF5F      		subi r28,lo8(-(1))
 259               	.LVL10:
 119:./tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 260               		.loc 1 119 27 discriminator 2 view .LVU62
 261 001c C830      		cpi r28,lo8(8)
 262 001e 01F4      		brne .L11
 263               	.LBE18:
 121:./tmk_core/common/avr/suspend.c ****     }
 122:./tmk_core/common/avr/suspend.c ****      return false;
 264               		.loc 1 122 13 is_stmt 0 view .LVU63
 265 0020 80E0      		ldi r24,0
 266               	.L9:
 267               	/* epilogue start */
 123:./tmk_core/common/avr/suspend.c **** }
 268               		.loc 1 123 1 view .LVU64
 269 0022 CF91      		pop r28
 270               	.LVL11:
 271               		.loc 1 123 1 view .LVU65
 272 0024 0895      		ret
 273               	.LVL12:
 274               	.L12:
 275               	.LBB19:
 120:./tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 276               		.loc 1 120 39 view .LVU66
 277 0026 81E0      		ldi r24,lo8(1)
 278 0028 00C0      		rjmp .L9
 279               	.LBE19:
 280               		.cfi_endproc
 281               	.LFE117:
 283               		.section	.text.suspend_wakeup_init,"ax",@progbits
 284               	.global	suspend_wakeup_init
 286               	suspend_wakeup_init:
 287               	.LFB118:
 124:./tmk_core/common/avr/suspend.c **** 
 125:./tmk_core/common/avr/suspend.c **** // run immediately after wakeup
 126:./tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void)
 127:./tmk_core/common/avr/suspend.c **** {
 288               		.loc 1 127 1 is_stmt 1 view -0
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 128:./tmk_core/common/avr/suspend.c ****     // clear keyboard state
 129:./tmk_core/common/avr/suspend.c ****     clear_keyboard();
 294               		.loc 1 129 5 view .LVU68
 295 0000 0E94 0000 		call clear_keyboard
 296               	.LVL13:
 130:./tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 131:./tmk_core/common/avr/suspend.c ****     backlight_init();
 132:./tmk_core/common/avr/suspend.c **** #endif
 133:./tmk_core/common/avr/suspend.c **** 	led_set(host_keyboard_leds());
 297               		.loc 1 133 2 view .LVU69
 298 0004 0E94 0000 		call host_keyboard_leds
 299               	.LVL14:
 300 0008 0C94 0000 		jmp led_set
 301               	.LVL15:
 302               		.cfi_endproc
 303               	.LFE118:
 305               		.section	.text.__vector_12,"ax",@progbits
 306               	.global	__vector_12
 308               	__vector_12:
 309               	.LFB119:
 134:./tmk_core/common/avr/suspend.c **** }
 135:./tmk_core/common/avr/suspend.c **** 
 136:./tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 137:./tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 138:./tmk_core/common/avr/suspend.c **** ISR(WDT_vect)
 139:./tmk_core/common/avr/suspend.c **** {
 310               		.loc 1 139 1 view -0
 311               		.cfi_startproc
 312 0000 1F92 1FB6 		__gcc_isr 1
 312      1F92 1124 
 312      8F93 
 313 000a 9F93      		push r25
 314               	.LCFI1:
 315               		.cfi_def_cfa_offset 3
 316               		.cfi_offset 25, -2
 317 000c AF93      		push r26
 318               	.LCFI2:
 319               		.cfi_def_cfa_offset 4
 320               		.cfi_offset 26, -3
 321 000e BF93      		push r27
 322               	.LCFI3:
 323               		.cfi_def_cfa_offset 5
 324               		.cfi_offset 27, -4
 325               	/* prologue: Signal */
 326               	/* frame size = 0 */
 327               	/* stack size = 3...7 */
 328               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 140:./tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 141:./tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 329               		.loc 1 141 5 view .LVU71
 330 0010 8091 0000 		lds r24,wdt_timeout
 331 0014 8111      		cpse r24,__zero_reg__
 332 0016 00C0      		rjmp .L15
 142:./tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 143:./tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 333               		.loc 1 143 13 view .LVU72
 334               		.loc 1 143 25 is_stmt 0 view .LVU73
 335 0018 8091 0000 		lds r24,timer_count
 336 001c 9091 0000 		lds r25,timer_count+1
 337 0020 A091 0000 		lds r26,timer_count+2
 338 0024 B091 0000 		lds r27,timer_count+3
 339 0028 4196      		adiw r24,17
 340 002a A11D      		adc r26,__zero_reg__
 341 002c B11D      		adc r27,__zero_reg__
 342 002e 8093 0000 		sts timer_count,r24
 343 0032 9093 0000 		sts timer_count+1,r25
 344 0036 A093 0000 		sts timer_count+2,r26
 345 003a B093 0000 		sts timer_count+3,r27
 144:./tmk_core/common/avr/suspend.c ****             break;
 346               		.loc 1 144 13 is_stmt 1 view .LVU74
 145:./tmk_core/common/avr/suspend.c ****         default:
 146:./tmk_core/common/avr/suspend.c ****             ;
 347               		.loc 1 146 13 view .LVU75
 348               	.L15:
 349               	/* epilogue start */
 147:./tmk_core/common/avr/suspend.c ****     }
 148:./tmk_core/common/avr/suspend.c **** }
 350               		.loc 1 148 1 is_stmt 0 view .LVU76
 351 003e BF91      		pop r27
 352 0040 AF91      		pop r26
 353 0042 9F91      		pop r25
 354 0044 8F91 1F90 		__gcc_isr 2
 354      1FBE 1F90 
 355 004c 1895      		reti
 356               		__gcc_isr 0,r24
 357               		.cfi_endproc
 358               	.LFE119:
 360               		.section	.bss.wdt_timeout,"aw",@nobits
 363               	wdt_timeout:
 364 0000 00        		.zero	1
 365               		.text
 366               	.Letext0:
 367               		.file 3 "/usr/avr/include/stdint.h"
 368               		.file 4 "./tmk_core/common/matrix.h"
 369               		.file 5 "./tmk_core/common/timer.h"
 370               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 371               		.file 7 "./tmk_core/common/host.h"
 372               		.file 8 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 373               		.file 9 "./tmk_core/common/action.h"
 374               		.file 10 "./tmk_core/common/led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/ccjATi0o.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccjATi0o.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccjATi0o.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccjATi0o.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccjATi0o.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccjATi0o.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccjATi0o.s:15     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/ccjATi0o.s:18     .text.suspend_idle:0000000000000000 .Loc.0
     /tmp/ccjATi0o.s:19     .text.suspend_idle:0000000000000000 L0
     /tmp/ccjATi0o.s:24     .text.suspend_idle:0000000000000000 .Loc.1
     /tmp/ccjATi0o.s:29     .text.suspend_idle:0000000000000002 .Loc.2
     /tmp/ccjATi0o.s:30     .text.suspend_idle:0000000000000002 .Loc.3
     /tmp/ccjATi0o.s:34     .text.suspend_idle:0000000000000004 .Loc.4
     /tmp/ccjATi0o.s:37     .text.suspend_idle:0000000000000008 .Loc.5
     /tmp/ccjATi0o.s:38     .text.suspend_idle:0000000000000008 .Loc.6
     /tmp/ccjATi0o.s:39     .text.suspend_idle:0000000000000008 .Loc.7
     /tmp/ccjATi0o.s:43     .text.suspend_idle:000000000000000e .Loc.8
     /tmp/ccjATi0o.s:44     .text.suspend_idle:000000000000000e .Loc.9
     /tmp/ccjATi0o.s:49     .text.suspend_idle:0000000000000010 .Loc.10
     /tmp/ccjATi0o.s:50     .text.suspend_idle:0000000000000010 .Loc.11
     /tmp/ccjATi0o.s:55     .text.suspend_idle:0000000000000012 .Loc.12
     /tmp/ccjATi0o.s:56     .text.suspend_idle:0000000000000012 .Loc.13
     /tmp/ccjATi0o.s:57     .text.suspend_idle:0000000000000012 .Loc.14
     /tmp/ccjATi0o.s:62     .text.suspend_idle:0000000000000018 .Loc.15
     /tmp/ccjATi0o.s:64     .text.suspend_idle:0000000000000018 .Loc.16
     /tmp/ccjATi0o.s:66     .text.suspend_idle:000000000000001a L0
     /tmp/ccjATi0o.s:72     .text.suspend_power_down:0000000000000000 suspend_power_down
     /tmp/ccjATi0o.s:74     .text.suspend_power_down:0000000000000000 .Loc.17
     /tmp/ccjATi0o.s:75     .text.suspend_power_down:0000000000000000 L0
     /tmp/ccjATi0o.s:80     .text.suspend_power_down:0000000000000000 .Loc.18
     /tmp/ccjATi0o.s:83     .text.suspend_power_down:0000000000000000 .Loc.19
     /tmp/ccjATi0o.s:86     .text.suspend_power_down:0000000000000000 .Loc.20
     /tmp/ccjATi0o.s:87     .text.suspend_power_down:0000000000000000 .Loc.21
     /tmp/ccjATi0o.s:89     .text.suspend_power_down:0000000000000004 .Loc.22
     /tmp/ccjATi0o.s:92     .text.suspend_power_down:0000000000000008 .Loc.23
     /tmp/ccjATi0o.s:93     .text.suspend_power_down:0000000000000008 .Loc.24
     /tmp/ccjATi0o.s:363    .bss.wdt_timeout:0000000000000000 wdt_timeout
     /tmp/ccjATi0o.s:95     .text.suspend_power_down:000000000000000c .Loc.25
     /tmp/ccjATi0o.s:109    .text.suspend_power_down:0000000000000022 .Loc.26
     /tmp/ccjATi0o.s:114    .text.suspend_power_down:0000000000000028 .Loc.27
     /tmp/ccjATi0o.s:115    .text.suspend_power_down:0000000000000028 .Loc.28
     /tmp/ccjATi0o.s:120    .text.suspend_power_down:0000000000000030 .Loc.29
     /tmp/ccjATi0o.s:121    .text.suspend_power_down:0000000000000030 .Loc.30
     /tmp/ccjATi0o.s:122    .text.suspend_power_down:0000000000000030 .Loc.31
     /tmp/ccjATi0o.s:126    .text.suspend_power_down:0000000000000036 .Loc.32
     /tmp/ccjATi0o.s:127    .text.suspend_power_down:0000000000000036 .Loc.33
     /tmp/ccjATi0o.s:132    .text.suspend_power_down:0000000000000038 .Loc.34
     /tmp/ccjATi0o.s:133    .text.suspend_power_down:0000000000000038 .Loc.35
     /tmp/ccjATi0o.s:138    .text.suspend_power_down:000000000000003a .Loc.36
     /tmp/ccjATi0o.s:139    .text.suspend_power_down:000000000000003a .Loc.37
     /tmp/ccjATi0o.s:140    .text.suspend_power_down:000000000000003a .Loc.38
     /tmp/ccjATi0o.s:145    .text.suspend_power_down:0000000000000040 .Loc.39
     /tmp/ccjATi0o.s:146    .text.suspend_power_down:0000000000000040 .Loc.40
     /tmp/ccjATi0o.s:150    .text.suspend_power_down:0000000000000040 .Loc.41
     /tmp/ccjATi0o.s:152    .text.suspend_power_down:0000000000000040 .Loc.42
     /tmp/ccjATi0o.s:154    .text.suspend_power_down:0000000000000040 .Loc.43
     /tmp/ccjATi0o.s:155    .text.suspend_power_down:0000000000000040 .Loc.44
     /tmp/ccjATi0o.s:172    .text.suspend_power_down:0000000000000056 .Loc.45
     /tmp/ccjATi0o.s:178    .text.suspend_power_down:0000000000000056 .Loc.46
     /tmp/ccjATi0o.s:180    .text.suspend_power_down:0000000000000058 L0
     /tmp/ccjATi0o.s:186    .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccjATi0o.s:188    .text.matrix_power_up:0000000000000000 .Loc.47
     /tmp/ccjATi0o.s:189    .text.matrix_power_up:0000000000000000 L0
     /tmp/ccjATi0o.s:194    .text.matrix_power_up:0000000000000000 .Loc.48
     /tmp/ccjATi0o.s:197    .text.matrix_power_up:0000000000000002 L0
     /tmp/ccjATi0o.s:186    .text.matrix_power_up:0000000000000000 matrix_power_up.localalias
     /tmp/ccjATi0o.s:204    .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccjATi0o.s:206    .text.matrix_power_down:0000000000000000 L0
     /tmp/ccjATi0o.s:207    .text.matrix_power_down:0000000000000000 .Loc.49
     /tmp/ccjATi0o.s:214    .text.matrix_power_down:0000000000000002 L0
     /tmp/ccjATi0o.s:220    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/ccjATi0o.s:222    .text.suspend_wakeup_condition:0000000000000000 .Loc.50
     /tmp/ccjATi0o.s:223    .text.suspend_wakeup_condition:0000000000000000 L0
     /tmp/ccjATi0o.s:232    .text.suspend_wakeup_condition:0000000000000002 .Loc.51
     /tmp/ccjATi0o.s:235    .text.suspend_wakeup_condition:0000000000000006 .Loc.52
     /tmp/ccjATi0o.s:238    .text.suspend_wakeup_condition:000000000000000a .Loc.53
     /tmp/ccjATi0o.s:241    .text.suspend_wakeup_condition:000000000000000e .Loc.54
     /tmp/ccjATi0o.s:243    .text.suspend_wakeup_condition:000000000000000e .Loc.55
     /tmp/ccjATi0o.s:244    .text.suspend_wakeup_condition:000000000000000e .Loc.56
     /tmp/ccjATi0o.s:245    .text.suspend_wakeup_condition:000000000000000e .Loc.57
     /tmp/ccjATi0o.s:249    .text.suspend_wakeup_condition:0000000000000010 .Loc.58
     /tmp/ccjATi0o.s:250    .text.suspend_wakeup_condition:0000000000000010 .Loc.59
     /tmp/ccjATi0o.s:254    .text.suspend_wakeup_condition:0000000000000016 .Loc.60
     /tmp/ccjATi0o.s:257    .text.suspend_wakeup_condition:000000000000001a .Loc.61
     /tmp/ccjATi0o.s:260    .text.suspend_wakeup_condition:000000000000001c .Loc.62
     /tmp/ccjATi0o.s:264    .text.suspend_wakeup_condition:0000000000000020 .Loc.63
     /tmp/ccjATi0o.s:268    .text.suspend_wakeup_condition:0000000000000022 .Loc.64
     /tmp/ccjATi0o.s:271    .text.suspend_wakeup_condition:0000000000000024 .Loc.65
     /tmp/ccjATi0o.s:276    .text.suspend_wakeup_condition:0000000000000026 .Loc.66
     /tmp/ccjATi0o.s:280    .text.suspend_wakeup_condition:000000000000002a L0
     /tmp/ccjATi0o.s:286    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
     /tmp/ccjATi0o.s:288    .text.suspend_wakeup_init:0000000000000000 .Loc.67
     /tmp/ccjATi0o.s:289    .text.suspend_wakeup_init:0000000000000000 L0
     /tmp/ccjATi0o.s:294    .text.suspend_wakeup_init:0000000000000000 .Loc.68
     /tmp/ccjATi0o.s:297    .text.suspend_wakeup_init:0000000000000004 .Loc.69
     /tmp/ccjATi0o.s:302    .text.suspend_wakeup_init:000000000000000c L0
     /tmp/ccjATi0o.s:308    .text.__vector_12:0000000000000000 __vector_12
     /tmp/ccjATi0o.s:310    .text.__vector_12:0000000000000000 .Loc.70
     /tmp/ccjATi0o.s:311    .text.__vector_12:0000000000000000 L0
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
     /tmp/ccjATi0o.s:329    .text.__vector_12:0000000000000010 .Loc.71
     /tmp/ccjATi0o.s:333    .text.__vector_12:0000000000000018 .Loc.72
     /tmp/ccjATi0o.s:334    .text.__vector_12:0000000000000018 .Loc.73
     /tmp/ccjATi0o.s:346    .text.__vector_12:000000000000003e .Loc.74
     /tmp/ccjATi0o.s:347    .text.__vector_12:000000000000003e .Loc.75
     /tmp/ccjATi0o.s:350    .text.__vector_12:000000000000003e .Loc.76
     /tmp/ccjATi0o.s:357    .text.__vector_12:000000000000004e L0
     /tmp/ccjATi0o.s:69     .text.suspend_idle:000000000000001a L0
     /tmp/ccjATi0o.s:183    .text.suspend_power_down:0000000000000058 L0
     /tmp/ccjATi0o.s:201    .text.matrix_power_up:0000000000000002 L0
     /tmp/ccjATi0o.s:217    .text.matrix_power_down:0000000000000002 L0
     /tmp/ccjATi0o.s:283    .text.suspend_wakeup_condition:000000000000002a L0
     /tmp/ccjATi0o.s:305    .text.suspend_wakeup_init:000000000000000c L0
     /tmp/ccjATi0o.s:360    .text.__vector_12:000000000000004e L0
                     .debug_frame:0000000000000000 L0
     /tmp/ccjATi0o.s:170    .text.suspend_power_down:0000000000000056 .L2
     /tmp/ccjATi0o.s:274    .text.suspend_wakeup_condition:0000000000000026 .L12
     /tmp/ccjATi0o.s:248    .text.suspend_wakeup_condition:0000000000000010 .L11
     /tmp/ccjATi0o.s:266    .text.suspend_wakeup_condition:0000000000000022 .L9
     /tmp/ccjATi0o.s:348    .text.__vector_12:000000000000003e .L15
     /tmp/ccjATi0o.s:788    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccjATi0o.s:1493   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccjATi0o.s:1517   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccjATi0o.s:309    .text.__vector_12:0000000000000000 .LFB119
     /tmp/ccjATi0o.s:358    .text.__vector_12:000000000000004e .LFE119
     /tmp/ccjATi0o.s:1373   .debug_loc:0000000000000000 .LLST4
     /tmp/ccjATi0o.s:287    .text.suspend_wakeup_init:0000000000000000 .LFB118
     /tmp/ccjATi0o.s:303    .text.suspend_wakeup_init:000000000000000c .LFE118
     /tmp/ccjATi0o.s:296    .text.suspend_wakeup_init:0000000000000004 .LVL13
     /tmp/ccjATi0o.s:299    .text.suspend_wakeup_init:0000000000000008 .LVL14
     /tmp/ccjATi0o.s:301    .text.suspend_wakeup_init:000000000000000c .LVL15
     /tmp/ccjATi0o.s:221    .text.suspend_wakeup_condition:0000000000000000 .LFB117
     /tmp/ccjATi0o.s:281    .text.suspend_wakeup_condition:000000000000002a .LFE117
     /tmp/ccjATi0o.s:1400   .debug_loc:000000000000003c .LLST2
     /tmp/ccjATi0o.s:1422   .debug_loc:0000000000000064 .LLST3
     /tmp/ccjATi0o.s:1415   .debug_loc:000000000000005e .LVUS3
     /tmp/ccjATi0o.s:253    .text.suspend_wakeup_condition:0000000000000016 .LVL9
     /tmp/ccjATi0o.s:234    .text.suspend_wakeup_condition:0000000000000006 .LVL5
     /tmp/ccjATi0o.s:237    .text.suspend_wakeup_condition:000000000000000a .LVL6
     /tmp/ccjATi0o.s:240    .text.suspend_wakeup_condition:000000000000000e .LVL7
     /tmp/ccjATi0o.s:187    .text.matrix_power_up:0000000000000000 .LFB115
     /tmp/ccjATi0o.s:198    .text.matrix_power_up:0000000000000002 .LFE115
     /tmp/ccjATi0o.s:73     .text.suspend_power_down:0000000000000000 .LFB114
     /tmp/ccjATi0o.s:181    .text.suspend_power_down:0000000000000058 .LFE114
     /tmp/ccjATi0o.s:82     .text.suspend_power_down:0000000000000000 .LBI13
     /tmp/ccjATi0o.s:81     .text.suspend_power_down:0000000000000000 .LBB13
     /tmp/ccjATi0o.s:177    .text.suspend_power_down:0000000000000056 .LBE13
     /tmp/ccjATi0o.s:1441   .debug_loc:0000000000000090 .LLST1
     /tmp/ccjATi0o.s:1438   .debug_loc:000000000000008e .LVUS1
     /tmp/ccjATi0o.s:148    .text.suspend_power_down:0000000000000040 .LBI15
     /tmp/ccjATi0o.s:147    .text.suspend_power_down:0000000000000040 .LBB15
     /tmp/ccjATi0o.s:175    .text.suspend_power_down:0000000000000056 .LBE15
     /tmp/ccjATi0o.s:153    .text.suspend_power_down:0000000000000040 .LBB17
     /tmp/ccjATi0o.s:173    .text.suspend_power_down:0000000000000056 .LBE17
     /tmp/ccjATi0o.s:113    .text.suspend_power_down:0000000000000028 .LVL3
     /tmp/ccjATi0o.s:17     .text.suspend_idle:0000000000000000 .LFB112
     /tmp/ccjATi0o.s:67     .text.suspend_idle:000000000000001a .LFE112
     /tmp/ccjATi0o.s:1454   .debug_loc:00000000000000a8 .LLST0
     /tmp/ccjATi0o.s:1449   .debug_loc:00000000000000a4 .LVUS0
     /tmp/ccjATi0o.s:314    .text.__vector_12:000000000000000c .LCFI1
     /tmp/ccjATi0o.s:318    .text.__vector_12:000000000000000e .LCFI2
     /tmp/ccjATi0o.s:322    .text.__vector_12:0000000000000010 .LCFI3
     /tmp/ccjATi0o.s:225    .text.suspend_wakeup_condition:0000000000000002 .LCFI0
     /tmp/ccjATi0o.s:247    .text.suspend_wakeup_condition:0000000000000010 .LVL8
     /tmp/ccjATi0o.s:270    .text.suspend_wakeup_condition:0000000000000024 .LVL11
     /tmp/ccjATi0o.s:273    .text.suspend_wakeup_condition:0000000000000026 .LVL12
     /tmp/ccjATi0o.s:84     .text.suspend_power_down:0000000000000000 .LVL2
     /tmp/ccjATi0o.s:168    .text.suspend_power_down:0000000000000056 .LVL4
     /tmp/ccjATi0o.s:16     .text.suspend_idle:0000000000000000 .LVL0
     /tmp/ccjATi0o.s:33     .text.suspend_idle:0000000000000004 .LVL1
     /tmp/ccjATi0o.s:376    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccjATi0o.s:205    .text.matrix_power_down:0000000000000000 .LFB121
     /tmp/ccjATi0o.s:215    .text.matrix_power_down:0000000000000002 .LFE121
     /tmp/ccjATi0o.s:242    .text.suspend_wakeup_condition:000000000000000e .LBB18
     /tmp/ccjATi0o.s:263    .text.suspend_wakeup_condition:0000000000000020 .LBE18
     /tmp/ccjATi0o.s:275    .text.suspend_wakeup_condition:0000000000000026 .LBB19
     /tmp/ccjATi0o.s:279    .text.suspend_wakeup_condition:000000000000002a .LBE19

UNDEFINED SYMBOLS
USB_DeviceState
led_set
matrix_scan
matrix_get_row
clear_keyboard
host_keyboard_leds
timer_count
__do_clear_bss
