   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.file 1 "quantum/quantum.c"
  12               		.section	.text.do_code16,"ax",@progbits
  14               	do_code16:
  15               	.LVL0:
  16               	.LFB111:
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** #ifndef TAPPING_TERM
   4:quantum/quantum.c **** #define TAPPING_TERM 200
   5:quantum/quantum.c **** #endif
   6:quantum/quantum.c **** 
   7:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  17               		.loc 1 7 60 view -0
  18               		.cfi_startproc
  19               		.loc 1 7 60 is_stmt 0 view .LVU1
  20 0000 0F93      		push r16
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 16, -2
  24 0002 1F93      		push r17
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 17, -3
  28 0004 CF93      		push r28
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 28, -4
  32 0006 DF93      		push r29
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 29, -5
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 4 */
  39               	.L__stack_usage = 4
  40 0008 8C01      		movw r16,r24
  41 000a EB01      		movw r28,r22
   8:quantum/quantum.c ****   switch (code) {
  42               		.loc 1 8 3 is_stmt 1 view .LVU2
  43 000c 9A95      		dec r25
  44               	.LVL1:
  45               		.loc 1 8 3 is_stmt 0 view .LVU3
  46 000e 8115      		cp r24,__zero_reg__
  47 0010 9F41      		sbci r25,31
  48 0012 00F4      		brsh .L1
   9:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  10:quantum/quantum.c ****     break;
  49               		.loc 1 10 5 is_stmt 1 view .LVU4
  11:quantum/quantum.c ****   default:
  12:quantum/quantum.c ****     return;
  13:quantum/quantum.c ****   }
  14:quantum/quantum.c **** 
  15:quantum/quantum.c ****   if (code & QK_LCTL)
  50               		.loc 1 15 3 view .LVU5
  51               		.loc 1 15 6 is_stmt 0 view .LVU6
  52 0014 10FF      		sbrs r17,0
  53 0016 00C0      		rjmp .L4
  16:quantum/quantum.c ****     f(KC_LCTL);
  54               		.loc 1 16 5 is_stmt 1 view .LVU7
  55 0018 80EE      		ldi r24,lo8(-32)
  56 001a FB01      		movw r30,r22
  57 001c 0995      		icall
  58               	.LVL2:
  59               	.L4:
  17:quantum/quantum.c ****   if (code & QK_LSFT)
  60               		.loc 1 17 3 view .LVU8
  61               		.loc 1 17 6 is_stmt 0 view .LVU9
  62 001e 11FF      		sbrs r17,1
  63 0020 00C0      		rjmp .L5
  18:quantum/quantum.c ****     f(KC_LSFT);
  64               		.loc 1 18 5 is_stmt 1 view .LVU10
  65 0022 81EE      		ldi r24,lo8(-31)
  66 0024 FE01      		movw r30,r28
  67 0026 0995      		icall
  68               	.LVL3:
  69               	.L5:
  19:quantum/quantum.c ****   if (code & QK_LALT)
  70               		.loc 1 19 3 view .LVU11
  71               		.loc 1 19 6 is_stmt 0 view .LVU12
  72 0028 12FF      		sbrs r17,2
  73 002a 00C0      		rjmp .L6
  20:quantum/quantum.c ****     f(KC_LALT);
  74               		.loc 1 20 5 is_stmt 1 view .LVU13
  75 002c 82EE      		ldi r24,lo8(-30)
  76 002e FE01      		movw r30,r28
  77 0030 0995      		icall
  78               	.LVL4:
  79               	.L6:
  21:quantum/quantum.c ****   if (code & QK_LGUI)
  80               		.loc 1 21 3 view .LVU14
  81               		.loc 1 21 6 is_stmt 0 view .LVU15
  82 0032 13FF      		sbrs r17,3
  83 0034 00C0      		rjmp .L7
  22:quantum/quantum.c ****     f(KC_LGUI);
  84               		.loc 1 22 5 is_stmt 1 view .LVU16
  85 0036 83EE      		ldi r24,lo8(-29)
  86 0038 FE01      		movw r30,r28
  87 003a 0995      		icall
  88               	.LVL5:
  89               	.L7:
  23:quantum/quantum.c **** 
  24:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  90               		.loc 1 24 3 view .LVU17
  91               		.loc 1 24 6 is_stmt 0 view .LVU18
  92 003c 0115      		cp r16,__zero_reg__
  93 003e 1041      		sbci r17,16
  94 0040 00F0      		brlo .L1
  25:quantum/quantum.c **** 
  26:quantum/quantum.c ****   if (code & QK_RCTL)
  95               		.loc 1 26 3 is_stmt 1 view .LVU19
  27:quantum/quantum.c ****     f(KC_RCTL);
  96               		.loc 1 27 5 view .LVU20
  97 0042 84EE      		ldi r24,lo8(-28)
  98 0044 FE01      		movw r30,r28
  99 0046 0995      		icall
 100               	.LVL6:
  28:quantum/quantum.c ****   if (code & QK_RSFT)
 101               		.loc 1 28 3 view .LVU21
  29:quantum/quantum.c ****     f(KC_RSFT);
 102               		.loc 1 29 5 view .LVU22
 103 0048 85EE      		ldi r24,lo8(-27)
 104 004a FE01      		movw r30,r28
 105 004c 0995      		icall
 106               	.LVL7:
  30:quantum/quantum.c ****   if (code & QK_RALT)
 107               		.loc 1 30 3 view .LVU23
  31:quantum/quantum.c ****     f(KC_RALT);
 108               		.loc 1 31 5 view .LVU24
 109 004e 86EE      		ldi r24,lo8(-26)
 110 0050 FE01      		movw r30,r28
 111 0052 0995      		icall
 112               	.LVL8:
  32:quantum/quantum.c ****   if (code & QK_RGUI)
 113               		.loc 1 32 3 view .LVU25
  33:quantum/quantum.c ****     f(KC_RGUI);
 114               		.loc 1 33 5 view .LVU26
 115 0054 87EE      		ldi r24,lo8(-25)
 116 0056 FE01      		movw r30,r28
 117               	/* epilogue start */
  34:quantum/quantum.c **** }
 118               		.loc 1 34 1 is_stmt 0 view .LVU27
 119 0058 DF91      		pop r29
 120 005a CF91      		pop r28
 121               	.LVL9:
 122               		.loc 1 34 1 view .LVU28
 123 005c 1F91      		pop r17
 124 005e 0F91      		pop r16
 125               	.LVL10:
  33:quantum/quantum.c ****     f(KC_RGUI);
 126               		.loc 1 33 5 view .LVU29
 127 0060 0994      		ijmp
 128               	.LVL11:
 129               	.L1:
 130               	/* epilogue start */
 131               		.loc 1 34 1 view .LVU30
 132 0062 DF91      		pop r29
 133 0064 CF91      		pop r28
 134               	.LVL12:
 135               		.loc 1 34 1 view .LVU31
 136 0066 1F91      		pop r17
 137 0068 0F91      		pop r16
 138               	.LVL13:
 139               		.loc 1 34 1 view .LVU32
 140 006a 0895      		ret
 141               		.cfi_endproc
 142               	.LFE111:
 144               		.section	.text.register_code16,"ax",@progbits
 145               	.global	register_code16
 147               	register_code16:
 148               	.LVL14:
 149               	.LFB112:
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** void register_code16 (uint16_t code) {
 150               		.loc 1 36 38 is_stmt 1 view -0
 151               		.cfi_startproc
 152               		.loc 1 36 38 is_stmt 0 view .LVU34
 153 0000 CF93      		push r28
 154               	.LCFI4:
 155               		.cfi_def_cfa_offset 3
 156               		.cfi_offset 28, -2
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 1 */
 160               	.L__stack_usage = 1
 161 0002 C82F      		mov r28,r24
  37:quantum/quantum.c ****   do_code16 (code, register_code);
 162               		.loc 1 37 3 is_stmt 1 view .LVU35
 163 0004 60E0      		ldi r22,lo8(gs(register_code))
 164 0006 70E0      		ldi r23,hi8(gs(register_code))
 165 0008 0E94 0000 		call do_code16
 166               	.LVL15:
  38:quantum/quantum.c ****   register_code (code);
 167               		.loc 1 38 3 view .LVU36
 168 000c 8C2F      		mov r24,r28
 169               	/* epilogue start */
  39:quantum/quantum.c **** }
 170               		.loc 1 39 1 is_stmt 0 view .LVU37
 171 000e CF91      		pop r28
  38:quantum/quantum.c ****   register_code (code);
 172               		.loc 1 38 3 view .LVU38
 173 0010 0C94 0000 		jmp register_code
 174               	.LVL16:
 175               		.cfi_endproc
 176               	.LFE112:
 178               		.section	.text.unregister_code16,"ax",@progbits
 179               	.global	unregister_code16
 181               	unregister_code16:
 182               	.LVL17:
 183               	.LFB113:
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 184               		.loc 1 41 40 is_stmt 1 view -0
 185               		.cfi_startproc
 186               		.loc 1 41 40 is_stmt 0 view .LVU40
 187 0000 CF93      		push r28
 188               	.LCFI5:
 189               		.cfi_def_cfa_offset 3
 190               		.cfi_offset 28, -2
 191 0002 DF93      		push r29
 192               	.LCFI6:
 193               		.cfi_def_cfa_offset 4
 194               		.cfi_offset 29, -3
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 2 */
 198               	.L__stack_usage = 2
 199 0004 EC01      		movw r28,r24
  42:quantum/quantum.c ****   unregister_code (code);
 200               		.loc 1 42 3 is_stmt 1 view .LVU41
 201 0006 0E94 0000 		call unregister_code
 202               	.LVL18:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 203               		.loc 1 43 3 view .LVU42
 204 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 205 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 206 000e CE01      		movw r24,r28
 207               	/* epilogue start */
  44:quantum/quantum.c **** }
 208               		.loc 1 44 1 is_stmt 0 view .LVU43
 209 0010 DF91      		pop r29
 210 0012 CF91      		pop r28
 211               	.LVL19:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 212               		.loc 1 43 3 view .LVU44
 213 0014 0C94 0000 		jmp do_code16
 214               	.LVL20:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 215               		.loc 1 43 3 view .LVU45
 216               		.cfi_endproc
 217               	.LFE113:
 219               		.section	.text.process_action_kb,"ax",@progbits
 220               		.weak	process_action_kb
 222               	process_action_kb:
 223               	.LVL21:
 224               	.LFB114:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** __attribute__ ((weak))
  47:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 225               		.loc 1 47 45 is_stmt 1 view -0
 226               		.cfi_startproc
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
  48:quantum/quantum.c ****   return true;
 231               		.loc 1 48 3 view .LVU47
  49:quantum/quantum.c **** }
 232               		.loc 1 49 1 is_stmt 0 view .LVU48
 233 0000 81E0      		ldi r24,lo8(1)
 234               	.LVL22:
 235               	/* epilogue start */
 236               		.loc 1 49 1 view .LVU49
 237 0002 0895      		ret
 238               		.cfi_endproc
 239               	.LFE114:
 241               		.section	.text.process_record_user,"ax",@progbits
 242               		.weak	process_record_user
 244               	process_record_user:
 245               	.LVL23:
 246               	.LFB116:
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** __attribute__ ((weak))
  52:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  53:quantum/quantum.c ****   return process_record_user(keycode, record);
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** __attribute__ ((weak))
  57:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 247               		.loc 1 57 65 is_stmt 1 view -0
 248               		.cfi_startproc
 249               	/* prologue: function */
 250               	/* frame size = 0 */
 251               	/* stack size = 0 */
 252               	.L__stack_usage = 0
  58:quantum/quantum.c ****   return true;
 253               		.loc 1 58 3 view .LVU51
  59:quantum/quantum.c **** }
 254               		.loc 1 59 1 is_stmt 0 view .LVU52
 255 0000 81E0      		ldi r24,lo8(1)
 256               	.LVL24:
 257               	/* epilogue start */
 258               		.loc 1 59 1 view .LVU53
 259 0002 0895      		ret
 260               		.cfi_endproc
 261               	.LFE116:
 263               		.section	.text.process_record_kb,"ax",@progbits
 264               		.weak	process_record_kb
 266               	process_record_kb:
 267               	.LVL25:
 268               	.LFB115:
  52:quantum/quantum.c ****   return process_record_user(keycode, record);
 269               		.loc 1 52 63 is_stmt 1 view -0
 270               		.cfi_startproc
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
  53:quantum/quantum.c **** }
 275               		.loc 1 53 3 view .LVU55
  53:quantum/quantum.c **** }
 276               		.loc 1 53 10 is_stmt 0 view .LVU56
 277 0000 0C94 0000 		jmp process_record_user
 278               	.LVL26:
  53:quantum/quantum.c **** }
 279               		.loc 1 53 10 view .LVU57
 280               		.cfi_endproc
 281               	.LFE115:
 283               		.section	.text.reset_keyboard,"ax",@progbits
 284               	.global	reset_keyboard
 286               	reset_keyboard:
 287               	.LFB117:
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** void reset_keyboard(void) {
 288               		.loc 1 61 27 is_stmt 1 view -0
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
  62:quantum/quantum.c ****   clear_keyboard();
 294               		.loc 1 62 3 view .LVU59
 295 0000 0E94 0000 		call clear_keyboard
 296               	.LVL27:
  63:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  64:quantum/quantum.c ****   stop_all_notes();
  65:quantum/quantum.c ****   shutdown_user();
  66:quantum/quantum.c **** #endif
  67:quantum/quantum.c ****   wait_ms(250);
 297               		.loc 1 67 3 view .LVU60
 298               	.LBB8:
 299               	.LBI8:
 300               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2551 2020-10-10 20:33:35Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 301               		.loc 2 166 1 view .LVU61
 302               	.LBB9:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 303               		.loc 2 168 2 view .LVU62
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 304               		.loc 2 172 2 view .LVU63
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 305               		.loc 2 173 2 view .LVU64
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 306               		.loc 2 174 2 view .LVU65
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 307               		.loc 2 184 3 view .LVU66
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 308               		.loc 2 187 2 view .LVU67
 309 0004 2FEF      		ldi r18,lo8(799999)
 310 0006 84E3      		ldi r24,hi8(799999)
 311 0008 9CE0      		ldi r25,hlo8(799999)
 312 000a 2150      	1:	subi r18,1
 313 000c 8040      		sbci r24,0
 314 000e 9040      		sbci r25,0
 315 0010 01F4      		brne 1b
 316 0012 00C0      		rjmp .
 317 0014 0000      		nop
 318               	.LVL28:
 319               		.loc 2 187 2 is_stmt 0 view .LVU68
 320               	.LBE9:
 321               	.LBE8:
  68:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  69:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  70:quantum/quantum.c **** #endif
  71:quantum/quantum.c ****   bootloader_jump();
 322               		.loc 1 71 3 is_stmt 1 view .LVU69
 323 0016 0C94 0000 		jmp bootloader_jump
 324               	.LVL29:
 325               		.cfi_endproc
 326               	.LFE117:
 328               		.section	.text.process_record_quantum,"ax",@progbits
 329               	.global	process_record_quantum
 331               	process_record_quantum:
 332               	.LVL30:
 333               	.LFB118:
  72:quantum/quantum.c **** }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c **** // Shift / paren setup
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** #ifndef LSPO_KEY
  77:quantum/quantum.c ****   #define LSPO_KEY KC_9
  78:quantum/quantum.c **** #endif
  79:quantum/quantum.c **** #ifndef RSPC_KEY
  80:quantum/quantum.c ****   #define RSPC_KEY KC_0
  81:quantum/quantum.c **** #endif
  82:quantum/quantum.c **** 
  83:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  84:quantum/quantum.c **** static uint16_t scs_timer = 0;
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 334               		.loc 1 86 50 view -0
 335               		.cfi_startproc
 336               		.loc 1 86 50 is_stmt 0 view .LVU71
 337 0000 EF92      		push r14
 338               	.LCFI7:
 339               		.cfi_def_cfa_offset 3
 340               		.cfi_offset 14, -2
 341 0002 FF92      		push r15
 342               	.LCFI8:
 343               		.cfi_def_cfa_offset 4
 344               		.cfi_offset 15, -3
 345 0004 0F93      		push r16
 346               	.LCFI9:
 347               		.cfi_def_cfa_offset 5
 348               		.cfi_offset 16, -4
 349 0006 1F93      		push r17
 350               	.LCFI10:
 351               		.cfi_def_cfa_offset 6
 352               		.cfi_offset 17, -5
 353 0008 CF93      		push r28
 354               	.LCFI11:
 355               		.cfi_def_cfa_offset 7
 356               		.cfi_offset 28, -6
 357 000a DF93      		push r29
 358               	.LCFI12:
 359               		.cfi_def_cfa_offset 8
 360               		.cfi_offset 29, -7
 361               	/* prologue: function */
 362               	/* frame size = 0 */
 363               	/* stack size = 6 */
 364               	.L__stack_usage = 6
 365 000c 8C01      		movw r16,r24
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  89:quantum/quantum.c ****   keypos_t key = record->event.key;
 366               		.loc 1 89 3 is_stmt 1 view .LVU72
 367               		.loc 1 89 12 is_stmt 0 view .LVU73
 368 000e FC01      		movw r30,r24
 369 0010 E080      		ld r14,Z
 370 0012 F180      		ldd r15,Z+1
 371               	.LVL31:
  90:quantum/quantum.c ****   uint16_t keycode;
 372               		.loc 1 90 3 is_stmt 1 view .LVU74
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  93:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  94:quantum/quantum.c ****     if (!disable_action_cache) {
 373               		.loc 1 94 5 view .LVU75
 374               		.loc 1 94 8 is_stmt 0 view .LVU76
 375 0014 8091 0000 		lds r24,disable_action_cache
 376               	.LVL32:
 377               		.loc 1 94 8 view .LVU77
 378 0018 8111      		cpse r24,__zero_reg__
 379 001a 00C0      		rjmp .L28
 380               	.LBB10:
  95:quantum/quantum.c ****       uint8_t layer;
 381               		.loc 1 95 7 is_stmt 1 view .LVU78
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****       if (record->event.pressed) {
 382               		.loc 1 97 7 view .LVU79
 383               		.loc 1 97 10 is_stmt 0 view .LVU80
 384 001c 8281      		ldd r24,Z+2
 385 001e 8823      		tst r24
 386 0020 01F0      		breq .L29
  98:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 387               		.loc 1 98 9 is_stmt 1 view .LVU81
 388               	.LVL33:
 389               		.loc 1 98 17 is_stmt 0 view .LVU82
 390 0022 C701      		movw r24,r14
 391 0024 0E94 0000 		call layer_switch_get_layer
 392               	.LVL34:
 393 0028 C82F      		mov r28,r24
 394               	.LVL35:
  99:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 395               		.loc 1 99 9 is_stmt 1 view .LVU83
 396 002a 682F      		mov r22,r24
 397 002c C701      		movw r24,r14
 398               	.LVL36:
 399               		.loc 1 99 9 is_stmt 0 view .LVU84
 400 002e 0E94 0000 		call update_source_layers_cache
 401               	.LVL37:
 402               	.L30:
 100:quantum/quantum.c ****       } else {
 101:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 102:quantum/quantum.c ****       }
 103:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 403               		.loc 1 103 7 is_stmt 1 view .LVU85
 404               		.loc 1 103 17 is_stmt 0 view .LVU86
 405 0032 B701      		movw r22,r14
 406 0034 8C2F      		mov r24,r28
 407               	.LVL38:
 408               	.L86:
 409               		.loc 1 103 17 view .LVU87
 410               	.LBE10:
 104:quantum/quantum.c ****     } else
 105:quantum/quantum.c ****   #endif
 106:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 411               		.loc 1 106 15 view .LVU88
 412 0036 0E94 0000 		call keymap_key_to_keycode
 413               	.LVL39:
 414 003a EC01      		movw r28,r24
 415               	.LVL40:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c ****     // This is how you use actions here
 109:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 110:quantum/quantum.c ****     //   action_t action;
 111:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 112:quantum/quantum.c ****     //   process_action(record, action);
 113:quantum/quantum.c ****     //   return false;
 114:quantum/quantum.c ****     // }
 115:quantum/quantum.c **** 
 116:quantum/quantum.c ****   if (!(
 416               		.loc 1 116 3 is_stmt 1 view .LVU89
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 417               		.loc 1 117 5 is_stmt 0 view .LVU90
 418 003c B801      		movw r22,r16
 419 003e 0E94 0000 		call process_record_kb
 420               	.LVL41:
 421               		.loc 1 117 40 view .LVU91
 422 0042 8823      		tst r24
 423 0044 01F4      		brne .+2
 424 0046 00C0      		rjmp .L42
 118:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 119:quantum/quantum.c ****     process_midi(keycode, record) &&
 120:quantum/quantum.c ****   #endif
 121:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 122:quantum/quantum.c ****     process_music(keycode, record) &&
 123:quantum/quantum.c ****   #endif
 124:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 125:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 126:quantum/quantum.c ****   #endif
 127:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 128:quantum/quantum.c ****     process_leader(keycode, record) &&
 425               		.loc 1 128 5 discriminator 2 view .LVU92
 426 0048 B801      		movw r22,r16
 427 004a CE01      		movw r24,r28
 428 004c 0E94 0000 		call process_leader
 429               	.LVL42:
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 430               		.loc 1 117 40 discriminator 2 view .LVU93
 431 0050 8823      		tst r24
 432 0052 01F4      		brne .+2
 433 0054 00C0      		rjmp .L42
 129:quantum/quantum.c ****   #endif
 130:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 131:quantum/quantum.c ****     process_chording(keycode, record) &&
 132:quantum/quantum.c ****   #endif
 133:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 134:quantum/quantum.c ****     process_unicode(keycode, record) &&
 135:quantum/quantum.c ****   #endif
 136:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 137:quantum/quantum.c ****     process_ucis(keycode, record) &&
 138:quantum/quantum.c ****   #endif
 139:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 140:quantum/quantum.c ****     process_printer(keycode, record) &&
 141:quantum/quantum.c ****   #endif
 142:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 143:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 144:quantum/quantum.c ****   #endif
 145:quantum/quantum.c ****       true)) {
 146:quantum/quantum.c ****     return false;
 147:quantum/quantum.c ****   }
 148:quantum/quantum.c **** 
 149:quantum/quantum.c ****   // Shift / paren setup
 150:quantum/quantum.c **** 
 151:quantum/quantum.c ****   switch(keycode) {
 434               		.loc 1 151 3 is_stmt 1 view .LVU94
 435 0056 C531      		cpi r28,21
 436 0058 F0E7      		ldi r31,112
 437 005a DF07      		cpc r29,r31
 438 005c 00F4      		brsh .L35
 439 005e C230      		cpi r28,2
 440 0060 80E7      		ldi r24,112
 441 0062 D807      		cpc r29,r24
 442 0064 00F0      		brlo .+2
 443 0066 00C0      		rjmp .L36
 444 0068 C115      		cp r28,__zero_reg__
 445 006a E0E7      		ldi r30,112
 446 006c DE07      		cpc r29,r30
 447 006e 01F0      		breq .L37
 448 0070 C130      		cpi r28,1
 449 0072 D047      		sbci r29,112
 450 0074 01F0      		breq .L38
 451               	.L39:
 152:quantum/quantum.c ****     case RESET:
 153:quantum/quantum.c ****       if (record->event.pressed) {
 154:quantum/quantum.c ****         reset_keyboard();
 155:quantum/quantum.c ****       }
 156:quantum/quantum.c **** 	  return false;
 157:quantum/quantum.c ****       break;
 158:quantum/quantum.c ****     case DEBUG:
 159:quantum/quantum.c ****       if (record->event.pressed) {
 160:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 161:quantum/quantum.c ****           debug_enable = true;
 162:quantum/quantum.c ****       }
 163:quantum/quantum.c **** 	  return false;
 164:quantum/quantum.c ****       break;
 165:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 166:quantum/quantum.c **** 	case RGB_TOG:
 167:quantum/quantum.c **** 		if (record->event.pressed) {
 168:quantum/quantum.c **** 			rgblight_toggle();
 169:quantum/quantum.c ****       }
 170:quantum/quantum.c **** 	  return false;
 171:quantum/quantum.c ****       break;
 172:quantum/quantum.c **** 	case RGB_MOD:
 173:quantum/quantum.c **** 		if (record->event.pressed) {
 174:quantum/quantum.c **** 			rgblight_step();
 175:quantum/quantum.c ****       }
 176:quantum/quantum.c **** 	  return false;
 177:quantum/quantum.c ****       break;
 178:quantum/quantum.c **** 	case RGB_HUI:
 179:quantum/quantum.c **** 		if (record->event.pressed) {
 180:quantum/quantum.c **** 			rgblight_increase_hue();
 181:quantum/quantum.c ****       }
 182:quantum/quantum.c **** 	  return false;
 183:quantum/quantum.c ****       break;
 184:quantum/quantum.c **** 	case RGB_HUD:
 185:quantum/quantum.c **** 		if (record->event.pressed) {
 186:quantum/quantum.c **** 			rgblight_decrease_hue();
 187:quantum/quantum.c ****       }
 188:quantum/quantum.c **** 	  return false;
 189:quantum/quantum.c ****       break;
 190:quantum/quantum.c **** 	case RGB_SAI:
 191:quantum/quantum.c **** 		if (record->event.pressed) {
 192:quantum/quantum.c **** 			rgblight_increase_sat();
 193:quantum/quantum.c ****       }
 194:quantum/quantum.c **** 	  return false;
 195:quantum/quantum.c ****       break;
 196:quantum/quantum.c **** 	case RGB_SAD:
 197:quantum/quantum.c **** 		if (record->event.pressed) {
 198:quantum/quantum.c **** 			rgblight_decrease_sat();
 199:quantum/quantum.c ****       }
 200:quantum/quantum.c **** 	  return false;
 201:quantum/quantum.c ****       break;
 202:quantum/quantum.c **** 	case RGB_VAI:
 203:quantum/quantum.c **** 		if (record->event.pressed) {
 204:quantum/quantum.c **** 			rgblight_increase_val();
 205:quantum/quantum.c ****       }
 206:quantum/quantum.c **** 	  return false;
 207:quantum/quantum.c ****       break;
 208:quantum/quantum.c **** 	case RGB_VAD:
 209:quantum/quantum.c **** 		if (record->event.pressed) {
 210:quantum/quantum.c **** 			rgblight_decrease_val();
 211:quantum/quantum.c ****       }
 212:quantum/quantum.c **** 	  return false;
 213:quantum/quantum.c ****       break;
 214:quantum/quantum.c **** 	#endif
 215:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 216:quantum/quantum.c ****       if (record->event.pressed) {
 217:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 218:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 219:quantum/quantum.c ****             eeconfig_init();
 220:quantum/quantum.c ****         }
 221:quantum/quantum.c ****         /* keymap config */
 222:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 223:quantum/quantum.c ****         switch (keycode)
 224:quantum/quantum.c ****         {
 225:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 226:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 227:quantum/quantum.c ****             break;
 228:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 229:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 230:quantum/quantum.c ****             break;
 231:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 232:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 233:quantum/quantum.c ****             break;
 234:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 235:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 236:quantum/quantum.c ****             break;
 237:quantum/quantum.c ****           case MAGIC_NO_GUI:
 238:quantum/quantum.c ****             keymap_config.no_gui = true;
 239:quantum/quantum.c ****             break;
 240:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 241:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 244:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 247:quantum/quantum.c ****             keymap_config.nkro = true;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 251:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 252:quantum/quantum.c ****             break;
 253:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 254:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 255:quantum/quantum.c ****             break;
 256:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 257:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 258:quantum/quantum.c ****             break;
 259:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 260:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 261:quantum/quantum.c ****             break;
 262:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 263:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 264:quantum/quantum.c ****             break;
 265:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 266:quantum/quantum.c ****             keymap_config.no_gui = false;
 267:quantum/quantum.c ****             break;
 268:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 269:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 272:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 275:quantum/quantum.c ****             keymap_config.nkro = false;
 276:quantum/quantum.c ****             break;
 277:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 278:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 279:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 280:quantum/quantum.c ****             break;
 281:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 282:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 283:quantum/quantum.c ****             break;
 284:quantum/quantum.c ****           default:
 285:quantum/quantum.c ****             break;
 286:quantum/quantum.c ****         }
 287:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 288:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 289:quantum/quantum.c **** 
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****       }
 292:quantum/quantum.c ****       break;
 293:quantum/quantum.c ****     case KC_LSPO: {
 294:quantum/quantum.c ****       if (record->event.pressed) {
 295:quantum/quantum.c ****         shift_interrupted[0] = false;
 296:quantum/quantum.c ****         scs_timer = timer_read ();
 297:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 298:quantum/quantum.c ****       }
 299:quantum/quantum.c ****       else {
 300:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 301:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 302:quantum/quantum.c ****             shift_interrupted[0] = true;
 303:quantum/quantum.c ****             shift_interrupted[1] = true;
 304:quantum/quantum.c ****           }
 305:quantum/quantum.c ****         #endif
 306:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 307:quantum/quantum.c ****           register_code(LSPO_KEY);
 308:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 309:quantum/quantum.c ****         }
 310:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****       return false;
 313:quantum/quantum.c ****       // break;
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c **** 
 316:quantum/quantum.c ****     case KC_RSPC: {
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         shift_interrupted[1] = false;
 319:quantum/quantum.c ****         scs_timer = timer_read ();
 320:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 321:quantum/quantum.c ****       }
 322:quantum/quantum.c ****       else {
 323:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 324:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 325:quantum/quantum.c ****             shift_interrupted[0] = true;
 326:quantum/quantum.c ****             shift_interrupted[1] = true;
 327:quantum/quantum.c ****           }
 328:quantum/quantum.c ****         #endif
 329:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 330:quantum/quantum.c ****           register_code(RSPC_KEY);
 331:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****       return false;
 336:quantum/quantum.c ****       // break;
 337:quantum/quantum.c ****     }
 338:quantum/quantum.c ****     default: {
 339:quantum/quantum.c ****       shift_interrupted[0] = true;
 452               		.loc 1 339 7 view .LVU95
 453               		.loc 1 339 28 is_stmt 0 view .LVU96
 454 0076 81E0      		ldi r24,lo8(1)
 455 0078 8093 0000 		sts shift_interrupted,r24
 340:quantum/quantum.c ****       shift_interrupted[1] = true;
 456               		.loc 1 340 7 is_stmt 1 view .LVU97
 457               		.loc 1 340 28 is_stmt 0 view .LVU98
 458 007c 8093 0000 		sts shift_interrupted+1,r24
 341:quantum/quantum.c ****       break;
 459               		.loc 1 341 7 is_stmt 1 view .LVU99
 460               	.L43:
 342:quantum/quantum.c ****     }
 343:quantum/quantum.c ****   }
 344:quantum/quantum.c **** 
 345:quantum/quantum.c ****   return process_action_kb(record);
 461               		.loc 1 345 3 view .LVU100
 462               		.loc 1 345 10 is_stmt 0 view .LVU101
 463 0080 C801      		movw r24,r16
 464               	/* epilogue start */
 346:quantum/quantum.c **** }
 465               		.loc 1 346 1 view .LVU102
 466 0082 DF91      		pop r29
 467 0084 CF91      		pop r28
 468               	.LVL43:
 469               		.loc 1 346 1 view .LVU103
 470 0086 1F91      		pop r17
 471 0088 0F91      		pop r16
 472               	.LVL44:
 473               		.loc 1 346 1 view .LVU104
 474 008a FF90      		pop r15
 475 008c EF90      		pop r14
 476               	.LVL45:
 345:quantum/quantum.c **** }
 477               		.loc 1 345 10 view .LVU105
 478 008e 0C94 0000 		jmp process_action_kb
 479               	.LVL46:
 480               	.L29:
 481               	.LBB11:
 101:quantum/quantum.c ****       }
 482               		.loc 1 101 9 is_stmt 1 view .LVU106
 101:quantum/quantum.c ****       }
 483               		.loc 1 101 17 is_stmt 0 view .LVU107
 484 0092 C701      		movw r24,r14
 485 0094 0E94 0000 		call read_source_layers_cache
 486               	.LVL47:
 487 0098 C82F      		mov r28,r24
 488               	.LVL48:
 101:quantum/quantum.c ****       }
 489               		.loc 1 101 17 view .LVU108
 490 009a 00C0      		rjmp .L30
 491               	.LVL49:
 492               	.L28:
 101:quantum/quantum.c ****       }
 493               		.loc 1 101 17 view .LVU109
 494               	.LBE11:
 106:quantum/quantum.c **** 
 495               		.loc 1 106 5 is_stmt 1 view .LVU110
 106:quantum/quantum.c **** 
 496               		.loc 1 106 37 is_stmt 0 view .LVU111
 497 009c C701      		movw r24,r14
 498 009e 0E94 0000 		call layer_switch_get_layer
 499               	.LVL50:
 106:quantum/quantum.c **** 
 500               		.loc 1 106 15 view .LVU112
 501 00a2 B701      		movw r22,r14
 502 00a4 00C0      		rjmp .L86
 503               	.LVL51:
 504               	.L35:
 151:quantum/quantum.c ****     case RESET:
 505               		.loc 1 151 3 view .LVU113
 506 00a6 CC33      		cpi r28,60
 507 00a8 80E7      		ldi r24,112
 508 00aa D807      		cpc r29,r24
 509 00ac 01F4      		brne .+2
 510 00ae 00C0      		rjmp .L40
 511 00b0 CD33      		cpi r28,61
 512 00b2 D047      		sbci r29,112
 513 00b4 01F4      		brne .L39
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 514               		.loc 1 317 7 is_stmt 1 view .LVU114
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 515               		.loc 1 317 10 is_stmt 0 view .LVU115
 516 00b6 F801      		movw r30,r16
 517 00b8 8281      		ldd r24,Z+2
 518 00ba 8823      		tst r24
 519 00bc 01F4      		brne .+2
 520 00be 00C0      		rjmp .L70
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 521               		.loc 1 318 9 is_stmt 1 view .LVU116
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 522               		.loc 1 318 30 is_stmt 0 view .LVU117
 523 00c0 1092 0000 		sts shift_interrupted+1,__zero_reg__
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 524               		.loc 1 319 9 is_stmt 1 view .LVU118
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 525               		.loc 1 319 21 is_stmt 0 view .LVU119
 526 00c4 0E94 0000 		call timer_read
 527               	.LVL52:
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 528               		.loc 1 319 19 view .LVU120
 529 00c8 9093 0000 		sts scs_timer+1,r25
 530 00cc 8093 0000 		sts scs_timer,r24
 320:quantum/quantum.c ****       }
 531               		.loc 1 320 9 is_stmt 1 view .LVU121
 532 00d0 80E2      		ldi r24,lo8(32)
 533 00d2 00C0      		rjmp .L88
 534               	.L37:
 153:quantum/quantum.c ****         reset_keyboard();
 535               		.loc 1 153 7 view .LVU122
 153:quantum/quantum.c ****         reset_keyboard();
 536               		.loc 1 153 10 is_stmt 0 view .LVU123
 537 00d4 F801      		movw r30,r16
 538 00d6 8281      		ldd r24,Z+2
 539 00d8 8111      		cpse r24,__zero_reg__
 154:quantum/quantum.c ****       }
 540               		.loc 1 154 9 is_stmt 1 view .LVU124
 541 00da 0E94 0000 		call reset_keyboard
 542               	.LVL53:
 543               	.L42:
 544               		.loc 1 346 1 is_stmt 0 view .LVU125
 545 00de 80E0      		ldi r24,0
 546               	/* epilogue start */
 547 00e0 DF91      		pop r29
 548 00e2 CF91      		pop r28
 549               	.LVL54:
 550               		.loc 1 346 1 view .LVU126
 551 00e4 1F91      		pop r17
 552 00e6 0F91      		pop r16
 553               	.LVL55:
 554               		.loc 1 346 1 view .LVU127
 555 00e8 FF90      		pop r15
 556 00ea EF90      		pop r14
 557               	.LVL56:
 558               		.loc 1 346 1 view .LVU128
 559 00ec 0895      		ret
 560               	.LVL57:
 561               	.L38:
 157:quantum/quantum.c ****     case DEBUG:
 562               		.loc 1 157 7 is_stmt 1 view .LVU129
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 563               		.loc 1 159 7 view .LVU130
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 564               		.loc 1 159 10 is_stmt 0 view .LVU131
 565 00ee F801      		movw r30,r16
 566 00f0 8281      		ldd r24,Z+2
 567 00f2 8823      		tst r24
 568 00f4 01F0      		breq .L42
 160:quantum/quantum.c ****           debug_enable = true;
 569               		.loc 1 160 39 is_stmt 1 view .LVU132
 161:quantum/quantum.c ****       }
 570               		.loc 1 161 11 view .LVU133
 161:quantum/quantum.c ****       }
 571               		.loc 1 161 24 is_stmt 0 view .LVU134
 572 00f6 8091 0000 		lds r24,debug_config
 573 00fa 8160      		ori r24,lo8(1<<0)
 574 00fc 8093 0000 		sts debug_config,r24
 575 0100 00C0      		rjmp .L42
 576               	.L36:
 164:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 577               		.loc 1 164 7 is_stmt 1 view .LVU135
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 578               		.loc 1 216 7 view .LVU136
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 579               		.loc 1 216 10 is_stmt 0 view .LVU137
 580 0102 F801      		movw r30,r16
 581 0104 8281      		ldd r24,Z+2
 582 0106 8823      		tst r24
 583 0108 01F4      		brne .+2
 584 010a 00C0      		rjmp .L43
 218:quantum/quantum.c ****             eeconfig_init();
 585               		.loc 1 218 9 is_stmt 1 view .LVU138
 218:quantum/quantum.c ****             eeconfig_init();
 586               		.loc 1 218 14 is_stmt 0 view .LVU139
 587 010c 0E94 0000 		call eeconfig_is_enabled
 588               	.LVL58:
 218:quantum/quantum.c ****             eeconfig_init();
 589               		.loc 1 218 12 view .LVU140
 590 0110 8111      		cpse r24,__zero_reg__
 591 0112 00C0      		rjmp .L44
 219:quantum/quantum.c ****         }
 592               		.loc 1 219 13 is_stmt 1 view .LVU141
 593 0114 0E94 0000 		call eeconfig_init
 594               	.LVL59:
 595               	.L44:
 222:quantum/quantum.c ****         switch (keycode)
 596               		.loc 1 222 9 view .LVU142
 222:quantum/quantum.c ****         switch (keycode)
 597               		.loc 1 222 29 is_stmt 0 view .LVU143
 598 0118 0E94 0000 		call eeconfig_read_keymap
 599               	.LVL60:
 600 011c 90E0      		ldi r25,0
 601 011e 9093 0000 		sts keymap_config+1,r25
 602 0122 8093 0000 		sts keymap_config,r24
 223:quantum/quantum.c ****         {
 603               		.loc 1 223 9 is_stmt 1 view .LVU144
 604 0126 FE01      		movw r30,r28
 605 0128 E350      		subi r30,3
 606 012a F047      		sbci r31,112
 226:quantum/quantum.c ****             break;
 607               		.loc 1 226 49 is_stmt 0 view .LVU145
 608 012c 8091 0000 		lds r24,keymap_config
 609 0130 8160      		ori r24,lo8(1<<0)
 610 0132 E231      		cpi r30,18
 611 0134 F105      		cpc r31,__zero_reg__
 612 0136 00F4      		brsh .L87
 613 0138 E050      		subi r30,lo8(-(gs(.L47)))
 614 013a F040      		sbci r31,hi8(-(gs(.L47)))
 615 013c 0C94 0000 		jmp __tablejump2__
 616               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 617               		.p2align	1
 618               	.L47:
 619 0000 0000      		.word gs(.L64)
 620 0002 0000      		.word gs(.L63)
 621 0004 0000      		.word gs(.L62)
 622 0006 0000      		.word gs(.L61)
 623 0008 0000      		.word gs(.L60)
 624 000a 0000      		.word gs(.L59)
 625 000c 0000      		.word gs(.L58)
 626 000e 0000      		.word gs(.L57)
 627 0010 0000      		.word gs(.L56)
 628 0012 0000      		.word gs(.L55)
 629 0014 0000      		.word gs(.L54)
 630 0016 0000      		.word gs(.L53)
 631 0018 0000      		.word gs(.L52)
 632 001a 0000      		.word gs(.L51)
 633 001c 0000      		.word gs(.L50)
 634 001e 0000      		.word gs(.L49)
 635 0020 0000      		.word gs(.L48)
 636 0022 0000      		.word gs(.L46)
 637               		.section	.text.process_record_quantum
 638               	.L64:
 229:quantum/quantum.c ****             break;
 639               		.loc 1 229 13 is_stmt 1 view .LVU146
 229:quantum/quantum.c ****             break;
 640               		.loc 1 229 47 is_stmt 0 view .LVU147
 641 0140 8091 0000 		lds r24,keymap_config
 642 0144 8260      		ori r24,lo8(1<<1)
 643               	.L87:
 282:quantum/quantum.c ****             break;
 644               		.loc 1 282 32 view .LVU148
 645 0146 8093 0000 		sts keymap_config,r24
 283:quantum/quantum.c ****           default:
 646               		.loc 1 283 13 is_stmt 1 view .LVU149
 287:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 647               		.loc 1 287 9 view .LVU150
 648 014a 8091 0000 		lds r24,keymap_config
 649 014e 0E94 0000 		call eeconfig_update_keymap
 650               	.LVL61:
 288:quantum/quantum.c **** 
 651               		.loc 1 288 9 view .LVU151
 652 0152 0E94 0000 		call clear_keyboard
 653               	.LVL62:
 290:quantum/quantum.c ****       }
 654               		.loc 1 290 9 view .LVU152
 290:quantum/quantum.c ****       }
 655               		.loc 1 290 16 is_stmt 0 view .LVU153
 656 0156 00C0      		rjmp .L42
 657               	.L63:
 232:quantum/quantum.c ****             break;
 658               		.loc 1 232 13 is_stmt 1 view .LVU154
 232:quantum/quantum.c ****             break;
 659               		.loc 1 232 42 is_stmt 0 view .LVU155
 660 0158 8091 0000 		lds r24,keymap_config
 661 015c 8460      		ori r24,lo8(1<<2)
 662 015e 00C0      		rjmp .L87
 663               	.L62:
 235:quantum/quantum.c ****             break;
 664               		.loc 1 235 13 is_stmt 1 view .LVU156
 235:quantum/quantum.c ****             break;
 665               		.loc 1 235 42 is_stmt 0 view .LVU157
 666 0160 8091 0000 		lds r24,keymap_config
 667 0164 8860      		ori r24,lo8(1<<3)
 668 0166 00C0      		rjmp .L87
 669               	.L61:
 238:quantum/quantum.c ****             break;
 670               		.loc 1 238 13 is_stmt 1 view .LVU158
 238:quantum/quantum.c ****             break;
 671               		.loc 1 238 34 is_stmt 0 view .LVU159
 672 0168 8091 0000 		lds r24,keymap_config
 673 016c 8061      		ori r24,lo8(1<<4)
 674 016e 00C0      		rjmp .L87
 675               	.L60:
 241:quantum/quantum.c ****             break;
 676               		.loc 1 241 13 is_stmt 1 view .LVU160
 241:quantum/quantum.c ****             break;
 677               		.loc 1 241 42 is_stmt 0 view .LVU161
 678 0170 8091 0000 		lds r24,keymap_config
 679 0174 8062      		ori r24,lo8(1<<5)
 680 0176 00C0      		rjmp .L87
 681               	.L59:
 244:quantum/quantum.c ****             break;
 682               		.loc 1 244 13 is_stmt 1 view .LVU162
 244:quantum/quantum.c ****             break;
 683               		.loc 1 244 52 is_stmt 0 view .LVU163
 684 0178 8091 0000 		lds r24,keymap_config
 685 017c 8064      		ori r24,lo8(1<<6)
 686 017e 00C0      		rjmp .L87
 687               	.L58:
 247:quantum/quantum.c ****             break;
 688               		.loc 1 247 13 is_stmt 1 view .LVU164
 247:quantum/quantum.c ****             break;
 689               		.loc 1 247 32 is_stmt 0 view .LVU165
 690 0180 8091 0000 		lds r24,keymap_config
 691 0184 8068      		ori r24,lo8(1<<7)
 692 0186 00C0      		rjmp .L87
 693               	.L57:
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 694               		.loc 1 250 13 is_stmt 1 view .LVU166
 251:quantum/quantum.c ****             break;
 695               		.loc 1 251 13 view .LVU167
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 696               		.loc 1 250 42 is_stmt 0 view .LVU168
 697 0188 8091 0000 		lds r24,keymap_config
 698 018c 8C60      		ori r24,lo8(12)
 699 018e 00C0      		rjmp .L87
 700               	.L56:
 254:quantum/quantum.c ****             break;
 701               		.loc 1 254 13 is_stmt 1 view .LVU169
 254:quantum/quantum.c ****             break;
 702               		.loc 1 254 49 is_stmt 0 view .LVU170
 703 0190 8091 0000 		lds r24,keymap_config
 704 0194 8E7F      		andi r24,lo8(~(1<<0))
 705 0196 00C0      		rjmp .L87
 706               	.L55:
 257:quantum/quantum.c ****             break;
 707               		.loc 1 257 13 is_stmt 1 view .LVU171
 257:quantum/quantum.c ****             break;
 708               		.loc 1 257 47 is_stmt 0 view .LVU172
 709 0198 8091 0000 		lds r24,keymap_config
 710 019c 8D7F      		andi r24,lo8(~(1<<1))
 711 019e 00C0      		rjmp .L87
 712               	.L54:
 260:quantum/quantum.c ****             break;
 713               		.loc 1 260 13 is_stmt 1 view .LVU173
 260:quantum/quantum.c ****             break;
 714               		.loc 1 260 42 is_stmt 0 view .LVU174
 715 01a0 8091 0000 		lds r24,keymap_config
 716 01a4 8B7F      		andi r24,lo8(~(1<<2))
 717 01a6 00C0      		rjmp .L87
 718               	.L53:
 263:quantum/quantum.c ****             break;
 719               		.loc 1 263 13 is_stmt 1 view .LVU175
 263:quantum/quantum.c ****             break;
 720               		.loc 1 263 42 is_stmt 0 view .LVU176
 721 01a8 8091 0000 		lds r24,keymap_config
 722 01ac 877F      		andi r24,lo8(~(1<<3))
 723 01ae 00C0      		rjmp .L87
 724               	.L52:
 266:quantum/quantum.c ****             break;
 725               		.loc 1 266 13 is_stmt 1 view .LVU177
 266:quantum/quantum.c ****             break;
 726               		.loc 1 266 34 is_stmt 0 view .LVU178
 727 01b0 8091 0000 		lds r24,keymap_config
 728 01b4 8F7E      		andi r24,lo8(~(1<<4))
 729 01b6 00C0      		rjmp .L87
 730               	.L51:
 269:quantum/quantum.c ****             break;
 731               		.loc 1 269 13 is_stmt 1 view .LVU179
 269:quantum/quantum.c ****             break;
 732               		.loc 1 269 42 is_stmt 0 view .LVU180
 733 01b8 8091 0000 		lds r24,keymap_config
 734 01bc 8F7D      		andi r24,lo8(~(1<<5))
 735 01be 00C0      		rjmp .L87
 736               	.L50:
 272:quantum/quantum.c ****             break;
 737               		.loc 1 272 13 is_stmt 1 view .LVU181
 272:quantum/quantum.c ****             break;
 738               		.loc 1 272 52 is_stmt 0 view .LVU182
 739 01c0 8091 0000 		lds r24,keymap_config
 740 01c4 8F7B      		andi r24,lo8(~(1<<6))
 741 01c6 00C0      		rjmp .L87
 742               	.L49:
 275:quantum/quantum.c ****             break;
 743               		.loc 1 275 13 is_stmt 1 view .LVU183
 275:quantum/quantum.c ****             break;
 744               		.loc 1 275 32 is_stmt 0 view .LVU184
 745 01c8 8091 0000 		lds r24,keymap_config
 746 01cc 8F77      		andi r24,lo8(~(1<<7))
 747 01ce 00C0      		rjmp .L87
 748               	.L48:
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 749               		.loc 1 278 13 is_stmt 1 view .LVU185
 279:quantum/quantum.c ****             break;
 750               		.loc 1 279 13 view .LVU186
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 751               		.loc 1 278 42 is_stmt 0 view .LVU187
 752 01d0 8091 0000 		lds r24,keymap_config
 753 01d4 837F      		andi r24,lo8(-13)
 754 01d6 00C0      		rjmp .L87
 755               	.L46:
 282:quantum/quantum.c ****             break;
 756               		.loc 1 282 13 is_stmt 1 view .LVU188
 282:quantum/quantum.c ****             break;
 757               		.loc 1 282 48 is_stmt 0 view .LVU189
 758 01d8 9091 0000 		lds r25,keymap_config
 282:quantum/quantum.c ****             break;
 759               		.loc 1 282 32 view .LVU190
 760 01dc 892F      		mov r24,r25
 761 01de 97FB      		bst r25,7
 762 01e0 87F9      		bld r24,7
 763 01e2 8058      		subi r24,0x80
 764 01e4 00C0      		rjmp .L87
 765               	.L40:
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 766               		.loc 1 294 7 is_stmt 1 view .LVU191
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 767               		.loc 1 294 10 is_stmt 0 view .LVU192
 768 01e6 F801      		movw r30,r16
 769 01e8 8281      		ldd r24,Z+2
 770 01ea 8823      		tst r24
 771 01ec 01F0      		breq .L66
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 772               		.loc 1 295 9 is_stmt 1 view .LVU193
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 773               		.loc 1 295 30 is_stmt 0 view .LVU194
 774 01ee 1092 0000 		sts shift_interrupted,__zero_reg__
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 775               		.loc 1 296 9 is_stmt 1 view .LVU195
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 776               		.loc 1 296 21 is_stmt 0 view .LVU196
 777 01f2 0E94 0000 		call timer_read
 778               	.LVL63:
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 779               		.loc 1 296 19 view .LVU197
 780 01f6 9093 0000 		sts scs_timer+1,r25
 781 01fa 8093 0000 		sts scs_timer,r24
 297:quantum/quantum.c ****       }
 782               		.loc 1 297 9 is_stmt 1 view .LVU198
 783 01fe 82E0      		ldi r24,lo8(2)
 784               	.L88:
 320:quantum/quantum.c ****       }
 785               		.loc 1 320 9 is_stmt 0 view .LVU199
 786 0200 0E94 0000 		call register_mods
 787               	.LVL64:
 788 0204 00C0      		rjmp .L42
 789               	.L66:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 790               		.loc 1 306 9 is_stmt 1 view .LVU200
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 791               		.loc 1 306 12 is_stmt 0 view .LVU201
 792 0206 8091 0000 		lds r24,shift_interrupted
 793 020a 8111      		cpse r24,__zero_reg__
 794 020c 00C0      		rjmp .L68
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 795               		.loc 1 306 38 discriminator 1 view .LVU202
 796 020e 8091 0000 		lds r24,scs_timer
 797 0212 9091 0000 		lds r25,scs_timer+1
 798 0216 0E94 0000 		call timer_elapsed
 799               	.LVL65:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 800               		.loc 1 306 35 discriminator 1 view .LVU203
 801 021a 883C      		cpi r24,-56
 802 021c 9105      		cpc r25,__zero_reg__
 803 021e 00F4      		brsh .L68
 307:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 804               		.loc 1 307 11 is_stmt 1 view .LVU204
 805 0220 86E2      		ldi r24,lo8(38)
 806 0222 0E94 0000 		call register_code
 807               	.LVL66:
 308:quantum/quantum.c ****         }
 808               		.loc 1 308 11 view .LVU205
 809 0226 86E2      		ldi r24,lo8(38)
 810 0228 0E94 0000 		call unregister_code
 811               	.LVL67:
 812               	.L68:
 310:quantum/quantum.c ****       }
 813               		.loc 1 310 9 view .LVU206
 814 022c 82E0      		ldi r24,lo8(2)
 815               	.L89:
 333:quantum/quantum.c ****       }
 816               		.loc 1 333 9 is_stmt 0 view .LVU207
 817 022e 0E94 0000 		call unregister_mods
 818               	.LVL68:
 819 0232 00C0      		rjmp .L42
 820               	.L70:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 821               		.loc 1 329 9 is_stmt 1 view .LVU208
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 822               		.loc 1 329 12 is_stmt 0 view .LVU209
 823 0234 8091 0000 		lds r24,shift_interrupted+1
 824 0238 8111      		cpse r24,__zero_reg__
 825 023a 00C0      		rjmp .L72
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 826               		.loc 1 329 38 discriminator 1 view .LVU210
 827 023c 8091 0000 		lds r24,scs_timer
 828 0240 9091 0000 		lds r25,scs_timer+1
 829 0244 0E94 0000 		call timer_elapsed
 830               	.LVL69:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 831               		.loc 1 329 35 discriminator 1 view .LVU211
 832 0248 883C      		cpi r24,-56
 833 024a 9105      		cpc r25,__zero_reg__
 834 024c 00F4      		brsh .L72
 330:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 835               		.loc 1 330 11 is_stmt 1 view .LVU212
 836 024e 87E2      		ldi r24,lo8(39)
 837 0250 0E94 0000 		call register_code
 838               	.LVL70:
 331:quantum/quantum.c ****         }
 839               		.loc 1 331 11 view .LVU213
 840 0254 87E2      		ldi r24,lo8(39)
 841 0256 0E94 0000 		call unregister_code
 842               	.LVL71:
 843               	.L72:
 333:quantum/quantum.c ****       }
 844               		.loc 1 333 9 view .LVU214
 845 025a 80E2      		ldi r24,lo8(32)
 846 025c 00C0      		rjmp .L89
 847               		.cfi_endproc
 848               	.LFE118:
 850               		.section	.text.send_string,"ax",@progbits
 851               	.global	send_string
 853               	send_string:
 854               	.LVL72:
 855               	.LFB119:
 347:quantum/quantum.c **** 
 348:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 353:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 354:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 355:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 356:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 357:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 358:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 359:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 360:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 361:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 362:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 363:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 364:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 365:quantum/quantum.c **** };
 366:quantum/quantum.c **** 
 367:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 368:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 369:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 370:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 371:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 372:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 373:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 374:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 375:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 376:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 377:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 378:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 379:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 380:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 381:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 382:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 383:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 387:quantum/quantum.c **** #if 0
 388:quantum/quantum.c **** #include "keymap_colemak.h"
 389:quantum/quantum.c **** 
 390:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 395:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 396:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 397:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 398:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 399:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 400:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 401:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 402:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 403:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 404:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 405:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 406:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 407:quantum/quantum.c **** };
 408:quantum/quantum.c **** 
 409:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 410:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 411:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 412:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 413:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 414:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 415:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 416:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 417:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 418:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 419:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 420:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 421:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 422:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 423:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 424:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 425:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 426:quantum/quantum.c **** };
 427:quantum/quantum.c **** 
 428:quantum/quantum.c **** #endif
 429:quantum/quantum.c **** 
 430:quantum/quantum.c **** void send_string(const char *str) {
 856               		.loc 1 430 35 view -0
 857               		.cfi_startproc
 858               		.loc 1 430 35 is_stmt 0 view .LVU216
 859 0000 0F93      		push r16
 860               	.LCFI13:
 861               		.cfi_def_cfa_offset 3
 862               		.cfi_offset 16, -2
 863 0002 1F93      		push r17
 864               	.LCFI14:
 865               		.cfi_def_cfa_offset 4
 866               		.cfi_offset 17, -3
 867 0004 CF93      		push r28
 868               	.LCFI15:
 869               		.cfi_def_cfa_offset 5
 870               		.cfi_offset 28, -4
 871               	/* prologue: function */
 872               	/* frame size = 0 */
 873               	/* stack size = 3 */
 874               	.L__stack_usage = 3
 875 0006 8C01      		movw r16,r24
 876               	.LVL73:
 877               	.L94:
 431:quantum/quantum.c ****     while (1) {
 878               		.loc 1 431 5 is_stmt 1 view .LVU217
 879               	.LBB12:
 432:quantum/quantum.c ****         uint8_t keycode;
 880               		.loc 1 432 9 view .LVU218
 433:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 881               		.loc 1 433 9 view .LVU219
 882               	.LBB13:
 883               		.loc 1 433 30 view .LVU220
 884               		.loc 1 433 30 view .LVU221
 885               		.loc 1 433 30 view .LVU222
 886 0008 F801      		movw r30,r16
 887               	/* #APP */
 888               	 ;  433 "quantum/quantum.c" 1
 889 000a 2491      		lpm r18, Z
 890               		
 891               	 ;  0 "" 2
 892               	.LVL74:
 893               		.loc 1 433 30 view .LVU223
 894               		.loc 1 433 30 is_stmt 0 view .LVU224
 895               	/* #NOAPP */
 896               	.LBE13:
 434:quantum/quantum.c ****         if (!ascii_code) break;
 897               		.loc 1 434 9 is_stmt 1 view .LVU225
 898               		.loc 1 434 12 is_stmt 0 view .LVU226
 899 000c 2223      		tst r18
 900 000e 01F0      		breq .L90
 435:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 901               		.loc 1 435 9 is_stmt 1 view .LVU227
 902               	.LBB14:
 903               		.loc 1 435 19 view .LVU228
 904 0010 30E0      		ldi r19,0
 905               	.LVL75:
 906               		.loc 1 435 19 view .LVU229
 907               		.loc 1 435 19 view .LVU230
 908 0012 F901      		movw r30,r18
 909 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 910 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 911               	.LVL76:
 912               		.loc 1 435 19 is_stmt 0 view .LVU231
 913               	/* #APP */
 914               	 ;  435 "quantum/quantum.c" 1
 915 0018 C491      		lpm r28, Z
 916               		
 917               	 ;  0 "" 2
 918               	.LVL77:
 919               		.loc 1 435 19 is_stmt 1 view .LVU232
 920               		.loc 1 435 19 is_stmt 0 view .LVU233
 921               	/* #NOAPP */
 922               	.LBE14:
 436:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 923               		.loc 1 436 9 is_stmt 1 view .LVU234
 924               	.LBB15:
 925               		.loc 1 436 13 view .LVU235
 926               		.loc 1 436 13 view .LVU236
 927               		.loc 1 436 13 view .LVU237
 928 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 929 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 930               	.LVL78:
 931               		.loc 1 436 13 is_stmt 0 view .LVU238
 932 001e F901      		movw r30,r18
 933               	.LVL79:
 934               		.loc 1 436 13 view .LVU239
 935               	/* #APP */
 936               	 ;  436 "quantum/quantum.c" 1
 937 0020 2491      		lpm r18, Z
 938               		
 939               	 ;  0 "" 2
 940               	.LVL80:
 941               		.loc 1 436 13 is_stmt 1 view .LVU240
 942               	/* #NOAPP */
 943               	.LBE15:
 944               		.loc 1 436 12 is_stmt 0 view .LVU241
 945 0022 2223      		tst r18
 946 0024 01F0      		breq .L92
 437:quantum/quantum.c ****             register_code(KC_LSFT);
 947               		.loc 1 437 13 is_stmt 1 view .LVU242
 948 0026 81EE      		ldi r24,lo8(-31)
 949 0028 0E94 0000 		call register_code
 950               	.LVL81:
 438:quantum/quantum.c ****             register_code(keycode);
 951               		.loc 1 438 13 view .LVU243
 952 002c 8C2F      		mov r24,r28
 953 002e 0E94 0000 		call register_code
 954               	.LVL82:
 439:quantum/quantum.c ****             unregister_code(keycode);
 955               		.loc 1 439 13 view .LVU244
 956 0032 8C2F      		mov r24,r28
 957 0034 0E94 0000 		call unregister_code
 958               	.LVL83:
 440:quantum/quantum.c ****             unregister_code(KC_LSFT);
 959               		.loc 1 440 13 view .LVU245
 960 0038 81EE      		ldi r24,lo8(-31)
 961               	.L95:
 441:quantum/quantum.c ****         }
 442:quantum/quantum.c ****         else {
 443:quantum/quantum.c ****             register_code(keycode);
 444:quantum/quantum.c ****             unregister_code(keycode);
 962               		.loc 1 444 13 is_stmt 0 view .LVU246
 963 003a 0E94 0000 		call unregister_code
 964               	.LVL84:
 445:quantum/quantum.c ****         }
 446:quantum/quantum.c ****         ++str;
 965               		.loc 1 446 9 is_stmt 1 view .LVU247
 966 003e 0F5F      		subi r16,-1
 967 0040 1F4F      		sbci r17,-1
 968               	.LVL85:
 969               		.loc 1 446 9 is_stmt 0 view .LVU248
 970               	.LBE12:
 431:quantum/quantum.c ****         uint8_t keycode;
 971               		.loc 1 431 11 is_stmt 1 view .LVU249
 431:quantum/quantum.c ****         uint8_t keycode;
 972               		.loc 1 431 15 is_stmt 0 view .LVU250
 973 0042 00C0      		rjmp .L94
 974               	.LVL86:
 975               	.L92:
 976               	.LBB16:
 443:quantum/quantum.c ****             unregister_code(keycode);
 977               		.loc 1 443 13 is_stmt 1 view .LVU251
 978 0044 8C2F      		mov r24,r28
 979 0046 0E94 0000 		call register_code
 980               	.LVL87:
 444:quantum/quantum.c ****         }
 981               		.loc 1 444 13 view .LVU252
 982 004a 8C2F      		mov r24,r28
 983 004c 00C0      		rjmp .L95
 984               	.LVL88:
 985               	.L90:
 986               	/* epilogue start */
 444:quantum/quantum.c ****         }
 987               		.loc 1 444 13 is_stmt 0 view .LVU253
 988               	.LBE16:
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c **** }
 989               		.loc 1 448 1 view .LVU254
 990 004e CF91      		pop r28
 991 0050 1F91      		pop r17
 992 0052 0F91      		pop r16
 993               	.LVL89:
 994               		.loc 1 448 1 view .LVU255
 995 0054 0895      		ret
 996               		.cfi_endproc
 997               	.LFE119:
 999               		.section	.text.update_tri_layer,"ax",@progbits
 1000               	.global	update_tri_layer
 1002               	update_tri_layer:
 1003               	.LVL90:
 1004               	.LFB120:
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1005               		.loc 1 450 71 is_stmt 1 view -0
 1006               		.cfi_startproc
 1007               		.loc 1 450 71 is_stmt 0 view .LVU257
 1008 0000 CF92      		push r12
 1009               	.LCFI16:
 1010               		.cfi_def_cfa_offset 3
 1011               		.cfi_offset 12, -2
 1012 0002 DF92      		push r13
 1013               	.LCFI17:
 1014               		.cfi_def_cfa_offset 4
 1015               		.cfi_offset 13, -3
 1016 0004 EF92      		push r14
 1017               	.LCFI18:
 1018               		.cfi_def_cfa_offset 5
 1019               		.cfi_offset 14, -4
 1020 0006 FF92      		push r15
 1021               	.LCFI19:
 1022               		.cfi_def_cfa_offset 6
 1023               		.cfi_offset 15, -5
 1024 0008 0F93      		push r16
 1025               	.LCFI20:
 1026               		.cfi_def_cfa_offset 7
 1027               		.cfi_offset 16, -6
 1028 000a 1F93      		push r17
 1029               	.LCFI21:
 1030               		.cfi_def_cfa_offset 8
 1031               		.cfi_offset 17, -7
 1032               	/* prologue: function */
 1033               	/* frame size = 0 */
 1034               	/* stack size = 6 */
 1035               	.L__stack_usage = 6
 1036 000c 982F      		mov r25,r24
 1037 000e 842F      		mov r24,r20
 1038               	.LVL91:
 451:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1039               		.loc 1 451 3 is_stmt 1 view .LVU258
 1040 0010 01E0      		ldi r16,lo8(1)
 1041 0012 10E0      		ldi r17,0
 1042 0014 20E0      		ldi r18,0
 1043 0016 30E0      		ldi r19,0
 1044 0018 6801      		movw r12,r16
 1045 001a 7901      		movw r14,r18
 1046 001c 00C0      		rjmp 2f
 1047               		1:
 1048 001e CC0C      		lsl r12
 1049 0020 DD1C      		rol r13
 1050 0022 EE1C      		rol r14
 1051 0024 FF1C      		rol r15
 1052               		2:
 1053 0026 6A95      		dec r22
 1054 0028 02F4      		brpl 1b
 1055 002a B701      		movw r22,r14
 1056 002c A601      		movw r20,r12
 1057               	.LVL92:
 1058               		.loc 1 451 3 is_stmt 0 view .LVU259
 1059 002e 00C0      		rjmp 2f
 1060               		1:
 1061 0030 000F      		lsl r16
 1062 0032 111F      		rol r17
 1063 0034 221F      		rol r18
 1064 0036 331F      		rol r19
 1065               		2:
 1066 0038 9A95      		dec r25
 1067 003a 02F4      		brpl 1b
 1068 003c 402B      		or r20,r16
 1069 003e 512B      		or r21,r17
 1070 0040 622B      		or r22,r18
 1071 0042 732B      		or r23,r19
 1072               		.loc 1 451 27 view .LVU260
 1073 0044 0091 0000 		lds r16,layer_state
 1074 0048 1091 0000 		lds r17,layer_state+1
 1075 004c 2091 0000 		lds r18,layer_state+2
 1076 0050 3091 0000 		lds r19,layer_state+3
 1077 0054 0423      		and r16,r20
 1078 0056 1523      		and r17,r21
 1079 0058 2623      		and r18,r22
 1080 005a 3723      		and r19,r23
 1081 005c 4017      		cp r20,r16
 1082 005e 5107      		cpc r21,r17
 1083 0060 6207      		cpc r22,r18
 1084 0062 7307      		cpc r23,r19
 1085 0064 01F4      		brne .L97
 452:quantum/quantum.c ****     layer_on(layer3);
 1086               		.loc 1 452 5 is_stmt 1 view .LVU261
 1087               	/* epilogue start */
 453:quantum/quantum.c ****   } else {
 454:quantum/quantum.c ****     layer_off(layer3);
 455:quantum/quantum.c ****   }
 456:quantum/quantum.c **** }
 1088               		.loc 1 456 1 is_stmt 0 view .LVU262
 1089 0066 1F91      		pop r17
 1090 0068 0F91      		pop r16
 1091 006a FF90      		pop r15
 1092 006c EF90      		pop r14
 1093 006e DF90      		pop r13
 1094 0070 CF90      		pop r12
 452:quantum/quantum.c ****     layer_on(layer3);
 1095               		.loc 1 452 5 view .LVU263
 1096 0072 0C94 0000 		jmp layer_on
 1097               	.LVL93:
 1098               	.L97:
 454:quantum/quantum.c ****   }
 1099               		.loc 1 454 5 is_stmt 1 view .LVU264
 1100               	/* epilogue start */
 1101               		.loc 1 456 1 is_stmt 0 view .LVU265
 1102 0076 1F91      		pop r17
 1103 0078 0F91      		pop r16
 1104 007a FF90      		pop r15
 1105 007c EF90      		pop r14
 1106 007e DF90      		pop r13
 1107 0080 CF90      		pop r12
 454:quantum/quantum.c ****   }
 1108               		.loc 1 454 5 view .LVU266
 1109 0082 0C94 0000 		jmp layer_off
 1110               	.LVL94:
 454:quantum/quantum.c ****   }
 1111               		.loc 1 454 5 view .LVU267
 1112               		.cfi_endproc
 1113               	.LFE120:
 1115               		.section	.text.tap_random_base64,"ax",@progbits
 1116               	.global	tap_random_base64
 1118               	tap_random_base64:
 1119               	.LFB121:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void tap_random_base64(void) {
 1120               		.loc 1 458 30 is_stmt 1 view -0
 1121               		.cfi_startproc
 1122 0000 CF93      		push r28
 1123               	.LCFI22:
 1124               		.cfi_def_cfa_offset 3
 1125               		.cfi_offset 28, -2
 1126 0002 DF93      		push r29
 1127               	.LCFI23:
 1128               		.cfi_def_cfa_offset 4
 1129               		.cfi_offset 29, -3
 1130               	/* prologue: function */
 1131               	/* frame size = 0 */
 1132               	/* stack size = 2 */
 1133               	.L__stack_usage = 2
 459:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 460:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 461:quantum/quantum.c ****   #else
 462:quantum/quantum.c ****     uint8_t key = rand() % 64;
 1134               		.loc 1 462 5 view .LVU269
 1135               		.loc 1 462 19 is_stmt 0 view .LVU270
 1136 0004 0E94 0000 		call rand
 1137               	.LVL95:
 1138               		.loc 1 462 26 view .LVU271
 1139 0008 60E4      		ldi r22,lo8(64)
 1140 000a 70E0      		ldi r23,0
 1141 000c 0E94 0000 		call __divmodhi4
 1142 0010 EC01      		movw r28,r24
 1143               	.LVL96:
 463:quantum/quantum.c ****   #endif
 464:quantum/quantum.c ****   switch (key) {
 1144               		.loc 1 464 3 is_stmt 1 view .LVU272
 1145 0012 9927      		clr r25
 1146               	.LVL97:
 1147               		.loc 1 464 3 is_stmt 0 view .LVU273
 1148 0014 8E33      		cpi r24,62
 1149 0016 9105      		cpc r25,__zero_reg__
 1150 0018 04F4      		brge .L99
 1151 001a 8533      		cpi r24,53
 1152 001c 9105      		cpc r25,__zero_reg__
 1153 001e 04F4      		brge .L100
 1154 0020 8433      		cpi r24,52
 1155 0022 9105      		cpc r25,__zero_reg__
 1156 0024 01F0      		breq .L101
 1157 0026 4A97      		sbiw r24,26
 1158 0028 04F4      		brge .L102
 465:quantum/quantum.c ****     case 0 ... 25:
 466:quantum/quantum.c ****       register_code(KC_LSFT);
 1159               		.loc 1 466 7 is_stmt 1 view .LVU274
 1160 002a 81EE      		ldi r24,lo8(-31)
 1161 002c 0E94 0000 		call register_code
 1162               	.LVL98:
 467:quantum/quantum.c ****       register_code(key + KC_A);
 1163               		.loc 1 467 7 view .LVU275
 1164 0030 CC5F      		subi r28,lo8(-(4))
 1165               	.LVL99:
 1166               		.loc 1 467 7 is_stmt 0 view .LVU276
 1167 0032 8C2F      		mov r24,r28
 1168 0034 0E94 0000 		call register_code
 1169               	.LVL100:
 468:quantum/quantum.c ****       unregister_code(key + KC_A);
 1170               		.loc 1 468 7 is_stmt 1 view .LVU277
 1171 0038 8C2F      		mov r24,r28
 1172               	.L108:
 469:quantum/quantum.c ****       unregister_code(KC_LSFT);
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 26 ... 51:
 472:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 473:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 474:quantum/quantum.c ****       break;
 475:quantum/quantum.c ****     case 52:
 476:quantum/quantum.c ****       register_code(KC_0);
 477:quantum/quantum.c ****       unregister_code(KC_0);
 478:quantum/quantum.c ****       break;
 479:quantum/quantum.c ****     case 53 ... 61:
 480:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 481:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 482:quantum/quantum.c ****       break;
 483:quantum/quantum.c ****     case 62:
 484:quantum/quantum.c ****       register_code(KC_LSFT);
 485:quantum/quantum.c ****       register_code(KC_EQL);
 486:quantum/quantum.c ****       unregister_code(KC_EQL);
 1173               		.loc 1 486 7 is_stmt 0 view .LVU278
 1174 003a 0E94 0000 		call unregister_code
 1175               	.LVL101:
 487:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1176               		.loc 1 487 7 is_stmt 1 view .LVU279
 1177 003e 81EE      		ldi r24,lo8(-31)
 1178 0040 00C0      		rjmp .L107
 1179               	.LVL102:
 1180               	.L99:
 464:quantum/quantum.c ****     case 0 ... 25:
 1181               		.loc 1 464 3 is_stmt 0 view .LVU280
 1182 0042 8E33      		cpi r24,62
 1183 0044 9105      		cpc r25,__zero_reg__
 1184 0046 01F0      		breq .L103
 1185 0048 CF97      		sbiw r24,63
 1186 004a 01F0      		breq .L104
 1187               	/* epilogue start */
 488:quantum/quantum.c ****       break;
 489:quantum/quantum.c ****     case 63:
 490:quantum/quantum.c ****       register_code(KC_SLSH);
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 492:quantum/quantum.c ****       break;
 493:quantum/quantum.c ****   }
 494:quantum/quantum.c **** }
 1188               		.loc 1 494 1 view .LVU281
 1189 004c DF91      		pop r29
 1190 004e CF91      		pop r28
 1191               	.LVL103:
 1192               		.loc 1 494 1 view .LVU282
 1193 0050 0895      		ret
 1194               	.LVL104:
 1195               	.L102:
 472:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 1196               		.loc 1 472 7 is_stmt 1 view .LVU283
 1197 0052 C651      		subi r28,lo8(-(-22))
 1198               	.LVL105:
 1199               	.L109:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1200               		.loc 1 480 7 is_stmt 0 view .LVU284
 1201 0054 8C2F      		mov r24,r28
 1202 0056 0E94 0000 		call register_code
 1203               	.LVL106:
 481:quantum/quantum.c ****       break;
 1204               		.loc 1 481 7 is_stmt 1 view .LVU285
 1205 005a 8C2F      		mov r24,r28
 1206 005c 00C0      		rjmp .L107
 1207               	.LVL107:
 1208               	.L101:
 476:quantum/quantum.c ****       unregister_code(KC_0);
 1209               		.loc 1 476 7 view .LVU286
 1210 005e 87E2      		ldi r24,lo8(39)
 1211 0060 0E94 0000 		call register_code
 1212               	.LVL108:
 477:quantum/quantum.c ****       break;
 1213               		.loc 1 477 7 view .LVU287
 1214 0064 87E2      		ldi r24,lo8(39)
 1215               	.LVL109:
 1216               	.L107:
 1217               	/* epilogue start */
 1218               		.loc 1 494 1 is_stmt 0 view .LVU288
 1219 0066 DF91      		pop r29
 1220 0068 CF91      		pop r28
 491:quantum/quantum.c ****       break;
 1221               		.loc 1 491 7 view .LVU289
 1222 006a 0C94 0000 		jmp unregister_code
 1223               	.LVL110:
 1224               	.L100:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1225               		.loc 1 480 7 is_stmt 1 view .LVU290
 1226 006e C751      		subi r28,lo8(-(-23))
 1227               	.LVL111:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1228               		.loc 1 480 7 is_stmt 0 view .LVU291
 1229 0070 00C0      		rjmp .L109
 1230               	.LVL112:
 1231               	.L103:
 484:quantum/quantum.c ****       register_code(KC_EQL);
 1232               		.loc 1 484 7 is_stmt 1 view .LVU292
 1233 0072 81EE      		ldi r24,lo8(-31)
 1234 0074 0E94 0000 		call register_code
 1235               	.LVL113:
 485:quantum/quantum.c ****       unregister_code(KC_EQL);
 1236               		.loc 1 485 7 view .LVU293
 1237 0078 8EE2      		ldi r24,lo8(46)
 1238 007a 0E94 0000 		call register_code
 1239               	.LVL114:
 486:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1240               		.loc 1 486 7 view .LVU294
 1241 007e 8EE2      		ldi r24,lo8(46)
 1242 0080 00C0      		rjmp .L108
 1243               	.L104:
 490:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1244               		.loc 1 490 7 view .LVU295
 1245 0082 88E3      		ldi r24,lo8(56)
 1246 0084 0E94 0000 		call register_code
 1247               	.LVL115:
 491:quantum/quantum.c ****       break;
 1248               		.loc 1 491 7 view .LVU296
 1249 0088 88E3      		ldi r24,lo8(56)
 1250 008a 00C0      		rjmp .L107
 1251               		.cfi_endproc
 1252               	.LFE121:
 1254               		.section	.text.matrix_init_quantum,"ax",@progbits
 1255               	.global	matrix_init_quantum
 1257               	matrix_init_quantum:
 1258               	.LFB122:
 495:quantum/quantum.c **** 
 496:quantum/quantum.c **** void matrix_init_quantum() {
 1259               		.loc 1 496 28 view -0
 1260               		.cfi_startproc
 1261               	/* prologue: function */
 1262               	/* frame size = 0 */
 1263               	/* stack size = 0 */
 1264               	.L__stack_usage = 0
 497:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 498:quantum/quantum.c ****     backlight_init_ports();
 499:quantum/quantum.c ****   #endif
 500:quantum/quantum.c ****   matrix_init_kb();
 1265               		.loc 1 500 3 view .LVU298
 1266 0000 0C94 0000 		jmp matrix_init_kb
 1267               	.LVL116:
 1268               		.cfi_endproc
 1269               	.LFE122:
 1271               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1272               	.global	matrix_scan_quantum
 1274               	matrix_scan_quantum:
 1275               	.LFB123:
 501:quantum/quantum.c **** }
 502:quantum/quantum.c **** 
 503:quantum/quantum.c **** void matrix_scan_quantum() {
 1276               		.loc 1 503 28 view -0
 1277               		.cfi_startproc
 1278               	/* prologue: function */
 1279               	/* frame size = 0 */
 1280               	/* stack size = 0 */
 1281               	.L__stack_usage = 0
 504:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 505:quantum/quantum.c ****     matrix_scan_music();
 506:quantum/quantum.c ****   #endif
 507:quantum/quantum.c **** 
 508:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 509:quantum/quantum.c ****     matrix_scan_tap_dance();
 510:quantum/quantum.c ****   #endif
 511:quantum/quantum.c ****   matrix_scan_kb();
 1282               		.loc 1 511 3 view .LVU300
 1283 0000 0C94 0000 		jmp matrix_scan_kb
 1284               	.LVL117:
 1285               		.cfi_endproc
 1286               	.LFE123:
 1288               		.section	.text.backlight_init_ports,"ax",@progbits
 1289               		.weak	backlight_init_ports
 1291               	backlight_init_ports:
 1292               	.LFB142:
 1293               		.cfi_startproc
 512:quantum/quantum.c **** }
 513:quantum/quantum.c **** 
 514:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 515:quantum/quantum.c **** 
 516:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 517:quantum/quantum.c **** 
 518:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 519:quantum/quantum.c **** #  define COM1x1 COM1C1
 520:quantum/quantum.c **** #  define OCR1x  OCR1C
 521:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 522:quantum/quantum.c **** #  define COM1x1 COM1B1
 523:quantum/quantum.c **** #  define OCR1x  OCR1B
 524:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 525:quantum/quantum.c **** #  define COM1x1 COM1A1
 526:quantum/quantum.c **** #  define OCR1x  OCR1A
 527:quantum/quantum.c **** #else
 528:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 529:quantum/quantum.c **** #endif
 530:quantum/quantum.c **** 
 531:quantum/quantum.c **** __attribute__ ((weak))
 532:quantum/quantum.c **** void backlight_init_ports(void)
 533:quantum/quantum.c **** {
 534:quantum/quantum.c **** 
 535:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 536:quantum/quantum.c ****   // DDRx |= n
 537:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 538:quantum/quantum.c ****   // PORTx &= ~n
 539:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 540:quantum/quantum.c **** 
 541:quantum/quantum.c ****   // Use full 16-bit resolution.
 542:quantum/quantum.c ****   ICR1 = 0xFFFF;
 543:quantum/quantum.c **** 
 544:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 545:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 546:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 547:quantum/quantum.c **** 
 548:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 549:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 550:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 551:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 552:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 553:quantum/quantum.c **** 
 554:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 555:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 556:quantum/quantum.c **** 
 557:quantum/quantum.c ****   backlight_init();
 558:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 559:quantum/quantum.c ****     breathing_defaults();
 560:quantum/quantum.c ****   #endif
 561:quantum/quantum.c **** }
 562:quantum/quantum.c **** 
 563:quantum/quantum.c **** __attribute__ ((weak))
 564:quantum/quantum.c **** void backlight_set(uint8_t level)
 565:quantum/quantum.c **** {
 566:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 567:quantum/quantum.c ****   // PORTx &= ~n
 568:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 569:quantum/quantum.c **** 
 570:quantum/quantum.c ****   if ( level == 0 ) {
 571:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 572:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 573:quantum/quantum.c ****     OCR1x = 0x0;
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 575:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 576:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 577:quantum/quantum.c ****     // Set the brightness
 578:quantum/quantum.c ****     OCR1x = 0xFFFF;
 579:quantum/quantum.c ****   } else {
 580:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 581:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 582:quantum/quantum.c ****     // Set the brightness
 583:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** 
 586:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 587:quantum/quantum.c ****     breathing_intensity_default();
 588:quantum/quantum.c ****   #endif
 589:quantum/quantum.c **** }
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** 
 592:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 595:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 596:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** static uint8_t breath_intensity;
 599:quantum/quantum.c **** static uint8_t breath_speed;
 600:quantum/quantum.c **** static uint16_t breathing_index;
 601:quantum/quantum.c **** static uint8_t breathing_halt;
 602:quantum/quantum.c **** 
 603:quantum/quantum.c **** void breathing_enable(void)
 604:quantum/quantum.c **** {
 605:quantum/quantum.c ****     if (get_backlight_level() == 0)
 606:quantum/quantum.c ****     {
 607:quantum/quantum.c ****         breathing_index = 0;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c ****     else
 610:quantum/quantum.c ****     {
 611:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 612:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 613:quantum/quantum.c ****     }
 614:quantum/quantum.c **** 
 615:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 616:quantum/quantum.c **** 
 617:quantum/quantum.c ****     // Enable breathing interrupt
 618:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 619:quantum/quantum.c **** }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c **** void breathing_pulse(void)
 622:quantum/quantum.c **** {
 623:quantum/quantum.c ****     if (get_backlight_level() == 0)
 624:quantum/quantum.c ****     {
 625:quantum/quantum.c ****         breathing_index = 0;
 626:quantum/quantum.c ****     }
 627:quantum/quantum.c ****     else
 628:quantum/quantum.c ****     {
 629:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 630:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 631:quantum/quantum.c ****     }
 632:quantum/quantum.c **** 
 633:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 634:quantum/quantum.c **** 
 635:quantum/quantum.c ****     // Enable breathing interrupt
 636:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 637:quantum/quantum.c **** }
 638:quantum/quantum.c **** 
 639:quantum/quantum.c **** void breathing_disable(void)
 640:quantum/quantum.c **** {
 641:quantum/quantum.c ****     // Disable breathing interrupt
 642:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 643:quantum/quantum.c ****     backlight_set(get_backlight_level());
 644:quantum/quantum.c **** }
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** void breathing_self_disable(void)
 647:quantum/quantum.c **** {
 648:quantum/quantum.c ****     if (get_backlight_level() == 0)
 649:quantum/quantum.c ****     {
 650:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 651:quantum/quantum.c ****     }
 652:quantum/quantum.c ****     else
 653:quantum/quantum.c ****     {
 654:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 655:quantum/quantum.c ****     }
 656:quantum/quantum.c **** 
 657:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 658:quantum/quantum.c **** }
 659:quantum/quantum.c **** 
 660:quantum/quantum.c **** void breathing_toggle(void)
 661:quantum/quantum.c **** {
 662:quantum/quantum.c ****     if (!is_breathing())
 663:quantum/quantum.c ****     {
 664:quantum/quantum.c ****         if (get_backlight_level() == 0)
 665:quantum/quantum.c ****         {
 666:quantum/quantum.c ****             breathing_index = 0;
 667:quantum/quantum.c ****         }
 668:quantum/quantum.c ****         else
 669:quantum/quantum.c ****         {
 670:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 671:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 672:quantum/quantum.c ****         }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c ****     // Toggle breathing interrupt
 678:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 679:quantum/quantum.c **** 
 680:quantum/quantum.c ****     // Restore backlight level
 681:quantum/quantum.c ****     if (!is_breathing())
 682:quantum/quantum.c ****     {
 683:quantum/quantum.c ****         backlight_set(get_backlight_level());
 684:quantum/quantum.c ****     }
 685:quantum/quantum.c **** }
 686:quantum/quantum.c **** 
 687:quantum/quantum.c **** bool is_breathing(void)
 688:quantum/quantum.c **** {
 689:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 690:quantum/quantum.c **** }
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void breathing_intensity_default(void)
 693:quantum/quantum.c **** {
 694:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 695:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 696:quantum/quantum.c **** }
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 699:quantum/quantum.c **** {
 700:quantum/quantum.c ****     breath_intensity = value;
 701:quantum/quantum.c **** }
 702:quantum/quantum.c **** 
 703:quantum/quantum.c **** void breathing_speed_default(void)
 704:quantum/quantum.c **** {
 705:quantum/quantum.c ****     breath_speed = 4;
 706:quantum/quantum.c **** }
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 709:quantum/quantum.c **** {
 710:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 711:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****     if (is_breathing_now)
 714:quantum/quantum.c ****     {
 715:quantum/quantum.c ****         // Disable breathing interrupt
 716:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 717:quantum/quantum.c ****     }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     breath_speed = value;
 720:quantum/quantum.c **** 
 721:quantum/quantum.c ****     if (is_breathing_now)
 722:quantum/quantum.c ****     {
 723:quantum/quantum.c ****         // Adjust index to account for new speed
 724:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 725:quantum/quantum.c **** 
 726:quantum/quantum.c ****         // Enable breathing interrupt
 727:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 728:quantum/quantum.c ****     }
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(0);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 747:quantum/quantum.c ****     {
 748:quantum/quantum.c ****         breathing_speed_set(10);
 749:quantum/quantum.c ****     }
 750:quantum/quantum.c ****     else
 751:quantum/quantum.c ****     {
 752:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 753:quantum/quantum.c ****     }
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void breathing_defaults(void)
 757:quantum/quantum.c **** {
 758:quantum/quantum.c ****     breathing_intensity_default();
 759:quantum/quantum.c ****     breathing_speed_default();
 760:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 764:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 765:quantum/quantum.c ****  *
 766:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 767:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 768:quantum/quantum.c ****  */
 769:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 770:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 771:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 772:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 773:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 777:quantum/quantum.c **** {
 778:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** 
 781:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 784:quantum/quantum.c ****     {
 785:quantum/quantum.c ****         // Disable breathing interrupt
 786:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 787:quantum/quantum.c ****     }
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** 
 794:quantum/quantum.c **** 
 795:quantum/quantum.c **** #endif // breathing
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** #else // backlight
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** __attribute__ ((weak))
 800:quantum/quantum.c **** void backlight_init_ports(void)
 1294               		.loc 1 800 6 view -0
 1295               	/* prologue: function */
 1296               	/* frame size = 0 */
 1297               	/* stack size = 0 */
 1298               	.L__stack_usage = 0
 1299               	/* epilogue start */
 1300 0000 0895      		ret
 1301               		.cfi_endproc
 1302               	.LFE142:
 1304               		.section	.text.send_nibble,"ax",@progbits
 1305               	.global	send_nibble
 1307               	send_nibble:
 1308               	.LVL118:
 1309               	.LFB129:
 801:quantum/quantum.c **** {
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** }
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** void backlight_set(uint8_t level)
 807:quantum/quantum.c **** {
 808:quantum/quantum.c **** 
 809:quantum/quantum.c **** }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c **** #endif // backlight
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** // Functions for spitting out values
 815:quantum/quantum.c **** //
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 818:quantum/quantum.c ****     uint16_t word = (number >> 16);
 819:quantum/quantum.c ****     send_word(word);
 820:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 821:quantum/quantum.c **** }
 822:quantum/quantum.c **** 
 823:quantum/quantum.c **** void send_word(uint16_t number) {
 824:quantum/quantum.c ****     uint8_t byte = number >> 8;
 825:quantum/quantum.c ****     send_byte(byte);
 826:quantum/quantum.c ****     send_byte(number & 0xFF);
 827:quantum/quantum.c **** }
 828:quantum/quantum.c **** 
 829:quantum/quantum.c **** void send_byte(uint8_t number) {
 830:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 831:quantum/quantum.c ****     send_nibble(nibble);
 832:quantum/quantum.c ****     send_nibble(number & 0xF);
 833:quantum/quantum.c **** }
 834:quantum/quantum.c **** 
 835:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1310               		.loc 1 835 34 view -0
 1311               		.cfi_startproc
 1312               		.loc 1 835 34 is_stmt 0 view .LVU303
 1313 0000 CF93      		push r28
 1314               	.LCFI24:
 1315               		.cfi_def_cfa_offset 3
 1316               		.cfi_offset 28, -2
 1317               	/* prologue: function */
 1318               	/* frame size = 0 */
 1319               	/* stack size = 1 */
 1320               	.L__stack_usage = 1
 1321 0002 C82F      		mov r28,r24
 836:quantum/quantum.c ****     switch (number) {
 1322               		.loc 1 836 5 is_stmt 1 view .LVU304
 1323 0004 8A30      		cpi r24,lo8(10)
 1324 0006 00F4      		brsh .L114
 1325 0008 8823      		tst r24
 1326 000a 01F0      		breq .L119
 837:quantum/quantum.c ****         case 0:
 838:quantum/quantum.c ****             register_code(KC_0);
 839:quantum/quantum.c ****             unregister_code(KC_0);
 840:quantum/quantum.c ****             break;
 841:quantum/quantum.c ****         case 1 ... 9:
 842:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1327               		.loc 1 842 13 view .LVU305
 1328 000c C35E      		subi r28,lo8(-(29))
 1329               	.L122:
 843:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 844:quantum/quantum.c ****             break;
 845:quantum/quantum.c ****         case 0xA ... 0xF:
 846:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1330               		.loc 1 846 13 is_stmt 0 view .LVU306
 1331 000e 8C2F      		mov r24,r28
 1332               	.LVL119:
 1333               		.loc 1 846 13 view .LVU307
 1334 0010 0E94 0000 		call register_code
 1335               	.LVL120:
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1336               		.loc 1 847 13 is_stmt 1 view .LVU308
 1337 0014 8C2F      		mov r24,r28
 1338 0016 00C0      		rjmp .L121
 1339               	.LVL121:
 1340               	.L114:
 836:quantum/quantum.c ****         case 0:
 1341               		.loc 1 836 5 is_stmt 0 view .LVU309
 1342 0018 96EF      		ldi r25,lo8(-10)
 1343 001a 980F      		add r25,r24
 846:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1344               		.loc 1 846 13 view .LVU310
 1345 001c C650      		subi r28,lo8(-(-6))
 836:quantum/quantum.c ****         case 0:
 1346               		.loc 1 836 5 view .LVU311
 1347 001e 9630      		cpi r25,lo8(6)
 1348 0020 00F0      		brlo .L122
 1349               	/* epilogue start */
 848:quantum/quantum.c ****             break;
 849:quantum/quantum.c ****     }
 850:quantum/quantum.c **** }
 1350               		.loc 1 850 1 view .LVU312
 1351 0022 CF91      		pop r28
 1352 0024 0895      		ret
 1353               	.L119:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1354               		.loc 1 838 13 is_stmt 1 view .LVU313
 1355 0026 87E2      		ldi r24,lo8(39)
 1356               	.LVL122:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1357               		.loc 1 838 13 is_stmt 0 view .LVU314
 1358 0028 0E94 0000 		call register_code
 1359               	.LVL123:
 839:quantum/quantum.c ****             break;
 1360               		.loc 1 839 13 is_stmt 1 view .LVU315
 1361 002c 87E2      		ldi r24,lo8(39)
 1362               	.LVL124:
 1363               	.L121:
 1364               	/* epilogue start */
 1365               		.loc 1 850 1 is_stmt 0 view .LVU316
 1366 002e CF91      		pop r28
 847:quantum/quantum.c ****             break;
 1367               		.loc 1 847 13 view .LVU317
 1368 0030 0C94 0000 		jmp unregister_code
 1369               	.LVL125:
 1370               		.cfi_endproc
 1371               	.LFE129:
 1373               		.section	.text.send_byte,"ax",@progbits
 1374               	.global	send_byte
 1376               	send_byte:
 1377               	.LVL126:
 1378               	.LFB128:
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1379               		.loc 1 829 32 is_stmt 1 view -0
 1380               		.cfi_startproc
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1381               		.loc 1 829 32 is_stmt 0 view .LVU319
 1382 0000 CF93      		push r28
 1383               	.LCFI25:
 1384               		.cfi_def_cfa_offset 3
 1385               		.cfi_offset 28, -2
 1386               	/* prologue: function */
 1387               	/* frame size = 0 */
 1388               	/* stack size = 1 */
 1389               	.L__stack_usage = 1
 1390 0002 C82F      		mov r28,r24
 830:quantum/quantum.c ****     send_nibble(nibble);
 1391               		.loc 1 830 5 is_stmt 1 view .LVU320
 1392               	.LVL127:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1393               		.loc 1 831 5 view .LVU321
 1394 0004 8295      		swap r24
 1395               	.LVL128:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1396               		.loc 1 831 5 is_stmt 0 view .LVU322
 1397 0006 8F70      		andi r24,lo8(15)
 1398 0008 0E94 0000 		call send_nibble
 1399               	.LVL129:
 832:quantum/quantum.c **** }
 1400               		.loc 1 832 5 is_stmt 1 view .LVU323
 1401 000c 8C2F      		mov r24,r28
 1402 000e 8F70      		andi r24,lo8(15)
 1403               	/* epilogue start */
 833:quantum/quantum.c **** 
 1404               		.loc 1 833 1 is_stmt 0 view .LVU324
 1405 0010 CF91      		pop r28
 1406               	.LVL130:
 832:quantum/quantum.c **** }
 1407               		.loc 1 832 5 view .LVU325
 1408 0012 0C94 0000 		jmp send_nibble
 1409               	.LVL131:
 1410               		.cfi_endproc
 1411               	.LFE128:
 1413               		.section	.text.send_word,"ax",@progbits
 1414               	.global	send_word
 1416               	send_word:
 1417               	.LVL132:
 1418               	.LFB127:
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1419               		.loc 1 823 33 is_stmt 1 view -0
 1420               		.cfi_startproc
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1421               		.loc 1 823 33 is_stmt 0 view .LVU327
 1422 0000 CF93      		push r28
 1423               	.LCFI26:
 1424               		.cfi_def_cfa_offset 3
 1425               		.cfi_offset 28, -2
 1426               	/* prologue: function */
 1427               	/* frame size = 0 */
 1428               	/* stack size = 1 */
 1429               	.L__stack_usage = 1
 1430 0002 C82F      		mov r28,r24
 1431 0004 892F      		mov r24,r25
 1432               	.LVL133:
 824:quantum/quantum.c ****     send_byte(byte);
 1433               		.loc 1 824 5 is_stmt 1 view .LVU328
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1434               		.loc 1 825 5 view .LVU329
 1435 0006 0E94 0000 		call send_byte
 1436               	.LVL134:
 826:quantum/quantum.c **** }
 1437               		.loc 1 826 5 view .LVU330
 1438 000a 8C2F      		mov r24,r28
 1439               	/* epilogue start */
 827:quantum/quantum.c **** 
 1440               		.loc 1 827 1 is_stmt 0 view .LVU331
 1441 000c CF91      		pop r28
 826:quantum/quantum.c **** }
 1442               		.loc 1 826 5 view .LVU332
 1443 000e 0C94 0000 		jmp send_byte
 1444               	.LVL135:
 1445               		.cfi_endproc
 1446               	.LFE127:
 1448               		.section	.text.send_dword,"ax",@progbits
 1449               	.global	send_dword
 1451               	send_dword:
 1452               	.LVL136:
 1453               	.LFB126:
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1454               		.loc 1 817 34 is_stmt 1 view -0
 1455               		.cfi_startproc
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1456               		.loc 1 817 34 is_stmt 0 view .LVU334
 1457 0000 CF93      		push r28
 1458               	.LCFI27:
 1459               		.cfi_def_cfa_offset 3
 1460               		.cfi_offset 28, -2
 1461 0002 DF93      		push r29
 1462               	.LCFI28:
 1463               		.cfi_def_cfa_offset 4
 1464               		.cfi_offset 29, -3
 1465               	/* prologue: function */
 1466               	/* frame size = 0 */
 1467               	/* stack size = 2 */
 1468               	.L__stack_usage = 2
 1469 0004 D62F      		mov r29,r22
 1470 0006 C72F      		mov r28,r23
 818:quantum/quantum.c ****     send_word(word);
 1471               		.loc 1 818 5 is_stmt 1 view .LVU335
 1472               	.LVL137:
 819:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1473               		.loc 1 819 5 view .LVU336
 1474 0008 0E94 0000 		call send_word
 1475               	.LVL138:
 820:quantum/quantum.c **** }
 1476               		.loc 1 820 5 view .LVU337
 1477 000c 8D2F      		mov r24,r29
 1478 000e 9C2F      		mov r25,r28
 1479               	/* epilogue start */
 821:quantum/quantum.c **** 
 1480               		.loc 1 821 1 is_stmt 0 view .LVU338
 1481 0010 DF91      		pop r29
 821:quantum/quantum.c **** 
 1482               		.loc 1 821 1 view .LVU339
 1483 0012 CF91      		pop r28
 820:quantum/quantum.c **** }
 1484               		.loc 1 820 5 view .LVU340
 1485 0014 0C94 0000 		jmp send_word
 1486               	.LVL139:
 820:quantum/quantum.c **** }
 1487               		.loc 1 820 5 view .LVU341
 1488               		.cfi_endproc
 1489               	.LFE126:
 1491               		.section	.text.api_send_unicode,"ax",@progbits
 1492               	.global	api_send_unicode
 1494               	api_send_unicode:
 1495               	.LVL140:
 1496               	.LFB130:
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1497               		.loc 1 852 41 is_stmt 1 view -0
 1498               		.cfi_startproc
 1499               	/* prologue: function */
 1500               	/* frame size = 0 */
 1501               	/* stack size = 0 */
 1502               	.L__stack_usage = 0
 853:quantum/quantum.c **** #ifdef API_ENABLE
 854:quantum/quantum.c ****     uint8_t chunk[4];
 855:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 856:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 857:quantum/quantum.c **** #endif
 858:quantum/quantum.c **** }
 1503               		.loc 1 858 1 view .LVU343
 1504               	/* epilogue start */
 1505 0000 0895      		ret
 1506               		.cfi_endproc
 1507               	.LFE130:
 1509               		.section	.text.led_set_user,"ax",@progbits
 1510               		.weak	led_set_user
 1512               	led_set_user:
 1513               	.LVL141:
 1514               	.LFB131:
 859:quantum/quantum.c **** 
 860:quantum/quantum.c **** __attribute__ ((weak))
 861:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1515               		.loc 1 861 36 view -0
 1516               		.cfi_startproc
 1517               	/* prologue: function */
 1518               	/* frame size = 0 */
 1519               	/* stack size = 0 */
 1520               	.L__stack_usage = 0
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** }
 1521               		.loc 1 863 1 view .LVU345
 1522               	/* epilogue start */
 1523 0000 0895      		ret
 1524               		.cfi_endproc
 1525               	.LFE131:
 1527               		.set	led_set_user.localalias,led_set_user
 1528               		.section	.text.backlight_set,"ax",@progbits
 1529               		.weak	backlight_set
 1531               	backlight_set:
 1532               	.LFB144:
 1533               		.cfi_startproc
 806:quantum/quantum.c **** {
 1534               		.loc 1 806 6 view -0
 1535               	/* prologue: function */
 1536               	/* frame size = 0 */
 1537               	/* stack size = 0 */
 1538               	.L__stack_usage = 0
 1539               	/* epilogue start */
 1540 0000 0895      		ret
 1541               		.cfi_endproc
 1542               	.LFE144:
 1544               		.section	.text.led_set_kb,"ax",@progbits
 1545               		.weak	led_set_kb
 1547               	led_set_kb:
 1548               	.LVL142:
 1549               	.LFB132:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** __attribute__ ((weak))
 866:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1550               		.loc 1 866 34 view -0
 1551               		.cfi_startproc
 1552               	/* prologue: function */
 1553               	/* frame size = 0 */
 1554               	/* stack size = 0 */
 1555               	.L__stack_usage = 0
 867:quantum/quantum.c ****     led_set_user(usb_led);
 1556               		.loc 1 867 5 view .LVU348
 1557 0000 0C94 0000 		jmp led_set_user
 1558               	.LVL143:
 1559               		.loc 1 867 5 is_stmt 0 view .LVU349
 1560               		.cfi_endproc
 1561               	.LFE132:
 1563               		.section	.text.led_init_ports,"ax",@progbits
 1564               		.weak	led_init_ports
 1566               	led_init_ports:
 1567               	.LFB133:
 868:quantum/quantum.c **** }
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** __attribute__ ((weak))
 871:quantum/quantum.c **** void led_init_ports(void)
 872:quantum/quantum.c **** {
 1568               		.loc 1 872 1 is_stmt 1 view -0
 1569               		.cfi_startproc
 1570               	/* prologue: function */
 1571               	/* frame size = 0 */
 1572               	/* stack size = 0 */
 1573               	.L__stack_usage = 0
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** }
 1574               		.loc 1 874 1 view .LVU351
 1575               	/* epilogue start */
 1576 0000 0895      		ret
 1577               		.cfi_endproc
 1578               	.LFE133:
 1580               		.section	.text.led_set,"ax",@progbits
 1581               		.weak	led_set
 1583               	led_set:
 1584               	.LVL144:
 1585               	.LFB134:
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** __attribute__ ((weak))
 877:quantum/quantum.c **** void led_set(uint8_t usb_led)
 878:quantum/quantum.c **** {
 1586               		.loc 1 878 1 view -0
 1587               		.cfi_startproc
 1588               	/* prologue: function */
 1589               	/* frame size = 0 */
 1590               	/* stack size = 0 */
 1591               	.L__stack_usage = 0
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   // Example LED Code
 881:quantum/quantum.c ****   //
 882:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 883:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 884:quantum/quantum.c ****     // {
 885:quantum/quantum.c ****     //     // Output high.
 886:quantum/quantum.c ****     //     DDRE |= (1<<6);
 887:quantum/quantum.c ****     //     PORTE |= (1<<6);
 888:quantum/quantum.c ****     // }
 889:quantum/quantum.c ****     // else
 890:quantum/quantum.c ****     // {
 891:quantum/quantum.c ****     //     // Output low.
 892:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 893:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 894:quantum/quantum.c ****     // }
 895:quantum/quantum.c **** 
 896:quantum/quantum.c ****   led_set_kb(usb_led);
 1592               		.loc 1 896 3 view .LVU353
 1593 0000 0C94 0000 		jmp led_set_kb
 1594               	.LVL145:
 1595               		.loc 1 896 3 is_stmt 0 view .LVU354
 1596               		.cfi_endproc
 1597               	.LFE134:
 1599               		.section	.text.startup_user,"ax",@progbits
 1600               		.weak	startup_user
 1602               	startup_user:
 1603               	.LFB138:
 1604               		.cfi_startproc
 897:quantum/quantum.c **** }
 898:quantum/quantum.c **** 
 899:quantum/quantum.c **** 
 900:quantum/quantum.c **** //------------------------------------------------------------------------------
 901:quantum/quantum.c **** // Override these functions in your keymap file to play different tunes on
 902:quantum/quantum.c **** // different events such as startup and bootloader jump
 903:quantum/quantum.c **** 
 904:quantum/quantum.c **** __attribute__ ((weak))
 905:quantum/quantum.c **** void startup_user() {}
 1605               		.loc 1 905 6 is_stmt 1 view -0
 1606               	/* prologue: function */
 1607               	/* frame size = 0 */
 1608               	/* stack size = 0 */
 1609               	.L__stack_usage = 0
 1610               	/* epilogue start */
 1611 0000 0895      		ret
 1612               		.cfi_endproc
 1613               	.LFE138:
 1615               		.section	.text.shutdown_user,"ax",@progbits
 1616               		.weak	shutdown_user
 1618               	shutdown_user:
 1619               	.LFB140:
 1620               		.cfi_startproc
 906:quantum/quantum.c **** 
 907:quantum/quantum.c **** __attribute__ ((weak))
 908:quantum/quantum.c **** void shutdown_user() {}
 1621               		.loc 1 908 6 view -0
 1622               	/* prologue: function */
 1623               	/* frame size = 0 */
 1624               	/* stack size = 0 */
 1625               	.L__stack_usage = 0
 1626               	/* epilogue start */
 1627 0000 0895      		ret
 1628               		.cfi_endproc
 1629               	.LFE140:
 1631               	.global	ascii_to_qwerty_keycode_lut
 1632               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a"
 1635               	ascii_to_qwerty_keycode_lut:
 1636 0000 00        		.string	""
 1637 0001 00        		.string	""
 1638 0002 00        		.string	""
 1639 0003 00        		.string	""
 1640 0004 00        		.string	""
 1641 0005 00        		.string	""
 1642 0006 00        		.string	""
 1643 0007 00        		.string	""
 1644 0008 2A2B 2800 		.string	"*+("
 1645 000c 00        		.string	""
 1646 000d 00        		.string	""
 1647 000e 00        		.string	""
 1648 000f 00        		.string	""
 1649 0010 00        		.string	""
 1650 0011 00        		.string	""
 1651 0012 00        		.string	""
 1652 0013 00        		.string	""
 1653 0014 00        		.string	""
 1654 0015 00        		.string	""
 1655 0016 00        		.string	""
 1656 0017 00        		.string	""
 1657 0018 00        		.string	""
 1658 0019 00        		.string	""
 1659 001a 00        		.string	""
 1660 001b 2900      		.string	")"
 1661 001d 00        		.string	""
 1662 001e 00        		.string	""
 1663 001f 00        		.string	""
 1664 0020 2C1E 3420 		.ascii	",\0364 !\"$4&'%.6-78'\036\037 !\"#$%&336.78\037\004\005\006\007"
 1664      2122 2434 
 1664      2627 252E 
 1664      362D 3738 
 1664      271E 1F20 
 1665 0045 0809 0A0B 		.ascii	"\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031"
 1665      0C0D 0E0F 
 1665      1011 1213 
 1665      1415 1617 
 1665      1819 
 1666 0057 1A1B 1C1D 		.ascii	"\032\033\034\035/10#-5\004\005\006\007\b\t\n\013\f\r\016\017"
 1666      2F31 3023 
 1666      2D35 0405 
 1666      0607 0809 
 1666      0A0B 0C0D 
 1667 006d 1011 1213 		.ascii	"\020\021\022\023\024\025\026\027\030\031\032\033\034\035/105"
 1667      1415 1617 
 1667      1819 1A1B 
 1667      1C1D 2F31 
 1667      3035 
 1668 007f 4C        		.ascii	"L"
 1669               	.global	ascii_to_qwerty_shift_lut
 1670               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a"
 1673               	ascii_to_qwerty_shift_lut:
 1674 0000 00        		.byte	0
 1675 0001 00        		.byte	0
 1676 0002 00        		.byte	0
 1677 0003 00        		.byte	0
 1678 0004 00        		.byte	0
 1679 0005 00        		.byte	0
 1680 0006 00        		.byte	0
 1681 0007 00        		.byte	0
 1682 0008 00        		.byte	0
 1683 0009 00        		.byte	0
 1684 000a 00        		.byte	0
 1685 000b 00        		.byte	0
 1686 000c 00        		.byte	0
 1687 000d 00        		.byte	0
 1688 000e 00        		.byte	0
 1689 000f 00        		.byte	0
 1690 0010 00        		.byte	0
 1691 0011 00        		.byte	0
 1692 0012 00        		.byte	0
 1693 0013 00        		.byte	0
 1694 0014 00        		.byte	0
 1695 0015 00        		.byte	0
 1696 0016 00        		.byte	0
 1697 0017 00        		.byte	0
 1698 0018 00        		.byte	0
 1699 0019 00        		.byte	0
 1700 001a 00        		.byte	0
 1701 001b 00        		.byte	0
 1702 001c 00        		.byte	0
 1703 001d 00        		.byte	0
 1704 001e 00        		.byte	0
 1705 001f 00        		.byte	0
 1706 0020 00        		.byte	0
 1707 0021 01        		.byte	1
 1708 0022 01        		.byte	1
 1709 0023 01        		.byte	1
 1710 0024 01        		.byte	1
 1711 0025 01        		.byte	1
 1712 0026 01        		.byte	1
 1713 0027 00        		.byte	0
 1714 0028 01        		.byte	1
 1715 0029 01        		.byte	1
 1716 002a 01        		.byte	1
 1717 002b 01        		.byte	1
 1718 002c 00        		.byte	0
 1719 002d 00        		.byte	0
 1720 002e 00        		.byte	0
 1721 002f 00        		.byte	0
 1722 0030 00        		.byte	0
 1723 0031 00        		.byte	0
 1724 0032 00        		.byte	0
 1725 0033 00        		.byte	0
 1726 0034 00        		.byte	0
 1727 0035 00        		.byte	0
 1728 0036 00        		.byte	0
 1729 0037 00        		.byte	0
 1730 0038 00        		.byte	0
 1731 0039 00        		.byte	0
 1732 003a 01        		.byte	1
 1733 003b 00        		.byte	0
 1734 003c 01        		.byte	1
 1735 003d 00        		.byte	0
 1736 003e 01        		.byte	1
 1737 003f 01        		.byte	1
 1738 0040 01        		.byte	1
 1739 0041 01        		.byte	1
 1740 0042 01        		.byte	1
 1741 0043 01        		.byte	1
 1742 0044 01        		.byte	1
 1743 0045 01        		.byte	1
 1744 0046 01        		.byte	1
 1745 0047 01        		.byte	1
 1746 0048 01        		.byte	1
 1747 0049 01        		.byte	1
 1748 004a 01        		.byte	1
 1749 004b 01        		.byte	1
 1750 004c 01        		.byte	1
 1751 004d 01        		.byte	1
 1752 004e 01        		.byte	1
 1753 004f 01        		.byte	1
 1754 0050 01        		.byte	1
 1755 0051 01        		.byte	1
 1756 0052 01        		.byte	1
 1757 0053 01        		.byte	1
 1758 0054 01        		.byte	1
 1759 0055 01        		.byte	1
 1760 0056 01        		.byte	1
 1761 0057 01        		.byte	1
 1762 0058 01        		.byte	1
 1763 0059 01        		.byte	1
 1764 005a 01        		.byte	1
 1765 005b 00        		.byte	0
 1766 005c 00        		.byte	0
 1767 005d 00        		.byte	0
 1768 005e 01        		.byte	1
 1769 005f 01        		.byte	1
 1770 0060 00        		.byte	0
 1771 0061 00        		.byte	0
 1772 0062 00        		.byte	0
 1773 0063 00        		.byte	0
 1774 0064 00        		.byte	0
 1775 0065 00        		.byte	0
 1776 0066 00        		.byte	0
 1777 0067 00        		.byte	0
 1778 0068 00        		.byte	0
 1779 0069 00        		.byte	0
 1780 006a 00        		.byte	0
 1781 006b 00        		.byte	0
 1782 006c 00        		.byte	0
 1783 006d 00        		.byte	0
 1784 006e 00        		.byte	0
 1785 006f 00        		.byte	0
 1786 0070 00        		.byte	0
 1787 0071 00        		.byte	0
 1788 0072 00        		.byte	0
 1789 0073 00        		.byte	0
 1790 0074 00        		.byte	0
 1791 0075 00        		.byte	0
 1792 0076 00        		.byte	0
 1793 0077 00        		.byte	0
 1794 0078 00        		.byte	0
 1795 0079 00        		.byte	0
 1796 007a 00        		.byte	0
 1797 007b 01        		.byte	1
 1798 007c 01        		.byte	1
 1799 007d 01        		.byte	1
 1800 007e 01        		.byte	1
 1801 007f 00        		.byte	0
 1802               		.section	.bss.scs_timer,"aw",@nobits
 1805               	scs_timer:
 1806 0000 0000      		.zero	2
 1807               		.section	.bss.shift_interrupted,"aw",@nobits
 1810               	shift_interrupted:
 1811 0000 0000      		.zero	2
 1812               		.text
 1813               	.Letext0:
 1814               		.file 3 "/usr/avr/include/stdint.h"
 1815               		.file 4 "./tmk_core/common/keyboard.h"
 1816               		.file 5 "./tmk_core/common/action.h"
 1817               		.file 6 "./tmk_core/common/debug.h"
 1818               		.file 7 "quantum/keycode_config.h"
 1819               		.file 8 "./tmk_core/common/keycode.h"
 1820               		.file 9 "quantum/quantum_keycodes.h"
 1821               		.file 10 "./tmk_core/common/action_layer.h"
 1822               		.file 11 "quantum/quantum.h"
 1823               		.file 12 "/usr/avr/include/stdlib.h"
 1824               		.file 13 "./tmk_core/common/timer.h"
 1825               		.file 14 "./tmk_core/common/eeconfig.h"
 1826               		.file 15 "./quantum/process_keycode/process_leader.h"
 1827               		.file 16 "quantum/keymap.h"
 1828               		.file 17 "./tmk_core/common/bootloader.h"
 1829               		.file 18 "/usr/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccRxlAvc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRxlAvc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRxlAvc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRxlAvc.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccRxlAvc.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRxlAvc.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRxlAvc.s:14     .text.do_code16:0000000000000000 do_code16
     /tmp/ccRxlAvc.s:17     .text.do_code16:0000000000000000 .Loc.0
     /tmp/ccRxlAvc.s:18     .text.do_code16:0000000000000000 L0
     /tmp/ccRxlAvc.s:19     .text.do_code16:0000000000000000 .Loc.1
     /tmp/ccRxlAvc.s:42     .text.do_code16:000000000000000c .Loc.2
     /tmp/ccRxlAvc.s:45     .text.do_code16:000000000000000e .Loc.3
     /tmp/ccRxlAvc.s:49     .text.do_code16:0000000000000014 .Loc.4
     /tmp/ccRxlAvc.s:50     .text.do_code16:0000000000000014 .Loc.5
     /tmp/ccRxlAvc.s:51     .text.do_code16:0000000000000014 .Loc.6
     /tmp/ccRxlAvc.s:54     .text.do_code16:0000000000000018 .Loc.7
     /tmp/ccRxlAvc.s:60     .text.do_code16:000000000000001e .Loc.8
     /tmp/ccRxlAvc.s:61     .text.do_code16:000000000000001e .Loc.9
     /tmp/ccRxlAvc.s:64     .text.do_code16:0000000000000022 .Loc.10
     /tmp/ccRxlAvc.s:70     .text.do_code16:0000000000000028 .Loc.11
     /tmp/ccRxlAvc.s:71     .text.do_code16:0000000000000028 .Loc.12
     /tmp/ccRxlAvc.s:74     .text.do_code16:000000000000002c .Loc.13
     /tmp/ccRxlAvc.s:80     .text.do_code16:0000000000000032 .Loc.14
     /tmp/ccRxlAvc.s:81     .text.do_code16:0000000000000032 .Loc.15
     /tmp/ccRxlAvc.s:84     .text.do_code16:0000000000000036 .Loc.16
     /tmp/ccRxlAvc.s:90     .text.do_code16:000000000000003c .Loc.17
     /tmp/ccRxlAvc.s:91     .text.do_code16:000000000000003c .Loc.18
     /tmp/ccRxlAvc.s:95     .text.do_code16:0000000000000042 .Loc.19
     /tmp/ccRxlAvc.s:96     .text.do_code16:0000000000000042 .Loc.20
     /tmp/ccRxlAvc.s:101    .text.do_code16:0000000000000048 .Loc.21
     /tmp/ccRxlAvc.s:102    .text.do_code16:0000000000000048 .Loc.22
     /tmp/ccRxlAvc.s:107    .text.do_code16:000000000000004e .Loc.23
     /tmp/ccRxlAvc.s:108    .text.do_code16:000000000000004e .Loc.24
     /tmp/ccRxlAvc.s:113    .text.do_code16:0000000000000054 .Loc.25
     /tmp/ccRxlAvc.s:114    .text.do_code16:0000000000000054 .Loc.26
     /tmp/ccRxlAvc.s:118    .text.do_code16:0000000000000058 .Loc.27
     /tmp/ccRxlAvc.s:122    .text.do_code16:000000000000005c .Loc.28
     /tmp/ccRxlAvc.s:126    .text.do_code16:0000000000000060 .Loc.29
     /tmp/ccRxlAvc.s:131    .text.do_code16:0000000000000062 .Loc.30
     /tmp/ccRxlAvc.s:135    .text.do_code16:0000000000000066 .Loc.31
     /tmp/ccRxlAvc.s:139    .text.do_code16:000000000000006a .Loc.32
     /tmp/ccRxlAvc.s:141    .text.do_code16:000000000000006c L0
     /tmp/ccRxlAvc.s:147    .text.register_code16:0000000000000000 register_code16
     /tmp/ccRxlAvc.s:150    .text.register_code16:0000000000000000 .Loc.33
     /tmp/ccRxlAvc.s:151    .text.register_code16:0000000000000000 L0
     /tmp/ccRxlAvc.s:152    .text.register_code16:0000000000000000 .Loc.34
     /tmp/ccRxlAvc.s:162    .text.register_code16:0000000000000004 .Loc.35
     /tmp/ccRxlAvc.s:167    .text.register_code16:000000000000000c .Loc.36
     /tmp/ccRxlAvc.s:170    .text.register_code16:000000000000000e .Loc.37
     /tmp/ccRxlAvc.s:172    .text.register_code16:0000000000000010 .Loc.38
     /tmp/ccRxlAvc.s:175    .text.register_code16:0000000000000014 L0
     /tmp/ccRxlAvc.s:181    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccRxlAvc.s:184    .text.unregister_code16:0000000000000000 .Loc.39
     /tmp/ccRxlAvc.s:185    .text.unregister_code16:0000000000000000 L0
     /tmp/ccRxlAvc.s:186    .text.unregister_code16:0000000000000000 .Loc.40
     /tmp/ccRxlAvc.s:200    .text.unregister_code16:0000000000000006 .Loc.41
     /tmp/ccRxlAvc.s:203    .text.unregister_code16:000000000000000a .Loc.42
     /tmp/ccRxlAvc.s:208    .text.unregister_code16:0000000000000010 .Loc.43
     /tmp/ccRxlAvc.s:212    .text.unregister_code16:0000000000000014 .Loc.44
     /tmp/ccRxlAvc.s:215    .text.unregister_code16:0000000000000018 .Loc.45
     /tmp/ccRxlAvc.s:216    .text.unregister_code16:0000000000000018 L0
     /tmp/ccRxlAvc.s:222    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccRxlAvc.s:225    .text.process_action_kb:0000000000000000 .Loc.46
     /tmp/ccRxlAvc.s:226    .text.process_action_kb:0000000000000000 L0
     /tmp/ccRxlAvc.s:231    .text.process_action_kb:0000000000000000 .Loc.47
     /tmp/ccRxlAvc.s:232    .text.process_action_kb:0000000000000000 .Loc.48
     /tmp/ccRxlAvc.s:236    .text.process_action_kb:0000000000000002 .Loc.49
     /tmp/ccRxlAvc.s:238    .text.process_action_kb:0000000000000004 L0
     /tmp/ccRxlAvc.s:244    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccRxlAvc.s:247    .text.process_record_user:0000000000000000 .Loc.50
     /tmp/ccRxlAvc.s:248    .text.process_record_user:0000000000000000 L0
     /tmp/ccRxlAvc.s:253    .text.process_record_user:0000000000000000 .Loc.51
     /tmp/ccRxlAvc.s:254    .text.process_record_user:0000000000000000 .Loc.52
     /tmp/ccRxlAvc.s:258    .text.process_record_user:0000000000000002 .Loc.53
     /tmp/ccRxlAvc.s:260    .text.process_record_user:0000000000000004 L0
     /tmp/ccRxlAvc.s:266    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccRxlAvc.s:269    .text.process_record_kb:0000000000000000 .Loc.54
     /tmp/ccRxlAvc.s:270    .text.process_record_kb:0000000000000000 L0
     /tmp/ccRxlAvc.s:275    .text.process_record_kb:0000000000000000 .Loc.55
     /tmp/ccRxlAvc.s:276    .text.process_record_kb:0000000000000000 .Loc.56
     /tmp/ccRxlAvc.s:279    .text.process_record_kb:0000000000000004 .Loc.57
     /tmp/ccRxlAvc.s:280    .text.process_record_kb:0000000000000004 L0
     /tmp/ccRxlAvc.s:286    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccRxlAvc.s:288    .text.reset_keyboard:0000000000000000 .Loc.58
     /tmp/ccRxlAvc.s:289    .text.reset_keyboard:0000000000000000 L0
     /tmp/ccRxlAvc.s:294    .text.reset_keyboard:0000000000000000 .Loc.59
     /tmp/ccRxlAvc.s:297    .text.reset_keyboard:0000000000000004 .Loc.60
     /tmp/ccRxlAvc.s:301    .text.reset_keyboard:0000000000000004 .Loc.61
     /tmp/ccRxlAvc.s:303    .text.reset_keyboard:0000000000000004 .Loc.62
     /tmp/ccRxlAvc.s:304    .text.reset_keyboard:0000000000000004 .Loc.63
     /tmp/ccRxlAvc.s:305    .text.reset_keyboard:0000000000000004 .Loc.64
     /tmp/ccRxlAvc.s:306    .text.reset_keyboard:0000000000000004 .Loc.65
     /tmp/ccRxlAvc.s:307    .text.reset_keyboard:0000000000000004 .Loc.66
     /tmp/ccRxlAvc.s:308    .text.reset_keyboard:0000000000000004 .Loc.67
     /tmp/ccRxlAvc.s:316    .text.reset_keyboard:0000000000000014 L0
     /tmp/ccRxlAvc.s:319    .text.reset_keyboard:0000000000000016 .Loc.68
     /tmp/ccRxlAvc.s:322    .text.reset_keyboard:0000000000000016 .Loc.69
     /tmp/ccRxlAvc.s:325    .text.reset_keyboard:000000000000001a L0
     /tmp/ccRxlAvc.s:331    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccRxlAvc.s:334    .text.process_record_quantum:0000000000000000 .Loc.70
     /tmp/ccRxlAvc.s:335    .text.process_record_quantum:0000000000000000 L0
     /tmp/ccRxlAvc.s:336    .text.process_record_quantum:0000000000000000 .Loc.71
     /tmp/ccRxlAvc.s:366    .text.process_record_quantum:000000000000000e .Loc.72
     /tmp/ccRxlAvc.s:367    .text.process_record_quantum:000000000000000e .Loc.73
     /tmp/ccRxlAvc.s:372    .text.process_record_quantum:0000000000000014 .Loc.74
     /tmp/ccRxlAvc.s:373    .text.process_record_quantum:0000000000000014 .Loc.75
     /tmp/ccRxlAvc.s:374    .text.process_record_quantum:0000000000000014 .Loc.76
     /tmp/ccRxlAvc.s:377    .text.process_record_quantum:0000000000000018 .Loc.77
     /tmp/ccRxlAvc.s:381    .text.process_record_quantum:000000000000001c .Loc.78
     /tmp/ccRxlAvc.s:382    .text.process_record_quantum:000000000000001c .Loc.79
     /tmp/ccRxlAvc.s:383    .text.process_record_quantum:000000000000001c .Loc.80
     /tmp/ccRxlAvc.s:387    .text.process_record_quantum:0000000000000022 .Loc.81
     /tmp/ccRxlAvc.s:389    .text.process_record_quantum:0000000000000022 .Loc.82
     /tmp/ccRxlAvc.s:395    .text.process_record_quantum:000000000000002a .Loc.83
     /tmp/ccRxlAvc.s:399    .text.process_record_quantum:000000000000002e .Loc.84
     /tmp/ccRxlAvc.s:403    .text.process_record_quantum:0000000000000032 .Loc.85
     /tmp/ccRxlAvc.s:404    .text.process_record_quantum:0000000000000032 .Loc.86
     /tmp/ccRxlAvc.s:409    .text.process_record_quantum:0000000000000036 .Loc.87
     /tmp/ccRxlAvc.s:411    .text.process_record_quantum:0000000000000036 .Loc.88
     /tmp/ccRxlAvc.s:416    .text.process_record_quantum:000000000000003c .Loc.89
     /tmp/ccRxlAvc.s:417    .text.process_record_quantum:000000000000003c .Loc.90
     /tmp/ccRxlAvc.s:421    .text.process_record_quantum:0000000000000042 .Loc.91
     /tmp/ccRxlAvc.s:423    .text.process_record_quantum:0000000000000046 L0
     /tmp/ccRxlAvc.s:425    .text.process_record_quantum:0000000000000048 .Loc.92
     /tmp/ccRxlAvc.s:430    .text.process_record_quantum:0000000000000050 .Loc.93
     /tmp/ccRxlAvc.s:432    .text.process_record_quantum:0000000000000054 L0
     /tmp/ccRxlAvc.s:434    .text.process_record_quantum:0000000000000056 .Loc.94
     /tmp/ccRxlAvc.s:442    .text.process_record_quantum:0000000000000066 L0
     /tmp/ccRxlAvc.s:452    .text.process_record_quantum:0000000000000076 .Loc.95
     /tmp/ccRxlAvc.s:453    .text.process_record_quantum:0000000000000076 .Loc.96
     /tmp/ccRxlAvc.s:1810   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccRxlAvc.s:456    .text.process_record_quantum:000000000000007c .Loc.97
     /tmp/ccRxlAvc.s:457    .text.process_record_quantum:000000000000007c .Loc.98
     /tmp/ccRxlAvc.s:459    .text.process_record_quantum:0000000000000080 .Loc.99
     /tmp/ccRxlAvc.s:461    .text.process_record_quantum:0000000000000080 .Loc.100
     /tmp/ccRxlAvc.s:462    .text.process_record_quantum:0000000000000080 .Loc.101
     /tmp/ccRxlAvc.s:465    .text.process_record_quantum:0000000000000082 .Loc.102
     /tmp/ccRxlAvc.s:469    .text.process_record_quantum:0000000000000086 .Loc.103
     /tmp/ccRxlAvc.s:473    .text.process_record_quantum:000000000000008a .Loc.104
     /tmp/ccRxlAvc.s:477    .text.process_record_quantum:000000000000008e .Loc.105
     /tmp/ccRxlAvc.s:482    .text.process_record_quantum:0000000000000092 .Loc.106
     /tmp/ccRxlAvc.s:483    .text.process_record_quantum:0000000000000092 .Loc.107
     /tmp/ccRxlAvc.s:489    .text.process_record_quantum:000000000000009a .Loc.108
     /tmp/ccRxlAvc.s:493    .text.process_record_quantum:000000000000009c .Loc.109
     /tmp/ccRxlAvc.s:495    .text.process_record_quantum:000000000000009c .Loc.110
     /tmp/ccRxlAvc.s:496    .text.process_record_quantum:000000000000009c .Loc.111
     /tmp/ccRxlAvc.s:500    .text.process_record_quantum:00000000000000a2 .Loc.112
     /tmp/ccRxlAvc.s:505    .text.process_record_quantum:00000000000000a6 .Loc.113
     /tmp/ccRxlAvc.s:509    .text.process_record_quantum:00000000000000ae L0
     /tmp/ccRxlAvc.s:514    .text.process_record_quantum:00000000000000b6 .Loc.114
     /tmp/ccRxlAvc.s:515    .text.process_record_quantum:00000000000000b6 .Loc.115
     /tmp/ccRxlAvc.s:519    .text.process_record_quantum:00000000000000be L0
     /tmp/ccRxlAvc.s:521    .text.process_record_quantum:00000000000000c0 .Loc.116
     /tmp/ccRxlAvc.s:522    .text.process_record_quantum:00000000000000c0 .Loc.117
     /tmp/ccRxlAvc.s:524    .text.process_record_quantum:00000000000000c4 .Loc.118
     /tmp/ccRxlAvc.s:525    .text.process_record_quantum:00000000000000c4 .Loc.119
     /tmp/ccRxlAvc.s:528    .text.process_record_quantum:00000000000000c8 .Loc.120
     /tmp/ccRxlAvc.s:1805   .bss.scs_timer:0000000000000000 scs_timer
     /tmp/ccRxlAvc.s:531    .text.process_record_quantum:00000000000000d0 .Loc.121
     /tmp/ccRxlAvc.s:535    .text.process_record_quantum:00000000000000d4 .Loc.122
     /tmp/ccRxlAvc.s:536    .text.process_record_quantum:00000000000000d4 .Loc.123
     /tmp/ccRxlAvc.s:540    .text.process_record_quantum:00000000000000da .Loc.124
     /tmp/ccRxlAvc.s:544    .text.process_record_quantum:00000000000000de .Loc.125
     /tmp/ccRxlAvc.s:550    .text.process_record_quantum:00000000000000e4 .Loc.126
     /tmp/ccRxlAvc.s:554    .text.process_record_quantum:00000000000000e8 .Loc.127
     /tmp/ccRxlAvc.s:558    .text.process_record_quantum:00000000000000ec .Loc.128
     /tmp/ccRxlAvc.s:562    .text.process_record_quantum:00000000000000ee .Loc.129
     /tmp/ccRxlAvc.s:563    .text.process_record_quantum:00000000000000ee .Loc.130
     /tmp/ccRxlAvc.s:564    .text.process_record_quantum:00000000000000ee .Loc.131
     /tmp/ccRxlAvc.s:569    .text.process_record_quantum:00000000000000f6 .Loc.132
     /tmp/ccRxlAvc.s:570    .text.process_record_quantum:00000000000000f6 .Loc.133
     /tmp/ccRxlAvc.s:571    .text.process_record_quantum:00000000000000f6 .Loc.134
     /tmp/ccRxlAvc.s:577    .text.process_record_quantum:0000000000000102 .Loc.135
     /tmp/ccRxlAvc.s:578    .text.process_record_quantum:0000000000000102 .Loc.136
     /tmp/ccRxlAvc.s:579    .text.process_record_quantum:0000000000000102 .Loc.137
     /tmp/ccRxlAvc.s:583    .text.process_record_quantum:000000000000010a L0
     /tmp/ccRxlAvc.s:585    .text.process_record_quantum:000000000000010c .Loc.138
     /tmp/ccRxlAvc.s:586    .text.process_record_quantum:000000000000010c .Loc.139
     /tmp/ccRxlAvc.s:589    .text.process_record_quantum:0000000000000110 .Loc.140
     /tmp/ccRxlAvc.s:592    .text.process_record_quantum:0000000000000114 .Loc.141
     /tmp/ccRxlAvc.s:596    .text.process_record_quantum:0000000000000118 .Loc.142
     /tmp/ccRxlAvc.s:597    .text.process_record_quantum:0000000000000118 .Loc.143
     /tmp/ccRxlAvc.s:603    .text.process_record_quantum:0000000000000126 .Loc.144
     /tmp/ccRxlAvc.s:607    .text.process_record_quantum:000000000000012c .Loc.145
     /tmp/ccRxlAvc.s:639    .text.process_record_quantum:0000000000000140 .Loc.146
     /tmp/ccRxlAvc.s:640    .text.process_record_quantum:0000000000000140 .Loc.147
     /tmp/ccRxlAvc.s:644    .text.process_record_quantum:0000000000000146 .Loc.148
     /tmp/ccRxlAvc.s:646    .text.process_record_quantum:000000000000014a .Loc.149
     /tmp/ccRxlAvc.s:647    .text.process_record_quantum:000000000000014a .Loc.150
     /tmp/ccRxlAvc.s:651    .text.process_record_quantum:0000000000000152 .Loc.151
     /tmp/ccRxlAvc.s:654    .text.process_record_quantum:0000000000000156 .Loc.152
     /tmp/ccRxlAvc.s:655    .text.process_record_quantum:0000000000000156 .Loc.153
     /tmp/ccRxlAvc.s:658    .text.process_record_quantum:0000000000000158 .Loc.154
     /tmp/ccRxlAvc.s:659    .text.process_record_quantum:0000000000000158 .Loc.155
     /tmp/ccRxlAvc.s:664    .text.process_record_quantum:0000000000000160 .Loc.156
     /tmp/ccRxlAvc.s:665    .text.process_record_quantum:0000000000000160 .Loc.157
     /tmp/ccRxlAvc.s:670    .text.process_record_quantum:0000000000000168 .Loc.158
     /tmp/ccRxlAvc.s:671    .text.process_record_quantum:0000000000000168 .Loc.159
     /tmp/ccRxlAvc.s:676    .text.process_record_quantum:0000000000000170 .Loc.160
     /tmp/ccRxlAvc.s:677    .text.process_record_quantum:0000000000000170 .Loc.161
     /tmp/ccRxlAvc.s:682    .text.process_record_quantum:0000000000000178 .Loc.162
     /tmp/ccRxlAvc.s:683    .text.process_record_quantum:0000000000000178 .Loc.163
     /tmp/ccRxlAvc.s:688    .text.process_record_quantum:0000000000000180 .Loc.164
     /tmp/ccRxlAvc.s:689    .text.process_record_quantum:0000000000000180 .Loc.165
     /tmp/ccRxlAvc.s:694    .text.process_record_quantum:0000000000000188 .Loc.166
     /tmp/ccRxlAvc.s:695    .text.process_record_quantum:0000000000000188 .Loc.167
     /tmp/ccRxlAvc.s:696    .text.process_record_quantum:0000000000000188 .Loc.168
     /tmp/ccRxlAvc.s:701    .text.process_record_quantum:0000000000000190 .Loc.169
     /tmp/ccRxlAvc.s:702    .text.process_record_quantum:0000000000000190 .Loc.170
     /tmp/ccRxlAvc.s:707    .text.process_record_quantum:0000000000000198 .Loc.171
     /tmp/ccRxlAvc.s:708    .text.process_record_quantum:0000000000000198 .Loc.172
     /tmp/ccRxlAvc.s:713    .text.process_record_quantum:00000000000001a0 .Loc.173
     /tmp/ccRxlAvc.s:714    .text.process_record_quantum:00000000000001a0 .Loc.174
     /tmp/ccRxlAvc.s:719    .text.process_record_quantum:00000000000001a8 .Loc.175
     /tmp/ccRxlAvc.s:720    .text.process_record_quantum:00000000000001a8 .Loc.176
     /tmp/ccRxlAvc.s:725    .text.process_record_quantum:00000000000001b0 .Loc.177
     /tmp/ccRxlAvc.s:726    .text.process_record_quantum:00000000000001b0 .Loc.178
     /tmp/ccRxlAvc.s:731    .text.process_record_quantum:00000000000001b8 .Loc.179
     /tmp/ccRxlAvc.s:732    .text.process_record_quantum:00000000000001b8 .Loc.180
     /tmp/ccRxlAvc.s:737    .text.process_record_quantum:00000000000001c0 .Loc.181
     /tmp/ccRxlAvc.s:738    .text.process_record_quantum:00000000000001c0 .Loc.182
     /tmp/ccRxlAvc.s:743    .text.process_record_quantum:00000000000001c8 .Loc.183
     /tmp/ccRxlAvc.s:744    .text.process_record_quantum:00000000000001c8 .Loc.184
     /tmp/ccRxlAvc.s:749    .text.process_record_quantum:00000000000001d0 .Loc.185
     /tmp/ccRxlAvc.s:750    .text.process_record_quantum:00000000000001d0 .Loc.186
     /tmp/ccRxlAvc.s:751    .text.process_record_quantum:00000000000001d0 .Loc.187
     /tmp/ccRxlAvc.s:756    .text.process_record_quantum:00000000000001d8 .Loc.188
     /tmp/ccRxlAvc.s:757    .text.process_record_quantum:00000000000001d8 .Loc.189
     /tmp/ccRxlAvc.s:759    .text.process_record_quantum:00000000000001dc .Loc.190
     /tmp/ccRxlAvc.s:766    .text.process_record_quantum:00000000000001e6 .Loc.191
     /tmp/ccRxlAvc.s:767    .text.process_record_quantum:00000000000001e6 .Loc.192
     /tmp/ccRxlAvc.s:772    .text.process_record_quantum:00000000000001ee .Loc.193
     /tmp/ccRxlAvc.s:773    .text.process_record_quantum:00000000000001ee .Loc.194
     /tmp/ccRxlAvc.s:775    .text.process_record_quantum:00000000000001f2 .Loc.195
     /tmp/ccRxlAvc.s:776    .text.process_record_quantum:00000000000001f2 .Loc.196
     /tmp/ccRxlAvc.s:779    .text.process_record_quantum:00000000000001f6 .Loc.197
     /tmp/ccRxlAvc.s:782    .text.process_record_quantum:00000000000001fe .Loc.198
     /tmp/ccRxlAvc.s:785    .text.process_record_quantum:0000000000000200 .Loc.199
     /tmp/ccRxlAvc.s:790    .text.process_record_quantum:0000000000000206 .Loc.200
     /tmp/ccRxlAvc.s:791    .text.process_record_quantum:0000000000000206 .Loc.201
     /tmp/ccRxlAvc.s:795    .text.process_record_quantum:000000000000020e .Loc.202
     /tmp/ccRxlAvc.s:800    .text.process_record_quantum:000000000000021a .Loc.203
     /tmp/ccRxlAvc.s:804    .text.process_record_quantum:0000000000000220 .Loc.204
     /tmp/ccRxlAvc.s:808    .text.process_record_quantum:0000000000000226 .Loc.205
     /tmp/ccRxlAvc.s:813    .text.process_record_quantum:000000000000022c .Loc.206
     /tmp/ccRxlAvc.s:816    .text.process_record_quantum:000000000000022e .Loc.207
     /tmp/ccRxlAvc.s:821    .text.process_record_quantum:0000000000000234 .Loc.208
     /tmp/ccRxlAvc.s:822    .text.process_record_quantum:0000000000000234 .Loc.209
     /tmp/ccRxlAvc.s:826    .text.process_record_quantum:000000000000023c .Loc.210
     /tmp/ccRxlAvc.s:831    .text.process_record_quantum:0000000000000248 .Loc.211
     /tmp/ccRxlAvc.s:835    .text.process_record_quantum:000000000000024e .Loc.212
     /tmp/ccRxlAvc.s:839    .text.process_record_quantum:0000000000000254 .Loc.213
     /tmp/ccRxlAvc.s:844    .text.process_record_quantum:000000000000025a .Loc.214
     /tmp/ccRxlAvc.s:847    .text.process_record_quantum:000000000000025e L0
     /tmp/ccRxlAvc.s:853    .text.send_string:0000000000000000 send_string
     /tmp/ccRxlAvc.s:856    .text.send_string:0000000000000000 .Loc.215
     /tmp/ccRxlAvc.s:857    .text.send_string:0000000000000000 L0
     /tmp/ccRxlAvc.s:858    .text.send_string:0000000000000000 .Loc.216
     /tmp/ccRxlAvc.s:878    .text.send_string:0000000000000008 .Loc.217
     /tmp/ccRxlAvc.s:880    .text.send_string:0000000000000008 .Loc.218
     /tmp/ccRxlAvc.s:881    .text.send_string:0000000000000008 .Loc.219
     /tmp/ccRxlAvc.s:883    .text.send_string:0000000000000008 .Loc.220
     /tmp/ccRxlAvc.s:884    .text.send_string:0000000000000008 .Loc.221
     /tmp/ccRxlAvc.s:885    .text.send_string:0000000000000008 .Loc.222
     /tmp/ccRxlAvc.s:893    .text.send_string:000000000000000c .Loc.223
     /tmp/ccRxlAvc.s:894    .text.send_string:000000000000000c .Loc.224
     /tmp/ccRxlAvc.s:897    .text.send_string:000000000000000c .Loc.225
     /tmp/ccRxlAvc.s:898    .text.send_string:000000000000000c .Loc.226
     /tmp/ccRxlAvc.s:901    .text.send_string:0000000000000010 .Loc.227
     /tmp/ccRxlAvc.s:903    .text.send_string:0000000000000010 .Loc.228
     /tmp/ccRxlAvc.s:906    .text.send_string:0000000000000012 .Loc.229
     /tmp/ccRxlAvc.s:907    .text.send_string:0000000000000012 .Loc.230
     /tmp/ccRxlAvc.s:1635   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
     /tmp/ccRxlAvc.s:912    .text.send_string:0000000000000018 .Loc.231
     /tmp/ccRxlAvc.s:919    .text.send_string:000000000000001a .Loc.232
     /tmp/ccRxlAvc.s:920    .text.send_string:000000000000001a .Loc.233
     /tmp/ccRxlAvc.s:923    .text.send_string:000000000000001a .Loc.234
     /tmp/ccRxlAvc.s:925    .text.send_string:000000000000001a .Loc.235
     /tmp/ccRxlAvc.s:926    .text.send_string:000000000000001a .Loc.236
     /tmp/ccRxlAvc.s:927    .text.send_string:000000000000001a .Loc.237
     /tmp/ccRxlAvc.s:1673   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
     /tmp/ccRxlAvc.s:931    .text.send_string:000000000000001e .Loc.238
     /tmp/ccRxlAvc.s:934    .text.send_string:0000000000000020 .Loc.239
     /tmp/ccRxlAvc.s:941    .text.send_string:0000000000000022 .Loc.240
     /tmp/ccRxlAvc.s:944    .text.send_string:0000000000000022 .Loc.241
     /tmp/ccRxlAvc.s:947    .text.send_string:0000000000000026 .Loc.242
     /tmp/ccRxlAvc.s:951    .text.send_string:000000000000002c .Loc.243
     /tmp/ccRxlAvc.s:955    .text.send_string:0000000000000032 .Loc.244
     /tmp/ccRxlAvc.s:959    .text.send_string:0000000000000038 .Loc.245
     /tmp/ccRxlAvc.s:962    .text.send_string:000000000000003a .Loc.246
     /tmp/ccRxlAvc.s:965    .text.send_string:000000000000003e .Loc.247
     /tmp/ccRxlAvc.s:969    .text.send_string:0000000000000042 .Loc.248
     /tmp/ccRxlAvc.s:971    .text.send_string:0000000000000042 .Loc.249
     /tmp/ccRxlAvc.s:972    .text.send_string:0000000000000042 .Loc.250
     /tmp/ccRxlAvc.s:977    .text.send_string:0000000000000044 .Loc.251
     /tmp/ccRxlAvc.s:981    .text.send_string:000000000000004a .Loc.252
     /tmp/ccRxlAvc.s:987    .text.send_string:000000000000004e .Loc.253
     /tmp/ccRxlAvc.s:989    .text.send_string:000000000000004e .Loc.254
     /tmp/ccRxlAvc.s:994    .text.send_string:0000000000000054 .Loc.255
     /tmp/ccRxlAvc.s:996    .text.send_string:0000000000000056 L0
     /tmp/ccRxlAvc.s:1002   .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccRxlAvc.s:1005   .text.update_tri_layer:0000000000000000 .Loc.256
     /tmp/ccRxlAvc.s:1006   .text.update_tri_layer:0000000000000000 L0
     /tmp/ccRxlAvc.s:1007   .text.update_tri_layer:0000000000000000 .Loc.257
     /tmp/ccRxlAvc.s:1039   .text.update_tri_layer:0000000000000010 .Loc.258
     /tmp/ccRxlAvc.s:1058   .text.update_tri_layer:000000000000002e .Loc.259
     /tmp/ccRxlAvc.s:1072   .text.update_tri_layer:0000000000000044 .Loc.260
     /tmp/ccRxlAvc.s:1086   .text.update_tri_layer:0000000000000066 .Loc.261
     /tmp/ccRxlAvc.s:1088   .text.update_tri_layer:0000000000000066 .Loc.262
     /tmp/ccRxlAvc.s:1095   .text.update_tri_layer:0000000000000072 .Loc.263
     /tmp/ccRxlAvc.s:1099   .text.update_tri_layer:0000000000000076 .Loc.264
     /tmp/ccRxlAvc.s:1101   .text.update_tri_layer:0000000000000076 .Loc.265
     /tmp/ccRxlAvc.s:1108   .text.update_tri_layer:0000000000000082 .Loc.266
     /tmp/ccRxlAvc.s:1111   .text.update_tri_layer:0000000000000086 .Loc.267
     /tmp/ccRxlAvc.s:1112   .text.update_tri_layer:0000000000000086 L0
     /tmp/ccRxlAvc.s:1118   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccRxlAvc.s:1120   .text.tap_random_base64:0000000000000000 .Loc.268
     /tmp/ccRxlAvc.s:1121   .text.tap_random_base64:0000000000000000 L0
     /tmp/ccRxlAvc.s:1134   .text.tap_random_base64:0000000000000004 .Loc.269
     /tmp/ccRxlAvc.s:1135   .text.tap_random_base64:0000000000000004 .Loc.270
     /tmp/ccRxlAvc.s:1138   .text.tap_random_base64:0000000000000008 .Loc.271
     /tmp/ccRxlAvc.s:1144   .text.tap_random_base64:0000000000000012 .Loc.272
     /tmp/ccRxlAvc.s:1147   .text.tap_random_base64:0000000000000014 .Loc.273
     /tmp/ccRxlAvc.s:1159   .text.tap_random_base64:000000000000002a .Loc.274
     /tmp/ccRxlAvc.s:1163   .text.tap_random_base64:0000000000000030 .Loc.275
     /tmp/ccRxlAvc.s:1166   .text.tap_random_base64:0000000000000032 .Loc.276
     /tmp/ccRxlAvc.s:1170   .text.tap_random_base64:0000000000000038 .Loc.277
     /tmp/ccRxlAvc.s:1173   .text.tap_random_base64:000000000000003a .Loc.278
     /tmp/ccRxlAvc.s:1176   .text.tap_random_base64:000000000000003e .Loc.279
     /tmp/ccRxlAvc.s:1181   .text.tap_random_base64:0000000000000042 .Loc.280
     /tmp/ccRxlAvc.s:1188   .text.tap_random_base64:000000000000004c .Loc.281
     /tmp/ccRxlAvc.s:1192   .text.tap_random_base64:0000000000000050 .Loc.282
     /tmp/ccRxlAvc.s:1196   .text.tap_random_base64:0000000000000052 .Loc.283
     /tmp/ccRxlAvc.s:1200   .text.tap_random_base64:0000000000000054 .Loc.284
     /tmp/ccRxlAvc.s:1204   .text.tap_random_base64:000000000000005a .Loc.285
     /tmp/ccRxlAvc.s:1209   .text.tap_random_base64:000000000000005e .Loc.286
     /tmp/ccRxlAvc.s:1213   .text.tap_random_base64:0000000000000064 .Loc.287
     /tmp/ccRxlAvc.s:1218   .text.tap_random_base64:0000000000000066 .Loc.288
     /tmp/ccRxlAvc.s:1221   .text.tap_random_base64:000000000000006a .Loc.289
     /tmp/ccRxlAvc.s:1225   .text.tap_random_base64:000000000000006e .Loc.290
     /tmp/ccRxlAvc.s:1228   .text.tap_random_base64:0000000000000070 .Loc.291
     /tmp/ccRxlAvc.s:1232   .text.tap_random_base64:0000000000000072 .Loc.292
     /tmp/ccRxlAvc.s:1236   .text.tap_random_base64:0000000000000078 .Loc.293
     /tmp/ccRxlAvc.s:1240   .text.tap_random_base64:000000000000007e .Loc.294
     /tmp/ccRxlAvc.s:1244   .text.tap_random_base64:0000000000000082 .Loc.295
     /tmp/ccRxlAvc.s:1248   .text.tap_random_base64:0000000000000088 .Loc.296
     /tmp/ccRxlAvc.s:1251   .text.tap_random_base64:000000000000008c L0
     /tmp/ccRxlAvc.s:1257   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccRxlAvc.s:1259   .text.matrix_init_quantum:0000000000000000 .Loc.297
     /tmp/ccRxlAvc.s:1260   .text.matrix_init_quantum:0000000000000000 L0
     /tmp/ccRxlAvc.s:1265   .text.matrix_init_quantum:0000000000000000 .Loc.298
     /tmp/ccRxlAvc.s:1268   .text.matrix_init_quantum:0000000000000004 L0
     /tmp/ccRxlAvc.s:1274   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccRxlAvc.s:1276   .text.matrix_scan_quantum:0000000000000000 .Loc.299
     /tmp/ccRxlAvc.s:1277   .text.matrix_scan_quantum:0000000000000000 L0
     /tmp/ccRxlAvc.s:1282   .text.matrix_scan_quantum:0000000000000000 .Loc.300
     /tmp/ccRxlAvc.s:1285   .text.matrix_scan_quantum:0000000000000004 L0
     /tmp/ccRxlAvc.s:1291   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccRxlAvc.s:1293   .text.backlight_init_ports:0000000000000000 L0
     /tmp/ccRxlAvc.s:1294   .text.backlight_init_ports:0000000000000000 .Loc.301
     /tmp/ccRxlAvc.s:1301   .text.backlight_init_ports:0000000000000002 L0
     /tmp/ccRxlAvc.s:1307   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccRxlAvc.s:1310   .text.send_nibble:0000000000000000 .Loc.302
     /tmp/ccRxlAvc.s:1311   .text.send_nibble:0000000000000000 L0
     /tmp/ccRxlAvc.s:1312   .text.send_nibble:0000000000000000 .Loc.303
     /tmp/ccRxlAvc.s:1322   .text.send_nibble:0000000000000004 .Loc.304
     /tmp/ccRxlAvc.s:1327   .text.send_nibble:000000000000000c .Loc.305
     /tmp/ccRxlAvc.s:1330   .text.send_nibble:000000000000000e .Loc.306
     /tmp/ccRxlAvc.s:1333   .text.send_nibble:0000000000000010 .Loc.307
     /tmp/ccRxlAvc.s:1336   .text.send_nibble:0000000000000014 .Loc.308
     /tmp/ccRxlAvc.s:1341   .text.send_nibble:0000000000000018 .Loc.309
     /tmp/ccRxlAvc.s:1344   .text.send_nibble:000000000000001c .Loc.310
     /tmp/ccRxlAvc.s:1346   .text.send_nibble:000000000000001e .Loc.311
     /tmp/ccRxlAvc.s:1350   .text.send_nibble:0000000000000022 .Loc.312
     /tmp/ccRxlAvc.s:1354   .text.send_nibble:0000000000000026 .Loc.313
     /tmp/ccRxlAvc.s:1357   .text.send_nibble:0000000000000028 .Loc.314
     /tmp/ccRxlAvc.s:1360   .text.send_nibble:000000000000002c .Loc.315
     /tmp/ccRxlAvc.s:1365   .text.send_nibble:000000000000002e .Loc.316
     /tmp/ccRxlAvc.s:1367   .text.send_nibble:0000000000000030 .Loc.317
     /tmp/ccRxlAvc.s:1370   .text.send_nibble:0000000000000034 L0
     /tmp/ccRxlAvc.s:1376   .text.send_byte:0000000000000000 send_byte
     /tmp/ccRxlAvc.s:1379   .text.send_byte:0000000000000000 .Loc.318
     /tmp/ccRxlAvc.s:1380   .text.send_byte:0000000000000000 L0
     /tmp/ccRxlAvc.s:1381   .text.send_byte:0000000000000000 .Loc.319
     /tmp/ccRxlAvc.s:1391   .text.send_byte:0000000000000004 .Loc.320
     /tmp/ccRxlAvc.s:1393   .text.send_byte:0000000000000004 .Loc.321
     /tmp/ccRxlAvc.s:1396   .text.send_byte:0000000000000006 .Loc.322
     /tmp/ccRxlAvc.s:1400   .text.send_byte:000000000000000c .Loc.323
     /tmp/ccRxlAvc.s:1404   .text.send_byte:0000000000000010 .Loc.324
     /tmp/ccRxlAvc.s:1407   .text.send_byte:0000000000000012 .Loc.325
     /tmp/ccRxlAvc.s:1410   .text.send_byte:0000000000000016 L0
     /tmp/ccRxlAvc.s:1416   .text.send_word:0000000000000000 send_word
     /tmp/ccRxlAvc.s:1419   .text.send_word:0000000000000000 .Loc.326
     /tmp/ccRxlAvc.s:1420   .text.send_word:0000000000000000 L0
     /tmp/ccRxlAvc.s:1421   .text.send_word:0000000000000000 .Loc.327
     /tmp/ccRxlAvc.s:1433   .text.send_word:0000000000000006 .Loc.328
     /tmp/ccRxlAvc.s:1434   .text.send_word:0000000000000006 .Loc.329
     /tmp/ccRxlAvc.s:1437   .text.send_word:000000000000000a .Loc.330
     /tmp/ccRxlAvc.s:1440   .text.send_word:000000000000000c .Loc.331
     /tmp/ccRxlAvc.s:1442   .text.send_word:000000000000000e .Loc.332
     /tmp/ccRxlAvc.s:1445   .text.send_word:0000000000000012 L0
     /tmp/ccRxlAvc.s:1451   .text.send_dword:0000000000000000 send_dword
     /tmp/ccRxlAvc.s:1454   .text.send_dword:0000000000000000 .Loc.333
     /tmp/ccRxlAvc.s:1455   .text.send_dword:0000000000000000 L0
     /tmp/ccRxlAvc.s:1456   .text.send_dword:0000000000000000 .Loc.334
     /tmp/ccRxlAvc.s:1471   .text.send_dword:0000000000000008 .Loc.335
     /tmp/ccRxlAvc.s:1473   .text.send_dword:0000000000000008 .Loc.336
     /tmp/ccRxlAvc.s:1476   .text.send_dword:000000000000000c .Loc.337
     /tmp/ccRxlAvc.s:1480   .text.send_dword:0000000000000010 .Loc.338
     /tmp/ccRxlAvc.s:1482   .text.send_dword:0000000000000012 .Loc.339
     /tmp/ccRxlAvc.s:1484   .text.send_dword:0000000000000014 .Loc.340
     /tmp/ccRxlAvc.s:1487   .text.send_dword:0000000000000018 .Loc.341
     /tmp/ccRxlAvc.s:1488   .text.send_dword:0000000000000018 L0
     /tmp/ccRxlAvc.s:1494   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccRxlAvc.s:1497   .text.api_send_unicode:0000000000000000 .Loc.342
     /tmp/ccRxlAvc.s:1498   .text.api_send_unicode:0000000000000000 L0
     /tmp/ccRxlAvc.s:1503   .text.api_send_unicode:0000000000000000 .Loc.343
     /tmp/ccRxlAvc.s:1506   .text.api_send_unicode:0000000000000002 L0
     /tmp/ccRxlAvc.s:1512   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccRxlAvc.s:1515   .text.led_set_user:0000000000000000 .Loc.344
     /tmp/ccRxlAvc.s:1516   .text.led_set_user:0000000000000000 L0
     /tmp/ccRxlAvc.s:1521   .text.led_set_user:0000000000000000 .Loc.345
     /tmp/ccRxlAvc.s:1524   .text.led_set_user:0000000000000002 L0
     /tmp/ccRxlAvc.s:1512   .text.led_set_user:0000000000000000 led_set_user.localalias
     /tmp/ccRxlAvc.s:1531   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccRxlAvc.s:1533   .text.backlight_set:0000000000000000 L0
     /tmp/ccRxlAvc.s:1534   .text.backlight_set:0000000000000000 .Loc.346
     /tmp/ccRxlAvc.s:1541   .text.backlight_set:0000000000000002 L0
     /tmp/ccRxlAvc.s:1547   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccRxlAvc.s:1550   .text.led_set_kb:0000000000000000 .Loc.347
     /tmp/ccRxlAvc.s:1551   .text.led_set_kb:0000000000000000 L0
     /tmp/ccRxlAvc.s:1556   .text.led_set_kb:0000000000000000 .Loc.348
     /tmp/ccRxlAvc.s:1559   .text.led_set_kb:0000000000000004 .Loc.349
     /tmp/ccRxlAvc.s:1560   .text.led_set_kb:0000000000000004 L0
     /tmp/ccRxlAvc.s:1566   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccRxlAvc.s:1568   .text.led_init_ports:0000000000000000 .Loc.350
     /tmp/ccRxlAvc.s:1569   .text.led_init_ports:0000000000000000 L0
     /tmp/ccRxlAvc.s:1574   .text.led_init_ports:0000000000000000 .Loc.351
     /tmp/ccRxlAvc.s:1577   .text.led_init_ports:0000000000000002 L0
     /tmp/ccRxlAvc.s:1583   .text.led_set:0000000000000000 led_set
     /tmp/ccRxlAvc.s:1586   .text.led_set:0000000000000000 .Loc.352
     /tmp/ccRxlAvc.s:1587   .text.led_set:0000000000000000 L0
     /tmp/ccRxlAvc.s:1592   .text.led_set:0000000000000000 .Loc.353
     /tmp/ccRxlAvc.s:1595   .text.led_set:0000000000000004 .Loc.354
     /tmp/ccRxlAvc.s:1596   .text.led_set:0000000000000004 L0
     /tmp/ccRxlAvc.s:1602   .text.startup_user:0000000000000000 startup_user
     /tmp/ccRxlAvc.s:1604   .text.startup_user:0000000000000000 L0
     /tmp/ccRxlAvc.s:1605   .text.startup_user:0000000000000000 .Loc.355
     /tmp/ccRxlAvc.s:1612   .text.startup_user:0000000000000002 L0
     /tmp/ccRxlAvc.s:1618   .text.shutdown_user:0000000000000000 shutdown_user
     /tmp/ccRxlAvc.s:1620   .text.shutdown_user:0000000000000000 L0
     /tmp/ccRxlAvc.s:1621   .text.shutdown_user:0000000000000000 .Loc.356
     /tmp/ccRxlAvc.s:1628   .text.shutdown_user:0000000000000002 L0
     /tmp/ccRxlAvc.s:144    .text.do_code16:000000000000006c L0
     /tmp/ccRxlAvc.s:178    .text.register_code16:0000000000000014 L0
     /tmp/ccRxlAvc.s:219    .text.unregister_code16:0000000000000018 L0
     /tmp/ccRxlAvc.s:241    .text.process_action_kb:0000000000000004 L0
     /tmp/ccRxlAvc.s:263    .text.process_record_user:0000000000000004 L0
     /tmp/ccRxlAvc.s:283    .text.process_record_kb:0000000000000004 L0
     /tmp/ccRxlAvc.s:328    .text.reset_keyboard:000000000000001a L0
     /tmp/ccRxlAvc.s:850    .text.process_record_quantum:000000000000025e L0
     /tmp/ccRxlAvc.s:999    .text.send_string:0000000000000056 L0
     /tmp/ccRxlAvc.s:1115   .text.update_tri_layer:0000000000000086 L0
     /tmp/ccRxlAvc.s:1254   .text.tap_random_base64:000000000000008c L0
     /tmp/ccRxlAvc.s:1271   .text.matrix_init_quantum:0000000000000004 L0
     /tmp/ccRxlAvc.s:1288   .text.matrix_scan_quantum:0000000000000004 L0
     /tmp/ccRxlAvc.s:1304   .text.backlight_init_ports:0000000000000002 L0
     /tmp/ccRxlAvc.s:1373   .text.send_nibble:0000000000000034 L0
     /tmp/ccRxlAvc.s:1413   .text.send_byte:0000000000000016 L0
     /tmp/ccRxlAvc.s:1448   .text.send_word:0000000000000012 L0
     /tmp/ccRxlAvc.s:1491   .text.send_dword:0000000000000018 L0
     /tmp/ccRxlAvc.s:1509   .text.api_send_unicode:0000000000000002 L0
     /tmp/ccRxlAvc.s:1528   .text.led_set_user:0000000000000002 L0
     /tmp/ccRxlAvc.s:1544   .text.backlight_set:0000000000000002 L0
     /tmp/ccRxlAvc.s:1563   .text.led_set_kb:0000000000000004 L0
     /tmp/ccRxlAvc.s:1580   .text.led_init_ports:0000000000000002 L0
     /tmp/ccRxlAvc.s:1599   .text.led_set:0000000000000004 L0
     /tmp/ccRxlAvc.s:1615   .text.startup_user:0000000000000002 L0
     /tmp/ccRxlAvc.s:1632   .text.shutdown_user:0000000000000002 L0
                     .debug_frame:0000000000000000 L0
     /tmp/ccRxlAvc.s:129    .text.do_code16:0000000000000062 .L1
     /tmp/ccRxlAvc.s:59     .text.do_code16:000000000000001e .L4
     /tmp/ccRxlAvc.s:69     .text.do_code16:0000000000000028 .L5
     /tmp/ccRxlAvc.s:79     .text.do_code16:0000000000000032 .L6
     /tmp/ccRxlAvc.s:89     .text.do_code16:000000000000003c .L7
     /tmp/ccRxlAvc.s:312    .text.reset_keyboard:000000000000000a .L11
     /tmp/ccRxlAvc.s:492    .text.process_record_quantum:000000000000009c .L28
     /tmp/ccRxlAvc.s:480    .text.process_record_quantum:0000000000000092 .L29
     /tmp/ccRxlAvc.s:543    .text.process_record_quantum:00000000000000de .L42
     /tmp/ccRxlAvc.s:504    .text.process_record_quantum:00000000000000a6 .L35
     /tmp/ccRxlAvc.s:576    .text.process_record_quantum:0000000000000102 .L36
     /tmp/ccRxlAvc.s:534    .text.process_record_quantum:00000000000000d4 .L37
     /tmp/ccRxlAvc.s:561    .text.process_record_quantum:00000000000000ee .L38
     /tmp/ccRxlAvc.s:402    .text.process_record_quantum:0000000000000032 .L30
     /tmp/ccRxlAvc.s:408    .text.process_record_quantum:0000000000000036 .L86
     /tmp/ccRxlAvc.s:765    .text.process_record_quantum:00000000000001e6 .L40
     /tmp/ccRxlAvc.s:451    .text.process_record_quantum:0000000000000076 .L39
     /tmp/ccRxlAvc.s:820    .text.process_record_quantum:0000000000000234 .L70
     /tmp/ccRxlAvc.s:784    .text.process_record_quantum:0000000000000200 .L88
     /tmp/ccRxlAvc.s:460    .text.process_record_quantum:0000000000000080 .L43
     /tmp/ccRxlAvc.s:595    .text.process_record_quantum:0000000000000118 .L44
     /tmp/ccRxlAvc.s:643    .text.process_record_quantum:0000000000000146 .L87
     /tmp/ccRxlAvc.s:618    .jumptables.gcc.process_record_quantum:0000000000000000 .L47
     /tmp/ccRxlAvc.s:789    .text.process_record_quantum:0000000000000206 .L66
     /tmp/ccRxlAvc.s:812    .text.process_record_quantum:000000000000022c .L68
     /tmp/ccRxlAvc.s:843    .text.process_record_quantum:000000000000025a .L72
     /tmp/ccRxlAvc.s:815    .text.process_record_quantum:000000000000022e .L89
     /tmp/ccRxlAvc.s:638    .text.process_record_quantum:0000000000000140 .L64
     /tmp/ccRxlAvc.s:657    .text.process_record_quantum:0000000000000158 .L63
     /tmp/ccRxlAvc.s:663    .text.process_record_quantum:0000000000000160 .L62
     /tmp/ccRxlAvc.s:669    .text.process_record_quantum:0000000000000168 .L61
     /tmp/ccRxlAvc.s:675    .text.process_record_quantum:0000000000000170 .L60
     /tmp/ccRxlAvc.s:681    .text.process_record_quantum:0000000000000178 .L59
     /tmp/ccRxlAvc.s:687    .text.process_record_quantum:0000000000000180 .L58
     /tmp/ccRxlAvc.s:693    .text.process_record_quantum:0000000000000188 .L57
     /tmp/ccRxlAvc.s:700    .text.process_record_quantum:0000000000000190 .L56
     /tmp/ccRxlAvc.s:706    .text.process_record_quantum:0000000000000198 .L55
     /tmp/ccRxlAvc.s:712    .text.process_record_quantum:00000000000001a0 .L54
     /tmp/ccRxlAvc.s:718    .text.process_record_quantum:00000000000001a8 .L53
     /tmp/ccRxlAvc.s:724    .text.process_record_quantum:00000000000001b0 .L52
     /tmp/ccRxlAvc.s:730    .text.process_record_quantum:00000000000001b8 .L51
     /tmp/ccRxlAvc.s:736    .text.process_record_quantum:00000000000001c0 .L50
     /tmp/ccRxlAvc.s:742    .text.process_record_quantum:00000000000001c8 .L49
     /tmp/ccRxlAvc.s:748    .text.process_record_quantum:00000000000001d0 .L48
     /tmp/ccRxlAvc.s:755    .text.process_record_quantum:00000000000001d8 .L46
     /tmp/ccRxlAvc.s:985    .text.send_string:000000000000004e .L90
     /tmp/ccRxlAvc.s:975    .text.send_string:0000000000000044 .L92
     /tmp/ccRxlAvc.s:877    .text.send_string:0000000000000008 .L94
     /tmp/ccRxlAvc.s:961    .text.send_string:000000000000003a .L95
     /tmp/ccRxlAvc.s:1052   .text.update_tri_layer:0000000000000026 .L21
     /tmp/ccRxlAvc.s:1047   .text.update_tri_layer:000000000000001e .L12
     /tmp/ccRxlAvc.s:1065   .text.update_tri_layer:0000000000000038 .L22
     /tmp/ccRxlAvc.s:1060   .text.update_tri_layer:0000000000000030 .L13
     /tmp/ccRxlAvc.s:1098   .text.update_tri_layer:0000000000000076 .L97
     /tmp/ccRxlAvc.s:1180   .text.tap_random_base64:0000000000000042 .L99
     /tmp/ccRxlAvc.s:1224   .text.tap_random_base64:000000000000006e .L100
     /tmp/ccRxlAvc.s:1208   .text.tap_random_base64:000000000000005e .L101
     /tmp/ccRxlAvc.s:1195   .text.tap_random_base64:0000000000000052 .L102
     /tmp/ccRxlAvc.s:1216   .text.tap_random_base64:0000000000000066 .L107
     /tmp/ccRxlAvc.s:1231   .text.tap_random_base64:0000000000000072 .L103
     /tmp/ccRxlAvc.s:1243   .text.tap_random_base64:0000000000000082 .L104
     /tmp/ccRxlAvc.s:1199   .text.tap_random_base64:0000000000000054 .L109
     /tmp/ccRxlAvc.s:1172   .text.tap_random_base64:000000000000003a .L108
     /tmp/ccRxlAvc.s:1340   .text.send_nibble:0000000000000018 .L114
     /tmp/ccRxlAvc.s:1353   .text.send_nibble:0000000000000026 .L119
     /tmp/ccRxlAvc.s:1363   .text.send_nibble:000000000000002e .L121
     /tmp/ccRxlAvc.s:1329   .text.send_nibble:000000000000000e .L122
     /tmp/ccRxlAvc.s:4971   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccRxlAvc.s:7673   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccRxlAvc.s:7741   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccRxlAvc.s:1585   .text.led_set:0000000000000000 .LFB134
     /tmp/ccRxlAvc.s:1597   .text.led_set:0000000000000004 .LFE134
     /tmp/ccRxlAvc.s:6190   .debug_loc:0000000000000004 .LLST46
     /tmp/ccRxlAvc.s:6185   .debug_loc:0000000000000000 .LVUS46
     /tmp/ccRxlAvc.s:1594   .text.led_set:0000000000000004 .LVL145
     /tmp/ccRxlAvc.s:1549   .text.led_set_kb:0000000000000000 .LFB132
     /tmp/ccRxlAvc.s:1561   .text.led_set_kb:0000000000000004 .LFE132
     /tmp/ccRxlAvc.s:6209   .debug_loc:0000000000000029 .LLST45
     /tmp/ccRxlAvc.s:6204   .debug_loc:0000000000000025 .LVUS45
     /tmp/ccRxlAvc.s:1558   .text.led_set_kb:0000000000000004 .LVL143
     /tmp/ccRxlAvc.s:1514   .text.led_set_user:0000000000000000 .LFB131
     /tmp/ccRxlAvc.s:1525   .text.led_set_user:0000000000000002 .LFE131
     /tmp/ccRxlAvc.s:1496   .text.api_send_unicode:0000000000000000 .LFB130
     /tmp/ccRxlAvc.s:1507   .text.api_send_unicode:0000000000000002 .LFE130
     /tmp/ccRxlAvc.s:1309   .text.send_nibble:0000000000000000 .LFB129
     /tmp/ccRxlAvc.s:1371   .text.send_nibble:0000000000000034 .LFE129
     /tmp/ccRxlAvc.s:6223   .debug_loc:000000000000004a .LLST35
     /tmp/ccRxlAvc.s:6249   .debug_loc:0000000000000076 .LLST36
     /tmp/ccRxlAvc.s:6238   .debug_loc:000000000000006c .LVUS36
     /tmp/ccRxlAvc.s:1335   .text.send_nibble:0000000000000014 .LVL120
     /tmp/ccRxlAvc.s:1359   .text.send_nibble:000000000000002c .LVL123
     /tmp/ccRxlAvc.s:1369   .text.send_nibble:0000000000000034 .LVL125
     /tmp/ccRxlAvc.s:1378   .text.send_byte:0000000000000000 .LFB128
     /tmp/ccRxlAvc.s:1411   .text.send_byte:0000000000000016 .LFE128
     /tmp/ccRxlAvc.s:6278   .debug_loc:00000000000000bb .LLST37
     /tmp/ccRxlAvc.s:6300   .debug_loc:00000000000000e3 .LLST38
     /tmp/ccRxlAvc.s:6293   .debug_loc:00000000000000dd .LVUS38
     /tmp/ccRxlAvc.s:6325   .debug_loc:0000000000000115 .LLST39
     /tmp/ccRxlAvc.s:6318   .debug_loc:000000000000010f .LVUS39
     /tmp/ccRxlAvc.s:1399   .text.send_byte:000000000000000c .LVL129
     /tmp/ccRxlAvc.s:1409   .text.send_byte:0000000000000016 .LVL131
     /tmp/ccRxlAvc.s:1418   .text.send_word:0000000000000000 .LFB127
     /tmp/ccRxlAvc.s:1446   .text.send_word:0000000000000012 .LFE127
     /tmp/ccRxlAvc.s:6353   .debug_loc:000000000000014b .LLST40
     /tmp/ccRxlAvc.s:6373   .debug_loc:0000000000000171 .LLST41
     /tmp/ccRxlAvc.s:6368   .debug_loc:000000000000016d .LVUS41
     /tmp/ccRxlAvc.s:6395   .debug_loc:0000000000000199 .LLST42
     /tmp/ccRxlAvc.s:6392   .debug_loc:0000000000000197 .LVUS42
     /tmp/ccRxlAvc.s:1436   .text.send_word:000000000000000a .LVL134
     /tmp/ccRxlAvc.s:1444   .text.send_word:0000000000000012 .LVL135
     /tmp/ccRxlAvc.s:1453   .text.send_dword:0000000000000000 .LFB126
     /tmp/ccRxlAvc.s:1489   .text.send_dword:0000000000000018 .LFE126
     /tmp/ccRxlAvc.s:6402   .debug_loc:00000000000001ac .LLST43
     /tmp/ccRxlAvc.s:6428   .debug_loc:00000000000001df .LLST44
     /tmp/ccRxlAvc.s:6423   .debug_loc:00000000000001db .LVUS44
     /tmp/ccRxlAvc.s:1475   .text.send_dword:000000000000000c .LVL138
     /tmp/ccRxlAvc.s:1486   .text.send_dword:0000000000000018 .LVL139
     /tmp/ccRxlAvc.s:1275   .text.matrix_scan_quantum:0000000000000000 .LFB123
     /tmp/ccRxlAvc.s:1286   .text.matrix_scan_quantum:0000000000000004 .LFE123
     /tmp/ccRxlAvc.s:1284   .text.matrix_scan_quantum:0000000000000004 .LVL117
     /tmp/ccRxlAvc.s:1258   .text.matrix_init_quantum:0000000000000000 .LFB122
     /tmp/ccRxlAvc.s:1269   .text.matrix_init_quantum:0000000000000004 .LFE122
     /tmp/ccRxlAvc.s:1267   .text.matrix_init_quantum:0000000000000004 .LVL116
     /tmp/ccRxlAvc.s:1119   .text.tap_random_base64:0000000000000000 .LFB121
     /tmp/ccRxlAvc.s:1252   .text.tap_random_base64:000000000000008c .LFE121
     /tmp/ccRxlAvc.s:6453   .debug_loc:000000000000020b .LLST33
     /tmp/ccRxlAvc.s:6489   .debug_loc:0000000000000248 .LLST34
     /tmp/ccRxlAvc.s:6474   .debug_loc:000000000000023a .LVUS34
     /tmp/ccRxlAvc.s:1137   .text.tap_random_base64:0000000000000008 .LVL95
     /tmp/ccRxlAvc.s:1162   .text.tap_random_base64:0000000000000030 .LVL98
     /tmp/ccRxlAvc.s:1169   .text.tap_random_base64:0000000000000038 .LVL100
     /tmp/ccRxlAvc.s:1175   .text.tap_random_base64:000000000000003e .LVL101
     /tmp/ccRxlAvc.s:1203   .text.tap_random_base64:000000000000005a .LVL106
     /tmp/ccRxlAvc.s:1212   .text.tap_random_base64:0000000000000064 .LVL108
     /tmp/ccRxlAvc.s:1223   .text.tap_random_base64:000000000000006e .LVL110
     /tmp/ccRxlAvc.s:1235   .text.tap_random_base64:0000000000000078 .LVL113
     /tmp/ccRxlAvc.s:1239   .text.tap_random_base64:000000000000007e .LVL114
     /tmp/ccRxlAvc.s:1247   .text.tap_random_base64:0000000000000088 .LVL115
     /tmp/ccRxlAvc.s:1004   .text.update_tri_layer:0000000000000000 .LFB120
     /tmp/ccRxlAvc.s:1113   .text.update_tri_layer:0000000000000086 .LFE120
     /tmp/ccRxlAvc.s:6520   .debug_loc:000000000000029d .LLST29
     /tmp/ccRxlAvc.s:6576   .debug_loc:000000000000030a .LLST30
     /tmp/ccRxlAvc.s:6565   .debug_loc:0000000000000300 .LVUS30
     /tmp/ccRxlAvc.s:6614   .debug_loc:0000000000000357 .LLST31
     /tmp/ccRxlAvc.s:6605   .debug_loc:000000000000034f .LVUS31
     /tmp/ccRxlAvc.s:6650   .debug_loc:000000000000039b .LLST32
     /tmp/ccRxlAvc.s:6639   .debug_loc:0000000000000391 .LVUS32
     /tmp/ccRxlAvc.s:1097   .text.update_tri_layer:0000000000000076 .LVL93
     /tmp/ccRxlAvc.s:1110   .text.update_tri_layer:0000000000000086 .LVL94
     /tmp/ccRxlAvc.s:855    .text.send_string:0000000000000000 .LFB119
     /tmp/ccRxlAvc.s:997    .text.send_string:0000000000000056 .LFE119
     /tmp/ccRxlAvc.s:6679   .debug_loc:00000000000003e0 .LLST19
     /tmp/ccRxlAvc.s:6713   .debug_loc:0000000000000422 .LLST20
     /tmp/ccRxlAvc.s:6706   .debug_loc:000000000000041c .LVUS20
     /tmp/ccRxlAvc.s:6746   .debug_loc:000000000000045c .LLST21
     /tmp/ccRxlAvc.s:6743   .debug_loc:000000000000045a .LVUS21
     /tmp/ccRxlAvc.s:6758   .debug_loc:0000000000000473 .LLST22
     /tmp/ccRxlAvc.s:6753   .debug_loc:000000000000046f .LVUS22
     /tmp/ccRxlAvc.s:882    .text.send_string:0000000000000008 .LBB13
     /tmp/ccRxlAvc.s:896    .text.send_string:000000000000000c .LBE13
     /tmp/ccRxlAvc.s:6778   .debug_loc:0000000000000499 .LLST23
     /tmp/ccRxlAvc.s:6769   .debug_loc:0000000000000491 .LVUS23
     /tmp/ccRxlAvc.s:6819   .debug_loc:00000000000004e2 .LLST24
     /tmp/ccRxlAvc.s:6814   .debug_loc:00000000000004de .LVUS24
     /tmp/ccRxlAvc.s:902    .text.send_string:0000000000000010 .LBB14
     /tmp/ccRxlAvc.s:922    .text.send_string:000000000000001a .LBE14
     /tmp/ccRxlAvc.s:6841   .debug_loc:000000000000050a .LLST25
     /tmp/ccRxlAvc.s:6830   .debug_loc:0000000000000500 .LVUS25
     /tmp/ccRxlAvc.s:6901   .debug_loc:0000000000000582 .LLST26
     /tmp/ccRxlAvc.s:6898   .debug_loc:0000000000000580 .LVUS26
     /tmp/ccRxlAvc.s:924    .text.send_string:000000000000001a .LBB15
     /tmp/ccRxlAvc.s:943    .text.send_string:0000000000000022 .LBE15
     /tmp/ccRxlAvc.s:6917   .debug_loc:000000000000059d .LLST27
     /tmp/ccRxlAvc.s:6908   .debug_loc:0000000000000595 .LVUS27
     /tmp/ccRxlAvc.s:6961   .debug_loc:00000000000005ec .LLST28
     /tmp/ccRxlAvc.s:6956   .debug_loc:00000000000005e8 .LVUS28
     /tmp/ccRxlAvc.s:950    .text.send_string:000000000000002c .LVL81
     /tmp/ccRxlAvc.s:954    .text.send_string:0000000000000032 .LVL82
     /tmp/ccRxlAvc.s:958    .text.send_string:0000000000000038 .LVL83
     /tmp/ccRxlAvc.s:964    .text.send_string:000000000000003e .LVL84
     /tmp/ccRxlAvc.s:980    .text.send_string:000000000000004a .LVL87
     /tmp/ccRxlAvc.s:333    .text.process_record_quantum:0000000000000000 .LFB118
     /tmp/ccRxlAvc.s:848    .text.process_record_quantum:000000000000025e .LFE118
     /tmp/ccRxlAvc.s:6972   .debug_loc:000000000000060a .LLST14
     /tmp/ccRxlAvc.s:7032   .debug_loc:000000000000067b .LLST15
     /tmp/ccRxlAvc.s:7017   .debug_loc:000000000000066d .LVUS15
     /tmp/ccRxlAvc.s:7103   .debug_loc:00000000000006f7 .LLST16
     /tmp/ccRxlAvc.s:7094   .debug_loc:00000000000006ef .LVUS16
     /tmp/ccRxlAvc.s:7151   .debug_loc:0000000000000747 .LLST17
     /tmp/ccRxlAvc.s:7142   .debug_loc:000000000000073f .LVUS17
     /tmp/ccRxlAvc.s:7199   .debug_loc:0000000000000797 .LLST18
     /tmp/ccRxlAvc.s:7190   .debug_loc:000000000000078f .LVUS18
     /tmp/ccRxlAvc.s:392    .text.process_record_quantum:0000000000000028 .LVL34
     /tmp/ccRxlAvc.s:401    .text.process_record_quantum:0000000000000032 .LVL37
     /tmp/ccRxlAvc.s:486    .text.process_record_quantum:0000000000000098 .LVL47
     /tmp/ccRxlAvc.s:413    .text.process_record_quantum:000000000000003a .LVL39
     /tmp/ccRxlAvc.s:420    .text.process_record_quantum:0000000000000042 .LVL41
     /tmp/ccRxlAvc.s:429    .text.process_record_quantum:0000000000000050 .LVL42
     /tmp/ccRxlAvc.s:479    .text.process_record_quantum:0000000000000092 .LVL46
     /tmp/ccRxlAvc.s:499    .text.process_record_quantum:00000000000000a2 .LVL50
     /tmp/ccRxlAvc.s:527    .text.process_record_quantum:00000000000000c8 .LVL52
     /tmp/ccRxlAvc.s:542    .text.process_record_quantum:00000000000000de .LVL53
     /tmp/ccRxlAvc.s:588    .text.process_record_quantum:0000000000000110 .LVL58
     /tmp/ccRxlAvc.s:594    .text.process_record_quantum:0000000000000118 .LVL59
     /tmp/ccRxlAvc.s:599    .text.process_record_quantum:000000000000011c .LVL60
     /tmp/ccRxlAvc.s:650    .text.process_record_quantum:0000000000000152 .LVL61
     /tmp/ccRxlAvc.s:653    .text.process_record_quantum:0000000000000156 .LVL62
     /tmp/ccRxlAvc.s:778    .text.process_record_quantum:00000000000001f6 .LVL63
     /tmp/ccRxlAvc.s:787    .text.process_record_quantum:0000000000000204 .LVL64
     /tmp/ccRxlAvc.s:799    .text.process_record_quantum:000000000000021a .LVL65
     /tmp/ccRxlAvc.s:807    .text.process_record_quantum:0000000000000226 .LVL66
     /tmp/ccRxlAvc.s:811    .text.process_record_quantum:000000000000022c .LVL67
     /tmp/ccRxlAvc.s:818    .text.process_record_quantum:0000000000000232 .LVL68
     /tmp/ccRxlAvc.s:830    .text.process_record_quantum:0000000000000248 .LVL69
     /tmp/ccRxlAvc.s:838    .text.process_record_quantum:0000000000000254 .LVL70
     /tmp/ccRxlAvc.s:842    .text.process_record_quantum:000000000000025a .LVL71
     /tmp/ccRxlAvc.s:287    .text.reset_keyboard:0000000000000000 .LFB117
     /tmp/ccRxlAvc.s:326    .text.reset_keyboard:000000000000001a .LFE117
     /tmp/ccRxlAvc.s:299    .text.reset_keyboard:0000000000000004 .LBI8
     /tmp/ccRxlAvc.s:298    .text.reset_keyboard:0000000000000004 .LBB8
     /tmp/ccRxlAvc.s:321    .text.reset_keyboard:0000000000000016 .LBE8
     /tmp/ccRxlAvc.s:7221   .debug_loc:00000000000007cd .LLST11
     /tmp/ccRxlAvc.s:7218   .debug_loc:00000000000007cb .LVUS11
     /tmp/ccRxlAvc.s:7233   .debug_loc:00000000000007e7 .LLST12
     /tmp/ccRxlAvc.s:7230   .debug_loc:00000000000007e5 .LVUS12
     /tmp/ccRxlAvc.s:7245   .debug_loc:0000000000000801 .LLST13
     /tmp/ccRxlAvc.s:7242   .debug_loc:00000000000007ff .LVUS13
     /tmp/ccRxlAvc.s:296    .text.reset_keyboard:0000000000000004 .LVL27
     /tmp/ccRxlAvc.s:324    .text.reset_keyboard:000000000000001a .LVL29
     /tmp/ccRxlAvc.s:246    .text.process_record_user:0000000000000000 .LFB116
     /tmp/ccRxlAvc.s:261    .text.process_record_user:0000000000000004 .LFE116
     /tmp/ccRxlAvc.s:7259   .debug_loc:000000000000081d .LLST8
     /tmp/ccRxlAvc.s:7254   .debug_loc:0000000000000819 .LVUS8
     /tmp/ccRxlAvc.s:268    .text.process_record_kb:0000000000000000 .LFB115
     /tmp/ccRxlAvc.s:281    .text.process_record_kb:0000000000000004 .LFE115
     /tmp/ccRxlAvc.s:7283   .debug_loc:0000000000000847 .LLST9
     /tmp/ccRxlAvc.s:7278   .debug_loc:0000000000000843 .LVUS9
     /tmp/ccRxlAvc.s:7307   .debug_loc:0000000000000871 .LLST10
     /tmp/ccRxlAvc.s:7302   .debug_loc:000000000000086d .LVUS10
     /tmp/ccRxlAvc.s:278    .text.process_record_kb:0000000000000004 .LVL26
     /tmp/ccRxlAvc.s:224    .text.process_action_kb:0000000000000000 .LFB114
     /tmp/ccRxlAvc.s:239    .text.process_action_kb:0000000000000004 .LFE114
     /tmp/ccRxlAvc.s:7331   .debug_loc:000000000000089b .LLST7
     /tmp/ccRxlAvc.s:7326   .debug_loc:0000000000000897 .LVUS7
     /tmp/ccRxlAvc.s:183    .text.unregister_code16:0000000000000000 .LFB113
     /tmp/ccRxlAvc.s:217    .text.unregister_code16:0000000000000018 .LFE113
     /tmp/ccRxlAvc.s:7350   .debug_loc:00000000000008c1 .LLST5
     /tmp/ccRxlAvc.s:7380   .debug_loc:00000000000008f8 .LLST6
     /tmp/ccRxlAvc.s:7371   .debug_loc:00000000000008f0 .LVUS6
     /tmp/ccRxlAvc.s:202    .text.unregister_code16:000000000000000a .LVL18
     /tmp/ccRxlAvc.s:214    .text.unregister_code16:0000000000000018 .LVL20
     /tmp/ccRxlAvc.s:149    .text.register_code16:0000000000000000 .LFB112
     /tmp/ccRxlAvc.s:176    .text.register_code16:0000000000000014 .LFE112
     /tmp/ccRxlAvc.s:7417   .debug_loc:000000000000093e .LLST3
     /tmp/ccRxlAvc.s:7437   .debug_loc:0000000000000964 .LLST4
     /tmp/ccRxlAvc.s:7432   .debug_loc:0000000000000960 .LVUS4
     /tmp/ccRxlAvc.s:166    .text.register_code16:000000000000000c .LVL15
     /tmp/ccRxlAvc.s:174    .text.register_code16:0000000000000014 .LVL16
     /tmp/ccRxlAvc.s:16     .text.do_code16:0000000000000000 .LFB111
     /tmp/ccRxlAvc.s:142    .text.do_code16:000000000000006c .LFE111
     /tmp/ccRxlAvc.s:7456   .debug_loc:000000000000098a .LLST0
     /tmp/ccRxlAvc.s:7500   .debug_loc:00000000000009dd .LLST1
     /tmp/ccRxlAvc.s:7489   .debug_loc:00000000000009d3 .LVUS1
     /tmp/ccRxlAvc.s:7557   .debug_loc:0000000000000a3d .LLST2
     /tmp/ccRxlAvc.s:7544   .debug_loc:0000000000000a31 .LVUS2
     /tmp/ccRxlAvc.s:58     .text.do_code16:000000000000001e .LVL2
     /tmp/ccRxlAvc.s:68     .text.do_code16:0000000000000028 .LVL3
     /tmp/ccRxlAvc.s:78     .text.do_code16:0000000000000032 .LVL4
     /tmp/ccRxlAvc.s:88     .text.do_code16:000000000000003c .LVL5
     /tmp/ccRxlAvc.s:100    .text.do_code16:0000000000000048 .LVL6
     /tmp/ccRxlAvc.s:106    .text.do_code16:000000000000004e .LVL7
     /tmp/ccRxlAvc.s:112    .text.do_code16:0000000000000054 .LVL8
     /tmp/ccRxlAvc.s:128    .text.do_code16:0000000000000062 .LVL11
     /tmp/ccRxlAvc.s:1567   .text.led_init_ports:0000000000000000 .LFB133
     /tmp/ccRxlAvc.s:1578   .text.led_init_ports:0000000000000002 .LFE133
     /tmp/ccRxlAvc.s:1584   .text.led_set:0000000000000000 .LVL144
     /tmp/ccRxlAvc.s:1548   .text.led_set_kb:0000000000000000 .LVL142
     /tmp/ccRxlAvc.s:1314   .text.send_nibble:0000000000000002 .LCFI24
     /tmp/ccRxlAvc.s:1308   .text.send_nibble:0000000000000000 .LVL118
     /tmp/ccRxlAvc.s:1332   .text.send_nibble:0000000000000010 .LVL119
     /tmp/ccRxlAvc.s:1339   .text.send_nibble:0000000000000018 .LVL121
     /tmp/ccRxlAvc.s:1356   .text.send_nibble:0000000000000028 .LVL122
     /tmp/ccRxlAvc.s:1362   .text.send_nibble:000000000000002e .LVL124
     /tmp/ccRxlAvc.s:1383   .text.send_byte:0000000000000002 .LCFI25
     /tmp/ccRxlAvc.s:1377   .text.send_byte:0000000000000000 .LVL126
     /tmp/ccRxlAvc.s:1395   .text.send_byte:0000000000000006 .LVL128
     /tmp/ccRxlAvc.s:1406   .text.send_byte:0000000000000012 .LVL130
     /tmp/ccRxlAvc.s:1392   .text.send_byte:0000000000000004 .LVL127
     /tmp/ccRxlAvc.s:1423   .text.send_word:0000000000000002 .LCFI26
     /tmp/ccRxlAvc.s:1417   .text.send_word:0000000000000000 .LVL132
     /tmp/ccRxlAvc.s:1432   .text.send_word:0000000000000006 .LVL133
     /tmp/ccRxlAvc.s:1458   .text.send_dword:0000000000000002 .LCFI27
     /tmp/ccRxlAvc.s:1462   .text.send_dword:0000000000000004 .LCFI28
     /tmp/ccRxlAvc.s:1452   .text.send_dword:0000000000000000 .LVL136
     /tmp/ccRxlAvc.s:1123   .text.tap_random_base64:0000000000000002 .LCFI22
     /tmp/ccRxlAvc.s:1127   .text.tap_random_base64:0000000000000004 .LCFI23
     /tmp/ccRxlAvc.s:1143   .text.tap_random_base64:0000000000000012 .LVL96
     /tmp/ccRxlAvc.s:1146   .text.tap_random_base64:0000000000000014 .LVL97
     /tmp/ccRxlAvc.s:1165   .text.tap_random_base64:0000000000000032 .LVL99
     /tmp/ccRxlAvc.s:1179   .text.tap_random_base64:0000000000000042 .LVL102
     /tmp/ccRxlAvc.s:1191   .text.tap_random_base64:0000000000000050 .LVL103
     /tmp/ccRxlAvc.s:1194   .text.tap_random_base64:0000000000000052 .LVL104
     /tmp/ccRxlAvc.s:1198   .text.tap_random_base64:0000000000000054 .LVL105
     /tmp/ccRxlAvc.s:1207   .text.tap_random_base64:000000000000005e .LVL107
     /tmp/ccRxlAvc.s:1215   .text.tap_random_base64:0000000000000066 .LVL109
     /tmp/ccRxlAvc.s:1227   .text.tap_random_base64:0000000000000070 .LVL111
     /tmp/ccRxlAvc.s:1230   .text.tap_random_base64:0000000000000072 .LVL112
     /tmp/ccRxlAvc.s:1009   .text.update_tri_layer:0000000000000002 .LCFI16
     /tmp/ccRxlAvc.s:1013   .text.update_tri_layer:0000000000000004 .LCFI17
     /tmp/ccRxlAvc.s:1017   .text.update_tri_layer:0000000000000006 .LCFI18
     /tmp/ccRxlAvc.s:1021   .text.update_tri_layer:0000000000000008 .LCFI19
     /tmp/ccRxlAvc.s:1025   .text.update_tri_layer:000000000000000a .LCFI20
     /tmp/ccRxlAvc.s:1029   .text.update_tri_layer:000000000000000c .LCFI21
     /tmp/ccRxlAvc.s:1003   .text.update_tri_layer:0000000000000000 .LVL90
     /tmp/ccRxlAvc.s:1038   .text.update_tri_layer:0000000000000010 .LVL91
     /tmp/ccRxlAvc.s:1057   .text.update_tri_layer:000000000000002e .LVL92
     /tmp/ccRxlAvc.s:860    .text.send_string:0000000000000002 .LCFI13
     /tmp/ccRxlAvc.s:864    .text.send_string:0000000000000004 .LCFI14
     /tmp/ccRxlAvc.s:868    .text.send_string:0000000000000006 .LCFI15
     /tmp/ccRxlAvc.s:854    .text.send_string:0000000000000000 .LVL72
     /tmp/ccRxlAvc.s:876    .text.send_string:0000000000000008 .LVL73
     /tmp/ccRxlAvc.s:993    .text.send_string:0000000000000054 .LVL89
     /tmp/ccRxlAvc.s:918    .text.send_string:000000000000001a .LVL77
     /tmp/ccRxlAvc.s:984    .text.send_string:000000000000004e .LVL88
     /tmp/ccRxlAvc.s:892    .text.send_string:000000000000000c .LVL74
     /tmp/ccRxlAvc.s:930    .text.send_string:000000000000001e .LVL78
     /tmp/ccRxlAvc.s:968    .text.send_string:0000000000000042 .LVL85
     /tmp/ccRxlAvc.s:974    .text.send_string:0000000000000044 .LVL86
     /tmp/ccRxlAvc.s:905    .text.send_string:0000000000000012 .LVL75
     /tmp/ccRxlAvc.s:911    .text.send_string:0000000000000018 .LVL76
     /tmp/ccRxlAvc.s:933    .text.send_string:0000000000000020 .LVL79
     /tmp/ccRxlAvc.s:940    .text.send_string:0000000000000022 .LVL80
     /tmp/ccRxlAvc.s:338    .text.process_record_quantum:0000000000000002 .LCFI7
     /tmp/ccRxlAvc.s:342    .text.process_record_quantum:0000000000000004 .LCFI8
     /tmp/ccRxlAvc.s:346    .text.process_record_quantum:0000000000000006 .LCFI9
     /tmp/ccRxlAvc.s:350    .text.process_record_quantum:0000000000000008 .LCFI10
     /tmp/ccRxlAvc.s:354    .text.process_record_quantum:000000000000000a .LCFI11
     /tmp/ccRxlAvc.s:358    .text.process_record_quantum:000000000000000c .LCFI12
     /tmp/ccRxlAvc.s:332    .text.process_record_quantum:0000000000000000 .LVL30
     /tmp/ccRxlAvc.s:376    .text.process_record_quantum:0000000000000018 .LVL32
     /tmp/ccRxlAvc.s:472    .text.process_record_quantum:000000000000008a .LVL44
     /tmp/ccRxlAvc.s:553    .text.process_record_quantum:00000000000000e8 .LVL55
     /tmp/ccRxlAvc.s:560    .text.process_record_quantum:00000000000000ee .LVL57
     /tmp/ccRxlAvc.s:388    .text.process_record_quantum:0000000000000022 .LVL33
     /tmp/ccRxlAvc.s:476    .text.process_record_quantum:000000000000008e .LVL45
     /tmp/ccRxlAvc.s:491    .text.process_record_quantum:000000000000009c .LVL49
     /tmp/ccRxlAvc.s:557    .text.process_record_quantum:00000000000000ec .LVL56
     /tmp/ccRxlAvc.s:415    .text.process_record_quantum:000000000000003c .LVL40
     /tmp/ccRxlAvc.s:468    .text.process_record_quantum:0000000000000086 .LVL43
     /tmp/ccRxlAvc.s:503    .text.process_record_quantum:00000000000000a6 .LVL51
     /tmp/ccRxlAvc.s:549    .text.process_record_quantum:00000000000000e4 .LVL54
     /tmp/ccRxlAvc.s:394    .text.process_record_quantum:000000000000002a .LVL35
     /tmp/ccRxlAvc.s:398    .text.process_record_quantum:000000000000002e .LVL36
     /tmp/ccRxlAvc.s:407    .text.process_record_quantum:0000000000000036 .LVL38
     /tmp/ccRxlAvc.s:488    .text.process_record_quantum:000000000000009a .LVL48
     /tmp/ccRxlAvc.s:318    .text.reset_keyboard:0000000000000016 .LVL28
     /tmp/ccRxlAvc.s:245    .text.process_record_user:0000000000000000 .LVL23
     /tmp/ccRxlAvc.s:256    .text.process_record_user:0000000000000002 .LVL24
     /tmp/ccRxlAvc.s:267    .text.process_record_kb:0000000000000000 .LVL25
     /tmp/ccRxlAvc.s:223    .text.process_action_kb:0000000000000000 .LVL21
     /tmp/ccRxlAvc.s:234    .text.process_action_kb:0000000000000002 .LVL22
     /tmp/ccRxlAvc.s:188    .text.unregister_code16:0000000000000002 .LCFI5
     /tmp/ccRxlAvc.s:192    .text.unregister_code16:0000000000000004 .LCFI6
     /tmp/ccRxlAvc.s:182    .text.unregister_code16:0000000000000000 .LVL17
     /tmp/ccRxlAvc.s:211    .text.unregister_code16:0000000000000014 .LVL19
     /tmp/ccRxlAvc.s:154    .text.register_code16:0000000000000002 .LCFI4
     /tmp/ccRxlAvc.s:148    .text.register_code16:0000000000000000 .LVL14
     /tmp/ccRxlAvc.s:21     .text.do_code16:0000000000000002 .LCFI0
     /tmp/ccRxlAvc.s:25     .text.do_code16:0000000000000004 .LCFI1
     /tmp/ccRxlAvc.s:29     .text.do_code16:0000000000000006 .LCFI2
     /tmp/ccRxlAvc.s:33     .text.do_code16:0000000000000008 .LCFI3
     /tmp/ccRxlAvc.s:15     .text.do_code16:0000000000000000 .LVL0
     /tmp/ccRxlAvc.s:44     .text.do_code16:000000000000000e .LVL1
     /tmp/ccRxlAvc.s:125    .text.do_code16:0000000000000060 .LVL10
     /tmp/ccRxlAvc.s:138    .text.do_code16:000000000000006a .LVL13
     /tmp/ccRxlAvc.s:121    .text.do_code16:000000000000005c .LVL9
     /tmp/ccRxlAvc.s:134    .text.do_code16:0000000000000066 .LVL12
     /tmp/ccRxlAvc.s:1831   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccRxlAvc.s:1292   .text.backlight_init_ports:0000000000000000 .LFB142
     /tmp/ccRxlAvc.s:1302   .text.backlight_init_ports:0000000000000002 .LFE142
     /tmp/ccRxlAvc.s:1532   .text.backlight_set:0000000000000000 .LFB144
     /tmp/ccRxlAvc.s:1542   .text.backlight_set:0000000000000002 .LFE144
     /tmp/ccRxlAvc.s:1603   .text.startup_user:0000000000000000 .LFB138
     /tmp/ccRxlAvc.s:1613   .text.startup_user:0000000000000002 .LFE138
     /tmp/ccRxlAvc.s:1619   .text.shutdown_user:0000000000000000 .LFB140
     /tmp/ccRxlAvc.s:1629   .text.shutdown_user:0000000000000002 .LFE140
     /tmp/ccRxlAvc.s:380    .text.process_record_quantum:000000000000001c .LBB10
     /tmp/ccRxlAvc.s:410    .text.process_record_quantum:0000000000000036 .LBE10
     /tmp/ccRxlAvc.s:481    .text.process_record_quantum:0000000000000092 .LBB11
     /tmp/ccRxlAvc.s:494    .text.process_record_quantum:000000000000009c .LBE11
     /tmp/ccRxlAvc.s:879    .text.send_string:0000000000000008 .LBB12
     /tmp/ccRxlAvc.s:970    .text.send_string:0000000000000042 .LBE12
     /tmp/ccRxlAvc.s:976    .text.send_string:0000000000000044 .LBB16
     /tmp/ccRxlAvc.s:988    .text.send_string:000000000000004e .LBE16

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
process_leader
read_source_layers_cache
timer_read
debug_config
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
layer_state
layer_on
layer_off
rand
__divmodhi4
matrix_init_kb
matrix_scan_kb
__do_clear_bss
