   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.file 1 "./tmk_core/common/action.c"
  11               		.section	.text.action_exec,"ax",@progbits
  12               	.global	action_exec
  14               	action_exec:
  15               	.LFB107:
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  16               		.loc 1 38 1 view -0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  47               		.loc 1 39 5 view .LVU1
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  48               		.loc 1 41 58 view .LVU2
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  49               		.loc 1 50 5 view .LVU3
  50               		.loc 1 50 17 is_stmt 0 view .LVU4
  51 001e 1E82      		std Y+6,__zero_reg__
  52 0020 85E0      		ldi r24,lo8(5)
  53 0022 FE01      		movw r30,r28
  54 0024 3796      		adiw r30,7
  55 0026 DE01      		movw r26,r28
  56 0028 1196      		adiw r26,1
  57               		0:
  58 002a 0190      		ld r0,Z+
  59 002c 0D92      		st X+,r0
  60 002e 8A95      		dec r24
  61 0030 01F4      		brne 0b
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  62               		.loc 1 53 5 is_stmt 1 view .LVU5
  63 0032 4981      		ldd r20,Y+1
  64 0034 5A81      		ldd r21,Y+2
  65 0036 6B81      		ldd r22,Y+3
  66 0038 7C81      		ldd r23,Y+4
  67 003a 8D81      		ldd r24,Y+5
  68 003c 9E81      		ldd r25,Y+6
  69               	/* epilogue start */
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  70               		.loc 1 60 1 is_stmt 0 view .LVU6
  71 003e 2B96      		adiw r28,11
  72 0040 0FB6      		in __tmp_reg__,__SREG__
  73 0042 F894      		cli
  74 0044 DEBF      		out __SP_H__,r29
  75 0046 0FBE      		out __SREG__,__tmp_reg__
  76 0048 CDBF      		out __SP_L__,r28
  77 004a DF91      		pop r29
  78 004c CF91      		pop r28
  53:./tmk_core/common/action.c **** #else
  79               		.loc 1 53 5 view .LVU7
  80 004e 0C94 0000 		jmp action_tapping_process
  81               	.LVL0:
  82               		.cfi_endproc
  83               	.LFE107:
  85               		.section	.text.process_record_quantum,"ax",@progbits
  86               		.weak	process_record_quantum
  88               	process_record_quantum:
  89               	.LVL1:
  90               	.LFB109:
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  91               		.loc 1 99 50 is_stmt 1 view -0
  92               		.cfi_startproc
  93               	/* prologue: function */
  94               	/* frame size = 0 */
  95               	/* stack size = 0 */
  96               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
  97               		.loc 1 100 5 view .LVU9
 101:./tmk_core/common/action.c **** }
  98               		.loc 1 101 1 is_stmt 0 view .LVU10
  99 0000 81E0      		ldi r24,lo8(1)
 100               	.LVL2:
 101               	/* epilogue start */
 102               		.loc 1 101 1 view .LVU11
 103 0002 0895      		ret
 104               		.cfi_endproc
 105               	.LFE109:
 107               		.section	.text.register_code,"ax",@progbits
 108               	.global	register_code
 110               	register_code:
 111               	.LVL3:
 112               	.LFB112:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 113               		.loc 1 547 1 is_stmt 1 view -0
 114               		.cfi_startproc
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 0 */
 118               	.L__stack_usage = 0
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 119               		.loc 1 548 5 view .LVU13
 120               		.loc 1 548 8 is_stmt 0 view .LVU14
 121 0000 8823      		tst r24
 122 0002 01F4      		brne .+2
 123 0004 00C0      		rjmp .L3
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 124               		.loc 1 553 10 is_stmt 1 view .LVU15
 125               		.loc 1 553 13 is_stmt 0 view .LVU16
 126 0006 8238      		cpi r24,lo8(-126)
 127 0008 01F4      		brne .L6
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 128               		.loc 1 556 9 is_stmt 1 view .LVU17
 129               		.loc 1 556 13 is_stmt 0 view .LVU18
 130 000a 0E94 0000 		call host_keyboard_leds
 131               	.LVL4:
 132               		.loc 1 556 12 view .LVU19
 133 000e 81FD      		sbrc r24,1
 134 0010 00C0      		rjmp .L3
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 135               		.loc 1 558 9 is_stmt 1 view .LVU20
 136 0012 89E3      		ldi r24,lo8(57)
 137 0014 0E94 0000 		call add_key
 138               	.LVL5:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 139               		.loc 1 559 9 view .LVU21
 140 0018 0E94 0000 		call send_keyboard_report
 141               	.LVL6:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 142               		.loc 1 560 9 view .LVU22
 143 001c 89E3      		ldi r24,lo8(57)
 144               	.L16:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 145               		.loc 1 570 9 is_stmt 0 view .LVU23
 146 001e 0E94 0000 		call del_key
 147               	.LVL7:
 148               	.L17:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 149               		.loc 1 571 9 is_stmt 1 view .LVU24
 150 0022 0C94 0000 		jmp send_keyboard_report
 151               	.LVL8:
 152               	.L6:
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 153               		.loc 1 564 10 view .LVU25
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 154               		.loc 1 564 13 is_stmt 0 view .LVU26
 155 0026 8338      		cpi r24,lo8(-125)
 156 0028 01F4      		brne .L8
 566:./tmk_core/common/action.c **** #endif
 157               		.loc 1 566 9 is_stmt 1 view .LVU27
 566:./tmk_core/common/action.c **** #endif
 158               		.loc 1 566 13 is_stmt 0 view .LVU28
 159 002a 0E94 0000 		call host_keyboard_leds
 160               	.LVL9:
 566:./tmk_core/common/action.c **** #endif
 161               		.loc 1 566 12 view .LVU29
 162 002e 80FD      		sbrc r24,0
 163 0030 00C0      		rjmp .L3
 568:./tmk_core/common/action.c ****         send_keyboard_report();
 164               		.loc 1 568 9 is_stmt 1 view .LVU30
 165 0032 83E5      		ldi r24,lo8(83)
 166 0034 0E94 0000 		call add_key
 167               	.LVL10:
 569:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 168               		.loc 1 569 9 view .LVU31
 169 0038 0E94 0000 		call send_keyboard_report
 170               	.LVL11:
 570:./tmk_core/common/action.c ****         send_keyboard_report();
 171               		.loc 1 570 9 view .LVU32
 172 003c 83E5      		ldi r24,lo8(83)
 173 003e 00C0      		rjmp .L16
 174               	.LVL12:
 175               	.L8:
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 176               		.loc 1 574 10 view .LVU33
 177               		.loc 1 574 13 is_stmt 0 view .LVU34
 178 0040 8438      		cpi r24,lo8(-124)
 179 0042 01F4      		brne .L9
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 180               		.loc 1 576 9 is_stmt 1 view .LVU35
 181               		.loc 1 576 13 is_stmt 0 view .LVU36
 182 0044 0E94 0000 		call host_keyboard_leds
 183               	.LVL13:
 184               		.loc 1 576 12 view .LVU37
 185 0048 82FD      		sbrc r24,2
 186 004a 00C0      		rjmp .L3
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 187               		.loc 1 578 9 is_stmt 1 view .LVU38
 188 004c 87E4      		ldi r24,lo8(71)
 189 004e 0E94 0000 		call add_key
 190               	.LVL14:
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 191               		.loc 1 579 9 view .LVU39
 192 0052 0E94 0000 		call send_keyboard_report
 193               	.LVL15:
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 194               		.loc 1 580 9 view .LVU40
 195 0056 87E4      		ldi r24,lo8(71)
 196 0058 00C0      		rjmp .L16
 197               	.LVL16:
 198               	.L9:
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 199               		.loc 1 585 10 view .LVU41
 200               		.loc 1 585 13 is_stmt 0 view .LVU42
 201 005a 9CEF      		ldi r25,lo8(-4)
 202 005c 980F      		add r25,r24
 203 005e 913A      		cpi r25,lo8(-95)
 204 0060 00F4      		brsh .L10
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 205               		.loc 1 587 9 is_stmt 1 view .LVU43
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 206               		.loc 1 605 13 view .LVU44
 207 0062 0E94 0000 		call add_key
 208               	.LVL17:
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 209               		.loc 1 606 13 view .LVU45
 210 0066 00C0      		rjmp .L17
 211               	.LVL18:
 212               	.L10:
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 213               		.loc 1 609 10 view .LVU46
 214               		.loc 1 609 13 is_stmt 0 view .LVU47
 215 0068 90E2      		ldi r25,lo8(32)
 216 006a 980F      		add r25,r24
 217 006c 9830      		cpi r25,lo8(8)
 218 006e 00F4      		brsh .L11
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 219               		.loc 1 610 9 is_stmt 1 view .LVU48
 220               		.loc 1 610 18 is_stmt 0 view .LVU49
 221 0070 8770      		andi r24,lo8(7)
 222               	.LVL19:
 223               		.loc 1 610 9 view .LVU50
 224 0072 91E0      		ldi r25,lo8(1)
 225 0074 00C0      		rjmp 2f
 226               		1:
 227 0076 990F      		lsl r25
 228               		2:
 229 0078 8A95      		dec r24
 230 007a 02F4      		brpl 1b
 231 007c 892F      		mov r24,r25
 232 007e 0E94 0000 		call add_mods
 233               	.LVL20:
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 234               		.loc 1 611 9 is_stmt 1 view .LVU51
 235 0082 00C0      		rjmp .L17
 236               	.LVL21:
 237               	.L11:
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 238               		.loc 1 613 10 view .LVU52
 239               		.loc 1 613 13 is_stmt 0 view .LVU53
 240 0084 9BE5      		ldi r25,lo8(91)
 241 0086 980F      		add r25,r24
 242 0088 9330      		cpi r25,lo8(3)
 243 008a 00F4      		brsh .L12
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 244               		.loc 1 614 9 is_stmt 1 view .LVU54
 245 008c 853A      		cpi r24,lo8(-91)
 246 008e 01F0      		breq .L14
 247               		.loc 1 614 26 is_stmt 0 discriminator 1 view .LVU55
 248 0090 863A      		cpi r24,lo8(-90)
 249 0092 01F4      		brne .L15
 250               		.loc 1 614 26 view .LVU56
 251 0094 82E8      		ldi r24,lo8(-126)
 252 0096 90E0      		ldi r25,0
 253               	.LVL22:
 254               	.L13:
 255               		.loc 1 614 9 discriminator 12 view .LVU57
 256 0098 0C94 0000 		jmp host_system_send
 257               	.LVL23:
 258               	.L14:
 259               		.loc 1 614 9 view .LVU58
 260 009c 81E8      		ldi r24,lo8(-127)
 261 009e 90E0      		ldi r25,0
 262               	.LVL24:
 263               		.loc 1 614 9 view .LVU59
 264 00a0 00C0      		rjmp .L13
 265               	.LVL25:
 266               	.L15:
 267               		.loc 1 614 26 view .LVU60
 268 00a2 83E8      		ldi r24,lo8(-125)
 269 00a4 90E0      		ldi r25,0
 270               	.LVL26:
 271               		.loc 1 614 26 view .LVU61
 272 00a6 00C0      		rjmp .L13
 273               	.LVL27:
 274               	.L12:
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 275               		.loc 1 616 10 is_stmt 1 view .LVU62
 276               		.loc 1 616 13 is_stmt 0 view .LVU63
 277 00a8 885A      		subi r24,lo8(-(88))
 278               	.LVL28:
 279               		.loc 1 616 13 view .LVU64
 280 00aa 8531      		cpi r24,lo8(21)
 281 00ac 00F4      		brsh .L3
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 282               		.loc 1 617 9 is_stmt 1 view .LVU65
 283 00ae E82F      		mov r30,r24
 284 00b0 F0E0      		ldi r31,0
 285 00b2 EE0F      		lsl r30
 286 00b4 FF1F      		rol r31
 287               	.LVL29:
 288               		.loc 1 617 9 is_stmt 0 view .LVU66
 289 00b6 E050      		subi r30,lo8(-(CSWTCH.33))
 290 00b8 F040      		sbci r31,hi8(-(CSWTCH.33))
 291 00ba 8081      		ld r24,Z
 292 00bc 9181      		ldd r25,Z+1
 293 00be 0C94 0000 		jmp host_consumer_send
 294               	.LVL30:
 295               	.L3:
 296               	/* epilogue start */
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 297               		.loc 1 619 1 view .LVU67
 298 00c2 0895      		ret
 299               		.cfi_endproc
 300               	.LFE112:
 302               		.section	.text.unregister_code,"ax",@progbits
 303               	.global	unregister_code
 305               	unregister_code:
 306               	.LVL31:
 307               	.LFB113:
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 308               		.loc 1 622 1 is_stmt 1 view -0
 309               		.cfi_startproc
 310               	/* prologue: function */
 311               	/* frame size = 0 */
 312               	/* stack size = 0 */
 313               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 314               		.loc 1 623 5 view .LVU69
 315               		.loc 1 623 8 is_stmt 0 view .LVU70
 316 0000 8823      		tst r24
 317 0002 01F4      		brne .+2
 318 0004 00C0      		rjmp .L18
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 319               		.loc 1 628 10 is_stmt 1 view .LVU71
 320               		.loc 1 628 13 is_stmt 0 view .LVU72
 321 0006 8238      		cpi r24,lo8(-126)
 322 0008 01F4      		brne .L21
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 323               		.loc 1 631 9 is_stmt 1 view .LVU73
 324               		.loc 1 631 15 is_stmt 0 view .LVU74
 325 000a 0E94 0000 		call host_keyboard_leds
 326               	.LVL32:
 327               		.loc 1 631 12 view .LVU75
 328 000e 81FF      		sbrs r24,1
 329 0010 00C0      		rjmp .L18
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 330               		.loc 1 633 9 is_stmt 1 view .LVU76
 331 0012 89E3      		ldi r24,lo8(57)
 332 0014 0E94 0000 		call add_key
 333               	.LVL33:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 334               		.loc 1 634 9 view .LVU77
 335 0018 0E94 0000 		call send_keyboard_report
 336               	.LVL34:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 337               		.loc 1 635 9 view .LVU78
 338 001c 89E3      		ldi r24,lo8(57)
 339               	.L37:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 340               		.loc 1 645 9 is_stmt 0 view .LVU79
 341 001e 0E94 0000 		call del_key
 342               	.LVL35:
 343               	.L38:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 344               		.loc 1 646 9 is_stmt 1 view .LVU80
 345 0022 0C94 0000 		jmp send_keyboard_report
 346               	.LVL36:
 347               	.L21:
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 348               		.loc 1 639 10 view .LVU81
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 349               		.loc 1 639 13 is_stmt 0 view .LVU82
 350 0026 8338      		cpi r24,lo8(-125)
 351 0028 01F4      		brne .L23
 641:./tmk_core/common/action.c **** #endif
 352               		.loc 1 641 9 is_stmt 1 view .LVU83
 641:./tmk_core/common/action.c **** #endif
 353               		.loc 1 641 15 is_stmt 0 view .LVU84
 354 002a 0E94 0000 		call host_keyboard_leds
 355               	.LVL37:
 641:./tmk_core/common/action.c **** #endif
 356               		.loc 1 641 12 view .LVU85
 357 002e 80FF      		sbrs r24,0
 358 0030 00C0      		rjmp .L18
 643:./tmk_core/common/action.c ****         send_keyboard_report();
 359               		.loc 1 643 9 is_stmt 1 view .LVU86
 360 0032 83E5      		ldi r24,lo8(83)
 361 0034 0E94 0000 		call add_key
 362               	.LVL38:
 644:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 363               		.loc 1 644 9 view .LVU87
 364 0038 0E94 0000 		call send_keyboard_report
 365               	.LVL39:
 645:./tmk_core/common/action.c ****         send_keyboard_report();
 366               		.loc 1 645 9 view .LVU88
 367 003c 83E5      		ldi r24,lo8(83)
 368 003e 00C0      		rjmp .L37
 369               	.LVL40:
 370               	.L23:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 371               		.loc 1 649 10 view .LVU89
 372               		.loc 1 649 13 is_stmt 0 view .LVU90
 373 0040 8438      		cpi r24,lo8(-124)
 374 0042 01F4      		brne .L24
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 375               		.loc 1 651 9 is_stmt 1 view .LVU91
 376               		.loc 1 651 15 is_stmt 0 view .LVU92
 377 0044 0E94 0000 		call host_keyboard_leds
 378               	.LVL41:
 379               		.loc 1 651 12 view .LVU93
 380 0048 82FF      		sbrs r24,2
 381 004a 00C0      		rjmp .L18
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 382               		.loc 1 653 9 is_stmt 1 view .LVU94
 383 004c 87E4      		ldi r24,lo8(71)
 384 004e 0E94 0000 		call add_key
 385               	.LVL42:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 386               		.loc 1 654 9 view .LVU95
 387 0052 0E94 0000 		call send_keyboard_report
 388               	.LVL43:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 389               		.loc 1 655 9 view .LVU96
 390 0056 87E4      		ldi r24,lo8(71)
 391 0058 00C0      		rjmp .L37
 392               	.LVL44:
 393               	.L24:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 394               		.loc 1 660 10 view .LVU97
 395               		.loc 1 660 13 is_stmt 0 view .LVU98
 396 005a 9CEF      		ldi r25,lo8(-4)
 397 005c 980F      		add r25,r24
 398 005e 913A      		cpi r25,lo8(-95)
 399 0060 00F0      		brlo .L37
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 400               		.loc 1 664 10 is_stmt 1 view .LVU99
 401               		.loc 1 664 13 is_stmt 0 view .LVU100
 402 0062 90E2      		ldi r25,lo8(32)
 403 0064 980F      		add r25,r24
 404 0066 9830      		cpi r25,lo8(8)
 405 0068 00F4      		brsh .L26
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 406               		.loc 1 665 9 is_stmt 1 view .LVU101
 407               		.loc 1 665 18 is_stmt 0 view .LVU102
 408 006a 8770      		andi r24,lo8(7)
 409               	.LVL45:
 410               		.loc 1 665 9 view .LVU103
 411 006c 91E0      		ldi r25,lo8(1)
 412 006e 00C0      		rjmp 2f
 413               		1:
 414 0070 990F      		lsl r25
 415               		2:
 416 0072 8A95      		dec r24
 417 0074 02F4      		brpl 1b
 418 0076 892F      		mov r24,r25
 419 0078 0E94 0000 		call del_mods
 420               	.LVL46:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 421               		.loc 1 666 9 is_stmt 1 view .LVU104
 422 007c 00C0      		rjmp .L38
 423               	.LVL47:
 424               	.L26:
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 425               		.loc 1 668 10 view .LVU105
 426               		.loc 1 668 13 is_stmt 0 view .LVU106
 427 007e 9BE5      		ldi r25,lo8(91)
 428 0080 980F      		add r25,r24
 429 0082 9330      		cpi r25,lo8(3)
 430 0084 00F4      		brsh .L27
 669:./tmk_core/common/action.c ****         host_system_send(0);
 431               		.loc 1 669 9 is_stmt 1 view .LVU107
 432 0086 80E0      		ldi r24,0
 433 0088 90E0      		ldi r25,0
 434               	.LVL48:
 435               		.loc 1 669 9 is_stmt 0 view .LVU108
 436 008a 0C94 0000 		jmp host_system_send
 437               	.LVL49:
 438               	.L27:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 439               		.loc 1 671 10 is_stmt 1 view .LVU109
 440               		.loc 1 671 13 is_stmt 0 view .LVU110
 441 008e 885A      		subi r24,lo8(-(88))
 442               	.LVL50:
 443               		.loc 1 671 13 view .LVU111
 444 0090 8531      		cpi r24,lo8(21)
 445 0092 00F4      		brsh .L18
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 446               		.loc 1 672 9 is_stmt 1 view .LVU112
 447 0094 80E0      		ldi r24,0
 448 0096 90E0      		ldi r25,0
 449               	.LVL51:
 450               		.loc 1 672 9 is_stmt 0 view .LVU113
 451 0098 0C94 0000 		jmp host_consumer_send
 452               	.LVL52:
 453               	.L18:
 454               	/* epilogue start */
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 455               		.loc 1 674 1 view .LVU114
 456 009c 0895      		ret
 457               		.cfi_endproc
 458               	.LFE113:
 460               		.section	.text.register_mods,"ax",@progbits
 461               	.global	register_mods
 463               	register_mods:
 464               	.LVL53:
 465               	.LFB114:
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 466               		.loc 1 677 1 is_stmt 1 view -0
 467               		.cfi_startproc
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 0 */
 471               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 472               		.loc 1 678 5 view .LVU116
 473               		.loc 1 678 8 is_stmt 0 view .LVU117
 474 0000 8823      		tst r24
 475 0002 01F0      		breq .L39
 679:./tmk_core/common/action.c ****         add_mods(mods);
 476               		.loc 1 679 9 is_stmt 1 view .LVU118
 477 0004 0E94 0000 		call add_mods
 478               	.LVL54:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 479               		.loc 1 680 9 view .LVU119
 480 0008 0C94 0000 		jmp send_keyboard_report
 481               	.LVL55:
 482               	.L39:
 483               	/* epilogue start */
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 484               		.loc 1 682 1 is_stmt 0 view .LVU120
 485 000c 0895      		ret
 486               		.cfi_endproc
 487               	.LFE114:
 489               		.section	.text.unregister_mods,"ax",@progbits
 490               	.global	unregister_mods
 492               	unregister_mods:
 493               	.LVL56:
 494               	.LFB115:
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 495               		.loc 1 685 1 is_stmt 1 view -0
 496               		.cfi_startproc
 497               	/* prologue: function */
 498               	/* frame size = 0 */
 499               	/* stack size = 0 */
 500               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 501               		.loc 1 686 5 view .LVU122
 502               		.loc 1 686 8 is_stmt 0 view .LVU123
 503 0000 8823      		tst r24
 504 0002 01F0      		breq .L41
 687:./tmk_core/common/action.c ****         del_mods(mods);
 505               		.loc 1 687 9 is_stmt 1 view .LVU124
 506 0004 0E94 0000 		call del_mods
 507               	.LVL57:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 508               		.loc 1 688 9 view .LVU125
 509 0008 0C94 0000 		jmp send_keyboard_report
 510               	.LVL58:
 511               	.L41:
 512               	/* epilogue start */
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 513               		.loc 1 690 1 is_stmt 0 view .LVU126
 514 000c 0895      		ret
 515               		.cfi_endproc
 516               	.LFE115:
 518               		.section	.text.process_action,"ax",@progbits
 519               	.global	process_action
 521               	process_action:
 522               	.LVL59:
 523               	.LFB111:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 524               		.loc 1 122 1 is_stmt 1 view -0
 525               		.cfi_startproc
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 526               		.loc 1 122 1 is_stmt 0 view .LVU128
 527 0000 CF92      		push r12
 528               	.LCFI4:
 529               		.cfi_def_cfa_offset 3
 530               		.cfi_offset 12, -2
 531 0002 DF92      		push r13
 532               	.LCFI5:
 533               		.cfi_def_cfa_offset 4
 534               		.cfi_offset 13, -3
 535 0004 EF92      		push r14
 536               	.LCFI6:
 537               		.cfi_def_cfa_offset 5
 538               		.cfi_offset 14, -4
 539 0006 FF92      		push r15
 540               	.LCFI7:
 541               		.cfi_def_cfa_offset 6
 542               		.cfi_offset 15, -5
 543 0008 0F93      		push r16
 544               	.LCFI8:
 545               		.cfi_def_cfa_offset 7
 546               		.cfi_offset 16, -6
 547 000a 1F93      		push r17
 548               	.LCFI9:
 549               		.cfi_def_cfa_offset 8
 550               		.cfi_offset 17, -7
 551 000c CF93      		push r28
 552               	.LCFI10:
 553               		.cfi_def_cfa_offset 9
 554               		.cfi_offset 28, -8
 555 000e DF93      		push r29
 556               	.LCFI11:
 557               		.cfi_def_cfa_offset 10
 558               		.cfi_offset 29, -9
 559 0010 00D0      		rcall .
 560 0012 00D0      		rcall .
 561 0014 00D0      		rcall .
 562               	.LCFI12:
 563               		.cfi_def_cfa_offset 16
 564 0016 CDB7      		in r28,__SP_L__
 565 0018 DEB7      		in r29,__SP_H__
 566               	.LCFI13:
 567               		.cfi_def_cfa_register 28
 568               	/* prologue: function */
 569               	/* frame size = 6 */
 570               	/* stack size = 14 */
 571               	.L__stack_usage = 14
 572 001a 7C01      		movw r14,r24
 573 001c 6E83      		std Y+6,r22
 574 001e 7D83      		std Y+5,r23
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 575               		.loc 1 123 5 is_stmt 1 view .LVU129
 576               	.LVL60:
 124:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 577               		.loc 1 124 5 view .LVU130
 126:./tmk_core/common/action.c **** #endif
 578               		.loc 1 126 5 view .LVU131
 126:./tmk_core/common/action.c **** #endif
 579               		.loc 1 126 36 is_stmt 0 view .LVU132
 580 0020 FC01      		movw r30,r24
 581 0022 0581      		ldd r16,Z+5
 582 0024 0295      		swap r16
 583 0026 0F70      		andi r16,lo8(15)
 584               	.LVL61:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 585               		.loc 1 136 5 is_stmt 1 view .LVU133
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 586               		.loc 1 136 14 is_stmt 0 view .LVU134
 587 0028 1281      		ldd r17,Z+2
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 588               		.loc 1 136 8 view .LVU135
 589 002a 1111      		cpse r17,__zero_reg__
 590 002c 00C0      		rjmp .L44
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 591               		.loc 1 143 5 is_stmt 1 view .LVU136
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 592               		.loc 1 143 9 is_stmt 0 view .LVU137
 593 002e 0E94 0000 		call is_oneshot_layer_active
 594               	.LVL62:
 595               	.L46:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 596               		.loc 1 123 10 view .LVU138
 597 0032 D12C      		mov r13,__zero_reg__
 598               	.LVL63:
 599               	.L45:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 600               		.loc 1 149 5 is_stmt 1 view .LVU139
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 601               		.loc 1 149 24 is_stmt 0 view .LVU140
 602 0034 ED81      		ldd r30,Y+5
 603 0036 E295      		swap r30
 604 0038 EF70      		andi r30,lo8(15)
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 605               		.loc 1 149 5 view .LVU141
 606 003a F0E0      		ldi r31,0
 607 003c E050      		subi r30,lo8(-(gs(.L49)))
 608 003e F040      		sbci r31,hi8(-(gs(.L49)))
 609 0040 0C94 0000 		jmp __tablejump2__
 610               		.section	.jumptables.gcc.process_action,"a",@progbits
 611               		.p2align	1
 612               	.L49:
 613 0000 0000      		.word gs(.L56)
 614 0002 0000      		.word gs(.L56)
 615 0004 0000      		.word gs(.L55)
 616 0006 0000      		.word gs(.L55)
 617 0008 0000      		.word gs(.L54)
 618 000a 0000      		.word gs(.L53)
 619 000c 0000      		.word gs(.L47)
 620 000e 0000      		.word gs(.L47)
 621 0010 0000      		.word gs(.L52)
 622 0012 0000      		.word gs(.L47)
 623 0014 0000      		.word gs(.L51)
 624 0016 0000      		.word gs(.L51)
 625 0018 0000      		.word gs(.L50)
 626 001a 0000      		.word gs(.L47)
 627 001c 0000      		.word gs(.L47)
 628 001e 0000      		.word gs(.L48)
 629               		.section	.text.process_action
 630               	.LVL64:
 631               	.L44:
 138:./tmk_core/common/action.c ****     }
 632               		.loc 1 138 9 is_stmt 1 view .LVU142
 633 0044 0E94 0000 		call clear_weak_mods
 634               	.LVL65:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 635               		.loc 1 143 5 view .LVU143
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 636               		.loc 1 143 9 is_stmt 0 view .LVU144
 637 0048 0E94 0000 		call is_oneshot_layer_active
 638               	.LVL66:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 639               		.loc 1 143 8 view .LVU145
 640 004c 8823      		tst r24
 641 004e 01F0      		breq .L46
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 642               		.loc 1 143 55 discriminator 2 view .LVU146
 643 0050 8E81      		ldd r24,Y+6
 644 0052 805E      		subi r24,lo8(-(32))
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 645               		.loc 1 143 52 discriminator 2 view .LVU147
 646 0054 8830      		cpi r24,lo8(8)
 647 0056 00F0      		brlo .L46
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 648               		.loc 1 144 9 is_stmt 1 view .LVU148
 649 0058 82E0      		ldi r24,lo8(2)
 650 005a 0E94 0000 		call clear_oneshot_layer_state
 651               	.LVL67:
 145:./tmk_core/common/action.c ****     }
 652               		.loc 1 145 9 view .LVU149
 145:./tmk_core/common/action.c ****     }
 653               		.loc 1 145 31 is_stmt 0 view .LVU150
 654 005e 0E94 0000 		call is_oneshot_layer_active
 655               	.LVL68:
 145:./tmk_core/common/action.c ****     }
 656               		.loc 1 145 9 view .LVU151
 657 0062 91E0      		ldi r25,lo8(1)
 658 0064 D82E      		mov r13,r24
 659 0066 D926      		eor r13,r25
 660               	.LVL69:
 145:./tmk_core/common/action.c ****     }
 661               		.loc 1 145 9 view .LVU152
 662 0068 00C0      		rjmp .L45
 663               	.L56:
 664               	.LBB6:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 665               		.loc 1 154 17 is_stmt 1 view .LVU153
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 666               		.loc 1 154 75 is_stmt 0 view .LVU154
 667 006a 0D81      		ldd r16,Y+5
 668               	.LVL70:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 669               		.loc 1 154 75 view .LVU155
 670 006c 0F70      		andi r16,lo8(15)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 671               		.loc 1 154 25 view .LVU156
 672 006e FD81      		ldd r31,Y+5
 673 0070 F031      		cpi r31,lo8(16)
 674 0072 00F0      		brlo .L57
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 675               		.loc 1 154 25 discriminator 2 view .LVU157
 676 0074 0295      		swap r16
 677 0076 007F      		andi r16,lo8(-16)
 678               	.L57:
 679               	.LVL71:
 156:./tmk_core/common/action.c ****                     if (mods) {
 680               		.loc 1 156 17 is_stmt 1 discriminator 4 view .LVU158
 156:./tmk_core/common/action.c ****                     if (mods) {
 681               		.loc 1 156 20 is_stmt 0 discriminator 4 view .LVU159
 682 0078 1123      		tst r17
 683 007a 01F0      		breq .L58
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 684               		.loc 1 157 21 is_stmt 1 view .LVU160
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 685               		.loc 1 157 24 is_stmt 0 view .LVU161
 686 007c 0023      		tst r16
 687 007e 01F0      		breq .L142
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 688               		.loc 1 158 25 is_stmt 1 view .LVU162
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 689               		.loc 1 158 29 is_stmt 0 view .LVU163
 690 0080 8E81      		ldd r24,Y+6
 691 0082 805E      		subi r24,lo8(-(32))
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 692               		.loc 1 158 28 view .LVU164
 693 0084 8830      		cpi r24,lo8(8)
 694 0086 00F0      		brlo .L60
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 695               		.loc 1 158 53 discriminator 1 view .LVU165
 696 0088 2E81      		ldd r18,Y+6
 697 008a 2111      		cpse r18,__zero_reg__
 698 008c 00C0      		rjmp .L61
 699               	.L60:
 162:./tmk_core/common/action.c ****                         } else {
 700               		.loc 1 162 29 is_stmt 1 view .LVU166
 701 008e 802F      		mov r24,r16
 702 0090 0E94 0000 		call add_mods
 703               	.LVL72:
 704               	.L62:
 166:./tmk_core/common/action.c ****                     }
 705               		.loc 1 166 25 view .LVU167
 706 0094 0E94 0000 		call send_keyboard_report
 707               	.LVL73:
 168:./tmk_core/common/action.c ****                 } else {
 708               		.loc 1 168 21 view .LVU168
 709               	.L142:
 168:./tmk_core/common/action.c ****                 } else {
 710               		.loc 1 168 21 is_stmt 0 view .LVU169
 711               	.LBE6:
 419:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 712               		.loc 1 419 75 is_stmt 1 view .LVU170
 420:./tmk_core/common/action.c ****                         } else {
 713               		.loc 1 420 29 view .LVU171
 714 0098 8E81      		ldd r24,Y+6
 715 009a 0E94 0000 		call register_code
 716               	.LVL74:
 717 009e 00C0      		rjmp .L47
 718               	.LVL75:
 719               	.L61:
 720               	.LBB7:
 164:./tmk_core/common/action.c ****                         }
 721               		.loc 1 164 29 view .LVU172
 722 00a0 802F      		mov r24,r16
 723 00a2 0E94 0000 		call add_weak_mods
 724               	.LVL76:
 725 00a6 00C0      		rjmp .L62
 726               	.L58:
 170:./tmk_core/common/action.c ****                     if (mods) {
 727               		.loc 1 170 21 view .LVU173
 728 00a8 8E81      		ldd r24,Y+6
 729 00aa 0E94 0000 		call unregister_code
 730               	.LVL77:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 731               		.loc 1 171 21 view .LVU174
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 732               		.loc 1 171 24 is_stmt 0 view .LVU175
 733 00ae 0023      		tst r16
 734 00b0 01F0      		breq .L47
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 735               		.loc 1 172 25 is_stmt 1 view .LVU176
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 736               		.loc 1 172 29 is_stmt 0 view .LVU177
 737 00b2 8E81      		ldd r24,Y+6
 738 00b4 805E      		subi r24,lo8(-(32))
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 739               		.loc 1 172 28 view .LVU178
 740 00b6 8830      		cpi r24,lo8(8)
 741 00b8 00F0      		brlo .L64
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 742               		.loc 1 172 53 discriminator 1 view .LVU179
 743 00ba 3E81      		ldd r19,Y+6
 744 00bc 3111      		cpse r19,__zero_reg__
 745 00be 00C0      		rjmp .L65
 746               	.L64:
 173:./tmk_core/common/action.c ****                         } else {
 747               		.loc 1 173 29 is_stmt 1 view .LVU180
 748 00c0 802F      		mov r24,r16
 749 00c2 0E94 0000 		call del_mods
 750               	.LVL78:
 751               	.L66:
 177:./tmk_core/common/action.c ****                     }
 752               		.loc 1 177 25 view .LVU181
 753 00c6 0E94 0000 		call send_keyboard_report
 754               	.LVL79:
 755               	.L47:
 177:./tmk_core/common/action.c ****                     }
 756               		.loc 1 177 25 is_stmt 0 view .LVU182
 757               	.LBE7:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 758               		.loc 1 531 5 is_stmt 1 view .LVU183
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 759               		.loc 1 531 8 is_stmt 0 view .LVU184
 760 00ca DD20      		tst r13
 761 00cc 01F4      		brne .+2
 762 00ce 00C0      		rjmp .L43
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 763               		.loc 1 531 33 discriminator 1 view .LVU185
 764 00d0 0E94 0000 		call get_oneshot_layer_state
 765               	.LVL80:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 766               		.loc 1 531 28 discriminator 1 view .LVU186
 767 00d4 80FD      		sbrc r24,0
 768 00d6 00C0      		rjmp .L43
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 769               		.loc 1 532 9 is_stmt 1 view .LVU187
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 770               		.loc 1 532 31 is_stmt 0 view .LVU188
 771 00d8 F701      		movw r30,r14
 772 00da 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 773               		.loc 1 533 9 is_stmt 1 view .LVU189
 774 00dc 0E94 0000 		call get_oneshot_layer
 775               	.LVL81:
 776 00e0 0E94 0000 		call layer_on
 777               	.LVL82:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 778               		.loc 1 534 9 view .LVU190
 779 00e4 C701      		movw r24,r14
 780 00e6 0E94 0000 		call process_record
 781               	.LVL83:
 535:./tmk_core/common/action.c ****     }
 782               		.loc 1 535 9 view .LVU191
 783 00ea 0E94 0000 		call get_oneshot_layer
 784               	.LVL84:
 785               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 786               		.loc 1 538 1 is_stmt 0 view .LVU192
 787 00ee 0F90      		pop __tmp_reg__
 788 00f0 0F90      		pop __tmp_reg__
 789 00f2 0F90      		pop __tmp_reg__
 790 00f4 0F90      		pop __tmp_reg__
 791 00f6 0F90      		pop __tmp_reg__
 792 00f8 0F90      		pop __tmp_reg__
 793 00fa DF91      		pop r29
 794 00fc CF91      		pop r28
 795 00fe 1F91      		pop r17
 796               	.LVL85:
 538:./tmk_core/common/action.c **** 
 797               		.loc 1 538 1 view .LVU193
 798 0100 0F91      		pop r16
 799 0102 FF90      		pop r15
 800 0104 EF90      		pop r14
 801               	.LVL86:
 538:./tmk_core/common/action.c **** 
 802               		.loc 1 538 1 view .LVU194
 803 0106 DF90      		pop r13
 804               	.LVL87:
 538:./tmk_core/common/action.c **** 
 805               		.loc 1 538 1 view .LVU195
 806 0108 CF90      		pop r12
 535:./tmk_core/common/action.c ****     }
 807               		.loc 1 535 9 view .LVU196
 808 010a 0C94 0000 		jmp layer_off
 809               	.LVL88:
 810               	.L65:
 811               	.LBB8:
 175:./tmk_core/common/action.c ****                         }
 812               		.loc 1 175 29 is_stmt 1 view .LVU197
 813 010e 802F      		mov r24,r16
 814 0110 0E94 0000 		call del_weak_mods
 815               	.LVL89:
 816 0114 00C0      		rjmp .L66
 817               	.LVL90:
 818               	.L55:
 175:./tmk_core/common/action.c ****                         }
 819               		.loc 1 175 29 is_stmt 0 view .LVU198
 820               	.LBE8:
 821               	.LBB9:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 822               		.loc 1 186 17 is_stmt 1 view .LVU199
 823               	.LBE9:
 824               	.LBB10:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 825               		.loc 1 154 75 is_stmt 0 view .LVU200
 826 0116 4D81      		ldd r20,Y+5
 827 0118 4F70      		andi r20,lo8(15)
 828 011a C42E      		mov r12,r20
 829               	.LBE10:
 830               	.LBB11:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 831               		.loc 1 186 48 view .LVU201
 832 011c 5D81      		ldd r21,Y+5
 833 011e 507F      		andi r21,lo8(-16)
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 834               		.loc 1 186 25 view .LVU202
 835 0120 5032      		cpi r21,lo8(32)
 836 0122 01F0      		breq .L67
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 837               		.loc 1 186 25 discriminator 2 view .LVU203
 838 0124 C294      		swap r12
 839 0126 80EF      		ldi r24,lo8(-16)
 840 0128 C822      		and r12,r24
 841               	.L67:
 842               	.LVL91:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 843               		.loc 1 188 17 is_stmt 1 discriminator 4 view .LVU204
 844 012a 6E81      		ldd r22,Y+6
 845 012c 6623      		tst r22
 846 012e 01F0      		breq .L68
 847 0130 6130      		cpi r22,lo8(1)
 848 0132 01F0      		breq .L69
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 849               		.loc 1 243 25 view .LVU205
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 850               		.loc 1 243 28 is_stmt 0 view .LVU206
 851 0134 1123      		tst r17
 852 0136 01F0      		breq .L77
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 853               		.loc 1 244 29 is_stmt 1 view .LVU207
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 854               		.loc 1 244 32 is_stmt 0 view .LVU208
 855 0138 0023      		tst r16
 856 013a 01F0      		breq .L143
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 857               		.loc 1 246 33 is_stmt 1 view .LVU209
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 858               		.loc 1 246 37 is_stmt 0 view .LVU210
 859 013c F701      		movw r30,r14
 860 013e 8581      		ldd r24,Z+5
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 861               		.loc 1 246 36 view .LVU211
 862 0140 80FF      		sbrs r24,0
 863 0142 00C0      		rjmp .L142
 247:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 864               		.loc 1 247 80 is_stmt 1 view .LVU212
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 865               		.loc 1 249 37 view .LVU213
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 866               		.loc 1 249 55 is_stmt 0 view .LVU214
 867 0144 8F70      		andi r24,lo8(15)
 868 0146 8583      		std Z+5,r24
 869 0148 00C0      		rjmp .L143
 870               	.L68:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 871               		.loc 1 192 25 is_stmt 1 view .LVU215
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 872               		.loc 1 192 28 is_stmt 0 view .LVU216
 873 014a 1123      		tst r17
 874 014c 01F0      		breq .L71
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 875               		.loc 1 193 29 is_stmt 1 view .LVU217
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 876               		.loc 1 193 32 is_stmt 0 view .LVU218
 877 014e 0111      		cpse r16,__zero_reg__
 878 0150 00C0      		rjmp .L72
 879               	.L143:
 250:./tmk_core/common/action.c ****                                 } else
 880               		.loc 1 250 37 is_stmt 1 view .LVU219
 881 0152 8C2D      		mov r24,r12
 882               	.LVL92:
 883               	.L139:
 250:./tmk_core/common/action.c ****                                 } else
 884               		.loc 1 250 37 is_stmt 0 view .LVU220
 885 0154 0E94 0000 		call register_mods
 886               	.LVL93:
 887 0158 00C0      		rjmp .L47
 888               	.LVL94:
 889               	.L72:
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 890               		.loc 1 196 36 is_stmt 1 view .LVU221
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 891               		.loc 1 198 33 is_stmt 0 view .LVU222
 892 015a 8C2D      		mov r24,r12
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 893               		.loc 1 196 39 view .LVU223
 894 015c 0130      		cpi r16,lo8(1)
 895 015e 01F4      		brne .L139
 197:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 896               		.loc 1 197 69 is_stmt 1 view .LVU224
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 897               		.loc 1 198 33 view .LVU225
 898 0160 0E94 0000 		call set_oneshot_mods
 899               	.LVL95:
 900 0164 00C0      		rjmp .L47
 901               	.L71:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 902               		.loc 1 210 29 view .LVU226
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 903               		.loc 1 210 32 is_stmt 0 view .LVU227
 904 0166 0111      		cpse r16,__zero_reg__
 905 0168 00C0      		rjmp .L74
 906               	.L148:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 907               		.loc 1 225 33 is_stmt 1 view .LVU228
 908 016a 0E94 0000 		call clear_oneshot_mods
 909               	.LVL96:
 226:./tmk_core/common/action.c ****                             }
 910               		.loc 1 226 33 view .LVU229
 911               	.L80:
 266:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 912               		.loc 1 266 71 view .LVU230
 267:./tmk_core/common/action.c ****                             }
 913               		.loc 1 267 33 view .LVU231
 914 016e 8C2D      		mov r24,r12
 915               	.LVL97:
 916               	.L141:
 267:./tmk_core/common/action.c ****                             }
 917               		.loc 1 267 33 is_stmt 0 view .LVU232
 918               	.LBE11:
 350:./tmk_core/common/action.c ****                     }
 919               		.loc 1 350 25 view .LVU233
 920 0170 0E94 0000 		call unregister_mods
 921               	.LVL98:
 922 0174 00C0      		rjmp .L47
 923               	.LVL99:
 924               	.L74:
 925               	.LBB12:
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 926               		.loc 1 213 36 is_stmt 1 view .LVU234
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 927               		.loc 1 213 39 is_stmt 0 view .LVU235
 928 0176 0130      		cpi r16,lo8(1)
 929 0178 01F4      		brne .+2
 930 017a 00C0      		rjmp .L47
 931 017c 00C0      		rjmp .L148
 932               	.L69:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 933               		.loc 1 232 25 is_stmt 1 view .LVU236
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 934               		.loc 1 232 28 is_stmt 0 view .LVU237
 935 017e 1123      		tst r17
 936 0180 01F0      		breq .L76
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 937               		.loc 1 233 29 is_stmt 1 view .LVU238
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 938               		.loc 1 233 32 is_stmt 0 view .LVU239
 939 0182 0630      		cpi r16,lo8(6)
 940 0184 00F0      		brlo .+2
 941 0186 00C0      		rjmp .L47
 942 0188 00C0      		rjmp .L143
 943               	.L76:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 944               		.loc 1 237 29 is_stmt 1 view .LVU240
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 945               		.loc 1 237 32 is_stmt 0 view .LVU241
 946 018a 0530      		cpi r16,lo8(5)
 947 018c 00F0      		brlo .+2
 948 018e 00C0      		rjmp .L47
 949 0190 00C0      		rjmp .L80
 950               	.L77:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 951               		.loc 1 262 29 is_stmt 1 view .LVU242
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 952               		.loc 1 262 32 is_stmt 0 view .LVU243
 953 0192 0023      		tst r16
 954 0194 01F0      		breq .L80
 955               	.LVL100:
 956               	.L140:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 957               		.loc 1 262 32 view .LVU244
 958               	.LBE12:
 427:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 959               		.loc 1 427 77 is_stmt 1 view .LVU245
 428:./tmk_core/common/action.c ****                         } else {
 960               		.loc 1 428 29 view .LVU246
 961 0196 8E81      		ldd r24,Y+6
 962 0198 0E94 0000 		call unregister_code
 963               	.LVL101:
 964 019c 00C0      		rjmp .L47
 965               	.L54:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 966               		.loc 1 278 13 view .LVU247
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 967               		.loc 1 278 33 is_stmt 0 view .LVU248
 968 019e 8D81      		ldd r24,Y+5
 969 01a0 8695      		lsr r24
 970 01a2 8695      		lsr r24
 971 01a4 8370      		andi r24,lo8(3)
 972 01a6 8823      		tst r24
 973 01a8 01F0      		breq .L81
 974 01aa 8130      		cpi r24,lo8(1)
 975 01ac 01F0      		breq .+2
 976 01ae 00C0      		rjmp .L47
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 977               		.loc 1 287 21 is_stmt 1 view .LVU249
 288:./tmk_core/common/action.c ****                     } else {
 978               		.loc 1 288 25 is_stmt 0 view .LVU250
 979 01b0 8E81      		ldd r24,Y+6
 980 01b2 9D81      		ldd r25,Y+5
 981 01b4 9370      		andi r25,lo8(3)
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 982               		.loc 1 287 24 view .LVU251
 983 01b6 1111      		cpse r17,__zero_reg__
 984 01b8 00C0      		rjmp .L145
 290:./tmk_core/common/action.c ****                     }
 985               		.loc 1 290 25 is_stmt 1 view .LVU252
 986 01ba 80E0      		ldi r24,0
 987 01bc 90E0      		ldi r25,0
 988               	.L145:
 989 01be 0E94 0000 		call host_consumer_send
 990               	.LVL102:
 991 01c2 00C0      		rjmp .L47
 992               	.L81:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 993               		.loc 1 280 21 view .LVU253
 281:./tmk_core/common/action.c ****                     } else {
 994               		.loc 1 281 25 is_stmt 0 view .LVU254
 995 01c4 8E81      		ldd r24,Y+6
 996 01c6 9D81      		ldd r25,Y+5
 997 01c8 9370      		andi r25,lo8(3)
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 998               		.loc 1 280 24 view .LVU255
 999 01ca 1111      		cpse r17,__zero_reg__
 1000 01cc 00C0      		rjmp .L136
 283:./tmk_core/common/action.c ****                     }
 1001               		.loc 1 283 25 is_stmt 1 view .LVU256
 1002 01ce 80E0      		ldi r24,0
 1003 01d0 90E0      		ldi r25,0
 1004               	.L136:
 1005 01d2 0E94 0000 		call host_system_send
 1006               	.LVL103:
 1007 01d6 00C0      		rjmp .L47
 1008               	.L53:
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1009               		.loc 1 299 13 view .LVU257
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1010               		.loc 1 300 17 is_stmt 0 view .LVU258
 1011 01d8 8E81      		ldd r24,Y+6
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1012               		.loc 1 299 16 view .LVU259
 1013 01da 1123      		tst r17
 1014 01dc 01F0      		breq .L85
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1015               		.loc 1 300 17 is_stmt 1 view .LVU260
 1016 01de 0E94 0000 		call mousekey_on
 1017               	.LVL104:
 301:./tmk_core/common/action.c ****             } else {
 1018               		.loc 1 301 17 view .LVU261
 1019               	.L137:
 304:./tmk_core/common/action.c ****             }
 1020               		.loc 1 304 17 view .LVU262
 1021 01e2 0E94 0000 		call mousekey_send
 1022               	.LVL105:
 1023 01e6 00C0      		rjmp .L47
 1024               	.L85:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1025               		.loc 1 303 17 view .LVU263
 1026 01e8 0E94 0000 		call mousekey_off
 1027               	.LVL106:
 1028 01ec 00C0      		rjmp .L137
 1029               	.L52:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1030               		.loc 1 310 13 view .LVU264
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1031               		.loc 1 310 39 is_stmt 0 view .LVU265
 1032 01ee 8D81      		ldd r24,Y+5
 1033 01f0 8370      		andi r24,lo8(3)
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1034               		.loc 1 310 16 view .LVU266
 1035 01f2 8111      		cpse r24,__zero_reg__
 1036 01f4 00C0      		rjmp .L86
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1037               		.loc 1 312 17 is_stmt 1 view .LVU267
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1038               		.loc 1 312 20 is_stmt 0 view .LVU268
 1039 01f6 1111      		cpse r17,__zero_reg__
 1040 01f8 00C0      		rjmp .L47
 1041               	.LBB13:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1042               		.loc 1 313 21 is_stmt 1 view .LVU269
 1043               	.LVL107:
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1044               		.loc 1 314 21 view .LVU270
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1045               		.loc 1 313 55 is_stmt 0 view .LVU271
 1046 01fa 2E81      		ldd r18,Y+6
 1047 01fc 2295      		swap r18
 1048 01fe 2695      		lsr r18
 1049 0200 2770      		andi r18,lo8(7)
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1050               		.loc 1 313 29 view .LVU272
 1051 0202 220F      		lsl r18
 1052 0204 220F      		lsl r18
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1053               		.loc 1 314 66 view .LVU273
 1054 0206 8E81      		ldd r24,Y+6
 1055 0208 8F70      		andi r24,lo8(15)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1056               		.loc 1 314 38 view .LVU274
 1057 020a 90E0      		ldi r25,0
 1058 020c A0E0      		ldi r26,0
 1059 020e B0E0      		ldi r27,0
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1060               		.loc 1 314 30 view .LVU275
 1061 0210 AC01      		movw r20,r24
 1062 0212 BD01      		movw r22,r26
 1063 0214 022E      		mov r0,r18
 1064 0216 00C0      		rjmp 2f
 1065               		1:
 1066 0218 440F      		lsl r20
 1067 021a 551F      		rol r21
 1068 021c 661F      		rol r22
 1069 021e 771F      		rol r23
 1070               		2:
 1071 0220 0A94      		dec r0
 1072 0222 02F4      		brpl 1b
 1073 0224 4983      		std Y+1,r20
 1074 0226 5A83      		std Y+2,r21
 1075 0228 6B83      		std Y+3,r22
 1076 022a 7C83      		std Y+4,r23
 1077               	.LVL108:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1078               		.loc 1 315 21 is_stmt 1 view .LVU276
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1079               		.loc 1 315 91 is_stmt 0 view .LVU277
 1080 022c 5E81      		ldd r21,Y+6
 1081 022e 60E0      		ldi r22,0
 1082 0230 70E0      		ldi r23,0
 1083 0232 CB01      		movw r24,r22
 1084 0234 54FF      		sbrs r21,4
 1085 0236 00C0      		rjmp .L87
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1086               		.loc 1 315 82 discriminator 1 view .LVU278
 1087 0238 6FE0      		ldi r22,lo8(15)
 1088 023a 70E0      		ldi r23,0
 1089 023c 80E0      		ldi r24,0
 1090 023e 90E0      		ldi r25,0
 1091 0240 00C0      		rjmp 2f
 1092               		1:
 1093 0242 660F      		lsl r22
 1094 0244 771F      		rol r23
 1095 0246 881F      		rol r24
 1096 0248 991F      		rol r25
 1097               		2:
 1098 024a 2A95      		dec r18
 1099 024c 02F4      		brpl 1b
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1100               		.loc 1 315 91 discriminator 1 view .LVU279
 1101 024e 6095      		com r22
 1102 0250 7095      		com r23
 1103 0252 8095      		com r24
 1104 0254 9095      		com r25
 1105               	.L87:
 1106               	.LVL109:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1107               		.loc 1 316 21 is_stmt 1 discriminator 4 view .LVU280
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1108               		.loc 1 316 47 is_stmt 0 discriminator 4 view .LVU281
 1109 0256 ED81      		ldd r30,Y+5
 1110 0258 E695      		lsr r30
 1111 025a E695      		lsr r30
 1112 025c E370      		andi r30,lo8(3)
 1113 025e ED83      		std Y+5,r30
 1114               	.LVL110:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1115               		.loc 1 316 47 discriminator 4 view .LVU282
 1116 0260 E230      		cpi r30,lo8(2)
 1117 0262 01F0      		breq .L88
 1118 0264 E330      		cpi r30,lo8(3)
 1119 0266 01F0      		breq .L89
 1120 0268 2981      		ldd r18,Y+1
 1121 026a 3A81      		ldd r19,Y+2
 1122 026c 4B81      		ldd r20,Y+3
 1123 026e 5C81      		ldd r21,Y+4
 1124 0270 262B      		or r18,r22
 1125 0272 372B      		or r19,r23
 1126 0274 482B      		or r20,r24
 1127 0276 592B      		or r21,r25
 1128 0278 2983      		std Y+1,r18
 1129 027a 3A83      		std Y+2,r19
 1130 027c 4B83      		std Y+3,r20
 1131 027e 5C83      		std Y+4,r21
 1132 0280 E130      		cpi r30,lo8(1)
 1133 0282 01F0      		breq .L147
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1134               		.loc 1 317 42 is_stmt 1 view .LVU283
 1135 0284 CA01      		movw r24,r20
 1136 0286 B901      		movw r22,r18
 1137               	.LVL111:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1138               		.loc 1 317 42 is_stmt 0 view .LVU284
 1139 0288 0E94 0000 		call default_layer_and
 1140               	.LVL112:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1141               		.loc 1 317 74 is_stmt 1 view .LVU285
 1142 028c 00C0      		rjmp .L47
 1143               	.LVL113:
 1144               	.L88:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1145               		.loc 1 319 42 view .LVU286
 1146 028e 2981      		ldd r18,Y+1
 1147 0290 3A81      		ldd r19,Y+2
 1148 0292 4B81      		ldd r20,Y+3
 1149 0294 5C81      		ldd r21,Y+4
 1150 0296 262B      		or r18,r22
 1151 0298 372B      		or r19,r23
 1152 029a 482B      		or r20,r24
 1153 029c 592B      		or r21,r25
 1154 029e 2983      		std Y+1,r18
 1155 02a0 3A83      		std Y+2,r19
 1156 02a2 4B83      		std Y+3,r20
 1157 02a4 5C83      		std Y+4,r21
 1158 02a6 CA01      		movw r24,r20
 1159 02a8 B901      		movw r22,r18
 1160               	.LVL114:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1161               		.loc 1 319 42 is_stmt 0 view .LVU287
 1162 02aa 0E94 0000 		call default_layer_xor
 1163               	.LVL115:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1164               		.loc 1 319 74 is_stmt 1 view .LVU288
 1165 02ae 00C0      		rjmp .L47
 1166               	.LVL116:
 1167               	.L89:
 320:./tmk_core/common/action.c ****                     }
 1168               		.loc 1 320 42 view .LVU289
 1169 02b0 0E94 0000 		call default_layer_and
 1170               	.LVL117:
 1171               	.L147:
 320:./tmk_core/common/action.c ****                     }
 1172               		.loc 1 320 67 view .LVU290
 1173 02b4 6981      		ldd r22,Y+1
 1174 02b6 7A81      		ldd r23,Y+2
 1175 02b8 8B81      		ldd r24,Y+3
 1176 02ba 9C81      		ldd r25,Y+4
 1177 02bc 0E94 0000 		call default_layer_or
 1178               	.LVL118:
 320:./tmk_core/common/action.c ****                     }
 1179               		.loc 1 320 91 view .LVU291
 1180 02c0 00C0      		rjmp .L47
 1181               	.LVL119:
 1182               	.L86:
 320:./tmk_core/common/action.c ****                     }
 1183               		.loc 1 320 91 is_stmt 0 view .LVU292
 1184               	.LBE13:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1185               		.loc 1 325 17 is_stmt 1 view .LVU293
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1186               		.loc 1 325 21 is_stmt 0 view .LVU294
 1187 02c2 1123      		tst r17
 1188 02c4 01F4      		brne .+2
 1189 02c6 00C0      		rjmp .L91
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1190               		.loc 1 325 20 discriminator 1 view .LVU295
 1191 02c8 3D81      		ldd r19,Y+5
 1192 02ca 30FF      		sbrs r19,0
 1193 02cc 00C0      		rjmp .L47
 1194               	.L92:
 1195               	.LBB14:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1196               		.loc 1 327 21 is_stmt 1 view .LVU296
 1197               	.LVL120:
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1198               		.loc 1 328 21 view .LVU297
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1199               		.loc 1 327 55 is_stmt 0 view .LVU298
 1200 02ce 2E81      		ldd r18,Y+6
 1201 02d0 2295      		swap r18
 1202 02d2 2695      		lsr r18
 1203 02d4 2770      		andi r18,lo8(7)
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1204               		.loc 1 327 29 view .LVU299
 1205 02d6 220F      		lsl r18
 1206 02d8 220F      		lsl r18
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1207               		.loc 1 328 66 view .LVU300
 1208 02da 8E81      		ldd r24,Y+6
 1209 02dc 8F70      		andi r24,lo8(15)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1210               		.loc 1 328 38 view .LVU301
 1211 02de 90E0      		ldi r25,0
 1212 02e0 A0E0      		ldi r26,0
 1213 02e2 B0E0      		ldi r27,0
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1214               		.loc 1 328 30 view .LVU302
 1215 02e4 AC01      		movw r20,r24
 1216 02e6 BD01      		movw r22,r26
 1217 02e8 022E      		mov r0,r18
 1218 02ea 00C0      		rjmp 2f
 1219               		1:
 1220 02ec 440F      		lsl r20
 1221 02ee 551F      		rol r21
 1222 02f0 661F      		rol r22
 1223 02f2 771F      		rol r23
 1224               		2:
 1225 02f4 0A94      		dec r0
 1226 02f6 02F4      		brpl 1b
 1227 02f8 4983      		std Y+1,r20
 1228 02fa 5A83      		std Y+2,r21
 1229 02fc 6B83      		std Y+3,r22
 1230 02fe 7C83      		std Y+4,r23
 1231               	.LVL121:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1232               		.loc 1 329 21 is_stmt 1 view .LVU303
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1233               		.loc 1 329 91 is_stmt 0 view .LVU304
 1234 0300 5E81      		ldd r21,Y+6
 1235 0302 60E0      		ldi r22,0
 1236 0304 70E0      		ldi r23,0
 1237 0306 CB01      		movw r24,r22
 1238 0308 54FF      		sbrs r21,4
 1239 030a 00C0      		rjmp .L93
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1240               		.loc 1 329 82 discriminator 1 view .LVU305
 1241 030c 6FE0      		ldi r22,lo8(15)
 1242 030e 70E0      		ldi r23,0
 1243 0310 80E0      		ldi r24,0
 1244 0312 90E0      		ldi r25,0
 1245 0314 00C0      		rjmp 2f
 1246               		1:
 1247 0316 660F      		lsl r22
 1248 0318 771F      		rol r23
 1249 031a 881F      		rol r24
 1250 031c 991F      		rol r25
 1251               		2:
 1252 031e 2A95      		dec r18
 1253 0320 02F4      		brpl 1b
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1254               		.loc 1 329 91 discriminator 1 view .LVU306
 1255 0322 6095      		com r22
 1256 0324 7095      		com r23
 1257 0326 8095      		com r24
 1258 0328 9095      		com r25
 1259               	.L93:
 1260               	.LVL122:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1261               		.loc 1 330 21 is_stmt 1 discriminator 4 view .LVU307
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1262               		.loc 1 330 47 is_stmt 0 discriminator 4 view .LVU308
 1263 032a ED81      		ldd r30,Y+5
 1264 032c E695      		lsr r30
 1265 032e E695      		lsr r30
 1266 0330 E370      		andi r30,lo8(3)
 1267 0332 ED83      		std Y+5,r30
 1268               	.LVL123:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1269               		.loc 1 330 47 discriminator 4 view .LVU309
 1270 0334 E230      		cpi r30,lo8(2)
 1271 0336 01F0      		breq .L94
 1272 0338 E330      		cpi r30,lo8(3)
 1273 033a 01F0      		breq .L95
 1274 033c 2981      		ldd r18,Y+1
 1275 033e 3A81      		ldd r19,Y+2
 1276 0340 4B81      		ldd r20,Y+3
 1277 0342 5C81      		ldd r21,Y+4
 1278 0344 262B      		or r18,r22
 1279 0346 372B      		or r19,r23
 1280 0348 482B      		or r20,r24
 1281 034a 592B      		or r21,r25
 1282 034c 2983      		std Y+1,r18
 1283 034e 3A83      		std Y+2,r19
 1284 0350 4B83      		std Y+3,r20
 1285 0352 5C83      		std Y+4,r21
 1286 0354 E130      		cpi r30,lo8(1)
 1287 0356 01F0      		breq .L146
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1288               		.loc 1 331 42 is_stmt 1 view .LVU310
 1289 0358 CA01      		movw r24,r20
 1290 035a B901      		movw r22,r18
 1291               	.LVL124:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1292               		.loc 1 331 42 is_stmt 0 view .LVU311
 1293 035c 0E94 0000 		call layer_and
 1294               	.LVL125:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1295               		.loc 1 331 66 is_stmt 1 view .LVU312
 1296 0360 00C0      		rjmp .L47
 1297               	.LVL126:
 1298               	.L91:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1299               		.loc 1 331 66 is_stmt 0 view .LVU313
 1300               	.LBE14:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1301               		.loc 1 325 20 discriminator 2 view .LVU314
 1302 0362 8230      		cpi r24,lo8(2)
 1303 0364 00F4      		brsh .+2
 1304 0366 00C0      		rjmp .L47
 1305 0368 00C0      		rjmp .L92
 1306               	.LVL127:
 1307               	.L94:
 1308               	.LBB15:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1309               		.loc 1 333 42 is_stmt 1 view .LVU315
 1310 036a 2981      		ldd r18,Y+1
 1311 036c 3A81      		ldd r19,Y+2
 1312 036e 4B81      		ldd r20,Y+3
 1313 0370 5C81      		ldd r21,Y+4
 1314 0372 262B      		or r18,r22
 1315 0374 372B      		or r19,r23
 1316 0376 482B      		or r20,r24
 1317 0378 592B      		or r21,r25
 1318 037a 2983      		std Y+1,r18
 1319 037c 3A83      		std Y+2,r19
 1320 037e 4B83      		std Y+3,r20
 1321 0380 5C83      		std Y+4,r21
 1322 0382 CA01      		movw r24,r20
 1323 0384 B901      		movw r22,r18
 1324               	.LVL128:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1325               		.loc 1 333 42 is_stmt 0 view .LVU316
 1326 0386 0E94 0000 		call layer_xor
 1327               	.LVL129:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1328               		.loc 1 333 66 is_stmt 1 view .LVU317
 1329 038a 00C0      		rjmp .L47
 1330               	.LVL130:
 1331               	.L95:
 334:./tmk_core/common/action.c ****                     }
 1332               		.loc 1 334 42 view .LVU318
 1333 038c 0E94 0000 		call layer_and
 1334               	.LVL131:
 1335               	.L146:
 334:./tmk_core/common/action.c ****                     }
 1336               		.loc 1 334 59 view .LVU319
 1337 0390 6981      		ldd r22,Y+1
 1338 0392 7A81      		ldd r23,Y+2
 1339 0394 8B81      		ldd r24,Y+3
 1340 0396 9C81      		ldd r25,Y+4
 1341 0398 0E94 0000 		call layer_or
 1342               	.LVL132:
 334:./tmk_core/common/action.c ****                     }
 1343               		.loc 1 334 75 view .LVU320
 1344 039c 00C0      		rjmp .L47
 1345               	.LVL133:
 1346               	.L51:
 334:./tmk_core/common/action.c ****                     }
 1347               		.loc 1 334 75 is_stmt 0 view .LVU321
 1348               	.LBE15:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1349               		.loc 1 342 13 is_stmt 1 view .LVU322
 1350 039e 3E81      		ldd r19,Y+6
 1351 03a0 323F      		cpi r19,lo8(-14)
 1352 03a2 01F4      		brne .+2
 1353 03a4 00C0      		rjmp .L97
 1354 03a6 00F4      		brsh .L98
 1355 03a8 303F      		cpi r19,lo8(-16)
 1356 03aa 01F0      		breq .L99
 1357 03ac 313F      		cpi r19,lo8(-15)
 1358 03ae 01F0      		breq .L100
 1359 03b0 832F      		mov r24,r19
 1360 03b2 805E      		subi r24,lo8(-(32))
 1361 03b4 8031      		cpi r24,lo8(16)
 1362 03b6 00F0      		brlo .L133
 1363               	.L101:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1364               		.loc 1 417 21 view .LVU323
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1365               		.loc 1 417 24 is_stmt 0 view .LVU324
 1366 03b8 1123      		tst r17
 1367 03ba 01F4      		brne .+2
 1368 03bc 00C0      		rjmp .L112
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1369               		.loc 1 418 25 is_stmt 1 view .LVU325
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1370               		.loc 1 418 28 is_stmt 0 view .LVU326
 1371 03be 0111      		cpse r16,__zero_reg__
 1372 03c0 00C0      		rjmp .L142
 422:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1373               		.loc 1 422 76 is_stmt 1 view .LVU327
 423:./tmk_core/common/action.c ****                         }
 1374               		.loc 1 423 29 view .LVU328
 1375 03c2 8D81      		ldd r24,Y+5
 1376 03c4 8F71      		andi r24,lo8(31)
 1377 03c6 00C0      		rjmp .L138
 1378               	.L98:
 423:./tmk_core/common/action.c ****                         }
 1379               		.loc 1 423 29 is_stmt 0 view .LVU329
 1380 03c8 4E81      		ldd r20,Y+6
 1381 03ca 433F      		cpi r20,lo8(-13)
 1382 03cc 01F0      		breq .L103
 1383 03ce 443F      		cpi r20,lo8(-12)
 1384 03d0 01F4      		brne .L101
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1385               		.loc 1 403 21 is_stmt 1 view .LVU330
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1386               		.loc 1 403 24 is_stmt 0 view .LVU331
 1387 03d2 1123      		tst r17
 1388 03d4 01F0      		breq .L111
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1389               		.loc 1 404 25 is_stmt 1 view .LVU332
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1390               		.loc 1 404 50 is_stmt 0 view .LVU333
 1391 03d6 6D81      		ldd r22,Y+5
 1392 03d8 6F71      		andi r22,lo8(31)
 1393 03da 6983      		std Y+1,r22
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1394               		.loc 1 404 25 view .LVU334
 1395 03dc 862F      		mov r24,r22
 1396 03de 0E94 0000 		call layer_on
 1397               	.LVL134:
 405:./tmk_core/common/action.c ****                     } else {
 1398               		.loc 1 405 25 is_stmt 1 view .LVU335
 1399 03e2 63E0      		ldi r22,lo8(3)
 1400 03e4 8981      		ldd r24,Y+1
 1401 03e6 0E94 0000 		call set_oneshot_layer
 1402               	.LVL135:
 1403 03ea 00C0      		rjmp .L47
 1404               	.L133:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1405               		.loc 1 345 21 view .LVU336
 347:./tmk_core/common/action.c ****                     } else {
 1406               		.loc 1 347 25 is_stmt 0 view .LVU337
 1407 03ec 5E81      		ldd r21,Y+6
 1408 03ee 5F70      		andi r21,lo8(15)
 1409 03f0 5983      		std Y+1,r21
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1410               		.loc 1 346 50 view .LVU338
 1411 03f2 8D81      		ldd r24,Y+5
 1412 03f4 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1413               		.loc 1 345 24 view .LVU339
 1414 03f6 1123      		tst r17
 1415 03f8 01F0      		breq .L105
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1416               		.loc 1 346 25 is_stmt 1 view .LVU340
 1417 03fa 0E94 0000 		call layer_on
 1418               	.LVL136:
 347:./tmk_core/common/action.c ****                     } else {
 1419               		.loc 1 347 25 view .LVU341
 1420 03fe 8981      		ldd r24,Y+1
 1421 0400 00C0      		rjmp .L139
 1422               	.L105:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1423               		.loc 1 349 25 view .LVU342
 1424 0402 0E94 0000 		call layer_off
 1425               	.LVL137:
 350:./tmk_core/common/action.c ****                     }
 1426               		.loc 1 350 25 view .LVU343
 1427 0406 8981      		ldd r24,Y+1
 1428 0408 00C0      		rjmp .L141
 1429               	.L99:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1430               		.loc 1 355 21 view .LVU344
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1431               		.loc 1 355 24 is_stmt 0 view .LVU345
 1432 040a 1123      		tst r17
 1433 040c 01F0      		breq .L106
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1434               		.loc 1 356 25 is_stmt 1 view .LVU346
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1435               		.loc 1 356 28 is_stmt 0 view .LVU347
 1436 040e 0530      		cpi r16,lo8(5)
 1437               	.L135:
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1438               		.loc 1 356 28 view .LVU348
 1439 0410 00F0      		brlo .+2
 1440 0412 00C0      		rjmp .L47
 357:./tmk_core/common/action.c ****                         }
 1441               		.loc 1 357 29 is_stmt 1 view .LVU349
 1442 0414 8D81      		ldd r24,Y+5
 1443 0416 8F71      		andi r24,lo8(31)
 1444 0418 0E94 0000 		call layer_invert
 1445               	.LVL138:
 1446 041c 00C0      		rjmp .L47
 1447               	.L106:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1448               		.loc 1 360 25 view .LVU350
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1449               		.loc 1 360 28 is_stmt 0 view .LVU351
 1450 041e 0530      		cpi r16,lo8(5)
 1451 0420 00C0      		rjmp .L135
 1452               	.L100:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1453               		.loc 1 366 21 is_stmt 1 view .LVU352
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1454               		.loc 1 346 50 is_stmt 0 view .LVU353
 1455 0422 8D81      		ldd r24,Y+5
 1456 0424 8F71      		andi r24,lo8(31)
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1457               		.loc 1 366 68 view .LVU354
 1458 0426 1123      		tst r17
 1459 0428 01F0      		breq .L144
 1460               	.L138:
 423:./tmk_core/common/action.c ****                         }
 1461               		.loc 1 423 29 view .LVU355
 1462 042a 0E94 0000 		call layer_on
 1463               	.LVL139:
 1464 042e 00C0      		rjmp .L47
 1465               	.L97:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1466               		.loc 1 370 21 is_stmt 1 view .LVU356
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1467               		.loc 1 346 50 is_stmt 0 view .LVU357
 1468 0430 8D81      		ldd r24,Y+5
 1469 0432 8F71      		andi r24,lo8(31)
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1470               		.loc 1 370 69 view .LVU358
 1471 0434 1123      		tst r17
 1472 0436 01F0      		breq .L138
 1473               	.L144:
 431:./tmk_core/common/action.c ****                         }
 1474               		.loc 1 431 29 view .LVU359
 1475 0438 0E94 0000 		call layer_off
 1476               	.LVL140:
 1477 043c 00C0      		rjmp .L47
 1478               	.L103:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1479               		.loc 1 374 21 is_stmt 1 view .LVU360
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1480               		.loc 1 374 70 is_stmt 0 view .LVU361
 1481 043e 1123      		tst r17
 1482 0440 01F0      		breq .L110
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1483               		.loc 1 374 37 discriminator 1 view .LVU362
 1484 0442 8D81      		ldd r24,Y+5
 1485 0444 8F71      		andi r24,lo8(31)
 1486 0446 0E94 0000 		call layer_move
 1487               	.LVL141:
 1488 044a 00C0      		rjmp .L47
 1489               	.L110:
 375:./tmk_core/common/action.c ****                     break;
 1490               		.loc 1 375 37 view .LVU363
 1491 044c 0E94 0000 		call layer_clear
 1492               	.LVL142:
 1493 0450 00C0      		rjmp .L47
 1494               	.L111:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1495               		.loc 1 407 25 is_stmt 1 view .LVU364
 1496 0452 81E0      		ldi r24,lo8(1)
 1497 0454 0E94 0000 		call clear_oneshot_layer_state
 1498               	.LVL143:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1499               		.loc 1 408 25 view .LVU365
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1500               		.loc 1 408 28 is_stmt 0 view .LVU366
 1501 0458 0230      		cpi r16,lo8(2)
 1502 045a 00F4      		brsh .+2
 1503 045c 00C0      		rjmp .L47
 409:./tmk_core/common/action.c ****                         }
 1504               		.loc 1 409 29 is_stmt 1 view .LVU367
 1505 045e 82E0      		ldi r24,lo8(2)
 1506 0460 0E94 0000 		call clear_oneshot_layer_state
 1507               	.LVL144:
 1508 0464 00C0      		rjmp .L47
 1509               	.L112:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1510               		.loc 1 426 25 view .LVU368
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1511               		.loc 1 426 28 is_stmt 0 view .LVU369
 1512 0466 0111      		cpse r16,__zero_reg__
 1513 0468 00C0      		rjmp .L140
 430:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1514               		.loc 1 430 79 is_stmt 1 view .LVU370
 431:./tmk_core/common/action.c ****                         }
 1515               		.loc 1 431 29 view .LVU371
 1516 046a 8D81      		ldd r24,Y+5
 1517 046c 8F71      		andi r24,lo8(31)
 1518 046e 00C0      		rjmp .L144
 1519               	.L50:
 442:./tmk_core/common/action.c ****             break;
 1520               		.loc 1 442 13 view .LVU372
 442:./tmk_core/common/action.c ****             break;
 1521               		.loc 1 442 83 is_stmt 0 view .LVU373
 1522 0470 4D81      		ldd r20,Y+5
 1523 0472 4F70      		andi r20,lo8(15)
 442:./tmk_core/common/action.c ****             break;
 1524               		.loc 1 442 13 view .LVU374
 1525 0474 6E81      		ldd r22,Y+6
 1526 0476 C701      		movw r24,r14
 1527 0478 0E94 0000 		call action_get_macro
 1528               	.LVL145:
 1529 047c 0E94 0000 		call action_macro_play
 1530               	.LVL146:
 443:./tmk_core/common/action.c **** #endif
 1531               		.loc 1 443 13 is_stmt 1 view .LVU375
 1532 0480 00C0      		rjmp .L47
 1533               	.L48:
 520:./tmk_core/common/action.c ****             break;
 1534               		.loc 1 520 13 view .LVU376
 520:./tmk_core/common/action.c ****             break;
 1535               		.loc 1 520 64 is_stmt 0 view .LVU377
 1536 0482 4D81      		ldd r20,Y+5
 1537 0484 4F70      		andi r20,lo8(15)
 520:./tmk_core/common/action.c ****             break;
 1538               		.loc 1 520 13 view .LVU378
 1539 0486 6E81      		ldd r22,Y+6
 1540 0488 C701      		movw r24,r14
 1541 048a 0E94 0000 		call action_function
 1542               	.LVL147:
 521:./tmk_core/common/action.c **** #endif
 1543               		.loc 1 521 13 is_stmt 1 view .LVU379
 1544 048e 00C0      		rjmp .L47
 1545               	.LVL148:
 1546               	.L43:
 1547               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1548               		.loc 1 538 1 is_stmt 0 view .LVU380
 1549 0490 0F90      		pop __tmp_reg__
 1550 0492 0F90      		pop __tmp_reg__
 1551 0494 0F90      		pop __tmp_reg__
 1552 0496 0F90      		pop __tmp_reg__
 1553 0498 0F90      		pop __tmp_reg__
 1554 049a 0F90      		pop __tmp_reg__
 1555 049c DF91      		pop r29
 1556 049e CF91      		pop r28
 1557 04a0 1F91      		pop r17
 1558               	.LVL149:
 538:./tmk_core/common/action.c **** 
 1559               		.loc 1 538 1 view .LVU381
 1560 04a2 0F91      		pop r16
 1561 04a4 FF90      		pop r15
 1562 04a6 EF90      		pop r14
 1563               	.LVL150:
 538:./tmk_core/common/action.c **** 
 1564               		.loc 1 538 1 view .LVU382
 1565 04a8 DF90      		pop r13
 1566               	.LVL151:
 538:./tmk_core/common/action.c **** 
 1567               		.loc 1 538 1 view .LVU383
 1568 04aa CF90      		pop r12
 1569 04ac 0895      		ret
 1570               		.cfi_endproc
 1571               	.LFE111:
 1573               		.section	.text.process_record,"ax",@progbits
 1574               	.global	process_record
 1576               	process_record:
 1577               	.LVL152:
 1578               	.LFB110:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1579               		.loc 1 104 1 is_stmt 1 view -0
 1580               		.cfi_startproc
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1581               		.loc 1 104 1 is_stmt 0 view .LVU385
 1582 0000 0F93      		push r16
 1583               	.LCFI14:
 1584               		.cfi_def_cfa_offset 3
 1585               		.cfi_offset 16, -2
 1586 0002 1F93      		push r17
 1587               	.LCFI15:
 1588               		.cfi_def_cfa_offset 4
 1589               		.cfi_offset 17, -3
 1590 0004 CF93      		push r28
 1591               	.LCFI16:
 1592               		.cfi_def_cfa_offset 5
 1593               		.cfi_offset 28, -4
 1594 0006 DF93      		push r29
 1595               	.LCFI17:
 1596               		.cfi_def_cfa_offset 6
 1597               		.cfi_offset 29, -5
 1598               	/* prologue: function */
 1599               	/* frame size = 0 */
 1600               	/* stack size = 4 */
 1601               	.L__stack_usage = 4
 1602 0008 EC01      		movw r28,r24
 105:./tmk_core/common/action.c **** 
 1603               		.loc 1 105 5 is_stmt 1 view .LVU386
 1604 000a 9881      		ld r25,Y
 1605               	.LVL153:
 105:./tmk_core/common/action.c **** 
 1606               		.loc 1 105 5 is_stmt 0 view .LVU387
 1607 000c 8981      		ldd r24,Y+1
 1608               	.LVL154:
 1609               	.LBB16:
 1610               	.LBI16:
 1611               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1612               		.loc 2 49 20 is_stmt 1 view .LVU388
 1613               	.LBB17:
 1614               		.loc 2 49 51 view .LVU389
 1615               		.loc 2 49 74 is_stmt 0 view .LVU390
 1616 000e 2B81      		ldd r18,Y+3
 1617 0010 3C81      		ldd r19,Y+4
 1618 0012 232B      		or r18,r19
 1619 0014 01F0      		breq .L151
 1620 0016 8923      		and r24,r25
 1621               	.LVL155:
 1622               		.loc 2 49 74 view .LVU391
 1623 0018 8F3F      		cpi r24,lo8(-1)
 1624 001a 01F0      		breq .L151
 1625               	.LVL156:
 1626               		.loc 2 49 74 view .LVU392
 1627               	.LBE17:
 1628               	.LBE16:
 107:./tmk_core/common/action.c ****         return;
 1629               		.loc 1 107 5 is_stmt 1 view .LVU393
 107:./tmk_core/common/action.c ****         return;
 1630               		.loc 1 107 9 is_stmt 0 view .LVU394
 1631 001c CE01      		movw r24,r28
 1632 001e 0E94 0000 		call process_record_quantum
 1633               	.LVL157:
 107:./tmk_core/common/action.c ****         return;
 1634               		.loc 1 107 7 view .LVU395
 1635 0022 8823      		tst r24
 1636 0024 01F0      		breq .L151
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1637               		.loc 1 110 5 is_stmt 1 view .LVU396
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1638               		.loc 1 110 23 is_stmt 0 view .LVU397
 1639 0026 6881      		ld r22,Y
 1640 0028 7981      		ldd r23,Y+1
 1641 002a 8A81      		ldd r24,Y+2
 1642 002c 0E94 0000 		call store_or_get_action
 1643               	.LVL158:
 1644 0030 8C01      		movw r16,r24
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1645               		.loc 1 111 23 is_stmt 1 view .LVU398
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1646               		.loc 1 111 25 view .LVU399
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1647               		.loc 1 113 29 view .LVU400
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1648               		.loc 1 113 31 view .LVU401
 1649 0032 0E94 0000 		call layer_debug
 1650               	.LVL159:
 114:./tmk_core/common/action.c **** #endif
 1651               		.loc 1 114 37 view .LVU402
 114:./tmk_core/common/action.c **** #endif
 1652               		.loc 1 114 39 view .LVU403
 1653 0036 0E94 0000 		call default_layer_debug
 1654               	.LVL160:
 116:./tmk_core/common/action.c **** 
 1655               		.loc 1 116 15 view .LVU404
 118:./tmk_core/common/action.c **** }
 1656               		.loc 1 118 5 view .LVU405
 1657 003a B801      		movw r22,r16
 1658 003c CE01      		movw r24,r28
 1659               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1660               		.loc 1 119 1 is_stmt 0 view .LVU406
 1661 003e DF91      		pop r29
 1662 0040 CF91      		pop r28
 1663               	.LVL161:
 119:./tmk_core/common/action.c **** 
 1664               		.loc 1 119 1 view .LVU407
 1665 0042 1F91      		pop r17
 1666 0044 0F91      		pop r16
 118:./tmk_core/common/action.c **** }
 1667               		.loc 1 118 5 view .LVU408
 1668 0046 0C94 0000 		jmp process_action
 1669               	.LVL162:
 1670               	.L151:
 1671               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1672               		.loc 1 119 1 discriminator 1 view .LVU409
 1673 004a DF91      		pop r29
 1674 004c CF91      		pop r28
 1675               	.LVL163:
 119:./tmk_core/common/action.c **** 
 1676               		.loc 1 119 1 discriminator 1 view .LVU410
 1677 004e 1F91      		pop r17
 1678 0050 0F91      		pop r16
 1679 0052 0895      		ret
 1680               		.cfi_endproc
 1681               	.LFE110:
 1683               		.section	.text.process_record_nocache,"ax",@progbits
 1684               	.global	process_record_nocache
 1686               	process_record_nocache:
 1687               	.LVL164:
 1688               	.LFB108:
  86:./tmk_core/common/action.c ****     disable_action_cache = true;
 1689               		.loc 1 86 1 is_stmt 1 view -0
 1690               		.cfi_startproc
 1691               	/* prologue: function */
 1692               	/* frame size = 0 */
 1693               	/* stack size = 0 */
 1694               	.L__stack_usage = 0
  87:./tmk_core/common/action.c ****     process_record(record);
 1695               		.loc 1 87 5 view .LVU412
  87:./tmk_core/common/action.c ****     process_record(record);
 1696               		.loc 1 87 26 is_stmt 0 view .LVU413
 1697 0000 21E0      		ldi r18,lo8(1)
 1698 0002 2093 0000 		sts disable_action_cache,r18
  88:./tmk_core/common/action.c ****     disable_action_cache = false;
 1699               		.loc 1 88 5 is_stmt 1 view .LVU414
 1700 0006 0E94 0000 		call process_record
 1701               	.LVL165:
  89:./tmk_core/common/action.c **** }
 1702               		.loc 1 89 5 view .LVU415
  89:./tmk_core/common/action.c **** }
 1703               		.loc 1 89 26 is_stmt 0 view .LVU416
 1704 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1705               	/* epilogue start */
  90:./tmk_core/common/action.c **** #else
 1706               		.loc 1 90 1 view .LVU417
 1707 000e 0895      		ret
 1708               		.cfi_endproc
 1709               	.LFE108:
 1711               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1712               	.global	clear_keyboard_but_mods
 1714               	clear_keyboard_but_mods:
 1715               	.LFB117:
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1716               		.loc 1 699 1 is_stmt 1 view -0
 1717               		.cfi_startproc
 1718               	/* prologue: function */
 1719               	/* frame size = 0 */
 1720               	/* stack size = 0 */
 1721               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1722               		.loc 1 700 5 view .LVU419
 1723 0000 0E94 0000 		call clear_weak_mods
 1724               	.LVL166:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1725               		.loc 1 701 5 view .LVU420
 1726 0004 0E94 0000 		call clear_macro_mods
 1727               	.LVL167:
 702:./tmk_core/common/action.c ****     clear_keys();
 1728               		.loc 1 702 5 view .LVU421
 1729 0008 0E94 0000 		call clear_keys
 1730               	.LVL168:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1731               		.loc 1 703 5 view .LVU422
 1732 000c 0E94 0000 		call send_keyboard_report
 1733               	.LVL169:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 1734               		.loc 1 705 5 view .LVU423
 1735 0010 0E94 0000 		call mousekey_clear
 1736               	.LVL170:
 706:./tmk_core/common/action.c ****     mousekey_send();
 1737               		.loc 1 706 5 view .LVU424
 1738 0014 0E94 0000 		call mousekey_send
 1739               	.LVL171:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 1740               		.loc 1 709 5 view .LVU425
 1741 0018 80E0      		ldi r24,0
 1742 001a 90E0      		ldi r25,0
 1743 001c 0E94 0000 		call host_system_send
 1744               	.LVL172:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 1745               		.loc 1 710 5 view .LVU426
 1746 0020 80E0      		ldi r24,0
 1747 0022 90E0      		ldi r25,0
 1748 0024 0C94 0000 		jmp host_consumer_send
 1749               	.LVL173:
 1750               		.cfi_endproc
 1751               	.LFE117:
 1753               		.section	.text.clear_keyboard,"ax",@progbits
 1754               	.global	clear_keyboard
 1756               	clear_keyboard:
 1757               	.LFB116:
 693:./tmk_core/common/action.c ****     clear_mods();
 1758               		.loc 1 693 1 view -0
 1759               		.cfi_startproc
 1760               	/* prologue: function */
 1761               	/* frame size = 0 */
 1762               	/* stack size = 0 */
 1763               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1764               		.loc 1 694 5 view .LVU428
 1765 0000 0E94 0000 		call clear_mods
 1766               	.LVL174:
 695:./tmk_core/common/action.c **** }
 1767               		.loc 1 695 5 view .LVU429
 1768 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1769               	.LVL175:
 1770               		.cfi_endproc
 1771               	.LFE116:
 1773               		.section	.text.is_tap_key,"ax",@progbits
 1774               	.global	is_tap_key
 1776               	is_tap_key:
 1777               	.LVL176:
 1778               	.LFB118:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 1779               		.loc 1 715 1 view -0
 1780               		.cfi_startproc
 1781               	/* prologue: function */
 1782               	/* frame size = 0 */
 1783               	/* stack size = 0 */
 1784               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1785               		.loc 1 716 5 view .LVU431
 1786               		.loc 1 716 23 is_stmt 0 view .LVU432
 1787 0000 0E94 0000 		call layer_switch_get_action
 1788               	.LVL177:
 1789               		.loc 1 716 23 view .LVU433
 1790 0004 282F      		mov r18,r24
 1791               	.LVL178:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1792               		.loc 1 718 5 is_stmt 1 view .LVU434
 1793               		.loc 1 718 24 is_stmt 0 view .LVU435
 1794 0006 892F      		mov r24,r25
 1795 0008 8295      		swap r24
 1796 000a 8F70      		andi r24,lo8(15)
 1797               		.loc 1 718 5 view .LVU436
 1798 000c 903C      		cpi r25,lo8(-64)
 1799 000e 00F4      		brsh .L165
 1800 0010 8A30      		cpi r24,lo8(10)
 1801 0012 00F4      		brsh .L166
 1802 0014 8430      		cpi r24,lo8(4)
 1803 0016 00F4      		brsh .L167
 1804 0018 8230      		cpi r24,lo8(2)
 1805 001a 00F4      		brsh .L166
 1806               	.L192:
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1807               		.loc 1 739 16 view .LVU437
 1808 001c 80E0      		ldi r24,0
 1809 001e 0895      		ret
 1810               	.L167:
 718:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 1811               		.loc 1 718 5 view .LVU438
 1812 0020 8630      		cpi r24,lo8(6)
 1813 0022 01F4      		brne .L192
 731:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 1814               		.loc 1 731 13 is_stmt 1 view .LVU439
 727:./tmk_core/common/action.c ****             }
 1815               		.loc 1 727 28 is_stmt 0 view .LVU440
 1816 0024 81E0      		ldi r24,lo8(1)
 1817 0026 203E      		cpi r18,lo8(-32)
 1818 0028 00F0      		brlo .L168
 1819 002a 213F      		cpi r18,lo8(-15)
 1820 002c 00C0      		rjmp .L194
 1821               	.LVL179:
 1822               	.L165:
 718:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 1823               		.loc 1 718 5 view .LVU441
 1824 002e 8C30      		cpi r24,lo8(12)
 1825 0030 01F0      		breq .L170
 1826 0032 8F30      		cpi r24,lo8(15)
 1827 0034 01F4      		brne .L192
 1828               	.L170:
 1829               		.loc 1 739 13 is_stmt 1 view .LVU442
 1830               		.loc 1 739 28 is_stmt 0 view .LVU443
 1831 0036 9F70      		andi r25,lo8(15)
 1832               	.LVL180:
 1833               		.loc 1 739 16 view .LVU444
 1834 0038 81E0      		ldi r24,lo8(1)
 1835 003a 9830      		cpi r25,lo8(8)
 1836 003c 00F4      		brsh .L168
 1837 003e 00C0      		rjmp .L192
 1838               	.LVL181:
 1839               	.L166:
 723:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 1840               		.loc 1 723 13 is_stmt 1 view .LVU445
 1841 0040 81E0      		ldi r24,lo8(1)
 1842 0042 203F      		cpi r18,lo8(-16)
 1843 0044 01F0      		breq .L176
 1844 0046 00F4      		brsh .L171
 1845 0048 203E      		cpi r18,lo8(-32)
 1846 004a 00F4      		brsh .L192
 1847               	.LVL182:
 1848               	.L168:
 1849               	/* epilogue start */
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 743:./tmk_core/common/action.c **** }
 1850               		.loc 1 743 1 is_stmt 0 view .LVU446
 1851 004c 0895      		ret
 1852               	.LVL183:
 1853               	.L171:
 1854               		.loc 1 743 1 view .LVU447
 1855 004e 243F      		cpi r18,lo8(-12)
 1856               	.L194:
 1857               		.loc 1 743 1 view .LVU448
 1858 0050 01F4      		brne .L192
 1859 0052 00C0      		rjmp .L168
 1860               	.L176:
 1861               		.loc 1 743 1 view .LVU449
 1862 0054 0895      		ret
 1863               		.cfi_endproc
 1864               	.LFE118:
 1866               		.section	.text.debug_event,"ax",@progbits
 1867               	.global	debug_event
 1869               	debug_event:
 1870               	.LFB119:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 1871               		.loc 1 750 1 is_stmt 1 view -0
 1872               		.cfi_startproc
 1873 0000 CF93      		push r28
 1874               	.LCFI18:
 1875               		.cfi_def_cfa_offset 3
 1876               		.cfi_offset 28, -2
 1877 0002 DF93      		push r29
 1878               	.LCFI19:
 1879               		.cfi_def_cfa_offset 4
 1880               		.cfi_offset 29, -3
 1881 0004 00D0      		rcall .
 1882 0006 00D0      		rcall .
 1883 0008 0F92      		push __tmp_reg__
 1884               	.LCFI20:
 1885               		.cfi_def_cfa_offset 9
 1886 000a CDB7      		in r28,__SP_L__
 1887 000c DEB7      		in r29,__SP_H__
 1888               	.LCFI21:
 1889               		.cfi_def_cfa_register 28
 1890               	/* prologue: function */
 1891               	/* frame size = 5 */
 1892               	/* stack size = 7 */
 1893               	.L__stack_usage = 7
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 1894               		.loc 1 751 103 view .LVU451
 1895               	/* epilogue start */
 752:./tmk_core/common/action.c **** }
 1896               		.loc 1 752 1 is_stmt 0 view .LVU452
 1897 000e 0F90      		pop __tmp_reg__
 1898 0010 0F90      		pop __tmp_reg__
 1899 0012 0F90      		pop __tmp_reg__
 1900 0014 0F90      		pop __tmp_reg__
 1901 0016 0F90      		pop __tmp_reg__
 1902 0018 DF91      		pop r29
 1903 001a CF91      		pop r28
 1904 001c 0895      		ret
 1905               		.cfi_endproc
 1906               	.LFE119:
 1908               		.section	.text.debug_record,"ax",@progbits
 1909               	.global	debug_record
 1911               	debug_record:
 1912               	.LFB120:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 1913               		.loc 1 755 1 is_stmt 1 view -0
 1914               		.cfi_startproc
 1915 0000 CF93      		push r28
 1916               	.LCFI22:
 1917               		.cfi_def_cfa_offset 3
 1918               		.cfi_offset 28, -2
 1919 0002 DF93      		push r29
 1920               	.LCFI23:
 1921               		.cfi_def_cfa_offset 4
 1922               		.cfi_offset 29, -3
 1923 0004 00D0      		rcall .
 1924 0006 00D0      		rcall .
 1925 0008 00D0      		rcall .
 1926               	.LCFI24:
 1927               		.cfi_def_cfa_offset 10
 1928 000a CDB7      		in r28,__SP_L__
 1929 000c DEB7      		in r29,__SP_H__
 1930               	.LCFI25:
 1931               		.cfi_def_cfa_register 28
 1932               	/* prologue: function */
 1933               	/* frame size = 6 */
 1934               	/* stack size = 8 */
 1935               	.L__stack_usage = 8
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 1936               		.loc 1 756 5 view .LVU454
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 1937               		.loc 1 758 77 view .LVU455
 1938               	/* epilogue start */
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 1939               		.loc 1 760 1 is_stmt 0 view .LVU456
 1940 000e 0F90      		pop __tmp_reg__
 1941 0010 0F90      		pop __tmp_reg__
 1942 0012 0F90      		pop __tmp_reg__
 1943 0014 0F90      		pop __tmp_reg__
 1944 0016 0F90      		pop __tmp_reg__
 1945 0018 0F90      		pop __tmp_reg__
 1946 001a DF91      		pop r29
 1947 001c CF91      		pop r28
 1948 001e 0895      		ret
 1949               		.cfi_endproc
 1950               	.LFE120:
 1952               		.section	.text.debug_action,"ax",@progbits
 1953               	.global	debug_action
 1955               	debug_action:
 1956               	.LVL184:
 1957               	.LFB121:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 1958               		.loc 1 763 1 is_stmt 1 view -0
 1959               		.cfi_startproc
 1960               	/* prologue: function */
 1961               	/* frame size = 0 */
 1962               	/* stack size = 0 */
 1963               	.L__stack_usage = 0
 764:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1964               		.loc 1 764 5 view .LVU458
 765:./tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 766:./tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 767:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 768:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 769:./tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 770:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 771:./tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 772:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 773:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 774:./tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 775:./tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 776:./tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 777:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
 778:./tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 779:./tmk_core/common/action.c ****     }
 780:./tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 1965               		.loc 1 780 71 view .LVU459
 1966               	/* epilogue start */
 781:./tmk_core/common/action.c **** }
 1967               		.loc 1 781 1 is_stmt 0 view .LVU460
 1968 0000 0895      		ret
 1969               		.cfi_endproc
 1970               	.LFE121:
 1972               		.section	.rodata.CSWTCH.33,"a"
 1975               	CSWTCH.33:
 1976 0000 E200      		.word	226
 1977 0002 E900      		.word	233
 1978 0004 EA00      		.word	234
 1979 0006 B500      		.word	181
 1980 0008 B600      		.word	182
 1981 000a B700      		.word	183
 1982 000c CD00      		.word	205
 1983 000e 8301      		.word	387
 1984 0010 CC00      		.word	204
 1985 0012 8A01      		.word	394
 1986 0014 9201      		.word	402
 1987 0016 9401      		.word	404
 1988 0018 2102      		.word	545
 1989 001a 2302      		.word	547
 1990 001c 2402      		.word	548
 1991 001e 2502      		.word	549
 1992 0020 2602      		.word	550
 1993 0022 2702      		.word	551
 1994 0024 2A02      		.word	554
 1995 0026 B300      		.word	179
 1996 0028 B400      		.word	180
 1997               	.global	disable_action_cache
 1998               		.section	.bss.disable_action_cache,"aw",@nobits
 2001               	disable_action_cache:
 2002 0000 00        		.zero	1
 2003               		.text
 2004               	.Letext0:
 2005               		.file 3 "/usr/avr/include/stdint.h"
 2006               		.file 4 "./tmk_core/common/keycode.h"
 2007               		.file 5 "./tmk_core/common/action_code.h"
 2008               		.file 6 "./tmk_core/common/action_macro.h"
 2009               		.file 7 "./tmk_core/common/action.h"
 2010               		.file 8 "./tmk_core/common/action_util.h"
 2011               		.file 9 "./tmk_core/common/mousekey.h"
 2012               		.file 10 "./tmk_core/common/host.h"
 2013               		.file 11 "./tmk_core/common/action_layer.h"
 2014               		.file 12 "./tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/cctJPPhA.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctJPPhA.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctJPPhA.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctJPPhA.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctJPPhA.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctJPPhA.s:14     .text.action_exec:0000000000000000 action_exec
     /tmp/cctJPPhA.s:16     .text.action_exec:0000000000000000 .Loc.0
     /tmp/cctJPPhA.s:17     .text.action_exec:0000000000000000 L0
     /tmp/cctJPPhA.s:47     .text.action_exec:000000000000001e .Loc.1
     /tmp/cctJPPhA.s:48     .text.action_exec:000000000000001e .Loc.2
     /tmp/cctJPPhA.s:49     .text.action_exec:000000000000001e .Loc.3
     /tmp/cctJPPhA.s:50     .text.action_exec:000000000000001e .Loc.4
     /tmp/cctJPPhA.s:62     .text.action_exec:0000000000000032 .Loc.5
     /tmp/cctJPPhA.s:70     .text.action_exec:000000000000003e .Loc.6
     /tmp/cctJPPhA.s:79     .text.action_exec:000000000000004e .Loc.7
     /tmp/cctJPPhA.s:82     .text.action_exec:0000000000000052 L0
     /tmp/cctJPPhA.s:88     .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/cctJPPhA.s:91     .text.process_record_quantum:0000000000000000 .Loc.8
     /tmp/cctJPPhA.s:92     .text.process_record_quantum:0000000000000000 L0
     /tmp/cctJPPhA.s:97     .text.process_record_quantum:0000000000000000 .Loc.9
     /tmp/cctJPPhA.s:98     .text.process_record_quantum:0000000000000000 .Loc.10
     /tmp/cctJPPhA.s:102    .text.process_record_quantum:0000000000000002 .Loc.11
     /tmp/cctJPPhA.s:104    .text.process_record_quantum:0000000000000004 L0
     /tmp/cctJPPhA.s:110    .text.register_code:0000000000000000 register_code
     /tmp/cctJPPhA.s:113    .text.register_code:0000000000000000 .Loc.12
     /tmp/cctJPPhA.s:114    .text.register_code:0000000000000000 L0
     /tmp/cctJPPhA.s:119    .text.register_code:0000000000000000 .Loc.13
     /tmp/cctJPPhA.s:120    .text.register_code:0000000000000000 .Loc.14
     /tmp/cctJPPhA.s:122    .text.register_code:0000000000000004 L0
     /tmp/cctJPPhA.s:124    .text.register_code:0000000000000006 .Loc.15
     /tmp/cctJPPhA.s:125    .text.register_code:0000000000000006 .Loc.16
     /tmp/cctJPPhA.s:128    .text.register_code:000000000000000a .Loc.17
     /tmp/cctJPPhA.s:129    .text.register_code:000000000000000a .Loc.18
     /tmp/cctJPPhA.s:132    .text.register_code:000000000000000e .Loc.19
     /tmp/cctJPPhA.s:135    .text.register_code:0000000000000012 .Loc.20
     /tmp/cctJPPhA.s:139    .text.register_code:0000000000000018 .Loc.21
     /tmp/cctJPPhA.s:142    .text.register_code:000000000000001c .Loc.22
     /tmp/cctJPPhA.s:145    .text.register_code:000000000000001e .Loc.23
     /tmp/cctJPPhA.s:149    .text.register_code:0000000000000022 .Loc.24
     /tmp/cctJPPhA.s:153    .text.register_code:0000000000000026 .Loc.25
     /tmp/cctJPPhA.s:154    .text.register_code:0000000000000026 .Loc.26
     /tmp/cctJPPhA.s:157    .text.register_code:000000000000002a .Loc.27
     /tmp/cctJPPhA.s:158    .text.register_code:000000000000002a .Loc.28
     /tmp/cctJPPhA.s:161    .text.register_code:000000000000002e .Loc.29
     /tmp/cctJPPhA.s:164    .text.register_code:0000000000000032 .Loc.30
     /tmp/cctJPPhA.s:168    .text.register_code:0000000000000038 .Loc.31
     /tmp/cctJPPhA.s:171    .text.register_code:000000000000003c .Loc.32
     /tmp/cctJPPhA.s:176    .text.register_code:0000000000000040 .Loc.33
     /tmp/cctJPPhA.s:177    .text.register_code:0000000000000040 .Loc.34
     /tmp/cctJPPhA.s:180    .text.register_code:0000000000000044 .Loc.35
     /tmp/cctJPPhA.s:181    .text.register_code:0000000000000044 .Loc.36
     /tmp/cctJPPhA.s:184    .text.register_code:0000000000000048 .Loc.37
     /tmp/cctJPPhA.s:187    .text.register_code:000000000000004c .Loc.38
     /tmp/cctJPPhA.s:191    .text.register_code:0000000000000052 .Loc.39
     /tmp/cctJPPhA.s:194    .text.register_code:0000000000000056 .Loc.40
     /tmp/cctJPPhA.s:199    .text.register_code:000000000000005a .Loc.41
     /tmp/cctJPPhA.s:200    .text.register_code:000000000000005a .Loc.42
     /tmp/cctJPPhA.s:205    .text.register_code:0000000000000062 .Loc.43
     /tmp/cctJPPhA.s:206    .text.register_code:0000000000000062 .Loc.44
     /tmp/cctJPPhA.s:209    .text.register_code:0000000000000066 .Loc.45
     /tmp/cctJPPhA.s:213    .text.register_code:0000000000000068 .Loc.46
     /tmp/cctJPPhA.s:214    .text.register_code:0000000000000068 .Loc.47
     /tmp/cctJPPhA.s:219    .text.register_code:0000000000000070 .Loc.48
     /tmp/cctJPPhA.s:220    .text.register_code:0000000000000070 .Loc.49
     /tmp/cctJPPhA.s:223    .text.register_code:0000000000000072 .Loc.50
     /tmp/cctJPPhA.s:234    .text.register_code:0000000000000082 .Loc.51
     /tmp/cctJPPhA.s:238    .text.register_code:0000000000000084 .Loc.52
     /tmp/cctJPPhA.s:239    .text.register_code:0000000000000084 .Loc.53
     /tmp/cctJPPhA.s:244    .text.register_code:000000000000008c .Loc.54
     /tmp/cctJPPhA.s:247    .text.register_code:0000000000000090 .Loc.55
     /tmp/cctJPPhA.s:250    .text.register_code:0000000000000094 .Loc.56
     /tmp/cctJPPhA.s:255    .text.register_code:0000000000000098 .Loc.57
     /tmp/cctJPPhA.s:259    .text.register_code:000000000000009c .Loc.58
     /tmp/cctJPPhA.s:263    .text.register_code:00000000000000a0 .Loc.59
     /tmp/cctJPPhA.s:267    .text.register_code:00000000000000a2 .Loc.60
     /tmp/cctJPPhA.s:271    .text.register_code:00000000000000a6 .Loc.61
     /tmp/cctJPPhA.s:275    .text.register_code:00000000000000a8 .Loc.62
     /tmp/cctJPPhA.s:276    .text.register_code:00000000000000a8 .Loc.63
     /tmp/cctJPPhA.s:279    .text.register_code:00000000000000aa .Loc.64
     /tmp/cctJPPhA.s:282    .text.register_code:00000000000000ae .Loc.65
     /tmp/cctJPPhA.s:288    .text.register_code:00000000000000b6 .Loc.66
     /tmp/cctJPPhA.s:1975   .rodata.CSWTCH.33:0000000000000000 CSWTCH.33
     /tmp/cctJPPhA.s:297    .text.register_code:00000000000000c2 .Loc.67
     /tmp/cctJPPhA.s:299    .text.register_code:00000000000000c4 L0
     /tmp/cctJPPhA.s:305    .text.unregister_code:0000000000000000 unregister_code
     /tmp/cctJPPhA.s:308    .text.unregister_code:0000000000000000 .Loc.68
     /tmp/cctJPPhA.s:309    .text.unregister_code:0000000000000000 L0
     /tmp/cctJPPhA.s:314    .text.unregister_code:0000000000000000 .Loc.69
     /tmp/cctJPPhA.s:315    .text.unregister_code:0000000000000000 .Loc.70
     /tmp/cctJPPhA.s:317    .text.unregister_code:0000000000000004 L0
     /tmp/cctJPPhA.s:319    .text.unregister_code:0000000000000006 .Loc.71
     /tmp/cctJPPhA.s:320    .text.unregister_code:0000000000000006 .Loc.72
     /tmp/cctJPPhA.s:323    .text.unregister_code:000000000000000a .Loc.73
     /tmp/cctJPPhA.s:324    .text.unregister_code:000000000000000a .Loc.74
     /tmp/cctJPPhA.s:327    .text.unregister_code:000000000000000e .Loc.75
     /tmp/cctJPPhA.s:330    .text.unregister_code:0000000000000012 .Loc.76
     /tmp/cctJPPhA.s:334    .text.unregister_code:0000000000000018 .Loc.77
     /tmp/cctJPPhA.s:337    .text.unregister_code:000000000000001c .Loc.78
     /tmp/cctJPPhA.s:340    .text.unregister_code:000000000000001e .Loc.79
     /tmp/cctJPPhA.s:344    .text.unregister_code:0000000000000022 .Loc.80
     /tmp/cctJPPhA.s:348    .text.unregister_code:0000000000000026 .Loc.81
     /tmp/cctJPPhA.s:349    .text.unregister_code:0000000000000026 .Loc.82
     /tmp/cctJPPhA.s:352    .text.unregister_code:000000000000002a .Loc.83
     /tmp/cctJPPhA.s:353    .text.unregister_code:000000000000002a .Loc.84
     /tmp/cctJPPhA.s:356    .text.unregister_code:000000000000002e .Loc.85
     /tmp/cctJPPhA.s:359    .text.unregister_code:0000000000000032 .Loc.86
     /tmp/cctJPPhA.s:363    .text.unregister_code:0000000000000038 .Loc.87
     /tmp/cctJPPhA.s:366    .text.unregister_code:000000000000003c .Loc.88
     /tmp/cctJPPhA.s:371    .text.unregister_code:0000000000000040 .Loc.89
     /tmp/cctJPPhA.s:372    .text.unregister_code:0000000000000040 .Loc.90
     /tmp/cctJPPhA.s:375    .text.unregister_code:0000000000000044 .Loc.91
     /tmp/cctJPPhA.s:376    .text.unregister_code:0000000000000044 .Loc.92
     /tmp/cctJPPhA.s:379    .text.unregister_code:0000000000000048 .Loc.93
     /tmp/cctJPPhA.s:382    .text.unregister_code:000000000000004c .Loc.94
     /tmp/cctJPPhA.s:386    .text.unregister_code:0000000000000052 .Loc.95
     /tmp/cctJPPhA.s:389    .text.unregister_code:0000000000000056 .Loc.96
     /tmp/cctJPPhA.s:394    .text.unregister_code:000000000000005a .Loc.97
     /tmp/cctJPPhA.s:395    .text.unregister_code:000000000000005a .Loc.98
     /tmp/cctJPPhA.s:400    .text.unregister_code:0000000000000062 .Loc.99
     /tmp/cctJPPhA.s:401    .text.unregister_code:0000000000000062 .Loc.100
     /tmp/cctJPPhA.s:406    .text.unregister_code:000000000000006a .Loc.101
     /tmp/cctJPPhA.s:407    .text.unregister_code:000000000000006a .Loc.102
     /tmp/cctJPPhA.s:410    .text.unregister_code:000000000000006c .Loc.103
     /tmp/cctJPPhA.s:421    .text.unregister_code:000000000000007c .Loc.104
     /tmp/cctJPPhA.s:425    .text.unregister_code:000000000000007e .Loc.105
     /tmp/cctJPPhA.s:426    .text.unregister_code:000000000000007e .Loc.106
     /tmp/cctJPPhA.s:431    .text.unregister_code:0000000000000086 .Loc.107
     /tmp/cctJPPhA.s:435    .text.unregister_code:000000000000008a .Loc.108
     /tmp/cctJPPhA.s:439    .text.unregister_code:000000000000008e .Loc.109
     /tmp/cctJPPhA.s:440    .text.unregister_code:000000000000008e .Loc.110
     /tmp/cctJPPhA.s:443    .text.unregister_code:0000000000000090 .Loc.111
     /tmp/cctJPPhA.s:446    .text.unregister_code:0000000000000094 .Loc.112
     /tmp/cctJPPhA.s:450    .text.unregister_code:0000000000000098 .Loc.113
     /tmp/cctJPPhA.s:455    .text.unregister_code:000000000000009c .Loc.114
     /tmp/cctJPPhA.s:457    .text.unregister_code:000000000000009e L0
     /tmp/cctJPPhA.s:463    .text.register_mods:0000000000000000 register_mods
     /tmp/cctJPPhA.s:466    .text.register_mods:0000000000000000 .Loc.115
     /tmp/cctJPPhA.s:467    .text.register_mods:0000000000000000 L0
     /tmp/cctJPPhA.s:472    .text.register_mods:0000000000000000 .Loc.116
     /tmp/cctJPPhA.s:473    .text.register_mods:0000000000000000 .Loc.117
     /tmp/cctJPPhA.s:476    .text.register_mods:0000000000000004 .Loc.118
     /tmp/cctJPPhA.s:479    .text.register_mods:0000000000000008 .Loc.119
     /tmp/cctJPPhA.s:484    .text.register_mods:000000000000000c .Loc.120
     /tmp/cctJPPhA.s:486    .text.register_mods:000000000000000e L0
     /tmp/cctJPPhA.s:492    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/cctJPPhA.s:495    .text.unregister_mods:0000000000000000 .Loc.121
     /tmp/cctJPPhA.s:496    .text.unregister_mods:0000000000000000 L0
     /tmp/cctJPPhA.s:501    .text.unregister_mods:0000000000000000 .Loc.122
     /tmp/cctJPPhA.s:502    .text.unregister_mods:0000000000000000 .Loc.123
     /tmp/cctJPPhA.s:505    .text.unregister_mods:0000000000000004 .Loc.124
     /tmp/cctJPPhA.s:508    .text.unregister_mods:0000000000000008 .Loc.125
     /tmp/cctJPPhA.s:513    .text.unregister_mods:000000000000000c .Loc.126
     /tmp/cctJPPhA.s:515    .text.unregister_mods:000000000000000e L0
     /tmp/cctJPPhA.s:521    .text.process_action:0000000000000000 process_action
     /tmp/cctJPPhA.s:524    .text.process_action:0000000000000000 .Loc.127
     /tmp/cctJPPhA.s:525    .text.process_action:0000000000000000 L0
     /tmp/cctJPPhA.s:526    .text.process_action:0000000000000000 .Loc.128
     /tmp/cctJPPhA.s:559    .text.process_action:0000000000000012 L0
     /tmp/cctJPPhA.s:560    .text.process_action:0000000000000014 L0
     /tmp/cctJPPhA.s:561    .text.process_action:0000000000000016 L0
     /tmp/cctJPPhA.s:575    .text.process_action:0000000000000020 .Loc.129
     /tmp/cctJPPhA.s:577    .text.process_action:0000000000000020 .Loc.130
     /tmp/cctJPPhA.s:578    .text.process_action:0000000000000020 .Loc.131
     /tmp/cctJPPhA.s:579    .text.process_action:0000000000000020 .Loc.132
     /tmp/cctJPPhA.s:585    .text.process_action:0000000000000028 .Loc.133
     /tmp/cctJPPhA.s:586    .text.process_action:0000000000000028 .Loc.134
     /tmp/cctJPPhA.s:588    .text.process_action:000000000000002a .Loc.135
     /tmp/cctJPPhA.s:591    .text.process_action:000000000000002e .Loc.136
     /tmp/cctJPPhA.s:592    .text.process_action:000000000000002e .Loc.137
     /tmp/cctJPPhA.s:596    .text.process_action:0000000000000032 .Loc.138
     /tmp/cctJPPhA.s:600    .text.process_action:0000000000000034 .Loc.139
     /tmp/cctJPPhA.s:601    .text.process_action:0000000000000034 .Loc.140
     /tmp/cctJPPhA.s:605    .text.process_action:000000000000003a .Loc.141
     /tmp/cctJPPhA.s:632    .text.process_action:0000000000000044 .Loc.142
     /tmp/cctJPPhA.s:635    .text.process_action:0000000000000048 .Loc.143
     /tmp/cctJPPhA.s:636    .text.process_action:0000000000000048 .Loc.144
     /tmp/cctJPPhA.s:639    .text.process_action:000000000000004c .Loc.145
     /tmp/cctJPPhA.s:642    .text.process_action:0000000000000050 .Loc.146
     /tmp/cctJPPhA.s:645    .text.process_action:0000000000000054 .Loc.147
     /tmp/cctJPPhA.s:648    .text.process_action:0000000000000058 .Loc.148
     /tmp/cctJPPhA.s:652    .text.process_action:000000000000005e .Loc.149
     /tmp/cctJPPhA.s:653    .text.process_action:000000000000005e .Loc.150
     /tmp/cctJPPhA.s:656    .text.process_action:0000000000000062 .Loc.151
     /tmp/cctJPPhA.s:661    .text.process_action:0000000000000068 .Loc.152
     /tmp/cctJPPhA.s:665    .text.process_action:000000000000006a .Loc.153
     /tmp/cctJPPhA.s:666    .text.process_action:000000000000006a .Loc.154
     /tmp/cctJPPhA.s:669    .text.process_action:000000000000006c .Loc.155
     /tmp/cctJPPhA.s:671    .text.process_action:000000000000006e .Loc.156
     /tmp/cctJPPhA.s:675    .text.process_action:0000000000000074 .Loc.157
     /tmp/cctJPPhA.s:680    .text.process_action:0000000000000078 .Loc.158
     /tmp/cctJPPhA.s:681    .text.process_action:0000000000000078 .Loc.159
     /tmp/cctJPPhA.s:684    .text.process_action:000000000000007c .Loc.160
     /tmp/cctJPPhA.s:685    .text.process_action:000000000000007c .Loc.161
     /tmp/cctJPPhA.s:688    .text.process_action:0000000000000080 .Loc.162
     /tmp/cctJPPhA.s:689    .text.process_action:0000000000000080 .Loc.163
     /tmp/cctJPPhA.s:692    .text.process_action:0000000000000084 .Loc.164
     /tmp/cctJPPhA.s:695    .text.process_action:0000000000000088 .Loc.165
     /tmp/cctJPPhA.s:700    .text.process_action:000000000000008e .Loc.166
     /tmp/cctJPPhA.s:705    .text.process_action:0000000000000094 .Loc.167
     /tmp/cctJPPhA.s:708    .text.process_action:0000000000000098 .Loc.168
     /tmp/cctJPPhA.s:710    .text.process_action:0000000000000098 .Loc.169
     /tmp/cctJPPhA.s:712    .text.process_action:0000000000000098 .Loc.170
     /tmp/cctJPPhA.s:713    .text.process_action:0000000000000098 .Loc.171
     /tmp/cctJPPhA.s:721    .text.process_action:00000000000000a0 .Loc.172
     /tmp/cctJPPhA.s:727    .text.process_action:00000000000000a8 .Loc.173
     /tmp/cctJPPhA.s:731    .text.process_action:00000000000000ae .Loc.174
     /tmp/cctJPPhA.s:732    .text.process_action:00000000000000ae .Loc.175
     /tmp/cctJPPhA.s:735    .text.process_action:00000000000000b2 .Loc.176
     /tmp/cctJPPhA.s:736    .text.process_action:00000000000000b2 .Loc.177
     /tmp/cctJPPhA.s:739    .text.process_action:00000000000000b6 .Loc.178
     /tmp/cctJPPhA.s:742    .text.process_action:00000000000000ba .Loc.179
     /tmp/cctJPPhA.s:747    .text.process_action:00000000000000c0 .Loc.180
     /tmp/cctJPPhA.s:752    .text.process_action:00000000000000c6 .Loc.181
     /tmp/cctJPPhA.s:756    .text.process_action:00000000000000ca .Loc.182
     /tmp/cctJPPhA.s:758    .text.process_action:00000000000000ca .Loc.183
     /tmp/cctJPPhA.s:759    .text.process_action:00000000000000ca .Loc.184
     /tmp/cctJPPhA.s:761    .text.process_action:00000000000000ce L0
     /tmp/cctJPPhA.s:763    .text.process_action:00000000000000d0 .Loc.185
     /tmp/cctJPPhA.s:766    .text.process_action:00000000000000d4 .Loc.186
     /tmp/cctJPPhA.s:769    .text.process_action:00000000000000d8 .Loc.187
     /tmp/cctJPPhA.s:770    .text.process_action:00000000000000d8 .Loc.188
     /tmp/cctJPPhA.s:773    .text.process_action:00000000000000dc .Loc.189
     /tmp/cctJPPhA.s:778    .text.process_action:00000000000000e4 .Loc.190
     /tmp/cctJPPhA.s:1576   .text.process_record:0000000000000000 process_record
     /tmp/cctJPPhA.s:782    .text.process_action:00000000000000ea .Loc.191
     /tmp/cctJPPhA.s:786    .text.process_action:00000000000000ee .Loc.192
     /tmp/cctJPPhA.s:797    .text.process_action:0000000000000100 .Loc.193
     /tmp/cctJPPhA.s:802    .text.process_action:0000000000000106 .Loc.194
     /tmp/cctJPPhA.s:805    .text.process_action:0000000000000108 .Loc.195
     /tmp/cctJPPhA.s:807    .text.process_action:000000000000010a .Loc.196
     /tmp/cctJPPhA.s:812    .text.process_action:000000000000010e .Loc.197
     /tmp/cctJPPhA.s:819    .text.process_action:0000000000000116 .Loc.198
     /tmp/cctJPPhA.s:822    .text.process_action:0000000000000116 .Loc.199
     /tmp/cctJPPhA.s:825    .text.process_action:0000000000000116 .Loc.200
     /tmp/cctJPPhA.s:831    .text.process_action:000000000000011c .Loc.201
     /tmp/cctJPPhA.s:834    .text.process_action:0000000000000120 .Loc.202
     /tmp/cctJPPhA.s:837    .text.process_action:0000000000000124 .Loc.203
     /tmp/cctJPPhA.s:843    .text.process_action:000000000000012a .Loc.204
     /tmp/cctJPPhA.s:849    .text.process_action:0000000000000134 .Loc.205
     /tmp/cctJPPhA.s:850    .text.process_action:0000000000000134 .Loc.206
     /tmp/cctJPPhA.s:853    .text.process_action:0000000000000138 .Loc.207
     /tmp/cctJPPhA.s:854    .text.process_action:0000000000000138 .Loc.208
     /tmp/cctJPPhA.s:857    .text.process_action:000000000000013c .Loc.209
     /tmp/cctJPPhA.s:858    .text.process_action:000000000000013c .Loc.210
     /tmp/cctJPPhA.s:861    .text.process_action:0000000000000140 .Loc.211
     /tmp/cctJPPhA.s:864    .text.process_action:0000000000000144 .Loc.212
     /tmp/cctJPPhA.s:865    .text.process_action:0000000000000144 .Loc.213
     /tmp/cctJPPhA.s:866    .text.process_action:0000000000000144 .Loc.214
     /tmp/cctJPPhA.s:871    .text.process_action:000000000000014a .Loc.215
     /tmp/cctJPPhA.s:872    .text.process_action:000000000000014a .Loc.216
     /tmp/cctJPPhA.s:875    .text.process_action:000000000000014e .Loc.217
     /tmp/cctJPPhA.s:876    .text.process_action:000000000000014e .Loc.218
     /tmp/cctJPPhA.s:880    .text.process_action:0000000000000152 .Loc.219
     /tmp/cctJPPhA.s:884    .text.process_action:0000000000000154 .Loc.220
     /tmp/cctJPPhA.s:890    .text.process_action:000000000000015a .Loc.221
     /tmp/cctJPPhA.s:891    .text.process_action:000000000000015a .Loc.222
     /tmp/cctJPPhA.s:893    .text.process_action:000000000000015c .Loc.223
     /tmp/cctJPPhA.s:896    .text.process_action:0000000000000160 .Loc.224
     /tmp/cctJPPhA.s:897    .text.process_action:0000000000000160 .Loc.225
     /tmp/cctJPPhA.s:902    .text.process_action:0000000000000166 .Loc.226
     /tmp/cctJPPhA.s:903    .text.process_action:0000000000000166 .Loc.227
     /tmp/cctJPPhA.s:907    .text.process_action:000000000000016a .Loc.228
     /tmp/cctJPPhA.s:910    .text.process_action:000000000000016e .Loc.229
     /tmp/cctJPPhA.s:912    .text.process_action:000000000000016e .Loc.230
     /tmp/cctJPPhA.s:913    .text.process_action:000000000000016e .Loc.231
     /tmp/cctJPPhA.s:917    .text.process_action:0000000000000170 .Loc.232
     /tmp/cctJPPhA.s:919    .text.process_action:0000000000000170 .Loc.233
     /tmp/cctJPPhA.s:926    .text.process_action:0000000000000176 .Loc.234
     /tmp/cctJPPhA.s:927    .text.process_action:0000000000000176 .Loc.235
     /tmp/cctJPPhA.s:929    .text.process_action:000000000000017a L0
     /tmp/cctJPPhA.s:933    .text.process_action:000000000000017e .Loc.236
     /tmp/cctJPPhA.s:934    .text.process_action:000000000000017e .Loc.237
     /tmp/cctJPPhA.s:937    .text.process_action:0000000000000182 .Loc.238
     /tmp/cctJPPhA.s:938    .text.process_action:0000000000000182 .Loc.239
     /tmp/cctJPPhA.s:940    .text.process_action:0000000000000186 L0
     /tmp/cctJPPhA.s:944    .text.process_action:000000000000018a .Loc.240
     /tmp/cctJPPhA.s:945    .text.process_action:000000000000018a .Loc.241
     /tmp/cctJPPhA.s:947    .text.process_action:000000000000018e L0
     /tmp/cctJPPhA.s:951    .text.process_action:0000000000000192 .Loc.242
     /tmp/cctJPPhA.s:952    .text.process_action:0000000000000192 .Loc.243
     /tmp/cctJPPhA.s:957    .text.process_action:0000000000000196 .Loc.244
     /tmp/cctJPPhA.s:959    .text.process_action:0000000000000196 .Loc.245
     /tmp/cctJPPhA.s:960    .text.process_action:0000000000000196 .Loc.246
     /tmp/cctJPPhA.s:966    .text.process_action:000000000000019e .Loc.247
     /tmp/cctJPPhA.s:967    .text.process_action:000000000000019e .Loc.248
     /tmp/cctJPPhA.s:975    .text.process_action:00000000000001ae L0
     /tmp/cctJPPhA.s:977    .text.process_action:00000000000001b0 .Loc.249
     /tmp/cctJPPhA.s:978    .text.process_action:00000000000001b0 .Loc.250
     /tmp/cctJPPhA.s:982    .text.process_action:00000000000001b6 .Loc.251
     /tmp/cctJPPhA.s:985    .text.process_action:00000000000001ba .Loc.252
     /tmp/cctJPPhA.s:993    .text.process_action:00000000000001c4 .Loc.253
     /tmp/cctJPPhA.s:994    .text.process_action:00000000000001c4 .Loc.254
     /tmp/cctJPPhA.s:998    .text.process_action:00000000000001ca .Loc.255
     /tmp/cctJPPhA.s:1001   .text.process_action:00000000000001ce .Loc.256
     /tmp/cctJPPhA.s:1009   .text.process_action:00000000000001d8 .Loc.257
     /tmp/cctJPPhA.s:1010   .text.process_action:00000000000001d8 .Loc.258
     /tmp/cctJPPhA.s:1012   .text.process_action:00000000000001da .Loc.259
     /tmp/cctJPPhA.s:1015   .text.process_action:00000000000001de .Loc.260
     /tmp/cctJPPhA.s:1018   .text.process_action:00000000000001e2 .Loc.261
     /tmp/cctJPPhA.s:1020   .text.process_action:00000000000001e2 .Loc.262
     /tmp/cctJPPhA.s:1025   .text.process_action:00000000000001e8 .Loc.263
     /tmp/cctJPPhA.s:1030   .text.process_action:00000000000001ee .Loc.264
     /tmp/cctJPPhA.s:1031   .text.process_action:00000000000001ee .Loc.265
     /tmp/cctJPPhA.s:1034   .text.process_action:00000000000001f2 .Loc.266
     /tmp/cctJPPhA.s:1037   .text.process_action:00000000000001f6 .Loc.267
     /tmp/cctJPPhA.s:1038   .text.process_action:00000000000001f6 .Loc.268
     /tmp/cctJPPhA.s:1042   .text.process_action:00000000000001fa .Loc.269
     /tmp/cctJPPhA.s:1044   .text.process_action:00000000000001fa .Loc.270
     /tmp/cctJPPhA.s:1045   .text.process_action:00000000000001fa .Loc.271
     /tmp/cctJPPhA.s:1050   .text.process_action:0000000000000202 .Loc.272
     /tmp/cctJPPhA.s:1053   .text.process_action:0000000000000206 .Loc.273
     /tmp/cctJPPhA.s:1056   .text.process_action:000000000000020a .Loc.274
     /tmp/cctJPPhA.s:1060   .text.process_action:0000000000000210 .Loc.275
     /tmp/cctJPPhA.s:1078   .text.process_action:000000000000022c .Loc.276
     /tmp/cctJPPhA.s:1079   .text.process_action:000000000000022c .Loc.277
     /tmp/cctJPPhA.s:1086   .text.process_action:0000000000000238 .Loc.278
     /tmp/cctJPPhA.s:1100   .text.process_action:000000000000024e .Loc.279
     /tmp/cctJPPhA.s:1107   .text.process_action:0000000000000256 .Loc.280
     /tmp/cctJPPhA.s:1108   .text.process_action:0000000000000256 .Loc.281
     /tmp/cctJPPhA.s:1115   .text.process_action:0000000000000260 .Loc.282
     /tmp/cctJPPhA.s:1134   .text.process_action:0000000000000284 .Loc.283
     /tmp/cctJPPhA.s:1138   .text.process_action:0000000000000288 .Loc.284
     /tmp/cctJPPhA.s:1141   .text.process_action:000000000000028c .Loc.285
     /tmp/cctJPPhA.s:1145   .text.process_action:000000000000028e .Loc.286
     /tmp/cctJPPhA.s:1161   .text.process_action:00000000000002aa .Loc.287
     /tmp/cctJPPhA.s:1164   .text.process_action:00000000000002ae .Loc.288
     /tmp/cctJPPhA.s:1168   .text.process_action:00000000000002b0 .Loc.289
     /tmp/cctJPPhA.s:1172   .text.process_action:00000000000002b4 .Loc.290
     /tmp/cctJPPhA.s:1179   .text.process_action:00000000000002c0 .Loc.291
     /tmp/cctJPPhA.s:1183   .text.process_action:00000000000002c2 .Loc.292
     /tmp/cctJPPhA.s:1185   .text.process_action:00000000000002c2 .Loc.293
     /tmp/cctJPPhA.s:1186   .text.process_action:00000000000002c2 .Loc.294
     /tmp/cctJPPhA.s:1188   .text.process_action:00000000000002c6 L0
     /tmp/cctJPPhA.s:1190   .text.process_action:00000000000002c8 .Loc.295
     /tmp/cctJPPhA.s:1196   .text.process_action:00000000000002ce .Loc.296
     /tmp/cctJPPhA.s:1198   .text.process_action:00000000000002ce .Loc.297
     /tmp/cctJPPhA.s:1199   .text.process_action:00000000000002ce .Loc.298
     /tmp/cctJPPhA.s:1204   .text.process_action:00000000000002d6 .Loc.299
     /tmp/cctJPPhA.s:1207   .text.process_action:00000000000002da .Loc.300
     /tmp/cctJPPhA.s:1210   .text.process_action:00000000000002de .Loc.301
     /tmp/cctJPPhA.s:1214   .text.process_action:00000000000002e4 .Loc.302
     /tmp/cctJPPhA.s:1232   .text.process_action:0000000000000300 .Loc.303
     /tmp/cctJPPhA.s:1233   .text.process_action:0000000000000300 .Loc.304
     /tmp/cctJPPhA.s:1240   .text.process_action:000000000000030c .Loc.305
     /tmp/cctJPPhA.s:1254   .text.process_action:0000000000000322 .Loc.306
     /tmp/cctJPPhA.s:1261   .text.process_action:000000000000032a .Loc.307
     /tmp/cctJPPhA.s:1262   .text.process_action:000000000000032a .Loc.308
     /tmp/cctJPPhA.s:1269   .text.process_action:0000000000000334 .Loc.309
     /tmp/cctJPPhA.s:1288   .text.process_action:0000000000000358 .Loc.310
     /tmp/cctJPPhA.s:1292   .text.process_action:000000000000035c .Loc.311
     /tmp/cctJPPhA.s:1295   .text.process_action:0000000000000360 .Loc.312
     /tmp/cctJPPhA.s:1299   .text.process_action:0000000000000362 .Loc.313
     /tmp/cctJPPhA.s:1301   .text.process_action:0000000000000362 .Loc.314
     /tmp/cctJPPhA.s:1303   .text.process_action:0000000000000366 L0
     /tmp/cctJPPhA.s:1309   .text.process_action:000000000000036a .Loc.315
     /tmp/cctJPPhA.s:1325   .text.process_action:0000000000000386 .Loc.316
     /tmp/cctJPPhA.s:1328   .text.process_action:000000000000038a .Loc.317
     /tmp/cctJPPhA.s:1332   .text.process_action:000000000000038c .Loc.318
     /tmp/cctJPPhA.s:1336   .text.process_action:0000000000000390 .Loc.319
     /tmp/cctJPPhA.s:1343   .text.process_action:000000000000039c .Loc.320
     /tmp/cctJPPhA.s:1347   .text.process_action:000000000000039e .Loc.321
     /tmp/cctJPPhA.s:1349   .text.process_action:000000000000039e .Loc.322
     /tmp/cctJPPhA.s:1352   .text.process_action:00000000000003a4 L0
     /tmp/cctJPPhA.s:1364   .text.process_action:00000000000003b8 .Loc.323
     /tmp/cctJPPhA.s:1365   .text.process_action:00000000000003b8 .Loc.324
     /tmp/cctJPPhA.s:1367   .text.process_action:00000000000003bc L0
     /tmp/cctJPPhA.s:1369   .text.process_action:00000000000003be .Loc.325
     /tmp/cctJPPhA.s:1370   .text.process_action:00000000000003be .Loc.326
     /tmp/cctJPPhA.s:1373   .text.process_action:00000000000003c2 .Loc.327
     /tmp/cctJPPhA.s:1374   .text.process_action:00000000000003c2 .Loc.328
     /tmp/cctJPPhA.s:1379   .text.process_action:00000000000003c8 .Loc.329
     /tmp/cctJPPhA.s:1385   .text.process_action:00000000000003d2 .Loc.330
     /tmp/cctJPPhA.s:1386   .text.process_action:00000000000003d2 .Loc.331
     /tmp/cctJPPhA.s:1389   .text.process_action:00000000000003d6 .Loc.332
     /tmp/cctJPPhA.s:1390   .text.process_action:00000000000003d6 .Loc.333
     /tmp/cctJPPhA.s:1394   .text.process_action:00000000000003dc .Loc.334
     /tmp/cctJPPhA.s:1398   .text.process_action:00000000000003e2 .Loc.335
     /tmp/cctJPPhA.s:1405   .text.process_action:00000000000003ec .Loc.336
     /tmp/cctJPPhA.s:1406   .text.process_action:00000000000003ec .Loc.337
     /tmp/cctJPPhA.s:1410   .text.process_action:00000000000003f2 .Loc.338
     /tmp/cctJPPhA.s:1413   .text.process_action:00000000000003f6 .Loc.339
     /tmp/cctJPPhA.s:1416   .text.process_action:00000000000003fa .Loc.340
     /tmp/cctJPPhA.s:1419   .text.process_action:00000000000003fe .Loc.341
     /tmp/cctJPPhA.s:1423   .text.process_action:0000000000000402 .Loc.342
     /tmp/cctJPPhA.s:1426   .text.process_action:0000000000000406 .Loc.343
     /tmp/cctJPPhA.s:1430   .text.process_action:000000000000040a .Loc.344
     /tmp/cctJPPhA.s:1431   .text.process_action:000000000000040a .Loc.345
     /tmp/cctJPPhA.s:1434   .text.process_action:000000000000040e .Loc.346
     /tmp/cctJPPhA.s:1435   .text.process_action:000000000000040e .Loc.347
     /tmp/cctJPPhA.s:1438   .text.process_action:0000000000000410 .Loc.348
     /tmp/cctJPPhA.s:1439   .text.process_action:0000000000000412 L0
     /tmp/cctJPPhA.s:1441   .text.process_action:0000000000000414 .Loc.349
     /tmp/cctJPPhA.s:1448   .text.process_action:000000000000041e .Loc.350
     /tmp/cctJPPhA.s:1449   .text.process_action:000000000000041e .Loc.351
     /tmp/cctJPPhA.s:1453   .text.process_action:0000000000000422 .Loc.352
     /tmp/cctJPPhA.s:1454   .text.process_action:0000000000000422 .Loc.353
     /tmp/cctJPPhA.s:1457   .text.process_action:0000000000000426 .Loc.354
     /tmp/cctJPPhA.s:1461   .text.process_action:000000000000042a .Loc.355
     /tmp/cctJPPhA.s:1466   .text.process_action:0000000000000430 .Loc.356
     /tmp/cctJPPhA.s:1467   .text.process_action:0000000000000430 .Loc.357
     /tmp/cctJPPhA.s:1470   .text.process_action:0000000000000434 .Loc.358
     /tmp/cctJPPhA.s:1474   .text.process_action:0000000000000438 .Loc.359
     /tmp/cctJPPhA.s:1479   .text.process_action:000000000000043e .Loc.360
     /tmp/cctJPPhA.s:1480   .text.process_action:000000000000043e .Loc.361
     /tmp/cctJPPhA.s:1483   .text.process_action:0000000000000442 .Loc.362
     /tmp/cctJPPhA.s:1490   .text.process_action:000000000000044c .Loc.363
     /tmp/cctJPPhA.s:1495   .text.process_action:0000000000000452 .Loc.364
     /tmp/cctJPPhA.s:1499   .text.process_action:0000000000000458 .Loc.365
     /tmp/cctJPPhA.s:1500   .text.process_action:0000000000000458 .Loc.366
     /tmp/cctJPPhA.s:1502   .text.process_action:000000000000045c L0
     /tmp/cctJPPhA.s:1504   .text.process_action:000000000000045e .Loc.367
     /tmp/cctJPPhA.s:1510   .text.process_action:0000000000000466 .Loc.368
     /tmp/cctJPPhA.s:1511   .text.process_action:0000000000000466 .Loc.369
     /tmp/cctJPPhA.s:1514   .text.process_action:000000000000046a .Loc.370
     /tmp/cctJPPhA.s:1515   .text.process_action:000000000000046a .Loc.371
     /tmp/cctJPPhA.s:1520   .text.process_action:0000000000000470 .Loc.372
     /tmp/cctJPPhA.s:1521   .text.process_action:0000000000000470 .Loc.373
     /tmp/cctJPPhA.s:1524   .text.process_action:0000000000000474 .Loc.374
     /tmp/cctJPPhA.s:1531   .text.process_action:0000000000000480 .Loc.375
     /tmp/cctJPPhA.s:1534   .text.process_action:0000000000000482 .Loc.376
     /tmp/cctJPPhA.s:1535   .text.process_action:0000000000000482 .Loc.377
     /tmp/cctJPPhA.s:1538   .text.process_action:0000000000000486 .Loc.378
     /tmp/cctJPPhA.s:1543   .text.process_action:000000000000048e .Loc.379
     /tmp/cctJPPhA.s:1548   .text.process_action:0000000000000490 .Loc.380
     /tmp/cctJPPhA.s:1559   .text.process_action:00000000000004a2 .Loc.381
     /tmp/cctJPPhA.s:1564   .text.process_action:00000000000004a8 .Loc.382
     /tmp/cctJPPhA.s:1567   .text.process_action:00000000000004aa .Loc.383
     /tmp/cctJPPhA.s:1570   .text.process_action:00000000000004ae L0
     /tmp/cctJPPhA.s:1579   .text.process_record:0000000000000000 .Loc.384
     /tmp/cctJPPhA.s:1580   .text.process_record:0000000000000000 L0
     /tmp/cctJPPhA.s:1581   .text.process_record:0000000000000000 .Loc.385
     /tmp/cctJPPhA.s:1603   .text.process_record:000000000000000a .Loc.386
     /tmp/cctJPPhA.s:1606   .text.process_record:000000000000000c .Loc.387
     /tmp/cctJPPhA.s:1612   .text.process_record:000000000000000e .Loc.388
     /tmp/cctJPPhA.s:1614   .text.process_record:000000000000000e .Loc.389
     /tmp/cctJPPhA.s:1615   .text.process_record:000000000000000e .Loc.390
     /tmp/cctJPPhA.s:1622   .text.process_record:0000000000000018 .Loc.391
     /tmp/cctJPPhA.s:1626   .text.process_record:000000000000001c .Loc.392
     /tmp/cctJPPhA.s:1629   .text.process_record:000000000000001c .Loc.393
     /tmp/cctJPPhA.s:1630   .text.process_record:000000000000001c .Loc.394
     /tmp/cctJPPhA.s:1634   .text.process_record:0000000000000022 .Loc.395
     /tmp/cctJPPhA.s:1637   .text.process_record:0000000000000026 .Loc.396
     /tmp/cctJPPhA.s:1638   .text.process_record:0000000000000026 .Loc.397
     /tmp/cctJPPhA.s:1645   .text.process_record:0000000000000032 .Loc.398
     /tmp/cctJPPhA.s:1646   .text.process_record:0000000000000032 .Loc.399
     /tmp/cctJPPhA.s:1647   .text.process_record:0000000000000032 .Loc.400
     /tmp/cctJPPhA.s:1648   .text.process_record:0000000000000032 .Loc.401
     /tmp/cctJPPhA.s:1651   .text.process_record:0000000000000036 .Loc.402
     /tmp/cctJPPhA.s:1652   .text.process_record:0000000000000036 .Loc.403
     /tmp/cctJPPhA.s:1655   .text.process_record:000000000000003a .Loc.404
     /tmp/cctJPPhA.s:1656   .text.process_record:000000000000003a .Loc.405
     /tmp/cctJPPhA.s:1660   .text.process_record:000000000000003e .Loc.406
     /tmp/cctJPPhA.s:1664   .text.process_record:0000000000000042 .Loc.407
     /tmp/cctJPPhA.s:1667   .text.process_record:0000000000000046 .Loc.408
     /tmp/cctJPPhA.s:1672   .text.process_record:000000000000004a .Loc.409
     /tmp/cctJPPhA.s:1676   .text.process_record:000000000000004e .Loc.410
     /tmp/cctJPPhA.s:1680   .text.process_record:0000000000000054 L0
     /tmp/cctJPPhA.s:1686   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/cctJPPhA.s:1689   .text.process_record_nocache:0000000000000000 .Loc.411
     /tmp/cctJPPhA.s:1690   .text.process_record_nocache:0000000000000000 L0
     /tmp/cctJPPhA.s:1695   .text.process_record_nocache:0000000000000000 .Loc.412
     /tmp/cctJPPhA.s:1696   .text.process_record_nocache:0000000000000000 .Loc.413
     /tmp/cctJPPhA.s:2001   .bss.disable_action_cache:0000000000000000 disable_action_cache
     /tmp/cctJPPhA.s:1699   .text.process_record_nocache:0000000000000006 .Loc.414
     /tmp/cctJPPhA.s:1702   .text.process_record_nocache:000000000000000a .Loc.415
     /tmp/cctJPPhA.s:1703   .text.process_record_nocache:000000000000000a .Loc.416
     /tmp/cctJPPhA.s:1706   .text.process_record_nocache:000000000000000e .Loc.417
     /tmp/cctJPPhA.s:1708   .text.process_record_nocache:0000000000000010 L0
     /tmp/cctJPPhA.s:1714   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/cctJPPhA.s:1716   .text.clear_keyboard_but_mods:0000000000000000 .Loc.418
     /tmp/cctJPPhA.s:1717   .text.clear_keyboard_but_mods:0000000000000000 L0
     /tmp/cctJPPhA.s:1722   .text.clear_keyboard_but_mods:0000000000000000 .Loc.419
     /tmp/cctJPPhA.s:1725   .text.clear_keyboard_but_mods:0000000000000004 .Loc.420
     /tmp/cctJPPhA.s:1728   .text.clear_keyboard_but_mods:0000000000000008 .Loc.421
     /tmp/cctJPPhA.s:1731   .text.clear_keyboard_but_mods:000000000000000c .Loc.422
     /tmp/cctJPPhA.s:1734   .text.clear_keyboard_but_mods:0000000000000010 .Loc.423
     /tmp/cctJPPhA.s:1737   .text.clear_keyboard_but_mods:0000000000000014 .Loc.424
     /tmp/cctJPPhA.s:1740   .text.clear_keyboard_but_mods:0000000000000018 .Loc.425
     /tmp/cctJPPhA.s:1745   .text.clear_keyboard_but_mods:0000000000000020 .Loc.426
     /tmp/cctJPPhA.s:1750   .text.clear_keyboard_but_mods:0000000000000028 L0
     /tmp/cctJPPhA.s:1756   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/cctJPPhA.s:1758   .text.clear_keyboard:0000000000000000 .Loc.427
     /tmp/cctJPPhA.s:1759   .text.clear_keyboard:0000000000000000 L0
     /tmp/cctJPPhA.s:1764   .text.clear_keyboard:0000000000000000 .Loc.428
     /tmp/cctJPPhA.s:1767   .text.clear_keyboard:0000000000000004 .Loc.429
     /tmp/cctJPPhA.s:1770   .text.clear_keyboard:0000000000000008 L0
     /tmp/cctJPPhA.s:1776   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/cctJPPhA.s:1779   .text.is_tap_key:0000000000000000 .Loc.430
     /tmp/cctJPPhA.s:1780   .text.is_tap_key:0000000000000000 L0
     /tmp/cctJPPhA.s:1785   .text.is_tap_key:0000000000000000 .Loc.431
     /tmp/cctJPPhA.s:1786   .text.is_tap_key:0000000000000000 .Loc.432
     /tmp/cctJPPhA.s:1789   .text.is_tap_key:0000000000000004 .Loc.433
     /tmp/cctJPPhA.s:1792   .text.is_tap_key:0000000000000006 .Loc.434
     /tmp/cctJPPhA.s:1793   .text.is_tap_key:0000000000000006 .Loc.435
     /tmp/cctJPPhA.s:1797   .text.is_tap_key:000000000000000c .Loc.436
     /tmp/cctJPPhA.s:1807   .text.is_tap_key:000000000000001c .Loc.437
     /tmp/cctJPPhA.s:1811   .text.is_tap_key:0000000000000020 .Loc.438
     /tmp/cctJPPhA.s:1814   .text.is_tap_key:0000000000000024 .Loc.439
     /tmp/cctJPPhA.s:1815   .text.is_tap_key:0000000000000024 .Loc.440
     /tmp/cctJPPhA.s:1823   .text.is_tap_key:000000000000002e .Loc.441
     /tmp/cctJPPhA.s:1829   .text.is_tap_key:0000000000000036 .Loc.442
     /tmp/cctJPPhA.s:1830   .text.is_tap_key:0000000000000036 .Loc.443
     /tmp/cctJPPhA.s:1833   .text.is_tap_key:0000000000000038 .Loc.444
     /tmp/cctJPPhA.s:1840   .text.is_tap_key:0000000000000040 .Loc.445
     /tmp/cctJPPhA.s:1850   .text.is_tap_key:000000000000004c .Loc.446
     /tmp/cctJPPhA.s:1854   .text.is_tap_key:000000000000004e .Loc.447
     /tmp/cctJPPhA.s:1857   .text.is_tap_key:0000000000000050 .Loc.448
     /tmp/cctJPPhA.s:1861   .text.is_tap_key:0000000000000054 .Loc.449
     /tmp/cctJPPhA.s:1863   .text.is_tap_key:0000000000000056 L0
     /tmp/cctJPPhA.s:1869   .text.debug_event:0000000000000000 debug_event
     /tmp/cctJPPhA.s:1871   .text.debug_event:0000000000000000 .Loc.450
     /tmp/cctJPPhA.s:1872   .text.debug_event:0000000000000000 L0
     /tmp/cctJPPhA.s:1881   .text.debug_event:0000000000000006 L0
     /tmp/cctJPPhA.s:1882   .text.debug_event:0000000000000008 L0
     /tmp/cctJPPhA.s:1894   .text.debug_event:000000000000000e .Loc.451
     /tmp/cctJPPhA.s:1896   .text.debug_event:000000000000000e .Loc.452
     /tmp/cctJPPhA.s:1905   .text.debug_event:000000000000001e L0
     /tmp/cctJPPhA.s:1911   .text.debug_record:0000000000000000 debug_record
     /tmp/cctJPPhA.s:1913   .text.debug_record:0000000000000000 .Loc.453
     /tmp/cctJPPhA.s:1914   .text.debug_record:0000000000000000 L0
     /tmp/cctJPPhA.s:1923   .text.debug_record:0000000000000006 L0
     /tmp/cctJPPhA.s:1924   .text.debug_record:0000000000000008 L0
     /tmp/cctJPPhA.s:1925   .text.debug_record:000000000000000a L0
     /tmp/cctJPPhA.s:1936   .text.debug_record:000000000000000e .Loc.454
     /tmp/cctJPPhA.s:1937   .text.debug_record:000000000000000e .Loc.455
     /tmp/cctJPPhA.s:1939   .text.debug_record:000000000000000e .Loc.456
     /tmp/cctJPPhA.s:1949   .text.debug_record:0000000000000020 L0
     /tmp/cctJPPhA.s:1955   .text.debug_action:0000000000000000 debug_action
     /tmp/cctJPPhA.s:1958   .text.debug_action:0000000000000000 .Loc.457
     /tmp/cctJPPhA.s:1959   .text.debug_action:0000000000000000 L0
     /tmp/cctJPPhA.s:1964   .text.debug_action:0000000000000000 .Loc.458
     /tmp/cctJPPhA.s:1965   .text.debug_action:0000000000000000 .Loc.459
     /tmp/cctJPPhA.s:1967   .text.debug_action:0000000000000000 .Loc.460
     /tmp/cctJPPhA.s:1969   .text.debug_action:0000000000000002 L0
     /tmp/cctJPPhA.s:85     .text.action_exec:0000000000000052 L0
     /tmp/cctJPPhA.s:107    .text.process_record_quantum:0000000000000004 L0
     /tmp/cctJPPhA.s:302    .text.register_code:00000000000000c4 L0
     /tmp/cctJPPhA.s:460    .text.unregister_code:000000000000009e L0
     /tmp/cctJPPhA.s:489    .text.register_mods:000000000000000e L0
     /tmp/cctJPPhA.s:518    .text.unregister_mods:000000000000000e L0
     /tmp/cctJPPhA.s:1573   .text.process_action:00000000000004ae L0
     /tmp/cctJPPhA.s:1683   .text.process_record:0000000000000054 L0
     /tmp/cctJPPhA.s:1711   .text.process_record_nocache:0000000000000010 L0
     /tmp/cctJPPhA.s:1753   .text.clear_keyboard_but_mods:0000000000000028 L0
     /tmp/cctJPPhA.s:1773   .text.clear_keyboard:0000000000000008 L0
     /tmp/cctJPPhA.s:1866   .text.is_tap_key:0000000000000056 L0
     /tmp/cctJPPhA.s:1908   .text.debug_event:000000000000001e L0
     /tmp/cctJPPhA.s:1952   .text.debug_record:0000000000000020 L0
     /tmp/cctJPPhA.s:1972   .text.debug_action:0000000000000002 L0
                     .debug_frame:0000000000000000 L0
     /tmp/cctJPPhA.s:57     .text.action_exec:000000000000002a .L1
     /tmp/cctJPPhA.s:295    .text.register_code:00000000000000c2 .L3
     /tmp/cctJPPhA.s:152    .text.register_code:0000000000000026 .L6
     /tmp/cctJPPhA.s:175    .text.register_code:0000000000000040 .L8
     /tmp/cctJPPhA.s:144    .text.register_code:000000000000001e .L16
     /tmp/cctJPPhA.s:198    .text.register_code:000000000000005a .L9
     /tmp/cctJPPhA.s:212    .text.register_code:0000000000000068 .L10
     /tmp/cctJPPhA.s:148    .text.register_code:0000000000000022 .L17
     /tmp/cctJPPhA.s:237    .text.register_code:0000000000000084 .L11
     /tmp/cctJPPhA.s:228    .text.register_code:0000000000000078 .L21
     /tmp/cctJPPhA.s:226    .text.register_code:0000000000000076 .L11
     /tmp/cctJPPhA.s:274    .text.register_code:00000000000000a8 .L12
     /tmp/cctJPPhA.s:258    .text.register_code:000000000000009c .L14
     /tmp/cctJPPhA.s:266    .text.register_code:00000000000000a2 .L15
     /tmp/cctJPPhA.s:254    .text.register_code:0000000000000098 .L13
     /tmp/cctJPPhA.s:453    .text.unregister_code:000000000000009c .L18
     /tmp/cctJPPhA.s:347    .text.unregister_code:0000000000000026 .L21
     /tmp/cctJPPhA.s:370    .text.unregister_code:0000000000000040 .L23
     /tmp/cctJPPhA.s:339    .text.unregister_code:000000000000001e .L37
     /tmp/cctJPPhA.s:393    .text.unregister_code:000000000000005a .L24
     /tmp/cctJPPhA.s:424    .text.unregister_code:000000000000007e .L26
     /tmp/cctJPPhA.s:415    .text.unregister_code:0000000000000072 .L22
     /tmp/cctJPPhA.s:413    .text.unregister_code:0000000000000070 .L12
     /tmp/cctJPPhA.s:343    .text.unregister_code:0000000000000022 .L38
     /tmp/cctJPPhA.s:438    .text.unregister_code:000000000000008e .L27
     /tmp/cctJPPhA.s:482    .text.register_mods:000000000000000c .L39
     /tmp/cctJPPhA.s:511    .text.unregister_mods:000000000000000c .L41
     /tmp/cctJPPhA.s:631    .text.process_action:0000000000000044 .L44
     /tmp/cctJPPhA.s:612    .jumptables.gcc.process_action:0000000000000000 .L49
     /tmp/cctJPPhA.s:595    .text.process_action:0000000000000032 .L46
     /tmp/cctJPPhA.s:599    .text.process_action:0000000000000034 .L45
     /tmp/cctJPPhA.s:678    .text.process_action:0000000000000078 .L57
     /tmp/cctJPPhA.s:726    .text.process_action:00000000000000a8 .L58
     /tmp/cctJPPhA.s:709    .text.process_action:0000000000000098 .L142
     /tmp/cctJPPhA.s:699    .text.process_action:000000000000008e .L60
     /tmp/cctJPPhA.s:719    .text.process_action:00000000000000a0 .L61
     /tmp/cctJPPhA.s:755    .text.process_action:00000000000000ca .L47
     /tmp/cctJPPhA.s:704    .text.process_action:0000000000000094 .L62
     /tmp/cctJPPhA.s:746    .text.process_action:00000000000000c0 .L64
     /tmp/cctJPPhA.s:810    .text.process_action:000000000000010e .L65
     /tmp/cctJPPhA.s:1546   .text.process_action:0000000000000490 .L43
     /tmp/cctJPPhA.s:751    .text.process_action:00000000000000c6 .L66
     /tmp/cctJPPhA.s:841    .text.process_action:000000000000012a .L67
     /tmp/cctJPPhA.s:870    .text.process_action:000000000000014a .L68
     /tmp/cctJPPhA.s:932    .text.process_action:000000000000017e .L69
     /tmp/cctJPPhA.s:950    .text.process_action:0000000000000192 .L77
     /tmp/cctJPPhA.s:879    .text.process_action:0000000000000152 .L143
     /tmp/cctJPPhA.s:901    .text.process_action:0000000000000166 .L71
     /tmp/cctJPPhA.s:889    .text.process_action:000000000000015a .L72
     /tmp/cctJPPhA.s:883    .text.process_action:0000000000000154 .L139
     /tmp/cctJPPhA.s:924    .text.process_action:0000000000000176 .L74
     /tmp/cctJPPhA.s:906    .text.process_action:000000000000016a .L148
     /tmp/cctJPPhA.s:943    .text.process_action:000000000000018a .L76
     /tmp/cctJPPhA.s:911    .text.process_action:000000000000016e .L80
     /tmp/cctJPPhA.s:992    .text.process_action:00000000000001c4 .L81
     /tmp/cctJPPhA.s:988    .text.process_action:00000000000001be .L145
     /tmp/cctJPPhA.s:1004   .text.process_action:00000000000001d2 .L136
     /tmp/cctJPPhA.s:1024   .text.process_action:00000000000001e8 .L85
     /tmp/cctJPPhA.s:1019   .text.process_action:00000000000001e2 .L137
     /tmp/cctJPPhA.s:1182   .text.process_action:00000000000002c2 .L86
     /tmp/cctJPPhA.s:1070   .text.process_action:0000000000000220 .L23
     /tmp/cctJPPhA.s:1065   .text.process_action:0000000000000218 .L13
     /tmp/cctJPPhA.s:1105   .text.process_action:0000000000000256 .L87
     /tmp/cctJPPhA.s:1097   .text.process_action:000000000000024a .L24
     /tmp/cctJPPhA.s:1092   .text.process_action:0000000000000242 .L14
     /tmp/cctJPPhA.s:1144   .text.process_action:000000000000028e .L88
     /tmp/cctJPPhA.s:1167   .text.process_action:00000000000002b0 .L89
     /tmp/cctJPPhA.s:1171   .text.process_action:00000000000002b4 .L147
     /tmp/cctJPPhA.s:1298   .text.process_action:0000000000000362 .L91
     /tmp/cctJPPhA.s:1224   .text.process_action:00000000000002f4 .L25
     /tmp/cctJPPhA.s:1219   .text.process_action:00000000000002ec .L15
     /tmp/cctJPPhA.s:1259   .text.process_action:000000000000032a .L93
     /tmp/cctJPPhA.s:1251   .text.process_action:000000000000031e .L26
     /tmp/cctJPPhA.s:1246   .text.process_action:0000000000000316 .L16
     /tmp/cctJPPhA.s:1307   .text.process_action:000000000000036a .L94
     /tmp/cctJPPhA.s:1331   .text.process_action:000000000000038c .L95
     /tmp/cctJPPhA.s:1335   .text.process_action:0000000000000390 .L146
     /tmp/cctJPPhA.s:1194   .text.process_action:00000000000002ce .L92
     /tmp/cctJPPhA.s:1465   .text.process_action:0000000000000430 .L97
     /tmp/cctJPPhA.s:1378   .text.process_action:00000000000003c8 .L98
     /tmp/cctJPPhA.s:1429   .text.process_action:000000000000040a .L99
     /tmp/cctJPPhA.s:1452   .text.process_action:0000000000000422 .L100
     /tmp/cctJPPhA.s:1404   .text.process_action:00000000000003ec .L133
     /tmp/cctJPPhA.s:1509   .text.process_action:0000000000000466 .L112
     /tmp/cctJPPhA.s:1460   .text.process_action:000000000000042a .L138
     /tmp/cctJPPhA.s:1478   .text.process_action:000000000000043e .L103
     /tmp/cctJPPhA.s:1363   .text.process_action:00000000000003b8 .L101
     /tmp/cctJPPhA.s:1494   .text.process_action:0000000000000452 .L111
     /tmp/cctJPPhA.s:1422   .text.process_action:0000000000000402 .L105
     /tmp/cctJPPhA.s:916    .text.process_action:0000000000000170 .L141
     /tmp/cctJPPhA.s:1447   .text.process_action:000000000000041e .L106
     /tmp/cctJPPhA.s:1437   .text.process_action:0000000000000410 .L135
     /tmp/cctJPPhA.s:1473   .text.process_action:0000000000000438 .L144
     /tmp/cctJPPhA.s:1489   .text.process_action:000000000000044c .L110
     /tmp/cctJPPhA.s:956    .text.process_action:0000000000000196 .L140
     /tmp/cctJPPhA.s:663    .text.process_action:000000000000006a .L56
     /tmp/cctJPPhA.s:818    .text.process_action:0000000000000116 .L55
     /tmp/cctJPPhA.s:965    .text.process_action:000000000000019e .L54
     /tmp/cctJPPhA.s:1008   .text.process_action:00000000000001d8 .L53
     /tmp/cctJPPhA.s:1029   .text.process_action:00000000000001ee .L52
     /tmp/cctJPPhA.s:1346   .text.process_action:000000000000039e .L51
     /tmp/cctJPPhA.s:1519   .text.process_action:0000000000000470 .L50
     /tmp/cctJPPhA.s:1533   .text.process_action:0000000000000482 .L48
     /tmp/cctJPPhA.s:1670   .text.process_record:000000000000004a .L151
     /tmp/cctJPPhA.s:1822   .text.is_tap_key:000000000000002e .L165
     /tmp/cctJPPhA.s:1839   .text.is_tap_key:0000000000000040 .L166
     /tmp/cctJPPhA.s:1810   .text.is_tap_key:0000000000000020 .L167
     /tmp/cctJPPhA.s:1806   .text.is_tap_key:000000000000001c .L192
     /tmp/cctJPPhA.s:1848   .text.is_tap_key:000000000000004c .L168
     /tmp/cctJPPhA.s:1856   .text.is_tap_key:0000000000000050 .L194
     /tmp/cctJPPhA.s:1828   .text.is_tap_key:0000000000000036 .L170
     /tmp/cctJPPhA.s:1860   .text.is_tap_key:0000000000000054 .L176
     /tmp/cctJPPhA.s:1853   .text.is_tap_key:000000000000004e .L171
     /tmp/cctJPPhA.s:5620   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cctJPPhA.s:7764   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/cctJPPhA.s:7822   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cctJPPhA.s:1957   .text.debug_action:0000000000000000 .LFB121
     /tmp/cctJPPhA.s:1970   .text.debug_action:0000000000000002 .LFE121
     /tmp/cctJPPhA.s:1912   .text.debug_record:0000000000000000 .LFB120
     /tmp/cctJPPhA.s:1950   .text.debug_record:0000000000000020 .LFE120
     /tmp/cctJPPhA.s:6538   .debug_loc:0000000000000000 .LLST25
     /tmp/cctJPPhA.s:1870   .text.debug_event:0000000000000000 .LFB119
     /tmp/cctJPPhA.s:1906   .text.debug_event:000000000000001e .LFE119
     /tmp/cctJPPhA.s:6570   .debug_loc:0000000000000048 .LLST24
     /tmp/cctJPPhA.s:1778   .text.is_tap_key:0000000000000000 .LFB118
     /tmp/cctJPPhA.s:1864   .text.is_tap_key:0000000000000056 .LFE118
     /tmp/cctJPPhA.s:6605   .debug_loc:0000000000000092 .LLST22
     /tmp/cctJPPhA.s:6602   .debug_loc:0000000000000090 .LVUS22
     /tmp/cctJPPhA.s:6628   .debug_loc:00000000000000b4 .LLST23
     /tmp/cctJPPhA.s:6617   .debug_loc:00000000000000aa .LVUS23
     /tmp/cctJPPhA.s:1788   .text.is_tap_key:0000000000000004 .LVL177
     /tmp/cctJPPhA.s:1715   .text.clear_keyboard_but_mods:0000000000000000 .LFB117
     /tmp/cctJPPhA.s:1751   .text.clear_keyboard_but_mods:0000000000000028 .LFE117
     /tmp/cctJPPhA.s:1724   .text.clear_keyboard_but_mods:0000000000000004 .LVL166
     /tmp/cctJPPhA.s:1727   .text.clear_keyboard_but_mods:0000000000000008 .LVL167
     /tmp/cctJPPhA.s:1730   .text.clear_keyboard_but_mods:000000000000000c .LVL168
     /tmp/cctJPPhA.s:1733   .text.clear_keyboard_but_mods:0000000000000010 .LVL169
     /tmp/cctJPPhA.s:1736   .text.clear_keyboard_but_mods:0000000000000014 .LVL170
     /tmp/cctJPPhA.s:1739   .text.clear_keyboard_but_mods:0000000000000018 .LVL171
     /tmp/cctJPPhA.s:1744   .text.clear_keyboard_but_mods:0000000000000020 .LVL172
     /tmp/cctJPPhA.s:1749   .text.clear_keyboard_but_mods:0000000000000028 .LVL173
     /tmp/cctJPPhA.s:1757   .text.clear_keyboard:0000000000000000 .LFB116
     /tmp/cctJPPhA.s:1771   .text.clear_keyboard:0000000000000008 .LFE116
     /tmp/cctJPPhA.s:1766   .text.clear_keyboard:0000000000000004 .LVL174
     /tmp/cctJPPhA.s:1769   .text.clear_keyboard:0000000000000008 .LVL175
     /tmp/cctJPPhA.s:494    .text.unregister_mods:0000000000000000 .LFB115
     /tmp/cctJPPhA.s:516    .text.unregister_mods:000000000000000e .LFE115
     /tmp/cctJPPhA.s:6684   .debug_loc:0000000000000113 .LLST5
     /tmp/cctJPPhA.s:6677   .debug_loc:000000000000010d .LVUS5
     /tmp/cctJPPhA.s:507    .text.unregister_mods:0000000000000008 .LVL57
     /tmp/cctJPPhA.s:510    .text.unregister_mods:000000000000000c .LVL58
     /tmp/cctJPPhA.s:465    .text.register_mods:0000000000000000 .LFB114
     /tmp/cctJPPhA.s:487    .text.register_mods:000000000000000e .LFE114
     /tmp/cctJPPhA.s:6709   .debug_loc:0000000000000145 .LLST4
     /tmp/cctJPPhA.s:6702   .debug_loc:000000000000013f .LVUS4
     /tmp/cctJPPhA.s:478    .text.register_mods:0000000000000008 .LVL54
     /tmp/cctJPPhA.s:481    .text.register_mods:000000000000000c .LVL55
     /tmp/cctJPPhA.s:307    .text.unregister_code:0000000000000000 .LFB113
     /tmp/cctJPPhA.s:458    .text.unregister_code:000000000000009e .LFE113
     /tmp/cctJPPhA.s:6754   .debug_loc:000000000000018b .LLST3
     /tmp/cctJPPhA.s:6727   .debug_loc:0000000000000171 .LVUS3
     /tmp/cctJPPhA.s:326    .text.unregister_code:000000000000000e .LVL32
     /tmp/cctJPPhA.s:333    .text.unregister_code:0000000000000018 .LVL33
     /tmp/cctJPPhA.s:336    .text.unregister_code:000000000000001c .LVL34
     /tmp/cctJPPhA.s:342    .text.unregister_code:0000000000000022 .LVL35
     /tmp/cctJPPhA.s:346    .text.unregister_code:0000000000000026 .LVL36
     /tmp/cctJPPhA.s:355    .text.unregister_code:000000000000002e .LVL37
     /tmp/cctJPPhA.s:362    .text.unregister_code:0000000000000038 .LVL38
     /tmp/cctJPPhA.s:365    .text.unregister_code:000000000000003c .LVL39
     /tmp/cctJPPhA.s:378    .text.unregister_code:0000000000000048 .LVL41
     /tmp/cctJPPhA.s:385    .text.unregister_code:0000000000000052 .LVL42
     /tmp/cctJPPhA.s:388    .text.unregister_code:0000000000000056 .LVL43
     /tmp/cctJPPhA.s:420    .text.unregister_code:000000000000007c .LVL46
     /tmp/cctJPPhA.s:437    .text.unregister_code:000000000000008e .LVL49
     /tmp/cctJPPhA.s:452    .text.unregister_code:000000000000009c .LVL52
     /tmp/cctJPPhA.s:112    .text.register_code:0000000000000000 .LFB112
     /tmp/cctJPPhA.s:300    .text.register_code:00000000000000c4 .LFE112
     /tmp/cctJPPhA.s:6868   .debug_loc:000000000000025d .LLST2
     /tmp/cctJPPhA.s:6829   .debug_loc:0000000000000237 .LVUS2
     /tmp/cctJPPhA.s:131    .text.register_code:000000000000000e .LVL4
     /tmp/cctJPPhA.s:138    .text.register_code:0000000000000018 .LVL5
     /tmp/cctJPPhA.s:141    .text.register_code:000000000000001c .LVL6
     /tmp/cctJPPhA.s:147    .text.register_code:0000000000000022 .LVL7
     /tmp/cctJPPhA.s:151    .text.register_code:0000000000000026 .LVL8
     /tmp/cctJPPhA.s:160    .text.register_code:000000000000002e .LVL9
     /tmp/cctJPPhA.s:167    .text.register_code:0000000000000038 .LVL10
     /tmp/cctJPPhA.s:170    .text.register_code:000000000000003c .LVL11
     /tmp/cctJPPhA.s:183    .text.register_code:0000000000000048 .LVL13
     /tmp/cctJPPhA.s:190    .text.register_code:0000000000000052 .LVL14
     /tmp/cctJPPhA.s:193    .text.register_code:0000000000000056 .LVL15
     /tmp/cctJPPhA.s:208    .text.register_code:0000000000000066 .LVL17
     /tmp/cctJPPhA.s:233    .text.register_code:0000000000000082 .LVL20
     /tmp/cctJPPhA.s:257    .text.register_code:000000000000009c .LVL23
     /tmp/cctJPPhA.s:294    .text.register_code:00000000000000c2 .LVL30
     /tmp/cctJPPhA.s:523    .text.process_action:0000000000000000 .LFB111
     /tmp/cctJPPhA.s:1571   .text.process_action:00000000000004ae .LFE111
     /tmp/cctJPPhA.s:6976   .debug_loc:0000000000000354 .LLST6
     /tmp/cctJPPhA.s:7055   .debug_loc:00000000000003f4 .LLST7
     /tmp/cctJPPhA.s:7044   .debug_loc:00000000000003ea .LVUS7
     /tmp/cctJPPhA.s:7104   .debug_loc:000000000000044c .LLST8
     /tmp/cctJPPhA.s:7099   .debug_loc:0000000000000448 .LVUS8
     /tmp/cctJPPhA.s:7136   .debug_loc:000000000000047e .LLST9
     /tmp/cctJPPhA.s:7125   .debug_loc:0000000000000474 .LVUS9
     /tmp/cctJPPhA.s:7168   .debug_loc:00000000000004c5 .LLST10
     /tmp/cctJPPhA.s:7161   .debug_loc:00000000000004bf .LVUS10
     /tmp/cctJPPhA.s:7207   .debug_loc:0000000000000505 .LLST11
     /tmp/cctJPPhA.s:7202   .debug_loc:0000000000000501 .LVUS11
     /tmp/cctJPPhA.s:7225   .debug_loc:0000000000000529 .LLST12
     /tmp/cctJPPhA.s:7218   .debug_loc:0000000000000523 .LVUS12
     /tmp/cctJPPhA.s:703    .text.process_action:0000000000000094 .LVL72
     /tmp/cctJPPhA.s:707    .text.process_action:0000000000000098 .LVL73
     /tmp/cctJPPhA.s:724    .text.process_action:00000000000000a6 .LVL76
     /tmp/cctJPPhA.s:730    .text.process_action:00000000000000ae .LVL77
     /tmp/cctJPPhA.s:750    .text.process_action:00000000000000c6 .LVL78
     /tmp/cctJPPhA.s:754    .text.process_action:00000000000000ca .LVL79
     /tmp/cctJPPhA.s:815    .text.process_action:0000000000000114 .LVL89
     /tmp/cctJPPhA.s:7247   .debug_loc:0000000000000558 .LLST13
     /tmp/cctJPPhA.s:7240   .debug_loc:0000000000000552 .LVUS13
     /tmp/cctJPPhA.s:886    .text.process_action:0000000000000158 .LVL93
     /tmp/cctJPPhA.s:899    .text.process_action:0000000000000164 .LVL95
     /tmp/cctJPPhA.s:909    .text.process_action:000000000000016e .LVL96
     /tmp/cctJPPhA.s:1041   .text.process_action:00000000000001fa .LBB13
     /tmp/cctJPPhA.s:1184   .text.process_action:00000000000002c2 .LBE13
     /tmp/cctJPPhA.s:7271   .debug_loc:0000000000000589 .LLST14
     /tmp/cctJPPhA.s:7262   .debug_loc:0000000000000581 .LVUS14
     /tmp/cctJPPhA.s:7331   .debug_loc:00000000000005e5 .LLST15
     /tmp/cctJPPhA.s:7324   .debug_loc:00000000000005df .LVUS15
     /tmp/cctJPPhA.s:1140   .text.process_action:000000000000028c .LVL112
     /tmp/cctJPPhA.s:1163   .text.process_action:00000000000002ae .LVL115
     /tmp/cctJPPhA.s:1170   .text.process_action:00000000000002b4 .LVL117
     /tmp/cctJPPhA.s:1178   .text.process_action:00000000000002c0 .LVL118
     /tmp/cctJPPhA.s:7388   .debug_loc:0000000000000637 .LLST16
     /tmp/cctJPPhA.s:7379   .debug_loc:000000000000062f .LVUS16
     /tmp/cctJPPhA.s:7448   .debug_loc:0000000000000693 .LLST17
     /tmp/cctJPPhA.s:7441   .debug_loc:000000000000068d .LVUS17
     /tmp/cctJPPhA.s:1294   .text.process_action:0000000000000360 .LVL125
     /tmp/cctJPPhA.s:1327   .text.process_action:000000000000038a .LVL129
     /tmp/cctJPPhA.s:1334   .text.process_action:0000000000000390 .LVL131
     /tmp/cctJPPhA.s:1342   .text.process_action:000000000000039c .LVL132
     /tmp/cctJPPhA.s:594    .text.process_action:0000000000000032 .LVL62
     /tmp/cctJPPhA.s:634    .text.process_action:0000000000000048 .LVL65
     /tmp/cctJPPhA.s:638    .text.process_action:000000000000004c .LVL66
     /tmp/cctJPPhA.s:651    .text.process_action:000000000000005e .LVL67
     /tmp/cctJPPhA.s:655    .text.process_action:0000000000000062 .LVL68
     /tmp/cctJPPhA.s:716    .text.process_action:000000000000009e .LVL74
     /tmp/cctJPPhA.s:765    .text.process_action:00000000000000d4 .LVL80
     /tmp/cctJPPhA.s:775    .text.process_action:00000000000000e0 .LVL81
     /tmp/cctJPPhA.s:777    .text.process_action:00000000000000e4 .LVL82
     /tmp/cctJPPhA.s:781    .text.process_action:00000000000000ea .LVL83
     /tmp/cctJPPhA.s:784    .text.process_action:00000000000000ee .LVL84
     /tmp/cctJPPhA.s:809    .text.process_action:000000000000010e .LVL88
     /tmp/cctJPPhA.s:921    .text.process_action:0000000000000174 .LVL98
     /tmp/cctJPPhA.s:963    .text.process_action:000000000000019c .LVL101
     /tmp/cctJPPhA.s:990    .text.process_action:00000000000001c2 .LVL102
     /tmp/cctJPPhA.s:1006   .text.process_action:00000000000001d6 .LVL103
     /tmp/cctJPPhA.s:1017   .text.process_action:00000000000001e2 .LVL104
     /tmp/cctJPPhA.s:1022   .text.process_action:00000000000001e6 .LVL105
     /tmp/cctJPPhA.s:1027   .text.process_action:00000000000001ec .LVL106
     /tmp/cctJPPhA.s:1397   .text.process_action:00000000000003e2 .LVL134
     /tmp/cctJPPhA.s:1402   .text.process_action:00000000000003ea .LVL135
     /tmp/cctJPPhA.s:1418   .text.process_action:00000000000003fe .LVL136
     /tmp/cctJPPhA.s:1425   .text.process_action:0000000000000406 .LVL137
     /tmp/cctJPPhA.s:1445   .text.process_action:000000000000041c .LVL138
     /tmp/cctJPPhA.s:1463   .text.process_action:000000000000042e .LVL139
     /tmp/cctJPPhA.s:1476   .text.process_action:000000000000043c .LVL140
     /tmp/cctJPPhA.s:1487   .text.process_action:000000000000044a .LVL141
     /tmp/cctJPPhA.s:1492   .text.process_action:0000000000000450 .LVL142
     /tmp/cctJPPhA.s:1498   .text.process_action:0000000000000458 .LVL143
     /tmp/cctJPPhA.s:1507   .text.process_action:0000000000000464 .LVL144
     /tmp/cctJPPhA.s:1528   .text.process_action:000000000000047c .LVL145
     /tmp/cctJPPhA.s:1530   .text.process_action:0000000000000480 .LVL146
     /tmp/cctJPPhA.s:1542   .text.process_action:000000000000048e .LVL147
     /tmp/cctJPPhA.s:1578   .text.process_record:0000000000000000 .LFB110
     /tmp/cctJPPhA.s:1681   .text.process_record:0000000000000054 .LFE110
     /tmp/cctJPPhA.s:7496   .debug_loc:00000000000006dd .LLST18
     /tmp/cctJPPhA.s:7542   .debug_loc:0000000000000732 .LLST19
     /tmp/cctJPPhA.s:7529   .debug_loc:0000000000000726 .LVUS19
     /tmp/cctJPPhA.s:1610   .text.process_record:000000000000000e .LBI16
     /tmp/cctJPPhA.s:1609   .text.process_record:000000000000000e .LBB16
     /tmp/cctJPPhA.s:1628   .text.process_record:000000000000001c .LBE16
     /tmp/cctJPPhA.s:7602   .debug_loc:000000000000079c .LLST20
     /tmp/cctJPPhA.s:7595   .debug_loc:0000000000000796 .LVUS20
     /tmp/cctJPPhA.s:1633   .text.process_record:0000000000000022 .LVL157
     /tmp/cctJPPhA.s:1643   .text.process_record:0000000000000030 .LVL158
     /tmp/cctJPPhA.s:1650   .text.process_record:0000000000000036 .LVL159
     /tmp/cctJPPhA.s:1654   .text.process_record:000000000000003a .LVL160
     /tmp/cctJPPhA.s:1669   .text.process_record:000000000000004a .LVL162
     /tmp/cctJPPhA.s:90     .text.process_record_quantum:0000000000000000 .LFB109
     /tmp/cctJPPhA.s:105    .text.process_record_quantum:0000000000000004 .LFE109
     /tmp/cctJPPhA.s:7649   .debug_loc:00000000000007e4 .LLST1
     /tmp/cctJPPhA.s:7644   .debug_loc:00000000000007e0 .LVUS1
     /tmp/cctJPPhA.s:1688   .text.process_record_nocache:0000000000000000 .LFB108
     /tmp/cctJPPhA.s:1709   .text.process_record_nocache:0000000000000010 .LFE108
     /tmp/cctJPPhA.s:7673   .debug_loc:000000000000080e .LLST21
     /tmp/cctJPPhA.s:7668   .debug_loc:000000000000080a .LVUS21
     /tmp/cctJPPhA.s:1701   .text.process_record_nocache:000000000000000a .LVL165
     /tmp/cctJPPhA.s:15     .text.action_exec:0000000000000000 .LFB107
     /tmp/cctJPPhA.s:83     .text.action_exec:0000000000000052 .LFE107
     /tmp/cctJPPhA.s:7692   .debug_loc:0000000000000834 .LLST0
     /tmp/cctJPPhA.s:81     .text.action_exec:0000000000000052 .LVL0
     /tmp/cctJPPhA.s:1916   .text.debug_record:0000000000000002 .LCFI22
     /tmp/cctJPPhA.s:1920   .text.debug_record:0000000000000004 .LCFI23
     /tmp/cctJPPhA.s:1926   .text.debug_record:000000000000000a .LCFI24
     /tmp/cctJPPhA.s:1930   .text.debug_record:000000000000000e .LCFI25
     /tmp/cctJPPhA.s:1874   .text.debug_event:0000000000000002 .LCFI18
     /tmp/cctJPPhA.s:1878   .text.debug_event:0000000000000004 .LCFI19
     /tmp/cctJPPhA.s:1884   .text.debug_event:000000000000000a .LCFI20
     /tmp/cctJPPhA.s:1888   .text.debug_event:000000000000000e .LCFI21
     /tmp/cctJPPhA.s:1777   .text.is_tap_key:0000000000000000 .LVL176
     /tmp/cctJPPhA.s:1791   .text.is_tap_key:0000000000000006 .LVL178
     /tmp/cctJPPhA.s:1821   .text.is_tap_key:000000000000002e .LVL179
     /tmp/cctJPPhA.s:1832   .text.is_tap_key:0000000000000038 .LVL180
     /tmp/cctJPPhA.s:1838   .text.is_tap_key:0000000000000040 .LVL181
     /tmp/cctJPPhA.s:1847   .text.is_tap_key:000000000000004c .LVL182
     /tmp/cctJPPhA.s:1852   .text.is_tap_key:000000000000004e .LVL183
     /tmp/cctJPPhA.s:493    .text.unregister_mods:0000000000000000 .LVL56
     /tmp/cctJPPhA.s:464    .text.register_mods:0000000000000000 .LVL53
     /tmp/cctJPPhA.s:306    .text.unregister_code:0000000000000000 .LVL31
     /tmp/cctJPPhA.s:369    .text.unregister_code:0000000000000040 .LVL40
     /tmp/cctJPPhA.s:392    .text.unregister_code:000000000000005a .LVL44
     /tmp/cctJPPhA.s:409    .text.unregister_code:000000000000006c .LVL45
     /tmp/cctJPPhA.s:423    .text.unregister_code:000000000000007e .LVL47
     /tmp/cctJPPhA.s:434    .text.unregister_code:000000000000008a .LVL48
     /tmp/cctJPPhA.s:442    .text.unregister_code:0000000000000090 .LVL50
     /tmp/cctJPPhA.s:449    .text.unregister_code:0000000000000098 .LVL51
     /tmp/cctJPPhA.s:111    .text.register_code:0000000000000000 .LVL3
     /tmp/cctJPPhA.s:174    .text.register_code:0000000000000040 .LVL12
     /tmp/cctJPPhA.s:197    .text.register_code:000000000000005a .LVL16
     /tmp/cctJPPhA.s:211    .text.register_code:0000000000000068 .LVL18
     /tmp/cctJPPhA.s:222    .text.register_code:0000000000000072 .LVL19
     /tmp/cctJPPhA.s:236    .text.register_code:0000000000000084 .LVL21
     /tmp/cctJPPhA.s:253    .text.register_code:0000000000000098 .LVL22
     /tmp/cctJPPhA.s:262    .text.register_code:00000000000000a0 .LVL24
     /tmp/cctJPPhA.s:265    .text.register_code:00000000000000a2 .LVL25
     /tmp/cctJPPhA.s:270    .text.register_code:00000000000000a6 .LVL26
     /tmp/cctJPPhA.s:273    .text.register_code:00000000000000a8 .LVL27
     /tmp/cctJPPhA.s:278    .text.register_code:00000000000000aa .LVL28
     /tmp/cctJPPhA.s:287    .text.register_code:00000000000000b6 .LVL29
     /tmp/cctJPPhA.s:528    .text.process_action:0000000000000002 .LCFI4
     /tmp/cctJPPhA.s:532    .text.process_action:0000000000000004 .LCFI5
     /tmp/cctJPPhA.s:536    .text.process_action:0000000000000006 .LCFI6
     /tmp/cctJPPhA.s:540    .text.process_action:0000000000000008 .LCFI7
     /tmp/cctJPPhA.s:544    .text.process_action:000000000000000a .LCFI8
     /tmp/cctJPPhA.s:548    .text.process_action:000000000000000c .LCFI9
     /tmp/cctJPPhA.s:552    .text.process_action:000000000000000e .LCFI10
     /tmp/cctJPPhA.s:556    .text.process_action:0000000000000010 .LCFI11
     /tmp/cctJPPhA.s:562    .text.process_action:0000000000000016 .LCFI12
     /tmp/cctJPPhA.s:566    .text.process_action:000000000000001a .LCFI13
     /tmp/cctJPPhA.s:522    .text.process_action:0000000000000000 .LVL59
     /tmp/cctJPPhA.s:801    .text.process_action:0000000000000106 .LVL86
     /tmp/cctJPPhA.s:1563   .text.process_action:00000000000004a8 .LVL150
     /tmp/cctJPPhA.s:630    .text.process_action:0000000000000044 .LVL64
     /tmp/cctJPPhA.s:576    .text.process_action:0000000000000020 .LVL60
     /tmp/cctJPPhA.s:598    .text.process_action:0000000000000034 .LVL63
     /tmp/cctJPPhA.s:660    .text.process_action:0000000000000068 .LVL69
     /tmp/cctJPPhA.s:804    .text.process_action:0000000000000108 .LVL87
     /tmp/cctJPPhA.s:1566   .text.process_action:00000000000004aa .LVL151
     /tmp/cctJPPhA.s:796    .text.process_action:0000000000000100 .LVL85
     /tmp/cctJPPhA.s:1558   .text.process_action:00000000000004a2 .LVL149
     /tmp/cctJPPhA.s:584    .text.process_action:0000000000000028 .LVL61
     /tmp/cctJPPhA.s:668    .text.process_action:000000000000006c .LVL70
     /tmp/cctJPPhA.s:817    .text.process_action:0000000000000116 .LVL90
     /tmp/cctJPPhA.s:1545   .text.process_action:0000000000000490 .LVL148
     /tmp/cctJPPhA.s:679    .text.process_action:0000000000000078 .LVL71
     /tmp/cctJPPhA.s:718    .text.process_action:00000000000000a0 .LVL75
     /tmp/cctJPPhA.s:842    .text.process_action:000000000000012a .LVL91
     /tmp/cctJPPhA.s:882    .text.process_action:0000000000000154 .LVL92
     /tmp/cctJPPhA.s:888    .text.process_action:000000000000015a .LVL94
     /tmp/cctJPPhA.s:915    .text.process_action:0000000000000170 .LVL97
     /tmp/cctJPPhA.s:923    .text.process_action:0000000000000176 .LVL99
     /tmp/cctJPPhA.s:955    .text.process_action:0000000000000196 .LVL100
     /tmp/cctJPPhA.s:1077   .text.process_action:000000000000022c .LVL108
     /tmp/cctJPPhA.s:1143   .text.process_action:000000000000028e .LVL113
     /tmp/cctJPPhA.s:1166   .text.process_action:00000000000002b0 .LVL116
     /tmp/cctJPPhA.s:1106   .text.process_action:0000000000000256 .LVL109
     /tmp/cctJPPhA.s:1137   .text.process_action:0000000000000288 .LVL111
     /tmp/cctJPPhA.s:1160   .text.process_action:00000000000002aa .LVL114
     /tmp/cctJPPhA.s:1231   .text.process_action:0000000000000300 .LVL121
     /tmp/cctJPPhA.s:1306   .text.process_action:000000000000036a .LVL127
     /tmp/cctJPPhA.s:1330   .text.process_action:000000000000038c .LVL130
     /tmp/cctJPPhA.s:1260   .text.process_action:000000000000032a .LVL122
     /tmp/cctJPPhA.s:1291   .text.process_action:000000000000035c .LVL124
     /tmp/cctJPPhA.s:1324   .text.process_action:0000000000000386 .LVL128
     /tmp/cctJPPhA.s:1583   .text.process_record:0000000000000002 .LCFI14
     /tmp/cctJPPhA.s:1587   .text.process_record:0000000000000004 .LCFI15
     /tmp/cctJPPhA.s:1591   .text.process_record:0000000000000006 .LCFI16
     /tmp/cctJPPhA.s:1595   .text.process_record:0000000000000008 .LCFI17
     /tmp/cctJPPhA.s:1577   .text.process_record:0000000000000000 .LVL152
     /tmp/cctJPPhA.s:1608   .text.process_record:000000000000000e .LVL154
     /tmp/cctJPPhA.s:1663   .text.process_record:0000000000000042 .LVL161
     /tmp/cctJPPhA.s:1675   .text.process_record:000000000000004e .LVL163
     /tmp/cctJPPhA.s:1605   .text.process_record:000000000000000c .LVL153
     /tmp/cctJPPhA.s:1621   .text.process_record:0000000000000018 .LVL155
     /tmp/cctJPPhA.s:1625   .text.process_record:000000000000001c .LVL156
     /tmp/cctJPPhA.s:89     .text.process_record_quantum:0000000000000000 .LVL1
     /tmp/cctJPPhA.s:100    .text.process_record_quantum:0000000000000002 .LVL2
     /tmp/cctJPPhA.s:1687   .text.process_record_nocache:0000000000000000 .LVL164
     /tmp/cctJPPhA.s:19     .text.action_exec:0000000000000002 .LCFI0
     /tmp/cctJPPhA.s:23     .text.action_exec:0000000000000004 .LCFI1
     /tmp/cctJPPhA.s:28     .text.action_exec:0000000000000008 .LCFI2
     /tmp/cctJPPhA.s:31     .text.action_exec:000000000000000a .LCFI3
     /tmp/cctJPPhA.s:2016   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/cctJPPhA.s:664    .text.process_action:000000000000006a .LBB6
     /tmp/cctJPPhA.s:711    .text.process_action:0000000000000098 .LBE6
     /tmp/cctJPPhA.s:720    .text.process_action:00000000000000a0 .LBB7
     /tmp/cctJPPhA.s:757    .text.process_action:00000000000000ca .LBE7
     /tmp/cctJPPhA.s:811    .text.process_action:000000000000010e .LBB8
     /tmp/cctJPPhA.s:820    .text.process_action:0000000000000116 .LBE8
     /tmp/cctJPPhA.s:824    .text.process_action:0000000000000116 .LBB10
     /tmp/cctJPPhA.s:829    .text.process_action:000000000000011c .LBE10
     /tmp/cctJPPhA.s:821    .text.process_action:0000000000000116 .LBB9
     /tmp/cctJPPhA.s:823    .text.process_action:0000000000000116 .LBE9
     /tmp/cctJPPhA.s:830    .text.process_action:000000000000011c .LBB11
     /tmp/cctJPPhA.s:918    .text.process_action:0000000000000170 .LBE11
     /tmp/cctJPPhA.s:925    .text.process_action:0000000000000176 .LBB12
     /tmp/cctJPPhA.s:958    .text.process_action:0000000000000196 .LBE12
     /tmp/cctJPPhA.s:1195   .text.process_action:00000000000002ce .LBB14
     /tmp/cctJPPhA.s:1300   .text.process_action:0000000000000362 .LBE14
     /tmp/cctJPPhA.s:1308   .text.process_action:000000000000036a .LBB15
     /tmp/cctJPPhA.s:1348   .text.process_action:000000000000039e .LBE15

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
is_oneshot_layer_active
__tablejump2__
clear_weak_mods
clear_oneshot_layer_state
add_weak_mods
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
set_oneshot_layer
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_copy_data
__do_clear_bss
