
news_usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00005466  000054fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025b  0080013e  0080013e  00005538  2**0
                  ALLOC
  3 .noinit       00000004  00800399  00800399  00005538  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005538  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005e63  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005e74  2**2
                  CONTENTS, READONLY, OCTETS
  8 .debug_aranges 00000988  00000000  00000000  00005eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000148be  00000000  00000000  0000683c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005470  00000000  00000000  0001b0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00011fb5  00000000  00000000  0002056a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001a28  00000000  00000000  00032520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000043a4  00000000  00000000  00033f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ab39  00000000  00000000  000382ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  00042e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__ctors_end>
       4:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
       8:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
       c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      10:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      14:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      18:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      1c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      20:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      24:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      28:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_10>
      2c:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__vector_11>
      30:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__vector_12>
      34:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      38:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      3c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      40:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      44:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      48:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      4c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      50:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      54:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__vector_21>
      58:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      5c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      60:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      64:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__vector_25>
      68:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      6c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      70:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      74:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      78:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      7c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      80:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      84:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      88:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      8c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      90:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      94:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      98:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      9c:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      a0:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      a4:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>
      a8:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__bad_interrupt>

000000ac <keymaps>:
      ac:	00 00 00 00 29 1e 1f 20 21 22 23 24 25 26 27 2d     ....).. !"#$%&'-
      bc:	2e 2a 2b 14 1a 08 15 17 1c 18 0c 12 13 2f 30 28     .*+........../0(
      cc:	00 04 16 07 09 0a 0b 0d 0e 0f 33 34 35 e1 00 1d     ..........345...
      dc:	1b 06 19 05 11 10 36 37 38 e5 e0 00 00 2c 00 e2     ......678....,..
      ec:	57 56 55 54 53 5f 60 61 58 5c 5d 5e 00 59 5a 5b     WVUTS_`aX\]^.YZ[
      fc:	62 00 63 85 44 45 4a 4b 4d 4e 00 52 51 50 4f 00     b.c.DEJKMN.RQPO.
     10c:	00 00 00 3a 3b 3c 3d 3e 3f 40 41 42 43 39 00 00     ...:;<=>?@ABC9..
     11c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000012c <fn_keycode>:
     12c:	00 00 00 00 00 00 00 00                             ........

00000134 <fn_layer>:
     134:	00 00 00 00 00 00 00 00                             ........

0000013c <__c.1929>:
     13c:	20 00                                                .

0000013e <__c.1927>:
     13e:	25 30 32 58 00                                      %02X.

00000143 <__c.5265>:
     143:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     153:	0a 00                                               ..

00000155 <__c.5263>:
     155:	0a 55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e     .USB configured.
     165:	0a 00                                               ..

00000167 <__c.5258>:
     167:	0a 0a 54 4d 4b 3a 38 66 38 36 64 31 32 35 2f 4c     ..TMK:8f86d125/L
     177:	55 46 41 0a 0a 00                                   UFA...

0000017d <ProductString>:
     17d:	3a 03 53 00 4f 00 4e 00 59 00 20 00 4e 00 45 00     :.S.O.N.Y. .N.E.
     18d:	57 00 53 00 20 00 6b 00 65 00 79 00 62 00 6f 00     W.S. .k.e.y.b.o.
     19d:	61 00 72 00 64 00 20 00 63 00 6f 00 6e 00 76 00     a.r.d. .c.o.n.v.
     1ad:	65 00 72 00 74 00 65 00 72 00 00 00                 e.r.t.e.r...

000001b9 <ManufacturerString>:
     1b9:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

000001c9 <LanguageString>:
     1c9:	04 03 09 04                                         ....

000001cd <ConfigurationDescriptor>:
     1cd:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     1dd:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     1ed:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1fd:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     20d:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     21d:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     22d:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     23d:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     24d:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

0000025a <DeviceDescriptor>:
     25a:	12 01 10 01 00 00 00 08 ed fe 21 50 01 00 01 02     ..........!P....
     26a:	00 01                                               ..

0000026c <NKROReport>:
     26c:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     27c:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     28c:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     29c:	25 01 95 f8 75 01 81 02 c0                          %...u....

000002a5 <ConsoleReport>:
     2a5:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     2b5:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     2c5:	02 c0                                               ..

000002c7 <ExtrakeyReport>:
     2c7:	05 01 09 80 a1 01 85 02 16 01 00 26 37 00 1a 81     ...........&7...
     2d7:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2e7:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2f7:	10 95 01 81 00 c0                                   ......

000002fd <MouseReport>:
     2fd:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     30d:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     31d:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     32d:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     33d:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000034a <KeyboardReport>:
     34a:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     35a:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     36a:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     37a:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

0000038a <__c.4790>:
     38a:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

0000039a <__c.4785>:
     39a:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

000003a8 <__c.4777>:
     3a8:	0a 00                                               ..

000003aa <__c.4772>:
     3aa:	25 30 32 58 20 00                                   %02X .

000003b0 <__c.4769>:
     3b0:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000003bb <__c.5148>:
     3bb:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000003c6 <__c.1793>:
     3c6:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

000003d4 <__c.1790>:
     3d4:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

000003e2 <__c.4917>:
     3e2:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     3f2:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000400 <__c.4912>:
     400:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     410:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000041e <__c.5100>:
     41e:	64 6f 6e 65 2e 0a 00                                done...

00000425 <__c.5094>:
     425:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     435:	2e 2e 2e 20 00                                      ... .

0000043a <__c.4849>:
     43a:	29 0a 00                                            )..

0000043d <__c.4847>:
     43d:	25 75 00                                            %u.

00000440 <__c.4845>:
     440:	2f 00                                               /.

00000442 <__c.4843>:
     442:	25 75 00                                            %u.

00000445 <__c.4841>:
     445:	5d 28 00                                            ](.

00000448 <__c.4839>:
     448:	25 64 00                                            %d.

0000044b <__c.4837>:
     44b:	20 00                                                .

0000044d <__c.4835>:
     44d:	25 64 00                                            %d.

00000450 <__c.4833>:
     450:	20 00                                                .

00000452 <__c.4831>:
     452:	25 64 00                                            %d.

00000455 <__c.4829>:
     455:	20 00                                                .

00000457 <__c.4827>:
     457:	25 64 00                                            %d.

0000045a <__c.4825>:
     45a:	7c 00                                               |.

0000045c <__c.4823>:
     45c:	25 30 32 58 00                                      %02X.

00000461 <__c.4821>:
     461:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     471:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     481:	20 5b 00                                             [.

00000484 <__c.5471>:
     484:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     494:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000049f <__c.5468>:
     49f:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4af:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004b8 <__c.5465>:
     4b8:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4c8:	20 25 64 0a 00                                       %d..

000004cd <__c.5462>:
     4cd:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     4dd:	64 0a 00                                            d..

000004e0 <__c.5459>:
     4e0:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     4f0:	0a 00                                               ..

000004f2 <__c.5455>:
     4f2:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000501 <__c.5448>:
     501:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     511:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000051c <__c.5445>:
     51c:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     52c:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000535 <__c.5442>:
     535:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     545:	20 25 64 0a 00                                       %d..

0000054a <__c.5439>:
     54a:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     55a:	64 0a 00                                            d..

0000055d <__c.5436>:
     55d:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     56d:	0a 00                                               ..

0000056f <__c.5432>:
     56f:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000057e <__c.5425>:
     57e:	0a 00                                               ..

00000580 <__c.5423>:
     580:	25 75 00                                            %u.

00000583 <__c.5421>:
     583:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     593:	5f 6d 61 78 3a 20 00                                _max: .

0000059a <__c.5419>:
     59a:	0a 00                                               ..

0000059c <__c.5417>:
     59c:	25 75 00                                            %u.

0000059f <__c.5415>:
     59f:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     5af:	65 64 3a 20 00                                      ed: .

000005b4 <__c.5413>:
     5b4:	0a 00                                               ..

000005b6 <__c.5411>:
     5b6:	25 75 00                                            %u.

000005b9 <__c.5409>:
     5b9:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     5c9:	00                                                  .

000005ca <__c.5407>:
     5ca:	0a 00                                               ..

000005cc <__c.5405>:
     5cc:	25 75 00                                            %u.

000005cf <__c.5403>:
     5cf:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000005de <__c.5401>:
     5de:	0a 00                                               ..

000005e0 <__c.5399>:
     5e0:	25 75 00                                            %u.

000005e3 <__c.5397>:
     5e3:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     5f3:	20 00                                                .

000005f5 <__c.5395>:
     5f5:	0a 00                                               ..

000005f7 <__c.5393>:
     5f7:	25 75 00                                            %u.

000005fa <__c.5391>:
     5fa:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     60a:	20 00                                                .

0000060c <__c.5389>:
     60c:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000061a <__c.5509>:
     61a:	4d 3e 00                                            M>.

0000061d <__c.5507>:
     61d:	4d 25 64 3e 20 00                                   M%d> .

00000623 <__c.5505>:
     623:	3f 00                                               ?.

00000625 <__c.5502>:
     625:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000632 <__c.5488>:
     632:	43 3e 20 00                                         C> .

00000636 <__c.5478>:
     636:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     646:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     656:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     666:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     676:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000684 <__c.5476>:
     684:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     694:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     6a4:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     6b4:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     6c4:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     6d4:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     6e4:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     6f4:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     704:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     714:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     724:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     734:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     744:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     754:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     764:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     774:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000077f <__c.5381>:
     77f:	3f 00                                               ?.

00000781 <__c.5378>:
     781:	4d 3e 20 00                                         M> .

00000785 <__c.5383>:
     785:	43 3e 20 00                                         C> .

00000789 <__c.5527>:
     789:	4c 25 64 0a 00                                      L%d..

0000078e <__c.5367>:
     78e:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     79e:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     7ae:	73 65 6b 65 79 0a 00                                sekey..

000007b5 <__c.5192>:
     7b5:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     7c5:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     7d5:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     7e5:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     7f5:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     805:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     815:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     825:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     835:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     845:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     855:	4b 52 4f 0a 00                                      KRO..

0000085a <__c.5287>:
     85a:	0a 00                                               ..

0000085c <__c.5285>:
     85c:	25 75 00                                            %u.

0000085f <__c.5283>:
     85f:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000867 <__c.5281>:
     867:	0a 00                                               ..

00000869 <__c.5279>:
     869:	25 75 00                                            %u.

0000086c <__c.5277>:
     86c:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     87c:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000888 <__c.5275>:
     888:	0a 00                                               ..

0000088a <__c.5273>:
     88a:	25 75 00                                            %u.

0000088d <__c.5271>:
     88d:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     89d:	20 00                                                .

0000089f <__c.5269>:
     89f:	0a 00                                               ..

000008a1 <__c.5267>:
     8a1:	25 75 00                                            %u.

000008a4 <__c.5265>:
     8a4:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000008ae <__c.5263>:
     8ae:	0a 00                                               ..

000008b0 <__c.5261>:
     8b0:	25 75 00                                            %u.

000008b3 <__c.5259>:
     8b3:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     8c3:	20 00                                                .

000008c5 <__c.5257>:
     8c5:	0a 00                                               ..

000008c7 <__c.5255>:
     8c7:	25 75 00                                            %u.

000008ca <__c.5253>:
     8ca:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     8da:	20 00                                                .

000008dc <__c.5251>:
     8dc:	0a 00                                               ..

000008de <__c.5249>:
     8de:	25 75 00                                            %u.

000008e1 <__c.5247>:
     8e1:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     8f1:	74 72 6f 6c 3a 20 00                                trol: .

000008f8 <__c.5245>:
     8f8:	0a 00                                               ..

000008fa <__c.5243>:
     8fa:	25 75 00                                            %u.

000008fd <__c.5241>:
     8fd:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     90d:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000916 <__c.5239>:
     916:	0a 00                                               ..

00000918 <__c.5237>:
     918:	25 30 32 58 00                                      %02X.

0000091d <__c.5235>:
     91d:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     92d:	77 3a 20 00                                         w: .

00000931 <__c.5232>:
     931:	0a 00                                               ..

00000933 <__c.5230>:
     933:	25 75 00                                            %u.

00000936 <__c.5228>:
     936:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

0000093f <__c.5226>:
     93f:	0a 00                                               ..

00000941 <__c.5224>:
     941:	25 75 00                                            %u.

00000944 <__c.5222>:
     944:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000950 <__c.5220>:
     950:	0a 00                                               ..

00000952 <__c.5218>:
     952:	25 75 00                                            %u.

00000955 <__c.5216>:
     955:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

0000095f <__c.5214>:
     95f:	0a 00                                               ..

00000961 <__c.5212>:
     961:	25 75 00                                            %u.

00000964 <__c.5210>:
     964:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

0000096e <__c.5208>:
     96e:	0a 00                                               ..

00000970 <__c.5206>:
     970:	25 30 32 58 00                                      %02X.

00000975 <__c.5204>:
     975:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     985:	3a 20 00                                            : .

00000988 <__c.5201>:
     988:	0a 00                                               ..

0000098a <__c.5199>:
     98a:	25 75 00                                            %u.

0000098d <__c.5197>:
     98d:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

0000099d <__c.5362>:
     99d:	3f 00                                               ?.

0000099f <__c.5353>:
     99f:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

000009aa <__c.5351>:
     9aa:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

000009b4 <__c.5348>:
     9b4:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     9c4:	25 30 34 6c 58 0a 00                                %04lX..

000009cb <__c.5346>:
     9cb:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     9db:	58 0a 00                                            X..

000009de <__c.5344>:
     9de:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     9ee:	58 0a 00                                            X..

000009f1 <__c.5342>:
     9f1:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     a01:	6c 3a 20 25 58 0a 00                                l: %X..

00000a08 <__c.5340>:
     a08:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a18:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000a22 <__c.5338>:
     a22:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000a30 <__c.5335>:
     a30:	47 43 43 3a 20 38 2e 33 2e 30 20 41 56 52 2d 4c     GCC: 8.3.0 AVR-L
     a40:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     a50:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000a5b <__c.5333>:
     a5b:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     a6b:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     a7b:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     a8b:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     a9b:	30 39 36 0a 00                                      096..

00000aa0 <__c.5331>:
     aa0:	42 55 49 4c 44 3a 20 38 66 38 36 64 31 32 35 20     BUILD: 8f86d125 
     ab0:	28 31 35 3a 35 39 3a 31 39 20 44 65 63 20 31 33     (15:59:19 Dec 13
     ac0:	20 32 30 32 30 29 0a 00                              2020)..

00000ac8 <__c.5329>:
     ac8:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     ad8:	6b 2e 29 20 50 49 44 3a 20 30 78 35 30 32 31 28     k.) PID: 0x5021(
     ae8:	53 4f 4e 59 20 4e 45 57 53 20 6b 65 79 62 6f 61     SONY NEWS keyboa
     af8:	72 64 20 63 6f 6e 76 65 72 74 65 72 29 20 56 45     rd converter) VE
     b08:	52 3a 20 30 78 30 30 30 31 0a 00                    R: 0x0001..

00000b13 <__c.5327>:
     b13:	44 45 53 43 3a 20 63 6f 6e 76 65 72 74 73 20 53     DESC: converts S
     b23:	4f 4e 59 20 4e 45 57 53 20 70 72 6f 74 6f 63 6f     ONY NEWS protoco
     b33:	6c 20 69 6e 74 6f 20 55 53 42 0a 00                 l into USB..

00000b3f <__c.5325>:
     b3f:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000b4e <__c.5322>:
     b4e:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000b5b <__c.5320>:
     b5b:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000b67 <__c.5317>:
     b67:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000b77 <__c.5315>:
     b77:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000b86 <__c.5312>:
     b86:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000b94 <__c.5310>:
     b94:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000ba1 <__c.5307>:
     ba1:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000bad <__c.5305>:
     bad:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000bba <__c.5302>:
     bba:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     bca:	00                                                  .

00000bcb <__c.5299>:
     bcb:	43 3e 20 00                                         C> .

00000bcf <__c.5293>:
     bcf:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000bda <__ctors_end>:
     bda:	11 24       	eor	r1, r1
     bdc:	1f be       	out	0x3f, r1	; 63
     bde:	cf ef       	ldi	r28, 0xFF	; 255
     be0:	da e0       	ldi	r29, 0x0A	; 10
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	cd bf       	out	0x3d, r28	; 61

00000be6 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     be6:	04 b6       	in	r0, 0x34	; 52
     be8:	03 fe       	sbrs	r0, 3
     bea:	28 c0       	rjmp	.+80     	; 0xc3c <__do_copy_data>
     bec:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <reset_key>
     bf0:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <reset_key+0x1>
     bf4:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <reset_key+0x2>
     bf8:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <reset_key+0x3>
     bfc:	87 30       	cpi	r24, 0x07	; 7
     bfe:	90 4b       	sbci	r25, 0xB0	; 176
     c00:	a7 40       	sbci	r26, 0x07	; 7
     c02:	b0 4b       	sbci	r27, 0xB0	; 176
     c04:	d9 f4       	brne	.+54     	; 0xc3c <__do_copy_data>
        reset_key = 0;
     c06:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <reset_key>
     c0a:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <reset_key+0x1>
     c0e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <reset_key+0x2>
     c12:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <reset_key+0x3>

        // some of bootloaders may need to preseve?
        MCUSR = 0;
     c16:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	a8 95       	wdr
     c1e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     c22:	88 61       	ori	r24, 0x18	; 24
     c24:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     c28:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     c2c:	0f be       	out	0x3f, r0	; 63

#ifndef NO_BOOTLOADER_CATERINA_BOOTKEY
        // Clear bootkey of Caterina bootloader for other bootloaders
        // Leonardo and Pro Micro with Arduino default fuse setting don't reach here
        // because bootloader section are executed before application everytime.
        *(volatile uint16_t *)0x0800 = 0;
     c2e:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <_end+0x464>
     c32:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <_end+0x463>
#endif

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))( (uint16_t)(BOOTLOADER_START / 2) ))();
     c36:	e0 e0       	ldi	r30, 0x00	; 0
     c38:	f8 e3       	ldi	r31, 0x38	; 56
     c3a:	09 95       	icall

00000c3c <__do_copy_data>:
     c3c:	11 e0       	ldi	r17, 0x01	; 1
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b1 e0       	ldi	r27, 0x01	; 1
     c42:	e6 e6       	ldi	r30, 0x66	; 102
     c44:	f4 e5       	ldi	r31, 0x54	; 84
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <__do_copy_data+0x10>
     c48:	05 90       	lpm	r0, Z+
     c4a:	0d 92       	st	X+, r0
     c4c:	ae 33       	cpi	r26, 0x3E	; 62
     c4e:	b1 07       	cpc	r27, r17
     c50:	d9 f7       	brne	.-10     	; 0xc48 <__do_copy_data+0xc>

00000c52 <__do_clear_bss>:
     c52:	23 e0       	ldi	r18, 0x03	; 3
     c54:	ae e3       	ldi	r26, 0x3E	; 62
     c56:	b1 e0       	ldi	r27, 0x01	; 1
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <.do_clear_bss_start>

00000c5a <.do_clear_bss_loop>:
     c5a:	1d 92       	st	X+, r1

00000c5c <.do_clear_bss_start>:
     c5c:	a9 39       	cpi	r26, 0x99	; 153
     c5e:	b2 07       	cpc	r27, r18
     c60:	e1 f7       	brne	.-8      	; 0xc5a <.do_clear_bss_loop>
     c62:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <main>
     c66:	0c 94 17 2a 	jmp	0x542e	; 0x542e <_exit>

00000c6a <__bad_interrupt>:
     c6a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c6e <xputc>:
     c6e:	ff 93       	push	r31
     c70:	ef 93       	push	r30
     c72:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__bss_start>
     c76:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__bss_start+0x1>
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	09 f0       	breq	.+2      	; 0xc80 <xputc+0x12>
     c7e:	09 95       	icall
     c80:	ef 91       	pop	r30
     c82:	ff 91       	pop	r31
     c84:	08 95       	ret

00000c86 <xputs>:
     c86:	fc 01       	movw	r30, r24
     c88:	85 91       	lpm	r24, Z+
     c8a:	80 30       	cpi	r24, 0x00	; 0
     c8c:	11 f0       	breq	.+4      	; 0xc92 <xputs+0xc>
     c8e:	ef df       	rcall	.-34     	; 0xc6e <xputc>
     c90:	fb cf       	rjmp	.-10     	; 0xc88 <xputs+0x2>
     c92:	08 95       	ret

00000c94 <xitoa>:
     c94:	ff 27       	eor	r31, r31
     c96:	e0 e2       	ldi	r30, 0x20	; 32
     c98:	30 e2       	ldi	r19, 0x20	; 32
     c9a:	47 ff       	sbrs	r20, 7
     c9c:	0c c0       	rjmp	.+24     	; 0xcb6 <xitoa+0x22>
     c9e:	41 95       	neg	r20
     ca0:	97 ff       	sbrs	r25, 7
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <xitoa+0x22>
     ca4:	ed e2       	ldi	r30, 0x2D	; 45
     ca6:	60 95       	com	r22
     ca8:	70 95       	com	r23
     caa:	80 95       	com	r24
     cac:	90 95       	com	r25
     cae:	61 1d       	adc	r22, r1
     cb0:	71 1d       	adc	r23, r1
     cb2:	81 1d       	adc	r24, r1
     cb4:	91 1d       	adc	r25, r1
     cb6:	27 ff       	sbrs	r18, 7
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <xitoa+0x2a>
     cba:	21 95       	neg	r18
     cbc:	30 e3       	ldi	r19, 0x30	; 48
     cbe:	50 e2       	ldi	r21, 0x20	; 32
     cc0:	aa 27       	eor	r26, r26
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	aa 1f       	adc	r26, r26
     ccc:	a4 17       	cp	r26, r20
     cce:	10 f0       	brcs	.+4      	; 0xcd4 <xitoa+0x40>
     cd0:	a4 1b       	sub	r26, r20
     cd2:	63 95       	inc	r22
     cd4:	5a 95       	dec	r21
     cd6:	a9 f7       	brne	.-22     	; 0xcc2 <xitoa+0x2e>
     cd8:	aa 30       	cpi	r26, 0x0A	; 10
     cda:	08 f0       	brcs	.+2      	; 0xcde <xitoa+0x4a>
     cdc:	a9 5f       	subi	r26, 0xF9	; 249
     cde:	a0 5d       	subi	r26, 0xD0	; 208
     ce0:	af 93       	push	r26
     ce2:	f3 95       	inc	r31
     ce4:	61 15       	cp	r22, r1
     ce6:	71 05       	cpc	r23, r1
     ce8:	81 05       	cpc	r24, r1
     cea:	91 05       	cpc	r25, r1
     cec:	41 f7       	brne	.-48     	; 0xcbe <xitoa+0x2a>
     cee:	ed 32       	cpi	r30, 0x2D	; 45
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <xitoa+0x62>
     cf2:	ef 93       	push	r30
     cf4:	f3 95       	inc	r31
     cf6:	f2 17       	cp	r31, r18
     cf8:	18 f4       	brcc	.+6      	; 0xd00 <xitoa+0x6c>
     cfa:	3f 93       	push	r19
     cfc:	f3 95       	inc	r31
     cfe:	fb cf       	rjmp	.-10     	; 0xcf6 <xitoa+0x62>
     d00:	8f 91       	pop	r24
     d02:	b5 df       	rcall	.-150    	; 0xc6e <xputc>
     d04:	fa 95       	dec	r31
     d06:	e1 f7       	brne	.-8      	; 0xd00 <xitoa+0x6c>
     d08:	08 95       	ret

00000d0a <xvprintf>:
     d0a:	e9 91       	ld	r30, Y+
     d0c:	f9 91       	ld	r31, Y+
     d0e:	85 91       	lpm	r24, Z+
     d10:	80 30       	cpi	r24, 0x00	; 0
     d12:	21 f0       	breq	.+8      	; 0xd1c <xvprintf+0x12>
     d14:	85 32       	cpi	r24, 0x25	; 37
     d16:	19 f0       	breq	.+6      	; 0xd1e <xvprintf+0x14>
     d18:	aa df       	rcall	.-172    	; 0xc6e <xputc>
     d1a:	f9 cf       	rjmp	.-14     	; 0xd0e <xvprintf+0x4>
     d1c:	08 95       	ret
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	e8 94       	clt
     d22:	55 91       	lpm	r21, Z+
     d24:	55 32       	cpi	r21, 0x25	; 37
     d26:	c1 f3       	breq	.-16     	; 0xd18 <xvprintf+0xe>
     d28:	50 33       	cpi	r21, 0x30	; 48
     d2a:	11 f4       	brne	.+4      	; 0xd30 <xvprintf+0x26>
     d2c:	68 94       	set
     d2e:	55 91       	lpm	r21, Z+
     d30:	5a 33       	cpi	r21, 0x3A	; 58
     d32:	48 f4       	brcc	.+18     	; 0xd46 <xvprintf+0x3c>
     d34:	50 53       	subi	r21, 0x30	; 48
     d36:	90 f3       	brcs	.-28     	; 0xd1c <xvprintf+0x12>
     d38:	22 0f       	add	r18, r18
     d3a:	02 2e       	mov	r0, r18
     d3c:	22 0f       	add	r18, r18
     d3e:	22 0f       	add	r18, r18
     d40:	20 0d       	add	r18, r0
     d42:	25 0f       	add	r18, r21
     d44:	f4 cf       	rjmp	.-24     	; 0xd2e <xvprintf+0x24>
     d46:	0e f4       	brtc	.+2      	; 0xd4a <xvprintf+0x40>
     d48:	21 95       	neg	r18
     d4a:	89 91       	ld	r24, Y+
     d4c:	99 91       	ld	r25, Y+
     d4e:	53 36       	cpi	r21, 0x63	; 99
     d50:	19 f3       	breq	.-58     	; 0xd18 <xvprintf+0xe>
     d52:	53 37       	cpi	r21, 0x73	; 115
     d54:	29 f1       	breq	.+74     	; 0xda0 <xvprintf+0x96>
     d56:	53 35       	cpi	r21, 0x53	; 83
     d58:	59 f1       	breq	.+86     	; 0xdb0 <xvprintf+0xa6>
     d5a:	bc 01       	movw	r22, r24
     d5c:	88 27       	eor	r24, r24
     d5e:	99 27       	eor	r25, r25
     d60:	e8 94       	clt
     d62:	5c 36       	cpi	r21, 0x6C	; 108
     d64:	21 f4       	brne	.+8      	; 0xd6e <xvprintf+0x64>
     d66:	89 91       	ld	r24, Y+
     d68:	99 91       	ld	r25, Y+
     d6a:	68 94       	set
     d6c:	55 91       	lpm	r21, Z+
     d6e:	54 36       	cpi	r21, 0x64	; 100
     d70:	39 f4       	brne	.+14     	; 0xd80 <xvprintf+0x76>
     d72:	46 ef       	ldi	r20, 0xF6	; 246
     d74:	7e f0       	brts	.+30     	; 0xd94 <xvprintf+0x8a>
     d76:	77 ff       	sbrs	r23, 7
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <xvprintf+0x8a>
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	0a c0       	rjmp	.+20     	; 0xd94 <xvprintf+0x8a>
     d80:	55 37       	cpi	r21, 0x75	; 117
     d82:	4a e0       	ldi	r20, 0x0A	; 10
     d84:	39 f0       	breq	.+14     	; 0xd94 <xvprintf+0x8a>
     d86:	58 35       	cpi	r21, 0x58	; 88
     d88:	40 e1       	ldi	r20, 0x10	; 16
     d8a:	21 f0       	breq	.+8      	; 0xd94 <xvprintf+0x8a>
     d8c:	52 36       	cpi	r21, 0x62	; 98
     d8e:	42 e0       	ldi	r20, 0x02	; 2
     d90:	09 f0       	breq	.+2      	; 0xd94 <xvprintf+0x8a>
     d92:	08 95       	ret
     d94:	ff 93       	push	r31
     d96:	ef 93       	push	r30
     d98:	7d df       	rcall	.-262    	; 0xc94 <xitoa>
     d9a:	ef 91       	pop	r30
     d9c:	ff 91       	pop	r31
     d9e:	b7 cf       	rjmp	.-146    	; 0xd0e <xvprintf+0x4>
     da0:	ff 93       	push	r31
     da2:	ef 93       	push	r30
     da4:	fc 01       	movw	r30, r24
     da6:	81 91       	ld	r24, Z+
     da8:	80 30       	cpi	r24, 0x00	; 0
     daa:	b9 f3       	breq	.-18     	; 0xd9a <xvprintf+0x90>
     dac:	60 df       	rcall	.-320    	; 0xc6e <xputc>
     dae:	fb cf       	rjmp	.-10     	; 0xda6 <xvprintf+0x9c>
     db0:	ff 93       	push	r31
     db2:	ef 93       	push	r30
     db4:	68 df       	rcall	.-304    	; 0xc86 <xputs>
     db6:	f1 cf       	rjmp	.-30     	; 0xd9a <xvprintf+0x90>

00000db8 <__xprintf>:
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	25 96       	adiw	r28, 0x05	; 5
     dc2:	a3 df       	rcall	.-186    	; 0xd0a <xvprintf>
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <matrix_init>:
#define COL(code)      (code&0x07)


void matrix_init(void)
{
    news_init();
     dca:	0e 94 43 07 	call	0xe86	; 0xe86 <news_init>

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
     dce:	e0 e4       	ldi	r30, 0x40	; 64
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	11 92       	st	Z+, r1
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	e0 35       	cpi	r30, 0x50	; 80
     dd8:	f8 07       	cpc	r31, r24
     dda:	d9 f7       	brne	.-10     	; 0xdd2 <matrix_init+0x8>

    return;
}
     ddc:	08 95       	ret

00000dde <matrix_scan>:

uint8_t matrix_scan(void)
{
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
    uint8_t code;
    code = news_recv();
     de4:	0e 94 4e 07 	call	0xe9c	; 0xe9c <news_recv>
     de8:	d8 2f       	mov	r29, r24
    if (code == 0) {
     dea:	88 23       	and	r24, r24
     dec:	69 f1       	breq	.+90     	; 0xe48 <matrix_scan+0x6a>
        return 0;
    }

    phex(code); print(" ");
     dee:	1f 92       	push	r1
     df0:	8f 93       	push	r24
     df2:	8e e3       	ldi	r24, 0x3E	; 62
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	9f 93       	push	r25
     df8:	8f 93       	push	r24
     dfa:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
     dfe:	8c e3       	ldi	r24, 0x3C	; 60
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    if (code&0x80) {
     e06:	1d 2f       	mov	r17, r29
     e08:	17 70       	andi	r17, 0x07	; 7
     e0a:	cd 2f       	mov	r28, r29
     e0c:	c6 95       	lsr	r28
     e0e:	c6 95       	lsr	r28
     e10:	c6 95       	lsr	r28
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	d7 ff       	sbrs	r29, 7
     e1c:	1a c0       	rjmp	.+52     	; 0xe52 <matrix_scan+0x74>
        // break code
        if (matrix_is_on(ROW(code), COL(code))) {
     e1e:	cf 70       	andi	r28, 0x0F	; 15
     e20:	61 2f       	mov	r22, r17
     e22:	8c 2f       	mov	r24, r28
     e24:	0e 94 72 11 	call	0x22e4	; 0x22e4 <matrix_is_on>
     e28:	88 23       	and	r24, r24
     e2a:	71 f0       	breq	.+28     	; 0xe48 <matrix_scan+0x6a>
            matrix[ROW(code)] &= ~(1<<COL(code));
     e2c:	ec 2f       	mov	r30, r28
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	e0 5c       	subi	r30, 0xC0	; 192
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <matrix_scan+0x5e>
     e3a:	88 0f       	add	r24, r24
     e3c:	1a 95       	dec	r17
     e3e:	ea f7       	brpl	.-6      	; 0xe3a <matrix_scan+0x5c>
     e40:	80 95       	com	r24
     e42:	90 81       	ld	r25, Z
     e44:	89 23       	and	r24, r25
        }
    } else {
        // make code
        if (!matrix_is_on(ROW(code), COL(code))) {
            matrix[ROW(code)] |=  (1<<COL(code));
     e46:	80 83       	st	Z, r24
        }
    }
    return code;
}
     e48:	8d 2f       	mov	r24, r29
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	08 95       	ret
        if (!matrix_is_on(ROW(code), COL(code))) {
     e52:	61 2f       	mov	r22, r17
     e54:	8c 2f       	mov	r24, r28
     e56:	0e 94 72 11 	call	0x22e4	; 0x22e4 <matrix_is_on>
     e5a:	81 11       	cpse	r24, r1
     e5c:	f5 cf       	rjmp	.-22     	; 0xe48 <matrix_scan+0x6a>
            matrix[ROW(code)] |=  (1<<COL(code));
     e5e:	ec 2f       	mov	r30, r28
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	e0 5c       	subi	r30, 0xC0	; 192
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	21 e0       	ldi	r18, 0x01	; 1
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <matrix_scan+0x90>
     e6c:	22 0f       	add	r18, r18
     e6e:	1a 95       	dec	r17
     e70:	ea f7       	brpl	.-6      	; 0xe6c <matrix_scan+0x8e>
     e72:	80 81       	ld	r24, Z
     e74:	82 2b       	or	r24, r18
     e76:	e7 cf       	rjmp	.-50     	; 0xe46 <matrix_scan+0x68>

00000e78 <matrix_get_row>:

inline
uint8_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     e78:	e8 2f       	mov	r30, r24
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	e0 5c       	subi	r30, 0xC0	; 192
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
}
     e80:	80 81       	ld	r24, Z
     e82:	08 95       	ret

00000e84 <led_set>:


void led_set(uint8_t usb_led)
{
    // not supported now
}
     e84:	08 95       	ret

00000e86 <news_init>:
#include "news.h"


void news_init(void)
{
    NEWS_KBD_RX_INIT();
     e86:	87 e6       	ldi	r24, 0x67	; 103
     e88:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     e8c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     e90:	e9 ec       	ldi	r30, 0xC9	; 201
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 69       	ori	r24, 0x90	; 144
     e98:	80 83       	st	Z, r24
}
     e9a:	08 95       	ret

00000e9c <news_recv>:
static uint8_t rbuf_tail = 0;

uint8_t news_recv(void)
{
    uint8_t data = 0;
    if (rbuf_head == rbuf_tail) {
     e9c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <rbuf_tail>
     ea0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rbuf_head>
     ea4:	82 17       	cp	r24, r18
     ea6:	61 f0       	breq	.+24     	; 0xec0 <news_recv+0x24>
        return 0;
    }

    data = rbuf[rbuf_tail];
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	f9 01       	movw	r30, r18
     eac:	ee 5a       	subi	r30, 0xAE	; 174
     eae:	fe 4f       	sbci	r31, 0xFE	; 254
     eb0:	80 81       	ld	r24, Z
    rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	27 70       	andi	r18, 0x07	; 7
     eb8:	33 27       	eor	r19, r19
     eba:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <rbuf_tail>
    return data;
     ebe:	08 95       	ret
        return 0;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
}
     ec2:	08 95       	ret

00000ec4 <__vector_25>:

// USART RX complete interrupt
ISR(NEWS_KBD_RX_VECT)
{
     ec4:	2f 93       	push	r18
     ec6:	2f b7       	in	r18, 0x3f	; 63
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
    uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
     ed6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <rbuf_head>
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9c 01       	movw	r18, r24
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	27 70       	andi	r18, 0x07	; 7
     ee4:	33 27       	eor	r19, r19
    if (next != rbuf_tail) {
     ee6:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <rbuf_tail>
     eea:	42 17       	cp	r20, r18
     eec:	41 f0       	breq	.+16     	; 0xefe <__vector_25+0x3a>
        rbuf[rbuf_head] = NEWS_KBD_RX_DATA;
     eee:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     ef2:	8e 5a       	subi	r24, 0xAE	; 174
     ef4:	9e 4f       	sbci	r25, 0xFE	; 254
     ef6:	fc 01       	movw	r30, r24
     ef8:	30 83       	st	Z, r19
        rbuf_head = next;
     efa:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <rbuf_head>
    }
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	2f bf       	out	0x3f, r18	; 63
     f0e:	2f 91       	pop	r18
     f10:	18 95       	reti

00000f12 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     f12:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <keyboard_led_stats>
     f16:	08 95       	ret

00000f18 <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <send_consumer+0x6>
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	9c 01       	movw	r18, r24
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f26:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	19 f5       	brne	.+70     	; 0xf74 <send_consumer+0x5c>
        return;

    report_extra_t r = {
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	99 83       	std	Y+1, r25	; 0x01
     f32:	3b 83       	std	Y+3, r19	; 0x03
     f34:	2a 83       	std	Y+2, r18	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f36:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f3c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f40:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     f42:	95 fd       	sbrc	r25, 5
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f46:	95 ed       	ldi	r25, 0xD5	; 213
     f48:	9a 95       	dec	r25
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <send_consumer+0x30>
     f4c:	00 00       	nop
     f4e:	81 11       	cpse	r24, r1
     f50:	f5 cf       	rjmp	.-22     	; 0xf3c <send_consumer+0x24>
     f52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     f56:	85 ff       	sbrs	r24, 5
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	63 e0       	ldi	r22, 0x03	; 3
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	0e 94 07 0c 	call	0x180e	; 0x180e <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f6e:	8e 77       	andi	r24, 0x7E	; 126
     f70:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
#endif
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <send_system>:
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	00 d0       	rcall	.+0      	; 0xf86 <send_system+0x6>
     f86:	0f 92       	push	r0
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
     f8c:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <USB_DeviceState>
     f90:	24 30       	cpi	r18, 0x04	; 4
     f92:	31 f5       	brne	.+76     	; 0xfe0 <send_system+0x60>
    report_extra_t r = {
     f94:	22 e0       	ldi	r18, 0x02	; 2
     f96:	29 83       	std	Y+1, r18	; 0x01
        .usage = data - SYSTEM_POWER_DOWN + 1
     f98:	80 58       	subi	r24, 0x80	; 128
     f9a:	91 09       	sbc	r25, r1
    report_extra_t r = {
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fa8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fac:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     fae:	95 fd       	sbrc	r25, 5
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <send_system+0x3e>
     fb2:	95 ed       	ldi	r25, 0xD5	; 213
     fb4:	9a 95       	dec	r25
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <send_system+0x34>
     fb8:	00 00       	nop
     fba:	81 11       	cpse	r24, r1
     fbc:	f5 cf       	rjmp	.-22     	; 0xfa8 <send_system+0x28>
     fbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     fc2:	85 ff       	sbrs	r24, 5
     fc4:	0d c0       	rjmp	.+26     	; 0xfe0 <send_system+0x60>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	63 e0       	ldi	r22, 0x03	; 3
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	0e 94 07 0c 	call	0x180e	; 0x180e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fda:	8e 77       	andi	r24, 0x7E	; 126
     fdc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <send_mouse>:
{
     fec:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
     fee:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	f9 f4       	brne	.+62     	; 0x1034 <send_mouse+0x48>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ffe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1002:	91 50       	subi	r25, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1004:	85 fd       	sbrc	r24, 5
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <send_mouse+0x28>
    1008:	85 ed       	ldi	r24, 0xD5	; 213
    100a:	8a 95       	dec	r24
    100c:	f1 f7       	brne	.-4      	; 0x100a <send_mouse+0x1e>
    100e:	00 00       	nop
    1010:	91 11       	cpse	r25, r1
    1012:	f5 cf       	rjmp	.-22     	; 0xffe <send_mouse+0x12>
    1014:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    1018:	85 ff       	sbrs	r24, 5
    101a:	0c c0       	rjmp	.+24     	; 0x1034 <send_mouse+0x48>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	65 e0       	ldi	r22, 0x05	; 5
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	c9 01       	movw	r24, r18
    1026:	0e 94 07 0c 	call	0x180e	; 0x180e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    102a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    102e:	8e 77       	andi	r24, 0x7E	; 126
    1030:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    1034:	08 95       	ret

00001036 <send_keyboard>:
{
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    103c:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	d1 f4       	brne	.+52     	; 0x1078 <send_keyboard+0x42>
    if (keyboard_protocol && keyboard_nkro) {
    1044:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    1048:	88 23       	and	r24, r24
    104a:	f1 f0       	breq	.+60     	; 0x1088 <send_keyboard+0x52>
    104c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <keyboard_nkro>
    1050:	88 23       	and	r24, r24
    1052:	d1 f0       	breq	.+52     	; 0x1088 <send_keyboard+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1054:	85 e0       	ldi	r24, 0x05	; 5
    1056:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    105a:	81 e8       	ldi	r24, 0x81	; 129
    105c:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(8);
    105e:	21 f0       	breq	.+8      	; 0x1068 <send_keyboard+0x32>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1060:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1064:	95 ff       	sbrs	r25, 5
    1066:	0b c0       	rjmp	.+22     	; 0x107e <send_keyboard+0x48>
    1068:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	60 e2       	ldi	r22, 0x20	; 32
    1072:	70 e0       	ldi	r23, 0x00	; 0
        if (!Endpoint_IsReadWriteAllowed()) return;
    1074:	85 fd       	sbrc	r24, 5
    1076:	1a c0       	rjmp	.+52     	; 0x10ac <send_keyboard+0x76>
}
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret
    107e:	9a e2       	ldi	r25, 0x2A	; 42
    1080:	9a 95       	dec	r25
    1082:	f1 f7       	brne	.-4      	; 0x1080 <send_keyboard+0x4a>
    1084:	00 c0       	rjmp	.+0      	; 0x1086 <send_keyboard+0x50>
    1086:	ea cf       	rjmp	.-44     	; 0x105c <send_keyboard+0x26>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    108e:	81 e8       	ldi	r24, 0x81	; 129
    1090:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
    1092:	21 f0       	breq	.+8      	; 0x109c <send_keyboard+0x66>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1094:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1098:	95 ff       	sbrs	r25, 5
    109a:	19 c0       	rjmp	.+50     	; 0x10ce <send_keyboard+0x98>
    109c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    10a0:	85 ff       	sbrs	r24, 5
    10a2:	ea cf       	rjmp	.-44     	; 0x1078 <send_keyboard+0x42>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	68 e0       	ldi	r22, 0x08	; 8
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	ce 01       	movw	r24, r28
    10ae:	0e 94 07 0c 	call	0x180e	; 0x180e <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10b6:	8e 77       	andi	r24, 0x7E	; 126
    10b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    10bc:	80 e2       	ldi	r24, 0x20	; 32
    10be:	fe 01       	movw	r30, r28
    10c0:	ae e5       	ldi	r26, 0x5E	; 94
    10c2:	b2 e0       	ldi	r27, 0x02	; 2
    10c4:	01 90       	ld	r0, Z+
    10c6:	0d 92       	st	X+, r0
    10c8:	8a 95       	dec	r24
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <send_keyboard+0x8e>
    10cc:	d5 cf       	rjmp	.-86     	; 0x1078 <send_keyboard+0x42>
    10ce:	ef e3       	ldi	r30, 0x3F	; 63
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	31 97       	sbiw	r30, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <send_keyboard+0x9c>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <send_keyboard+0xa2>
    10d8:	00 00       	nop
    10da:	da cf       	rjmp	.-76     	; 0x1090 <send_keyboard+0x5a>

000010dc <console_is_ready>:
{
    10dc:	cf 93       	push	r28
    if (!hid_listen_ready) {
    10de:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <hid_listen_ready.5132>
    10e2:	c1 11       	cpse	r28, r1
    10e4:	0b c0       	rjmp	.+22     	; 0x10fc <console_is_ready+0x20>
        if (timer_read32() < 2500)
    10e6:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <timer_read32>
    10ea:	64 3c       	cpi	r22, 0xC4	; 196
    10ec:	79 40       	sbci	r23, 0x09	; 9
    10ee:	81 05       	cpc	r24, r1
    10f0:	91 05       	cpc	r25, r1
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <console_is_ready+0x20>
        hid_listen_ready = true;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <hid_listen_ready.5132>
    return true;
    10fa:	c1 e0       	ldi	r28, 0x01	; 1
}
    10fc:	8c 2f       	mov	r24, r28
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <sendchar>:

/*******************************************************************************
 * sendchar
 ******************************************************************************/
int8_t sendchar(uint8_t c)
{
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	d8 2f       	mov	r29, r24
    if (!(SREG & (1<<SREG_I)))
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	07 fe       	sbrs	r0, 7
    1112:	45 c0       	rjmp	.+138    	; 0x119e <sendchar+0x9c>
    if (USB_DeviceState != DEVICE_STATE_Configured && !ringbuf_is_full(&sendbuf))
    1114:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	71 f0       	breq	.+28     	; 0x1138 <sendchar+0x36>
{
    return (buf->head == buf->tail);
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    111c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	82 23       	and	r24, r18
    112c:	93 23       	and	r25, r19
    112e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <sendbuf+0x3>
    1132:	28 17       	cp	r18, r24
    1134:	19 06       	cpc	r1, r25
    1136:	99 f5       	brne	.+102    	; 0x119e <sendchar+0x9c>
    if (!console_is_ready() && !ringbuf_is_full(&sendbuf))
    1138:	0e 94 6e 08 	call	0x10dc	; 0x10dc <console_is_ready>
    113c:	81 11       	cpse	r24, r1
    113e:	0e c0       	rjmp	.+28     	; 0x115c <sendchar+0x5a>
    1140:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	82 23       	and	r24, r18
    1150:	93 23       	and	r25, r19
    1152:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <sendbuf+0x3>
    1156:	28 17       	cp	r18, r24
    1158:	19 06       	cpc	r1, r25
    115a:	09 f5       	brne	.+66     	; 0x119e <sendchar+0x9c>
    uint16_t prev = timer_read();
    115c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <timer_read>
    1160:	8c 01       	movw	r16, r24
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1162:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1166:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1168:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    116c:	89 2f       	mov	r24, r25
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	90 fd       	sbrc	r25, 0
    1172:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1174:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1176:	84 e0       	ldi	r24, 0x04	; 4
    1178:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	f8 2e       	mov	r15, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1180:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (Endpoint_IsStalled() || !Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1184:	85 fd       	sbrc	r24, 5
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <sendchar+0x96>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1188:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    118c:	80 ff       	sbrs	r24, 0
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <sendchar+0x96>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1190:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1194:	87 fd       	sbrc	r24, 7
    1196:	43 c0       	rjmp	.+134    	; 0x121e <sendchar+0x11c>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1198:	cf 70       	andi	r28, 0x0F	; 15
    119a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    119e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 01       	movw	r18, r24
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	24 23       	and	r18, r20
    11b2:	35 23       	and	r19, r21
    11b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <sendbuf+0x3>
    if (ringbuf_is_full(buf)) {
    11b8:	42 17       	cp	r20, r18
    11ba:	13 06       	cpc	r1, r19
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <sendchar+0xbe>
    11be:	7d c0       	rjmp	.+250    	; 0x12ba <sendchar+0x1b8>
    buf->buffer[buf->head] = data;
    11c0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <sendbuf>
    11c4:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <sendbuf+0x1>
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
    11cc:	fc 01       	movw	r30, r24
    11ce:	d0 83       	st	Z, r29
    buf->head++;
    11d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
    11d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sendbuf+0x4>
    11da:	89 23       	and	r24, r25
    11dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sendbuf+0x2>

    #ifdef CONSOLE_ENABLE
    console_putc(c);
    #endif

    return 0;
    11e0:	6c c0       	rjmp	.+216    	; 0x12ba <sendchar+0x1b8>
    uint8_t data = buf->buffer[buf->tail];
    11e2:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    11e6:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    11ea:	e8 0f       	add	r30, r24
    11ec:	f1 1d       	adc	r31, r1
    11ee:	90 81       	ld	r25, Z
    buf->tail++;
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    buf->tail &= buf->size_mask;
    11f2:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    11f6:	82 23       	and	r24, r18
    11f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11fc:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1200:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    1204:	85 fd       	sbrc	r24, 5
    1206:	0b c0       	rjmp	.+22     	; 0x121e <sendchar+0x11c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1208:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    120c:	80 ff       	sbrs	r24, 0
    120e:	07 c0       	rjmp	.+14     	; 0x121e <sendchar+0x11c>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1210:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1214:	8e 77       	andi	r24, 0x7E	; 126
    1216:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    121a:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5138>
    return (buf->head == buf->tail);
    121e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1222:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1226:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    122a:	28 17       	cp	r18, r24
    122c:	31 f1       	breq	.+76     	; 0x127a <sendchar+0x178>
    122e:	95 fd       	sbrc	r25, 5
    1230:	d8 cf       	rjmp	.-80     	; 0x11e2 <sendchar+0xe0>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	27 c0       	rjmp	.+78     	; 0x1284 <sendchar+0x182>
				UEDATX = Data;
    1236:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    123a:	2f c0       	rjmp	.+94     	; 0x129a <sendchar+0x198>
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	2f 5f       	subi	r18, 0xFF	; 255
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	24 23       	and	r18, r20
    124a:	35 23       	and	r19, r21
    if (ringbuf_is_full(&sendbuf) && timeout) {
    124c:	82 17       	cp	r24, r18
    124e:	13 06       	cpc	r1, r19
    1250:	09 f0       	breq	.+2      	; 0x1254 <sendchar+0x152>
    1252:	a2 cf       	rjmp	.-188    	; 0x1198 <sendchar+0x96>
    1254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <timeout.5138>
    1258:	88 23       	and	r24, r24
    125a:	09 f4       	brne	.+2      	; 0x125e <sendchar+0x15c>
    125c:	9d cf       	rjmp	.-198    	; 0x1198 <sendchar+0x96>
        uint16_t curr = timer_read();
    125e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <timer_read>
    1262:	9c 01       	movw	r18, r24
        if (curr != prev) {
    1264:	80 17       	cp	r24, r16
    1266:	91 07       	cpc	r25, r17
    1268:	09 f4       	brne	.+2      	; 0x126c <sendchar+0x16a>
    126a:	8a cf       	rjmp	.-236    	; 0x1180 <sendchar+0x7e>
            timeout--;
    126c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <timeout.5138>
    1270:	91 50       	subi	r25, 0x01	; 1
    1272:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <timeout.5138>
        uint16_t curr = timer_read();
    1276:	89 01       	movw	r16, r18
    1278:	83 cf       	rjmp	.-250    	; 0x1180 <sendchar+0x7e>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    127a:	95 ff       	sbrs	r25, 5
    127c:	da cf       	rjmp	.-76     	; 0x1232 <sendchar+0x130>
    127e:	d0 93 f1 00 	sts	0x00F1, r29	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
        done = true;
    1282:	91 e0       	ldi	r25, 0x01	; 1
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1284:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1288:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    128c:	53 2f       	mov	r21, r19
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    128e:	45 2b       	or	r20, r21
    1290:	79 f0       	breq	.+30     	; 0x12b0 <sendchar+0x1ae>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1292:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1296:	30 ff       	sbrs	r19, 0
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <sendchar+0x1ae>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    129a:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    129e:	35 fd       	sbrc	r19, 5
    12a0:	ca cf       	rjmp	.-108    	; 0x1236 <sendchar+0x134>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12a2:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12a6:	3e 77       	andi	r19, 0x7E	; 126
    12a8:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    12ac:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5138>
    if (done) {
    12b0:	99 23       	and	r25, r25
    12b2:	21 f2       	breq	.-120    	; 0x123c <sendchar+0x13a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12b4:	cf 70       	andi	r28, 0x0F	; 15
    12b6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	08 95       	ret

000012c8 <EVENT_USB_Device_Connect>:
    if (!USB_IsInitialized) {
    12c8:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <USB_IsInitialized>
    12cc:	81 11       	cpse	r24, r1
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <EVENT_USB_Device_Connect+0x10>
        USB_Disable();
    12d0:	0e 94 65 0e 	call	0x1cca	; 0x1cca <USB_Disable>
        USB_Init();
    12d4:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <USB_Init>
}
    12d8:	08 95       	ret

000012da <EVENT_USB_Device_Disconnect>:
    USB_IsInitialized = false;
    12da:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <USB_IsInitialized>
}
    12de:	08 95       	ret

000012e0 <EVENT_USB_Device_Reset>:
}
    12e0:	08 95       	ret

000012e2 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    12e2:	42 e0       	ldi	r20, 0x02	; 2
    12e4:	61 ec       	ldi	r22, 0xC1	; 193
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	0e 94 83 0b 	call	0x1706	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
    12ec:	42 e0       	ldi	r20, 0x02	; 2
    12ee:	61 ec       	ldi	r22, 0xC1	; 193
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	0e 94 83 0b 	call	0x1706	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
    12f6:	42 e0       	ldi	r20, 0x02	; 2
    12f8:	61 ec       	ldi	r22, 0xC1	; 193
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	0e 94 83 0b 	call	0x1706	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
    1300:	42 e2       	ldi	r20, 0x22	; 34
    1302:	61 ec       	ldi	r22, 0xC1	; 193
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	0e 94 83 0b 	call	0x1706	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
    130a:	42 e2       	ldi	r20, 0x22	; 34
    130c:	61 ec       	ldi	r22, 0xC1	; 193
    130e:	85 e0       	ldi	r24, 0x05	; 5
    1310:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>

00001314 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    1314:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <USB_ControlRequest+0x1>
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	09 f4       	brne	.+2      	; 0x131e <EVENT_USB_Device_ControlRequest+0xa>
    131c:	55 c0       	rjmp	.+170    	; 0x13c8 <EVENT_USB_Device_ControlRequest+0xb4>
    131e:	30 f4       	brcc	.+12     	; 0x132c <EVENT_USB_Device_ControlRequest+0x18>
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	71 f1       	breq	.+92     	; 0x1380 <EVENT_USB_Device_ControlRequest+0x6c>
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	09 f4       	brne	.+2      	; 0x132a <EVENT_USB_Device_ControlRequest+0x16>
    1328:	91 c0       	rjmp	.+290    	; 0x144c <EVENT_USB_Device_ControlRequest+0x138>
    132a:	08 95       	ret
    132c:	8a 30       	cpi	r24, 0x0A	; 10
    132e:	09 f4       	brne	.+2      	; 0x1332 <EVENT_USB_Device_ControlRequest+0x1e>
    1330:	7d c0       	rjmp	.+250    	; 0x142c <EVENT_USB_Device_ControlRequest+0x118>
    1332:	8b 30       	cpi	r24, 0x0B	; 11
    1334:	09 f4       	brne	.+2      	; 0x1338 <EVENT_USB_Device_ControlRequest+0x24>
    1336:	63 c0       	rjmp	.+198    	; 0x13fe <EVENT_USB_Device_ControlRequest+0xea>
    1338:	89 30       	cpi	r24, 0x09	; 9
    133a:	09 f0       	breq	.+2      	; 0x133e <EVENT_USB_Device_ControlRequest+0x2a>
    133c:	44 c0       	rjmp	.+136    	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    133e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>
    1342:	81 32       	cpi	r24, 0x21	; 33
    1344:	09 f0       	breq	.+2      	; 0x1348 <EVENT_USB_Device_ControlRequest+0x34>
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
                switch (USB_ControlRequest.wIndex) {
    1348:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <USB_ControlRequest+0x4>
    134c:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <USB_ControlRequest+0x5>
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	11 f0       	breq	.+4      	; 0x1358 <EVENT_USB_Device_ControlRequest+0x44>
    1354:	04 97       	sbiw	r24, 0x04	; 4
    1356:	b9 f5       	brne	.+110    	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1358:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    135c:	87 7f       	andi	r24, 0xF7	; 247
    135e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1362:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    1366:	82 ff       	sbrs	r24, 2
    1368:	2a c0       	rjmp	.+84     	; 0x13be <EVENT_USB_Device_ControlRequest+0xaa>
				return UEDATX;
    136a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    136e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1372:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1376:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1378:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    137c:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <Endpoint_ClearStatusStage>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1380:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>
    1384:	81 3a       	cpi	r24, 0xA1	; 161
    1386:	f9 f4       	brne	.+62     	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1388:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    138c:	87 7f       	andi	r24, 0xF7	; 247
    138e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    1392:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <USB_ControlRequest+0x4>
    1396:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <USB_ControlRequest+0x5>
    139a:	89 2b       	or	r24, r25
    139c:	61 f4       	brne	.+24     	; 0x13b6 <EVENT_USB_Device_ControlRequest+0xa2>
                    ReportSize = sizeof(keyboard_report_sent);
    139e:	60 e2       	ldi	r22, 0x20	; 32
                    ReportData = (uint8_t*)&keyboard_report_sent;
    13a0:	8e e5       	ldi	r24, 0x5E	; 94
    13a2:	92 e0       	ldi	r25, 0x02	; 2
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13ae:	8b 77       	andi	r24, 0x7B	; 123
    13b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13b4:	08 95       	ret
    uint8_t  ReportSize = 0;
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	f3 cf       	rjmp	.-26     	; 0x13a4 <EVENT_USB_Device_ControlRequest+0x90>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    13be:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    13c2:	81 11       	cpse	r24, r1
    13c4:	ce cf       	rjmp	.-100    	; 0x1362 <EVENT_USB_Device_ControlRequest+0x4e>
}
    13c6:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13c8:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>
    13cc:	81 3a       	cpi	r24, 0xA1	; 161
    13ce:	d9 f7       	brne	.-10     	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    13d0:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <USB_ControlRequest+0x4>
    13d4:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <USB_ControlRequest+0x5>
    13d8:	89 2b       	or	r24, r25
    13da:	a9 f7       	brne	.-22     	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    13dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13e0:	87 7f       	andi	r24, 0xF7	; 247
    13e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
    13ea:	80 ff       	sbrs	r24, 0
    13ec:	fc cf       	rjmp	.-8      	; 0x13e6 <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    13ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
				UEDATX = Data;
    13f2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13fa:	8e 77       	andi	r24, 0x7E	; 126
    13fc:	bd cf       	rjmp	.-134    	; 0x1378 <EVENT_USB_Device_ControlRequest+0x64>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    13fe:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>
    1402:	81 32       	cpi	r24, 0x21	; 33
    1404:	01 f7       	brne	.-64     	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1406:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <USB_ControlRequest+0x4>
    140a:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <USB_ControlRequest+0x5>
    140e:	89 2b       	or	r24, r25
    1410:	d1 f6       	brne	.-76     	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1416:	87 7f       	andi	r24, 0xF7	; 247
    1418:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
    141c:	0e 94 b7 0b 	call	0x176e	; 0x176e <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1420:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <USB_ControlRequest+0x2>
    1424:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <keyboard_protocol>
                    clear_keyboard();
    1428:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    142c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>
    1430:	81 32       	cpi	r24, 0x21	; 33
    1432:	49 f6       	brne	.-110    	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
    1434:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1438:	87 7f       	andi	r24, 0xF7	; 247
    143a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    143e:	0e 94 b7 0b 	call	0x176e	; 0x176e <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1442:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <USB_ControlRequest+0x3>
    1446:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <keyboard_idle>
    144a:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    144c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>
    1450:	81 3a       	cpi	r24, 0xA1	; 161
    1452:	09 f0       	breq	.+2      	; 0x1456 <EVENT_USB_Device_ControlRequest+0x142>
    1454:	b8 cf       	rjmp	.-144    	; 0x13c6 <EVENT_USB_Device_ControlRequest+0xb2>
    1456:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    145a:	87 7f       	andi	r24, 0xF7	; 247
    145c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1460:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    1464:	80 ff       	sbrs	r24, 0
    1466:	fc cf       	rjmp	.-8      	; 0x1460 <EVENT_USB_Device_ControlRequest+0x14c>
                Endpoint_Write_8(keyboard_idle);
    1468:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <keyboard_idle>
    146c:	c2 cf       	rjmp	.-124    	; 0x13f2 <EVENT_USB_Device_ControlRequest+0xde>

0000146e <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    146e:	08 95       	ret

00001470 <hook_late_init>:
    1470:	08 95       	ret

00001472 <hook_usb_suspend_entry>:
 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    // Turn off LED to save power and keep its status to resotre it later.
    // LED status will be updated by keyboard_task() in main loop hopefully.
    _led_stats = keyboard_led_stats;
    1472:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <keyboard_led_stats>
    1476:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <_led_stats>
    keyboard_led_stats = 0;
    147a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <keyboard_led_stats>

    // Calling long task here can prevent USB state transition

    matrix_clear();
    147e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <matrix_clear>
    clear_keyboard();
    1482:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <clear_keyboard>

00001486 <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    1486:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <hook_usb_suspend_entry>

0000148a <hook_usb_suspend_loop>:
__attribute__((weak))
void hook_usb_suspend_loop(void)
{
#ifndef TMK_LUFA_DEBUG_UART
    // This corrupts debug print when suspend
    suspend_power_down();
    148a:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <suspend_power_down>
#endif
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    148e:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <USB_Device_RemoteWakeupEnabled>
    1492:	88 23       	and	r24, r24
    1494:	29 f0       	breq	.+10     	; 0x14a0 <hook_usb_suspend_loop+0x16>
    1496:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <suspend_wakeup_condition>
    149a:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    149c:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <USB_Device_SendRemoteWakeup>
    }
}
    14a0:	08 95       	ret

000014a2 <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    14a2:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
#endif

    // Restore LED status and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    14a6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <_led_stats>
    14aa:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <keyboard_led_stats>

    // Calling long task here can prevent USB state transition
}
    14ae:	08 95       	ret

000014b0 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    14b0:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <hook_usb_wakeup>

000014b4 <hook_usb_startup_wait_loop>:
    14b4:	08 95       	ret

000014b6 <main>:
    MCUSR &= ~(1 << WDRF);
    14b6:	84 b7       	in	r24, 0x34	; 52
    14b8:	87 7f       	andi	r24, 0xF7	; 247
    14ba:	84 bf       	out	0x34, r24	; 52
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	a8 95       	wdr
    14c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14c6:	88 61       	ori	r24, 0x18	; 24
    14c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14d0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    14d2:	80 e8       	ldi	r24, 0x80	; 128
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14e2:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    14e4:	81 e8       	ldi	r24, 0x81	; 129
    14e6:	98 e0       	ldi	r25, 0x08	; 8
    14e8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <print_set_sendchar>
    host_set_driver(&lufa_driver);
    14ec:	86 e0       	ldi	r24, 0x06	; 6
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <host_set_driver>
    print("\n\nTMK:" STR(TMK_VERSION) "/LUFA\n\n");
    14f4:	87 e6       	ldi	r24, 0x67	; 103
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    hook_early_init();
    14fc:	0e 94 37 0a 	call	0x146e	; 0x146e <hook_early_init>
    keyboard_setup();
    1500:	0e 94 bb 10 	call	0x2176	; 0x2176 <keyboard_setup>
    USB_Disable();
    1504:	0e 94 65 0e 	call	0x1cca	; 0x1cca <USB_Disable>
    USB_Init();
    1508:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <USB_Init>
    sei();
    150c:	78 94       	sei
    keyboard_init();
    150e:	0e 94 bd 10 	call	0x217a	; 0x217a <keyboard_init>
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1512:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	09 f0       	breq	.+2      	; 0x151c <main+0x66>
    151a:	44 c0       	rjmp	.+136    	; 0x15a4 <main+0xee>
    print("\nUSB configured.\n");
    151c:	85 e5       	ldi	r24, 0x55	; 85
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    hook_late_init();
    1524:	0e 94 38 0a 	call	0x1470	; 0x1470 <hook_late_init>
    print("\nKeyboard start.\n");
    1528:	83 e4       	ldi	r24, 0x43	; 67
    152a:	91 e0       	ldi	r25, 0x01	; 1
    152c:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1530:	c4 e0       	ldi	r28, 0x04	; 4
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1532:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    1536:	85 30       	cpi	r24, 0x05	; 5
    1538:	c1 f1       	breq	.+112    	; 0x15aa <main+0xf4>
        keyboard_task();
    153a:	0e 94 c3 10 	call	0x2186	; 0x2186 <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    153e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1542:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    if (fn == USB_Device_GetFrameNumber()) {
    1546:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <fn.5164>
    154a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <fn.5164+0x1>
    154e:	28 17       	cp	r18, r24
    1550:	39 07       	cpc	r19, r25
    1552:	79 f3       	breq	.-34     	; 0x1532 <main+0x7c>
    1554:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1558:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    fn = USB_Device_GetFrameNumber();
    155c:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <fn.5164+0x1>
    1560:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <fn.5164>
    if (!console_is_ready())
    1564:	0e 94 6e 08 	call	0x10dc	; 0x10dc <console_is_ready>
    1568:	88 23       	and	r24, r24
    156a:	19 f3       	breq	.-58     	; 0x1532 <main+0x7c>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    156c:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	f9 f6       	brne	.-66     	; 0x1532 <main+0x7c>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1574:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1578:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    157a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    157e:	82 2f       	mov	r24, r18
    1580:	81 70       	andi	r24, 0x01	; 1
    1582:	20 fd       	sbrc	r18, 0
    1584:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1586:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1588:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    158c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1590:	90 ff       	sbrs	r25, 0
    1592:	04 c0       	rjmp	.+8      	; 0x159c <main+0xe6>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1594:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1598:	97 fd       	sbrc	r25, 7
    159a:	26 c0       	rjmp	.+76     	; 0x15e8 <main+0x132>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    159c:	8f 70       	andi	r24, 0x0F	; 15
    159e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    15a2:	c7 cf       	rjmp	.-114    	; 0x1532 <main+0x7c>
        hook_usb_startup_wait_loop();
    15a4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <hook_usb_startup_wait_loop>
    15a8:	b4 cf       	rjmp	.-152    	; 0x1512 <main+0x5c>
            hook_usb_suspend_loop();
    15aa:	0e 94 45 0a 	call	0x148a	; 0x148a <hook_usb_suspend_loop>
    15ae:	c1 cf       	rjmp	.-126    	; 0x1532 <main+0x7c>
    uint8_t data = buf->buffer[buf->tail];
    15b0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    15b4:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    15b8:	e9 0f       	add	r30, r25
    15ba:	f1 1d       	adc	r31, r1
    15bc:	20 81       	ld	r18, Z
    buf->tail++;
    15be:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    15c0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <sendbuf+0x4>
    15c4:	93 23       	and	r25, r19
    15c6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
				UEDATX = Data;
    15ca:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15ce:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    15d2:	95 fd       	sbrc	r25, 5
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <main+0x132>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15d6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15da:	90 ff       	sbrs	r25, 0
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <main+0x132>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15de:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15e2:	9e 77       	andi	r25, 0x7E	; 126
    15e4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    return (buf->head == buf->tail);
    15e8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    15ec:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
    15f0:	29 17       	cp	r18, r25
    15f2:	21 f0       	breq	.+8      	; 0x15fc <main+0x146>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15f4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15f8:	25 fd       	sbrc	r18, 5
    15fa:	da cf       	rjmp	.-76     	; 0x15b0 <main+0xfa>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    15fc:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1600:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1604:	39 2f       	mov	r19, r25
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    1606:	23 2b       	or	r18, r19
    1608:	49 f2       	breq	.-110    	; 0x159c <main+0xe6>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    160a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    160e:	90 ff       	sbrs	r25, 0
    1610:	c5 cf       	rjmp	.-118    	; 0x159c <main+0xe6>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1612:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    1616:	95 fd       	sbrc	r25, 5
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <main+0x170>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    161a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    161e:	9e 77       	andi	r25, 0x7E	; 126
    1620:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1624:	bb cf       	rjmp	.-138    	; 0x159c <main+0xe6>
				UEDATX = Data;
    1626:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    162a:	f3 cf       	rjmp	.-26     	; 0x1612 <main+0x15c>

0000162c <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    162c:	29 2f       	mov	r18, r25
    162e:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1630:	23 30       	cpi	r18, 0x03	; 3
    1632:	31 05       	cpc	r19, r1
    1634:	21 f1       	breq	.+72     	; 0x167e <CALLBACK_USB_GetDescriptor+0x52>
    1636:	68 f4       	brcc	.+26     	; 0x1652 <CALLBACK_USB_GetDescriptor+0x26>
    1638:	21 30       	cpi	r18, 0x01	; 1
    163a:	31 05       	cpc	r19, r1
    163c:	09 f4       	brne	.+2      	; 0x1640 <CALLBACK_USB_GetDescriptor+0x14>
    163e:	43 c0       	rjmp	.+134    	; 0x16c6 <CALLBACK_USB_GetDescriptor+0x9a>
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <CALLBACK_USB_GetDescriptor+0x1c>
    1646:	44 c0       	rjmp	.+136    	; 0x16d0 <CALLBACK_USB_GetDescriptor+0xa4>
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	26 c0       	rjmp	.+76     	; 0x169e <CALLBACK_USB_GetDescriptor+0x72>
    1652:	21 32       	cpi	r18, 0x21	; 33
    1654:	31 05       	cpc	r19, r1
    1656:	51 f1       	breq	.+84     	; 0x16ac <CALLBACK_USB_GetDescriptor+0x80>
    1658:	22 32       	cpi	r18, 0x22	; 34
    165a:	31 05       	cpc	r19, r1
    165c:	a9 f7       	brne	.-22     	; 0x1648 <CALLBACK_USB_GetDescriptor+0x1c>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    165e:	65 30       	cpi	r22, 0x05	; 5
    1660:	71 05       	cpc	r23, r1
    1662:	90 f7       	brcc	.-28     	; 0x1648 <CALLBACK_USB_GetDescriptor+0x1c>
    1664:	fb 01       	movw	r30, r22
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	e1 5e       	subi	r30, 0xE1	; 225
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	20 81       	ld	r18, Z
    1670:	31 81       	ldd	r19, Z+1	; 0x01
    1672:	66 5e       	subi	r22, 0xE6	; 230
    1674:	7e 4f       	sbci	r23, 0xFE	; 254
    1676:	fb 01       	movw	r30, r22
    1678:	80 81       	ld	r24, Z
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	10 c0       	rjmp	.+32     	; 0x169e <CALLBACK_USB_GetDescriptor+0x72>
            switch (DescriptorIndex )
    167e:	99 27       	eor	r25, r25
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <CALLBACK_USB_GetDescriptor+0x7a>
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	29 f0       	breq	.+10     	; 0x1694 <CALLBACK_USB_GetDescriptor+0x68>
    168a:	02 97       	sbiw	r24, 0x02	; 2
    168c:	e9 f6       	brne	.-70     	; 0x1648 <CALLBACK_USB_GetDescriptor+0x1c>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    168e:	ed e7       	ldi	r30, 0x7D	; 125
    1690:	f1 e0       	ldi	r31, 0x01	; 1
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <CALLBACK_USB_GetDescriptor+0x6c>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1694:	e9 ec       	ldi	r30, 0xC9	; 201
    1696:	f1 e0       	ldi	r31, 0x01	; 1
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1698:	84 91       	lpm	r24, Z
    169a:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    169c:	9f 01       	movw	r18, r30
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    169e:	fa 01       	movw	r30, r20
    16a0:	31 83       	std	Z+1, r19	; 0x01
    16a2:	20 83       	st	Z, r18
    return Size;
}
    16a4:	08 95       	ret
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    16a6:	e9 eb       	ldi	r30, 0xB9	; 185
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	f6 cf       	rjmp	.-20     	; 0x1698 <CALLBACK_USB_GetDescriptor+0x6c>
            switch (wIndex) {
    16ac:	65 30       	cpi	r22, 0x05	; 5
    16ae:	71 05       	cpc	r23, r1
    16b0:	58 f6       	brcc	.-106    	; 0x1648 <CALLBACK_USB_GetDescriptor+0x1c>
    16b2:	66 0f       	add	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	fb 01       	movw	r30, r22
    16b8:	e7 5d       	subi	r30, 0xD7	; 215
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
    16bc:	20 81       	ld	r18, Z
    16be:	31 81       	ldd	r19, Z+1	; 0x01
    switch (DescriptorType)
    16c0:	89 e0       	ldi	r24, 0x09	; 9
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	ec cf       	rjmp	.-40     	; 0x169e <CALLBACK_USB_GetDescriptor+0x72>
            Size    = sizeof(USB_Descriptor_Device_t);
    16c6:	82 e1       	ldi	r24, 0x12	; 18
    16c8:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    16ca:	2a e5       	ldi	r18, 0x5A	; 90
    16cc:	32 e0       	ldi	r19, 0x02	; 2
    16ce:	e7 cf       	rjmp	.-50     	; 0x169e <CALLBACK_USB_GetDescriptor+0x72>
            Size    = sizeof(USB_Descriptor_Configuration_t);
    16d0:	8d e8       	ldi	r24, 0x8D	; 141
    16d2:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    16d4:	2d ec       	ldi	r18, 0xCD	; 205
    16d6:	31 e0       	ldi	r19, 0x01	; 1
    16d8:	e2 cf       	rjmp	.-60     	; 0x169e <CALLBACK_USB_GetDescriptor+0x72>

000016da <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    16da:	80 e1       	ldi	r24, 0x10	; 16
    16dc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16de:	82 e1       	ldi	r24, 0x12	; 18
    16e0:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    16e2:	09 b4       	in	r0, 0x29	; 41
    16e4:	00 fe       	sbrs	r0, 0
    16e6:	fd cf       	rjmp	.-6      	; 0x16e2 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    16e8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    16ec:	8f 7d       	andi	r24, 0xDF	; 223
    16ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    16f2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    16fc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1700:	81 fd       	sbrc	r24, 1
    1702:	fc cf       	rjmp	.-8      	; 0x16fc <USB_Device_SendRemoteWakeup+0x22>
}
    1704:	08 95       	ret

00001706 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1706:	98 2f       	mov	r25, r24
    1708:	97 30       	cpi	r25, 0x07	; 7
    170a:	28 f0       	brcs	.+10     	; 0x1716 <Endpoint_ConfigureEndpoint_Prv+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    170c:	8f 70       	andi	r24, 0x0F	; 15
    170e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	08 95       	ret
    1716:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
    171a:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    171c:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    171e:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    1720:	98 17       	cp	r25, r24
    1722:	31 f0       	breq	.+12     	; 0x1730 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    1724:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
    1728:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
    172c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    1730:	21 fd       	sbrc	r18, 1
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1734:	9f 5f       	subi	r25, 0xFF	; 255
    1736:	e8 cf       	rjmp	.-48     	; 0x1708 <Endpoint_ConfigureEndpoint_Prv+0x2>
				UECONX &= ~(1 << EPEN);
    1738:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    173c:	3e 7f       	andi	r19, 0xFE	; 254
    173e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
    1742:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1746:	3d 7f       	andi	r19, 0xFD	; 253
    1748:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
    174c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1750:	31 60       	ori	r19, 0x01	; 1
    1752:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
    1756:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
    175a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
    175e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1762:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
    1766:	27 fd       	sbrc	r18, 7
    1768:	e5 cf       	rjmp	.-54     	; 0x1734 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    176a:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    176c:	08 95       	ret

0000176e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    176e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>
    1772:	87 ff       	sbrs	r24, 7
    1774:	13 c0       	rjmp	.+38     	; 0x179c <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1776:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    177a:	82 ff       	sbrs	r24, 2
    177c:	06 c0       	rjmp	.+12     	; 0x178a <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    177e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1782:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1784:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    178a:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    178e:	81 11       	cpse	r24, r1
    1790:	f2 cf       	rjmp	.-28     	; 0x1776 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    1792:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1794:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    1798:	88 23       	and	r24, r24
    179a:	d9 f3       	breq	.-10     	; 0x1792 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    179c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    17a0:	80 ff       	sbrs	r24, 0
    17a2:	f8 cf       	rjmp	.-16     	; 0x1794 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17a8:	8e 77       	andi	r24, 0x7E	; 126
    17aa:	ec cf       	rjmp	.-40     	; 0x1784 <Endpoint_ClearStatusStage+0x16>

000017ac <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    17ac:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    17b0:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    17b4:	95 e6       	ldi	r25, 0x65	; 101
    17b6:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17b8:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    17bc:	82 2f       	mov	r24, r18
    17be:	81 70       	andi	r24, 0x01	; 1
    17c0:	20 ff       	sbrs	r18, 0
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    17c8:	80 ff       	sbrs	r24, 0
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17d0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    17d4:	22 fd       	sbrc	r18, 2
    17d6:	1a c0       	rjmp	.+52     	; 0x180c <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17d8:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17dc:	88 23       	and	r24, r24
    17de:	89 f0       	breq	.+34     	; 0x1802 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17e0:	85 30       	cpi	r24, 0x05	; 5
    17e2:	89 f0       	breq	.+34     	; 0x1806 <Endpoint_WaitUntilReady+0x5a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17e4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    17e8:	85 fd       	sbrc	r24, 5
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <Endpoint_WaitUntilReady+0x5e>
    17ec:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    17f0:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    17f4:	42 17       	cp	r20, r18
    17f6:	53 07       	cpc	r21, r19
    17f8:	f9 f2       	breq	.-66     	; 0x17b8 <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    17fa:	91 50       	subi	r25, 0x01	; 1
    17fc:	e1 f6       	brne	.-72     	; 0x17b6 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    180a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    180c:	08 95       	ret

0000180e <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	6c 01       	movw	r12, r24
    1822:	eb 01       	movw	r28, r22
    1824:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1826:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <Endpoint_WaitUntilReady>
    182a:	f8 2e       	mov	r15, r24
    182c:	81 11       	cpse	r24, r1
    182e:	23 c0       	rjmp	.+70     	; 0x1876 <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1830:	01 15       	cp	r16, r1
    1832:	11 05       	cpc	r17, r1
    1834:	39 f0       	breq	.+14     	; 0x1844 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    1836:	f8 01       	movw	r30, r16
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	c8 1b       	sub	r28, r24
    183e:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1840:	c8 0e       	add	r12, r24
    1842:	d9 1e       	adc	r13, r25
{
    1844:	b1 2c       	mov	r11, r1
    1846:	a1 2c       	mov	r10, r1
	}

	while (Length)
    1848:	20 97       	sbiw	r28, 0x00	; 0
    184a:	a9 f0       	breq	.+42     	; 0x1876 <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    184c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1850:	85 fd       	sbrc	r24, 5
    1852:	22 c0       	rjmp	.+68     	; 0x1898 <Endpoint_Write_Stream_LE+0x8a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1854:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1858:	8e 77       	andi	r24, 0x7E	; 126
    185a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    185e:	01 15       	cp	r16, r1
    1860:	11 05       	cpc	r17, r1
    1862:	a1 f0       	breq	.+40     	; 0x188c <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
    1864:	f8 01       	movw	r30, r16
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	a8 0e       	add	r10, r24
    186c:	b9 1e       	adc	r11, r25
    186e:	b1 82       	std	Z+1, r11	; 0x01
    1870:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1872:	85 e0       	ldi	r24, 0x05	; 5
    1874:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1876:	8f 2d       	mov	r24, r15
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	ff 90       	pop	r15
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	bf 90       	pop	r11
    1888:	af 90       	pop	r10
    188a:	08 95       	ret
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    188c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <Endpoint_WaitUntilReady>
    1890:	88 23       	and	r24, r24
    1892:	d1 f2       	breq	.-76     	; 0x1848 <Endpoint_Write_Stream_LE+0x3a>
    1894:	f8 2e       	mov	r15, r24
    1896:	ef cf       	rjmp	.-34     	; 0x1876 <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1898:	f6 01       	movw	r30, r12
    189a:	81 91       	ld	r24, Z+
    189c:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    189e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
    18a2:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    18a4:	ff ef       	ldi	r31, 0xFF	; 255
    18a6:	af 1a       	sub	r10, r31
    18a8:	bf 0a       	sbc	r11, r31
    18aa:	ce cf       	rjmp	.-100    	; 0x1848 <Endpoint_Write_Stream_LE+0x3a>

000018ac <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    18ac:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18ae:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USB_ControlRequest+0x6>
    18b2:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <USB_ControlRequest+0x7>
    18b6:	86 17       	cp	r24, r22
    18b8:	97 07       	cpc	r25, r23
    18ba:	a0 f0       	brcs	.+40     	; 0x18e4 <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18bc:	61 15       	cp	r22, r1
    18be:	71 05       	cpc	r23, r1
    18c0:	29 f4       	brne	.+10     	; 0x18cc <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18c2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18c6:	9e 77       	andi	r25, 0x7E	; 126
    18c8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18cc:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18ce:	61 15       	cp	r22, r1
    18d0:	71 05       	cpc	r23, r1
    18d2:	51 f4       	brne	.+20     	; 0x18e8 <Endpoint_Write_Control_Stream_LE+0x3c>
    18d4:	91 11       	cpse	r25, r1
    18d6:	08 c0       	rjmp	.+16     	; 0x18e8 <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18dc:	82 ff       	sbrs	r24, 2
    18de:	34 c0       	rjmp	.+104    	; 0x1948 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	08 95       	ret
    18e4:	bc 01       	movw	r22, r24
    18e6:	f2 cf       	rjmp	.-28     	; 0x18cc <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18e8:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18ec:	88 23       	and	r24, r24
    18ee:	c1 f1       	breq	.+112    	; 0x1960 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18f0:	85 30       	cpi	r24, 0x05	; 5
    18f2:	c1 f1       	breq	.+112    	; 0x1964 <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    18f8:	83 fd       	sbrc	r24, 3
    18fa:	30 c0       	rjmp	.+96     	; 0x195c <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1900:	82 fd       	sbrc	r24, 2
    1902:	ea cf       	rjmp	.-44     	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1904:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    1908:	80 ff       	sbrs	r24, 0
    190a:	e1 cf       	rjmp	.-62     	; 0x18ce <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    190c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1910:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1914:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1916:	61 15       	cp	r22, r1
    1918:	71 05       	cpc	r23, r1
    191a:	19 f0       	breq	.+6      	; 0x1922 <Endpoint_Write_Control_Stream_LE+0x76>
    191c:	28 30       	cpi	r18, 0x08	; 8
    191e:	31 05       	cpc	r19, r1
    1920:	58 f0       	brcs	.+22     	; 0x1938 <Endpoint_Write_Control_Stream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	28 30       	cpi	r18, 0x08	; 8
    1926:	31 05       	cpc	r19, r1
    1928:	09 f0       	breq	.+2      	; 0x192c <Endpoint_Write_Control_Stream_LE+0x80>
    192a:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    192c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1930:	2e 77       	andi	r18, 0x7E	; 126
    1932:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1936:	cb cf       	rjmp	.-106    	; 0x18ce <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1938:	81 91       	ld	r24, Z+
				UEDATX = Data;
    193a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    193e:	61 50       	subi	r22, 0x01	; 1
    1940:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1942:	2f 5f       	subi	r18, 0xFF	; 255
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	e7 cf       	rjmp	.-50     	; 0x1916 <Endpoint_Write_Control_Stream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1948:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    194c:	88 23       	and	r24, r24
    194e:	41 f0       	breq	.+16     	; 0x1960 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1950:	85 30       	cpi	r24, 0x05	; 5
    1952:	41 f0       	breq	.+16     	; 0x1964 <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1958:	83 ff       	sbrs	r24, 3
    195a:	be cf       	rjmp	.-132    	; 0x18d8 <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    195c:	81 e0       	ldi	r24, 0x01	; 1
}
    195e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	08 95       	ret

00001968 <Endpoint_Write_Control_PStream_LE>:
{
    1968:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
    196a:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <USB_ControlRequest+0x6>
    196e:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <USB_ControlRequest+0x7>
    1972:	86 17       	cp	r24, r22
    1974:	97 07       	cpc	r25, r23
    1976:	a0 f0       	brcs	.+40     	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
    1978:	61 15       	cp	r22, r1
    197a:	71 05       	cpc	r23, r1
    197c:	29 f4       	brne	.+10     	; 0x1988 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    197e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1982:	8e 77       	andi	r24, 0x7E	; 126
    1984:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1988:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
    198a:	61 15       	cp	r22, r1
    198c:	71 05       	cpc	r23, r1
    198e:	51 f4       	brne	.+20     	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0x3c>
    1990:	91 11       	cpse	r25, r1
    1992:	08 c0       	rjmp	.+16     	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1994:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
    1998:	82 ff       	sbrs	r24, 2
    199a:	35 c0       	rjmp	.+106    	; 0x1a06 <Endpoint_Write_Control_PStream_LE+0x9e>
	return ENDPOINT_RWCSTREAM_NoError;
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	08 95       	ret
    19a0:	bc 01       	movw	r22, r24
    19a2:	f2 cf       	rjmp	.-28     	; 0x1988 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19a4:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19a8:	88 23       	and	r24, r24
    19aa:	c9 f1       	breq	.+114    	; 0x1a1e <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ac:	85 30       	cpi	r24, 0x05	; 5
    19ae:	c9 f1       	breq	.+114    	; 0x1a22 <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    19b4:	83 fd       	sbrc	r24, 3
    19b6:	31 c0       	rjmp	.+98     	; 0x1a1a <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    19bc:	82 fd       	sbrc	r24, 2
    19be:	ea cf       	rjmp	.-44     	; 0x1994 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    19c4:	80 ff       	sbrs	r24, 0
    19c6:	e1 cf       	rjmp	.-62     	; 0x198a <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19c8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    19cc:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    19d0:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19d2:	61 15       	cp	r22, r1
    19d4:	71 05       	cpc	r23, r1
    19d6:	19 f0       	breq	.+6      	; 0x19de <Endpoint_Write_Control_PStream_LE+0x76>
    19d8:	28 30       	cpi	r18, 0x08	; 8
    19da:	31 05       	cpc	r19, r1
    19dc:	58 f0       	brcs	.+22     	; 0x19f4 <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	28 30       	cpi	r18, 0x08	; 8
    19e2:	31 05       	cpc	r19, r1
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <Endpoint_Write_Control_PStream_LE+0x80>
    19e6:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19ec:	8e 77       	andi	r24, 0x7E	; 126
    19ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19f2:	cb cf       	rjmp	.-106    	; 0x198a <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19f4:	84 91       	lpm	r24, Z
				UEDATX = Data;
    19f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    19fa:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    19fc:	61 50       	subi	r22, 0x01	; 1
    19fe:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a00:	2f 5f       	subi	r18, 0xFF	; 255
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	e6 cf       	rjmp	.-52     	; 0x19d2 <Endpoint_Write_Control_PStream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a06:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a0a:	88 23       	and	r24, r24
    1a0c:	41 f0       	breq	.+16     	; 0x1a1e <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a0e:	85 30       	cpi	r24, 0x05	; 5
    1a10:	41 f0       	breq	.+16     	; 0x1a22 <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1a16:	83 ff       	sbrs	r24, 3
    1a18:	bd cf       	rjmp	.-134    	; 0x1994 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
}
    1a1c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	08 95       	ret

00001a26 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	aa 97       	sbiw	r28, 0x2a	; 42
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1a3c:	80 e9       	ldi	r24, 0x90	; 144
    1a3e:	93 e0       	ldi	r25, 0x03	; 3
				return UEDATX;
    1a40:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a44:	fc 01       	movw	r30, r24
    1a46:	21 93       	st	Z+, r18
    1a48:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a4a:	f3 e0       	ldi	r31, 0x03	; 3
    1a4c:	88 39       	cpi	r24, 0x98	; 152
    1a4e:	9f 07       	cpc	r25, r31
    1a50:	b9 f7       	brne	.-18     	; 0x1a40 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1a52:	0e 94 8a 09 	call	0x1314	; 0x1314 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1a5a:	83 ff       	sbrs	r24, 3
    1a5c:	1e c1       	rjmp	.+572    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1a5e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1a62:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <USB_ControlRequest+0x1>
    1a66:	9a 30       	cpi	r25, 0x0A	; 10
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <USB_Device_ProcessControlRequest+0x46>
    1a6a:	17 c1       	rjmp	.+558    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
    1a6c:	e9 2f       	mov	r30, r25
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	e7 5e       	subi	r30, 0xE7	; 231
    1a72:	f5 4d       	sbci	r31, 0xD5	; 213
    1a74:	0c 94 cc 29 	jmp	0x5398	; 0x5398 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a78:	80 38       	cpi	r24, 0x80	; 128
    1a7a:	99 f0       	breq	.+38     	; 0x1aa2 <USB_Device_ProcessControlRequest+0x7c>
    1a7c:	82 38       	cpi	r24, 0x82	; 130
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <USB_Device_ProcessControlRequest+0x5c>
    1a80:	0c c1       	rjmp	.+536    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1a82:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <USB_ControlRequest+0x4>
    1a86:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1a88:	87 30       	cpi	r24, 0x07	; 7
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <USB_Device_ProcessControlRequest+0x68>
    1a8c:	06 c1       	rjmp	.+524    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a92:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1a96:	85 fb       	bst	r24, 5
    1a98:	88 27       	eor	r24, r24
    1a9a:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a9c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <USB_Device_ProcessControlRequest+0x88>
	uint8_t CurrentStatus = 0;
    1aa2:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1aa6:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <USB_Device_RemoteWakeupEnabled>
    1aaa:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1aac:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1aae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ab2:	97 7f       	andi	r25, 0xF7	; 247
    1ab4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1ab8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1abc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ac0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ac4:	8e 77       	andi	r24, 0x7E	; 126
    1ac6:	e5 c0       	rjmp	.+458    	; 0x1c92 <USB_Device_ProcessControlRequest+0x26c>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ac8:	88 23       	and	r24, r24
    1aca:	09 f4       	brne	.+2      	; 0x1ace <USB_Device_ProcessControlRequest+0xa8>
    1acc:	d3 c0       	rjmp	.+422    	; 0x1c74 <USB_Device_ProcessControlRequest+0x24e>
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <USB_Device_ProcessControlRequest+0xae>
    1ad2:	e3 c0       	rjmp	.+454    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ad4:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <USB_ControlRequest+0x2>
    1ad8:	81 11       	cpse	r24, r1
    1ada:	d6 c0       	rjmp	.+428    	; 0x1c88 <USB_Device_ProcessControlRequest+0x262>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1adc:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <USB_ControlRequest+0x4>
    1ae0:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1ae2:	2f ef       	ldi	r18, 0xFF	; 255
    1ae4:	28 0f       	add	r18, r24
    1ae6:	26 30       	cpi	r18, 0x06	; 6
    1ae8:	08 f0       	brcs	.+2      	; 0x1aec <USB_Device_ProcessControlRequest+0xc6>
    1aea:	d7 c0       	rjmp	.+430    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1af0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1af4:	20 ff       	sbrs	r18, 0
    1af6:	c8 c0       	rjmp	.+400    	; 0x1c88 <USB_Device_ProcessControlRequest+0x262>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1af8:	93 30       	cpi	r25, 0x03	; 3
    1afa:	31 f4       	brne	.+12     	; 0x1b08 <USB_Device_ProcessControlRequest+0xe2>
				UECONX |= (1 << STALLRQ);
    1afc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b00:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1b02:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b06:	c0 c0       	rjmp	.+384    	; 0x1c88 <USB_Device_ProcessControlRequest+0x262>
				UECONX |= (1 << STALLRQC);
    1b08:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b0c:	90 61       	ori	r25, 0x10	; 16
    1b0e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b12:	21 e0       	ldi	r18, 0x01	; 1
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <USB_Device_ProcessControlRequest+0xf4>
    1b18:	22 0f       	add	r18, r18
    1b1a:	8a 95       	dec	r24
    1b1c:	ea f7       	brpl	.-6      	; 0x1b18 <USB_Device_ProcessControlRequest+0xf2>
    1b1e:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1b22:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1b26:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b2a:	88 60       	ori	r24, 0x08	; 8
    1b2c:	ea cf       	rjmp	.-44     	; 0x1b02 <USB_Device_ProcessControlRequest+0xdc>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b2e:	81 11       	cpse	r24, r1
    1b30:	b4 c0       	rjmp	.+360    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1b32:	10 91 92 03 	lds	r17, 0x0392	; 0x800392 <USB_ControlRequest+0x2>
    1b36:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1b38:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1b3c:	80 78       	andi	r24, 0x80	; 128
    1b3e:	81 2b       	or	r24, r17
    1b40:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1b44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b48:	87 7f       	andi	r24, 0xF7	; 247
    1b4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1b4e:	0e 94 b7 0b 	call	0x176e	; 0x176e <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1b56:	80 ff       	sbrs	r24, 0
    1b58:	fc cf       	rjmp	.-8      	; 0x1b52 <USB_Device_ProcessControlRequest+0x12c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1b5a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1b5e:	80 68       	ori	r24, 0x80	; 128
    1b60:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	11 11       	cpse	r17, r1
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <USB_DeviceState>
    1b6e:	95 c0       	rjmp	.+298    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b70:	80 58       	subi	r24, 0x80	; 128
    1b72:	82 30       	cpi	r24, 0x02	; 2
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <USB_Device_ProcessControlRequest+0x152>
    1b76:	91 c0       	rjmp	.+290    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1b78:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <USB_ControlRequest+0x2>
    1b7c:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <USB_ControlRequest+0x3>
    1b80:	8c 3d       	cpi	r24, 0xDC	; 220
    1b82:	23 e0       	ldi	r18, 0x03	; 3
    1b84:	92 07       	cpc	r25, r18
    1b86:	a1 f5       	brne	.+104    	; 0x1bf0 <USB_Device_ProcessControlRequest+0x1ca>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1b8c:	8a e2       	ldi	r24, 0x2A	; 42
    1b8e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1b90:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1b92:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1b94:	de 01       	movw	r26, r28
    1b96:	13 96       	adiw	r26, 0x03	; 3
    1b98:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1b9a:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1b9c:	51 e2       	ldi	r21, 0x21	; 33
    1b9e:	e3 2f       	mov	r30, r19
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1ba6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1ba8:	20 ff       	sbrs	r18, 0
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <USB_Device_ProcessControlRequest+0x18c>
					{
						SerialByte >>= 4;
    1bac:	e2 95       	swap	r30
    1bae:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1bb0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1bb2:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1bb4:	8e 2f       	mov	r24, r30
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	ea 30       	cpi	r30, 0x0A	; 10
    1bba:	c0 f0       	brcs	.+48     	; 0x1bec <USB_Device_ProcessControlRequest+0x1c6>
    1bbc:	c7 96       	adiw	r24, 0x37	; 55
    1bbe:	8d 93       	st	X+, r24
    1bc0:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bc2:	2f 5f       	subi	r18, 0xFF	; 255
    1bc4:	24 31       	cpi	r18, 0x14	; 20
    1bc6:	59 f7       	brne	.-42     	; 0x1b9e <USB_Device_ProcessControlRequest+0x178>
				SREG = GlobalIntState;
    1bc8:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1bca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bce:	87 7f       	andi	r24, 0xF7	; 247
    1bd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1bd4:	6a e2       	ldi	r22, 0x2A	; 42
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	0e 94 56 0c 	call	0x18ac	; 0x18ac <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1be0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be4:	8b 77       	andi	r24, 0x7B	; 123
    1be6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bea:	57 c0       	rjmp	.+174    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1bec:	c0 96       	adiw	r24, 0x30	; 48
    1bee:	e7 cf       	rjmp	.-50     	; 0x1bbe <USB_Device_ProcessControlRequest+0x198>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1bf0:	60 91 94 03 	lds	r22, 0x0394	; 0x800394 <USB_ControlRequest+0x4>
    1bf4:	70 91 95 03 	lds	r23, 0x0395	; 0x800395 <USB_ControlRequest+0x5>
    1bf8:	ae 01       	movw	r20, r28
    1bfa:	4f 5f       	subi	r20, 0xFF	; 255
    1bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfe:	0e 94 16 0b 	call	0x162c	; 0x162c <CALLBACK_USB_GetDescriptor>
    1c02:	bc 01       	movw	r22, r24
    1c04:	89 2b       	or	r24, r25
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <USB_Device_ProcessControlRequest+0x1e4>
    1c08:	48 c0       	rjmp	.+144    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    1c0a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c0e:	97 7f       	andi	r25, 0xF7	; 247
    1c10:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	9a 81       	ldd	r25, Y+2	; 0x02
    1c18:	0e 94 b4 0c 	call	0x1968	; 0x1968 <Endpoint_Write_Control_PStream_LE>
    1c1c:	e1 cf       	rjmp	.-62     	; 0x1be0 <USB_Device_ProcessControlRequest+0x1ba>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c1e:	80 38       	cpi	r24, 0x80	; 128
    1c20:	e1 f5       	brne	.+120    	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
    1c22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c26:	87 7f       	andi	r24, 0xF7	; 247
    1c28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c2c:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1c30:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1c34:	45 cf       	rjmp	.-374    	; 0x1ac0 <USB_Device_ProcessControlRequest+0x9a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c36:	81 11       	cpse	r24, r1
    1c38:	30 c0       	rjmp	.+96     	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1c3a:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <USB_ControlRequest+0x2>
    1c3e:	92 30       	cpi	r25, 0x02	; 2
    1c40:	60 f5       	brcc	.+88     	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    1c42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c46:	87 7f       	andi	r24, 0xF7	; 247
    1c48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1c4c:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1c50:	0e 94 b7 0b 	call	0x176e	; 0x176e <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    1c54:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <USB_Device_ConfigurationNumber>
    1c58:	88 23       	and	r24, r24
    1c5a:	11 f0       	breq	.+4      	; 0x1c60 <USB_Device_ProcessControlRequest+0x23a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1c5c:	84 e0       	ldi	r24, 0x04	; 4
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <USB_Device_ProcessControlRequest+0x244>
				return (UDADDR & (1 << ADDEN));
    1c60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1c64:	87 fd       	sbrc	r24, 7
    1c66:	fa cf       	rjmp	.-12     	; 0x1c5c <USB_Device_ProcessControlRequest+0x236>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1c6e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EVENT_USB_Device_ConfigurationChanged>
    1c72:	13 c0       	rjmp	.+38     	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1c74:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <USB_ControlRequest+0x2>
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	79 f4       	brne	.+30     	; 0x1c9a <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	93 30       	cpi	r25, 0x03	; 3
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <USB_Device_ProcessControlRequest+0x25e>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c88:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1c8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c90:	87 7f       	andi	r24, 0xF7	; 247
    1c92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c96:	0e 94 b7 0b 	call	0x176e	; 0x176e <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1c9e:	83 ff       	sbrs	r24, 3
    1ca0:	0a c0       	rjmp	.+20     	; 0x1cb6 <USB_Device_ProcessControlRequest+0x290>
				UEINTX &= ~(1 << RXSTPI);
    1ca2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ca6:	87 7f       	andi	r24, 0xF7	; 247
    1ca8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1cac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1cb0:	80 62       	ori	r24, 0x20	; 32
    1cb2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1cb6:	aa 96       	adiw	r28, 0x2a	; 42
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	08 95       	ret

00001cca <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1cca:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1cce:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1cd2:	e0 ee       	ldi	r30, 0xE0	; 224
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1cdc:	e8 ed       	ldi	r30, 0xD8	; 216
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	8f 77       	andi	r24, 0x7F	; 127
    1ce4:	80 83       	st	Z, r24
				PLLCSR = 0;
    1ce6:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    1ce8:	a7 ed       	ldi	r26, 0xD7	; 215
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	8c 91       	ld	r24, X
    1cee:	8e 7f       	andi	r24, 0xFE	; 254
    1cf0:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 7e       	andi	r24, 0xEF	; 239
    1cf6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1cf8:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <USB_IsInitialized>
}
    1cfc:	08 95       	ret

00001cfe <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1d06:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1d0a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1d0e:	c8 ed       	ldi	r28, 0xD8	; 216
    1d10:	d0 e0       	ldi	r29, 0x00	; 0
    1d12:	88 81       	ld	r24, Y
    1d14:	8f 77       	andi	r24, 0x7F	; 127
    1d16:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1d18:	88 81       	ld	r24, Y
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    1d1e:	88 81       	ld	r24, Y
    1d20:	8f 7d       	andi	r24, 0xDF	; 223
    1d22:	88 83       	st	Y, r24
				PLLCSR = 0;
    1d24:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1d26:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1d2a:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1d2e:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1d32:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1d36:	00 ee       	ldi	r16, 0xE0	; 224
    1d38:	10 e0       	ldi	r17, 0x00	; 0
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8b 7f       	andi	r24, 0xFB	; 251
    1d40:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1d42:	88 81       	ld	r24, Y
    1d44:	81 60       	ori	r24, 0x01	; 1
    1d46:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d48:	42 e0       	ldi	r20, 0x02	; 2
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	0e 94 83 0b 	call	0x1706	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d52:	e1 ee       	ldi	r30, 0xE1	; 225
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8e 7f       	andi	r24, 0xFE	; 254
    1d5a:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    1d5c:	e2 ee       	ldi	r30, 0xE2	; 226
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	81 60       	ori	r24, 0x01	; 1
    1d64:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1d66:	80 81       	ld	r24, Z
    1d68:	88 60       	ori	r24, 0x08	; 8
    1d6a:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	80 81       	ld	r24, Z
    1d70:	8e 7f       	andi	r24, 0xFE	; 254
    1d72:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1d74:	88 81       	ld	r24, Y
    1d76:	80 61       	ori	r24, 0x10	; 16
    1d78:	88 83       	st	Y, r24
}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	08 95       	ret

00001d84 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1d84:	e8 ed       	ldi	r30, 0xD8	; 216
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	8f 7e       	andi	r24, 0xEF	; 239
    1d8c:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1d8e:	e7 ed       	ldi	r30, 0xD7	; 215
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	81 60       	ori	r24, 0x01	; 1
    1d96:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <USB_IsInitialized>
	USB_ResetInterface();
    1da2:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <USB_ResetInterface>

00001da6 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1da6:	e8 ed       	ldi	r30, 0xD8	; 216
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8e 7f       	andi	r24, 0xFE	; 254
    1dae:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1db0:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    1db4:	08 95       	ret

00001db6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1db6:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1dba:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    1dbe:	08 95       	ret

00001dc0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1dc0:	1f 92       	push	r1
    1dc2:	0f 92       	push	r0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	0f 92       	push	r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1de2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1de6:	82 ff       	sbrs	r24, 2
    1de8:	0b c0       	rjmp	.+22     	; 0x1e00 <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    1dea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1dee:	82 ff       	sbrs	r24, 2
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1df2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1df6:	8b 7f       	andi	r24, 0xFB	; 251
    1df8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1dfc:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1e00:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1e04:	80 ff       	sbrs	r24, 0
    1e06:	19 c0       	rjmp	.+50     	; 0x1e3a <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    1e08:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e0c:	80 ff       	sbrs	r24, 0
    1e0e:	15 c0       	rjmp	.+42     	; 0x1e3a <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1e10:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1e14:	8e 7f       	andi	r24, 0xFE	; 254
    1e16:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e1a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e1e:	80 ff       	sbrs	r24, 0
    1e20:	96 c0       	rjmp	.+300    	; 0x1f4e <__vector_10+0x18e>
				PLLCSR = USB_PLL_PSC;
    1e22:	80 e1       	ldi	r24, 0x10	; 16
    1e24:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e26:	82 e1       	ldi	r24, 0x12	; 18
    1e28:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e2a:	09 b4       	in	r0, 0x29	; 41
    1e2c:	00 fe       	sbrs	r0, 0
    1e2e:	fd cf       	rjmp	.-6      	; 0x1e2a <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1e36:	0e 94 64 09 	call	0x12c8	; 0x12c8 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1e3a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e3e:	80 ff       	sbrs	r24, 0
    1e40:	19 c0       	rjmp	.+50     	; 0x1e74 <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    1e42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e46:	80 ff       	sbrs	r24, 0
    1e48:	15 c0       	rjmp	.+42     	; 0x1e74 <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    1e4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e4e:	8e 7f       	andi	r24, 0xFE	; 254
    1e50:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1e54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e58:	80 61       	ori	r24, 0x10	; 16
    1e5a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1e5e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e62:	80 62       	ori	r24, 0x20	; 32
    1e64:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1e68:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e6a:	85 e0       	ldi	r24, 0x05	; 5
    1e6c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1e70:	0e 94 43 0a 	call	0x1486	; 0x1486 <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1e74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e78:	84 ff       	sbrs	r24, 4
    1e7a:	2b c0       	rjmp	.+86     	; 0x1ed2 <__vector_10+0x112>
						return (UDIEN  & (1 << WAKEUPE));
    1e7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e80:	84 ff       	sbrs	r24, 4
    1e82:	27 c0       	rjmp	.+78     	; 0x1ed2 <__vector_10+0x112>
				PLLCSR = USB_PLL_PSC;
    1e84:	80 e1       	ldi	r24, 0x10	; 16
    1e86:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e88:	82 e1       	ldi	r24, 0x12	; 18
    1e8a:	89 bd       	out	0x29, r24	; 41
				return ((PLLCSR & (1 << PLOCK)) ? true : false);
    1e8c:	89 b5       	in	r24, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e8e:	98 2f       	mov	r25, r24
    1e90:	91 70       	andi	r25, 0x01	; 1
    1e92:	80 ff       	sbrs	r24, 0
    1e94:	fb cf       	rjmp	.-10     	; 0x1e8c <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1e96:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e9a:	8f 7d       	andi	r24, 0xDF	; 223
    1e9c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1ea0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ea4:	8f 7e       	andi	r24, 0xEF	; 239
    1ea6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1eaa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1eae:	8f 7e       	andi	r24, 0xEF	; 239
    1eb0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1eb4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1eb8:	81 60       	ori	r24, 0x01	; 1
    1eba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ebe:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <USB_Device_ConfigurationNumber>
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <__vector_10+0x108>
    1ec6:	49 c0       	rjmp	.+146    	; 0x1f5a <__vector_10+0x19a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1ec8:	84 e0       	ldi	r24, 0x04	; 4
    1eca:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <USB_DeviceState>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ece:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1ed2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ed6:	83 ff       	sbrs	r24, 3
    1ed8:	29 c0       	rjmp	.+82     	; 0x1f2c <__vector_10+0x16c>
						return (UDIEN  & (1 << EORSTE));
    1eda:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ede:	83 ff       	sbrs	r24, 3
    1ee0:	25 c0       	rjmp	.+74     	; 0x1f2c <__vector_10+0x16c>
						UDINT  &= ~(1 << EORSTI);
    1ee2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ee6:	87 7f       	andi	r24, 0xF7	; 247
    1ee8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1ef2:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1ef6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1efa:	8e 7f       	andi	r24, 0xFE	; 254
    1efc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1f00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f04:	8e 7f       	andi	r24, 0xFE	; 254
    1f06:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1f0a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f0e:	80 61       	ori	r24, 0x10	; 16
    1f10:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1f14:	42 e0       	ldi	r20, 0x02	; 2
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	0e 94 83 0b 	call	0x1706	; 0x1706 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1f1e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f22:	88 60       	ori	r24, 0x08	; 8
    1f24:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1f28:	0e 94 70 09 	call	0x12e0	; 0x12e0 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1f2c:	ff 91       	pop	r31
    1f2e:	ef 91       	pop	r30
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	0f 90       	pop	r0
    1f4a:	1f 90       	pop	r1
    1f4c:	18 95       	reti
				PLLCSR = 0;
    1f4e:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    1f50:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1f54:	0e 94 6d 09 	call	0x12da	; 0x12da <EVENT_USB_Device_Disconnect>
    1f58:	70 cf       	rjmp	.-288    	; 0x1e3a <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f5a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1f5e:	87 fd       	sbrc	r24, 7
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <USB_DeviceState>
    1f66:	b3 cf       	rjmp	.-154    	; 0x1ece <__vector_10+0x10e>

00001f68 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f68:	1f 92       	push	r1
    1f6a:	0f 92       	push	r0
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	0f 92       	push	r0
    1f70:	11 24       	eor	r1, r1
    1f72:	2f 93       	push	r18
    1f74:	3f 93       	push	r19
    1f76:	4f 93       	push	r20
    1f78:	5f 93       	push	r21
    1f7a:	6f 93       	push	r22
    1f7c:	7f 93       	push	r23
    1f7e:	8f 93       	push	r24
    1f80:	9f 93       	push	r25
    1f82:	af 93       	push	r26
    1f84:	bf 93       	push	r27
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	ef 93       	push	r30
    1f8c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f8e:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f92:	df 70       	andi	r29, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f94:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1f98:	c8 2f       	mov	r28, r24
    1f9a:	c1 70       	andi	r28, 0x01	; 1
    1f9c:	80 fd       	sbrc	r24, 0
    1f9e:	c0 e8       	ldi	r28, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fa0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1fa4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1fa8:	87 7f       	andi	r24, 0xF7	; 247
    1faa:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1fae:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1fb0:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <USB_Device_ProcessControlRequest>
    1fb4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1fb8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1fbc:	88 60       	ori	r24, 0x08	; 8
    1fbe:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fc2:	cd 2b       	or	r28, r29
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fc4:	cf 70       	andi	r28, 0x0F	; 15
    1fc6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1fca:	ff 91       	pop	r31
    1fcc:	ef 91       	pop	r30
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	bf 91       	pop	r27
    1fd4:	af 91       	pop	r26
    1fd6:	9f 91       	pop	r25
    1fd8:	8f 91       	pop	r24
    1fda:	7f 91       	pop	r23
    1fdc:	6f 91       	pop	r22
    1fde:	5f 91       	pop	r21
    1fe0:	4f 91       	pop	r20
    1fe2:	3f 91       	pop	r19
    1fe4:	2f 91       	pop	r18
    1fe6:	0f 90       	pop	r0
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	0f 90       	pop	r0
    1fec:	1f 90       	pop	r1
    1fee:	18 95       	reti

00001ff0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1ff0:	08 95       	ret

00001ff2 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1ff2:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <driver+0x1>
    1ff6:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <driver>
}
    1ffa:	08 95       	ret

00001ffc <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1ffc:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2000:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2004:	30 97       	sbiw	r30, 0x00	; 0
    2006:	21 f0       	breq	.+8      	; 0x2010 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2008:	01 90       	ld	r0, Z+
    200a:	f0 81       	ld	r31, Z
    200c:	e0 2d       	mov	r30, r0
    200e:	09 94       	ijmp
}
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	08 95       	ret

00002014 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	8c 01       	movw	r16, r24
    if (!driver) return;
    2022:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    2026:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    202a:	30 97       	sbiw	r30, 0x00	; 0
    202c:	c1 f1       	breq	.+112    	; 0x209e <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    202e:	02 80       	ldd	r0, Z+2	; 0x02
    2030:	f3 81       	ldd	r31, Z+3	; 0x03
    2032:	e0 2d       	mov	r30, r0
    2034:	09 95       	icall

    if (debug_keyboard) {
    2036:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    203a:	82 ff       	sbrs	r24, 2
    203c:	30 c0       	rjmp	.+96     	; 0x209e <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    203e:	80 ff       	sbrs	r24, 0
    2040:	04 c0       	rjmp	.+8      	; 0x204a <host_keyboard_send+0x36>
    2042:	80 eb       	ldi	r24, 0xB0	; 176
    2044:	93 e0       	ldi	r25, 0x03	; 3
    2046:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
{
    204a:	d0 e0       	ldi	r29, 0x00	; 0
    204c:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    204e:	8a ea       	ldi	r24, 0xAA	; 170
    2050:	e8 2e       	mov	r14, r24
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	f8 2e       	mov	r15, r24
    2056:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    205a:	80 ff       	sbrs	r24, 0
    205c:	0e c0       	rjmp	.+28     	; 0x207a <host_keyboard_send+0x66>
    205e:	f8 01       	movw	r30, r16
    2060:	ec 0f       	add	r30, r28
    2062:	fd 1f       	adc	r31, r29
    2064:	80 81       	ld	r24, Z
    2066:	1f 92       	push	r1
    2068:	8f 93       	push	r24
    206a:	ff 92       	push	r15
    206c:	ef 92       	push	r14
    206e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    207c:	c0 32       	cpi	r28, 0x20	; 32
    207e:	d1 05       	cpc	r29, r1
    2080:	51 f7       	brne	.-44     	; 0x2056 <host_keyboard_send+0x42>
        }
        dprint("\n");
    2082:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    2086:	80 ff       	sbrs	r24, 0
    2088:	0a c0       	rjmp	.+20     	; 0x209e <host_keyboard_send+0x8a>
    208a:	88 ea       	ldi	r24, 0xA8	; 168
    208c:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
        dprint("\n");
    209a:	0c 94 43 06 	jmp	0xc86	; 0xc86 <xputs>
}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	08 95       	ret

000020ac <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    20ac:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    20b0:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    20b4:	30 97       	sbiw	r30, 0x00	; 0
    20b6:	21 f0       	breq	.+8      	; 0x20c0 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    20b8:	04 80       	ldd	r0, Z+4	; 0x04
    20ba:	f5 81       	ldd	r31, Z+5	; 0x05
    20bc:	e0 2d       	mov	r30, r0
    20be:	09 94       	ijmp
}
    20c0:	08 95       	ret

000020c2 <host_system_send>:

void host_system_send(uint16_t report)
{
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    20c8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <last_system_report>
    20cc:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <last_system_report+0x1>
    20d0:	8c 17       	cp	r24, r28
    20d2:	9d 07       	cpc	r25, r29
    20d4:	01 f1       	breq	.+64     	; 0x2116 <host_system_send+0x54>
    last_system_report = report;
    20d6:	d0 93 83 02 	sts	0x0283, r29	; 0x800283 <last_system_report+0x1>
    20da:	c0 93 82 02 	sts	0x0282, r28	; 0x800282 <last_system_report>

    if (!driver) return;
    20de:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    20e2:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    20e6:	30 97       	sbiw	r30, 0x00	; 0
    20e8:	b1 f0       	breq	.+44     	; 0x2116 <host_system_send+0x54>
    (*driver->send_system)(report);
    20ea:	06 80       	ldd	r0, Z+6	; 0x06
    20ec:	f7 81       	ldd	r31, Z+7	; 0x07
    20ee:	e0 2d       	mov	r30, r0
    20f0:	ce 01       	movw	r24, r28
    20f2:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    20f4:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    20f8:	85 70       	andi	r24, 0x05	; 5
    20fa:	85 30       	cpi	r24, 0x05	; 5
    20fc:	61 f4       	brne	.+24     	; 0x2116 <host_system_send+0x54>
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	8a e9       	ldi	r24, 0x9A	; 154
    2104:	93 e0       	ldi	r25, 0x03	; 3
    2106:	9f 93       	push	r25
    2108:	8f 93       	push	r24
    210a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    }
}
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    2122:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <last_consumer_report>
    2126:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <last_consumer_report+0x1>
    212a:	8c 17       	cp	r24, r28
    212c:	9d 07       	cpc	r25, r29
    212e:	01 f1       	breq	.+64     	; 0x2170 <host_consumer_send+0x54>
    last_consumer_report = report;
    2130:	d0 93 81 02 	sts	0x0281, r29	; 0x800281 <last_consumer_report+0x1>
    2134:	c0 93 80 02 	sts	0x0280, r28	; 0x800280 <last_consumer_report>

    if (!driver) return;
    2138:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <driver>
    213c:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <driver+0x1>
    2140:	30 97       	sbiw	r30, 0x00	; 0
    2142:	b1 f0       	breq	.+44     	; 0x2170 <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    2144:	00 84       	ldd	r0, Z+8	; 0x08
    2146:	f1 85       	ldd	r31, Z+9	; 0x09
    2148:	e0 2d       	mov	r30, r0
    214a:	ce 01       	movw	r24, r28
    214c:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    214e:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    2152:	85 70       	andi	r24, 0x05	; 5
    2154:	85 30       	cpi	r24, 0x05	; 5
    2156:	61 f4       	brne	.+24     	; 0x2170 <host_consumer_send+0x54>
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	8a e8       	ldi	r24, 0x8A	; 138
    215e:	93 e0       	ldi	r25, 0x03	; 3
    2160:	9f 93       	push	r25
    2162:	8f 93       	push	r24
    2164:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    }
}
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	08 95       	ret

00002176 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    2176:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <matrix_setup>

0000217a <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    217a:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <timer_init>
    matrix_init();
    217e:	0e 94 e5 06 	call	0xdca	; 0xdca <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2182:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <bootmagic>

00002186 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2186:	9f 92       	push	r9
    2188:	af 92       	push	r10
    218a:	bf 92       	push	r11
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	00 d0       	rcall	.+0      	; 0x219e <keyboard_task+0x18>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <keyboard_task+0x1a>
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    21a6:	0e 94 ef 06 	call	0xdde	; 0xdde <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21aa:	87 e8       	ldi	r24, 0x87	; 135
    21ac:	c8 2e       	mov	r12, r24
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	d8 2e       	mov	r13, r24
    21b2:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row = matrix_get_row(r);
    21b4:	81 2f       	mov	r24, r17
    21b6:	0e 94 3c 07 	call	0xe78	; 0xe78 <matrix_get_row>
    21ba:	98 2e       	mov	r9, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    21bc:	f6 01       	movw	r30, r12
    21be:	e1 90       	ld	r14, Z+
    21c0:	6f 01       	movw	r12, r30
        if (matrix_change) {
    21c2:	e8 16       	cp	r14, r24
    21c4:	99 f1       	breq	.+102    	; 0x222c <keyboard_task+0xa6>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    21c6:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    21ca:	81 fd       	sbrc	r24, 1
    21cc:	0e 94 86 11 	call	0x230c	; 0x230c <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21d0:	f1 2c       	mov	r15, r1
    21d2:	01 e0       	ldi	r16, 0x01	; 1
        matrix_change = matrix_row ^ matrix_prev[r];
    21d4:	e9 24       	eor	r14, r9
    21d6:	56 01       	movw	r10, r12
    21d8:	f1 e0       	ldi	r31, 0x01	; 1
    21da:	af 1a       	sub	r10, r31
    21dc:	b1 08       	sbc	r11, r1
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    21de:	8e 2d       	mov	r24, r14
    21e0:	80 23       	and	r24, r16
    21e2:	f9 f0       	breq	.+62     	; 0x2222 <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
    21e4:	f9 82       	std	Y+1, r15	; 0x01
    21e6:	1a 83       	std	Y+2, r17	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    21e8:	91 e0       	ldi	r25, 0x01	; 1
    21ea:	89 2d       	mov	r24, r9
    21ec:	80 23       	and	r24, r16
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <keyboard_task+0x6c>
    21f0:	90 e0       	ldi	r25, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    21f2:	9b 83       	std	Y+3, r25	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    21f4:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <timer_read>
    21f8:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    21fa:	78 2f       	mov	r23, r24
    21fc:	9d 83       	std	Y+5, r25	; 0x05
    21fe:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2200:	49 81       	ldd	r20, Y+1	; 0x01
    2202:	5a 81       	ldd	r21, Y+2	; 0x02
    2204:	6b 81       	ldd	r22, Y+3	; 0x03
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	0e 94 bc 11 	call	0x2378	; 0x2378 <action_exec>
                    hook_matrix_change(e);
    220c:	49 81       	ldd	r20, Y+1	; 0x01
    220e:	5a 81       	ldd	r21, Y+2	; 0x02
    2210:	6b 81       	ldd	r22, Y+3	; 0x03
    2212:	7c 81       	ldd	r23, Y+4	; 0x04
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    221a:	f5 01       	movw	r30, r10
    221c:	80 81       	ld	r24, Z
    221e:	80 27       	eor	r24, r16
    2220:	80 83       	st	Z, r24
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    2222:	f3 94       	inc	r15
    2224:	00 0f       	add	r16, r16
    2226:	f8 e0       	ldi	r31, 0x08	; 8
    2228:	ff 12       	cpse	r15, r31
    222a:	d9 cf       	rjmp	.-78     	; 0x21de <keyboard_task+0x58>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    222c:	1f 5f       	subi	r17, 0xFF	; 255
    222e:	10 31       	cpi	r17, 0x10	; 16
    2230:	09 f0       	breq	.+2      	; 0x2234 <keyboard_task+0xae>
    2232:	c0 cf       	rjmp	.-128    	; 0x21b4 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	8a 83       	std	Y+2, r24	; 0x02
    223a:	1b 82       	std	Y+3, r1	; 0x03
    223c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <timer_read>
    2240:	81 60       	ori	r24, 0x01	; 1
    2242:	78 2f       	mov	r23, r24
    2244:	9d 83       	std	Y+5, r25	; 0x05
    2246:	8c 83       	std	Y+4, r24	; 0x04
    2248:	49 81       	ldd	r20, Y+1	; 0x01
    224a:	5a 81       	ldd	r21, Y+2	; 0x02
    224c:	6b 81       	ldd	r22, Y+3	; 0x03
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	0e 94 bc 11 	call	0x2378	; 0x2378 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    2254:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2258:	0e 94 dd 22 	call	0x45ba	; 0x45ba <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    225c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <host_keyboard_leds>
    2260:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <led_status.5131>
    2264:	89 17       	cp	r24, r25
    2266:	49 f1       	breq	.+82     	; 0x22ba <keyboard_task+0x134>
        led_status = host_keyboard_leds();
    2268:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <host_keyboard_leds>
    226c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <led_status.5131>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2270:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    2274:	95 70       	andi	r25, 0x05	; 5
    2276:	95 30       	cpi	r25, 0x05	; 5
    2278:	61 f4       	brne	.+24     	; 0x2292 <keyboard_task+0x10c>
    227a:	1f 92       	push	r1
    227c:	8f 93       	push	r24
    227e:	8b eb       	ldi	r24, 0xBB	; 187
    2280:	93 e0       	ldi	r25, 0x03	; 3
    2282:	9f 93       	push	r25
    2284:	8f 93       	push	r24
    2286:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2292:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <led_status.5131>
    }
}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	bf 90       	pop	r11
    22b2:	af 90       	pop	r10
    22b4:	9f 90       	pop	r9
        hook_keyboard_leds_change(led_status);
    22b6:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <hook_keyboard_leds_change>
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	ff 90       	pop	r15
    22ce:	ef 90       	pop	r14
    22d0:	df 90       	pop	r13
    22d2:	cf 90       	pop	r12
    22d4:	bf 90       	pop	r11
    22d6:	af 90       	pop	r10
    22d8:	9f 90       	pop	r9
    22da:	08 95       	ret

000022dc <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    22dc:	0c 94 42 07 	jmp	0xe84	; 0xe84 <led_set>

000022e0 <matrix_clear>:
    22e0:	08 95       	ret

000022e2 <matrix_setup>:
void matrix_clear(void)
{
}

__attribute__ ((weak))
void matrix_setup(void) {}
    22e2:	08 95       	ret

000022e4 <matrix_is_on>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    22e4:	cf 93       	push	r28
    22e6:	c6 2f       	mov	r28, r22
    return (matrix_get_row(row) & (1<<col));
    22e8:	0e 94 3c 07 	call	0xe78	; 0xe78 <matrix_get_row>
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <matrix_is_on+0x12>
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	ca 95       	dec	r28
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <matrix_is_on+0xe>
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	28 23       	and	r18, r24
    22fe:	39 23       	and	r19, r25
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	23 2b       	or	r18, r19
    2304:	09 f4       	brne	.+2      	; 0x2308 <matrix_is_on+0x24>
    2306:	80 e0       	ldi	r24, 0x00	; 0
}
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    2318:	84 ed       	ldi	r24, 0xD4	; 212
    231a:	93 e0       	ldi	r25, 0x03	; 3
    231c:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    2320:	d0 e0       	ldi	r29, 0x00	; 0
    2322:	c0 e0       	ldi	r28, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2324:	83 e3       	ldi	r24, 0x33	; 51
    2326:	e8 2e       	mov	r14, r24
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	f8 2e       	mov	r15, r24
    232c:	06 ec       	ldi	r16, 0xC6	; 198
    232e:	13 e0       	ldi	r17, 0x03	; 3
    2330:	8c 2f       	mov	r24, r28
    2332:	0e 94 3c 07 	call	0xe78	; 0xe78 <matrix_get_row>
    2336:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <bitrev>
    233a:	ff 92       	push	r15
    233c:	ef 92       	push	r14
    233e:	1f 92       	push	r1
    2340:	8f 93       	push	r24
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	1f 93       	push	r17
    2348:	0f 93       	push	r16
    234a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    234e:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2350:	8d b7       	in	r24, 0x3d	; 61
    2352:	9e b7       	in	r25, 0x3e	; 62
    2354:	08 96       	adiw	r24, 0x08	; 8
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	9e bf       	out	0x3e, r25	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	8d bf       	out	0x3d, r24	; 61
    2360:	c0 31       	cpi	r28, 0x10	; 16
    2362:	d1 05       	cpc	r29, r1
    2364:	29 f7       	brne	.-54     	; 0x2330 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	08 95       	ret

00002374 <matrix_power_up>:
    2374:	08 95       	ret

00002376 <matrix_power_down>:
    2376:	08 95       	ret

00002378 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	2b 97       	sbiw	r28, 0x0b	; 11
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	4f 83       	std	Y+7, r20	; 0x07
    238e:	58 87       	std	Y+8, r21	; 0x08
    2390:	69 87       	std	Y+9, r22	; 0x09
    2392:	7a 87       	std	Y+10, r23	; 0x0a
    2394:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2396:	8a 85       	ldd	r24, Y+10	; 0x0a
    2398:	9b 85       	ldd	r25, Y+11	; 0x0b
    239a:	89 2b       	or	r24, r25
    239c:	21 f0       	breq	.+8      	; 0x23a6 <action_exec+0x2e>
    239e:	85 2f       	mov	r24, r21
    23a0:	84 23       	and	r24, r20
    23a2:	8f 3f       	cpi	r24, 0xFF	; 255
    23a4:	d9 f4       	brne	.+54     	; 0x23dc <action_exec+0x64>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    23a6:	1e 82       	std	Y+6, r1	; 0x06
    23a8:	1d 82       	std	Y+5, r1	; 0x05
    23aa:	85 e0       	ldi	r24, 0x05	; 5
    23ac:	fe 01       	movw	r30, r28
    23ae:	37 96       	adiw	r30, 0x07	; 7
    23b0:	de 01       	movw	r26, r28
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	01 90       	ld	r0, Z+
    23b6:	0d 92       	st	X+, r0
    23b8:	8a 95       	dec	r24
    23ba:	e1 f7       	brne	.-8      	; 0x23b4 <action_exec+0x3c>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    23bc:	49 81       	ldd	r20, Y+1	; 0x01
    23be:	5a 81       	ldd	r21, Y+2	; 0x02
    23c0:	6b 81       	ldd	r22, Y+3	; 0x03
    23c2:	7c 81       	ldd	r23, Y+4	; 0x04
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    23c8:	2b 96       	adiw	r28, 0x0b	; 11
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    action_tapping_process(record);
    23d8:	0c 94 df 18 	jmp	0x31be	; 0x31be <action_tapping_process>
        hook_matrix_change(event);
    23dc:	69 85       	ldd	r22, Y+9	; 0x09
    23de:	7a 85       	ldd	r23, Y+10	; 0x0a
    23e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e2:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <hook_matrix_change>
    23e6:	df cf       	rjmp	.-66     	; 0x23a6 <action_exec+0x2e>

000023e8 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    23e8:	cf 93       	push	r28
    23ea:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    23ec:	88 23       	and	r24, r24
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <register_code+0xa>
    23f0:	90 c0       	rjmp	.+288    	; 0x2512 <register_code+0x12a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    23f2:	8c ef       	ldi	r24, 0xFC	; 252
    23f4:	8c 0f       	add	r24, r28
    23f6:	81 3a       	cpi	r24, 0xA1	; 161
    23f8:	58 f4       	brcc	.+22     	; 0x2410 <register_code+0x28>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    23fa:	8c 2f       	mov	r24, r28
    23fc:	0e 94 39 27 	call	0x4e72	; 0x4e72 <command_proc>
    2400:	81 11       	cpse	r24, r1
    2402:	87 c0       	rjmp	.+270    	; 0x2512 <register_code+0x12a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2404:	8c 2f       	mov	r24, r28
    2406:	0e 94 c9 1b 	call	0x3792	; 0x3792 <add_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    240a:	cf 91       	pop	r28
        send_keyboard_report();
    240c:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <send_keyboard_report>
    else if IS_MOD(code) {
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	8c 0f       	add	r24, r28
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	48 f4       	brcc	.+18     	; 0x242a <register_code+0x42>
        add_mods(MOD_BIT(code));
    2418:	c7 70       	andi	r28, 0x07	; 7
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <register_code+0x38>
    241e:	88 0f       	add	r24, r24
    2420:	ca 95       	dec	r28
    2422:	ea f7       	brpl	.-6      	; 0x241e <register_code+0x36>
    2424:	0e 94 6d 1c 	call	0x38da	; 0x38da <add_mods>
    2428:	f0 cf       	rjmp	.-32     	; 0x240a <register_code+0x22>
    else if IS_SYSTEM(code) {
    242a:	8b e5       	ldi	r24, 0x5B	; 91
    242c:	8c 0f       	add	r24, r28
    242e:	83 30       	cpi	r24, 0x03	; 3
    2430:	68 f4       	brcc	.+26     	; 0x244c <register_code+0x64>
        host_system_send(KEYCODE2SYSTEM(code));
    2432:	81 e8       	ldi	r24, 0x81	; 129
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	c5 3a       	cpi	r28, 0xA5	; 165
    2438:	31 f0       	breq	.+12     	; 0x2446 <register_code+0x5e>
    243a:	83 e8       	ldi	r24, 0x83	; 131
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	c6 3a       	cpi	r28, 0xA6	; 166
    2440:	11 f4       	brne	.+4      	; 0x2446 <register_code+0x5e>
    2442:	82 e8       	ldi	r24, 0x82	; 130
    2444:	90 e0       	ldi	r25, 0x00	; 0
}
    2446:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2448:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <host_system_send>
    else if IS_CONSUMER(code) {
    244c:	88 e5       	ldi	r24, 0x58	; 88
    244e:	8c 0f       	add	r24, r28
    2450:	85 31       	cpi	r24, 0x15	; 21
    2452:	08 f0       	brcs	.+2      	; 0x2456 <register_code+0x6e>
    2454:	5e c0       	rjmp	.+188    	; 0x2512 <register_code+0x12a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2456:	82 ee       	ldi	r24, 0xE2	; 226
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	c8 3a       	cpi	r28, 0xA8	; 168
    245c:	09 f4       	brne	.+2      	; 0x2460 <register_code+0x78>
    245e:	56 c0       	rjmp	.+172    	; 0x250c <register_code+0x124>
    2460:	89 ee       	ldi	r24, 0xE9	; 233
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	c9 3a       	cpi	r28, 0xA9	; 169
    2466:	09 f4       	brne	.+2      	; 0x246a <register_code+0x82>
    2468:	51 c0       	rjmp	.+162    	; 0x250c <register_code+0x124>
    246a:	8a ee       	ldi	r24, 0xEA	; 234
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	ca 3a       	cpi	r28, 0xAA	; 170
    2470:	09 f4       	brne	.+2      	; 0x2474 <register_code+0x8c>
    2472:	4c c0       	rjmp	.+152    	; 0x250c <register_code+0x124>
    2474:	85 eb       	ldi	r24, 0xB5	; 181
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	cb 3a       	cpi	r28, 0xAB	; 171
    247a:	09 f4       	brne	.+2      	; 0x247e <register_code+0x96>
    247c:	47 c0       	rjmp	.+142    	; 0x250c <register_code+0x124>
    247e:	86 eb       	ldi	r24, 0xB6	; 182
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	cc 3a       	cpi	r28, 0xAC	; 172
    2484:	09 f4       	brne	.+2      	; 0x2488 <register_code+0xa0>
    2486:	42 c0       	rjmp	.+132    	; 0x250c <register_code+0x124>
    2488:	83 eb       	ldi	r24, 0xB3	; 179
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	cd 3a       	cpi	r28, 0xAD	; 173
    248e:	f1 f1       	breq	.+124    	; 0x250c <register_code+0x124>
    2490:	84 eb       	ldi	r24, 0xB4	; 180
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	ce 3a       	cpi	r28, 0xAE	; 174
    2496:	d1 f1       	breq	.+116    	; 0x250c <register_code+0x124>
    2498:	87 eb       	ldi	r24, 0xB7	; 183
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	cf 3a       	cpi	r28, 0xAF	; 175
    249e:	b1 f1       	breq	.+108    	; 0x250c <register_code+0x124>
    24a0:	8c ec       	ldi	r24, 0xCC	; 204
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	c1 3b       	cpi	r28, 0xB1	; 177
    24a6:	91 f1       	breq	.+100    	; 0x250c <register_code+0x124>
    24a8:	8d ec       	ldi	r24, 0xCD	; 205
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	c0 3b       	cpi	r28, 0xB0	; 176
    24ae:	71 f1       	breq	.+92     	; 0x250c <register_code+0x124>
    24b0:	83 e8       	ldi	r24, 0x83	; 131
    24b2:	91 e0       	ldi	r25, 0x01	; 1
    24b4:	c2 3b       	cpi	r28, 0xB2	; 178
    24b6:	51 f1       	breq	.+84     	; 0x250c <register_code+0x124>
    24b8:	8a e8       	ldi	r24, 0x8A	; 138
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	c3 3b       	cpi	r28, 0xB3	; 179
    24be:	31 f1       	breq	.+76     	; 0x250c <register_code+0x124>
    24c0:	82 e9       	ldi	r24, 0x92	; 146
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	c4 3b       	cpi	r28, 0xB4	; 180
    24c6:	11 f1       	breq	.+68     	; 0x250c <register_code+0x124>
    24c8:	84 e9       	ldi	r24, 0x94	; 148
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	c5 3b       	cpi	r28, 0xB5	; 181
    24ce:	f1 f0       	breq	.+60     	; 0x250c <register_code+0x124>
    24d0:	81 e2       	ldi	r24, 0x21	; 33
    24d2:	92 e0       	ldi	r25, 0x02	; 2
    24d4:	c6 3b       	cpi	r28, 0xB6	; 182
    24d6:	d1 f0       	breq	.+52     	; 0x250c <register_code+0x124>
    24d8:	83 e2       	ldi	r24, 0x23	; 35
    24da:	92 e0       	ldi	r25, 0x02	; 2
    24dc:	c7 3b       	cpi	r28, 0xB7	; 183
    24de:	b1 f0       	breq	.+44     	; 0x250c <register_code+0x124>
    24e0:	84 e2       	ldi	r24, 0x24	; 36
    24e2:	92 e0       	ldi	r25, 0x02	; 2
    24e4:	c8 3b       	cpi	r28, 0xB8	; 184
    24e6:	91 f0       	breq	.+36     	; 0x250c <register_code+0x124>
    24e8:	85 e2       	ldi	r24, 0x25	; 37
    24ea:	92 e0       	ldi	r25, 0x02	; 2
    24ec:	c9 3b       	cpi	r28, 0xB9	; 185
    24ee:	71 f0       	breq	.+28     	; 0x250c <register_code+0x124>
    24f0:	86 e2       	ldi	r24, 0x26	; 38
    24f2:	92 e0       	ldi	r25, 0x02	; 2
    24f4:	ca 3b       	cpi	r28, 0xBA	; 186
    24f6:	51 f0       	breq	.+20     	; 0x250c <register_code+0x124>
    24f8:	87 e2       	ldi	r24, 0x27	; 39
    24fa:	92 e0       	ldi	r25, 0x02	; 2
    24fc:	cb 3b       	cpi	r28, 0xBB	; 187
    24fe:	31 f0       	breq	.+12     	; 0x250c <register_code+0x124>
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	cc 3b       	cpi	r28, 0xBC	; 188
    2506:	11 f4       	brne	.+4      	; 0x250c <register_code+0x124>
    2508:	8a e2       	ldi	r24, 0x2A	; 42
    250a:	92 e0       	ldi	r25, 0x02	; 2
}
    250c:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    250e:	0c 94 8e 10 	jmp	0x211c	; 0x211c <host_consumer_send>
}
    2512:	cf 91       	pop	r28
    2514:	08 95       	ret

00002516 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2516:	88 23       	and	r24, r24
    2518:	29 f1       	breq	.+74     	; 0x2564 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    251a:	9c ef       	ldi	r25, 0xFC	; 252
    251c:	98 0f       	add	r25, r24
    251e:	91 3a       	cpi	r25, 0xA1	; 161
    2520:	20 f4       	brcc	.+8      	; 0x252a <unregister_code+0x14>
        del_key(code);
    2522:	0e 94 17 1c 	call	0x382e	; 0x382e <del_key>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    2526:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <send_keyboard_report>
    else if IS_MOD(code) {
    252a:	90 e2       	ldi	r25, 0x20	; 32
    252c:	98 0f       	add	r25, r24
    252e:	98 30       	cpi	r25, 0x08	; 8
    2530:	50 f4       	brcc	.+20     	; 0x2546 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    2532:	87 70       	andi	r24, 0x07	; 7
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	01 c0       	rjmp	.+2      	; 0x253a <unregister_code+0x24>
    2538:	99 0f       	add	r25, r25
    253a:	8a 95       	dec	r24
    253c:	ea f7       	brpl	.-6      	; 0x2538 <unregister_code+0x22>
    253e:	89 2f       	mov	r24, r25
    2540:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <del_mods>
    2544:	f0 cf       	rjmp	.-32     	; 0x2526 <unregister_code+0x10>
    }
    else if IS_SYSTEM(code) {
    2546:	9b e5       	ldi	r25, 0x5B	; 91
    2548:	98 0f       	add	r25, r24
    254a:	93 30       	cpi	r25, 0x03	; 3
    254c:	20 f4       	brcc	.+8      	; 0x2556 <unregister_code+0x40>
        host_system_send(0);
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2556:	88 5a       	subi	r24, 0xA8	; 168
    2558:	85 31       	cpi	r24, 0x15	; 21
    255a:	20 f4       	brcc	.+8      	; 0x2564 <unregister_code+0x4e>
        host_consumer_send(0);
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	0c 94 8e 10 	jmp	0x211c	; 0x211c <host_consumer_send>
    }
}
    2564:	08 95       	ret

00002566 <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2566:	88 23       	and	r24, r24
    2568:	21 f0       	breq	.+8      	; 0x2572 <register_mods+0xc>
        add_mods(mods);
    256a:	0e 94 6d 1c 	call	0x38da	; 0x38da <add_mods>
        send_keyboard_report();
    256e:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <send_keyboard_report>
    }
}
    2572:	08 95       	ret

00002574 <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2574:	88 23       	and	r24, r24
    2576:	21 f0       	breq	.+8      	; 0x2580 <unregister_mods+0xc>
        del_mods(mods);
    2578:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <del_mods>
        send_keyboard_report();
    257c:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <send_keyboard_report>
    }
}
    2580:	08 95       	ret

00002582 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2582:	0e 94 8d 1c 	call	0x391a	; 0x391a <clear_weak_mods>
    clear_keys();
    2586:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <clear_keys>
    send_keyboard_report();
    258a:	0e 94 a6 1c 	call	0x394c	; 0x394c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    258e:	0e 94 7e 23 	call	0x46fc	; 0x46fc <mousekey_clear>
    mousekey_send();
    2592:	0e 94 50 22 	call	0x44a0	; 0x44a0 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	0e 94 61 10 	call	0x20c2	; 0x20c2 <host_system_send>
    host_consumer_send(0);
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	0c 94 8e 10 	jmp	0x211c	; 0x211c <host_consumer_send>

000025a6 <clear_keyboard>:
    clear_mods();
    25a6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <clear_mods>
    clear_keyboard_but_mods();
    25aa:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <clear_keyboard_but_mods>

000025ae <process_action>:
{
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <process_action+0x16>
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <process_action+0x18>
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	5c 01       	movw	r10, r24
    if (hook_process_action(record)) return;
    25ce:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <hook_process_action>
    25d2:	81 11       	cpse	r24, r1
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <process_action+0x50>
    keyevent_t event = record->event;
    25d6:	85 e0       	ldi	r24, 0x05	; 5
    25d8:	f5 01       	movw	r30, r10
    25da:	de 01       	movw	r26, r28
    25dc:	11 96       	adiw	r26, 0x01	; 1
    25de:	01 90       	ld	r0, Z+
    25e0:	0d 92       	st	X+, r0
    25e2:	8a 95       	dec	r24
    25e4:	e1 f7       	brne	.-8      	; 0x25de <process_action+0x30>
    25e6:	f5 01       	movw	r30, r10
    25e8:	83 81       	ldd	r24, Z+3	; 0x03
    25ea:	94 81       	ldd	r25, Z+4	; 0x04
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	39 f0       	breq	.+14     	; 0x25fe <process_action+0x50>
    25f0:	40 81       	ld	r20, Z
    25f2:	51 81       	ldd	r21, Z+1	; 0x01
    25f4:	24 2f       	mov	r18, r20
    25f6:	25 23       	and	r18, r21
    25f8:	2f 3f       	cpi	r18, 0xFF	; 255
    25fa:	09 f0       	breq	.+2      	; 0x25fe <process_action+0x50>
    25fc:	fe c2       	rjmp	.+1532   	; 0x2bfa <process_action+0x64c>
}
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	0f 90       	pop	r0
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	ff 90       	pop	r15
    2612:	ef 90       	pop	r14
    2614:	df 90       	pop	r13
    2616:	cf 90       	pop	r12
    2618:	bf 90       	pop	r11
    261a:	af 90       	pop	r10
    261c:	08 95       	ret
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    261e:	f1 2f       	mov	r31, r17
    2620:	ff 70       	andi	r31, 0x0F	; 15
    2622:	ef 2e       	mov	r14, r31
    2624:	10 7f       	andi	r17, 0xF0	; 240
    2626:	19 f0       	breq	.+6      	; 0x262e <process_action+0x80>
    2628:	e2 94       	swap	r14
    262a:	40 ef       	ldi	r20, 0xF0	; 240
    262c:	e4 22       	and	r14, r20
                if (event.pressed) {
    262e:	ff 20       	and	r15, r15
    2630:	c9 f0       	breq	.+50     	; 0x2664 <process_action+0xb6>
                    if (mods) {
    2632:	ee 20       	and	r14, r14
    2634:	29 f0       	breq	.+10     	; 0x2640 <process_action+0x92>
                        add_weak_mods(mods);
    2636:	8e 2d       	mov	r24, r14
    2638:	0e 94 80 1c 	call	0x3900	; 0x3900 <add_weak_mods>
                        send_keyboard_report();
    263c:	0e 94 a6 1c 	call	0x394c	; 0x394c <send_keyboard_report>
                            register_code(action.layer_tap.code);
    2640:	80 2f       	mov	r24, r16
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	df 90       	pop	r13
    265a:	cf 90       	pop	r12
    265c:	bf 90       	pop	r11
    265e:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    2660:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <register_code>
                    unregister_code(action.key.code);
    2664:	80 2f       	mov	r24, r16
    2666:	0e 94 8b 12 	call	0x2516	; 0x2516 <unregister_code>
                    if (mods) {
    266a:	ee 20       	and	r14, r14
    266c:	41 f2       	breq	.-112    	; 0x25fe <process_action+0x50>
                        del_weak_mods(mods);
    266e:	8e 2d       	mov	r24, r14
    2670:	0e 94 86 1c 	call	0x390c	; 0x390c <del_weak_mods>
}
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
                        send_keyboard_report();
    2692:	0c 94 a6 1c 	jmp	0x394c	; 0x394c <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2696:	21 2f       	mov	r18, r17
    2698:	2f 70       	andi	r18, 0x0F	; 15
    269a:	d2 2e       	mov	r13, r18
    269c:	10 7f       	andi	r17, 0xF0	; 240
    269e:	10 32       	cpi	r17, 0x20	; 32
    26a0:	19 f0       	breq	.+6      	; 0x26a8 <process_action+0xfa>
    26a2:	d2 94       	swap	r13
    26a4:	30 ef       	ldi	r19, 0xF0	; 240
    26a6:	d3 22       	and	r13, r19
                switch (action.key.code) {
    26a8:	00 23       	and	r16, r16
    26aa:	79 f0       	breq	.+30     	; 0x26ca <process_action+0x11c>
    26ac:	01 30       	cpi	r16, 0x01	; 1
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <process_action+0x104>
    26b0:	52 c0       	rjmp	.+164    	; 0x2756 <process_action+0x1a8>
                        if (event.pressed) {
    26b2:	ff 20       	and	r15, r15
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <process_action+0x10a>
    26b6:	60 c0       	rjmp	.+192    	; 0x2778 <process_action+0x1ca>
                            if (tap_count > 0) {
    26b8:	ee 20       	and	r14, r14
    26ba:	59 f0       	breq	.+22     	; 0x26d2 <process_action+0x124>
                                if (record->tap.interrupted) {
    26bc:	f5 01       	movw	r30, r10
    26be:	85 81       	ldd	r24, Z+5	; 0x05
    26c0:	80 ff       	sbrs	r24, 0
    26c2:	be cf       	rjmp	.-132    	; 0x2640 <process_action+0x92>
                                    record->tap.count = 0;
    26c4:	8f 70       	andi	r24, 0x0F	; 15
    26c6:	85 83       	std	Z+5, r24	; 0x05
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <process_action+0x124>
                        if (event.pressed) {
    26ca:	ff 20       	and	r15, r15
    26cc:	49 f1       	breq	.+82     	; 0x2720 <process_action+0x172>
                            if (tap_count == 0) {
    26ce:	e1 10       	cpse	r14, r1
    26d0:	12 c0       	rjmp	.+36     	; 0x26f6 <process_action+0x148>
                                    register_mods(mods);
    26d2:	8d 2d       	mov	r24, r13
}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	ff 90       	pop	r15
    26e8:	ef 90       	pop	r14
    26ea:	df 90       	pop	r13
    26ec:	cf 90       	pop	r12
    26ee:	bf 90       	pop	r11
    26f0:	af 90       	pop	r10
                                    register_mods(mods);
    26f2:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <register_mods>
                            else if (tap_count == 1) {
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	e8 12       	cpse	r14, r24
    26fa:	eb cf       	rjmp	.-42     	; 0x26d2 <process_action+0x124>
                                set_oneshot_mods(mods);
    26fc:	8d 2d       	mov	r24, r13
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	df 90       	pop	r13
    2716:	cf 90       	pop	r12
    2718:	bf 90       	pop	r11
    271a:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    271c:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <set_oneshot_mods>
                            if (tap_count == 0) {
    2720:	e1 10       	cpse	r14, r1
    2722:	14 c0       	rjmp	.+40     	; 0x274c <process_action+0x19e>
                                clear_oneshot_mods();
    2724:	0e 94 93 1c 	call	0x3926	; 0x3926 <clear_oneshot_mods>
                                unregister_mods(mods);
    2728:	8d 2d       	mov	r24, r13
}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	df 91       	pop	r29
    2736:	cf 91       	pop	r28
    2738:	1f 91       	pop	r17
    273a:	0f 91       	pop	r16
    273c:	ff 90       	pop	r15
    273e:	ef 90       	pop	r14
    2740:	df 90       	pop	r13
    2742:	cf 90       	pop	r12
    2744:	bf 90       	pop	r11
    2746:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2748:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <unregister_mods>
                            else if (tap_count == 1) {
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	e9 16       	cp	r14, r25
    2750:	09 f4       	brne	.+2      	; 0x2754 <process_action+0x1a6>
    2752:	55 cf       	rjmp	.-342    	; 0x25fe <process_action+0x50>
    2754:	e7 cf       	rjmp	.-50     	; 0x2724 <process_action+0x176>
                        if (event.pressed) {
    2756:	ff 20       	and	r15, r15
    2758:	51 f0       	breq	.+20     	; 0x276e <process_action+0x1c0>
                            if (tap_count <= TAPPING_TOGGLE) {
    275a:	e5 e0       	ldi	r30, 0x05	; 5
    275c:	ee 15       	cp	r30, r14
    275e:	08 f4       	brcc	.+2      	; 0x2762 <process_action+0x1b4>
    2760:	4e cf       	rjmp	.-356    	; 0x25fe <process_action+0x50>
                                if (mods & get_mods()) {
    2762:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <get_mods>
    2766:	8d 21       	and	r24, r13
    2768:	09 f4       	brne	.+2      	; 0x276c <process_action+0x1be>
    276a:	b3 cf       	rjmp	.-154    	; 0x26d2 <process_action+0x124>
    276c:	dd cf       	rjmp	.-70     	; 0x2728 <process_action+0x17a>
                            if (tap_count < TAPPING_TOGGLE) {
    276e:	f4 e0       	ldi	r31, 0x04	; 4
    2770:	fe 15       	cp	r31, r14
    2772:	08 f4       	brcc	.+2      	; 0x2776 <process_action+0x1c8>
    2774:	44 cf       	rjmp	.-376    	; 0x25fe <process_action+0x50>
    2776:	d8 cf       	rjmp	.-80     	; 0x2728 <process_action+0x17a>
                            if (tap_count > 0) {
    2778:	ee 20       	and	r14, r14
    277a:	b1 f2       	breq	.-84     	; 0x2728 <process_action+0x17a>
                            unregister_code(action.layer_tap.code);
    277c:	80 2f       	mov	r24, r16
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	ff 90       	pop	r15
    2792:	ef 90       	pop	r14
    2794:	df 90       	pop	r13
    2796:	cf 90       	pop	r12
    2798:	bf 90       	pop	r11
    279a:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    279c:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <unregister_code>
            switch (action.usage.page) {
    27a0:	81 2f       	mov	r24, r17
    27a2:	86 95       	lsr	r24
    27a4:	86 95       	lsr	r24
    27a6:	83 70       	andi	r24, 0x03	; 3
    27a8:	d1 f0       	breq	.+52     	; 0x27de <process_action+0x230>
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <process_action+0x202>
    27ae:	27 cf       	rjmp	.-434    	; 0x25fe <process_action+0x50>
                        host_consumer_send(action.usage.code);
    27b0:	c8 01       	movw	r24, r16
    27b2:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    27b4:	f1 10       	cpse	r15, r1
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <process_action+0x20e>
                        host_consumer_send(0);
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	80 e0       	ldi	r24, 0x00	; 0
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	df 90       	pop	r13
    27d4:	cf 90       	pop	r12
    27d6:	bf 90       	pop	r11
    27d8:	af 90       	pop	r10
                        host_consumer_send(0);
    27da:	0c 94 8e 10 	jmp	0x211c	; 0x211c <host_consumer_send>
                        host_system_send(action.usage.code);
    27de:	c8 01       	movw	r24, r16
    27e0:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    27e2:	f1 10       	cpse	r15, r1
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <process_action+0x23c>
                        host_system_send(0);
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	80 e0       	ldi	r24, 0x00	; 0
}
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	ff 90       	pop	r15
    27fe:	ef 90       	pop	r14
    2800:	df 90       	pop	r13
    2802:	cf 90       	pop	r12
    2804:	bf 90       	pop	r11
    2806:	af 90       	pop	r10
                        host_system_send(0);
    2808:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <host_system_send>
                mousekey_on(action.key.code);
    280c:	80 2f       	mov	r24, r16
            if (event.pressed) {
    280e:	ff 20       	and	r15, r15
    2810:	99 f0       	breq	.+38     	; 0x2838 <process_action+0x28a>
                mousekey_on(action.key.code);
    2812:	0e 94 69 21 	call	0x42d2	; 0x42d2 <mousekey_on>
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	ff 90       	pop	r15
    282a:	ef 90       	pop	r14
    282c:	df 90       	pop	r13
    282e:	cf 90       	pop	r12
    2830:	bf 90       	pop	r11
    2832:	af 90       	pop	r10
                mousekey_send();
    2834:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <mousekey_send>
                mousekey_off(action.key.code);
    2838:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <mousekey_off>
    283c:	ec cf       	rjmp	.-40     	; 0x2816 <process_action+0x268>
            if (action.layer_bitop.on == 0) {
    283e:	81 2f       	mov	r24, r17
    2840:	83 70       	andi	r24, 0x03	; 3
    2842:	09 f0       	breq	.+2      	; 0x2846 <process_action+0x298>
    2844:	71 c0       	rjmp	.+226    	; 0x2928 <process_action+0x37a>
                if (!event.pressed) {
    2846:	f1 10       	cpse	r15, r1
    2848:	da ce       	rjmp	.-588    	; 0x25fe <process_action+0x50>
                    uint8_t shift = action.layer_bitop.part*4;
    284a:	20 2f       	mov	r18, r16
    284c:	22 95       	swap	r18
    284e:	26 95       	lsr	r18
    2850:	27 70       	andi	r18, 0x07	; 7
    2852:	22 0f       	add	r18, r18
    2854:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2856:	60 2f       	mov	r22, r16
    2858:	6f 70       	andi	r22, 0x0F	; 15
    285a:	c6 2e       	mov	r12, r22
    285c:	d1 2c       	mov	r13, r1
    285e:	f1 2c       	mov	r15, r1
    2860:	e1 2c       	mov	r14, r1
    2862:	02 2e       	mov	r0, r18
    2864:	04 c0       	rjmp	.+8      	; 0x286e <process_action+0x2c0>
    2866:	cc 0c       	add	r12, r12
    2868:	dd 1c       	adc	r13, r13
    286a:	ee 1c       	adc	r14, r14
    286c:	ff 1c       	adc	r15, r15
    286e:	0a 94       	dec	r0
    2870:	d2 f7       	brpl	.-12     	; 0x2866 <process_action+0x2b8>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	cb 01       	movw	r24, r22
    2878:	04 ff       	sbrs	r16, 4
    287a:	0f c0       	rjmp	.+30     	; 0x289a <process_action+0x2ec>
    287c:	6f e0       	ldi	r22, 0x0F	; 15
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	04 c0       	rjmp	.+8      	; 0x288e <process_action+0x2e0>
    2886:	66 0f       	add	r22, r22
    2888:	77 1f       	adc	r23, r23
    288a:	88 1f       	adc	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	2a 95       	dec	r18
    2890:	d2 f7       	brpl	.-12     	; 0x2886 <process_action+0x2d8>
    2892:	60 95       	com	r22
    2894:	70 95       	com	r23
    2896:	80 95       	com	r24
    2898:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    289a:	16 95       	lsr	r17
    289c:	16 95       	lsr	r17
    289e:	13 70       	andi	r17, 0x03	; 3
    28a0:	12 30       	cpi	r17, 0x02	; 2
    28a2:	c1 f0       	breq	.+48     	; 0x28d4 <process_action+0x326>
    28a4:	60 f5       	brcc	.+88     	; 0x28fe <process_action+0x350>
    28a6:	6c 29       	or	r22, r12
    28a8:	7d 29       	or	r23, r13
    28aa:	8e 29       	or	r24, r14
    28ac:	9f 29       	or	r25, r15
    28ae:	11 30       	cpi	r17, 0x01	; 1
    28b0:	51 f1       	breq	.+84     	; 0x2906 <process_action+0x358>
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	bf 90       	pop	r11
    28ce:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    28d0:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <default_layer_and>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    28d4:	6c 29       	or	r22, r12
    28d6:	7d 29       	or	r23, r13
    28d8:	8e 29       	or	r24, r14
    28da:	9f 29       	or	r25, r15
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	df 90       	pop	r13
    28f4:	cf 90       	pop	r12
    28f6:	bf 90       	pop	r11
    28f8:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    28fa:	0c 94 57 1a 	jmp	0x34ae	; 0x34ae <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    28fe:	0e 94 3d 1a 	call	0x347a	; 0x347a <default_layer_and>
    2902:	c7 01       	movw	r24, r14
    2904:	b6 01       	movw	r22, r12
}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	df 90       	pop	r13
    291e:	cf 90       	pop	r12
    2920:	bf 90       	pop	r11
    2922:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2924:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2928:	86 95       	lsr	r24
    292a:	ff 20       	and	r15, r15
    292c:	11 f0       	breq	.+4      	; 0x2932 <process_action+0x384>
    292e:	81 2f       	mov	r24, r17
    2930:	81 70       	andi	r24, 0x01	; 1
    2932:	88 23       	and	r24, r24
    2934:	09 f4       	brne	.+2      	; 0x2938 <process_action+0x38a>
    2936:	63 ce       	rjmp	.-826    	; 0x25fe <process_action+0x50>
                    uint8_t shift = action.layer_bitop.part*4;
    2938:	20 2f       	mov	r18, r16
    293a:	22 95       	swap	r18
    293c:	26 95       	lsr	r18
    293e:	27 70       	andi	r18, 0x07	; 7
    2940:	22 0f       	add	r18, r18
    2942:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2944:	60 2f       	mov	r22, r16
    2946:	6f 70       	andi	r22, 0x0F	; 15
    2948:	c6 2e       	mov	r12, r22
    294a:	d1 2c       	mov	r13, r1
    294c:	f1 2c       	mov	r15, r1
    294e:	e1 2c       	mov	r14, r1
    2950:	02 2e       	mov	r0, r18
    2952:	04 c0       	rjmp	.+8      	; 0x295c <process_action+0x3ae>
    2954:	cc 0c       	add	r12, r12
    2956:	dd 1c       	adc	r13, r13
    2958:	ee 1c       	adc	r14, r14
    295a:	ff 1c       	adc	r15, r15
    295c:	0a 94       	dec	r0
    295e:	d2 f7       	brpl	.-12     	; 0x2954 <process_action+0x3a6>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	cb 01       	movw	r24, r22
    2966:	04 ff       	sbrs	r16, 4
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <process_action+0x3da>
    296a:	6f e0       	ldi	r22, 0x0F	; 15
    296c:	70 e0       	ldi	r23, 0x00	; 0
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	04 c0       	rjmp	.+8      	; 0x297c <process_action+0x3ce>
    2974:	66 0f       	add	r22, r22
    2976:	77 1f       	adc	r23, r23
    2978:	88 1f       	adc	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	2a 95       	dec	r18
    297e:	d2 f7       	brpl	.-12     	; 0x2974 <process_action+0x3c6>
    2980:	60 95       	com	r22
    2982:	70 95       	com	r23
    2984:	80 95       	com	r24
    2986:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2988:	16 95       	lsr	r17
    298a:	16 95       	lsr	r17
    298c:	13 70       	andi	r17, 0x03	; 3
    298e:	12 30       	cpi	r17, 0x02	; 2
    2990:	c1 f0       	breq	.+48     	; 0x29c2 <process_action+0x414>
    2992:	60 f5       	brcc	.+88     	; 0x29ec <process_action+0x43e>
    2994:	6c 29       	or	r22, r12
    2996:	7d 29       	or	r23, r13
    2998:	8e 29       	or	r24, r14
    299a:	9f 29       	or	r25, r15
    299c:	11 30       	cpi	r17, 0x01	; 1
    299e:	51 f1       	breq	.+84     	; 0x29f4 <process_action+0x446>
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	df 90       	pop	r13
    29b8:	cf 90       	pop	r12
    29ba:	bf 90       	pop	r11
    29bc:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    29be:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <layer_and>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29c2:	6c 29       	or	r22, r12
    29c4:	7d 29       	or	r23, r13
    29c6:	8e 29       	or	r24, r14
    29c8:	9f 29       	or	r25, r15
}
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	df 90       	pop	r13
    29e2:	cf 90       	pop	r12
    29e4:	bf 90       	pop	r11
    29e6:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29e8:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    29ec:	0e 94 02 1b 	call	0x3604	; 0x3604 <layer_and>
    29f0:	c7 01       	movw	r24, r14
    29f2:	b6 01       	movw	r22, r12
}
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	ff 90       	pop	r15
    2a08:	ef 90       	pop	r14
    2a0a:	df 90       	pop	r13
    2a0c:	cf 90       	pop	r12
    2a0e:	bf 90       	pop	r11
    2a10:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2a12:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <layer_or>
            switch (action.layer_tap.code) {
    2a16:	00 3f       	cpi	r16, 0xF0	; 240
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <process_action+0x46e>
    2a1a:	44 c0       	rjmp	.+136    	; 0x2aa4 <process_action+0x4f6>
    2a1c:	60 f4       	brcc	.+24     	; 0x2a36 <process_action+0x488>
    2a1e:	80 e4       	ldi	r24, 0x40	; 64
    2a20:	80 0f       	add	r24, r16
    2a22:	80 32       	cpi	r24, 0x20	; 32
    2a24:	28 f1       	brcs	.+74     	; 0x2a70 <process_action+0x4c2>
                    if (event.pressed) {
    2a26:	ff 20       	and	r15, r15
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <process_action+0x47e>
    2a2a:	95 c0       	rjmp	.+298    	; 0x2b56 <process_action+0x5a8>
                        if (tap_count > 0) {
    2a2c:	e1 10       	cpse	r14, r1
    2a2e:	08 ce       	rjmp	.-1008   	; 0x2640 <process_action+0x92>
                            layer_on(action.layer_tap.val);
    2a30:	81 2f       	mov	r24, r17
    2a32:	8f 71       	andi	r24, 0x1F	; 31
    2a34:	59 c0       	rjmp	.+178    	; 0x2ae8 <process_action+0x53a>
    2a36:	02 3f       	cpi	r16, 0xF2	; 242
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <process_action+0x48e>
    2a3a:	67 c0       	rjmp	.+206    	; 0x2b0a <process_action+0x55c>
    2a3c:	08 f4       	brcc	.+2      	; 0x2a40 <process_action+0x492>
    2a3e:	50 c0       	rjmp	.+160    	; 0x2ae0 <process_action+0x532>
    2a40:	03 3f       	cpi	r16, 0xF3	; 243
    2a42:	89 f7       	brne	.-30     	; 0x2a26 <process_action+0x478>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a44:	ff 20       	and	r15, r15
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <process_action+0x49c>
    2a48:	75 c0       	rjmp	.+234    	; 0x2b34 <process_action+0x586>
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	8f 71       	andi	r24, 0x1F	; 31
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
    2a68:	bf 90       	pop	r11
    2a6a:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a6c:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <layer_move>
                    if (event.pressed) {
    2a70:	81 2f       	mov	r24, r17
    2a72:	8f 71       	andi	r24, 0x1F	; 31
    2a74:	10 2f       	mov	r17, r16
    2a76:	10 71       	andi	r17, 0x10	; 16
    2a78:	ff 20       	and	r15, r15
    2a7a:	51 f0       	breq	.+20     	; 0x2a90 <process_action+0x4e2>
                        layer_on(action.layer_tap.val);
    2a7c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2a80:	80 2f       	mov	r24, r16
    2a82:	82 95       	swap	r24
    2a84:	80 7f       	andi	r24, 0xF0	; 240
    2a86:	11 11       	cpse	r17, r1
    2a88:	25 ce       	rjmp	.-950    	; 0x26d4 <process_action+0x126>
    2a8a:	80 2f       	mov	r24, r16
    2a8c:	8f 70       	andi	r24, 0x0F	; 15
    2a8e:	22 ce       	rjmp	.-956    	; 0x26d4 <process_action+0x126>
                        layer_off(action.layer_tap.val);
    2a90:	0e 94 ac 1a 	call	0x3558	; 0x3558 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2a94:	80 2f       	mov	r24, r16
    2a96:	82 95       	swap	r24
    2a98:	80 7f       	andi	r24, 0xF0	; 240
    2a9a:	11 11       	cpse	r17, r1
    2a9c:	46 ce       	rjmp	.-884    	; 0x272a <process_action+0x17c>
    2a9e:	80 2f       	mov	r24, r16
    2aa0:	8f 70       	andi	r24, 0x0F	; 15
    2aa2:	43 ce       	rjmp	.-890    	; 0x272a <process_action+0x17c>
                    if (event.pressed) {
    2aa4:	ff 20       	and	r15, r15
    2aa6:	b9 f0       	breq	.+46     	; 0x2ad6 <process_action+0x528>
                        if (tap_count < TAPPING_TOGGLE) {
    2aa8:	f4 e0       	ldi	r31, 0x04	; 4
    2aaa:	fe 15       	cp	r31, r14
    2aac:	08 f4       	brcc	.+2      	; 0x2ab0 <process_action+0x502>
    2aae:	a7 cd       	rjmp	.-1202   	; 0x25fe <process_action+0x50>
                            layer_invert(action.layer_tap.val);
    2ab0:	81 2f       	mov	r24, r17
    2ab2:	8f 71       	andi	r24, 0x1F	; 31
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	1f 91       	pop	r17
    2ac4:	0f 91       	pop	r16
    2ac6:	ff 90       	pop	r15
    2ac8:	ef 90       	pop	r14
    2aca:	df 90       	pop	r13
    2acc:	cf 90       	pop	r12
    2ace:	bf 90       	pop	r11
    2ad0:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    2ad2:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2ad6:	25 e0       	ldi	r18, 0x05	; 5
    2ad8:	2e 15       	cp	r18, r14
    2ada:	08 f4       	brcc	.+2      	; 0x2ade <process_action+0x530>
    2adc:	90 cd       	rjmp	.-1248   	; 0x25fe <process_action+0x50>
    2ade:	e8 cf       	rjmp	.-48     	; 0x2ab0 <process_action+0x502>
                    event.pressed ? layer_on(action.layer_tap.val) :
    2ae0:	81 2f       	mov	r24, r17
    2ae2:	8f 71       	andi	r24, 0x1F	; 31
    2ae4:	ff 20       	and	r15, r15
    2ae6:	a9 f0       	breq	.+42     	; 0x2b12 <process_action+0x564>
}
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	df 90       	pop	r13
    2b00:	cf 90       	pop	r12
    2b02:	bf 90       	pop	r11
    2b04:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    2b06:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    2b0a:	81 2f       	mov	r24, r17
    2b0c:	8f 71       	andi	r24, 0x1F	; 31
    2b0e:	ff 20       	and	r15, r15
    2b10:	59 f3       	breq	.-42     	; 0x2ae8 <process_action+0x53a>
}
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	1f 91       	pop	r17
    2b22:	0f 91       	pop	r16
    2b24:	ff 90       	pop	r15
    2b26:	ef 90       	pop	r14
    2b28:	df 90       	pop	r13
    2b2a:	cf 90       	pop	r12
    2b2c:	bf 90       	pop	r11
    2b2e:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    2b30:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <layer_off>
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
    2b4e:	bf 90       	pop	r11
    2b50:	af 90       	pop	r10
                                    layer_clear();
    2b52:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <layer_clear>
                        if (tap_count > 0) {
    2b56:	e1 10       	cpse	r14, r1
    2b58:	11 ce       	rjmp	.-990    	; 0x277c <process_action+0x1ce>
                            layer_off(action.layer_tap.val);
    2b5a:	81 2f       	mov	r24, r17
    2b5c:	8f 71       	andi	r24, 0x1F	; 31
    2b5e:	d9 cf       	rjmp	.-78     	; 0x2b12 <process_action+0x564>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b60:	41 2f       	mov	r20, r17
    2b62:	4f 70       	andi	r20, 0x0F	; 15
    2b64:	60 2f       	mov	r22, r16
    2b66:	c5 01       	movw	r24, r10
    2b68:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <action_get_macro>
}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	cf 90       	pop	r12
    2b86:	bf 90       	pop	r11
    2b88:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b8a:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <action_macro_play>
            switch (action.command.id) {
    2b8e:	01 11       	cpse	r16, r1
    2b90:	36 cd       	rjmp	.-1428   	; 0x25fe <process_action+0x50>
                    if (event.pressed) {
    2b92:	ff 20       	and	r15, r15
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <process_action+0x5ea>
    2b96:	33 cd       	rjmp	.-1434   	; 0x25fe <process_action+0x50>
                        clear_keyboard();
    2b98:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <clear_keyboard>
	__builtin_avr_delay_cycles(__ticks_dc);
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	90 e7       	ldi	r25, 0x70	; 112
    2ba0:	e2 e0       	ldi	r30, 0x02	; 2
    2ba2:	81 50       	subi	r24, 0x01	; 1
    2ba4:	90 40       	sbci	r25, 0x00	; 0
    2ba6:	e0 40       	sbci	r30, 0x00	; 0
    2ba8:	e1 f7       	brne	.-8      	; 0x2ba2 <process_action+0x5f4>
    2baa:	00 c0       	rjmp	.+0      	; 0x2bac <process_action+0x5fe>
    2bac:	00 00       	nop
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	ff 90       	pop	r15
    2bc2:	ef 90       	pop	r14
    2bc4:	df 90       	pop	r13
    2bc6:	cf 90       	pop	r12
    2bc8:	bf 90       	pop	r11
    2bca:	af 90       	pop	r10
                        bootloader_jump();
    2bcc:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <bootloader_jump>
            action_function(record, action.func.id, action.func.opt);
    2bd0:	41 2f       	mov	r20, r17
    2bd2:	4f 70       	andi	r20, 0x0F	; 15
    2bd4:	60 2f       	mov	r22, r16
    2bd6:	c5 01       	movw	r24, r10
}
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	bf 90       	pop	r11
    2bf4:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2bf6:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <action_function>
    keyevent_t event = record->event;
    2bfa:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2bfc:	e5 80       	ldd	r14, Z+5	; 0x05
    2bfe:	e2 94       	swap	r14
    2c00:	2f e0       	ldi	r18, 0x0F	; 15
    2c02:	e2 22       	and	r14, r18
    action_t action = layer_switch_get_action(event);
    2c04:	49 83       	std	Y+1, r20	; 0x01
    2c06:	5a 83       	std	Y+2, r21	; 0x02
    2c08:	fb 82       	std	Y+3, r15	; 0x03
    2c0a:	78 2f       	mov	r23, r24
    2c0c:	9d 83       	std	Y+5, r25	; 0x05
    2c0e:	8c 83       	std	Y+4, r24	; 0x04
    2c10:	6f 2d       	mov	r22, r15
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	0e 94 27 1b 	call	0x364e	; 0x364e <layer_switch_get_action>
    2c18:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    2c1a:	0e 94 26 1b 	call	0x364c	; 0x364c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2c1e:	0e 94 18 1a 	call	0x3430	; 0x3430 <default_layer_debug>
    switch (action.kind.id) {
    2c22:	e1 2f       	mov	r30, r17
    2c24:	e2 95       	swap	r30
    2c26:	ef 70       	andi	r30, 0x0F	; 15
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	ed 5d       	subi	r30, 0xDD	; 221
    2c2c:	f5 4d       	sbci	r31, 0xD5	; 213
    2c2e:	0c 94 cc 29 	jmp	0x5398	; 0x5398 <__tablejump2__>

00002c32 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <is_tap_key+0x6>
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <is_tap_key+0x8>
    2c3a:	0f 92       	push	r0
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	6b 83       	std	Y+3, r22	; 0x03
    2c42:	7c 83       	std	Y+4, r23	; 0x04
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4a:	89 2b       	or	r24, r25
    2c4c:	21 f0       	breq	.+8      	; 0x2c56 <is_tap_key+0x24>
    2c4e:	84 2f       	mov	r24, r20
    2c50:	85 23       	and	r24, r21
    2c52:	8f 3f       	cpi	r24, 0xFF	; 255
    2c54:	89 f4       	brne	.+34     	; 0x2c78 <is_tap_key+0x46>
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	2e c0       	rjmp	.+92     	; 0x2cb6 <is_tap_key+0x84>
    2c5a:	90 e2       	ldi	r25, 0x20	; 32
    2c5c:	98 0f       	add	r25, r24
    2c5e:	98 30       	cpi	r25, 0x08	; 8
    2c60:	08 f1       	brcs	.+66     	; 0x2ca4 <is_tap_key+0x72>
            switch (action.layer_tap.code) {
    2c62:	88 3e       	cpi	r24, 0xE8	; 232
    2c64:	30 f4       	brcc	.+12     	; 0x2c72 <is_tap_key+0x40>
    2c66:	80 3e       	cpi	r24, 0xE0	; 224
    2c68:	e8 f4       	brcc	.+58     	; 0x2ca4 <is_tap_key+0x72>
    2c6a:	84 50       	subi	r24, 0x04	; 4
    2c6c:	81 3a       	cpi	r24, 0xA1	; 161
    2c6e:	98 f7       	brcc	.-26     	; 0x2c56 <is_tap_key+0x24>
    2c70:	19 c0       	rjmp	.+50     	; 0x2ca4 <is_tap_key+0x72>
    2c72:	80 3f       	cpi	r24, 0xF0	; 240
    2c74:	81 f7       	brne	.-32     	; 0x2c56 <is_tap_key+0x24>
    2c76:	16 c0       	rjmp	.+44     	; 0x2ca4 <is_tap_key+0x72>
    action_t action = layer_switch_get_action(event);
    2c78:	6b 81       	ldd	r22, Y+3	; 0x03
    2c7a:	7c 81       	ldd	r23, Y+4	; 0x04
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	0e 94 27 1b 	call	0x364e	; 0x364e <layer_switch_get_action>
    switch (action.kind.id) {
    2c82:	29 2f       	mov	r18, r25
    2c84:	22 95       	swap	r18
    2c86:	2f 70       	andi	r18, 0x0F	; 15
    2c88:	2c 30       	cpi	r18, 0x0C	; 12
    2c8a:	70 f4       	brcc	.+28     	; 0x2ca8 <is_tap_key+0x76>
    2c8c:	2a 30       	cpi	r18, 0x0A	; 10
    2c8e:	48 f7       	brcc	.-46     	; 0x2c62 <is_tap_key+0x30>
    2c90:	22 5f       	subi	r18, 0xF2	; 242
    2c92:	2f 70       	andi	r18, 0x0F	; 15
    2c94:	22 30       	cpi	r18, 0x02	; 2
    2c96:	f8 f6       	brcc	.-66     	; 0x2c56 <is_tap_key+0x24>
            switch (action.key.code) {
    2c98:	85 3a       	cpi	r24, 0xA5	; 165
    2c9a:	f8 f6       	brcc	.-66     	; 0x2c5a <is_tap_key+0x28>
    2c9c:	84 30       	cpi	r24, 0x04	; 4
    2c9e:	10 f4       	brcc	.+4      	; 0x2ca4 <is_tap_key+0x72>
    2ca0:	82 30       	cpi	r24, 0x02	; 2
    2ca2:	f8 f6       	brcc	.-66     	; 0x2c62 <is_tap_key+0x30>
                case KC_A ... KC_EXSEL:     // tap key
                case KC_LCTRL ... KC_RGUI:  // tap key
                case OP_TAP_TOGGLE:
                    return true;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	07 c0       	rjmp	.+14     	; 0x2cb6 <is_tap_key+0x84>
    switch (action.kind.id) {
    2ca8:	2c 30       	cpi	r18, 0x0C	; 12
    2caa:	11 f0       	breq	.+4      	; 0x2cb0 <is_tap_key+0x7e>
    2cac:	2f 30       	cpi	r18, 0x0F	; 15
    2cae:	99 f6       	brne	.-90     	; 0x2c56 <is_tap_key+0x24>
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2cb0:	93 fb       	bst	r25, 3
    2cb2:	88 27       	eor	r24, r24
    2cb4:	80 f9       	bld	r24, 0
            return false;
    }
    return false;
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	08 95       	ret

00002cc6 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <debug_event+0x6>
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <debug_event+0x8>
    2cce:	0f 92       	push	r0
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	df 91       	pop	r29
    2ce0:	cf 91       	pop	r28
    2ce2:	08 95       	ret

00002ce4 <debug_record>:

void debug_record(keyrecord_t record)
{
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <debug_record+0x6>
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <debug_record+0x8>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <debug_record+0xa>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2cf2:	26 96       	adiw	r28, 0x06	; 6
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d0a:	c0 91 97 02 	lds	r28, 0x0297	; 0x800297 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d0e:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d10:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <waiting_buffer_head>
    2d14:	8c 13       	cpse	r24, r28
    2d16:	04 c0       	rjmp	.+8      	; 0x2d20 <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d20:	d0 e0       	ldi	r29, 0x00	; 0
    2d22:	1c 9f       	mul	r17, r28
    2d24:	f0 01       	movw	r30, r0
    2d26:	1d 9f       	mul	r17, r29
    2d28:	f0 0d       	add	r31, r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	e7 56       	subi	r30, 0x67	; 103
    2d2e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d30:	40 81       	ld	r20, Z
    2d32:	51 81       	ldd	r21, Z+1	; 0x01
    2d34:	62 81       	ldd	r22, Z+2	; 0x02
    2d36:	73 81       	ldd	r23, Z+3	; 0x03
    2d38:	84 81       	ldd	r24, Z+4	; 0x04
    2d3a:	95 81       	ldd	r25, Z+5	; 0x05
    2d3c:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d40:	21 96       	adiw	r28, 0x01	; 1
    2d42:	c7 70       	andi	r28, 0x07	; 7
    2d44:	e5 cf       	rjmp	.-54     	; 0x2d10 <debug_waiting_buffer+0xc>

00002d46 <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2d46:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <tapping_key>
    2d4a:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <tapping_key+0x1>
    2d4e:	60 91 cb 02 	lds	r22, 0x02CB	; 0x8002cb <tapping_key+0x2>
    2d52:	70 91 cc 02 	lds	r23, 0x02CC	; 0x8002cc <tapping_key+0x3>
    2d56:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <tapping_key+0x4>
    2d5a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2d5e:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <debug_record>

00002d62 <waiting_buffer_scan_tap>:
{
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2d68:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2d6c:	80 7f       	andi	r24, 0xF0	; 240
    2d6e:	c1 f4       	brne	.+48     	; 0x2da0 <waiting_buffer_scan_tap+0x3e>
    if (!tapping_key.event.pressed) return;
    2d70:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tapping_key+0x2>
    2d74:	88 23       	and	r24, r24
    2d76:	a1 f0       	breq	.+40     	; 0x2da0 <waiting_buffer_scan_tap+0x3e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d78:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    2d7c:	c0 91 98 02 	lds	r28, 0x0298	; 0x800298 <waiting_buffer_head>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2d80:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <tapping_key>
    2d84:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <tapping_key+0x1>
    2d88:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <tapping_key+0x3>
    2d8c:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <tapping_key+0x4>
    2d90:	d6 2f       	mov	r29, r22
    2d92:	d7 23       	and	r29, r23
    2d94:	da 01       	movw	r26, r20
    2d96:	a0 95       	com	r26
    2d98:	b0 95       	com	r27
    2d9a:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d9c:	c8 13       	cpse	r28, r24
    2d9e:	04 c0       	rjmp	.+8      	; 0x2da8 <waiting_buffer_scan_tap+0x46>
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	08 95       	ret
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	41 15       	cp	r20, r1
    2dac:	51 05       	cpc	r21, r1
    2dae:	11 f0       	breq	.+4      	; 0x2db4 <waiting_buffer_scan_tap+0x52>
    2db0:	df 3f       	cpi	r29, 0xFF	; 255
    2db2:	31 f4       	brne	.+12     	; 0x2dc0 <waiting_buffer_scan_tap+0x5e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2db4:	01 96       	adiw	r24, 0x01	; 1
    2db6:	87 70       	andi	r24, 0x07	; 7
    2db8:	f1 cf       	rjmp	.-30     	; 0x2d9c <waiting_buffer_scan_tap+0x3a>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2dba:	2a 0f       	add	r18, r26
    2dbc:	3b 1f       	adc	r19, r27
    2dbe:	17 c0       	rjmp	.+46     	; 0x2dee <waiting_buffer_scan_tap+0x8c>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2dc0:	18 9f       	mul	r17, r24
    2dc2:	f0 01       	movw	r30, r0
    2dc4:	19 9f       	mul	r17, r25
    2dc6:	f0 0d       	add	r31, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	e7 56       	subi	r30, 0x67	; 103
    2dcc:	fd 4f       	sbci	r31, 0xFD	; 253
    2dce:	21 81       	ldd	r18, Z+1	; 0x01
    2dd0:	27 13       	cpse	r18, r23
    2dd2:	f0 cf       	rjmp	.-32     	; 0x2db4 <waiting_buffer_scan_tap+0x52>
    2dd4:	20 81       	ld	r18, Z
    2dd6:	26 13       	cpse	r18, r22
    2dd8:	ed cf       	rjmp	.-38     	; 0x2db4 <waiting_buffer_scan_tap+0x52>
    2dda:	22 81       	ldd	r18, Z+2	; 0x02
    2ddc:	21 11       	cpse	r18, r1
    2dde:	ea cf       	rjmp	.-44     	; 0x2db4 <waiting_buffer_scan_tap+0x52>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2de0:	23 81       	ldd	r18, Z+3	; 0x03
    2de2:	34 81       	ldd	r19, Z+4	; 0x04
    2de4:	24 17       	cp	r18, r20
    2de6:	35 07       	cpc	r19, r21
    2de8:	40 f3       	brcs	.-48     	; 0x2dba <waiting_buffer_scan_tap+0x58>
    2dea:	24 1b       	sub	r18, r20
    2dec:	35 0b       	sbc	r19, r21
    2dee:	28 3c       	cpi	r18, 0xC8	; 200
    2df0:	31 05       	cpc	r19, r1
    2df2:	00 f7       	brcc	.-64     	; 0x2db4 <waiting_buffer_scan_tap+0x52>
            tapping_key.tap.count = 1;
    2df4:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2df8:	2f 70       	andi	r18, 0x0F	; 15
    2dfa:	20 61       	ori	r18, 0x10	; 16
    2dfc:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2e00:	26 e0       	ldi	r18, 0x06	; 6
    2e02:	28 9f       	mul	r18, r24
    2e04:	f0 01       	movw	r30, r0
    2e06:	29 9f       	mul	r18, r25
    2e08:	f0 0d       	add	r31, r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	e2 56       	subi	r30, 0x62	; 98
    2e0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e10:	80 81       	ld	r24, Z
    2e12:	8f 70       	andi	r24, 0x0F	; 15
    2e14:	80 61       	ori	r24, 0x10	; 16
    2e16:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2e18:	89 ec       	ldi	r24, 0xC9	; 201
    2e1a:	92 e0       	ldi	r25, 0x02	; 2
    2e1c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
}
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	1f 91       	pop	r17
            debug_waiting_buffer();
    2e26:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <debug_waiting_buffer>

00002e2a <process_tapping>:
{
    2e2a:	bf 92       	push	r11
    2e2c:	cf 92       	push	r12
    2e2e:	df 92       	push	r13
    2e30:	ef 92       	push	r14
    2e32:	ff 92       	push	r15
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
    2e40:	61 97       	sbiw	r28, 0x11	; 17
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	6c 01       	movw	r12, r24
    keyevent_t event = keyp->event;
    2e4e:	85 e0       	ldi	r24, 0x05	; 5
    2e50:	f6 01       	movw	r30, r12
    2e52:	de 01       	movw	r26, r28
    2e54:	1d 96       	adiw	r26, 0x0d	; 13
    2e56:	01 90       	ld	r0, Z+
    2e58:	0d 92       	st	X+, r0
    2e5a:	8a 95       	dec	r24
    2e5c:	e1 f7       	brne	.-8      	; 0x2e56 <process_tapping+0x2c>
    2e5e:	d6 01       	movw	r26, r12
    2e60:	4c 91       	ld	r20, X
    2e62:	11 96       	adiw	r26, 0x01	; 1
    2e64:	5c 91       	ld	r21, X
    2e66:	11 97       	sbiw	r26, 0x01	; 1
    2e68:	12 96       	adiw	r26, 0x02	; 2
    2e6a:	fc 90       	ld	r15, X
    2e6c:	12 97       	sbiw	r26, 0x02	; 2
    2e6e:	13 96       	adiw	r26, 0x03	; 3
    2e70:	0d 91       	ld	r16, X+
    2e72:	1c 91       	ld	r17, X
    if (IS_TAPPING_PRESSED()) {
    2e74:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <tapping_key+0x3>
    2e78:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <tapping_key+0x4>
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <process_tapping+0x58>
    2e80:	89 c1       	rjmp	.+786    	; 0x3194 <process_tapping+0x36a>
    2e82:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    2e86:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    2e8a:	62 2f       	mov	r22, r18
    2e8c:	63 23       	and	r22, r19
    2e8e:	6f 3f       	cpi	r22, 0xFF	; 255
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <process_tapping+0x6a>
    2e92:	80 c1       	rjmp	.+768    	; 0x3194 <process_tapping+0x36a>
    2e94:	b0 90 cb 02 	lds	r11, 0x02CB	; 0x8002cb <tapping_key+0x2>
    2e98:	bb 20       	and	r11, r11
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <process_tapping+0x74>
    2e9c:	1a c1       	rjmp	.+564    	; 0x30d2 <process_tapping+0x2a8>
        if (WITHIN_TAPPING_TERM(event)) {
    2e9e:	08 17       	cp	r16, r24
    2ea0:	19 07       	cpc	r17, r25
    2ea2:	d0 f1       	brcs	.+116    	; 0x2f18 <process_tapping+0xee>
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	e8 1b       	sub	r30, r24
    2ea8:	f9 0b       	sbc	r31, r25
    2eaa:	cf 01       	movw	r24, r30
    2eac:	ee 24       	eor	r14, r14
    2eae:	e3 94       	inc	r14
    2eb0:	88 3c       	cpi	r24, 0xC8	; 200
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	08 f0       	brcs	.+2      	; 0x2eb8 <process_tapping+0x8e>
    2eb6:	e1 2c       	mov	r14, r1
    2eb8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2ebc:	98 2f       	mov	r25, r24
    2ebe:	90 7f       	andi	r25, 0xF0	; 240
    2ec0:	ee 20       	and	r14, r14
    2ec2:	09 f4       	brne	.+2      	; 0x2ec6 <process_tapping+0x9c>
    2ec4:	bc c0       	rjmp	.+376    	; 0x303e <process_tapping+0x214>
            if (tapping_key.tap.count == 0) {
    2ec6:	91 11       	cpse	r25, r1
    2ec8:	81 c0       	rjmp	.+258    	; 0x2fcc <process_tapping+0x1a2>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2eca:	ef 2c       	mov	r14, r15
    2ecc:	35 13       	cpse	r19, r21
    2ece:	29 c0       	rjmp	.+82     	; 0x2f22 <process_tapping+0xf8>
    2ed0:	24 13       	cpse	r18, r20
    2ed2:	27 c0       	rjmp	.+78     	; 0x2f22 <process_tapping+0xf8>
    2ed4:	f1 10       	cpse	r15, r1
    2ed6:	25 c0       	rjmp	.+74     	; 0x2f22 <process_tapping+0xf8>
                    tapping_key.tap.count = 1;
    2ed8:	8f 70       	andi	r24, 0x0F	; 15
    2eda:	80 61       	ori	r24, 0x10	; 16
    2edc:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    debug_tapping_key();
    2ee0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <debug_tapping_key>
                    process_action(&tapping_key);
    2ee4:	89 ec       	ldi	r24, 0xC9	; 201
    2ee6:	92 e0       	ldi	r25, 0x02	; 2
    2ee8:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
                    keyp->tap = tapping_key.tap;
    2eec:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2ef0:	d6 01       	movw	r26, r12
    2ef2:	15 96       	adiw	r26, 0x05	; 5
    2ef4:	8c 93       	st	X, r24
}
    2ef6:	8e 2d       	mov	r24, r14
    2ef8:	61 96       	adiw	r28, 0x11	; 17
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ff 90       	pop	r15
    2f0e:	ef 90       	pop	r14
    2f10:	df 90       	pop	r13
    2f12:	cf 90       	pop	r12
    2f14:	bf 90       	pop	r11
    2f16:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    2f18:	80 95       	com	r24
    2f1a:	90 95       	com	r25
    2f1c:	80 0f       	add	r24, r16
    2f1e:	91 1f       	adc	r25, r17
    2f20:	c5 cf       	rjmp	.-118    	; 0x2eac <process_tapping+0x82>
    2f22:	01 15       	cp	r16, r1
    2f24:	11 05       	cpc	r17, r1
    2f26:	29 f0       	breq	.+10     	; 0x2f32 <process_tapping+0x108>
    2f28:	85 2f       	mov	r24, r21
    2f2a:	84 23       	and	r24, r20
    2f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <process_tapping+0x108>
    2f30:	43 c1       	rjmp	.+646    	; 0x31b8 <process_tapping+0x38e>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2f32:	80 e0       	ldi	r24, 0x00	; 0
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2f34:	b8 2f       	mov	r27, r24
    2f36:	b1 70       	andi	r27, 0x01	; 1
    2f38:	bb 2e       	mov	r11, r27
    2f3a:	80 ff       	sbrs	r24, 0
    2f3c:	3d c0       	rjmp	.+122    	; 0x2fb8 <process_tapping+0x18e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f3e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    2f42:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f46:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f48:	82 13       	cpse	r24, r18
    2f4a:	16 c0       	rjmp	.+44     	; 0x2f78 <process_tapping+0x14e>
                    action_t action = layer_switch_get_action(event);
    2f4c:	70 2f       	mov	r23, r16
    2f4e:	19 8b       	std	Y+17, r17	; 0x11
    2f50:	08 8b       	std	Y+16, r16	; 0x10
    2f52:	6f 2d       	mov	r22, r15
    2f54:	89 89       	ldd	r24, Y+17	; 0x11
    2f56:	0e 94 27 1b 	call	0x364e	; 0x364e <layer_switch_get_action>
                    switch (action.kind.id) {
    2f5a:	29 2f       	mov	r18, r25
    2f5c:	22 95       	swap	r18
    2f5e:	2f 70       	andi	r18, 0x0F	; 15
    2f60:	22 30       	cpi	r18, 0x02	; 2
    2f62:	f0 f0       	brcs	.+60     	; 0x2fa0 <process_tapping+0x176>
    2f64:	24 30       	cpi	r18, 0x04	; 4
    2f66:	18 f5       	brcc	.+70     	; 0x2fae <process_tapping+0x184>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2f68:	9f 70       	andi	r25, 0x0F	; 15
    2f6a:	f1 f0       	breq	.+60     	; 0x2fa8 <process_tapping+0x17e>
    2f6c:	f6 01       	movw	r30, r12
    2f6e:	95 81       	ldd	r25, Z+5	; 0x05
    2f70:	90 7f       	andi	r25, 0xF0	; 240
    2f72:	d1 f4       	brne	.+52     	; 0x2fa8 <process_tapping+0x17e>
                            if (action.key.mods && !action.key.code) return false;
    2f74:	b1 2c       	mov	r11, r1
    2f76:	1e c0       	rjmp	.+60     	; 0x2fb4 <process_tapping+0x18a>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	38 9f       	mul	r19, r24
    2f7c:	f0 01       	movw	r30, r0
    2f7e:	39 9f       	mul	r19, r25
    2f80:	f0 0d       	add	r31, r0
    2f82:	11 24       	eor	r1, r1
    2f84:	e7 56       	subi	r30, 0x67	; 103
    2f86:	fd 4f       	sbci	r31, 0xFD	; 253
    2f88:	61 81       	ldd	r22, Z+1	; 0x01
    2f8a:	65 13       	cpse	r22, r21
    2f8c:	06 c0       	rjmp	.+12     	; 0x2f9a <process_tapping+0x170>
    2f8e:	60 81       	ld	r22, Z
    2f90:	64 13       	cpse	r22, r20
    2f92:	03 c0       	rjmp	.+6      	; 0x2f9a <process_tapping+0x170>
    2f94:	62 81       	ldd	r22, Z+2	; 0x02
    2f96:	f6 12       	cpse	r15, r22
    2f98:	0f c0       	rjmp	.+30     	; 0x2fb8 <process_tapping+0x18e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f9a:	01 96       	adiw	r24, 0x01	; 1
    2f9c:	87 70       	andi	r24, 0x07	; 7
    2f9e:	d4 cf       	rjmp	.-88     	; 0x2f48 <process_tapping+0x11e>
                            if (action.key.mods && !action.key.code) return false;
    2fa0:	9f 70       	andi	r25, 0x0F	; 15
    2fa2:	11 f0       	breq	.+4      	; 0x2fa8 <process_tapping+0x17e>
    2fa4:	88 23       	and	r24, r24
    2fa6:	31 f3       	breq	.-52     	; 0x2f74 <process_tapping+0x14a>
                            if (IS_MOD(action.key.code)) return false;
    2fa8:	80 5e       	subi	r24, 0xE0	; 224
    2faa:	88 30       	cpi	r24, 0x08	; 8
    2fac:	18 f3       	brcs	.-58     	; 0x2f74 <process_tapping+0x14a>
                    process_action(keyp);
    2fae:	c6 01       	movw	r24, r12
    2fb0:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
                    return true;
    2fb4:	eb 2c       	mov	r14, r11
    2fb6:	9f cf       	rjmp	.-194    	; 0x2ef6 <process_tapping+0xcc>
                    if (event.pressed) {
    2fb8:	ff 20       	and	r15, r15
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <process_tapping+0x194>
    2fbc:	9c cf       	rjmp	.-200    	; 0x2ef6 <process_tapping+0xcc>
                        tapping_key.tap.interrupted = true;
    2fbe:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2fc2:	81 60       	ori	r24, 0x01	; 1
    2fc4:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    return false;
    2fc8:	e1 2c       	mov	r14, r1
    2fca:	95 cf       	rjmp	.-214    	; 0x2ef6 <process_tapping+0xcc>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fcc:	35 13       	cpse	r19, r21
    2fce:	06 c0       	rjmp	.+12     	; 0x2fdc <process_tapping+0x1b2>
    2fd0:	24 13       	cpse	r18, r20
    2fd2:	04 c0       	rjmp	.+8      	; 0x2fdc <process_tapping+0x1b2>
                    keyp->tap = tapping_key.tap;
    2fd4:	d6 01       	movw	r26, r12
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fd6:	ff 20       	and	r15, r15
    2fd8:	09 f4       	brne	.+2      	; 0x2fdc <process_tapping+0x1b2>
    2fda:	a1 c0       	rjmp	.+322    	; 0x311e <process_tapping+0x2f4>
                else if (is_tap_key(event) && event.pressed) {
    2fdc:	4d 87       	std	Y+13, r20	; 0x0d
    2fde:	5e 87       	std	Y+14, r21	; 0x0e
    2fe0:	ff 86       	std	Y+15, r15	; 0x0f
    2fe2:	70 2f       	mov	r23, r16
    2fe4:	19 8b       	std	Y+17, r17	; 0x11
    2fe6:	08 8b       	std	Y+16, r16	; 0x10
    2fe8:	6f 2d       	mov	r22, r15
    2fea:	89 89       	ldd	r24, Y+17	; 0x11
    2fec:	0e 94 19 16 	call	0x2c32	; 0x2c32 <is_tap_key>
    2ff0:	88 23       	and	r24, r24
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <process_tapping+0x1cc>
    2ff4:	dd c0       	rjmp	.+442    	; 0x31b0 <process_tapping+0x386>
    2ff6:	ff 20       	and	r15, r15
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <process_tapping+0x1d2>
    2ffa:	da c0       	rjmp	.+436    	; 0x31b0 <process_tapping+0x386>
                    if (tapping_key.tap.count > 1) {
    2ffc:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3000:	80 32       	cpi	r24, 0x20	; 32
    3002:	70 f0       	brcs	.+28     	; 0x3020 <process_tapping+0x1f6>
                        process_action(&(keyrecord_t){
    3004:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    3008:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    300c:	38 87       	std	Y+8, r19	; 0x08
    300e:	2f 83       	std	Y+7, r18	; 0x07
    3010:	19 86       	std	Y+9, r1	; 0x09
    3012:	1b 87       	std	Y+11, r17	; 0x0b
    3014:	0a 87       	std	Y+10, r16	; 0x0a
    3016:	8c 87       	std	Y+12, r24	; 0x0c
    3018:	ce 01       	movw	r24, r28
    301a:	07 96       	adiw	r24, 0x07	; 7
    301c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
                    tapping_key = *keyp;
    3020:	86 e0       	ldi	r24, 0x06	; 6
    3022:	f6 01       	movw	r30, r12
    3024:	a9 ec       	ldi	r26, 0xC9	; 201
    3026:	b2 e0       	ldi	r27, 0x02	; 2
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	8a 95       	dec	r24
    302e:	e1 f7       	brne	.-8      	; 0x3028 <process_tapping+0x1fe>
                    waiting_buffer_scan_tap();
    3030:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3034:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <debug_tapping_key>
                    return true;
    3038:	ee 24       	eor	r14, r14
    303a:	e3 94       	inc	r14
    303c:	5c cf       	rjmp	.-328    	; 0x2ef6 <process_tapping+0xcc>
            if (tapping_key.tap.count == 0) {
    303e:	91 11       	cpse	r25, r1
    3040:	13 c0       	rjmp	.+38     	; 0x3068 <process_tapping+0x23e>
                debug_event(event); debug("\n");
    3042:	70 2f       	mov	r23, r16
    3044:	19 8b       	std	Y+17, r17	; 0x11
    3046:	08 8b       	std	Y+16, r16	; 0x10
    3048:	6f 2d       	mov	r22, r15
    304a:	89 89       	ldd	r24, Y+17	; 0x11
    304c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <debug_event>
                process_action(&tapping_key);
    3050:	89 ec       	ldi	r24, 0xC9	; 201
    3052:	92 e0       	ldi	r25, 0x02	; 2
    3054:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
            tapping_key = (keyrecord_t){};
    3058:	86 e0       	ldi	r24, 0x06	; 6
    305a:	e9 ec       	ldi	r30, 0xC9	; 201
    305c:	f2 e0       	ldi	r31, 0x02	; 2
    305e:	df 01       	movw	r26, r30
    3060:	1d 92       	st	X+, r1
    3062:	8a 95       	dec	r24
    3064:	e9 f7       	brne	.-6      	; 0x3060 <process_tapping+0x236>
    3066:	68 c0       	rjmp	.+208    	; 0x3138 <process_tapping+0x30e>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3068:	35 13       	cpse	r19, r21
    306a:	11 c0       	rjmp	.+34     	; 0x308e <process_tapping+0x264>
    306c:	24 13       	cpse	r18, r20
    306e:	0f c0       	rjmp	.+30     	; 0x308e <process_tapping+0x264>
    3070:	f1 10       	cpse	r15, r1
    3072:	0d c0       	rjmp	.+26     	; 0x308e <process_tapping+0x264>
                    keyp->tap = tapping_key.tap;
    3074:	f6 01       	movw	r30, r12
    3076:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3078:	c6 01       	movw	r24, r12
    307a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
                    tapping_key = (keyrecord_t){};
    307e:	e9 ec       	ldi	r30, 0xC9	; 201
    3080:	f2 e0       	ldi	r31, 0x02	; 2
    3082:	86 e0       	ldi	r24, 0x06	; 6
    3084:	df 01       	movw	r26, r30
    3086:	1d 92       	st	X+, r1
    3088:	8a 95       	dec	r24
    308a:	e9 f7       	brne	.-6      	; 0x3086 <process_tapping+0x25c>
    308c:	93 cf       	rjmp	.-218    	; 0x2fb4 <process_tapping+0x18a>
                else if (is_tap_key(event) && event.pressed) {
    308e:	4d 87       	std	Y+13, r20	; 0x0d
    3090:	5e 87       	std	Y+14, r21	; 0x0e
    3092:	ff 86       	std	Y+15, r15	; 0x0f
    3094:	70 2f       	mov	r23, r16
    3096:	19 8b       	std	Y+17, r17	; 0x11
    3098:	08 8b       	std	Y+16, r16	; 0x10
    309a:	6f 2d       	mov	r22, r15
    309c:	89 89       	ldd	r24, Y+17	; 0x11
    309e:	0e 94 19 16 	call	0x2c32	; 0x2c32 <is_tap_key>
    30a2:	88 23       	and	r24, r24
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <process_tapping+0x27e>
    30a6:	84 c0       	rjmp	.+264    	; 0x31b0 <process_tapping+0x386>
    30a8:	ff 20       	and	r15, r15
    30aa:	09 f4       	brne	.+2      	; 0x30ae <process_tapping+0x284>
    30ac:	81 c0       	rjmp	.+258    	; 0x31b0 <process_tapping+0x386>
                    if (tapping_key.tap.count > 1) {
    30ae:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    30b2:	80 32       	cpi	r24, 0x20	; 32
    30b4:	08 f4       	brcc	.+2      	; 0x30b8 <process_tapping+0x28e>
    30b6:	b4 cf       	rjmp	.-152    	; 0x3020 <process_tapping+0x1f6>
                        process_action(&(keyrecord_t){
    30b8:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    30bc:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    30c0:	3a 83       	std	Y+2, r19	; 0x02
    30c2:	29 83       	std	Y+1, r18	; 0x01
    30c4:	1b 82       	std	Y+3, r1	; 0x03
    30c6:	1d 83       	std	Y+5, r17	; 0x05
    30c8:	0c 83       	std	Y+4, r16	; 0x04
    30ca:	8e 83       	std	Y+6, r24	; 0x06
    30cc:	ce 01       	movw	r24, r28
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	a5 cf       	rjmp	.-182    	; 0x301c <process_tapping+0x1f2>
        if (WITHIN_TAPPING_TERM(event)) {
    30d2:	08 17       	cp	r16, r24
    30d4:	19 07       	cpc	r17, r25
    30d6:	98 f1       	brcs	.+102    	; 0x313e <process_tapping+0x314>
    30d8:	f8 01       	movw	r30, r16
    30da:	e8 1b       	sub	r30, r24
    30dc:	f9 0b       	sbc	r31, r25
    30de:	cf 01       	movw	r24, r30
    30e0:	e1 2c       	mov	r14, r1
    30e2:	88 3c       	cpi	r24, 0xC8	; 200
    30e4:	91 05       	cpc	r25, r1
    30e6:	08 f0       	brcs	.+2      	; 0x30ea <process_tapping+0x2c0>
    30e8:	4d c0       	rjmp	.+154    	; 0x3184 <process_tapping+0x35a>
            if (event.pressed) {
    30ea:	ef 2c       	mov	r14, r15
    30ec:	ff 20       	and	r15, r15
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <process_tapping+0x2c8>
    30f0:	5f c0       	rjmp	.+190    	; 0x31b0 <process_tapping+0x386>
                if (IS_TAPPING_KEY(event.key)) {
    30f2:	35 13       	cpse	r19, r21
    30f4:	32 c0       	rjmp	.+100    	; 0x315a <process_tapping+0x330>
    30f6:	24 13       	cpse	r18, r20
    30f8:	30 c0       	rjmp	.+96     	; 0x315a <process_tapping+0x330>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    30fa:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    30fe:	80 fd       	sbrc	r24, 0
    3100:	23 c0       	rjmp	.+70     	; 0x3148 <process_tapping+0x31e>
    3102:	98 2f       	mov	r25, r24
    3104:	90 7f       	andi	r25, 0xF0	; 240
    3106:	01 f1       	breq	.+64     	; 0x3148 <process_tapping+0x31e>
                        keyp->tap = tapping_key.tap;
    3108:	d6 01       	movw	r26, r12
    310a:	15 96       	adiw	r26, 0x05	; 5
    310c:	8c 93       	st	X, r24
    310e:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3110:	90 3f       	cpi	r25, 0xF0	; 240
    3112:	39 f0       	breq	.+14     	; 0x3122 <process_tapping+0x2f8>
    3114:	98 2f       	mov	r25, r24
    3116:	90 7f       	andi	r25, 0xF0	; 240
    3118:	90 5f       	subi	r25, 0xF0	; 240
    311a:	8f 70       	andi	r24, 0x0F	; 15
    311c:	89 2b       	or	r24, r25
    311e:	15 96       	adiw	r26, 0x05	; 5
    3120:	8c 93       	st	X, r24
                        process_action(keyp);
    3122:	c6 01       	movw	r24, r12
    3124:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
                        tapping_key = *keyp;
    3128:	86 e0       	ldi	r24, 0x06	; 6
    312a:	f6 01       	movw	r30, r12
    312c:	a9 ec       	ldi	r26, 0xC9	; 201
    312e:	b2 e0       	ldi	r27, 0x02	; 2
    3130:	01 90       	ld	r0, Z+
    3132:	0d 92       	st	X+, r0
    3134:	8a 95       	dec	r24
    3136:	e1 f7       	brne	.-8      	; 0x3130 <process_tapping+0x306>
            debug_tapping_key();
    3138:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <debug_tapping_key>
            return false;
    313c:	dc ce       	rjmp	.-584    	; 0x2ef6 <process_tapping+0xcc>
        if (WITHIN_TAPPING_TERM(event)) {
    313e:	80 95       	com	r24
    3140:	90 95       	com	r25
    3142:	80 0f       	add	r24, r16
    3144:	91 1f       	adc	r25, r17
    3146:	cc cf       	rjmp	.-104    	; 0x30e0 <process_tapping+0x2b6>
                        tapping_key = *keyp;
    3148:	86 e0       	ldi	r24, 0x06	; 6
    314a:	f6 01       	movw	r30, r12
    314c:	a9 ec       	ldi	r26, 0xC9	; 201
    314e:	b2 e0       	ldi	r27, 0x02	; 2
    3150:	01 90       	ld	r0, Z+
    3152:	0d 92       	st	X+, r0
    3154:	8a 95       	dec	r24
    3156:	e1 f7       	brne	.-8      	; 0x3150 <process_tapping+0x326>
                        return true;
    3158:	ce ce       	rjmp	.-612    	; 0x2ef6 <process_tapping+0xcc>
                } else if (is_tap_key(event)) {
    315a:	4d 87       	std	Y+13, r20	; 0x0d
    315c:	5e 87       	std	Y+14, r21	; 0x0e
    315e:	ff 86       	std	Y+15, r15	; 0x0f
    3160:	70 2f       	mov	r23, r16
    3162:	19 8b       	std	Y+17, r17	; 0x11
    3164:	08 8b       	std	Y+16, r16	; 0x10
    3166:	6f 2d       	mov	r22, r15
    3168:	89 89       	ldd	r24, Y+17	; 0x11
    316a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <is_tap_key>
    316e:	81 11       	cpse	r24, r1
    3170:	57 cf       	rjmp	.-338    	; 0x3020 <process_tapping+0x1f6>
                    tapping_key.tap.interrupted = true;
    3172:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    3176:	81 60       	ori	r24, 0x01	; 1
    3178:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    process_action(keyp);
    317c:	c6 01       	movw	r24, r12
    317e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
                    return true;
    3182:	b9 ce       	rjmp	.-654    	; 0x2ef6 <process_tapping+0xcc>
            debug_event(event); debug("\n");
    3184:	70 2f       	mov	r23, r16
    3186:	19 8b       	std	Y+17, r17	; 0x11
    3188:	08 8b       	std	Y+16, r16	; 0x10
    318a:	6f 2d       	mov	r22, r15
    318c:	89 89       	ldd	r24, Y+17	; 0x11
    318e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <debug_event>
    3192:	62 cf       	rjmp	.-316    	; 0x3058 <process_tapping+0x22e>
        if (event.pressed && is_tap_key(event)) {
    3194:	ff 20       	and	r15, r15
    3196:	61 f0       	breq	.+24     	; 0x31b0 <process_tapping+0x386>
    3198:	4d 87       	std	Y+13, r20	; 0x0d
    319a:	5e 87       	std	Y+14, r21	; 0x0e
    319c:	ff 86       	std	Y+15, r15	; 0x0f
    319e:	70 2f       	mov	r23, r16
    31a0:	19 8b       	std	Y+17, r17	; 0x11
    31a2:	08 8b       	std	Y+16, r16	; 0x10
    31a4:	6f 2d       	mov	r22, r15
    31a6:	89 89       	ldd	r24, Y+17	; 0x11
    31a8:	0e 94 19 16 	call	0x2c32	; 0x2c32 <is_tap_key>
    31ac:	81 11       	cpse	r24, r1
    31ae:	38 cf       	rjmp	.-400    	; 0x3020 <process_tapping+0x1f6>
                    process_action(keyp);
    31b0:	c6 01       	movw	r24, r12
    31b2:	0e 94 d7 12 	call	0x25ae	; 0x25ae <process_action>
    31b6:	40 cf       	rjmp	.-384    	; 0x3038 <process_tapping+0x20e>
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	8f 25       	eor	r24, r15
    31bc:	bb ce       	rjmp	.-650    	; 0x2f34 <process_tapping+0x10a>

000031be <action_tapping_process>:
{
    31be:	1f 93       	push	r17
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	2c 97       	sbiw	r28, 0x0c	; 12
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	4f 83       	std	Y+7, r20	; 0x07
    31d6:	58 87       	std	Y+8, r21	; 0x08
    31d8:	69 87       	std	Y+9, r22	; 0x09
    31da:	7a 87       	std	Y+10, r23	; 0x0a
    31dc:	8b 87       	std	Y+11, r24	; 0x0b
    31de:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    31e0:	ce 01       	movw	r24, r28
    31e2:	07 96       	adiw	r24, 0x07	; 7
    31e4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <process_tapping>
    31e8:	88 23       	and	r24, r24
    31ea:	69 f0       	breq	.+26     	; 0x3206 <action_tapping_process+0x48>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    31ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    31f0:	89 2b       	or	r24, r25
    31f2:	39 f0       	breq	.+14     	; 0x3202 <action_tapping_process+0x44>
    31f4:	4f 81       	ldd	r20, Y+7	; 0x07
    31f6:	58 85       	ldd	r21, Y+8	; 0x08
    31f8:	84 2f       	mov	r24, r20
    31fa:	85 23       	and	r24, r21
    31fc:	8f 3f       	cpi	r24, 0xFF	; 255
    31fe:	09 f0       	breq	.+2      	; 0x3202 <action_tapping_process+0x44>
    3200:	71 c0       	rjmp	.+226    	; 0x32e4 <action_tapping_process+0x126>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3202:	16 e0       	ldi	r17, 0x06	; 6
    3204:	5f c0       	rjmp	.+190    	; 0x32c4 <action_tapping_process+0x106>
        if (!waiting_buffer_enq(record)) {
    3206:	86 e0       	ldi	r24, 0x06	; 6
    3208:	fe 01       	movw	r30, r28
    320a:	37 96       	adiw	r30, 0x07	; 7
    320c:	de 01       	movw	r26, r28
    320e:	11 96       	adiw	r26, 0x01	; 1
    3210:	01 90       	ld	r0, Z+
    3212:	0d 92       	st	X+, r0
    3214:	8a 95       	dec	r24
    3216:	e1 f7       	brne	.-8      	; 0x3210 <action_tapping_process+0x52>
    3218:	8a 85       	ldd	r24, Y+10	; 0x0a
    321a:	9b 85       	ldd	r25, Y+11	; 0x0b
    321c:	89 2b       	or	r24, r25
    321e:	89 f3       	breq	.-30     	; 0x3202 <action_tapping_process+0x44>
    3220:	88 85       	ldd	r24, Y+8	; 0x08
    3222:	9f 81       	ldd	r25, Y+7	; 0x07
    3224:	89 23       	and	r24, r25
    3226:	8f 3f       	cpi	r24, 0xFF	; 255
    3228:	61 f3       	breq	.-40     	; 0x3202 <action_tapping_process+0x44>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    322a:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <waiting_buffer_head>
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	c9 01       	movw	r24, r18
    3232:	01 96       	adiw	r24, 0x01	; 1
    3234:	87 70       	andi	r24, 0x07	; 7
    3236:	99 27       	eor	r25, r25
    3238:	40 91 97 02 	lds	r20, 0x0297	; 0x800297 <waiting_buffer_tail>
    323c:	48 17       	cp	r20, r24
    323e:	19 06       	cpc	r1, r25
    3240:	71 f4       	brne	.+28     	; 0x325e <action_tapping_process+0xa0>
            clear_keyboard();
    3242:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <clear_keyboard>
    waiting_buffer_head = 0;
    3246:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    324a:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    324e:	86 e0       	ldi	r24, 0x06	; 6
    3250:	e9 ec       	ldi	r30, 0xC9	; 201
    3252:	f2 e0       	ldi	r31, 0x02	; 2
    3254:	df 01       	movw	r26, r30
    3256:	1d 92       	st	X+, r1
    3258:	8a 95       	dec	r24
    325a:	e9 f7       	brne	.-6      	; 0x3256 <action_tapping_process+0x98>
    325c:	d2 cf       	rjmp	.-92     	; 0x3202 <action_tapping_process+0x44>
    waiting_buffer[waiting_buffer_head] = record;
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	92 9f       	mul	r25, r18
    3262:	d0 01       	movw	r26, r0
    3264:	93 9f       	mul	r25, r19
    3266:	b0 0d       	add	r27, r0
    3268:	11 24       	eor	r1, r1
    326a:	a7 56       	subi	r26, 0x67	; 103
    326c:	bd 4f       	sbci	r27, 0xFD	; 253
    326e:	fe 01       	movw	r30, r28
    3270:	31 96       	adiw	r30, 0x01	; 1
    3272:	01 90       	ld	r0, Z+
    3274:	0d 92       	st	X+, r0
    3276:	9a 95       	dec	r25
    3278:	e1 f7       	brne	.-8      	; 0x3272 <action_tapping_process+0xb4>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    327a:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    327e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <debug_waiting_buffer>
    return true;
    3282:	bf cf       	rjmp	.-130    	; 0x3202 <action_tapping_process+0x44>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3284:	81 9f       	mul	r24, r17
    3286:	c0 01       	movw	r24, r0
    3288:	11 24       	eor	r1, r1
    328a:	87 56       	subi	r24, 0x67	; 103
    328c:	9d 4f       	sbci	r25, 0xFD	; 253
    328e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <process_tapping>
    3292:	88 23       	and	r24, r24
    3294:	e9 f0       	breq	.+58     	; 0x32d0 <action_tapping_process+0x112>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3296:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
    329a:	1e 9f       	mul	r17, r30
    329c:	f0 01       	movw	r30, r0
    329e:	11 24       	eor	r1, r1
    32a0:	e7 56       	subi	r30, 0x67	; 103
    32a2:	fd 4f       	sbci	r31, 0xFD	; 253
    32a4:	40 81       	ld	r20, Z
    32a6:	51 81       	ldd	r21, Z+1	; 0x01
    32a8:	62 81       	ldd	r22, Z+2	; 0x02
    32aa:	73 81       	ldd	r23, Z+3	; 0x03
    32ac:	84 81       	ldd	r24, Z+4	; 0x04
    32ae:	95 81       	ldd	r25, Z+5	; 0x05
    32b0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    32b4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	87 70       	andi	r24, 0x07	; 7
    32be:	99 27       	eor	r25, r25
    32c0:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <waiting_buffer_tail>
    32c4:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    32c8:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <waiting_buffer_head>
    32cc:	89 13       	cpse	r24, r25
    32ce:	da cf       	rjmp	.-76     	; 0x3284 <action_tapping_process+0xc6>
}
    32d0:	2c 96       	adiw	r28, 0x0c	; 12
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	08 95       	ret
            debug("processed: "); debug_record(record); debug("\n");
    32e4:	69 85       	ldd	r22, Y+9	; 0x09
    32e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    32e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    32ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    32ec:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <debug_record>
    32f0:	88 cf       	rjmp	.-240    	; 0x3202 <action_tapping_process+0x44>

000032f2 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    32f2:	df 92       	push	r13
    32f4:	ef 92       	push	r14
    32f6:	ff 92       	push	r15
    32f8:	0f 93       	push	r16
    32fa:	1f 93       	push	r17
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3302:	89 2b       	or	r24, r25
    3304:	b9 f0       	breq	.+46     	; 0x3334 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    3306:	e1 2c       	mov	r14, r1
    uint8_t interval = 0;
    3308:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    330a:	dd 24       	eor	r13, r13
    330c:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    330e:	e8 01       	movw	r28, r16
    3310:	21 96       	adiw	r28, 0x01	; 1
    3312:	f8 01       	movw	r30, r16
    3314:	84 91       	lpm	r24, Z
    3316:	85 37       	cpi	r24, 0x75	; 117
    3318:	09 f4       	brne	.+2      	; 0x331c <action_macro_play+0x2a>
    331a:	6a c0       	rjmp	.+212    	; 0x33f0 <action_macro_play+0xfe>
    331c:	98 f4       	brcc	.+38     	; 0x3344 <action_macro_play+0x52>
    331e:	84 37       	cpi	r24, 0x74	; 116
    3320:	08 f0       	brcs	.+2      	; 0x3324 <action_macro_play+0x32>
    3322:	59 c0       	rjmp	.+178    	; 0x33d6 <action_macro_play+0xe4>
    3324:	84 30       	cpi	r24, 0x04	; 4
    3326:	08 f0       	brcs	.+2      	; 0x332a <action_macro_play+0x38>
    3328:	6f c0       	rjmp	.+222    	; 0x3408 <action_macro_play+0x116>
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	11 f1       	breq	.+68     	; 0x3372 <action_macro_play+0x80>
    332e:	82 30       	cpi	r24, 0x02	; 2
    3330:	09 f4       	brne	.+2      	; 0x3334 <action_macro_play+0x42>
    3332:	3c c0       	rjmp	.+120    	; 0x33ac <action_macro_play+0xba>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	ff 90       	pop	r15
    333e:	ef 90       	pop	r14
    3340:	df 90       	pop	r13
    3342:	08 95       	ret
        switch (MACRO_READ()) {
    3344:	88 37       	cpi	r24, 0x78	; 120
    3346:	09 f4       	brne	.+2      	; 0x334a <action_macro_play+0x58>
    3348:	5c c0       	rjmp	.+184    	; 0x3402 <action_macro_play+0x110>
    334a:	58 f4       	brcc	.+22     	; 0x3362 <action_macro_play+0x70>
    334c:	86 37       	cpi	r24, 0x76	; 118
    334e:	09 f4       	brne	.+2      	; 0x3352 <action_macro_play+0x60>
    3350:	54 c0       	rjmp	.+168    	; 0x33fa <action_macro_play+0x108>
    3352:	87 37       	cpi	r24, 0x77	; 119
    3354:	79 f7       	brne	.-34     	; 0x3334 <action_macro_play+0x42>
                set_mods(mod_storage);
    3356:	8e 2d       	mov	r24, r14
    3358:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <set_mods>
                send_keyboard_report();
    335c:	0e 94 a6 1c 	call	0x394c	; 0x394c <send_keyboard_report>
                break;
    3360:	1f c0       	rjmp	.+62     	; 0x33a0 <action_macro_play+0xae>
        switch (MACRO_READ()) {
    3362:	9c e7       	ldi	r25, 0x7C	; 124
    3364:	98 0f       	add	r25, r24
    3366:	90 37       	cpi	r25, 0x70	; 112
    3368:	28 f7       	brcc	.-54     	; 0x3334 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    336a:	8f 77       	andi	r24, 0x7F	; 127
    336c:	0e 94 8b 12 	call	0x2516	; 0x2516 <unregister_code>
                break;
    3370:	17 c0       	rjmp	.+46     	; 0x33a0 <action_macro_play+0xae>
                MACRO_READ();
    3372:	0e 5f       	subi	r16, 0xFE	; 254
    3374:	1f 4f       	sbci	r17, 0xFF	; 255
    3376:	fe 01       	movw	r30, r28
    3378:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    337a:	90 e2       	ldi	r25, 0x20	; 32
    337c:	98 0f       	add	r25, r24
    337e:	98 30       	cpi	r25, 0x08	; 8
    3380:	60 f4       	brcc	.+24     	; 0x339a <action_macro_play+0xa8>
                    add_weak_mods(MOD_BIT(macro));
    3382:	87 70       	andi	r24, 0x07	; 7
    3384:	fd 2d       	mov	r31, r13
    3386:	01 c0       	rjmp	.+2      	; 0x338a <action_macro_play+0x98>
    3388:	ff 0f       	add	r31, r31
    338a:	8a 95       	dec	r24
    338c:	ea f7       	brpl	.-6      	; 0x3388 <action_macro_play+0x96>
    338e:	8f 2f       	mov	r24, r31
    3390:	0e 94 80 1c 	call	0x3900	; 0x3900 <add_weak_mods>
                    send_keyboard_report();
    3394:	0e 94 a6 1c 	call	0x394c	; 0x394c <send_keyboard_report>
    3398:	02 c0       	rjmp	.+4      	; 0x339e <action_macro_play+0xac>
                    register_code(macro);
    339a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <register_code>
                MACRO_READ();
    339e:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    33a0:	8f 2d       	mov	r24, r15
    33a2:	81 50       	subi	r24, 0x01	; 1
    33a4:	08 f0       	brcs	.+2      	; 0x33a8 <action_macro_play+0xb6>
    33a6:	33 c0       	rjmp	.+102    	; 0x340e <action_macro_play+0x11c>
    33a8:	8e 01       	movw	r16, r28
    33aa:	b1 cf       	rjmp	.-158    	; 0x330e <action_macro_play+0x1c>
                MACRO_READ();
    33ac:	0e 5f       	subi	r16, 0xFE	; 254
    33ae:	1f 4f       	sbci	r17, 0xFF	; 255
    33b0:	fe 01       	movw	r30, r28
    33b2:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    33b4:	90 e2       	ldi	r25, 0x20	; 32
    33b6:	98 0f       	add	r25, r24
    33b8:	98 30       	cpi	r25, 0x08	; 8
    33ba:	50 f4       	brcc	.+20     	; 0x33d0 <action_macro_play+0xde>
                    del_weak_mods(MOD_BIT(macro));
    33bc:	87 70       	andi	r24, 0x07	; 7
    33be:	fd 2d       	mov	r31, r13
    33c0:	01 c0       	rjmp	.+2      	; 0x33c4 <action_macro_play+0xd2>
    33c2:	ff 0f       	add	r31, r31
    33c4:	8a 95       	dec	r24
    33c6:	ea f7       	brpl	.-6      	; 0x33c2 <action_macro_play+0xd0>
    33c8:	8f 2f       	mov	r24, r31
    33ca:	0e 94 86 1c 	call	0x390c	; 0x390c <del_weak_mods>
    33ce:	e2 cf       	rjmp	.-60     	; 0x3394 <action_macro_play+0xa2>
                    unregister_code(macro);
    33d0:	0e 94 8b 12 	call	0x2516	; 0x2516 <unregister_code>
    33d4:	e4 cf       	rjmp	.-56     	; 0x339e <action_macro_play+0xac>
                MACRO_READ();
    33d6:	0e 5f       	subi	r16, 0xFE	; 254
    33d8:	1f 4f       	sbci	r17, 0xFF	; 255
    33da:	fe 01       	movw	r30, r28
    33dc:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    33de:	c1 50       	subi	r28, 0x01	; 1
    33e0:	f0 f2       	brcs	.-68     	; 0x339e <action_macro_play+0xac>
    33e2:	8f e9       	ldi	r24, 0x9F	; 159
    33e4:	9f e0       	ldi	r25, 0x0F	; 15
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <action_macro_play+0xf4>
    33ea:	00 c0       	rjmp	.+0      	; 0x33ec <action_macro_play+0xfa>
    33ec:	00 00       	nop
    33ee:	f7 cf       	rjmp	.-18     	; 0x33de <action_macro_play+0xec>
                interval = MACRO_READ();
    33f0:	0e 5f       	subi	r16, 0xFE	; 254
    33f2:	1f 4f       	sbci	r17, 0xFF	; 255
    33f4:	fe 01       	movw	r30, r28
    33f6:	f4 90       	lpm	r15, Z
                break;
    33f8:	d2 cf       	rjmp	.-92     	; 0x339e <action_macro_play+0xac>
                mod_storage = get_mods();
    33fa:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <get_mods>
    33fe:	e8 2e       	mov	r14, r24
                break;
    3400:	cf cf       	rjmp	.-98     	; 0x33a0 <action_macro_play+0xae>
                clear_mods();
    3402:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <clear_mods>
    3406:	aa cf       	rjmp	.-172    	; 0x335c <action_macro_play+0x6a>
                register_code(macro);
    3408:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <register_code>
                break;
    340c:	c9 cf       	rjmp	.-110    	; 0x33a0 <action_macro_play+0xae>
    340e:	ef e9       	ldi	r30, 0x9F	; 159
    3410:	ff e0       	ldi	r31, 0x0F	; 15
    3412:	31 97       	sbiw	r30, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <action_macro_play+0x120>
    3416:	00 c0       	rjmp	.+0      	; 0x3418 <action_macro_play+0x126>
    3418:	00 00       	nop
    341a:	c3 cf       	rjmp	.-122    	; 0x33a2 <action_macro_play+0xb0>

0000341c <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    341c:	60 93 4f 03 	sts	0x034F, r22	; 0x80034f <layer_state>
    3420:	70 93 50 03 	sts	0x0350, r23	; 0x800350 <layer_state+0x1>
    3424:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <layer_state+0x2>
    3428:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <layer_state+0x3>
    hook_layer_change(layer_state);
    342c:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <hook_layer_change>

00003430 <default_layer_debug>:
}
    3430:	08 95       	ret

00003432 <default_layer_set>:
    default_layer_state = state;
    3432:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <default_layer_state>
    3436:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <default_layer_state+0x1>
    343a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <default_layer_state+0x2>
    343e:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3442:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <hook_default_layer_change>

00003446 <default_layer_or>:
{
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    344a:	00 91 53 03 	lds	r16, 0x0353	; 0x800353 <default_layer_state>
    344e:	10 91 54 03 	lds	r17, 0x0354	; 0x800354 <default_layer_state+0x1>
    3452:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <default_layer_state+0x2>
    3456:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <default_layer_state+0x3>
    345a:	60 2b       	or	r22, r16
    345c:	71 2b       	or	r23, r17
    345e:	82 2b       	or	r24, r18
    3460:	93 2b       	or	r25, r19
    default_layer_state = state;
    3462:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <default_layer_state>
    3466:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <default_layer_state+0x1>
    346a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <default_layer_state+0x2>
    346e:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <default_layer_state+0x3>
}
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    3476:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <hook_default_layer_change>

0000347a <default_layer_and>:
{
    347a:	0f 93       	push	r16
    347c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    347e:	00 91 53 03 	lds	r16, 0x0353	; 0x800353 <default_layer_state>
    3482:	10 91 54 03 	lds	r17, 0x0354	; 0x800354 <default_layer_state+0x1>
    3486:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <default_layer_state+0x2>
    348a:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <default_layer_state+0x3>
    348e:	60 23       	and	r22, r16
    3490:	71 23       	and	r23, r17
    3492:	82 23       	and	r24, r18
    3494:	93 23       	and	r25, r19
    default_layer_state = state;
    3496:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <default_layer_state>
    349a:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <default_layer_state+0x1>
    349e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <default_layer_state+0x2>
    34a2:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <default_layer_state+0x3>
}
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    34aa:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <hook_default_layer_change>

000034ae <default_layer_xor>:
{
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    34b2:	00 91 53 03 	lds	r16, 0x0353	; 0x800353 <default_layer_state>
    34b6:	10 91 54 03 	lds	r17, 0x0354	; 0x800354 <default_layer_state+0x1>
    34ba:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <default_layer_state+0x2>
    34be:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <default_layer_state+0x3>
    34c2:	60 27       	eor	r22, r16
    34c4:	71 27       	eor	r23, r17
    34c6:	82 27       	eor	r24, r18
    34c8:	93 27       	eor	r25, r19
    default_layer_state = state;
    34ca:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <default_layer_state>
    34ce:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <default_layer_state+0x1>
    34d2:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <default_layer_state+0x2>
    34d6:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <default_layer_state+0x3>
}
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    34de:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <hook_default_layer_change>

000034e2 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	70 e0       	ldi	r23, 0x00	; 0
    34e6:	cb 01       	movw	r24, r22
    34e8:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

000034ec <layer_move>:
}

void layer_move(uint8_t layer)
{
    34ec:	0f 93       	push	r16
    34ee:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	8a 01       	movw	r16, r20
    34fa:	9b 01       	movw	r18, r22
    34fc:	04 c0       	rjmp	.+8      	; 0x3506 <layer_move+0x1a>
    34fe:	00 0f       	add	r16, r16
    3500:	11 1f       	adc	r17, r17
    3502:	22 1f       	adc	r18, r18
    3504:	33 1f       	adc	r19, r19
    3506:	8a 95       	dec	r24
    3508:	d2 f7       	brpl	.-12     	; 0x34fe <layer_move+0x12>
    350a:	c9 01       	movw	r24, r18
    350c:	b8 01       	movw	r22, r16
}
    350e:	1f 91       	pop	r17
    3510:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    3512:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

00003516 <layer_on>:

void layer_on(uint8_t layer)
{
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    351a:	41 e0       	ldi	r20, 0x01	; 1
    351c:	50 e0       	ldi	r21, 0x00	; 0
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	04 c0       	rjmp	.+8      	; 0x352c <layer_on+0x16>
    3524:	44 0f       	add	r20, r20
    3526:	55 1f       	adc	r21, r21
    3528:	66 1f       	adc	r22, r22
    352a:	77 1f       	adc	r23, r23
    352c:	8a 95       	dec	r24
    352e:	d2 f7       	brpl	.-12     	; 0x3524 <layer_on+0xe>
    3530:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    3534:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    3538:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    353c:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    3540:	8a 01       	movw	r16, r20
    3542:	9b 01       	movw	r18, r22
    3544:	08 2b       	or	r16, r24
    3546:	19 2b       	or	r17, r25
    3548:	2a 2b       	or	r18, r26
    354a:	3b 2b       	or	r19, r27
    354c:	c9 01       	movw	r24, r18
    354e:	b8 01       	movw	r22, r16
}
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    3554:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

00003558 <layer_off>:

void layer_off(uint8_t layer)
{
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    355c:	41 e0       	ldi	r20, 0x01	; 1
    355e:	50 e0       	ldi	r21, 0x00	; 0
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	04 c0       	rjmp	.+8      	; 0x356e <layer_off+0x16>
    3566:	44 0f       	add	r20, r20
    3568:	55 1f       	adc	r21, r21
    356a:	66 1f       	adc	r22, r22
    356c:	77 1f       	adc	r23, r23
    356e:	8a 95       	dec	r24
    3570:	d2 f7       	brpl	.-12     	; 0x3566 <layer_off+0xe>
    3572:	cb 01       	movw	r24, r22
    3574:	ba 01       	movw	r22, r20
    3576:	60 95       	com	r22
    3578:	70 95       	com	r23
    357a:	80 95       	com	r24
    357c:	90 95       	com	r25
    357e:	00 91 4f 03 	lds	r16, 0x034F	; 0x80034f <layer_state>
    3582:	10 91 50 03 	lds	r17, 0x0350	; 0x800350 <layer_state+0x1>
    3586:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <layer_state+0x2>
    358a:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <layer_state+0x3>
    358e:	60 23       	and	r22, r16
    3590:	71 23       	and	r23, r17
    3592:	82 23       	and	r24, r18
    3594:	93 23       	and	r25, r19
}
    3596:	1f 91       	pop	r17
    3598:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    359a:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

0000359e <layer_invert>:

void layer_invert(uint8_t layer)
{
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    35a2:	41 e0       	ldi	r20, 0x01	; 1
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	60 e0       	ldi	r22, 0x00	; 0
    35a8:	70 e0       	ldi	r23, 0x00	; 0
    35aa:	04 c0       	rjmp	.+8      	; 0x35b4 <layer_invert+0x16>
    35ac:	44 0f       	add	r20, r20
    35ae:	55 1f       	adc	r21, r21
    35b0:	66 1f       	adc	r22, r22
    35b2:	77 1f       	adc	r23, r23
    35b4:	8a 95       	dec	r24
    35b6:	d2 f7       	brpl	.-12     	; 0x35ac <layer_invert+0xe>
    35b8:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <layer_state>
    35bc:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <layer_state+0x1>
    35c0:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <layer_state+0x2>
    35c4:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <layer_state+0x3>
    35c8:	8a 01       	movw	r16, r20
    35ca:	9b 01       	movw	r18, r22
    35cc:	08 27       	eor	r16, r24
    35ce:	19 27       	eor	r17, r25
    35d0:	2a 27       	eor	r18, r26
    35d2:	3b 27       	eor	r19, r27
    35d4:	c9 01       	movw	r24, r18
    35d6:	b8 01       	movw	r22, r16
}
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    35dc:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

000035e0 <layer_or>:

void layer_or(uint32_t state)
{
    35e0:	0f 93       	push	r16
    35e2:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    35e4:	00 91 4f 03 	lds	r16, 0x034F	; 0x80034f <layer_state>
    35e8:	10 91 50 03 	lds	r17, 0x0350	; 0x800350 <layer_state+0x1>
    35ec:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <layer_state+0x2>
    35f0:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <layer_state+0x3>
    35f4:	60 2b       	or	r22, r16
    35f6:	71 2b       	or	r23, r17
    35f8:	82 2b       	or	r24, r18
    35fa:	93 2b       	or	r25, r19
}
    35fc:	1f 91       	pop	r17
    35fe:	0f 91       	pop	r16
    layer_state_set(layer_state | state);
    3600:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

00003604 <layer_and>:
void layer_and(uint32_t state)
{
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3608:	00 91 4f 03 	lds	r16, 0x034F	; 0x80034f <layer_state>
    360c:	10 91 50 03 	lds	r17, 0x0350	; 0x800350 <layer_state+0x1>
    3610:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <layer_state+0x2>
    3614:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <layer_state+0x3>
    3618:	60 23       	and	r22, r16
    361a:	71 23       	and	r23, r17
    361c:	82 23       	and	r24, r18
    361e:	93 23       	and	r25, r19
}
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    layer_state_set(layer_state & state);
    3624:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

00003628 <layer_xor>:
void layer_xor(uint32_t state)
{
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    362c:	00 91 4f 03 	lds	r16, 0x034F	; 0x80034f <layer_state>
    3630:	10 91 50 03 	lds	r17, 0x0350	; 0x800350 <layer_state+0x1>
    3634:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <layer_state+0x2>
    3638:	30 91 52 03 	lds	r19, 0x0352	; 0x800352 <layer_state+0x3>
    363c:	60 27       	eor	r22, r16
    363e:	71 27       	eor	r23, r17
    3640:	82 27       	eor	r24, r18
    3642:	93 27       	eor	r25, r19
}
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    layer_state_set(layer_state ^ state);
    3648:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <layer_state_set>

0000364c <layer_debug>:
    364c:	08 95       	ret

0000364e <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    364e:	4f 92       	push	r4
    3650:	5f 92       	push	r5
    3652:	6f 92       	push	r6
    3654:	7f 92       	push	r7
    3656:	9f 92       	push	r9
    3658:	af 92       	push	r10
    365a:	bf 92       	push	r11
    365c:	cf 92       	push	r12
    365e:	df 92       	push	r13
    3660:	ef 92       	push	r14
    3662:	ff 92       	push	r15
    3664:	0f 93       	push	r16
    3666:	1f 93       	push	r17
    3668:	cf 93       	push	r28
    366a:	df 93       	push	r29
    366c:	00 d0       	rcall	.+0      	; 0x366e <layer_switch_get_action+0x20>
    366e:	00 d0       	rcall	.+0      	; 0x3670 <layer_switch_get_action+0x22>
    3670:	0f 92       	push	r0
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
    3676:	49 83       	std	Y+1, r20	; 0x01
    3678:	5a 83       	std	Y+2, r21	; 0x02
    367a:	6b 83       	std	Y+3, r22	; 0x03
    367c:	7c 83       	std	Y+4, r23	; 0x04
    367e:	8d 83       	std	Y+5, r24	; 0x05
    3680:	8c 81       	ldd	r24, Y+4	; 0x04
    3682:	9d 81       	ldd	r25, Y+5	; 0x05
    3684:	89 2b       	or	r24, r25
    3686:	29 f0       	breq	.+10     	; 0x3692 <layer_switch_get_action+0x44>
    3688:	7a 01       	movw	r14, r20
    368a:	8f 2d       	mov	r24, r15
    368c:	84 23       	and	r24, r20
    368e:	8f 3f       	cpi	r24, 0xFF	; 255
    3690:	51 f5       	brne	.+84     	; 0x36e6 <layer_switch_get_action+0x98>
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
}
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	df 90       	pop	r13
    36ae:	cf 90       	pop	r12
    36b0:	bf 90       	pop	r11
    36b2:	af 90       	pop	r10
    36b4:	9f 90       	pop	r9
    36b6:	7f 90       	pop	r7
    36b8:	6f 90       	pop	r6
    36ba:	5f 90       	pop	r5
    36bc:	4f 90       	pop	r4
    36be:	08 95       	ret
            action = action_for_key(i, key);
    36c0:	b7 01       	movw	r22, r14
    36c2:	8a 2d       	mov	r24, r10
    36c4:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	c1 f1       	breq	.+112    	; 0x373c <layer_switch_get_action+0xee>
    36cc:	3c c0       	rjmp	.+120    	; 0x3746 <layer_switch_get_action+0xf8>
        layer = layer_pressed[event.key.row][event.key.col];
    36ce:	f8 01       	movw	r30, r16
    36d0:	83 e0       	ldi	r24, 0x03	; 3
    36d2:	ee 0f       	add	r30, r30
    36d4:	ff 1f       	adc	r31, r31
    36d6:	8a 95       	dec	r24
    36d8:	e1 f7       	brne	.-8      	; 0x36d2 <layer_switch_get_action+0x84>
    36da:	e1 53       	subi	r30, 0x31	; 49
    36dc:	fd 4f       	sbci	r31, 0xFD	; 253
    36de:	ec 0d       	add	r30, r12
    36e0:	fd 1d       	adc	r31, r13
    36e2:	90 80       	ld	r9, Z
    36e4:	3b c0       	rjmp	.+118    	; 0x375c <layer_switch_get_action+0x10e>
    if (event.pressed) {
    36e6:	0f 2d       	mov	r16, r15
    36e8:	10 e0       	ldi	r17, 0x00	; 0
    36ea:	c4 2e       	mov	r12, r20
    36ec:	d1 2c       	mov	r13, r1
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	88 23       	and	r24, r24
    36f2:	69 f3       	breq	.-38     	; 0x36ce <layer_switch_get_action+0x80>
    uint32_t layers = layer_state | default_layer_state;
    36f4:	40 90 4f 03 	lds	r4, 0x034F	; 0x80034f <layer_state>
    36f8:	50 90 50 03 	lds	r5, 0x0350	; 0x800350 <layer_state+0x1>
    36fc:	60 90 51 03 	lds	r6, 0x0351	; 0x800351 <layer_state+0x2>
    3700:	70 90 52 03 	lds	r7, 0x0352	; 0x800352 <layer_state+0x3>
    3704:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <default_layer_state>
    3708:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <default_layer_state+0x1>
    370c:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <default_layer_state+0x2>
    3710:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <default_layer_state+0x3>
    3714:	48 2a       	or	r4, r24
    3716:	59 2a       	or	r5, r25
    3718:	6a 2a       	or	r6, r26
    371a:	7b 2a       	or	r7, r27
    371c:	2f e1       	ldi	r18, 0x1F	; 31
    371e:	a2 2e       	mov	r10, r18
    3720:	b1 2c       	mov	r11, r1
        if (layers & (1UL<<i)) {
    3722:	9a 2c       	mov	r9, r10
    3724:	d3 01       	movw	r26, r6
    3726:	c2 01       	movw	r24, r4
    3728:	0a 2c       	mov	r0, r10
    372a:	04 c0       	rjmp	.+8      	; 0x3734 <layer_switch_get_action+0xe6>
    372c:	b6 95       	lsr	r27
    372e:	a7 95       	ror	r26
    3730:	97 95       	ror	r25
    3732:	87 95       	ror	r24
    3734:	0a 94       	dec	r0
    3736:	d2 f7       	brpl	.-12     	; 0x372c <layer_switch_get_action+0xde>
    3738:	80 fd       	sbrc	r24, 0
    373a:	c2 cf       	rjmp	.-124    	; 0x36c0 <layer_switch_get_action+0x72>
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	a8 1a       	sub	r10, r24
    3740:	b1 08       	sbc	r11, r1
    3742:	78 f7       	brcc	.-34     	; 0x3722 <layer_switch_get_action+0xd4>
    return 0;
    3744:	91 2c       	mov	r9, r1
        layer_pressed[event.key.row][event.key.col] = layer;
    3746:	f8 01       	movw	r30, r16
    3748:	93 e0       	ldi	r25, 0x03	; 3
    374a:	ee 0f       	add	r30, r30
    374c:	ff 1f       	adc	r31, r31
    374e:	9a 95       	dec	r25
    3750:	e1 f7       	brne	.-8      	; 0x374a <layer_switch_get_action+0xfc>
    3752:	e1 53       	subi	r30, 0x31	; 49
    3754:	fd 4f       	sbci	r31, 0xFD	; 253
    3756:	ec 0d       	add	r30, r12
    3758:	fd 1d       	adc	r31, r13
    375a:	90 82       	st	Z, r9
    return action_for_key(layer, event.key);
    375c:	e9 82       	std	Y+1, r14	; 0x01
    375e:	fa 82       	std	Y+2, r15	; 0x02
    3760:	69 81       	ldd	r22, Y+1	; 0x01
    3762:	7a 81       	ldd	r23, Y+2	; 0x02
    3764:	89 2d       	mov	r24, r9
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	ff 90       	pop	r15
    377a:	ef 90       	pop	r14
    377c:	df 90       	pop	r13
    377e:	cf 90       	pop	r12
    3780:	bf 90       	pop	r11
    3782:	af 90       	pop	r10
    3784:	9f 90       	pop	r9
    3786:	7f 90       	pop	r7
    3788:	6f 90       	pop	r6
    378a:	5f 90       	pop	r5
    378c:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    378e:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <action_for_key>

00003792 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3792:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <keyboard_protocol>
    3796:	99 23       	and	r25, r25
    3798:	69 f1       	breq	.+90     	; 0x37f4 <add_key+0x62>
    379a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <keyboard_nkro>
    379e:	99 23       	and	r25, r25
    37a0:	49 f1       	breq	.+82     	; 0x37f4 <add_key+0x62>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    37a2:	e8 2f       	mov	r30, r24
    37a4:	e6 95       	lsr	r30
    37a6:	e6 95       	lsr	r30
    37a8:	e6 95       	lsr	r30
    37aa:	ef 31       	cpi	r30, 0x1F	; 31
    37ac:	91 f0       	breq	.+36     	; 0x37d2 <add_key+0x40>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    37ae:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    37b2:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    37b6:	e2 0f       	add	r30, r18
    37b8:	f3 2f       	mov	r31, r19
    37ba:	f1 1d       	adc	r31, r1
    37bc:	87 70       	andi	r24, 0x07	; 7
    37be:	21 e0       	ldi	r18, 0x01	; 1
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	01 c0       	rjmp	.+2      	; 0x37c6 <add_key+0x34>
    37c4:	22 0f       	add	r18, r18
    37c6:	8a 95       	dec	r24
    37c8:	ea f7       	brpl	.-6      	; 0x37c4 <add_key+0x32>
    37ca:	81 81       	ldd	r24, Z+1	; 0x01
    37cc:	82 2b       	or	r24, r18
    37ce:	81 83       	std	Z+1, r24	; 0x01
    37d0:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    37d2:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    37d6:	90 ff       	sbrs	r25, 0
    37d8:	22 c0       	rjmp	.+68     	; 0x381e <add_key+0x8c>
    37da:	1f 92       	push	r1
    37dc:	8f 93       	push	r24
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	94 e0       	ldi	r25, 0x04	; 4
    37e2:	9f 93       	push	r25
    37e4:	8f 93       	push	r24
    37e6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	08 95       	ret
        if (keyboard_report->keys[i] == code) {
    37f4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    37f8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    37fc:	f9 01       	movw	r30, r18
    37fe:	32 96       	adiw	r30, 0x02	; 2
    3800:	9f ef       	ldi	r25, 0xFF	; 255
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	51 91       	ld	r21, Z+
    3806:	85 17       	cp	r24, r21
    3808:	51 f0       	breq	.+20     	; 0x381e <add_key+0x8c>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    380a:	9f 3f       	cpi	r25, 0xFF	; 255
    380c:	19 f4       	brne	.+6      	; 0x3814 <add_key+0x82>
    380e:	51 11       	cpse	r21, r1
    3810:	01 c0       	rjmp	.+2      	; 0x3814 <add_key+0x82>
    3812:	94 2f       	mov	r25, r20
    3814:	4f 5f       	subi	r20, 0xFF	; 255
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3816:	4e 31       	cpi	r20, 0x1E	; 30
    3818:	a9 f7       	brne	.-22     	; 0x3804 <add_key+0x72>
        if (empty != -1) {
    381a:	9f 3f       	cpi	r25, 0xFF	; 255
    381c:	09 f4       	brne	.+2      	; 0x3820 <add_key+0x8e>
}
    381e:	08 95       	ret
            keyboard_report->keys[empty] = code;
    3820:	29 0f       	add	r18, r25
    3822:	31 1d       	adc	r19, r1
    3824:	97 fd       	sbrc	r25, 7
    3826:	3a 95       	dec	r19
    3828:	f9 01       	movw	r30, r18
    382a:	82 83       	std	Z+2, r24	; 0x02
    382c:	08 95       	ret

0000382e <del_key>:
    if (keyboard_protocol && keyboard_nkro) {
    382e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <keyboard_protocol>
    3832:	99 23       	and	r25, r25
    3834:	79 f1       	breq	.+94     	; 0x3894 <del_key+0x66>
    3836:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <keyboard_nkro>
    383a:	99 23       	and	r25, r25
    383c:	59 f1       	breq	.+86     	; 0x3894 <del_key+0x66>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    383e:	e8 2f       	mov	r30, r24
    3840:	e6 95       	lsr	r30
    3842:	e6 95       	lsr	r30
    3844:	e6 95       	lsr	r30
    3846:	ef 31       	cpi	r30, 0x1F	; 31
    3848:	a1 f0       	breq	.+40     	; 0x3872 <del_key+0x44>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    384a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    384e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    3852:	e2 0f       	add	r30, r18
    3854:	f3 2f       	mov	r31, r19
    3856:	f1 1d       	adc	r31, r1
    3858:	28 2f       	mov	r18, r24
    385a:	27 70       	andi	r18, 0x07	; 7
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <del_key+0x36>
    3862:	88 0f       	add	r24, r24
    3864:	2a 95       	dec	r18
    3866:	ea f7       	brpl	.-6      	; 0x3862 <del_key+0x34>
    3868:	80 95       	com	r24
    386a:	91 81       	ldd	r25, Z+1	; 0x01
    386c:	89 23       	and	r24, r25
    386e:	81 83       	std	Z+1, r24	; 0x01
    3870:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3872:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    3876:	90 ff       	sbrs	r25, 0
    3878:	1e c0       	rjmp	.+60     	; 0x38b6 <del_key+0x88>
    387a:	1f 92       	push	r1
    387c:	8f 93       	push	r24
    387e:	82 ee       	ldi	r24, 0xE2	; 226
    3880:	93 e0       	ldi	r25, 0x03	; 3
    3882:	9f 93       	push	r25
    3884:	8f 93       	push	r24
    3886:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	08 95       	ret
        if (keyboard_report->keys[i] == code) {
    3894:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    3898:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    389c:	f9 01       	movw	r30, r18
    389e:	32 96       	adiw	r30, 0x02	; 2
    38a0:	20 5e       	subi	r18, 0xE0	; 224
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	91 91       	ld	r25, Z+
    38a6:	89 13       	cpse	r24, r25
    38a8:	03 c0       	rjmp	.+6      	; 0x38b0 <del_key+0x82>
            keyboard_report->keys[i] = 0;
    38aa:	df 01       	movw	r26, r30
    38ac:	11 97       	sbiw	r26, 0x01	; 1
    38ae:	1c 92       	st	X, r1
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    38b0:	e2 17       	cp	r30, r18
    38b2:	f3 07       	cpc	r31, r19
    38b4:	b9 f7       	brne	.-18     	; 0x38a4 <del_key+0x76>
}
    38b6:	08 95       	ret

000038b8 <clear_keys>:
{
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
        keyboard_report->raw[i] = 0;
    38bc:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    38c0:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    38c4:	e8 0f       	add	r30, r24
    38c6:	f9 1f       	adc	r31, r25
    38c8:	10 82       	st	Z, r1
    38ca:	01 96       	adiw	r24, 0x01	; 1
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38cc:	80 32       	cpi	r24, 0x20	; 32
    38ce:	91 05       	cpc	r25, r1
    38d0:	a9 f7       	brne	.-22     	; 0x38bc <clear_keys+0x4>
}
    38d2:	08 95       	ret

000038d4 <get_mods>:
uint8_t get_mods(void) { return real_mods; }
    38d4:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <real_mods>
    38d8:	08 95       	ret

000038da <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    38da:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <real_mods>
    38de:	89 2b       	or	r24, r25
    38e0:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <real_mods>
    38e4:	08 95       	ret

000038e6 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    38e6:	80 95       	com	r24
    38e8:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <real_mods>
    38ec:	98 23       	and	r25, r24
    38ee:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <real_mods>
    38f2:	08 95       	ret

000038f4 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    38f4:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <real_mods>
    38f8:	08 95       	ret

000038fa <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    38fa:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <real_mods>
    38fe:	08 95       	ret

00003900 <add_weak_mods>:
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3900:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <weak_mods>
    3904:	89 2b       	or	r24, r25
    3906:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <weak_mods>
    390a:	08 95       	ret

0000390c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    390c:	80 95       	com	r24
    390e:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <weak_mods>
    3912:	98 23       	and	r25, r24
    3914:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <weak_mods>
    3918:	08 95       	ret

0000391a <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    391a:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <weak_mods>
    391e:	08 95       	ret

00003920 <set_oneshot_mods>:
    oneshot_mods = mods;
    3920:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <oneshot_mods>
}
    3924:	08 95       	ret

00003926 <clear_oneshot_mods>:
    oneshot_mods = 0;
    3926:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <oneshot_mods>
}
    392a:	08 95       	ret

0000392c <has_anykey>:
        if (keyboard_report->raw[i])
    392c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    3930:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    3934:	f9 01       	movw	r30, r18
    3936:	31 96       	adiw	r30, 0x01	; 1
    3938:	20 5e       	subi	r18, 0xE0	; 224
    393a:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    393c:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    393e:	91 91       	ld	r25, Z+
    3940:	91 11       	cpse	r25, r1
            cnt++;
    3942:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3944:	e2 17       	cp	r30, r18
    3946:	f3 07       	cpc	r31, r19
    3948:	d1 f7       	brne	.-12     	; 0x393e <has_anykey+0x12>
}
    394a:	08 95       	ret

0000394c <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    394c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3950:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3954:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <real_mods>
    3958:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    395a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    395e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3962:	80 81       	ld	r24, Z
    3964:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <weak_mods>
    3968:	89 2b       	or	r24, r25
    396a:	80 83       	st	Z, r24
    if (oneshot_mods) {
    396c:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <oneshot_mods>
    3970:	99 23       	and	r25, r25
    3972:	61 f0       	breq	.+24     	; 0x398c <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    3974:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3978:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    397c:	80 81       	ld	r24, Z
    397e:	89 2b       	or	r24, r25
    3980:	80 83       	st	Z, r24
        if (has_anykey()) {
    3982:	0e 94 96 1c 	call	0x392c	; 0x392c <has_anykey>
    3986:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    3988:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    398c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <keyboard_report>
    3990:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <keyboard_report+0x1>
    3994:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <host_keyboard_send>

00003998 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3998:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__bss_start+0x1>
    399c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__bss_start>
}
    39a0:	08 95       	ret

000039a2 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    39a2:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	9c 01       	movw	r18, r24
    39a8:	22 0f       	add	r18, r18
    39aa:	33 1f       	adc	r19, r19
    39ac:	22 0f       	add	r18, r18
    39ae:	33 1f       	adc	r19, r19
    39b0:	2c 7c       	andi	r18, 0xCC	; 204
    39b2:	95 95       	asr	r25
    39b4:	87 95       	ror	r24
    39b6:	95 95       	asr	r25
    39b8:	87 95       	ror	r24
    39ba:	83 73       	andi	r24, 0x33	; 51
    39bc:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	c9 01       	movw	r24, r18
    39c2:	88 0f       	add	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	8a 7a       	andi	r24, 0xAA	; 170
    39c8:	35 95       	asr	r19
    39ca:	27 95       	ror	r18
    39cc:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    39ce:	82 2b       	or	r24, r18
    39d0:	08 95       	ret

000039d2 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    39d2:	08 95       	ret

000039d4 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    39d4:	cf 93       	push	r28
    39d6:	df 93       	push	r29
    39d8:	00 d0       	rcall	.+0      	; 0x39da <hook_matrix_change+0x6>
    39da:	00 d0       	rcall	.+0      	; 0x39dc <hook_matrix_change+0x8>
    39dc:	0f 92       	push	r0
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	df 91       	pop	r29
    39ee:	cf 91       	pop	r28
    39f0:	08 95       	ret

000039f2 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    39f2:	08 95       	ret

000039f4 <hook_layer_change>:
    39f4:	08 95       	ret

000039f6 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    39f6:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <keyboard_set_leds>

000039fa <hook_bootmagic>:
    39fa:	08 95       	ret

000039fc <hook_process_action>:
void hook_bootmagic(void) {}

__attribute__((weak))
bool hook_process_action(keyrecord_t *record) {
    return false;
}
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	08 95       	ret

00003a00 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3a00:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <USB_DeviceState>
    3a04:	84 30       	cpi	r24, 0x04	; 4
    3a06:	21 f1       	breq	.+72     	; 0x3a50 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3a08:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3a0c:	88 e1       	ldi	r24, 0x18	; 24
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	20 e4       	ldi	r18, 0x40	; 64
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	a8 95       	wdr
    3a18:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a1c:	0f be       	out	0x3f, r0	; 63
    3a1e:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3a22:	83 b7       	in	r24, 0x33	; 51
    3a24:	81 7f       	andi	r24, 0xF1	; 241
    3a26:	84 60       	ori	r24, 0x04	; 4
    3a28:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a2a:	83 b7       	in	r24, 0x33	; 51
    3a2c:	81 60       	ori	r24, 0x01	; 1
    3a2e:	83 bf       	out	0x33, r24	; 51
    sei();
    3a30:	78 94       	sei
    sleep_cpu();
    3a32:	88 95       	sleep
    sleep_disable();
    3a34:	83 b7       	in	r24, 0x33	; 51
    3a36:	8e 7f       	andi	r24, 0xFE	; 254
    3a38:	83 bf       	out	0x33, r24	; 51
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	a8 95       	wdr
    3a40:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a44:	88 61       	ori	r24, 0x18	; 24
    3a46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a4a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a4e:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    3a50:	08 95       	ret

00003a52 <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    3a52:	cf 93       	push	r28
    matrix_power_up();
    3a54:	0e 94 ba 11 	call	0x2374	; 0x2374 <matrix_power_up>
    matrix_scan();
    3a58:	0e 94 ef 06 	call	0xdde	; 0xdde <matrix_scan>
    matrix_power_down();
    3a5c:	0e 94 bb 11 	call	0x2376	; 0x2376 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a60:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3a62:	8c 2f       	mov	r24, r28
    3a64:	0e 94 3c 07 	call	0xe78	; 0xe78 <matrix_get_row>
    3a68:	81 11       	cpse	r24, r1
    3a6a:	05 c0       	rjmp	.+10     	; 0x3a76 <suspend_wakeup_condition+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a6c:	cf 5f       	subi	r28, 0xFF	; 255
    3a6e:	c0 31       	cpi	r28, 0x10	; 16
    3a70:	c1 f7       	brne	.-16     	; 0x3a62 <suspend_wakeup_condition+0x10>
    }
    return false;
}
    3a72:	cf 91       	pop	r28
    3a74:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	fc cf       	rjmp	.-8      	; 0x3a72 <suspend_wakeup_condition+0x20>

00003a7a <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3a7a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <matrix_clear>
    clear_keyboard();
    3a7e:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <clear_keyboard>

00003a82 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3a82:	1f 92       	push	r1
    3a84:	1f b6       	in	r1, 0x3f	; 63
    3a86:	1f 92       	push	r1
    3a88:	11 24       	eor	r1, r1
    3a8a:	8f 93       	push	r24
    3a8c:	9f 93       	push	r25
    3a8e:	af 93       	push	r26
    3a90:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3a92:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <wdt_timeout>
    3a96:	81 11       	cpse	r24, r1
    3a98:	13 c0       	rjmp	.+38     	; 0x3ac0 <__vector_12+0x3e>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3a9a:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <timer_count>
    3a9e:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <timer_count+0x1>
    3aa2:	a0 91 7e 03 	lds	r26, 0x037E	; 0x80037e <timer_count+0x2>
    3aa6:	b0 91 7f 03 	lds	r27, 0x037F	; 0x80037f <timer_count+0x3>
    3aaa:	41 96       	adiw	r24, 0x11	; 17
    3aac:	a1 1d       	adc	r26, r1
    3aae:	b1 1d       	adc	r27, r1
    3ab0:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <timer_count>
    3ab4:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <timer_count+0x1>
    3ab8:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <timer_count+0x2>
    3abc:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3ac0:	bf 91       	pop	r27
    3ac2:	af 91       	pop	r26
    3ac4:	9f 91       	pop	r25
    3ac6:	8f 91       	pop	r24
    3ac8:	1f 90       	pop	r1
    3aca:	1f be       	out	0x3f, r1	; 63
    3acc:	1f 90       	pop	r1
    3ace:	18 95       	reti

00003ad0 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3ad0:	82 e0       	ldi	r24, 0x02	; 2
    3ad2:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3ad4:	93 e0       	ldi	r25, 0x03	; 3
    3ad6:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3ad8:	9a ef       	ldi	r25, 0xFA	; 250
    3ada:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    3adc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
#else
    TIMSK = (1<<OCIE0A);
#endif
}
    3ae0:	08 95       	ret

00003ae2 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3ae2:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3ae4:	f8 94       	cli
    t = timer_count;
    3ae6:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <timer_count>
    3aea:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <timer_count+0x1>
    3aee:	a0 91 7e 03 	lds	r26, 0x037E	; 0x80037e <timer_count+0x2>
    3af2:	b0 91 7f 03 	lds	r27, 0x037F	; 0x80037f <timer_count+0x3>
    SREG = sreg;
    3af6:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3af8:	08 95       	ret

00003afa <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3afa:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3afc:	f8 94       	cli
    t = timer_count;
    3afe:	60 91 7c 03 	lds	r22, 0x037C	; 0x80037c <timer_count>
    3b02:	70 91 7d 03 	lds	r23, 0x037D	; 0x80037d <timer_count+0x1>
    3b06:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <timer_count+0x2>
    3b0a:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <timer_count+0x3>
    SREG = sreg;
    3b0e:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3b10:	08 95       	ret

00003b12 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3b12:	cf 92       	push	r12
    3b14:	df 92       	push	r13
    3b16:	ef 92       	push	r14
    3b18:	ff 92       	push	r15
    3b1a:	0f 93       	push	r16
    3b1c:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3b1e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b20:	f8 94       	cli
    t = timer_count;
    3b22:	40 91 7c 03 	lds	r20, 0x037C	; 0x80037c <timer_count>
    3b26:	50 91 7d 03 	lds	r21, 0x037D	; 0x80037d <timer_count+0x1>
    3b2a:	60 91 7e 03 	lds	r22, 0x037E	; 0x80037e <timer_count+0x2>
    3b2e:	70 91 7f 03 	lds	r23, 0x037F	; 0x80037f <timer_count+0x3>
    SREG = sreg;
    3b32:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b34:	6a 01       	movw	r12, r20
    3b36:	7b 01       	movw	r14, r22
    3b38:	ee 24       	eor	r14, r14
    3b3a:	ff 24       	eor	r15, r15
    3b3c:	8c 01       	movw	r16, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	c0 16       	cp	r12, r16
    3b44:	d1 06       	cpc	r13, r17
    3b46:	e2 06       	cpc	r14, r18
    3b48:	f3 06       	cpc	r15, r19
    3b4a:	50 f0       	brcs	.+20     	; 0x3b60 <timer_elapsed+0x4e>
    3b4c:	48 1b       	sub	r20, r24
    3b4e:	59 0b       	sbc	r21, r25
}
    3b50:	ca 01       	movw	r24, r20
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	ff 90       	pop	r15
    3b58:	ef 90       	pop	r14
    3b5a:	df 90       	pop	r13
    3b5c:	cf 90       	pop	r12
    3b5e:	08 95       	ret
    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b60:	41 50       	subi	r20, 0x01	; 1
    3b62:	51 09       	sbc	r21, r1
    3b64:	f3 cf       	rjmp	.-26     	; 0x3b4c <timer_elapsed+0x3a>

00003b66 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3b66:	1f 92       	push	r1
    3b68:	1f b6       	in	r1, 0x3f	; 63
    3b6a:	1f 92       	push	r1
    3b6c:	11 24       	eor	r1, r1
    3b6e:	8f 93       	push	r24
    3b70:	9f 93       	push	r25
    3b72:	af 93       	push	r26
    3b74:	bf 93       	push	r27
    timer_count++;
    3b76:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <timer_count>
    3b7a:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <timer_count+0x1>
    3b7e:	a0 91 7e 03 	lds	r26, 0x037E	; 0x80037e <timer_count+0x2>
    3b82:	b0 91 7f 03 	lds	r27, 0x037F	; 0x80037f <timer_count+0x3>
    3b86:	01 96       	adiw	r24, 0x01	; 1
    3b88:	a1 1d       	adc	r26, r1
    3b8a:	b1 1d       	adc	r27, r1
    3b8c:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <timer_count>
    3b90:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <timer_count+0x1>
    3b94:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <timer_count+0x2>
    3b98:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <timer_count+0x3>
}
    3b9c:	bf 91       	pop	r27
    3b9e:	af 91       	pop	r26
    3ba0:	9f 91       	pop	r25
    3ba2:	8f 91       	pop	r24
    3ba4:	1f 90       	pop	r1
    3ba6:	1f be       	out	0x3f, r1	; 63
    3ba8:	1f 90       	pop	r1
    3baa:	18 95       	reti

00003bac <bootloader_jump>:
    USB_Disable();
    3bac:	0e 94 65 0e 	call	0x1cca	; 0x1cca <USB_Disable>
    cli();
    3bb0:	f8 94       	cli
    *(volatile uint16_t *)0x0800 = 0x7777;
    3bb2:	87 e7       	ldi	r24, 0x77	; 119
    3bb4:	97 e7       	ldi	r25, 0x77	; 119
    3bb6:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x464>
    3bba:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x463>
    reset_key = BOOTLOADER_RESET_KEY;
    3bbe:	87 e0       	ldi	r24, 0x07	; 7
    3bc0:	90 eb       	ldi	r25, 0xB0	; 176
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <reset_key>
    3bc8:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <reset_key+0x1>
    3bcc:	a0 93 9b 03 	sts	0x039B, r26	; 0x80039b <reset_key+0x2>
    3bd0:	b0 93 9c 03 	sts	0x039C, r27	; 0x80039c <reset_key+0x3>
		__asm__ __volatile__ (
    3bd4:	88 e1       	ldi	r24, 0x18	; 24
    3bd6:	9c e0       	ldi	r25, 0x0C	; 12
    3bd8:	0f b6       	in	r0, 0x3f	; 63
    3bda:	f8 94       	cli
    3bdc:	a8 95       	wdr
    3bde:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3be2:	0f be       	out	0x3f, r0	; 63
    3be4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    for (;;);
    3be8:	ff cf       	rjmp	.-2      	; 0x3be8 <bootloader_jump+0x3c>

00003bea <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3bea:	8d 3b       	cpi	r24, 0xBD	; 189
    3bec:	60 f4       	brcc	.+24     	; 0x3c06 <keycode_to_action+0x1c>
    3bee:	88 3a       	cpi	r24, 0xA8	; 168
    3bf0:	28 f5       	brcc	.+74     	; 0x3c3c <keycode_to_action+0x52>
    3bf2:	85 3a       	cpi	r24, 0xA5	; 165
    3bf4:	c0 f4       	brcc	.+48     	; 0x3c26 <keycode_to_action+0x3c>
    3bf6:	84 30       	cpi	r24, 0x04	; 4
    3bf8:	a0 f4       	brcc	.+40     	; 0x3c22 <keycode_to_action+0x38>
    3bfa:	81 30       	cpi	r24, 0x01	; 1
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <keycode_to_action+0x16>
    3bfe:	76 c0       	rjmp	.+236    	; 0x3cec <keycode_to_action+0x102>
            break;
        case KC_BOOTLOADER:
            return (action_t)ACTION_COMMAND(COMMAND_BOOTLOADER, 0);
            break;
        default:
            return (action_t)ACTION_NO;
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3c04:	08 95       	ret
    switch (keycode) {
    3c06:	88 3e       	cpi	r24, 0xE8	; 232
    3c08:	38 f4       	brcc	.+14     	; 0x3c18 <keycode_to_action+0x2e>
    3c0a:	80 3e       	cpi	r24, 0xE0	; 224
    3c0c:	50 f4       	brcc	.+20     	; 0x3c22 <keycode_to_action+0x38>
    3c0e:	8f 3b       	cpi	r24, 0xBF	; 191
    3c10:	b9 f7       	brne	.-18     	; 0x3c00 <keycode_to_action+0x16>
            return (action_t)ACTION_COMMAND(COMMAND_BOOTLOADER, 0);
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 ee       	ldi	r25, 0xE0	; 224
    3c16:	08 95       	ret
    switch (keycode) {
    3c18:	80 3f       	cpi	r24, 0xF0	; 240
    3c1a:	90 f3       	brcs	.-28     	; 0x3c00 <keycode_to_action+0x16>
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
            return (action_t)ACTION_MOUSEKEY(keycode);
    3c1e:	90 65       	ori	r25, 0x50	; 80
    3c20:	08 95       	ret
            return (action_t)ACTION_KEY(keycode);
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	08 95       	ret
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c26:	31 e8       	ldi	r19, 0x81	; 129
    3c28:	85 3a       	cpi	r24, 0xA5	; 165
    3c2a:	21 f0       	breq	.+8      	; 0x3c34 <keycode_to_action+0x4a>
    3c2c:	33 e8       	ldi	r19, 0x83	; 131
    3c2e:	86 3a       	cpi	r24, 0xA6	; 166
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <keycode_to_action+0x4a>
    3c32:	32 e8       	ldi	r19, 0x82	; 130
    3c34:	20 e4       	ldi	r18, 0x40	; 64
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c36:	83 2f       	mov	r24, r19
    3c38:	92 2f       	mov	r25, r18
    3c3a:	08 95       	ret
    3c3c:	88 3a       	cpi	r24, 0xA8	; 168
    3c3e:	59 f1       	breq	.+86     	; 0x3c96 <keycode_to_action+0xac>
    3c40:	89 3a       	cpi	r24, 0xA9	; 169
    3c42:	61 f1       	breq	.+88     	; 0x3c9c <keycode_to_action+0xb2>
    3c44:	8a 3a       	cpi	r24, 0xAA	; 170
    3c46:	61 f1       	breq	.+88     	; 0x3ca0 <keycode_to_action+0xb6>
    3c48:	8b 3a       	cpi	r24, 0xAB	; 171
    3c4a:	61 f1       	breq	.+88     	; 0x3ca4 <keycode_to_action+0xba>
    3c4c:	8c 3a       	cpi	r24, 0xAC	; 172
    3c4e:	61 f1       	breq	.+88     	; 0x3ca8 <keycode_to_action+0xbe>
    3c50:	8d 3a       	cpi	r24, 0xAD	; 173
    3c52:	61 f1       	breq	.+88     	; 0x3cac <keycode_to_action+0xc2>
    3c54:	8e 3a       	cpi	r24, 0xAE	; 174
    3c56:	61 f1       	breq	.+88     	; 0x3cb0 <keycode_to_action+0xc6>
    3c58:	8f 3a       	cpi	r24, 0xAF	; 175
    3c5a:	61 f1       	breq	.+88     	; 0x3cb4 <keycode_to_action+0xca>
    3c5c:	81 3b       	cpi	r24, 0xB1	; 177
    3c5e:	61 f1       	breq	.+88     	; 0x3cb8 <keycode_to_action+0xce>
    3c60:	80 3b       	cpi	r24, 0xB0	; 176
    3c62:	61 f1       	breq	.+88     	; 0x3cbc <keycode_to_action+0xd2>
    3c64:	82 3b       	cpi	r24, 0xB2	; 178
    3c66:	61 f1       	breq	.+88     	; 0x3cc0 <keycode_to_action+0xd6>
    3c68:	83 3b       	cpi	r24, 0xB3	; 179
    3c6a:	69 f1       	breq	.+90     	; 0x3cc6 <keycode_to_action+0xdc>
    3c6c:	84 3b       	cpi	r24, 0xB4	; 180
    3c6e:	69 f1       	breq	.+90     	; 0x3cca <keycode_to_action+0xe0>
    3c70:	85 3b       	cpi	r24, 0xB5	; 181
    3c72:	69 f1       	breq	.+90     	; 0x3cce <keycode_to_action+0xe4>
    3c74:	86 3b       	cpi	r24, 0xB6	; 182
    3c76:	69 f1       	breq	.+90     	; 0x3cd2 <keycode_to_action+0xe8>
    3c78:	87 3b       	cpi	r24, 0xB7	; 183
    3c7a:	71 f1       	breq	.+92     	; 0x3cd8 <keycode_to_action+0xee>
    3c7c:	88 3b       	cpi	r24, 0xB8	; 184
    3c7e:	71 f1       	breq	.+92     	; 0x3cdc <keycode_to_action+0xf2>
    3c80:	89 3b       	cpi	r24, 0xB9	; 185
    3c82:	71 f1       	breq	.+92     	; 0x3ce0 <keycode_to_action+0xf6>
    3c84:	8a 3b       	cpi	r24, 0xBA	; 186
    3c86:	71 f1       	breq	.+92     	; 0x3ce4 <keycode_to_action+0xfa>
    3c88:	8b 3b       	cpi	r24, 0xBB	; 187
    3c8a:	71 f1       	breq	.+92     	; 0x3ce8 <keycode_to_action+0xfe>
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	8c 3b       	cpi	r24, 0xBC	; 188
    3c90:	19 f4       	brne	.+6      	; 0x3c98 <keycode_to_action+0xae>
    3c92:	3a e2       	ldi	r19, 0x2A	; 42
    3c94:	1f c0       	rjmp	.+62     	; 0x3cd4 <keycode_to_action+0xea>
    3c96:	32 ee       	ldi	r19, 0xE2	; 226
    3c98:	24 e4       	ldi	r18, 0x44	; 68
    3c9a:	cd cf       	rjmp	.-102    	; 0x3c36 <keycode_to_action+0x4c>
    3c9c:	39 ee       	ldi	r19, 0xE9	; 233
    3c9e:	fc cf       	rjmp	.-8      	; 0x3c98 <keycode_to_action+0xae>
    3ca0:	3a ee       	ldi	r19, 0xEA	; 234
    3ca2:	fa cf       	rjmp	.-12     	; 0x3c98 <keycode_to_action+0xae>
    3ca4:	35 eb       	ldi	r19, 0xB5	; 181
    3ca6:	f8 cf       	rjmp	.-16     	; 0x3c98 <keycode_to_action+0xae>
    3ca8:	36 eb       	ldi	r19, 0xB6	; 182
    3caa:	f6 cf       	rjmp	.-20     	; 0x3c98 <keycode_to_action+0xae>
    3cac:	33 eb       	ldi	r19, 0xB3	; 179
    3cae:	f4 cf       	rjmp	.-24     	; 0x3c98 <keycode_to_action+0xae>
    3cb0:	34 eb       	ldi	r19, 0xB4	; 180
    3cb2:	f2 cf       	rjmp	.-28     	; 0x3c98 <keycode_to_action+0xae>
    3cb4:	37 eb       	ldi	r19, 0xB7	; 183
    3cb6:	f0 cf       	rjmp	.-32     	; 0x3c98 <keycode_to_action+0xae>
    3cb8:	3c ec       	ldi	r19, 0xCC	; 204
    3cba:	ee cf       	rjmp	.-36     	; 0x3c98 <keycode_to_action+0xae>
    3cbc:	3d ec       	ldi	r19, 0xCD	; 205
    3cbe:	ec cf       	rjmp	.-40     	; 0x3c98 <keycode_to_action+0xae>
    3cc0:	33 e8       	ldi	r19, 0x83	; 131
    3cc2:	25 e4       	ldi	r18, 0x45	; 69
    3cc4:	b8 cf       	rjmp	.-144    	; 0x3c36 <keycode_to_action+0x4c>
    3cc6:	3a e8       	ldi	r19, 0x8A	; 138
    3cc8:	fc cf       	rjmp	.-8      	; 0x3cc2 <keycode_to_action+0xd8>
    3cca:	32 e9       	ldi	r19, 0x92	; 146
    3ccc:	fa cf       	rjmp	.-12     	; 0x3cc2 <keycode_to_action+0xd8>
    3cce:	34 e9       	ldi	r19, 0x94	; 148
    3cd0:	f8 cf       	rjmp	.-16     	; 0x3cc2 <keycode_to_action+0xd8>
    3cd2:	31 e2       	ldi	r19, 0x21	; 33
    3cd4:	26 e4       	ldi	r18, 0x46	; 70
    3cd6:	af cf       	rjmp	.-162    	; 0x3c36 <keycode_to_action+0x4c>
    3cd8:	33 e2       	ldi	r19, 0x23	; 35
    3cda:	fc cf       	rjmp	.-8      	; 0x3cd4 <keycode_to_action+0xea>
    3cdc:	34 e2       	ldi	r19, 0x24	; 36
    3cde:	fa cf       	rjmp	.-12     	; 0x3cd4 <keycode_to_action+0xea>
    3ce0:	35 e2       	ldi	r19, 0x25	; 37
    3ce2:	f8 cf       	rjmp	.-16     	; 0x3cd4 <keycode_to_action+0xea>
    3ce4:	36 e2       	ldi	r19, 0x26	; 38
    3ce6:	f6 cf       	rjmp	.-20     	; 0x3cd4 <keycode_to_action+0xea>
    3ce8:	37 e2       	ldi	r19, 0x27	; 39
    3cea:	f4 cf       	rjmp	.-24     	; 0x3cd4 <keycode_to_action+0xea>
            return (action_t)ACTION_TRANSPARENT;
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	08 95       	ret

00003cf2 <action_get_macro>:
}
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	08 95       	ret

00003cf8 <action_function>:
}
    3cf8:	08 95       	ret

00003cfa <keymap_get_keycode>:
extern const uint8_t fn_keycode[];

__attribute__ ((weak))
uint8_t keymap_get_keycode(uint8_t layer, uint8_t row, uint8_t col)
{
    return pgm_read_byte(&keymaps[(layer)][(row)][(col)]);
    3cfa:	20 e1       	ldi	r18, 0x10	; 16
    3cfc:	82 9f       	mul	r24, r18
    3cfe:	c0 01       	movw	r24, r0
    3d00:	11 24       	eor	r1, r1
    3d02:	fc 01       	movw	r30, r24
    3d04:	e6 0f       	add	r30, r22
    3d06:	f1 1d       	adc	r31, r1
    3d08:	83 e0       	ldi	r24, 0x03	; 3
    3d0a:	ee 0f       	add	r30, r30
    3d0c:	ff 1f       	adc	r31, r31
    3d0e:	8a 95       	dec	r24
    3d10:	e1 f7       	brne	.-8      	; 0x3d0a <keymap_get_keycode+0x10>
    3d12:	e4 0f       	add	r30, r20
    3d14:	f1 1d       	adc	r31, r1
    3d16:	e4 55       	subi	r30, 0x54	; 84
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	84 91       	lpm	r24, Z
}
    3d1c:	08 95       	ret

00003d1e <keymap_fn_layer>:

__attribute__ ((weak))
uint8_t keymap_fn_layer(uint8_t index)
{
    return pgm_read_byte(&fn_layer[index]);
    3d1e:	e8 2f       	mov	r30, r24
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	ec 5c       	subi	r30, 0xCC	; 204
    3d24:	fe 4f       	sbci	r31, 0xFE	; 254
    3d26:	84 91       	lpm	r24, Z
}
    3d28:	08 95       	ret

00003d2a <keymap_fn_keycode>:

__attribute__ ((weak))
uint8_t keymap_fn_keycode(uint8_t index)
{
    return pgm_read_byte(&fn_keycode[index]);
    3d2a:	e8 2f       	mov	r30, r24
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	e4 5d       	subi	r30, 0xD4	; 212
    3d30:	fe 4f       	sbci	r31, 0xFE	; 254
    3d32:	84 91       	lpm	r24, Z
}
    3d34:	08 95       	ret

00003d36 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    3d36:	46 2f       	mov	r20, r22
    return keymap_get_keycode(layer, key.row, key.col);
    3d38:	67 2f       	mov	r22, r23
    3d3a:	0c 94 7d 1e 	jmp	0x3cfa	; 0x3cfa <keymap_get_keycode>

00003d3e <keymap_fn_to_action>:


/* Legacy keymap support */
__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    switch (keycode) {
    3d42:	48 2f       	mov	r20, r24
    3d44:	40 5c       	subi	r20, 0xC0	; 192
    3d46:	55 0b       	sbc	r21, r21
    3d48:	40 32       	cpi	r20, 0x20	; 32
    3d4a:	51 05       	cpc	r21, r1
    3d4c:	b0 f4       	brcc	.+44     	; 0x3d7a <keymap_fn_to_action+0x3c>
        case KC_FN0 ... KC_FN31:
            {
                uint8_t layer = keymap_fn_layer(FN_INDEX(keycode));
    3d4e:	d0 e4       	ldi	r29, 0x40	; 64
    3d50:	d8 0f       	add	r29, r24
    3d52:	8d 2f       	mov	r24, r29
    3d54:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <keymap_fn_layer>
    3d58:	c8 2f       	mov	r28, r24
                uint8_t key = keymap_fn_keycode(FN_INDEX(keycode));
    3d5a:	8d 2f       	mov	r24, r29
    3d5c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <keymap_fn_keycode>
                if (key) {
    3d60:	d0 e0       	ldi	r29, 0x00	; 0
    3d62:	88 23       	and	r24, r24
    3d64:	29 f0       	breq	.+10     	; 0x3d70 <keymap_fn_to_action+0x32>
                    return (action_t)ACTION_LAYER_TAP_KEY(layer, key);
    3d66:	9c 2f       	mov	r25, r28
    3d68:	90 6a       	ori	r25, 0xA0	; 160
            }
            return (action_t)ACTION_NO;
        default:
            return (action_t)ACTION_NO;
    }
}
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	08 95       	ret
                    return (action_t)ACTION_LAYER_MOMENTARY(layer);
    3d70:	9c 2f       	mov	r25, r28
    3d72:	88 27       	eor	r24, r24
    3d74:	81 6f       	ori	r24, 0xF1	; 241
    3d76:	90 6a       	ori	r25, 0xA0	; 160
    3d78:	f8 cf       	rjmp	.-16     	; 0x3d6a <keymap_fn_to_action+0x2c>
            return (action_t)ACTION_NO;
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	f5 cf       	rjmp	.-22     	; 0x3d6a <keymap_fn_to_action+0x2c>

00003d80 <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d80:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <keymap_key_to_keycode>
    switch (keycode) {
    3d84:	80 3e       	cpi	r24, 0xE0	; 224
    3d86:	d0 f4       	brcc	.+52     	; 0x3dbc <action_for_key+0x3c>
    3d88:	80 3c       	cpi	r24, 0xC0	; 192
    3d8a:	88 f5       	brcc	.+98     	; 0x3dee <action_for_key+0x6e>
    3d8c:	81 33       	cpi	r24, 0x31	; 49
    3d8e:	09 f4       	brne	.+2      	; 0x3d92 <action_for_key+0x12>
    3d90:	52 c0       	rjmp	.+164    	; 0x3e36 <action_for_key+0xb6>
    3d92:	40 f4       	brcc	.+16     	; 0x3da4 <action_for_key+0x24>
    3d94:	89 32       	cpi	r24, 0x29	; 41
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <action_for_key+0x1a>
    3d98:	48 c0       	rjmp	.+144    	; 0x3e2a <action_for_key+0xaa>
    3d9a:	8a 32       	cpi	r24, 0x2A	; 42
    3d9c:	09 f4       	brne	.+2      	; 0x3da0 <action_for_key+0x20>
    3d9e:	51 c0       	rjmp	.+162    	; 0x3e42 <action_for_key+0xc2>
            return keycode_to_action(keycode);
    3da0:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <keycode_to_action>
    switch (keycode) {
    3da4:	89 33       	cpi	r24, 0x39	; 57
    3da6:	29 f1       	breq	.+74     	; 0x3df2 <action_for_key+0x72>
    3da8:	82 38       	cpi	r24, 0x82	; 130
    3daa:	19 f1       	breq	.+70     	; 0x3df2 <action_for_key+0x72>
    3dac:	85 33       	cpi	r24, 0x35	; 53
    3dae:	c1 f7       	brne	.-16     	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3db0:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3db4:	85 ff       	sbrs	r24, 5
    3db6:	3d c0       	rjmp	.+122    	; 0x3e32 <action_for_key+0xb2>
                return keycode_to_action(KC_ESC);
    3db8:	89 e2       	ldi	r24, 0x29	; 41
    3dba:	f2 cf       	rjmp	.-28     	; 0x3da0 <action_for_key+0x20>
    switch (keycode) {
    3dbc:	83 3e       	cpi	r24, 0xE3	; 227
    3dbe:	39 f1       	breq	.+78     	; 0x3e0e <action_for_key+0x8e>
    3dc0:	60 f4       	brcc	.+24     	; 0x3dda <action_for_key+0x5a>
    3dc2:	80 3e       	cpi	r24, 0xE0	; 224
    3dc4:	e1 f0       	breq	.+56     	; 0x3dfe <action_for_key+0x7e>
    3dc6:	82 3e       	cpi	r24, 0xE2	; 226
    3dc8:	59 f7       	brne	.-42     	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3dca:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3dce:	82 ff       	sbrs	r24, 2
    3dd0:	22 c0       	rjmp	.+68     	; 0x3e16 <action_for_key+0x96>
                if (keymap_config.no_gui) {
    3dd2:	84 ff       	sbrs	r24, 4
    3dd4:	1a c0       	rjmp	.+52     	; 0x3e0a <action_for_key+0x8a>
                    return keycode_to_action(KC_NO);
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	e3 cf       	rjmp	.-58     	; 0x3da0 <action_for_key+0x20>
    switch (keycode) {
    3dda:	86 3e       	cpi	r24, 0xE6	; 230
    3ddc:	f1 f0       	breq	.+60     	; 0x3e1a <action_for_key+0x9a>
    3dde:	87 3e       	cpi	r24, 0xE7	; 231
    3de0:	f9 f6       	brne	.-66     	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3de2:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3de6:	83 ff       	sbrs	r24, 3
    3de8:	1c c0       	rjmp	.+56     	; 0x3e22 <action_for_key+0xa2>
            return keycode_to_action(KC_RALT);
    3dea:	86 ee       	ldi	r24, 0xE6	; 230
    3dec:	d9 cf       	rjmp	.-78     	; 0x3da0 <action_for_key+0x20>
            return keymap_fn_to_action(keycode);
    3dee:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <keymap_fn_to_action>
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3df2:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    3df6:	93 70       	andi	r25, 0x03	; 3
    3df8:	99 f2       	breq	.-90     	; 0x3da0 <action_for_key+0x20>
                return keycode_to_action(KC_LCTL);
    3dfa:	80 ee       	ldi	r24, 0xE0	; 224
    3dfc:	d1 cf       	rjmp	.-94     	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_control_capslock) {
    3dfe:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3e02:	80 ff       	sbrs	r24, 0
    3e04:	fa cf       	rjmp	.-12     	; 0x3dfa <action_for_key+0x7a>
                return keycode_to_action(KC_CAPSLOCK);
    3e06:	89 e3       	ldi	r24, 0x39	; 57
    3e08:	cb cf       	rjmp	.-106    	; 0x3da0 <action_for_key+0x20>
                return keycode_to_action(KC_LGUI);
    3e0a:	83 ee       	ldi	r24, 0xE3	; 227
    3e0c:	c9 cf       	rjmp	.-110    	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3e0e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3e12:	82 ff       	sbrs	r24, 2
    3e14:	de cf       	rjmp	.-68     	; 0x3dd2 <action_for_key+0x52>
            return keycode_to_action(KC_LALT);
    3e16:	82 ee       	ldi	r24, 0xE2	; 226
    3e18:	c3 cf       	rjmp	.-122    	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3e1a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3e1e:	83 ff       	sbrs	r24, 3
    3e20:	e4 cf       	rjmp	.-56     	; 0x3dea <action_for_key+0x6a>
            if (keymap_config.no_gui) {
    3e22:	84 fd       	sbrc	r24, 4
    3e24:	d8 cf       	rjmp	.-80     	; 0x3dd6 <action_for_key+0x56>
                return keycode_to_action(KC_RGUI);
    3e26:	87 ee       	ldi	r24, 0xE7	; 231
    3e28:	bb cf       	rjmp	.-138    	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3e2a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3e2e:	85 ff       	sbrs	r24, 5
    3e30:	c3 cf       	rjmp	.-122    	; 0x3db8 <action_for_key+0x38>
            return keycode_to_action(KC_GRAVE);
    3e32:	85 e3       	ldi	r24, 0x35	; 53
    3e34:	b5 cf       	rjmp	.-150    	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3e36:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3e3a:	86 ff       	sbrs	r24, 6
    3e3c:	06 c0       	rjmp	.+12     	; 0x3e4a <action_for_key+0xca>
                return keycode_to_action(KC_BSPACE);
    3e3e:	8a e2       	ldi	r24, 0x2A	; 42
    3e40:	af cf       	rjmp	.-162    	; 0x3da0 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3e42:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    3e46:	86 ff       	sbrs	r24, 6
    3e48:	fa cf       	rjmp	.-12     	; 0x3e3e <action_for_key+0xbe>
            return keycode_to_action(KC_BSLASH);
    3e4a:	81 e3       	ldi	r24, 0x31	; 49
    3e4c:	a9 cf       	rjmp	.-174    	; 0x3da0 <action_for_key+0x20>

00003e4e <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3e4e:	cf 92       	push	r12
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	cf 93       	push	r28
    3e5c:	6c 01       	movw	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e5e:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3e60:	8c 2f       	mov	r24, r28
    3e62:	0e 94 3c 07 	call	0xe78	; 0xe78 <matrix_get_row>
    3e66:	10 e0       	ldi	r17, 0x00	; 0
    3e68:	00 e0       	ldi	r16, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e6a:	e8 2e       	mov	r14, r24
    3e6c:	f1 2c       	mov	r15, r1
    3e6e:	c7 01       	movw	r24, r14
    3e70:	00 2e       	mov	r0, r16
    3e72:	02 c0       	rjmp	.+4      	; 0x3e78 <scan_key+0x2a>
    3e74:	95 95       	asr	r25
    3e76:	87 95       	ror	r24
    3e78:	0a 94       	dec	r0
    3e7a:	e2 f7       	brpl	.-8      	; 0x3e74 <scan_key+0x26>
    3e7c:	80 ff       	sbrs	r24, 0
    3e7e:	1b c0       	rjmp	.+54     	; 0x3eb6 <scan_key+0x68>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3e80:	60 2f       	mov	r22, r16
    3e82:	7c 2f       	mov	r23, r28
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <action_for_key>
                if (action.code == code ||
    3e8a:	8c 15       	cp	r24, r12
    3e8c:	9d 05       	cpc	r25, r13
    3e8e:	51 f0       	breq	.+20     	; 0x3ea4 <scan_key+0x56>
    3e90:	29 2f       	mov	r18, r25
    3e92:	20 7e       	andi	r18, 0xE0	; 224
    3e94:	39 2f       	mov	r19, r25
    3e96:	30 7c       	andi	r19, 0xC0	; 192
    3e98:	11 f0       	breq	.+4      	; 0x3e9e <scan_key+0x50>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3e9a:	20 3a       	cpi	r18, 0xA0	; 160
    3e9c:	61 f4       	brne	.+24     	; 0x3eb6 <scan_key+0x68>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3e9e:	8c 15       	cp	r24, r12
    3ea0:	1d 04       	cpc	r1, r13
    3ea2:	49 f4       	brne	.+18     	; 0x3eb6 <scan_key+0x68>
                     action.key.code == code)) {
                    return true;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    3ea6:	cf 91       	pop	r28
    3ea8:	1f 91       	pop	r17
    3eaa:	0f 91       	pop	r16
    3eac:	ff 90       	pop	r15
    3eae:	ef 90       	pop	r14
    3eb0:	df 90       	pop	r13
    3eb2:	cf 90       	pop	r12
    3eb4:	08 95       	ret
    3eb6:	0f 5f       	subi	r16, 0xFF	; 255
    3eb8:	1f 4f       	sbci	r17, 0xFF	; 255
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3eba:	08 30       	cpi	r16, 0x08	; 8
    3ebc:	11 05       	cpc	r17, r1
    3ebe:	b9 f6       	brne	.-82     	; 0x3e6e <scan_key+0x20>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ec0:	cf 5f       	subi	r28, 0xFF	; 255
    3ec2:	c0 31       	cpi	r28, 0x10	; 16
    3ec4:	69 f6       	brne	.-102    	; 0x3e60 <scan_key+0x12>
    return false;
    3ec6:	80 e0       	ldi	r24, 0x00	; 0
    3ec8:	ee cf       	rjmp	.-36     	; 0x3ea6 <scan_key+0x58>

00003eca <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3ed0:	8c e2       	ldi	r24, 0x2C	; 44
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <scan_key>
    3ed8:	88 23       	and	r24, r24
    3eda:	29 f0       	breq	.+10     	; 0x3ee6 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3edc:	ce 01       	movw	r24, r28
}
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    return scan_key(code);
    3ee2:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <scan_key>
}
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	df 91       	pop	r29
    3eea:	cf 91       	pop	r28
    3eec:	08 95       	ret

00003eee <bootmagic>:
{
    3eee:	cf 93       	push	r28
    if (!eeconfig_is_enabled()) {
    3ef0:	0e 94 c0 20 	call	0x4180	; 0x4180 <eeconfig_is_enabled>
    3ef4:	81 11       	cpse	r24, r1
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <bootmagic+0xe>
        eeconfig_init();
    3ef8:	0e 94 a6 20 	call	0x414c	; 0x414c <eeconfig_init>
    print("bootmagic scan: ... ");
    3efc:	85 e2       	ldi	r24, 0x25	; 37
    3efe:	94 e0       	ldi	r25, 0x04	; 4
    3f00:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    while (scan--) { matrix_scan(); wait_ms(10); }
    3f04:	c5 e6       	ldi	r28, 0x65	; 101
    3f06:	c1 50       	subi	r28, 0x01	; 1
    3f08:	09 f0       	breq	.+2      	; 0x3f0c <bootmagic+0x1e>
    3f0a:	f0 c0       	rjmp	.+480    	; 0x40ec <bootmagic+0x1fe>
    print("done.\n");
    3f0c:	8e e1       	ldi	r24, 0x1E	; 30
    3f0e:	94 e0       	ldi	r25, 0x04	; 4
    3f10:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3f14:	89 e2       	ldi	r24, 0x29	; 41
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3f1c:	81 11       	cpse	r24, r1
    3f1e:	14 c1       	rjmp	.+552    	; 0x4148 <bootmagic+0x25a>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3f20:	8a e2       	ldi	r24, 0x2A	; 42
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3f28:	81 11       	cpse	r24, r1
        eeconfig_init();
    3f2a:	0e 94 a6 20 	call	0x414c	; 0x414c <eeconfig_init>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3f2e:	85 e0       	ldi	r24, 0x05	; 5
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3f36:	81 11       	cpse	r24, r1
        bootloader_jump();
    3f38:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <bootloader_jump>
    hook_bootmagic();
    3f3c:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <hook_bootmagic>
    debug_config.raw = eeconfig_read_debug();
    3f40:	0e 94 cb 20 	call	0x4196	; 0x4196 <eeconfig_read_debug>
    3f44:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3f48:	87 e0       	ldi	r24, 0x07	; 7
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3f50:	88 23       	and	r24, r24
    3f52:	79 f0       	breq	.+30     	; 0x3f72 <bootmagic+0x84>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3f54:	8b e1       	ldi	r24, 0x1B	; 27
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3f5c:	88 23       	and	r24, r24
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <bootmagic+0x74>
    3f60:	ce c0       	rjmp	.+412    	; 0x40fe <bootmagic+0x210>
            debug_config.matrix = !debug_config.matrix;
    3f62:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    3f66:	89 2f       	mov	r24, r25
    3f68:	8d 7f       	andi	r24, 0xFD	; 253
    3f6a:	91 ff       	sbrs	r25, 1
    3f6c:	82 60       	ori	r24, 0x02	; 2
            debug_config.enable = !debug_config.enable;
    3f6e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <debug_config>
    eeconfig_write_debug(debug_config.raw);
    3f72:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    3f76:	0e 94 cf 20 	call	0x419e	; 0x419e <eeconfig_write_debug>
    keymap_config.raw = eeconfig_read_keymap();
    3f7a:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeconfig_read_keymap>
    3f7e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3f82:	80 ee       	ldi	r24, 0xE0	; 224
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3f8a:	88 23       	and	r24, r24
    3f8c:	41 f0       	breq	.+16     	; 0x3f9e <bootmagic+0xb0>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3f8e:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    3f92:	89 2f       	mov	r24, r25
    3f94:	8e 7f       	andi	r24, 0xFE	; 254
    3f96:	90 ff       	sbrs	r25, 0
    3f98:	81 60       	ori	r24, 0x01	; 1
    3f9a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3f9e:	89 e3       	ldi	r24, 0x39	; 57
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3fa6:	88 23       	and	r24, r24
    3fa8:	41 f0       	breq	.+16     	; 0x3fba <bootmagic+0xcc>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3faa:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    3fae:	89 2f       	mov	r24, r25
    3fb0:	8d 7f       	andi	r24, 0xFD	; 253
    3fb2:	91 ff       	sbrs	r25, 1
    3fb4:	82 60       	ori	r24, 0x02	; 2
    3fb6:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3fba:	82 ee       	ldi	r24, 0xE2	; 226
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3fc2:	88 23       	and	r24, r24
    3fc4:	41 f0       	breq	.+16     	; 0x3fd6 <bootmagic+0xe8>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3fc6:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    3fca:	89 2f       	mov	r24, r25
    3fcc:	8b 7f       	andi	r24, 0xFB	; 251
    3fce:	92 ff       	sbrs	r25, 2
    3fd0:	84 60       	ori	r24, 0x04	; 4
    3fd2:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3fd6:	86 ee       	ldi	r24, 0xE6	; 230
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3fde:	88 23       	and	r24, r24
    3fe0:	41 f0       	breq	.+16     	; 0x3ff2 <bootmagic+0x104>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3fe2:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    3fe6:	89 2f       	mov	r24, r25
    3fe8:	87 7f       	andi	r24, 0xF7	; 247
    3fea:	93 ff       	sbrs	r25, 3
    3fec:	88 60       	ori	r24, 0x08	; 8
    3fee:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3ff2:	83 ee       	ldi	r24, 0xE3	; 227
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    3ffa:	88 23       	and	r24, r24
    3ffc:	41 f0       	breq	.+16     	; 0x400e <bootmagic+0x120>
        keymap_config.no_gui = !keymap_config.no_gui;
    3ffe:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    4002:	89 2f       	mov	r24, r25
    4004:	8f 7e       	andi	r24, 0xEF	; 239
    4006:	94 ff       	sbrs	r25, 4
    4008:	80 61       	ori	r24, 0x10	; 16
    400a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    400e:	85 e3       	ldi	r24, 0x35	; 53
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    4016:	88 23       	and	r24, r24
    4018:	41 f0       	breq	.+16     	; 0x402a <bootmagic+0x13c>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    401a:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    401e:	89 2f       	mov	r24, r25
    4020:	8f 7d       	andi	r24, 0xDF	; 223
    4022:	95 ff       	sbrs	r25, 5
    4024:	80 62       	ori	r24, 0x20	; 32
    4026:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    402a:	81 e3       	ldi	r24, 0x31	; 49
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    4032:	88 23       	and	r24, r24
    4034:	41 f0       	breq	.+16     	; 0x4046 <bootmagic+0x158>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4036:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    403a:	89 2f       	mov	r24, r25
    403c:	8f 7b       	andi	r24, 0xBF	; 191
    403e:	96 ff       	sbrs	r25, 6
    4040:	80 64       	ori	r24, 0x40	; 64
    4042:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    4046:	81 e1       	ldi	r24, 0x11	; 17
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    404e:	88 23       	and	r24, r24
    4050:	41 f0       	breq	.+16     	; 0x4062 <bootmagic+0x174>
        keymap_config.nkro = !keymap_config.nkro;
    4052:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <keymap_config>
    4056:	89 2f       	mov	r24, r25
    4058:	97 fb       	bst	r25, 7
    405a:	87 f9       	bld	r24, 7
    405c:	80 58       	subi	r24, 0x80	; 128
    405e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <keymap_config>
    eeconfig_write_keymap(keymap_config.raw);
    4062:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    4066:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
    406a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <keymap_config>
    406e:	87 fb       	bst	r24, 7
    4070:	88 27       	eor	r24, r24
    4072:	80 f9       	bld	r24, 0
    4074:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <keyboard_nkro>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4078:	87 e2       	ldi	r24, 0x27	; 39
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    4080:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4082:	8e e1       	ldi	r24, 0x1E	; 30
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    408a:	81 11       	cpse	r24, r1
    408c:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    408e:	8f e1       	ldi	r24, 0x1F	; 31
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    4096:	81 11       	cpse	r24, r1
    4098:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    409a:	80 e2       	ldi	r24, 0x20	; 32
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    40a2:	81 11       	cpse	r24, r1
    40a4:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    40a6:	81 e2       	ldi	r24, 0x21	; 33
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    40ae:	81 11       	cpse	r24, r1
    40b0:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    40b2:	82 e2       	ldi	r24, 0x22	; 34
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    40ba:	81 11       	cpse	r24, r1
    40bc:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    40be:	83 e2       	ldi	r24, 0x23	; 35
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    40c6:	81 11       	cpse	r24, r1
    40c8:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    40ca:	84 e2       	ldi	r24, 0x24	; 36
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    40d2:	88 23       	and	r24, r24
    40d4:	99 f1       	breq	.+102    	; 0x413c <bootmagic+0x24e>
    40d6:	c0 68       	ori	r28, 0x80	; 128
        eeconfig_write_default_layer(default_layer);
    40d8:	8c 2f       	mov	r24, r28
    40da:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    40de:	6c 2f       	mov	r22, r28
        default_layer_set((uint32_t)default_layer);
    40e0:	70 e0       	ldi	r23, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	80 e0       	ldi	r24, 0x00	; 0
}
    40e6:	cf 91       	pop	r28
        default_layer_set((uint32_t)default_layer);
    40e8:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <default_layer_set>
    while (scan--) { matrix_scan(); wait_ms(10); }
    40ec:	0e 94 ef 06 	call	0xdde	; 0xdde <matrix_scan>
    40f0:	8f e3       	ldi	r24, 0x3F	; 63
    40f2:	9c e9       	ldi	r25, 0x9C	; 156
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	f1 f7       	brne	.-4      	; 0x40f4 <bootmagic+0x206>
    40f8:	00 c0       	rjmp	.+0      	; 0x40fa <bootmagic+0x20c>
    40fa:	00 00       	nop
    40fc:	04 cf       	rjmp	.-504    	; 0x3f06 <bootmagic+0x18>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    40fe:	8e e0       	ldi	r24, 0x0E	; 14
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    4106:	88 23       	and	r24, r24
    4108:	39 f0       	breq	.+14     	; 0x4118 <bootmagic+0x22a>
            debug_config.keyboard = !debug_config.keyboard;
    410a:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    410e:	89 2f       	mov	r24, r25
    4110:	8b 7f       	andi	r24, 0xFB	; 251
    4112:	92 ff       	sbrs	r25, 2
    4114:	84 60       	ori	r24, 0x04	; 4
    4116:	2b cf       	rjmp	.-426    	; 0x3f6e <bootmagic+0x80>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4118:	80 e1       	ldi	r24, 0x10	; 16
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <bootmagic_scan_key>
    4120:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    4124:	88 23       	and	r24, r24
    4126:	29 f0       	breq	.+10     	; 0x4132 <bootmagic+0x244>
            debug_config.mouse = !debug_config.mouse;
    4128:	89 2f       	mov	r24, r25
    412a:	87 7f       	andi	r24, 0xF7	; 247
    412c:	93 ff       	sbrs	r25, 3
    412e:	88 60       	ori	r24, 0x08	; 8
    4130:	1e cf       	rjmp	.-452    	; 0x3f6e <bootmagic+0x80>
            debug_config.enable = !debug_config.enable;
    4132:	89 2f       	mov	r24, r25
    4134:	8e 7f       	andi	r24, 0xFE	; 254
    4136:	90 ff       	sbrs	r25, 0
    4138:	81 60       	ori	r24, 0x01	; 1
    413a:	19 cf       	rjmp	.-462    	; 0x3f6e <bootmagic+0x80>
    if (default_layer) {
    413c:	c1 11       	cpse	r28, r1
    413e:	cc cf       	rjmp	.-104    	; 0x40d8 <bootmagic+0x1ea>
        default_layer = eeconfig_read_default_layer();
    4140:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4144:	68 2f       	mov	r22, r24
    4146:	cc cf       	rjmp	.-104    	; 0x40e0 <bootmagic+0x1f2>
}
    4148:	cf 91       	pop	r28
    414a:	08 95       	ret

0000414c <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    414c:	6d ee       	ldi	r22, 0xED	; 237
    414e:	7e ef       	ldi	r23, 0xFE	; 254
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	0e 94 02 2a 	call	0x5404	; 0x5404 <eeprom_write_word>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	82 e0       	ldi	r24, 0x02	; 2
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	83 e0       	ldi	r24, 0x03	; 3
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	84 e0       	ldi	r24, 0x04	; 4
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4176:	60 e0       	ldi	r22, 0x00	; 0
    4178:	85 e0       	ldi	r24, 0x05	; 5
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <eeprom_write_byte>

00004180 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	0e 94 ee 29 	call	0x53dc	; 0x53dc <eeprom_read_word>
    4188:	21 e0       	ldi	r18, 0x01	; 1
    418a:	8d 3e       	cpi	r24, 0xED	; 237
    418c:	9e 4f       	sbci	r25, 0xFE	; 254
    418e:	09 f0       	breq	.+2      	; 0x4192 <eeconfig_is_enabled+0x12>
    4190:	20 e0       	ldi	r18, 0x00	; 0
}
    4192:	82 2f       	mov	r24, r18
    4194:	08 95       	ret

00004196 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0c 94 e6 29 	jmp	0x53cc	; 0x53cc <eeprom_read_byte>

0000419e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    419e:	68 2f       	mov	r22, r24
    41a0:	82 e0       	ldi	r24, 0x02	; 2
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <eeprom_write_byte>

000041a8 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    41a8:	83 e0       	ldi	r24, 0x03	; 3
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	0c 94 e6 29 	jmp	0x53cc	; 0x53cc <eeprom_read_byte>

000041b0 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    41b0:	68 2f       	mov	r22, r24
    41b2:	83 e0       	ldi	r24, 0x03	; 3
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <eeprom_write_byte>

000041ba <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    41ba:	84 e0       	ldi	r24, 0x04	; 4
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0c 94 e6 29 	jmp	0x53cc	; 0x53cc <eeprom_read_byte>

000041c2 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    41c2:	68 2f       	mov	r22, r24
    41c4:	84 e0       	ldi	r24, 0x04	; 4
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0c 94 f4 29 	jmp	0x53e8	; 0x53e8 <eeprom_write_byte>

000041cc <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    41cc:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    41d0:	80 ff       	sbrs	r24, 0
    41d2:	12 c0       	rjmp	.+36     	; 0x41f8 <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    41d4:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <mk_max_speed>
    41d8:	85 e0       	ldi	r24, 0x05	; 5
    41da:	68 9f       	mul	r22, r24
    41dc:	b0 01       	movw	r22, r0
    41de:	11 24       	eor	r1, r1
    41e0:	75 95       	asr	r23
    41e2:	67 95       	ror	r22
    41e4:	75 95       	asr	r23
    41e6:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    41e8:	60 38       	cpi	r22, 0x80	; 128
    41ea:	71 05       	cpc	r23, r1
    41ec:	a8 f5       	brcc	.+106    	; 0x4258 <move_unit+0x8c>
    41ee:	61 15       	cp	r22, r1
    41f0:	71 05       	cpc	r23, r1
    41f2:	a1 f1       	breq	.+104    	; 0x425c <move_unit+0x90>
    41f4:	86 2f       	mov	r24, r22
    41f6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    41f8:	81 ff       	sbrs	r24, 1
    41fa:	09 c0       	rjmp	.+18     	; 0x420e <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    41fc:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <mk_max_speed>
    4200:	85 e0       	ldi	r24, 0x05	; 5
    4202:	68 9f       	mul	r22, r24
    4204:	b0 01       	movw	r22, r0
    4206:	11 24       	eor	r1, r1
    4208:	75 95       	asr	r23
    420a:	67 95       	ror	r22
    420c:	ed cf       	rjmp	.-38     	; 0x41e8 <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    420e:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <mk_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    4212:	82 fd       	sbrc	r24, 2
    4214:	0a c0       	rjmp	.+20     	; 0x422a <move_unit+0x5e>
    } else if (mousekey_repeat == 0) {
    4216:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <mousekey_repeat>
    421a:	88 23       	and	r24, r24
    421c:	d1 f0       	breq	.+52     	; 0x4252 <move_unit+0x86>
    } else if (mousekey_repeat >= mk_time_to_max) {
    421e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <mk_time_to_max>
    4222:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <mk_max_speed>
    4226:	89 17       	cp	r24, r25
    4228:	28 f0       	brcs	.+10     	; 0x4234 <move_unit+0x68>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    422a:	85 e0       	ldi	r24, 0x05	; 5
    422c:	68 9f       	mul	r22, r24
    422e:	b0 01       	movw	r22, r0
    4230:	11 24       	eor	r1, r1
    4232:	da cf       	rjmp	.-76     	; 0x41e8 <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4234:	86 9f       	mul	r24, r22
    4236:	b0 01       	movw	r22, r0
    4238:	11 24       	eor	r1, r1
    423a:	85 e0       	ldi	r24, 0x05	; 5
    423c:	86 9f       	mul	r24, r22
    423e:	90 01       	movw	r18, r0
    4240:	87 9f       	mul	r24, r23
    4242:	30 0d       	add	r19, r0
    4244:	11 24       	eor	r1, r1
    4246:	69 2f       	mov	r22, r25
    4248:	70 e0       	ldi	r23, 0x00	; 0
    424a:	c9 01       	movw	r24, r18
    424c:	0e 94 b8 29 	call	0x5370	; 0x5370 <__divmodhi4>
    4250:	cb cf       	rjmp	.-106    	; 0x41e8 <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    4252:	65 e0       	ldi	r22, 0x05	; 5
    4254:	70 e0       	ldi	r23, 0x00	; 0
    4256:	ce cf       	rjmp	.-100    	; 0x41f4 <move_unit+0x28>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4258:	8f e7       	ldi	r24, 0x7F	; 127
    425a:	08 95       	ret
    425c:	81 e0       	ldi	r24, 0x01	; 1
}
    425e:	08 95       	ret

00004260 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4260:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    4264:	80 ff       	sbrs	r24, 0
    4266:	0c c0       	rjmp	.+24     	; 0x4280 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4268:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <mk_wheel_max_speed>
    426c:	70 e0       	ldi	r23, 0x00	; 0
    426e:	75 95       	asr	r23
    4270:	67 95       	ror	r22
    4272:	75 95       	asr	r23
    4274:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4276:	61 15       	cp	r22, r1
    4278:	71 05       	cpc	r23, r1
    427a:	49 f1       	breq	.+82     	; 0x42ce <wheel_unit+0x6e>
    427c:	86 2f       	mov	r24, r22
    427e:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4280:	81 ff       	sbrs	r24, 1
    4282:	06 c0       	rjmp	.+12     	; 0x4290 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4284:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4288:	70 e0       	ldi	r23, 0x00	; 0
    428a:	75 95       	asr	r23
    428c:	67 95       	ror	r22
    428e:	f3 cf       	rjmp	.-26     	; 0x4276 <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4290:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <mk_wheel_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    4294:	82 fd       	sbrc	r24, 2
    4296:	0b c0       	rjmp	.+22     	; 0x42ae <wheel_unit+0x4e>
    } else if (mousekey_repeat == 0) {
    4298:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <mousekey_repeat>
    429c:	99 23       	and	r25, r25
    429e:	a1 f0       	breq	.+40     	; 0x42c8 <wheel_unit+0x68>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    42a0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    42a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    42a8:	96 17       	cp	r25, r22
    42aa:	38 f0       	brcs	.+14     	; 0x42ba <wheel_unit+0x5a>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    42ac:	68 2f       	mov	r22, r24
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    42b0:	60 38       	cpi	r22, 0x80	; 128
    42b2:	71 05       	cpc	r23, r1
    42b4:	00 f3       	brcs	.-64     	; 0x4276 <wheel_unit+0x16>
    42b6:	8f e7       	ldi	r24, 0x7F	; 127
    42b8:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    42ba:	89 9f       	mul	r24, r25
    42bc:	c0 01       	movw	r24, r0
    42be:	11 24       	eor	r1, r1
    42c0:	70 e0       	ldi	r23, 0x00	; 0
    42c2:	0e 94 b8 29 	call	0x5370	; 0x5370 <__divmodhi4>
    42c6:	f4 cf       	rjmp	.-24     	; 0x42b0 <wheel_unit+0x50>
        unit = MOUSEKEY_WHEEL_DELTA;
    42c8:	61 e0       	ldi	r22, 0x01	; 1
    42ca:	70 e0       	ldi	r23, 0x00	; 0
    42cc:	d7 cf       	rjmp	.-82     	; 0x427c <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    42ce:	81 e0       	ldi	r24, 0x01	; 1
}
    42d0:	08 95       	ret

000042d2 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    42d2:	80 3f       	cpi	r24, 0xF0	; 240
    42d4:	31 f4       	brne	.+12     	; 0x42e2 <mousekey_on+0x10>
    42d6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    42da:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    42dc:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <mouse_report+0x2>
    42e0:	08 95       	ret
    42e2:	81 3f       	cpi	r24, 0xF1	; 241
    42e4:	19 f4       	brne	.+6      	; 0x42ec <mousekey_on+0x1a>
    42e6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    42ea:	f8 cf       	rjmp	.-16     	; 0x42dc <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    42ec:	82 3f       	cpi	r24, 0xF2	; 242
    42ee:	31 f4       	brne	.+12     	; 0x42fc <mousekey_on+0x2a>
    42f0:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    42f4:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    42f6:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <mouse_report+0x1>
    42fa:	08 95       	ret
    42fc:	83 3f       	cpi	r24, 0xF3	; 243
    42fe:	19 f4       	brne	.+6      	; 0x4306 <mousekey_on+0x34>
    4300:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    4304:	f8 cf       	rjmp	.-16     	; 0x42f6 <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4306:	89 3f       	cpi	r24, 0xF9	; 249
    4308:	29 f4       	brne	.+10     	; 0x4314 <mousekey_on+0x42>
    430a:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    430e:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <mouse_report+0x3>
    4312:	08 95       	ret
    4314:	8a 3f       	cpi	r24, 0xFA	; 250
    4316:	21 f4       	brne	.+8      	; 0x4320 <mousekey_on+0x4e>
    4318:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    431c:	81 95       	neg	r24
    431e:	f7 cf       	rjmp	.-18     	; 0x430e <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4320:	8b 3f       	cpi	r24, 0xFB	; 251
    4322:	31 f4       	brne	.+12     	; 0x4330 <mousekey_on+0x5e>
    4324:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    4328:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    432a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <mouse_report+0x4>
    432e:	08 95       	ret
    4330:	8c 3f       	cpi	r24, 0xFC	; 252
    4332:	19 f4       	brne	.+6      	; 0x433a <mousekey_on+0x68>
    4334:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    4338:	f8 cf       	rjmp	.-16     	; 0x432a <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    433a:	84 3f       	cpi	r24, 0xF4	; 244
    433c:	31 f4       	brne	.+12     	; 0x434a <mousekey_on+0x78>
    433e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    4342:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4344:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <mouse_report>
    4348:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    434a:	85 3f       	cpi	r24, 0xF5	; 245
    434c:	21 f4       	brne	.+8      	; 0x4356 <mousekey_on+0x84>
    434e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    4352:	82 60       	ori	r24, 0x02	; 2
    4354:	f7 cf       	rjmp	.-18     	; 0x4344 <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4356:	86 3f       	cpi	r24, 0xF6	; 246
    4358:	21 f4       	brne	.+8      	; 0x4362 <mousekey_on+0x90>
    435a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    435e:	84 60       	ori	r24, 0x04	; 4
    4360:	f1 cf       	rjmp	.-30     	; 0x4344 <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4362:	87 3f       	cpi	r24, 0xF7	; 247
    4364:	21 f4       	brne	.+8      	; 0x436e <mousekey_on+0x9c>
    4366:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    436a:	88 60       	ori	r24, 0x08	; 8
    436c:	eb cf       	rjmp	.-42     	; 0x4344 <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    436e:	88 3f       	cpi	r24, 0xF8	; 248
    4370:	21 f4       	brne	.+8      	; 0x437a <mousekey_on+0xa8>
    4372:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    4376:	80 61       	ori	r24, 0x10	; 16
    4378:	e5 cf       	rjmp	.-54     	; 0x4344 <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    437a:	8d 3f       	cpi	r24, 0xFD	; 253
    437c:	31 f4       	brne	.+12     	; 0x438a <mousekey_on+0xb8>
    437e:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    4382:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4384:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <mousekey_accel>
}
    4388:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    438a:	8e 3f       	cpi	r24, 0xFE	; 254
    438c:	21 f4       	brne	.+8      	; 0x4396 <mousekey_on+0xc4>
    438e:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    4392:	82 60       	ori	r24, 0x02	; 2
    4394:	f7 cf       	rjmp	.-18     	; 0x4384 <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4396:	8f 3f       	cpi	r24, 0xFF	; 255
    4398:	b9 f7       	brne	.-18     	; 0x4388 <mousekey_on+0xb6>
    439a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    439e:	84 60       	ori	r24, 0x04	; 4
    43a0:	f1 cf       	rjmp	.-30     	; 0x4384 <mousekey_on+0xb2>

000043a2 <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    43a2:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <mouse_report+0x1>
    43a6:	80 3f       	cpi	r24, 0xF0	; 240
    43a8:	41 f4       	brne	.+16     	; 0x43ba <mousekey_off+0x18>
    43aa:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <mouse_report+0x2>
    43ae:	87 fd       	sbrc	r24, 7
    43b0:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    43b4:	99 23       	and	r25, r25
    43b6:	71 f0       	breq	.+28     	; 0x43d4 <mousekey_off+0x32>
        mousekey_repeat = 0;
}
    43b8:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    43ba:	81 3f       	cpi	r24, 0xF1	; 241
    43bc:	29 f4       	brne	.+10     	; 0x43c8 <mousekey_off+0x26>
    43be:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <mouse_report+0x2>
    43c2:	18 16       	cp	r1, r24
    43c4:	ac f3       	brlt	.-22     	; 0x43b0 <mousekey_off+0xe>
    43c6:	f6 cf       	rjmp	.-20     	; 0x43b4 <mousekey_off+0x12>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    43c8:	82 3f       	cpi	r24, 0xF2	; 242
    43ca:	81 f4       	brne	.+32     	; 0x43ec <mousekey_off+0x4a>
    43cc:	97 ff       	sbrs	r25, 7
    43ce:	f2 cf       	rjmp	.-28     	; 0x43b4 <mousekey_off+0x12>
    43d0:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <mouse_report+0x1>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    43d4:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <mouse_report+0x2>
    43d8:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <mouse_report+0x3>
    43dc:	89 2b       	or	r24, r25
    43de:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <mouse_report+0x4>
    43e2:	89 2b       	or	r24, r25
    43e4:	49 f7       	brne	.-46     	; 0x43b8 <mousekey_off+0x16>
        mousekey_repeat = 0;
    43e6:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <mousekey_repeat>
}
    43ea:	08 95       	ret
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    43ec:	83 3f       	cpi	r24, 0xF3	; 243
    43ee:	19 f4       	brne	.+6      	; 0x43f6 <mousekey_off+0x54>
    43f0:	19 16       	cp	r1, r25
    43f2:	74 f3       	brlt	.-36     	; 0x43d0 <mousekey_off+0x2e>
    43f4:	df cf       	rjmp	.-66     	; 0x43b4 <mousekey_off+0x12>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    43f6:	89 3f       	cpi	r24, 0xF9	; 249
    43f8:	39 f4       	brne	.+14     	; 0x4408 <mousekey_off+0x66>
    43fa:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <mouse_report+0x3>
    43fe:	18 16       	cp	r1, r24
    4400:	cc f6       	brge	.-78     	; 0x43b4 <mousekey_off+0x12>
    4402:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <mouse_report+0x3>
    4406:	d6 cf       	rjmp	.-84     	; 0x43b4 <mousekey_off+0x12>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4408:	8a 3f       	cpi	r24, 0xFA	; 250
    440a:	29 f4       	brne	.+10     	; 0x4416 <mousekey_off+0x74>
    440c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <mouse_report+0x3>
    4410:	87 ff       	sbrs	r24, 7
    4412:	d0 cf       	rjmp	.-96     	; 0x43b4 <mousekey_off+0x12>
    4414:	f6 cf       	rjmp	.-20     	; 0x4402 <mousekey_off+0x60>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4416:	8b 3f       	cpi	r24, 0xFB	; 251
    4418:	39 f4       	brne	.+14     	; 0x4428 <mousekey_off+0x86>
    441a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <mouse_report+0x4>
    441e:	87 ff       	sbrs	r24, 7
    4420:	c9 cf       	rjmp	.-110    	; 0x43b4 <mousekey_off+0x12>
    4422:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <mouse_report+0x4>
    4426:	c6 cf       	rjmp	.-116    	; 0x43b4 <mousekey_off+0x12>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4428:	8c 3f       	cpi	r24, 0xFC	; 252
    442a:	29 f4       	brne	.+10     	; 0x4436 <mousekey_off+0x94>
    442c:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <mouse_report+0x4>
    4430:	18 16       	cp	r1, r24
    4432:	bc f3       	brlt	.-18     	; 0x4422 <mousekey_off+0x80>
    4434:	bf cf       	rjmp	.-130    	; 0x43b4 <mousekey_off+0x12>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4436:	84 3f       	cpi	r24, 0xF4	; 244
    4438:	31 f4       	brne	.+12     	; 0x4446 <mousekey_off+0xa4>
    443a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    443e:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4440:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <mouse_report>
    4444:	b7 cf       	rjmp	.-146    	; 0x43b4 <mousekey_off+0x12>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4446:	85 3f       	cpi	r24, 0xF5	; 245
    4448:	21 f4       	brne	.+8      	; 0x4452 <mousekey_off+0xb0>
    444a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    444e:	8d 7f       	andi	r24, 0xFD	; 253
    4450:	f7 cf       	rjmp	.-18     	; 0x4440 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4452:	86 3f       	cpi	r24, 0xF6	; 246
    4454:	21 f4       	brne	.+8      	; 0x445e <mousekey_off+0xbc>
    4456:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    445a:	8b 7f       	andi	r24, 0xFB	; 251
    445c:	f1 cf       	rjmp	.-30     	; 0x4440 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    445e:	87 3f       	cpi	r24, 0xF7	; 247
    4460:	21 f4       	brne	.+8      	; 0x446a <mousekey_off+0xc8>
    4462:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    4466:	87 7f       	andi	r24, 0xF7	; 247
    4468:	eb cf       	rjmp	.-42     	; 0x4440 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    446a:	88 3f       	cpi	r24, 0xF8	; 248
    446c:	21 f4       	brne	.+8      	; 0x4476 <mousekey_off+0xd4>
    446e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    4472:	8f 7e       	andi	r24, 0xEF	; 239
    4474:	e5 cf       	rjmp	.-54     	; 0x4440 <mousekey_off+0x9e>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4476:	8d 3f       	cpi	r24, 0xFD	; 253
    4478:	31 f4       	brne	.+12     	; 0x4486 <mousekey_off+0xe4>
    447a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    447e:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4480:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <mousekey_accel>
    4484:	97 cf       	rjmp	.-210    	; 0x43b4 <mousekey_off+0x12>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4486:	8e 3f       	cpi	r24, 0xFE	; 254
    4488:	21 f4       	brne	.+8      	; 0x4492 <mousekey_off+0xf0>
    448a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    448e:	8d 7f       	andi	r24, 0xFD	; 253
    4490:	f7 cf       	rjmp	.-18     	; 0x4480 <mousekey_off+0xde>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4492:	8f 3f       	cpi	r24, 0xFF	; 255
    4494:	09 f0       	breq	.+2      	; 0x4498 <mousekey_off+0xf6>
    4496:	8e cf       	rjmp	.-228    	; 0x43b4 <mousekey_off+0x12>
    4498:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    449c:	8b 7f       	andi	r24, 0xFB	; 251
    449e:	f0 cf       	rjmp	.-32     	; 0x4480 <mousekey_off+0xde>

000044a0 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    44a0:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    44a4:	83 ff       	sbrs	r24, 3
    44a6:	7e c0       	rjmp	.+252    	; 0x45a4 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    44a8:	81 e6       	ldi	r24, 0x61	; 97
    44aa:	94 e0       	ldi	r25, 0x04	; 4
    44ac:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    phex(mouse_report.buttons); print("|");
    44b0:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <mouse_report>
    44b4:	1f 92       	push	r1
    44b6:	8f 93       	push	r24
    44b8:	8c e5       	ldi	r24, 0x5C	; 92
    44ba:	94 e0       	ldi	r25, 0x04	; 4
    44bc:	9f 93       	push	r25
    44be:	8f 93       	push	r24
    44c0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    44c4:	8a e5       	ldi	r24, 0x5A	; 90
    44c6:	94 e0       	ldi	r25, 0x04	; 4
    44c8:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print_decs(mouse_report.x); print(" ");
    44cc:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <mouse_report+0x1>
    44d0:	28 2f       	mov	r18, r24
    44d2:	08 2e       	mov	r0, r24
    44d4:	00 0c       	add	r0, r0
    44d6:	33 0b       	sbc	r19, r19
    44d8:	3f 93       	push	r19
    44da:	8f 93       	push	r24
    44dc:	87 e5       	ldi	r24, 0x57	; 87
    44de:	94 e0       	ldi	r25, 0x04	; 4
    44e0:	9f 93       	push	r25
    44e2:	8f 93       	push	r24
    44e4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    44e8:	85 e5       	ldi	r24, 0x55	; 85
    44ea:	94 e0       	ldi	r25, 0x04	; 4
    44ec:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print_decs(mouse_report.y); print(" ");
    44f0:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <mouse_report+0x2>
    44f4:	28 2f       	mov	r18, r24
    44f6:	08 2e       	mov	r0, r24
    44f8:	00 0c       	add	r0, r0
    44fa:	33 0b       	sbc	r19, r19
    44fc:	3f 93       	push	r19
    44fe:	8f 93       	push	r24
    4500:	82 e5       	ldi	r24, 0x52	; 82
    4502:	94 e0       	ldi	r25, 0x04	; 4
    4504:	9f 93       	push	r25
    4506:	8f 93       	push	r24
    4508:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    450c:	80 e5       	ldi	r24, 0x50	; 80
    450e:	94 e0       	ldi	r25, 0x04	; 4
    4510:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print_decs(mouse_report.v); print(" ");
    4514:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <mouse_report+0x3>
    4518:	28 2f       	mov	r18, r24
    451a:	08 2e       	mov	r0, r24
    451c:	00 0c       	add	r0, r0
    451e:	33 0b       	sbc	r19, r19
    4520:	3f 93       	push	r19
    4522:	8f 93       	push	r24
    4524:	8d e4       	ldi	r24, 0x4D	; 77
    4526:	94 e0       	ldi	r25, 0x04	; 4
    4528:	9f 93       	push	r25
    452a:	8f 93       	push	r24
    452c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4530:	8b e4       	ldi	r24, 0x4B	; 75
    4532:	94 e0       	ldi	r25, 0x04	; 4
    4534:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print_decs(mouse_report.h); print("](");
    4538:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <mouse_report+0x4>
    453c:	28 2f       	mov	r18, r24
    453e:	08 2e       	mov	r0, r24
    4540:	00 0c       	add	r0, r0
    4542:	33 0b       	sbc	r19, r19
    4544:	3f 93       	push	r19
    4546:	8f 93       	push	r24
    4548:	88 e4       	ldi	r24, 0x48	; 72
    454a:	94 e0       	ldi	r25, 0x04	; 4
    454c:	9f 93       	push	r25
    454e:	8f 93       	push	r24
    4550:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4554:	85 e4       	ldi	r24, 0x45	; 69
    4556:	94 e0       	ldi	r25, 0x04	; 4
    4558:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print_dec(mousekey_repeat); print("/");
    455c:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <mousekey_repeat>
    4560:	1f 92       	push	r1
    4562:	8f 93       	push	r24
    4564:	82 e4       	ldi	r24, 0x42	; 66
    4566:	94 e0       	ldi	r25, 0x04	; 4
    4568:	9f 93       	push	r25
    456a:	8f 93       	push	r24
    456c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4570:	80 e4       	ldi	r24, 0x40	; 64
    4572:	94 e0       	ldi	r25, 0x04	; 4
    4574:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4578:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <mousekey_accel>
    457c:	1f 92       	push	r1
    457e:	8f 93       	push	r24
    4580:	8d e3       	ldi	r24, 0x3D	; 61
    4582:	94 e0       	ldi	r25, 0x04	; 4
    4584:	9f 93       	push	r25
    4586:	8f 93       	push	r24
    4588:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    458c:	8a e3       	ldi	r24, 0x3A	; 58
    458e:	94 e0       	ldi	r25, 0x04	; 4
    4590:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4594:	8d b7       	in	r24, 0x3d	; 61
    4596:	9e b7       	in	r25, 0x3e	; 62
    4598:	4c 96       	adiw	r24, 0x1c	; 28
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	f8 94       	cli
    459e:	9e bf       	out	0x3e, r25	; 62
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    45a4:	84 e8       	ldi	r24, 0x84	; 132
    45a6:	93 e0       	ldi	r25, 0x03	; 3
    45a8:	0e 94 56 10 	call	0x20ac	; 0x20ac <host_mouse_send>
    last_timer = timer_read();
    45ac:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <timer_read>
    45b0:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <last_timer+0x1>
    45b4:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <last_timer>
}
    45b8:	08 95       	ret

000045ba <mousekey_task>:
{
    45ba:	1f 93       	push	r17
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    45c0:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <last_timer>
    45c4:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <last_timer+0x1>
    45c8:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <timer_elapsed>
    45cc:	ac 01       	movw	r20, r24
    45ce:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <mousekey_repeat>
    45d2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <mk_interval>
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	91 11       	cpse	r25, r1
    45da:	06 c0       	rjmp	.+12     	; 0x45e8 <mousekey_task+0x2e>
    45dc:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <mk_delay>
    45e0:	8a e0       	ldi	r24, 0x0A	; 10
    45e2:	28 9f       	mul	r18, r24
    45e4:	90 01       	movw	r18, r0
    45e6:	11 24       	eor	r1, r1
    45e8:	42 17       	cp	r20, r18
    45ea:	53 07       	cpc	r21, r19
    45ec:	78 f0       	brcs	.+30     	; 0x460c <mousekey_task+0x52>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    45ee:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <mouse_report+0x1>
    45f2:	c0 91 86 03 	lds	r28, 0x0386	; 0x800386 <mouse_report+0x2>
    45f6:	d0 91 87 03 	lds	r29, 0x0387	; 0x800387 <mouse_report+0x3>
    45fa:	10 91 88 03 	lds	r17, 0x0388	; 0x800388 <mouse_report+0x4>
    45fe:	21 11       	cpse	r18, r1
    4600:	09 c0       	rjmp	.+18     	; 0x4614 <mousekey_task+0x5a>
    4602:	8c 2f       	mov	r24, r28
    4604:	8d 2b       	or	r24, r29
    4606:	81 2b       	or	r24, r17
    4608:	09 f0       	breq	.+2      	; 0x460c <mousekey_task+0x52>
    460a:	74 c0       	rjmp	.+232    	; 0x46f4 <mousekey_task+0x13a>
}
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    4614:	9f 3f       	cpi	r25, 0xFF	; 255
    4616:	19 f0       	breq	.+6      	; 0x461e <mousekey_task+0x64>
        mousekey_repeat++;
    4618:	9f 5f       	subi	r25, 0xFF	; 255
    461a:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    461e:	12 16       	cp	r1, r18
    4620:	24 f4       	brge	.+8      	; 0x462a <mousekey_task+0x70>
    4622:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    4626:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    462a:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <mouse_report+0x1>
    462e:	87 ff       	sbrs	r24, 7
    4630:	05 c0       	rjmp	.+10     	; 0x463c <mousekey_task+0x82>
    4632:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    4636:	81 95       	neg	r24
    4638:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    463c:	1c 16       	cp	r1, r28
    463e:	24 f4       	brge	.+8      	; 0x4648 <mousekey_task+0x8e>
    4640:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    4644:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4648:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <mouse_report+0x2>
    464c:	87 ff       	sbrs	r24, 7
    464e:	05 c0       	rjmp	.+10     	; 0x465a <mousekey_task+0xa0>
    4650:	0e 94 e6 20 	call	0x41cc	; 0x41cc <move_unit>
    4654:	81 95       	neg	r24
    4656:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    465a:	60 91 85 03 	lds	r22, 0x0385	; 0x800385 <mouse_report+0x1>
    465e:	66 23       	and	r22, r22
    4660:	31 f1       	breq	.+76     	; 0x46ae <mousekey_task+0xf4>
    4662:	c0 91 86 03 	lds	r28, 0x0386	; 0x800386 <mouse_report+0x2>
    4666:	cc 23       	and	r28, r28
    4668:	11 f1       	breq	.+68     	; 0x46ae <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    466a:	06 2e       	mov	r0, r22
    466c:	00 0c       	add	r0, r0
    466e:	77 0b       	sbc	r23, r23
    4670:	88 0b       	sbc	r24, r24
    4672:	99 0b       	sbc	r25, r25
    4674:	0e 94 bf 28 	call	0x517e	; 0x517e <__floatsisf>
    4678:	23 e3       	ldi	r18, 0x33	; 51
    467a:	33 e3       	ldi	r19, 0x33	; 51
    467c:	43 e3       	ldi	r20, 0x33	; 51
    467e:	5f e3       	ldi	r21, 0x3F	; 63
    4680:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsf3>
    4684:	0e 94 87 28 	call	0x510e	; 0x510e <__fixsfsi>
    4688:	60 93 85 03 	sts	0x0385, r22	; 0x800385 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    468c:	6c 2f       	mov	r22, r28
    468e:	cc 0f       	add	r28, r28
    4690:	77 0b       	sbc	r23, r23
    4692:	88 0b       	sbc	r24, r24
    4694:	99 0b       	sbc	r25, r25
    4696:	0e 94 bf 28 	call	0x517e	; 0x517e <__floatsisf>
    469a:	23 e3       	ldi	r18, 0x33	; 51
    469c:	33 e3       	ldi	r19, 0x33	; 51
    469e:	43 e3       	ldi	r20, 0x33	; 51
    46a0:	5f e3       	ldi	r21, 0x3F	; 63
    46a2:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsf3>
    46a6:	0e 94 87 28 	call	0x510e	; 0x510e <__fixsfsi>
    46aa:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    46ae:	1d 16       	cp	r1, r29
    46b0:	24 f4       	brge	.+8      	; 0x46ba <mousekey_task+0x100>
    46b2:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    46b6:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    46ba:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <mouse_report+0x3>
    46be:	87 ff       	sbrs	r24, 7
    46c0:	05 c0       	rjmp	.+10     	; 0x46cc <mousekey_task+0x112>
    46c2:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    46c6:	81 95       	neg	r24
    46c8:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    46cc:	11 16       	cp	r1, r17
    46ce:	24 f4       	brge	.+8      	; 0x46d8 <mousekey_task+0x11e>
    46d0:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    46d4:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    46d8:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <mouse_report+0x4>
    46dc:	87 ff       	sbrs	r24, 7
    46de:	05 c0       	rjmp	.+10     	; 0x46ea <mousekey_task+0x130>
    46e0:	0e 94 30 21 	call	0x4260	; 0x4260 <wheel_unit>
    46e4:	81 95       	neg	r24
    46e6:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <mouse_report+0x4>
}
    46ea:	df 91       	pop	r29
    46ec:	cf 91       	pop	r28
    46ee:	1f 91       	pop	r17
    mousekey_send();
    46f0:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    46f4:	9f 3f       	cpi	r25, 0xFF	; 255
    46f6:	09 f0       	breq	.+2      	; 0x46fa <mousekey_task+0x140>
    46f8:	8f cf       	rjmp	.-226    	; 0x4618 <mousekey_task+0x5e>
    46fa:	a0 cf       	rjmp	.-192    	; 0x463c <mousekey_task+0x82>

000046fc <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    46fc:	85 e0       	ldi	r24, 0x05	; 5
    46fe:	e4 e8       	ldi	r30, 0x84	; 132
    4700:	f3 e0       	ldi	r31, 0x03	; 3
    4702:	df 01       	movw	r26, r30
    4704:	1d 92       	st	X+, r1
    4706:	8a 95       	dec	r24
    4708:	e9 f7       	brne	.-6      	; 0x4704 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    470a:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <mousekey_repeat>
    mousekey_accel = 0;
    470e:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <mousekey_accel>
}
    4712:	08 95       	ret

00004714 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4714:	84 e8       	ldi	r24, 0x84	; 132
    4716:	96 e0       	ldi	r25, 0x06	; 6
    4718:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    471c:	1f 92       	push	r1
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	8f 93       	push	r24
    4722:	1f 92       	push	r1
    4724:	85 e0       	ldi	r24, 0x05	; 5
    4726:	8f 93       	push	r24
    4728:	86 e3       	ldi	r24, 0x36	; 54
    472a:	96 e0       	ldi	r25, 0x06	; 6
    472c:	9f 93       	push	r25
    472e:	8f 93       	push	r24
    4730:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4734:	0f 90       	pop	r0
    4736:	0f 90       	pop	r0
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	08 95       	ret

00004742 <mousekey_param_inc>:
    switch (param) {
    4742:	83 30       	cpi	r24, 0x03	; 3
    4744:	09 f4       	brne	.+2      	; 0x4748 <mousekey_param_inc+0x6>
    4746:	45 c0       	rjmp	.+138    	; 0x47d2 <mousekey_param_inc+0x90>
    4748:	28 f4       	brcc	.+10     	; 0x4754 <mousekey_param_inc+0x12>
    474a:	81 30       	cpi	r24, 0x01	; 1
    474c:	61 f0       	breq	.+24     	; 0x4766 <mousekey_param_inc+0x24>
    474e:	82 30       	cpi	r24, 0x02	; 2
    4750:	49 f1       	breq	.+82     	; 0x47a4 <mousekey_param_inc+0x62>
    4752:	08 95       	ret
    4754:	85 30       	cpi	r24, 0x05	; 5
    4756:	09 f4       	brne	.+2      	; 0x475a <mousekey_param_inc+0x18>
    4758:	6a c0       	rjmp	.+212    	; 0x482e <mousekey_param_inc+0xec>
    475a:	08 f4       	brcc	.+2      	; 0x475e <mousekey_param_inc+0x1c>
    475c:	51 c0       	rjmp	.+162    	; 0x4800 <mousekey_param_inc+0xbe>
    475e:	86 30       	cpi	r24, 0x06	; 6
    4760:	09 f4       	brne	.+2      	; 0x4764 <mousekey_param_inc+0x22>
    4762:	7c c0       	rjmp	.+248    	; 0x485c <mousekey_param_inc+0x11a>
    4764:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    4766:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    476a:	48 2f       	mov	r20, r24
    476c:	46 0f       	add	r20, r22
    476e:	55 27       	eor	r21, r21
    4770:	55 1f       	adc	r21, r21
    4772:	4f 3f       	cpi	r20, 0xFF	; 255
    4774:	51 05       	cpc	r21, r1
    4776:	94 f4       	brge	.+36     	; 0x479c <mousekey_param_inc+0x5a>
                mk_delay += inc;
    4778:	68 0f       	add	r22, r24
    477a:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    477e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    4782:	1f 92       	push	r1
    4784:	8f 93       	push	r24
    4786:	8f e6       	ldi	r24, 0x6F	; 111
    4788:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    478a:	9f 93       	push	r25
    478c:	8f 93       	push	r24
    478e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            break;
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	0f 90       	pop	r0
    4798:	0f 90       	pop	r0
}
    479a:	08 95       	ret
                mk_delay = UINT8_MAX;
    479c:	8f ef       	ldi	r24, 0xFF	; 255
    479e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_delay>
    47a2:	ed cf       	rjmp	.-38     	; 0x477e <mousekey_param_inc+0x3c>
            if (mk_interval + inc < UINT8_MAX)
    47a4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    47a8:	48 2f       	mov	r20, r24
    47aa:	46 0f       	add	r20, r22
    47ac:	55 27       	eor	r21, r21
    47ae:	55 1f       	adc	r21, r21
    47b0:	4f 3f       	cpi	r20, 0xFF	; 255
    47b2:	51 05       	cpc	r21, r1
    47b4:	54 f4       	brge	.+20     	; 0x47ca <mousekey_param_inc+0x88>
                mk_interval += inc;
    47b6:	68 0f       	add	r22, r24
    47b8:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    47bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    47c0:	1f 92       	push	r1
    47c2:	8f 93       	push	r24
    47c4:	8d e5       	ldi	r24, 0x5D	; 93
    47c6:	95 e0       	ldi	r25, 0x05	; 5
    47c8:	e0 cf       	rjmp	.-64     	; 0x478a <mousekey_param_inc+0x48>
                mk_interval = UINT8_MAX;
    47ca:	8f ef       	ldi	r24, 0xFF	; 255
    47cc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_interval>
    47d0:	f5 cf       	rjmp	.-22     	; 0x47bc <mousekey_param_inc+0x7a>
            if (mk_max_speed + inc < UINT8_MAX)
    47d2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    47d6:	48 2f       	mov	r20, r24
    47d8:	46 0f       	add	r20, r22
    47da:	55 27       	eor	r21, r21
    47dc:	55 1f       	adc	r21, r21
    47de:	4f 3f       	cpi	r20, 0xFF	; 255
    47e0:	51 05       	cpc	r21, r1
    47e2:	54 f4       	brge	.+20     	; 0x47f8 <mousekey_param_inc+0xb6>
                mk_max_speed += inc;
    47e4:	68 0f       	add	r22, r24
    47e6:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    47ea:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    47ee:	1f 92       	push	r1
    47f0:	8f 93       	push	r24
    47f2:	8a e4       	ldi	r24, 0x4A	; 74
    47f4:	95 e0       	ldi	r25, 0x05	; 5
    47f6:	c9 cf       	rjmp	.-110    	; 0x478a <mousekey_param_inc+0x48>
                mk_max_speed = UINT8_MAX;
    47f8:	8f ef       	ldi	r24, 0xFF	; 255
    47fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_max_speed>
    47fe:	f5 cf       	rjmp	.-22     	; 0x47ea <mousekey_param_inc+0xa8>
            if (mk_time_to_max + inc < UINT8_MAX)
    4800:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    4804:	48 2f       	mov	r20, r24
    4806:	46 0f       	add	r20, r22
    4808:	55 27       	eor	r21, r21
    480a:	55 1f       	adc	r21, r21
    480c:	4f 3f       	cpi	r20, 0xFF	; 255
    480e:	51 05       	cpc	r21, r1
    4810:	54 f4       	brge	.+20     	; 0x4826 <mousekey_param_inc+0xe4>
                mk_time_to_max += inc;
    4812:	68 0f       	add	r22, r24
    4814:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4818:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    481c:	1f 92       	push	r1
    481e:	8f 93       	push	r24
    4820:	85 e3       	ldi	r24, 0x35	; 53
    4822:	95 e0       	ldi	r25, 0x05	; 5
    4824:	b2 cf       	rjmp	.-156    	; 0x478a <mousekey_param_inc+0x48>
                mk_time_to_max = UINT8_MAX;
    4826:	8f ef       	ldi	r24, 0xFF	; 255
    4828:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_time_to_max>
    482c:	f5 cf       	rjmp	.-22     	; 0x4818 <mousekey_param_inc+0xd6>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    482e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4832:	48 2f       	mov	r20, r24
    4834:	46 0f       	add	r20, r22
    4836:	55 27       	eor	r21, r21
    4838:	55 1f       	adc	r21, r21
    483a:	4f 3f       	cpi	r20, 0xFF	; 255
    483c:	51 05       	cpc	r21, r1
    483e:	54 f4       	brge	.+20     	; 0x4854 <mousekey_param_inc+0x112>
                mk_wheel_max_speed += inc;
    4840:	68 0f       	add	r22, r24
    4842:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4846:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    484a:	1f 92       	push	r1
    484c:	8f 93       	push	r24
    484e:	8c e1       	ldi	r24, 0x1C	; 28
    4850:	95 e0       	ldi	r25, 0x05	; 5
    4852:	9b cf       	rjmp	.-202    	; 0x478a <mousekey_param_inc+0x48>
                mk_wheel_max_speed = UINT8_MAX;
    4854:	8f ef       	ldi	r24, 0xFF	; 255
    4856:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_wheel_max_speed>
    485a:	f5 cf       	rjmp	.-22     	; 0x4846 <mousekey_param_inc+0x104>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    485c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4860:	48 2f       	mov	r20, r24
    4862:	46 0f       	add	r20, r22
    4864:	55 27       	eor	r21, r21
    4866:	55 1f       	adc	r21, r21
    4868:	4f 3f       	cpi	r20, 0xFF	; 255
    486a:	51 05       	cpc	r21, r1
    486c:	54 f4       	brge	.+20     	; 0x4882 <mousekey_param_inc+0x140>
                mk_wheel_time_to_max += inc;
    486e:	68 0f       	add	r22, r24
    4870:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4874:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4878:	1f 92       	push	r1
    487a:	8f 93       	push	r24
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	95 e0       	ldi	r25, 0x05	; 5
    4880:	84 cf       	rjmp	.-248    	; 0x478a <mousekey_param_inc+0x48>
                mk_wheel_time_to_max = UINT8_MAX;
    4882:	8f ef       	ldi	r24, 0xFF	; 255
    4884:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_time_to_max>
    4888:	f5 cf       	rjmp	.-22     	; 0x4874 <mousekey_param_inc+0x132>

0000488a <mousekey_param_dec>:
    switch (param) {
    488a:	83 30       	cpi	r24, 0x03	; 3
    488c:	c9 f1       	breq	.+114    	; 0x4900 <mousekey_param_dec+0x76>
    488e:	28 f4       	brcc	.+10     	; 0x489a <mousekey_param_dec+0x10>
    4890:	81 30       	cpi	r24, 0x01	; 1
    4892:	61 f0       	breq	.+24     	; 0x48ac <mousekey_param_dec+0x22>
    4894:	82 30       	cpi	r24, 0x02	; 2
    4896:	19 f1       	breq	.+70     	; 0x48de <mousekey_param_dec+0x54>
    4898:	08 95       	ret
    489a:	85 30       	cpi	r24, 0x05	; 5
    489c:	09 f4       	brne	.+2      	; 0x48a0 <mousekey_param_dec+0x16>
    489e:	52 c0       	rjmp	.+164    	; 0x4944 <mousekey_param_dec+0xba>
    48a0:	08 f4       	brcc	.+2      	; 0x48a4 <mousekey_param_dec+0x1a>
    48a2:	3f c0       	rjmp	.+126    	; 0x4922 <mousekey_param_dec+0x98>
    48a4:	86 30       	cpi	r24, 0x06	; 6
    48a6:	09 f4       	brne	.+2      	; 0x48aa <mousekey_param_dec+0x20>
    48a8:	5e c0       	rjmp	.+188    	; 0x4966 <mousekey_param_dec+0xdc>
    48aa:	08 95       	ret
            if (mk_delay > dec)
    48ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    48b0:	68 17       	cp	r22, r24
    48b2:	90 f4       	brcc	.+36     	; 0x48d8 <mousekey_param_dec+0x4e>
                mk_delay -= dec;
    48b4:	86 1b       	sub	r24, r22
    48b6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    48ba:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    48be:	1f 92       	push	r1
    48c0:	8f 93       	push	r24
    48c2:	82 ef       	ldi	r24, 0xF2	; 242
    48c4:	94 e0       	ldi	r25, 0x04	; 4
            PRINT_SET_VAL(mk_wheel_time_to_max);
    48c6:	9f 93       	push	r25
    48c8:	8f 93       	push	r24
    48ca:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            break;
    48ce:	0f 90       	pop	r0
    48d0:	0f 90       	pop	r0
    48d2:	0f 90       	pop	r0
    48d4:	0f 90       	pop	r0
}
    48d6:	08 95       	ret
                mk_delay = 0;
    48d8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mk_delay>
    48dc:	ee cf       	rjmp	.-36     	; 0x48ba <mousekey_param_dec+0x30>
            if (mk_interval > dec)
    48de:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    48e2:	68 17       	cp	r22, r24
    48e4:	50 f4       	brcc	.+20     	; 0x48fa <mousekey_param_dec+0x70>
                mk_interval -= dec;
    48e6:	86 1b       	sub	r24, r22
    48e8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    48ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    48f0:	1f 92       	push	r1
    48f2:	8f 93       	push	r24
    48f4:	80 ee       	ldi	r24, 0xE0	; 224
    48f6:	94 e0       	ldi	r25, 0x04	; 4
    48f8:	e6 cf       	rjmp	.-52     	; 0x48c6 <mousekey_param_dec+0x3c>
                mk_interval = 0;
    48fa:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <mk_interval>
    48fe:	f6 cf       	rjmp	.-20     	; 0x48ec <mousekey_param_dec+0x62>
            if (mk_max_speed > dec)
    4900:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    4904:	68 17       	cp	r22, r24
    4906:	50 f4       	brcc	.+20     	; 0x491c <mousekey_param_dec+0x92>
                mk_max_speed -= dec;
    4908:	86 1b       	sub	r24, r22
    490a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    490e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    4912:	1f 92       	push	r1
    4914:	8f 93       	push	r24
    4916:	8d ec       	ldi	r24, 0xCD	; 205
    4918:	94 e0       	ldi	r25, 0x04	; 4
    491a:	d5 cf       	rjmp	.-86     	; 0x48c6 <mousekey_param_dec+0x3c>
                mk_max_speed = 0;
    491c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <mk_max_speed>
    4920:	f6 cf       	rjmp	.-20     	; 0x490e <mousekey_param_dec+0x84>
            if (mk_time_to_max > dec)
    4922:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    4926:	68 17       	cp	r22, r24
    4928:	50 f4       	brcc	.+20     	; 0x493e <mousekey_param_dec+0xb4>
                mk_time_to_max -= dec;
    492a:	86 1b       	sub	r24, r22
    492c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4930:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    4934:	1f 92       	push	r1
    4936:	8f 93       	push	r24
    4938:	88 eb       	ldi	r24, 0xB8	; 184
    493a:	94 e0       	ldi	r25, 0x04	; 4
    493c:	c4 cf       	rjmp	.-120    	; 0x48c6 <mousekey_param_dec+0x3c>
                mk_time_to_max = 0;
    493e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <mk_time_to_max>
    4942:	f6 cf       	rjmp	.-20     	; 0x4930 <mousekey_param_dec+0xa6>
            if (mk_wheel_max_speed > dec)
    4944:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4948:	68 17       	cp	r22, r24
    494a:	50 f4       	brcc	.+20     	; 0x4960 <mousekey_param_dec+0xd6>
                mk_wheel_max_speed -= dec;
    494c:	86 1b       	sub	r24, r22
    494e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4952:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    4956:	1f 92       	push	r1
    4958:	8f 93       	push	r24
    495a:	8f e9       	ldi	r24, 0x9F	; 159
    495c:	94 e0       	ldi	r25, 0x04	; 4
    495e:	b3 cf       	rjmp	.-154    	; 0x48c6 <mousekey_param_dec+0x3c>
                mk_wheel_max_speed = 0;
    4960:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mk_wheel_max_speed>
    4964:	f6 cf       	rjmp	.-20     	; 0x4952 <mousekey_param_dec+0xc8>
            if (mk_wheel_time_to_max > dec)
    4966:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    496a:	68 17       	cp	r22, r24
    496c:	50 f4       	brcc	.+20     	; 0x4982 <mousekey_param_dec+0xf8>
                mk_wheel_time_to_max -= dec;
    496e:	86 1b       	sub	r24, r22
    4970:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4974:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    4978:	1f 92       	push	r1
    497a:	8f 93       	push	r24
    497c:	84 e8       	ldi	r24, 0x84	; 132
    497e:	94 e0       	ldi	r25, 0x04	; 4
    4980:	a2 cf       	rjmp	.-188    	; 0x48c6 <mousekey_param_dec+0x3c>
                mk_wheel_time_to_max = 0;
    4982:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_wheel_time_to_max>
    4986:	f6 cf       	rjmp	.-20     	; 0x4974 <mousekey_param_dec+0xea>

00004988 <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    4988:	cf 93       	push	r28
    498a:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    498c:	1f 92       	push	r1
    498e:	8f 93       	push	r24
    4990:	89 e8       	ldi	r24, 0x89	; 137
    4992:	97 e0       	ldi	r25, 0x07	; 7
    4994:	9f 93       	push	r25
    4996:	8f 93       	push	r24
    4998:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    default_layer_set(1UL<<layer);
    499c:	61 e0       	ldi	r22, 0x01	; 1
    499e:	70 e0       	ldi	r23, 0x00	; 0
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	04 c0       	rjmp	.+8      	; 0x49ae <switch_default_layer+0x26>
    49a6:	66 0f       	add	r22, r22
    49a8:	77 1f       	adc	r23, r23
    49aa:	88 1f       	adc	r24, r24
    49ac:	99 1f       	adc	r25, r25
    49ae:	ca 95       	dec	r28
    49b0:	d2 f7       	brpl	.-12     	; 0x49a6 <switch_default_layer+0x1e>
    49b2:	0e 94 19 1a 	call	0x3432	; 0x3432 <default_layer_set>
    clear_keyboard();
    49b6:	0f 90       	pop	r0
    49b8:	0f 90       	pop	r0
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
}
    49be:	cf 91       	pop	r28
    clear_keyboard();
    49c0:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <clear_keyboard>

000049c4 <command_common>:
{
    49c4:	cf 93       	push	r28
    switch (code) {
    49c6:	8b 31       	cpi	r24, 0x1B	; 27
    49c8:	09 f4       	brne	.+2      	; 0x49cc <command_common+0x8>
    49ca:	d5 c1       	rjmp	.+938    	; 0x4d76 <command_common+0x3b2>
    49cc:	08 f0       	brcs	.+2      	; 0x49d0 <command_common+0xc>
    49ce:	4a c0       	rjmp	.+148    	; 0x4a64 <command_common+0xa0>
    49d0:	8e 30       	cpi	r24, 0x0E	; 14
    49d2:	09 f4       	brne	.+2      	; 0x49d6 <command_common+0x12>
    49d4:	e0 c1       	rjmp	.+960    	; 0x4d96 <command_common+0x3d2>
    49d6:	b8 f4       	brcc	.+46     	; 0x4a06 <command_common+0x42>
    49d8:	87 30       	cpi	r24, 0x07	; 7
    49da:	09 f4       	brne	.+2      	; 0x49de <command_common+0x1a>
    49dc:	b6 c1       	rjmp	.+876    	; 0x4d4a <command_common+0x386>
    49de:	48 f4       	brcc	.+18     	; 0x49f2 <command_common+0x2e>
    49e0:	86 30       	cpi	r24, 0x06	; 6
    49e2:	09 f4       	brne	.+2      	; 0x49e6 <command_common+0x22>
    49e4:	a1 c1       	rjmp	.+834    	; 0x4d28 <command_common+0x364>
            print("?");
    49e6:	8d e9       	ldi	r24, 0x9D	; 157
    49e8:	99 e0       	ldi	r25, 0x09	; 9
    49ea:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            return false;
    49ee:	c0 e0       	ldi	r28, 0x00	; 0
    49f0:	34 c2       	rjmp	.+1128   	; 0x4e5a <command_common+0x496>
    switch (code) {
    49f2:	88 30       	cpi	r24, 0x08	; 8
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <command_common+0x34>
    49f6:	68 c0       	rjmp	.+208    	; 0x4ac8 <command_common+0x104>
    49f8:	8b 30       	cpi	r24, 0x0B	; 11
    49fa:	a9 f7       	brne	.-22     	; 0x49e6 <command_common+0x22>
    print("\n\t- Magic -\n"
    49fc:	85 eb       	ldi	r24, 0xB5	; 181
    49fe:	97 e0       	ldi	r25, 0x07	; 7
                print("NKRO: off\n");
    4a00:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4a04:	8f c1       	rjmp	.+798    	; 0x4d24 <command_common+0x360>
    switch (code) {
    4a06:	81 31       	cpi	r24, 0x11	; 17
    4a08:	09 f4       	brne	.+2      	; 0x4a0c <command_common+0x48>
    4a0a:	19 c2       	rjmp	.+1074   	; 0x4e3e <command_common+0x47a>
    4a0c:	78 f4       	brcc	.+30     	; 0x4a2c <command_common+0x68>
    4a0e:	80 31       	cpi	r24, 0x10	; 16
    4a10:	51 f7       	brne	.-44     	; 0x49e6 <command_common+0x22>
            debug_mouse = !debug_mouse;
    4a12:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    4a16:	89 2f       	mov	r24, r25
    4a18:	87 7f       	andi	r24, 0xF7	; 247
    4a1a:	93 ff       	sbrs	r25, 3
    4a1c:	88 60       	ori	r24, 0x08	; 8
    4a1e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <debug_config>
            if (debug_mouse) {
    4a22:	83 ff       	sbrs	r24, 3
    4a24:	c8 c1       	rjmp	.+912    	; 0x4db6 <command_common+0x3f2>
                print("\nmouse: on\n");
    4a26:	8b e5       	ldi	r24, 0x5B	; 91
    4a28:	9b e0       	ldi	r25, 0x0B	; 11
    4a2a:	9f c1       	rjmp	.+830    	; 0x4d6a <command_common+0x3a6>
    switch (code) {
    4a2c:	86 31       	cpi	r24, 0x16	; 22
    4a2e:	09 f4       	brne	.+2      	; 0x4a32 <command_common+0x6e>
    4a30:	c5 c1       	rjmp	.+906    	; 0x4dbc <command_common+0x3f8>
    4a32:	89 31       	cpi	r24, 0x19	; 25
    4a34:	c1 f6       	brne	.-80     	; 0x49e6 <command_common+0x22>
            print("\n\t- Version -\n");
    4a36:	8f e3       	ldi	r24, 0x3F	; 63
    4a38:	9b e0       	ldi	r25, 0x0B	; 11
    4a3a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4a3e:	83 e1       	ldi	r24, 0x13	; 19
    4a40:	9b e0       	ldi	r25, 0x0B	; 11
    4a42:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4a46:	88 ec       	ldi	r24, 0xC8	; 200
    4a48:	9a e0       	ldi	r25, 0x0A	; 10
    4a4a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            print("BUILD: " STR(TMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4a4e:	80 ea       	ldi	r24, 0xA0	; 160
    4a50:	9a e0       	ldi	r25, 0x0A	; 10
    4a52:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            print("OPTIONS:"
    4a56:	8b e5       	ldi	r24, 0x5B	; 91
    4a58:	9a e0       	ldi	r25, 0x0A	; 10
    4a5a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4a5e:	80 e3       	ldi	r24, 0x30	; 48
    4a60:	9a e0       	ldi	r25, 0x0A	; 10
    4a62:	ce cf       	rjmp	.-100    	; 0x4a00 <command_common+0x3c>
    switch (code) {
    4a64:	85 33       	cpi	r24, 0x35	; 53
    4a66:	61 f0       	breq	.+24     	; 0x4a80 <command_common+0xbc>
    4a68:	78 f4       	brcc	.+30     	; 0x4a88 <command_common+0xc4>
    4a6a:	87 32       	cpi	r24, 0x27	; 39
    4a6c:	49 f0       	breq	.+18     	; 0x4a80 <command_common+0xbc>
    4a6e:	28 f4       	brcc	.+10     	; 0x4a7a <command_common+0xb6>
    4a70:	8e 31       	cpi	r24, 0x1E	; 30
    4a72:	08 f4       	brcc	.+2      	; 0x4a76 <command_common+0xb2>
    4a74:	b8 cf       	rjmp	.-144    	; 0x49e6 <command_common+0x22>
            switch_default_layer((code - KC_1) + 1);
    4a76:	8d 51       	subi	r24, 0x1D	; 29
    4a78:	04 c0       	rjmp	.+8      	; 0x4a82 <command_common+0xbe>
    switch (code) {
    4a7a:	89 32       	cpi	r24, 0x29	; 41
    4a7c:	09 f0       	breq	.+2      	; 0x4a80 <command_common+0xbc>
    4a7e:	b3 cf       	rjmp	.-154    	; 0x49e6 <command_common+0x22>
            switch_default_layer(0);
    4a80:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4a82:	0e 94 c4 24 	call	0x4988	; 0x4988 <switch_default_layer>
    4a86:	4e c1       	rjmp	.+668    	; 0x4d24 <command_common+0x360>
    switch (code) {
    4a88:	83 34       	cpi	r24, 0x43	; 67
    4a8a:	38 f4       	brcc	.+14     	; 0x4a9a <command_common+0xd6>
    4a8c:	8a 33       	cpi	r24, 0x3A	; 58
    4a8e:	08 f0       	brcs	.+2      	; 0x4a92 <command_common+0xce>
    4a90:	ea c1       	rjmp	.+980    	; 0x4e66 <command_common+0x4a2>
    4a92:	88 33       	cpi	r24, 0x38	; 56
    4a94:	09 f4       	brne	.+2      	; 0x4a98 <command_common+0xd4>
    4a96:	b2 cf       	rjmp	.-156    	; 0x49fc <command_common+0x38>
    4a98:	a6 cf       	rjmp	.-180    	; 0x49e6 <command_common+0x22>
    4a9a:	83 34       	cpi	r24, 0x43	; 67
    4a9c:	89 f3       	breq	.-30     	; 0x4a80 <command_common+0xbc>
    4a9e:	88 34       	cpi	r24, 0x48	; 72
    4aa0:	09 f0       	breq	.+2      	; 0x4aa4 <command_common+0xe0>
    4aa2:	a1 cf       	rjmp	.-190    	; 0x49e6 <command_common+0x22>
            clear_keyboard();
    4aa4:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <clear_keyboard>
            print("\n\nbootloader... ");
    4aa8:	8a eb       	ldi	r24, 0xBA	; 186
    4aaa:	9b e0       	ldi	r25, 0x0B	; 11
    4aac:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4ab0:	9f ef       	ldi	r25, 0xFF	; 255
    4ab2:	23 ed       	ldi	r18, 0xD3	; 211
    4ab4:	80 e3       	ldi	r24, 0x30	; 48
    4ab6:	91 50       	subi	r25, 0x01	; 1
    4ab8:	20 40       	sbci	r18, 0x00	; 0
    4aba:	80 40       	sbci	r24, 0x00	; 0
    4abc:	e1 f7       	brne	.-8      	; 0x4ab6 <command_common+0xf2>
    4abe:	00 c0       	rjmp	.+0      	; 0x4ac0 <command_common+0xfc>
    4ac0:	00 00       	nop
            bootloader_jump(); // not return
    4ac2:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <bootloader_jump>
            break;
    4ac6:	2e c1       	rjmp	.+604    	; 0x4d24 <command_common+0x360>
            print("eeconfig:\n");
    4ac8:	8f ec       	ldi	r24, 0xCF	; 207
    4aca:	9b e0       	ldi	r25, 0x0B	; 11
    4acc:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4ad0:	8d e8       	ldi	r24, 0x8D	; 141
    4ad2:	99 e0       	ldi	r25, 0x09	; 9
    4ad4:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4ad8:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <eeconfig_read_default_layer>
    4adc:	1f 92       	push	r1
    4ade:	8f 93       	push	r24
    4ae0:	8a e8       	ldi	r24, 0x8A	; 138
    4ae2:	99 e0       	ldi	r25, 0x09	; 9
    4ae4:	9f 93       	push	r25
    4ae6:	8f 93       	push	r24
    4ae8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4aec:	88 e8       	ldi	r24, 0x88	; 136
    4aee:	99 e0       	ldi	r25, 0x09	; 9
    4af0:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    dc.raw = eeconfig_read_debug();
    4af4:	0e 94 cb 20 	call	0x4196	; 0x4196 <eeconfig_read_debug>
    4af8:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4afa:	85 e7       	ldi	r24, 0x75	; 117
    4afc:	99 e0       	ldi	r25, 0x09	; 9
    4afe:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4b02:	1f 92       	push	r1
    4b04:	cf 93       	push	r28
    4b06:	80 e7       	ldi	r24, 0x70	; 112
    4b08:	99 e0       	ldi	r25, 0x09	; 9
    4b0a:	9f 93       	push	r25
    4b0c:	8f 93       	push	r24
    4b0e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4b12:	8e e6       	ldi	r24, 0x6E	; 110
    4b14:	99 e0       	ldi	r25, 0x09	; 9
    4b16:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b1a:	84 e6       	ldi	r24, 0x64	; 100
    4b1c:	99 e0       	ldi	r25, 0x09	; 9
    4b1e:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4b22:	8c 2f       	mov	r24, r28
    4b24:	81 70       	andi	r24, 0x01	; 1
    4b26:	1f 92       	push	r1
    4b28:	8f 93       	push	r24
    4b2a:	81 e6       	ldi	r24, 0x61	; 97
    4b2c:	99 e0       	ldi	r25, 0x09	; 9
    4b2e:	9f 93       	push	r25
    4b30:	8f 93       	push	r24
    4b32:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4b36:	8f e5       	ldi	r24, 0x5F	; 95
    4b38:	99 e0       	ldi	r25, 0x09	; 9
    4b3a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4b3e:	85 e5       	ldi	r24, 0x55	; 85
    4b40:	99 e0       	ldi	r25, 0x09	; 9
    4b42:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4b46:	c1 fb       	bst	r28, 1
    4b48:	88 27       	eor	r24, r24
    4b4a:	80 f9       	bld	r24, 0
    4b4c:	1f 92       	push	r1
    4b4e:	8f 93       	push	r24
    4b50:	82 e5       	ldi	r24, 0x52	; 82
    4b52:	99 e0       	ldi	r25, 0x09	; 9
    4b54:	9f 93       	push	r25
    4b56:	8f 93       	push	r24
    4b58:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4b5c:	80 e5       	ldi	r24, 0x50	; 80
    4b5e:	99 e0       	ldi	r25, 0x09	; 9
    4b60:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4b64:	84 e4       	ldi	r24, 0x44	; 68
    4b66:	99 e0       	ldi	r25, 0x09	; 9
    4b68:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4b6c:	c2 fb       	bst	r28, 2
    4b6e:	88 27       	eor	r24, r24
    4b70:	80 f9       	bld	r24, 0
    4b72:	1f 92       	push	r1
    4b74:	8f 93       	push	r24
    4b76:	81 e4       	ldi	r24, 0x41	; 65
    4b78:	99 e0       	ldi	r25, 0x09	; 9
    4b7a:	9f 93       	push	r25
    4b7c:	8f 93       	push	r24
    4b7e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4b82:	8f e3       	ldi	r24, 0x3F	; 63
    4b84:	99 e0       	ldi	r25, 0x09	; 9
    4b86:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4b8a:	86 e3       	ldi	r24, 0x36	; 54
    4b8c:	99 e0       	ldi	r25, 0x09	; 9
    4b8e:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4b92:	c3 fb       	bst	r28, 3
    4b94:	cc 27       	eor	r28, r28
    4b96:	c0 f9       	bld	r28, 0
    4b98:	1f 92       	push	r1
    4b9a:	cf 93       	push	r28
    4b9c:	83 e3       	ldi	r24, 0x33	; 51
    4b9e:	99 e0       	ldi	r25, 0x09	; 9
    4ba0:	9f 93       	push	r25
    4ba2:	8f 93       	push	r24
    4ba4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4ba8:	81 e3       	ldi	r24, 0x31	; 49
    4baa:	99 e0       	ldi	r25, 0x09	; 9
    4bac:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    kc.raw = eeconfig_read_keymap();
    4bb0:	0e 94 dd 20 	call	0x41ba	; 0x41ba <eeconfig_read_keymap>
    4bb4:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4bb6:	8d e1       	ldi	r24, 0x1D	; 29
    4bb8:	99 e0       	ldi	r25, 0x09	; 9
    4bba:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4bbe:	1f 92       	push	r1
    4bc0:	cf 93       	push	r28
    4bc2:	88 e1       	ldi	r24, 0x18	; 24
    4bc4:	99 e0       	ldi	r25, 0x09	; 9
    4bc6:	9f 93       	push	r25
    4bc8:	8f 93       	push	r24
    4bca:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4bce:	86 e1       	ldi	r24, 0x16	; 22
    4bd0:	99 e0       	ldi	r25, 0x09	; 9
    4bd2:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4bd6:	8d ef       	ldi	r24, 0xFD	; 253
    4bd8:	98 e0       	ldi	r25, 0x08	; 8
    4bda:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4bde:	8c 2f       	mov	r24, r28
    4be0:	81 70       	andi	r24, 0x01	; 1
    4be2:	1f 92       	push	r1
    4be4:	8f 93       	push	r24
    4be6:	8a ef       	ldi	r24, 0xFA	; 250
    4be8:	98 e0       	ldi	r25, 0x08	; 8
    4bea:	9f 93       	push	r25
    4bec:	8f 93       	push	r24
    4bee:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4bf2:	8d b7       	in	r24, 0x3d	; 61
    4bf4:	9e b7       	in	r25, 0x3e	; 62
    4bf6:	80 96       	adiw	r24, 0x20	; 32
    4bf8:	0f b6       	in	r0, 0x3f	; 63
    4bfa:	f8 94       	cli
    4bfc:	9e bf       	out	0x3e, r25	; 62
    4bfe:	0f be       	out	0x3f, r0	; 63
    4c00:	8d bf       	out	0x3d, r24	; 61
    4c02:	88 ef       	ldi	r24, 0xF8	; 248
    4c04:	98 e0       	ldi	r25, 0x08	; 8
    4c06:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c0a:	81 ee       	ldi	r24, 0xE1	; 225
    4c0c:	98 e0       	ldi	r25, 0x08	; 8
    4c0e:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4c12:	c1 fb       	bst	r28, 1
    4c14:	88 27       	eor	r24, r24
    4c16:	80 f9       	bld	r24, 0
    4c18:	1f 92       	push	r1
    4c1a:	8f 93       	push	r24
    4c1c:	8e ed       	ldi	r24, 0xDE	; 222
    4c1e:	98 e0       	ldi	r25, 0x08	; 8
    4c20:	9f 93       	push	r25
    4c22:	8f 93       	push	r24
    4c24:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4c28:	8c ed       	ldi	r24, 0xDC	; 220
    4c2a:	98 e0       	ldi	r25, 0x08	; 8
    4c2c:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4c30:	8a ec       	ldi	r24, 0xCA	; 202
    4c32:	98 e0       	ldi	r25, 0x08	; 8
    4c34:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4c38:	c2 fb       	bst	r28, 2
    4c3a:	88 27       	eor	r24, r24
    4c3c:	80 f9       	bld	r24, 0
    4c3e:	1f 92       	push	r1
    4c40:	8f 93       	push	r24
    4c42:	87 ec       	ldi	r24, 0xC7	; 199
    4c44:	98 e0       	ldi	r25, 0x08	; 8
    4c46:	9f 93       	push	r25
    4c48:	8f 93       	push	r24
    4c4a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4c4e:	85 ec       	ldi	r24, 0xC5	; 197
    4c50:	98 e0       	ldi	r25, 0x08	; 8
    4c52:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4c56:	83 eb       	ldi	r24, 0xB3	; 179
    4c58:	98 e0       	ldi	r25, 0x08	; 8
    4c5a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4c5e:	c3 fb       	bst	r28, 3
    4c60:	88 27       	eor	r24, r24
    4c62:	80 f9       	bld	r24, 0
    4c64:	1f 92       	push	r1
    4c66:	8f 93       	push	r24
    4c68:	80 eb       	ldi	r24, 0xB0	; 176
    4c6a:	98 e0       	ldi	r25, 0x08	; 8
    4c6c:	9f 93       	push	r25
    4c6e:	8f 93       	push	r24
    4c70:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4c74:	8e ea       	ldi	r24, 0xAE	; 174
    4c76:	98 e0       	ldi	r25, 0x08	; 8
    4c78:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4c7c:	84 ea       	ldi	r24, 0xA4	; 164
    4c7e:	98 e0       	ldi	r25, 0x08	; 8
    4c80:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4c84:	c4 fb       	bst	r28, 4
    4c86:	88 27       	eor	r24, r24
    4c88:	80 f9       	bld	r24, 0
    4c8a:	1f 92       	push	r1
    4c8c:	8f 93       	push	r24
    4c8e:	81 ea       	ldi	r24, 0xA1	; 161
    4c90:	98 e0       	ldi	r25, 0x08	; 8
    4c92:	9f 93       	push	r25
    4c94:	8f 93       	push	r24
    4c96:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4c9a:	8f e9       	ldi	r24, 0x9F	; 159
    4c9c:	98 e0       	ldi	r25, 0x08	; 8
    4c9e:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4ca2:	8d e8       	ldi	r24, 0x8D	; 141
    4ca4:	98 e0       	ldi	r25, 0x08	; 8
    4ca6:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4caa:	c5 fb       	bst	r28, 5
    4cac:	88 27       	eor	r24, r24
    4cae:	80 f9       	bld	r24, 0
    4cb0:	1f 92       	push	r1
    4cb2:	8f 93       	push	r24
    4cb4:	8a e8       	ldi	r24, 0x8A	; 138
    4cb6:	98 e0       	ldi	r25, 0x08	; 8
    4cb8:	9f 93       	push	r25
    4cba:	8f 93       	push	r24
    4cbc:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4cc0:	88 e8       	ldi	r24, 0x88	; 136
    4cc2:	98 e0       	ldi	r25, 0x08	; 8
    4cc4:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4cc8:	8c e6       	ldi	r24, 0x6C	; 108
    4cca:	98 e0       	ldi	r25, 0x08	; 8
    4ccc:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4cd0:	c6 fb       	bst	r28, 6
    4cd2:	88 27       	eor	r24, r24
    4cd4:	80 f9       	bld	r24, 0
    4cd6:	1f 92       	push	r1
    4cd8:	8f 93       	push	r24
    4cda:	89 e6       	ldi	r24, 0x69	; 105
    4cdc:	98 e0       	ldi	r25, 0x08	; 8
    4cde:	9f 93       	push	r25
    4ce0:	8f 93       	push	r24
    4ce2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4ce6:	87 e6       	ldi	r24, 0x67	; 103
    4ce8:	98 e0       	ldi	r25, 0x08	; 8
    4cea:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4cee:	8f e5       	ldi	r24, 0x5F	; 95
    4cf0:	98 e0       	ldi	r25, 0x08	; 8
    4cf2:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4cf6:	c7 fb       	bst	r28, 7
    4cf8:	cc 27       	eor	r28, r28
    4cfa:	c0 f9       	bld	r28, 0
    4cfc:	1f 92       	push	r1
    4cfe:	cf 93       	push	r28
    4d00:	8c e5       	ldi	r24, 0x5C	; 92
    4d02:	98 e0       	ldi	r25, 0x08	; 8
    4d04:	9f 93       	push	r25
    4d06:	8f 93       	push	r24
    4d08:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4d0c:	8a e5       	ldi	r24, 0x5A	; 90
    4d0e:	98 e0       	ldi	r25, 0x08	; 8
    4d10:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4d14:	8d b7       	in	r24, 0x3d	; 61
    4d16:	9e b7       	in	r25, 0x3e	; 62
    4d18:	4c 96       	adiw	r24, 0x1c	; 28
    4d1a:	0f b6       	in	r0, 0x3f	; 63
    4d1c:	f8 94       	cli
    4d1e:	9e bf       	out	0x3e, r25	; 62
    4d20:	0f be       	out	0x3f, r0	; 63
    4d22:	8d bf       	out	0x3d, r24	; 61
    return true;
    4d24:	c1 e0       	ldi	r28, 0x01	; 1
            break;
    4d26:	99 c0       	rjmp	.+306    	; 0x4e5a <command_common+0x496>
            debug_enable   = false;
    4d28:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    4d2c:	80 7f       	andi	r24, 0xF0	; 240
    4d2e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <debug_config>
    print("\n\t- Console -\n"
    4d32:	8e e8       	ldi	r24, 0x8E	; 142
    4d34:	97 e0       	ldi	r25, 0x07	; 7
    4d36:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            print("C> ");
    4d3a:	8b ec       	ldi	r24, 0xCB	; 203
    4d3c:	9b e0       	ldi	r25, 0x0B	; 11
    4d3e:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            command_state = CONSOLE;
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <command_state>
            break;
    4d48:	ed cf       	rjmp	.-38     	; 0x4d24 <command_common+0x360>
            if (debug_enable) {
    4d4a:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    4d4e:	80 ff       	sbrs	r24, 0
    4d50:	0a c0       	rjmp	.+20     	; 0x4d66 <command_common+0x3a2>
                print("\ndebug: off\n");
    4d52:	8d ea       	ldi	r24, 0xAD	; 173
    4d54:	9b e0       	ldi	r25, 0x0B	; 11
    4d56:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
                debug_enable   = false;
    4d5a:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    4d5e:	80 7f       	andi	r24, 0xF0	; 240
                debug_enable = true;
    4d60:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <debug_config>
    4d64:	df cf       	rjmp	.-66     	; 0x4d24 <command_common+0x360>
                print("\ndebug: on\n");
    4d66:	81 ea       	ldi	r24, 0xA1	; 161
    4d68:	9b e0       	ldi	r25, 0x0B	; 11
                print("\nmouse: on\n");
    4d6a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
                debug_enable = true;
    4d6e:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <debug_config>
    4d72:	81 60       	ori	r24, 0x01	; 1
    4d74:	f5 cf       	rjmp	.-22     	; 0x4d60 <command_common+0x39c>
            debug_matrix = !debug_matrix;
    4d76:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    4d7a:	89 2f       	mov	r24, r25
    4d7c:	8d 7f       	andi	r24, 0xFD	; 253
    4d7e:	91 ff       	sbrs	r25, 1
    4d80:	82 60       	ori	r24, 0x02	; 2
    4d82:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <debug_config>
            if (debug_matrix) {
    4d86:	81 ff       	sbrs	r24, 1
    4d88:	03 c0       	rjmp	.+6      	; 0x4d90 <command_common+0x3cc>
                print("\nmatrix: on\n");
    4d8a:	84 e9       	ldi	r24, 0x94	; 148
    4d8c:	9b e0       	ldi	r25, 0x0B	; 11
    4d8e:	ed cf       	rjmp	.-38     	; 0x4d6a <command_common+0x3a6>
                print("\nmatrix: off\n");
    4d90:	86 e8       	ldi	r24, 0x86	; 134
    4d92:	9b e0       	ldi	r25, 0x0B	; 11
    4d94:	35 ce       	rjmp	.-918    	; 0x4a00 <command_common+0x3c>
            debug_keyboard = !debug_keyboard;
    4d96:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <debug_config>
    4d9a:	89 2f       	mov	r24, r25
    4d9c:	8b 7f       	andi	r24, 0xFB	; 251
    4d9e:	92 ff       	sbrs	r25, 2
    4da0:	84 60       	ori	r24, 0x04	; 4
    4da2:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <debug_config>
            if (debug_keyboard) {
    4da6:	82 ff       	sbrs	r24, 2
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <command_common+0x3ec>
                print("\nkeyboard: on\n");
    4daa:	87 e7       	ldi	r24, 0x77	; 119
    4dac:	9b e0       	ldi	r25, 0x0B	; 11
    4dae:	dd cf       	rjmp	.-70     	; 0x4d6a <command_common+0x3a6>
                print("\nkeyboard: off\n");
    4db0:	87 e6       	ldi	r24, 0x67	; 103
    4db2:	9b e0       	ldi	r25, 0x0B	; 11
    4db4:	25 ce       	rjmp	.-950    	; 0x4a00 <command_common+0x3c>
                print("\nmouse: off\n");
    4db6:	8e e4       	ldi	r24, 0x4E	; 78
    4db8:	9b e0       	ldi	r25, 0x0B	; 11
    4dba:	22 ce       	rjmp	.-956    	; 0x4a00 <command_common+0x3c>
            print("\n\t- Status -\n");
    4dbc:	82 e2       	ldi	r24, 0x22	; 34
    4dbe:	9a e0       	ldi	r25, 0x0A	; 10
    4dc0:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            print_val_hex8(host_keyboard_leds());
    4dc4:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <host_keyboard_leds>
    4dc8:	1f 92       	push	r1
    4dca:	8f 93       	push	r24
    4dcc:	88 e0       	ldi	r24, 0x08	; 8
    4dce:	9a e0       	ldi	r25, 0x0A	; 10
    4dd0:	9f 93       	push	r25
    4dd2:	8f 93       	push	r24
    4dd4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4dd8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    4ddc:	1f 92       	push	r1
    4dde:	8f 93       	push	r24
    4de0:	81 ef       	ldi	r24, 0xF1	; 241
    4de2:	99 e0       	ldi	r25, 0x09	; 9
    4de4:	9f 93       	push	r25
    4de6:	8f 93       	push	r24
    4de8:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            print_val_hex8(keyboard_idle);
    4dec:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <keyboard_idle>
    4df0:	1f 92       	push	r1
    4df2:	8f 93       	push	r24
    4df4:	8e ed       	ldi	r24, 0xDE	; 222
    4df6:	99 e0       	ldi	r25, 0x09	; 9
    4df8:	9f 93       	push	r25
    4dfa:	8f 93       	push	r24
    4dfc:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            print_val_hex8(keyboard_nkro);
    4e00:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <keyboard_nkro>
    4e04:	1f 92       	push	r1
    4e06:	8f 93       	push	r24
    4e08:	8b ec       	ldi	r24, 0xCB	; 203
    4e0a:	99 e0       	ldi	r25, 0x09	; 9
    4e0c:	9f 93       	push	r25
    4e0e:	8f 93       	push	r24
    4e10:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            print_val_hex32(timer_read32());
    4e14:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <timer_read32>
    4e18:	9f 93       	push	r25
    4e1a:	8f 93       	push	r24
    4e1c:	7f 93       	push	r23
    4e1e:	6f 93       	push	r22
    4e20:	84 eb       	ldi	r24, 0xB4	; 180
    4e22:	99 e0       	ldi	r25, 0x09	; 9
    4e24:	9f 93       	push	r25
    4e26:	8f 93       	push	r24
    4e28:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
            break;
    4e2c:	8d b7       	in	r24, 0x3d	; 61
    4e2e:	9e b7       	in	r25, 0x3e	; 62
    4e30:	46 96       	adiw	r24, 0x16	; 22
    4e32:	0f b6       	in	r0, 0x3f	; 63
    4e34:	f8 94       	cli
    4e36:	9e bf       	out	0x3e, r25	; 62
    4e38:	0f be       	out	0x3f, r0	; 63
    4e3a:	8d bf       	out	0x3d, r24	; 61
    4e3c:	73 cf       	rjmp	.-282    	; 0x4d24 <command_common+0x360>
            clear_keyboard(); //Prevents stuck keys.
    4e3e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4e42:	c0 91 11 01 	lds	r28, 0x0111	; 0x800111 <keyboard_nkro>
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	c8 27       	eor	r28, r24
    4e4a:	c0 93 11 01 	sts	0x0111, r28	; 0x800111 <keyboard_nkro>
            if (keyboard_nkro) {
    4e4e:	cc 23       	and	r28, r28
    4e50:	39 f0       	breq	.+14     	; 0x4e60 <command_common+0x49c>
                print("NKRO: on\n");
    4e52:	8a ea       	ldi	r24, 0xAA	; 170
    4e54:	99 e0       	ldi	r25, 0x09	; 9
    4e56:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
}
    4e5a:	8c 2f       	mov	r24, r28
    4e5c:	cf 91       	pop	r28
    4e5e:	08 95       	ret
                print("NKRO: off\n");
    4e60:	8f e9       	ldi	r24, 0x9F	; 159
    4e62:	99 e0       	ldi	r25, 0x09	; 9
    4e64:	cd cd       	rjmp	.-1126   	; 0x4a00 <command_common+0x3c>
            switch_default_layer((code - KC_F1) + 1);
    4e66:	89 53       	subi	r24, 0x39	; 57
    4e68:	0c ce       	rjmp	.-1000   	; 0x4a82 <command_common+0xbe>

00004e6a <command_extra>:
}
    4e6a:	80 e0       	ldi	r24, 0x00	; 0
    4e6c:	08 95       	ret

00004e6e <command_console_extra>:
    4e6e:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <command_extra>

00004e72 <command_proc>:
{
    4e72:	cf 93       	push	r28
    4e74:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4e76:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <command_state>
    4e7a:	81 30       	cpi	r24, 0x01	; 1
    4e7c:	e1 f0       	breq	.+56     	; 0x4eb6 <command_proc+0x44>
    4e7e:	88 23       	and	r24, r24
    4e80:	39 f0       	breq	.+14     	; 0x4e90 <command_proc+0x1e>
    4e82:	82 30       	cpi	r24, 0x02	; 2
    4e84:	09 f4       	brne	.+2      	; 0x4e88 <command_proc+0x16>
    4e86:	4f c0       	rjmp	.+158    	; 0x4f26 <command_proc+0xb4>
            command_state = ONESHOT;
    4e88:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <command_state>
                return false;
    4e8c:	80 e0       	ldi	r24, 0x00	; 0
    4e8e:	11 c0       	rjmp	.+34     	; 0x4eb2 <command_proc+0x40>
            if (!IS_COMMAND())
    4e90:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    4e94:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    4e98:	80 81       	ld	r24, Z
    4e9a:	81 52       	subi	r24, 0x21	; 33
    4e9c:	82 30       	cpi	r24, 0x02	; 2
    4e9e:	b0 f7       	brcc	.-20     	; 0x4e8c <command_proc+0x1a>
                return (command_extra(code) || command_common(code));
    4ea0:	8c 2f       	mov	r24, r28
    4ea2:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <command_extra>
    4ea6:	81 11       	cpse	r24, r1
    4ea8:	1f c0       	rjmp	.+62     	; 0x4ee8 <command_proc+0x76>
    4eaa:	8c 2f       	mov	r24, r28
    4eac:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <command_common>
                return (command_console_extra(code) || command_console(code));
    4eb0:	81 70       	andi	r24, 0x01	; 1
}
    4eb2:	cf 91       	pop	r28
    4eb4:	08 95       	ret
            if (IS_COMMAND())
    4eb6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    4eba:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    4ebe:	80 81       	ld	r24, Z
    4ec0:	81 52       	subi	r24, 0x21	; 33
    4ec2:	82 30       	cpi	r24, 0x02	; 2
    4ec4:	68 f3       	brcs	.-38     	; 0x4ea0 <command_proc+0x2e>
                return (command_console_extra(code) || command_console(code));
    4ec6:	8c 2f       	mov	r24, r28
    4ec8:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <command_console_extra>
    4ecc:	81 11       	cpse	r24, r1
    4ece:	1b c0       	rjmp	.+54     	; 0x4f06 <command_proc+0x94>
    switch (code) {
    4ed0:	c4 31       	cpi	r28, 0x14	; 20
    4ed2:	d9 f0       	breq	.+54     	; 0x4f0a <command_proc+0x98>
    4ed4:	60 f4       	brcc	.+24     	; 0x4eee <command_proc+0x7c>
    4ed6:	cb 30       	cpi	r28, 0x0B	; 11
    4ed8:	71 f0       	breq	.+28     	; 0x4ef6 <command_proc+0x84>
    4eda:	c0 31       	cpi	r28, 0x10	; 16
    4edc:	d1 f0       	breq	.+52     	; 0x4f12 <command_proc+0xa0>
            print("?");
    4ede:	8f e7       	ldi	r24, 0x7F	; 127
    4ee0:	97 e0       	ldi	r25, 0x07	; 7
    4ee2:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4ee6:	13 c0       	rjmp	.+38     	; 0x4f0e <command_proc+0x9c>
                return (command_extra(code) || command_common(code));
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	e1 cf       	rjmp	.-62     	; 0x4eb0 <command_proc+0x3e>
    switch (code) {
    4eee:	c9 32       	cpi	r28, 0x29	; 41
    4ef0:	61 f0       	breq	.+24     	; 0x4f0a <command_proc+0x98>
    4ef2:	c8 33       	cpi	r28, 0x38	; 56
    4ef4:	a1 f7       	brne	.-24     	; 0x4ede <command_proc+0x6c>
    print("\n\t- Console -\n"
    4ef6:	8e e8       	ldi	r24, 0x8E	; 142
    4ef8:	97 e0       	ldi	r25, 0x07	; 7
    4efa:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("C> ");
    4efe:	85 e8       	ldi	r24, 0x85	; 133
    4f00:	97 e0       	ldi	r25, 0x07	; 7
    4f02:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
                return (command_console_extra(code) || command_console(code));
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	d3 cf       	rjmp	.-90     	; 0x4eb0 <command_proc+0x3e>
            command_state = ONESHOT;
    4f0a:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <command_state>
                return (command_console_extra(code) || command_console(code));
    4f0e:	80 e0       	ldi	r24, 0x00	; 0
    4f10:	cf cf       	rjmp	.-98     	; 0x4eb0 <command_proc+0x3e>
            mousekey_console_help();
    4f12:	0e 94 8a 23 	call	0x4714	; 0x4714 <mousekey_console_help>
            print("M> ");
    4f16:	81 e8       	ldi	r24, 0x81	; 129
    4f18:	97 e0       	ldi	r25, 0x07	; 7
    4f1a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            command_state = MOUSEKEY;
    4f1e:	82 e0       	ldi	r24, 0x02	; 2
    4f20:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <command_state>
            return true;
    4f24:	f0 cf       	rjmp	.-32     	; 0x4f06 <command_proc+0x94>
    switch (code) {
    4f26:	c4 32       	cpi	r28, 0x24	; 36
    4f28:	c8 f4       	brcc	.+50     	; 0x4f5c <command_proc+0xea>
    4f2a:	ce 31       	cpi	r28, 0x1E	; 30
    4f2c:	08 f0       	brcs	.+2      	; 0x4f30 <command_proc+0xbe>
    4f2e:	be c0       	rjmp	.+380    	; 0x50ac <command_proc+0x23a>
    4f30:	cb 30       	cpi	r28, 0x0B	; 11
    4f32:	e1 f0       	breq	.+56     	; 0x4f6c <command_proc+0xfa>
    4f34:	40 f4       	brcc	.+16     	; 0x4f46 <command_proc+0xd4>
    4f36:	c7 30       	cpi	r28, 0x07	; 7
    4f38:	09 f4       	brne	.+2      	; 0x4f3c <command_proc+0xca>
    4f3a:	cf c0       	rjmp	.+414    	; 0x50da <command_proc+0x268>
            print("?");
    4f3c:	83 e2       	ldi	r24, 0x23	; 35
    4f3e:	96 e0       	ldi	r25, 0x06	; 6
        print("M>" );
    4f40:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4f44:	26 c0       	rjmp	.+76     	; 0x4f92 <command_proc+0x120>
    switch (code) {
    4f46:	c3 31       	cpi	r28, 0x13	; 19
    4f48:	c1 f1       	breq	.+112    	; 0x4fba <command_proc+0x148>
    4f4a:	c4 31       	cpi	r28, 0x14	; 20
    4f4c:	b9 f7       	brne	.-18     	; 0x4f3c <command_proc+0xca>
            if (mousekey_param) {
    4f4e:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <mousekey_param>
    4f52:	88 23       	and	r24, r24
    4f54:	51 f1       	breq	.+84     	; 0x4faa <command_proc+0x138>
                mousekey_param = 0;
    4f56:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <mousekey_param>
            break;
    4f5a:	0a c0       	rjmp	.+20     	; 0x4f70 <command_proc+0xfe>
    switch (code) {
    4f5c:	cb 34       	cpi	r28, 0x4B	; 75
    4f5e:	09 f4       	brne	.+2      	; 0x4f62 <command_proc+0xf0>
    4f60:	ba c0       	rjmp	.+372    	; 0x50d6 <command_proc+0x264>
    4f62:	c8 f4       	brcc	.+50     	; 0x4f96 <command_proc+0x124>
    4f64:	c9 32       	cpi	r28, 0x29	; 41
    4f66:	99 f3       	breq	.-26     	; 0x4f4e <command_proc+0xdc>
    4f68:	c8 33       	cpi	r28, 0x38	; 56
    4f6a:	41 f7       	brne	.-48     	; 0x4f3c <command_proc+0xca>
            mousekey_console_help();
    4f6c:	0e 94 8a 23 	call	0x4714	; 0x4714 <mousekey_console_help>
    if (mousekey_param) {
    4f70:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <mousekey_param>
    4f74:	88 23       	and	r24, r24
    4f76:	09 f4       	brne	.+2      	; 0x4f7a <command_proc+0x108>
    4f78:	c7 c0       	rjmp	.+398    	; 0x5108 <command_proc+0x296>
        xprintf("M%d> ", mousekey_param);
    4f7a:	1f 92       	push	r1
    4f7c:	8f 93       	push	r24
    4f7e:	8d e1       	ldi	r24, 0x1D	; 29
    4f80:	96 e0       	ldi	r25, 0x06	; 6
    4f82:	9f 93       	push	r25
    4f84:	8f 93       	push	r24
    4f86:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4f8a:	0f 90       	pop	r0
    4f8c:	0f 90       	pop	r0
    4f8e:	0f 90       	pop	r0
    4f90:	0f 90       	pop	r0
    return true;
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	8e cf       	rjmp	.-228    	; 0x4eb2 <command_proc+0x40>
    switch (code) {
    4f96:	c1 35       	cpi	r28, 0x51	; 81
    4f98:	09 f4       	brne	.+2      	; 0x4f9c <command_proc+0x12a>
    4f9a:	97 c0       	rjmp	.+302    	; 0x50ca <command_proc+0x258>
    4f9c:	c2 35       	cpi	r28, 0x52	; 82
    4f9e:	09 f4       	brne	.+2      	; 0x4fa2 <command_proc+0x130>
    4fa0:	8e c0       	rjmp	.+284    	; 0x50be <command_proc+0x24c>
    4fa2:	ce 34       	cpi	r28, 0x4E	; 78
    4fa4:	59 f6       	brne	.-106    	; 0x4f3c <command_proc+0xca>
            mousekey_param_dec(mousekey_param, 10);
    4fa6:	6a e0       	ldi	r22, 0x0A	; 10
    4fa8:	91 c0       	rjmp	.+290    	; 0x50cc <command_proc+0x25a>
                print("C> ");
    4faa:	82 e3       	ldi	r24, 0x32	; 50
    4fac:	96 e0       	ldi	r25, 0x06	; 6
    4fae:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
                command_state = CONSOLE;
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <command_state>
                return false;
    4fb8:	7c cf       	rjmp	.-264    	; 0x4eb2 <command_proc+0x40>
    print("\n\t- Values -\n");
    4fba:	8c e0       	ldi	r24, 0x0C	; 12
    4fbc:	96 e0       	ldi	r25, 0x06	; 6
    4fbe:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4fc2:	8a ef       	ldi	r24, 0xFA	; 250
    4fc4:	95 e0       	ldi	r25, 0x05	; 5
    4fc6:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4fca:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_delay>
    4fce:	1f 92       	push	r1
    4fd0:	8f 93       	push	r24
    4fd2:	87 ef       	ldi	r24, 0xF7	; 247
    4fd4:	95 e0       	ldi	r25, 0x05	; 5
    4fd6:	9f 93       	push	r25
    4fd8:	8f 93       	push	r24
    4fda:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    4fde:	85 ef       	ldi	r24, 0xF5	; 245
    4fe0:	95 e0       	ldi	r25, 0x05	; 5
    4fe2:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4fe6:	83 ee       	ldi	r24, 0xE3	; 227
    4fe8:	95 e0       	ldi	r25, 0x05	; 5
    4fea:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    4fee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_interval>
    4ff2:	1f 92       	push	r1
    4ff4:	8f 93       	push	r24
    4ff6:	80 ee       	ldi	r24, 0xE0	; 224
    4ff8:	95 e0       	ldi	r25, 0x05	; 5
    4ffa:	9f 93       	push	r25
    4ffc:	8f 93       	push	r24
    4ffe:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    5002:	8e ed       	ldi	r24, 0xDE	; 222
    5004:	95 e0       	ldi	r25, 0x05	; 5
    5006:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    500a:	8f ec       	ldi	r24, 0xCF	; 207
    500c:	95 e0       	ldi	r25, 0x05	; 5
    500e:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    5012:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_max_speed>
    5016:	1f 92       	push	r1
    5018:	8f 93       	push	r24
    501a:	8c ec       	ldi	r24, 0xCC	; 204
    501c:	95 e0       	ldi	r25, 0x05	; 5
    501e:	9f 93       	push	r25
    5020:	8f 93       	push	r24
    5022:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    5026:	8a ec       	ldi	r24, 0xCA	; 202
    5028:	95 e0       	ldi	r25, 0x05	; 5
    502a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    502e:	89 eb       	ldi	r24, 0xB9	; 185
    5030:	95 e0       	ldi	r25, 0x05	; 5
    5032:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    5036:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_time_to_max>
    503a:	1f 92       	push	r1
    503c:	8f 93       	push	r24
    503e:	86 eb       	ldi	r24, 0xB6	; 182
    5040:	95 e0       	ldi	r25, 0x05	; 5
    5042:	9f 93       	push	r25
    5044:	8f 93       	push	r24
    5046:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    504a:	84 eb       	ldi	r24, 0xB4	; 180
    504c:	95 e0       	ldi	r25, 0x05	; 5
    504e:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5052:	8f e9       	ldi	r24, 0x9F	; 159
    5054:	95 e0       	ldi	r25, 0x05	; 5
    5056:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    505a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_wheel_max_speed>
    505e:	1f 92       	push	r1
    5060:	8f 93       	push	r24
    5062:	8c e9       	ldi	r24, 0x9C	; 156
    5064:	95 e0       	ldi	r25, 0x05	; 5
    5066:	9f 93       	push	r25
    5068:	8f 93       	push	r24
    506a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    506e:	8a e9       	ldi	r24, 0x9A	; 154
    5070:	95 e0       	ldi	r25, 0x05	; 5
    5072:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5076:	83 e8       	ldi	r24, 0x83	; 131
    5078:	95 e0       	ldi	r25, 0x05	; 5
    507a:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    507e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_time_to_max>
    5082:	1f 92       	push	r1
    5084:	8f 93       	push	r24
    5086:	80 e8       	ldi	r24, 0x80	; 128
    5088:	95 e0       	ldi	r25, 0x05	; 5
    508a:	9f 93       	push	r25
    508c:	8f 93       	push	r24
    508e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__xprintf>
    5092:	8e e7       	ldi	r24, 0x7E	; 126
    5094:	95 e0       	ldi	r25, 0x05	; 5
    5096:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
    509a:	8d b7       	in	r24, 0x3d	; 61
    509c:	9e b7       	in	r25, 0x3e	; 62
    509e:	48 96       	adiw	r24, 0x18	; 24
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	f8 94       	cli
    50a4:	9e bf       	out	0x3e, r25	; 62
    50a6:	0f be       	out	0x3f, r0	; 63
    50a8:	8d bf       	out	0x3d, r24	; 61
    50aa:	62 cf       	rjmp	.-316    	; 0x4f70 <command_proc+0xfe>
            mousekey_param = numkey2num(code);
    50ac:	ce 51       	subi	r28, 0x1E	; 30
    50ae:	ec 2f       	mov	r30, r28
    50b0:	f0 e0       	ldi	r31, 0x00	; 0
    50b2:	ec 5c       	subi	r30, 0xCC	; 204
    50b4:	fe 4f       	sbci	r31, 0xFE	; 254
    50b6:	80 81       	ld	r24, Z
    50b8:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <mousekey_param>
            break;
    50bc:	59 cf       	rjmp	.-334    	; 0x4f70 <command_proc+0xfe>
            mousekey_param_inc(mousekey_param, 1);
    50be:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_inc(mousekey_param, 10);
    50c0:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <mousekey_param>
    50c4:	0e 94 a1 23 	call	0x4742	; 0x4742 <mousekey_param_inc>
            break;
    50c8:	53 cf       	rjmp	.-346    	; 0x4f70 <command_proc+0xfe>
            mousekey_param_dec(mousekey_param, 1);
    50ca:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    50cc:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <mousekey_param>
    50d0:	0e 94 45 24 	call	0x488a	; 0x488a <mousekey_param_dec>
            break;
    50d4:	4d cf       	rjmp	.-358    	; 0x4f70 <command_proc+0xfe>
            mousekey_param_inc(mousekey_param, 10);
    50d6:	6a e0       	ldi	r22, 0x0A	; 10
    50d8:	f3 cf       	rjmp	.-26     	; 0x50c0 <command_proc+0x24e>
            mk_delay = MOUSEKEY_DELAY/10;
    50da:	8e e1       	ldi	r24, 0x1E	; 30
    50dc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    50e0:	82 e3       	ldi	r24, 0x32	; 50
    50e2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    50e6:	8a e0       	ldi	r24, 0x0A	; 10
    50e8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    50ec:	84 e1       	ldi	r24, 0x14	; 20
    50ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    50f2:	88 e0       	ldi	r24, 0x08	; 8
    50f4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    50f8:	88 e2       	ldi	r24, 0x28	; 40
    50fa:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_time_to_max>
            print("set default\n");
    50fe:	85 e2       	ldi	r24, 0x25	; 37
    5100:	96 e0       	ldi	r25, 0x06	; 6
    5102:	0e 94 43 06 	call	0xc86	; 0xc86 <xputs>
            break;
    5106:	34 cf       	rjmp	.-408    	; 0x4f70 <command_proc+0xfe>
        print("M>" );
    5108:	8a e1       	ldi	r24, 0x1A	; 26
    510a:	96 e0       	ldi	r25, 0x06	; 6
    510c:	19 cf       	rjmp	.-462    	; 0x4f40 <command_proc+0xce>

0000510e <__fixsfsi>:
    510e:	0e 94 8e 28 	call	0x511c	; 0x511c <__fixunssfsi>
    5112:	68 94       	set
    5114:	b1 11       	cpse	r27, r1
    5116:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__fp_szero>
    511a:	08 95       	ret

0000511c <__fixunssfsi>:
    511c:	0e 94 02 29 	call	0x5204	; 0x5204 <__fp_splitA>
    5120:	88 f0       	brcs	.+34     	; 0x5144 <__fixunssfsi+0x28>
    5122:	9f 57       	subi	r25, 0x7F	; 127
    5124:	98 f0       	brcs	.+38     	; 0x514c <__fixunssfsi+0x30>
    5126:	b9 2f       	mov	r27, r25
    5128:	99 27       	eor	r25, r25
    512a:	b7 51       	subi	r27, 0x17	; 23
    512c:	b0 f0       	brcs	.+44     	; 0x515a <__fixunssfsi+0x3e>
    512e:	e1 f0       	breq	.+56     	; 0x5168 <__fixunssfsi+0x4c>
    5130:	66 0f       	add	r22, r22
    5132:	77 1f       	adc	r23, r23
    5134:	88 1f       	adc	r24, r24
    5136:	99 1f       	adc	r25, r25
    5138:	1a f0       	brmi	.+6      	; 0x5140 <__fixunssfsi+0x24>
    513a:	ba 95       	dec	r27
    513c:	c9 f7       	brne	.-14     	; 0x5130 <__fixunssfsi+0x14>
    513e:	14 c0       	rjmp	.+40     	; 0x5168 <__fixunssfsi+0x4c>
    5140:	b1 30       	cpi	r27, 0x01	; 1
    5142:	91 f0       	breq	.+36     	; 0x5168 <__fixunssfsi+0x4c>
    5144:	0e 94 1c 29 	call	0x5238	; 0x5238 <__fp_zero>
    5148:	b1 e0       	ldi	r27, 0x01	; 1
    514a:	08 95       	ret
    514c:	0c 94 1c 29 	jmp	0x5238	; 0x5238 <__fp_zero>
    5150:	67 2f       	mov	r22, r23
    5152:	78 2f       	mov	r23, r24
    5154:	88 27       	eor	r24, r24
    5156:	b8 5f       	subi	r27, 0xF8	; 248
    5158:	39 f0       	breq	.+14     	; 0x5168 <__fixunssfsi+0x4c>
    515a:	b9 3f       	cpi	r27, 0xF9	; 249
    515c:	cc f3       	brlt	.-14     	; 0x5150 <__fixunssfsi+0x34>
    515e:	86 95       	lsr	r24
    5160:	77 95       	ror	r23
    5162:	67 95       	ror	r22
    5164:	b3 95       	inc	r27
    5166:	d9 f7       	brne	.-10     	; 0x515e <__fixunssfsi+0x42>
    5168:	3e f4       	brtc	.+14     	; 0x5178 <__fixunssfsi+0x5c>
    516a:	90 95       	com	r25
    516c:	80 95       	com	r24
    516e:	70 95       	com	r23
    5170:	61 95       	neg	r22
    5172:	7f 4f       	sbci	r23, 0xFF	; 255
    5174:	8f 4f       	sbci	r24, 0xFF	; 255
    5176:	9f 4f       	sbci	r25, 0xFF	; 255
    5178:	08 95       	ret

0000517a <__floatunsisf>:
    517a:	e8 94       	clt
    517c:	09 c0       	rjmp	.+18     	; 0x5190 <__floatsisf+0x12>

0000517e <__floatsisf>:
    517e:	97 fb       	bst	r25, 7
    5180:	3e f4       	brtc	.+14     	; 0x5190 <__floatsisf+0x12>
    5182:	90 95       	com	r25
    5184:	80 95       	com	r24
    5186:	70 95       	com	r23
    5188:	61 95       	neg	r22
    518a:	7f 4f       	sbci	r23, 0xFF	; 255
    518c:	8f 4f       	sbci	r24, 0xFF	; 255
    518e:	9f 4f       	sbci	r25, 0xFF	; 255
    5190:	99 23       	and	r25, r25
    5192:	a9 f0       	breq	.+42     	; 0x51be <__floatsisf+0x40>
    5194:	f9 2f       	mov	r31, r25
    5196:	96 e9       	ldi	r25, 0x96	; 150
    5198:	bb 27       	eor	r27, r27
    519a:	93 95       	inc	r25
    519c:	f6 95       	lsr	r31
    519e:	87 95       	ror	r24
    51a0:	77 95       	ror	r23
    51a2:	67 95       	ror	r22
    51a4:	b7 95       	ror	r27
    51a6:	f1 11       	cpse	r31, r1
    51a8:	f8 cf       	rjmp	.-16     	; 0x519a <__floatsisf+0x1c>
    51aa:	fa f4       	brpl	.+62     	; 0x51ea <__floatsisf+0x6c>
    51ac:	bb 0f       	add	r27, r27
    51ae:	11 f4       	brne	.+4      	; 0x51b4 <__floatsisf+0x36>
    51b0:	60 ff       	sbrs	r22, 0
    51b2:	1b c0       	rjmp	.+54     	; 0x51ea <__floatsisf+0x6c>
    51b4:	6f 5f       	subi	r22, 0xFF	; 255
    51b6:	7f 4f       	sbci	r23, 0xFF	; 255
    51b8:	8f 4f       	sbci	r24, 0xFF	; 255
    51ba:	9f 4f       	sbci	r25, 0xFF	; 255
    51bc:	16 c0       	rjmp	.+44     	; 0x51ea <__floatsisf+0x6c>
    51be:	88 23       	and	r24, r24
    51c0:	11 f0       	breq	.+4      	; 0x51c6 <__floatsisf+0x48>
    51c2:	96 e9       	ldi	r25, 0x96	; 150
    51c4:	11 c0       	rjmp	.+34     	; 0x51e8 <__floatsisf+0x6a>
    51c6:	77 23       	and	r23, r23
    51c8:	21 f0       	breq	.+8      	; 0x51d2 <__floatsisf+0x54>
    51ca:	9e e8       	ldi	r25, 0x8E	; 142
    51cc:	87 2f       	mov	r24, r23
    51ce:	76 2f       	mov	r23, r22
    51d0:	05 c0       	rjmp	.+10     	; 0x51dc <__floatsisf+0x5e>
    51d2:	66 23       	and	r22, r22
    51d4:	71 f0       	breq	.+28     	; 0x51f2 <__floatsisf+0x74>
    51d6:	96 e8       	ldi	r25, 0x86	; 134
    51d8:	86 2f       	mov	r24, r22
    51da:	70 e0       	ldi	r23, 0x00	; 0
    51dc:	60 e0       	ldi	r22, 0x00	; 0
    51de:	2a f0       	brmi	.+10     	; 0x51ea <__floatsisf+0x6c>
    51e0:	9a 95       	dec	r25
    51e2:	66 0f       	add	r22, r22
    51e4:	77 1f       	adc	r23, r23
    51e6:	88 1f       	adc	r24, r24
    51e8:	da f7       	brpl	.-10     	; 0x51e0 <__floatsisf+0x62>
    51ea:	88 0f       	add	r24, r24
    51ec:	96 95       	lsr	r25
    51ee:	87 95       	ror	r24
    51f0:	97 f9       	bld	r25, 7
    51f2:	08 95       	ret

000051f4 <__fp_split3>:
    51f4:	57 fd       	sbrc	r21, 7
    51f6:	90 58       	subi	r25, 0x80	; 128
    51f8:	44 0f       	add	r20, r20
    51fa:	55 1f       	adc	r21, r21
    51fc:	59 f0       	breq	.+22     	; 0x5214 <__fp_splitA+0x10>
    51fe:	5f 3f       	cpi	r21, 0xFF	; 255
    5200:	71 f0       	breq	.+28     	; 0x521e <__fp_splitA+0x1a>
    5202:	47 95       	ror	r20

00005204 <__fp_splitA>:
    5204:	88 0f       	add	r24, r24
    5206:	97 fb       	bst	r25, 7
    5208:	99 1f       	adc	r25, r25
    520a:	61 f0       	breq	.+24     	; 0x5224 <__fp_splitA+0x20>
    520c:	9f 3f       	cpi	r25, 0xFF	; 255
    520e:	79 f0       	breq	.+30     	; 0x522e <__fp_splitA+0x2a>
    5210:	87 95       	ror	r24
    5212:	08 95       	ret
    5214:	12 16       	cp	r1, r18
    5216:	13 06       	cpc	r1, r19
    5218:	14 06       	cpc	r1, r20
    521a:	55 1f       	adc	r21, r21
    521c:	f2 cf       	rjmp	.-28     	; 0x5202 <__fp_split3+0xe>
    521e:	46 95       	lsr	r20
    5220:	f1 df       	rcall	.-30     	; 0x5204 <__fp_splitA>
    5222:	08 c0       	rjmp	.+16     	; 0x5234 <__fp_splitA+0x30>
    5224:	16 16       	cp	r1, r22
    5226:	17 06       	cpc	r1, r23
    5228:	18 06       	cpc	r1, r24
    522a:	99 1f       	adc	r25, r25
    522c:	f1 cf       	rjmp	.-30     	; 0x5210 <__fp_splitA+0xc>
    522e:	86 95       	lsr	r24
    5230:	71 05       	cpc	r23, r1
    5232:	61 05       	cpc	r22, r1
    5234:	08 94       	sec
    5236:	08 95       	ret

00005238 <__fp_zero>:
    5238:	e8 94       	clt

0000523a <__fp_szero>:
    523a:	bb 27       	eor	r27, r27
    523c:	66 27       	eor	r22, r22
    523e:	77 27       	eor	r23, r23
    5240:	cb 01       	movw	r24, r22
    5242:	97 f9       	bld	r25, 7
    5244:	08 95       	ret

00005246 <__mulsf3>:
    5246:	0e 94 36 29 	call	0x526c	; 0x526c <__mulsf3x>
    524a:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__fp_round>
    524e:	0e 94 99 29 	call	0x5332	; 0x5332 <__fp_pscA>
    5252:	38 f0       	brcs	.+14     	; 0x5262 <__mulsf3+0x1c>
    5254:	0e 94 a0 29 	call	0x5340	; 0x5340 <__fp_pscB>
    5258:	20 f0       	brcs	.+8      	; 0x5262 <__mulsf3+0x1c>
    525a:	95 23       	and	r25, r21
    525c:	11 f0       	breq	.+4      	; 0x5262 <__mulsf3+0x1c>
    525e:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__fp_inf>
    5262:	0c 94 96 29 	jmp	0x532c	; 0x532c <__fp_nan>
    5266:	11 24       	eor	r1, r1
    5268:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__fp_szero>

0000526c <__mulsf3x>:
    526c:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__fp_split3>
    5270:	70 f3       	brcs	.-36     	; 0x524e <__mulsf3+0x8>

00005272 <__mulsf3_pse>:
    5272:	95 9f       	mul	r25, r21
    5274:	c1 f3       	breq	.-16     	; 0x5266 <__mulsf3+0x20>
    5276:	95 0f       	add	r25, r21
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	55 1f       	adc	r21, r21
    527c:	62 9f       	mul	r22, r18
    527e:	f0 01       	movw	r30, r0
    5280:	72 9f       	mul	r23, r18
    5282:	bb 27       	eor	r27, r27
    5284:	f0 0d       	add	r31, r0
    5286:	b1 1d       	adc	r27, r1
    5288:	63 9f       	mul	r22, r19
    528a:	aa 27       	eor	r26, r26
    528c:	f0 0d       	add	r31, r0
    528e:	b1 1d       	adc	r27, r1
    5290:	aa 1f       	adc	r26, r26
    5292:	64 9f       	mul	r22, r20
    5294:	66 27       	eor	r22, r22
    5296:	b0 0d       	add	r27, r0
    5298:	a1 1d       	adc	r26, r1
    529a:	66 1f       	adc	r22, r22
    529c:	82 9f       	mul	r24, r18
    529e:	22 27       	eor	r18, r18
    52a0:	b0 0d       	add	r27, r0
    52a2:	a1 1d       	adc	r26, r1
    52a4:	62 1f       	adc	r22, r18
    52a6:	73 9f       	mul	r23, r19
    52a8:	b0 0d       	add	r27, r0
    52aa:	a1 1d       	adc	r26, r1
    52ac:	62 1f       	adc	r22, r18
    52ae:	83 9f       	mul	r24, r19
    52b0:	a0 0d       	add	r26, r0
    52b2:	61 1d       	adc	r22, r1
    52b4:	22 1f       	adc	r18, r18
    52b6:	74 9f       	mul	r23, r20
    52b8:	33 27       	eor	r19, r19
    52ba:	a0 0d       	add	r26, r0
    52bc:	61 1d       	adc	r22, r1
    52be:	23 1f       	adc	r18, r19
    52c0:	84 9f       	mul	r24, r20
    52c2:	60 0d       	add	r22, r0
    52c4:	21 1d       	adc	r18, r1
    52c6:	82 2f       	mov	r24, r18
    52c8:	76 2f       	mov	r23, r22
    52ca:	6a 2f       	mov	r22, r26
    52cc:	11 24       	eor	r1, r1
    52ce:	9f 57       	subi	r25, 0x7F	; 127
    52d0:	50 40       	sbci	r21, 0x00	; 0
    52d2:	9a f0       	brmi	.+38     	; 0x52fa <__mulsf3_pse+0x88>
    52d4:	f1 f0       	breq	.+60     	; 0x5312 <__mulsf3_pse+0xa0>
    52d6:	88 23       	and	r24, r24
    52d8:	4a f0       	brmi	.+18     	; 0x52ec <__mulsf3_pse+0x7a>
    52da:	ee 0f       	add	r30, r30
    52dc:	ff 1f       	adc	r31, r31
    52de:	bb 1f       	adc	r27, r27
    52e0:	66 1f       	adc	r22, r22
    52e2:	77 1f       	adc	r23, r23
    52e4:	88 1f       	adc	r24, r24
    52e6:	91 50       	subi	r25, 0x01	; 1
    52e8:	50 40       	sbci	r21, 0x00	; 0
    52ea:	a9 f7       	brne	.-22     	; 0x52d6 <__mulsf3_pse+0x64>
    52ec:	9e 3f       	cpi	r25, 0xFE	; 254
    52ee:	51 05       	cpc	r21, r1
    52f0:	80 f0       	brcs	.+32     	; 0x5312 <__mulsf3_pse+0xa0>
    52f2:	0c 94 90 29 	jmp	0x5320	; 0x5320 <__fp_inf>
    52f6:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__fp_szero>
    52fa:	5f 3f       	cpi	r21, 0xFF	; 255
    52fc:	e4 f3       	brlt	.-8      	; 0x52f6 <__mulsf3_pse+0x84>
    52fe:	98 3e       	cpi	r25, 0xE8	; 232
    5300:	d4 f3       	brlt	.-12     	; 0x52f6 <__mulsf3_pse+0x84>
    5302:	86 95       	lsr	r24
    5304:	77 95       	ror	r23
    5306:	67 95       	ror	r22
    5308:	b7 95       	ror	r27
    530a:	f7 95       	ror	r31
    530c:	e7 95       	ror	r30
    530e:	9f 5f       	subi	r25, 0xFF	; 255
    5310:	c1 f7       	brne	.-16     	; 0x5302 <__mulsf3_pse+0x90>
    5312:	fe 2b       	or	r31, r30
    5314:	88 0f       	add	r24, r24
    5316:	91 1d       	adc	r25, r1
    5318:	96 95       	lsr	r25
    531a:	87 95       	ror	r24
    531c:	97 f9       	bld	r25, 7
    531e:	08 95       	ret

00005320 <__fp_inf>:
    5320:	97 f9       	bld	r25, 7
    5322:	9f 67       	ori	r25, 0x7F	; 127
    5324:	80 e8       	ldi	r24, 0x80	; 128
    5326:	70 e0       	ldi	r23, 0x00	; 0
    5328:	60 e0       	ldi	r22, 0x00	; 0
    532a:	08 95       	ret

0000532c <__fp_nan>:
    532c:	9f ef       	ldi	r25, 0xFF	; 255
    532e:	80 ec       	ldi	r24, 0xC0	; 192
    5330:	08 95       	ret

00005332 <__fp_pscA>:
    5332:	00 24       	eor	r0, r0
    5334:	0a 94       	dec	r0
    5336:	16 16       	cp	r1, r22
    5338:	17 06       	cpc	r1, r23
    533a:	18 06       	cpc	r1, r24
    533c:	09 06       	cpc	r0, r25
    533e:	08 95       	ret

00005340 <__fp_pscB>:
    5340:	00 24       	eor	r0, r0
    5342:	0a 94       	dec	r0
    5344:	12 16       	cp	r1, r18
    5346:	13 06       	cpc	r1, r19
    5348:	14 06       	cpc	r1, r20
    534a:	05 06       	cpc	r0, r21
    534c:	08 95       	ret

0000534e <__fp_round>:
    534e:	09 2e       	mov	r0, r25
    5350:	03 94       	inc	r0
    5352:	00 0c       	add	r0, r0
    5354:	11 f4       	brne	.+4      	; 0x535a <__fp_round+0xc>
    5356:	88 23       	and	r24, r24
    5358:	52 f0       	brmi	.+20     	; 0x536e <__fp_round+0x20>
    535a:	bb 0f       	add	r27, r27
    535c:	40 f4       	brcc	.+16     	; 0x536e <__fp_round+0x20>
    535e:	bf 2b       	or	r27, r31
    5360:	11 f4       	brne	.+4      	; 0x5366 <__fp_round+0x18>
    5362:	60 ff       	sbrs	r22, 0
    5364:	04 c0       	rjmp	.+8      	; 0x536e <__fp_round+0x20>
    5366:	6f 5f       	subi	r22, 0xFF	; 255
    5368:	7f 4f       	sbci	r23, 0xFF	; 255
    536a:	8f 4f       	sbci	r24, 0xFF	; 255
    536c:	9f 4f       	sbci	r25, 0xFF	; 255
    536e:	08 95       	ret

00005370 <__divmodhi4>:
    5370:	97 fb       	bst	r25, 7
    5372:	07 2e       	mov	r0, r23
    5374:	16 f4       	brtc	.+4      	; 0x537a <__divmodhi4+0xa>
    5376:	00 94       	com	r0
    5378:	07 d0       	rcall	.+14     	; 0x5388 <__divmodhi4_neg1>
    537a:	77 fd       	sbrc	r23, 7
    537c:	09 d0       	rcall	.+18     	; 0x5390 <__divmodhi4_neg2>
    537e:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__udivmodhi4>
    5382:	07 fc       	sbrc	r0, 7
    5384:	05 d0       	rcall	.+10     	; 0x5390 <__divmodhi4_neg2>
    5386:	3e f4       	brtc	.+14     	; 0x5396 <__divmodhi4_exit>

00005388 <__divmodhi4_neg1>:
    5388:	90 95       	com	r25
    538a:	81 95       	neg	r24
    538c:	9f 4f       	sbci	r25, 0xFF	; 255
    538e:	08 95       	ret

00005390 <__divmodhi4_neg2>:
    5390:	70 95       	com	r23
    5392:	61 95       	neg	r22
    5394:	7f 4f       	sbci	r23, 0xFF	; 255

00005396 <__divmodhi4_exit>:
    5396:	08 95       	ret

00005398 <__tablejump2__>:
    5398:	ee 0f       	add	r30, r30
    539a:	ff 1f       	adc	r31, r31
    539c:	05 90       	lpm	r0, Z+
    539e:	f4 91       	lpm	r31, Z
    53a0:	e0 2d       	mov	r30, r0
    53a2:	09 94       	ijmp

000053a4 <__udivmodhi4>:
    53a4:	aa 1b       	sub	r26, r26
    53a6:	bb 1b       	sub	r27, r27
    53a8:	51 e1       	ldi	r21, 0x11	; 17
    53aa:	07 c0       	rjmp	.+14     	; 0x53ba <__udivmodhi4_ep>

000053ac <__udivmodhi4_loop>:
    53ac:	aa 1f       	adc	r26, r26
    53ae:	bb 1f       	adc	r27, r27
    53b0:	a6 17       	cp	r26, r22
    53b2:	b7 07       	cpc	r27, r23
    53b4:	10 f0       	brcs	.+4      	; 0x53ba <__udivmodhi4_ep>
    53b6:	a6 1b       	sub	r26, r22
    53b8:	b7 0b       	sbc	r27, r23

000053ba <__udivmodhi4_ep>:
    53ba:	88 1f       	adc	r24, r24
    53bc:	99 1f       	adc	r25, r25
    53be:	5a 95       	dec	r21
    53c0:	a9 f7       	brne	.-22     	; 0x53ac <__udivmodhi4_loop>
    53c2:	80 95       	com	r24
    53c4:	90 95       	com	r25
    53c6:	bc 01       	movw	r22, r24
    53c8:	cd 01       	movw	r24, r26
    53ca:	08 95       	ret

000053cc <eeprom_read_byte>:
    53cc:	f9 99       	sbic	0x1f, 1	; 31
    53ce:	fe cf       	rjmp	.-4      	; 0x53cc <eeprom_read_byte>
    53d0:	92 bd       	out	0x22, r25	; 34
    53d2:	81 bd       	out	0x21, r24	; 33
    53d4:	f8 9a       	sbi	0x1f, 0	; 31
    53d6:	99 27       	eor	r25, r25
    53d8:	80 b5       	in	r24, 0x20	; 32
    53da:	08 95       	ret

000053dc <eeprom_read_word>:
    53dc:	a8 e1       	ldi	r26, 0x18	; 24
    53de:	b0 e0       	ldi	r27, 0x00	; 0
    53e0:	42 e0       	ldi	r20, 0x02	; 2
    53e2:	50 e0       	ldi	r21, 0x00	; 0
    53e4:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <eeprom_read_blraw>

000053e8 <eeprom_write_byte>:
    53e8:	26 2f       	mov	r18, r22

000053ea <eeprom_write_r18>:
    53ea:	f9 99       	sbic	0x1f, 1	; 31
    53ec:	fe cf       	rjmp	.-4      	; 0x53ea <eeprom_write_r18>
    53ee:	1f ba       	out	0x1f, r1	; 31
    53f0:	92 bd       	out	0x22, r25	; 34
    53f2:	81 bd       	out	0x21, r24	; 33
    53f4:	20 bd       	out	0x20, r18	; 32
    53f6:	0f b6       	in	r0, 0x3f	; 63
    53f8:	f8 94       	cli
    53fa:	fa 9a       	sbi	0x1f, 2	; 31
    53fc:	f9 9a       	sbi	0x1f, 1	; 31
    53fe:	0f be       	out	0x3f, r0	; 63
    5400:	01 96       	adiw	r24, 0x01	; 1
    5402:	08 95       	ret

00005404 <eeprom_write_word>:
    5404:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <eeprom_write_byte>
    5408:	27 2f       	mov	r18, r23
    540a:	0c 94 f5 29 	jmp	0x53ea	; 0x53ea <eeprom_write_r18>

0000540e <eeprom_read_block>:
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22

00005412 <eeprom_read_blraw>:
    5412:	fc 01       	movw	r30, r24
    5414:	f9 99       	sbic	0x1f, 1	; 31
    5416:	fe cf       	rjmp	.-4      	; 0x5414 <eeprom_read_blraw+0x2>
    5418:	06 c0       	rjmp	.+12     	; 0x5426 <eeprom_read_blraw+0x14>
    541a:	f2 bd       	out	0x22, r31	; 34
    541c:	e1 bd       	out	0x21, r30	; 33
    541e:	f8 9a       	sbi	0x1f, 0	; 31
    5420:	31 96       	adiw	r30, 0x01	; 1
    5422:	00 b4       	in	r0, 0x20	; 32
    5424:	0d 92       	st	X+, r0
    5426:	41 50       	subi	r20, 0x01	; 1
    5428:	50 40       	sbci	r21, 0x00	; 0
    542a:	b8 f7       	brcc	.-18     	; 0x541a <eeprom_read_blraw+0x8>
    542c:	08 95       	ret

0000542e <_exit>:
    542e:	f8 94       	cli

00005430 <__stop_program>:
    5430:	ff cf       	rjmp	.-2      	; 0x5430 <__stop_program>
    5432:	3c 0d       	add	r19, r12
    5434:	64 0d       	add	r22, r4
    5436:	4d 0e       	add	r4, r29
    5438:	64 0d       	add	r22, r4
    543a:	4d 0e       	add	r4, r29
    543c:	97 0d       	add	r25, r7
    543e:	b8 0d       	add	r27, r8
    5440:	4d 0e       	add	r4, r29
    5442:	0f 0e       	add	r0, r31
    5444:	1b 0e       	add	r1, r27
    5446:	0f 13       	cpse	r16, r31
    5448:	0f 13       	cpse	r16, r31
    544a:	4b 13       	cpse	r20, r27
    544c:	4b 13       	cpse	r20, r27
    544e:	d0 13       	cpse	r29, r16
    5450:	06 14       	cp	r0, r6
    5452:	ff 12       	cpse	r15, r31
    5454:	ff 12       	cpse	r15, r31
    5456:	1f 14       	cp	r1, r15
    5458:	ff 12       	cpse	r15, r31
    545a:	0b 15       	cp	r16, r11
    545c:	0b 15       	cp	r16, r11
    545e:	b0 15       	cp	r27, r0
    5460:	ff 12       	cpse	r15, r31
    5462:	c7 15       	cp	r28, r7
    5464:	e8 15       	cp	r30, r8
