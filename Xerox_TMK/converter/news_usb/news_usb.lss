
news_usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005510  000055a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022a  00800138  00800138  000055dc  2**0
                  ALLOC
  3 .noinit       00000004  00800362  00800362  000055dc  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000055dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000012  00000000  00000000  00005f07  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f1c  2**2
                  CONTENTS, READONLY, OCTETS
  8 .debug_aranges 00000988  00000000  00000000  00005f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00011bd1  00000000  00000000  000068e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004772  00000000  00000000  000184b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00010c95  00000000  00000000  0001cc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001a4c  00000000  00000000  0002d8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000041ec  00000000  00000000  0002f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008fa2  00000000  00000000  000334f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003c496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__ctors_end>
       4:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
       8:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
       c:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      10:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      14:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      18:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      1c:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      20:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      24:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      28:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      2c:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <__vector_11>
      30:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__vector_12>
      34:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <__vector_13>
      38:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      3c:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      40:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      44:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      48:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      4c:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__vector_19>
      50:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      54:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      58:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      5c:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__vector_23>
      60:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      64:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      68:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      6c:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>
      70:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__bad_interrupt>

00000074 <keymaps>:
      74:	00 3a 3b 3c 3d 3e 3f 40 41 42 43 29 1e 1f 20 21     .:;<=>?@ABC).. !
      84:	22 23 24 25 26 27 2d 2e 31 2a 2b 14 1a 08 15 17     "#$%&'-.1*+.....
      94:	1c 18 0c 12 13 2f 30 4c e0 04 16 07 09 0a 0b 0d     ...../0L........
      a4:	0e 0f 33 34 35 28 e1 1d 1b 06 19 05 11 10 36 37     ..345(........67
      b4:	38 87 e5 e2 39 e2 2c e6 e7 65 e4 5f 60 61 56 5c     8...9.,..e._`aV\
      c4:	5d 5e 57 59 5a 5b 85 62 52 63 58 50 51 4f 00 00     ]^WYZ[.bRcXPQO..
      d4:	00 00 00 00 55 54 2b 00 44 45 75 49 9c 4b 4e 00     ....UT+.DEuI.KN.
      e4:	00 00 00 00 00 00 00 00 00 00 a5 00 00 00 00 00     ................

000000f4 <fn_keycode>:
      f4:	00 00 00 00 00 00 00 00                             ........

000000fc <fn_layer>:
      fc:	00 00 00 00 00 00 00 00                             ........

00000104 <__c.0>:
     104:	20 00                                                .

00000106 <__c.1>:
     106:	25 30 32 58 00                                      %02X.

0000010b <__c.1>:
     10b:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     11b:	0a 00                                               ..

0000011d <__c.2>:
     11d:	0a 55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e     .USB configured.
     12d:	0a 00                                               ..

0000012f <__c.3>:
     12f:	0a 0a 54 4d 4b 3a 38 66 38 36 64 31 32 35 2f 4c     ..TMK:8f86d125/L
     13f:	55 46 41 0a 0a 00                                   UFA...

00000145 <ProductString>:
     145:	3a 03 53 00 4f 00 4e 00 59 00 20 00 4e 00 45 00     :.S.O.N.Y. .N.E.
     155:	57 00 53 00 20 00 6b 00 65 00 79 00 62 00 6f 00     W.S. .k.e.y.b.o.
     165:	61 00 72 00 64 00 20 00 63 00 6f 00 6e 00 76 00     a.r.d. .c.o.n.v.
     175:	65 00 72 00 74 00 65 00 72 00 00 00                 e.r.t.e.r...

00000181 <ManufacturerString>:
     181:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

00000191 <LanguageString>:
     191:	04 03 09 04                                         ....

00000195 <ConfigurationDescriptor>:
     195:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     1a5:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     1b5:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1c5:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     1d5:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     1e5:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     1f5:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     205:	03 20 00 01                                         . ..

00000209 <DeviceDescriptor>:
     209:	12 01 10 01 00 00 00 08 ed fe 21 50 01 00 01 02     ..........!P....
     219:	00 01                                               ..

0000021b <ConsoleReport>:
     21b:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     22b:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     23b:	02 c0                                               ..

0000023d <ExtrakeyReport>:
     23d:	05 01 09 80 a1 01 85 02 16 01 00 26 37 00 1a 81     ...........&7...
     24d:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     25d:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     26d:	10 95 01 81 00 c0                                   ......

00000273 <MouseReport>:
     273:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     283:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     293:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     2a3:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     2b3:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000002c0 <KeyboardReport>:
     2c0:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     2d0:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     2e0:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     2f0:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000300 <__c.0>:
     300:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000310 <__c.1>:
     310:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

0000031e <__c.2>:
     31e:	0a 00                                               ..

00000320 <__c.3>:
     320:	25 30 32 58 20 00                                   %02X .

00000326 <__c.4>:
     326:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000331 <__c.0>:
     331:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

0000033c <__c.0>:
     33c:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

0000034a <__c.1>:
     34a:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

00000358 <__c.0>:
     358:	64 6f 6e 65 2e 0a 00                                done...

0000035f <__c.1>:
     35f:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     36f:	2e 2e 2e 20 00                                      ... .

00000374 <__c.0>:
     374:	29 0a 00                                            )..

00000377 <__c.1>:
     377:	25 75 00                                            %u.

0000037a <__c.2>:
     37a:	2f 00                                               /.

0000037c <__c.3>:
     37c:	25 75 00                                            %u.

0000037f <__c.4>:
     37f:	5d 28 00                                            ](.

00000382 <__c.5>:
     382:	25 64 00                                            %d.

00000385 <__c.6>:
     385:	20 00                                                .

00000387 <__c.7>:
     387:	25 64 00                                            %d.

0000038a <__c.8>:
     38a:	20 00                                                .

0000038c <__c.9>:
     38c:	25 64 00                                            %d.

0000038f <__c.10>:
     38f:	20 00                                                .

00000391 <__c.11>:
     391:	25 64 00                                            %d.

00000394 <__c.12>:
     394:	7c 00                                               |.

00000396 <__c.13>:
     396:	25 30 32 58 00                                      %02X.

0000039b <__c.14>:
     39b:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     3ab:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     3bb:	20 5b 00                                             [.

000003be <__c.0>:
     3be:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     3ce:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000003d9 <__c.1>:
     3d9:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     3e9:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000003f2 <__c.2>:
     3f2:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     402:	20 25 64 0a 00                                       %d..

00000407 <__c.3>:
     407:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     417:	64 0a 00                                            d..

0000041a <__c.4>:
     41a:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     42a:	0a 00                                               ..

0000042c <__c.5>:
     42c:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000043b <__c.6>:
     43b:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     44b:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000456 <__c.7>:
     456:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     466:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000046f <__c.8>:
     46f:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     47f:	20 25 64 0a 00                                       %d..

00000484 <__c.9>:
     484:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     494:	64 0a 00                                            d..

00000497 <__c.10>:
     497:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     4a7:	0a 00                                               ..

000004a9 <__c.11>:
     4a9:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004b8 <__c.12>:
     4b8:	0a 00                                               ..

000004ba <__c.13>:
     4ba:	25 75 00                                            %u.

000004bd <__c.14>:
     4bd:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     4cd:	5f 6d 61 78 3a 20 00                                _max: .

000004d4 <__c.15>:
     4d4:	0a 00                                               ..

000004d6 <__c.16>:
     4d6:	25 75 00                                            %u.

000004d9 <__c.17>:
     4d9:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     4e9:	65 64 3a 20 00                                      ed: .

000004ee <__c.18>:
     4ee:	0a 00                                               ..

000004f0 <__c.19>:
     4f0:	25 75 00                                            %u.

000004f3 <__c.20>:
     4f3:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     503:	00                                                  .

00000504 <__c.21>:
     504:	0a 00                                               ..

00000506 <__c.22>:
     506:	25 75 00                                            %u.

00000509 <__c.23>:
     509:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000518 <__c.24>:
     518:	0a 00                                               ..

0000051a <__c.25>:
     51a:	25 75 00                                            %u.

0000051d <__c.26>:
     51d:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     52d:	20 00                                                .

0000052f <__c.27>:
     52f:	0a 00                                               ..

00000531 <__c.28>:
     531:	25 75 00                                            %u.

00000534 <__c.29>:
     534:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     544:	20 00                                                .

00000546 <__c.30>:
     546:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000554 <__c.31>:
     554:	4d 3e 00                                            M>.

00000557 <__c.32>:
     557:	4d 25 64 3e 20 00                                   M%d> .

0000055d <__c.33>:
     55d:	3f 00                                               ?.

0000055f <__c.34>:
     55f:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

0000056c <__c.35>:
     56c:	43 3e 20 00                                         C> .

00000570 <__c.36>:
     570:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     580:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     590:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     5a0:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     5b0:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

000005be <__c.37>:
     5be:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     5ce:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     5de:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     5ee:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     5fe:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     60e:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     61e:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     62e:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     63e:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     64e:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     65e:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     66e:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     67e:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     68e:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     69e:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     6ae:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

000006b9 <__c.38>:
     6b9:	3f 00                                               ?.

000006bb <__c.39>:
     6bb:	4d 3e 20 00                                         M> .

000006bf <__c.40>:
     6bf:	43 3e 20 00                                         C> .

000006c3 <__c.41>:
     6c3:	4c 25 64 0a 00                                      L%d..

000006c8 <__c.42>:
     6c8:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     6d8:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     6e8:	73 65 6b 65 79 0a 00                                sekey..

000006ef <__c.43>:
     6ef:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     6ff:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     70f:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     71f:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     72f:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     73f:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     74f:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     75f:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     76f:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     77f:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

0000078c <__c.44>:
     78c:	0a 00                                               ..

0000078e <__c.45>:
     78e:	25 75 00                                            %u.

00000791 <__c.46>:
     791:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000799 <__c.47>:
     799:	0a 00                                               ..

0000079b <__c.48>:
     79b:	25 75 00                                            %u.

0000079e <__c.49>:
     79e:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     7ae:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000007ba <__c.50>:
     7ba:	0a 00                                               ..

000007bc <__c.51>:
     7bc:	25 75 00                                            %u.

000007bf <__c.52>:
     7bf:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     7cf:	20 00                                                .

000007d1 <__c.53>:
     7d1:	0a 00                                               ..

000007d3 <__c.54>:
     7d3:	25 75 00                                            %u.

000007d6 <__c.55>:
     7d6:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000007e0 <__c.56>:
     7e0:	0a 00                                               ..

000007e2 <__c.57>:
     7e2:	25 75 00                                            %u.

000007e5 <__c.58>:
     7e5:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     7f5:	20 00                                                .

000007f7 <__c.59>:
     7f7:	0a 00                                               ..

000007f9 <__c.60>:
     7f9:	25 75 00                                            %u.

000007fc <__c.61>:
     7fc:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     80c:	20 00                                                .

0000080e <__c.62>:
     80e:	0a 00                                               ..

00000810 <__c.63>:
     810:	25 75 00                                            %u.

00000813 <__c.64>:
     813:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     823:	74 72 6f 6c 3a 20 00                                trol: .

0000082a <__c.65>:
     82a:	0a 00                                               ..

0000082c <__c.66>:
     82c:	25 75 00                                            %u.

0000082f <__c.67>:
     82f:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     83f:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000848 <__c.68>:
     848:	0a 00                                               ..

0000084a <__c.69>:
     84a:	25 30 32 58 00                                      %02X.

0000084f <__c.70>:
     84f:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     85f:	77 3a 20 00                                         w: .

00000863 <__c.71>:
     863:	0a 00                                               ..

00000865 <__c.72>:
     865:	25 75 00                                            %u.

00000868 <__c.73>:
     868:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000871 <__c.74>:
     871:	0a 00                                               ..

00000873 <__c.75>:
     873:	25 75 00                                            %u.

00000876 <__c.76>:
     876:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000882 <__c.77>:
     882:	0a 00                                               ..

00000884 <__c.78>:
     884:	25 75 00                                            %u.

00000887 <__c.79>:
     887:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000891 <__c.80>:
     891:	0a 00                                               ..

00000893 <__c.81>:
     893:	25 75 00                                            %u.

00000896 <__c.82>:
     896:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

000008a0 <__c.83>:
     8a0:	0a 00                                               ..

000008a2 <__c.84>:
     8a2:	25 30 32 58 00                                      %02X.

000008a7 <__c.85>:
     8a7:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     8b7:	3a 20 00                                            : .

000008ba <__c.86>:
     8ba:	0a 00                                               ..

000008bc <__c.87>:
     8bc:	25 75 00                                            %u.

000008bf <__c.88>:
     8bf:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

000008cf <__c.89>:
     8cf:	3f 00                                               ?.

000008d1 <__c.90>:
     8d1:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     8e1:	25 30 34 6c 58 0a 00                                %04lX..

000008e8 <__c.91>:
     8e8:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     8f8:	58 0a 00                                            X..

000008fb <__c.92>:
     8fb:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     90b:	6c 3a 20 25 58 0a 00                                l: %X..

00000912 <__c.93>:
     912:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     922:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

0000092c <__c.94>:
     92c:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

0000093a <__c.95>:
     93a:	47 43 43 3a 20 31 30 2e 32 2e 30 20 41 56 52 2d     GCC: 10.2.0 AVR-
     94a:	4c 49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f     LIBC: 2.0.0 AVR_
     95a:	41 52 43 48 3a 20 61 76 72 33 35 0a 00              ARCH: avr35..

00000967 <__c.96>:
     967:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     977:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     987:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     997:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

000009a7 <__c.97>:
     9a7:	42 55 49 4c 44 3a 20 38 66 38 36 64 31 32 35 20     BUILD: 8f86d125 
     9b7:	28 32 33 3a 32 39 3a 33 39 20 4e 6f 76 20 31 30     (23:29:39 Nov 10
     9c7:	20 32 30 32 30 29 0a 00                              2020)..

000009cf <__c.98>:
     9cf:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     9df:	6b 2e 29 20 50 49 44 3a 20 30 78 35 30 32 31 28     k.) PID: 0x5021(
     9ef:	53 4f 4e 59 20 4e 45 57 53 20 6b 65 79 62 6f 61     SONY NEWS keyboa
     9ff:	72 64 20 63 6f 6e 76 65 72 74 65 72 29 20 56 45     rd converter) VE
     a0f:	52 3a 20 30 78 30 30 30 31 0a 00                    R: 0x0001..

00000a1a <__c.99>:
     a1a:	44 45 53 43 3a 20 63 6f 6e 76 65 72 74 73 20 53     DESC: converts S
     a2a:	4f 4e 59 20 4e 45 57 53 20 70 72 6f 74 6f 63 6f     ONY NEWS protoco
     a3a:	6c 20 69 6e 74 6f 20 55 53 42 0a 00                 l into USB..

00000a46 <__c.100>:
     a46:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a55 <__c.101>:
     a55:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a62 <__c.102>:
     a62:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000a6e <__c.103>:
     a6e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000a7e <__c.104>:
     a7e:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000a8d <__c.105>:
     a8d:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000a9b <__c.106>:
     a9b:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000aa8 <__c.107>:
     aa8:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000ab4 <__c.108>:
     ab4:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000ac1 <__c.109>:
     ac1:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     ad1:	00                                                  .

00000ad2 <__c.110>:
     ad2:	43 3e 20 00                                         C> .

00000ad6 <__c.111>:
     ad6:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000ae2 <__ctors_end>:
     ae2:	11 24       	eor	r1, r1
     ae4:	1f be       	out	0x3f, r1	; 63
     ae6:	cf ef       	ldi	r28, 0xFF	; 255
     ae8:	d4 e0       	ldi	r29, 0x04	; 4
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	cd bf       	out	0x3d, r28	; 61

00000aee <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     aee:	04 b6       	in	r0, 0x34	; 52
     af0:	03 fe       	sbrs	r0, 3
     af2:	28 c0       	rjmp	.+80     	; 0xb44 <__do_copy_data>
     af4:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <reset_key>
     af8:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <reset_key+0x1>
     afc:	a0 91 64 03 	lds	r26, 0x0364	; 0x800364 <reset_key+0x2>
     b00:	b0 91 65 03 	lds	r27, 0x0365	; 0x800365 <reset_key+0x3>
     b04:	87 30       	cpi	r24, 0x07	; 7
     b06:	90 4b       	sbci	r25, 0xB0	; 176
     b08:	a7 40       	sbci	r26, 0x07	; 7
     b0a:	b0 4b       	sbci	r27, 0xB0	; 176
     b0c:	d9 f4       	brne	.+54     	; 0xb44 <__do_copy_data>
        reset_key = 0;
     b0e:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <reset_key>
     b12:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <reset_key+0x1>
     b16:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <reset_key+0x2>
     b1a:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <reset_key+0x3>

        // some of bootloaders may need to preseve?
        MCUSR = 0;
     b1e:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	a8 95       	wdr
     b26:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     b2a:	88 61       	ori	r24, 0x18	; 24
     b2c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     b30:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     b34:	0f be       	out	0x3f, r0	; 63

#ifndef NO_BOOTLOADER_CATERINA_BOOTKEY
        // Clear bootkey of Caterina bootloader for other bootloaders
        // Leonardo and Pro Micro with Arduino default fuse setting don't reach here
        // because bootloader section are executed before application everytime.
        *(volatile uint16_t *)0x0800 = 0;
     b36:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <_end+0x49b>
     b3a:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <_end+0x49a>
#endif

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))( (uint16_t)(BOOTLOADER_START / 2) ))();
     b3e:	e0 e0       	ldi	r30, 0x00	; 0
     b40:	f8 e3       	ldi	r31, 0x38	; 56
     b42:	09 95       	icall

00000b44 <__do_copy_data>:
     b44:	11 e0       	ldi	r17, 0x01	; 1
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b1 e0       	ldi	r27, 0x01	; 1
     b4a:	e0 e1       	ldi	r30, 0x10	; 16
     b4c:	f5 e5       	ldi	r31, 0x55	; 85
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <__do_copy_data+0x10>
     b50:	05 90       	lpm	r0, Z+
     b52:	0d 92       	st	X+, r0
     b54:	a8 33       	cpi	r26, 0x38	; 56
     b56:	b1 07       	cpc	r27, r17
     b58:	d9 f7       	brne	.-10     	; 0xb50 <__do_copy_data+0xc>

00000b5a <__do_clear_bss>:
     b5a:	23 e0       	ldi	r18, 0x03	; 3
     b5c:	a8 e3       	ldi	r26, 0x38	; 56
     b5e:	b1 e0       	ldi	r27, 0x01	; 1
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <.do_clear_bss_start>

00000b62 <.do_clear_bss_loop>:
     b62:	1d 92       	st	X+, r1

00000b64 <.do_clear_bss_start>:
     b64:	a2 36       	cpi	r26, 0x62	; 98
     b66:	b2 07       	cpc	r27, r18
     b68:	e1 f7       	brne	.-8      	; 0xb62 <.do_clear_bss_loop>
     b6a:	0e 94 b0 09 	call	0x1360	; 0x1360 <main>
     b6e:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <_exit>

00000b72 <__bad_interrupt>:
     b72:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b76 <xputc>:
     b76:	ff 93       	push	r31
     b78:	ef 93       	push	r30
     b7a:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <__bss_start>
     b7e:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <__bss_start+0x1>
     b82:	30 97       	sbiw	r30, 0x00	; 0
     b84:	09 f0       	breq	.+2      	; 0xb88 <xputc+0x12>
     b86:	09 95       	icall
     b88:	ef 91       	pop	r30
     b8a:	ff 91       	pop	r31
     b8c:	08 95       	ret

00000b8e <xputs>:
     b8e:	fc 01       	movw	r30, r24
     b90:	85 91       	lpm	r24, Z+
     b92:	80 30       	cpi	r24, 0x00	; 0
     b94:	11 f0       	breq	.+4      	; 0xb9a <xputs+0xc>
     b96:	ef df       	rcall	.-34     	; 0xb76 <xputc>
     b98:	fb cf       	rjmp	.-10     	; 0xb90 <xputs+0x2>
     b9a:	08 95       	ret

00000b9c <xitoa>:
     b9c:	ff 27       	eor	r31, r31
     b9e:	e0 e2       	ldi	r30, 0x20	; 32
     ba0:	30 e2       	ldi	r19, 0x20	; 32
     ba2:	47 ff       	sbrs	r20, 7
     ba4:	0c c0       	rjmp	.+24     	; 0xbbe <xitoa+0x22>
     ba6:	41 95       	neg	r20
     ba8:	97 ff       	sbrs	r25, 7
     baa:	09 c0       	rjmp	.+18     	; 0xbbe <xitoa+0x22>
     bac:	ed e2       	ldi	r30, 0x2D	; 45
     bae:	60 95       	com	r22
     bb0:	70 95       	com	r23
     bb2:	80 95       	com	r24
     bb4:	90 95       	com	r25
     bb6:	61 1d       	adc	r22, r1
     bb8:	71 1d       	adc	r23, r1
     bba:	81 1d       	adc	r24, r1
     bbc:	91 1d       	adc	r25, r1
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <xitoa+0x2a>
     bc2:	21 95       	neg	r18
     bc4:	30 e3       	ldi	r19, 0x30	; 48
     bc6:	50 e2       	ldi	r21, 0x20	; 32
     bc8:	aa 27       	eor	r26, r26
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	88 1f       	adc	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	aa 1f       	adc	r26, r26
     bd4:	a4 17       	cp	r26, r20
     bd6:	10 f0       	brcs	.+4      	; 0xbdc <xitoa+0x40>
     bd8:	a4 1b       	sub	r26, r20
     bda:	63 95       	inc	r22
     bdc:	5a 95       	dec	r21
     bde:	a9 f7       	brne	.-22     	; 0xbca <xitoa+0x2e>
     be0:	aa 30       	cpi	r26, 0x0A	; 10
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <xitoa+0x4a>
     be4:	a9 5f       	subi	r26, 0xF9	; 249
     be6:	a0 5d       	subi	r26, 0xD0	; 208
     be8:	af 93       	push	r26
     bea:	f3 95       	inc	r31
     bec:	61 15       	cp	r22, r1
     bee:	71 05       	cpc	r23, r1
     bf0:	81 05       	cpc	r24, r1
     bf2:	91 05       	cpc	r25, r1
     bf4:	41 f7       	brne	.-48     	; 0xbc6 <xitoa+0x2a>
     bf6:	ed 32       	cpi	r30, 0x2D	; 45
     bf8:	11 f4       	brne	.+4      	; 0xbfe <xitoa+0x62>
     bfa:	ef 93       	push	r30
     bfc:	f3 95       	inc	r31
     bfe:	f2 17       	cp	r31, r18
     c00:	18 f4       	brcc	.+6      	; 0xc08 <xitoa+0x6c>
     c02:	3f 93       	push	r19
     c04:	f3 95       	inc	r31
     c06:	fb cf       	rjmp	.-10     	; 0xbfe <xitoa+0x62>
     c08:	8f 91       	pop	r24
     c0a:	b5 df       	rcall	.-150    	; 0xb76 <xputc>
     c0c:	fa 95       	dec	r31
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <xitoa+0x6c>
     c10:	08 95       	ret

00000c12 <xvprintf>:
     c12:	e9 91       	ld	r30, Y+
     c14:	f9 91       	ld	r31, Y+
     c16:	85 91       	lpm	r24, Z+
     c18:	80 30       	cpi	r24, 0x00	; 0
     c1a:	21 f0       	breq	.+8      	; 0xc24 <xvprintf+0x12>
     c1c:	85 32       	cpi	r24, 0x25	; 37
     c1e:	19 f0       	breq	.+6      	; 0xc26 <xvprintf+0x14>
     c20:	aa df       	rcall	.-172    	; 0xb76 <xputc>
     c22:	f9 cf       	rjmp	.-14     	; 0xc16 <xvprintf+0x4>
     c24:	08 95       	ret
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	e8 94       	clt
     c2a:	55 91       	lpm	r21, Z+
     c2c:	55 32       	cpi	r21, 0x25	; 37
     c2e:	c1 f3       	breq	.-16     	; 0xc20 <xvprintf+0xe>
     c30:	50 33       	cpi	r21, 0x30	; 48
     c32:	11 f4       	brne	.+4      	; 0xc38 <xvprintf+0x26>
     c34:	68 94       	set
     c36:	55 91       	lpm	r21, Z+
     c38:	5a 33       	cpi	r21, 0x3A	; 58
     c3a:	48 f4       	brcc	.+18     	; 0xc4e <xvprintf+0x3c>
     c3c:	50 53       	subi	r21, 0x30	; 48
     c3e:	90 f3       	brcs	.-28     	; 0xc24 <xvprintf+0x12>
     c40:	22 0f       	add	r18, r18
     c42:	02 2e       	mov	r0, r18
     c44:	22 0f       	add	r18, r18
     c46:	22 0f       	add	r18, r18
     c48:	20 0d       	add	r18, r0
     c4a:	25 0f       	add	r18, r21
     c4c:	f4 cf       	rjmp	.-24     	; 0xc36 <xvprintf+0x24>
     c4e:	0e f4       	brtc	.+2      	; 0xc52 <xvprintf+0x40>
     c50:	21 95       	neg	r18
     c52:	89 91       	ld	r24, Y+
     c54:	99 91       	ld	r25, Y+
     c56:	53 36       	cpi	r21, 0x63	; 99
     c58:	19 f3       	breq	.-58     	; 0xc20 <xvprintf+0xe>
     c5a:	53 37       	cpi	r21, 0x73	; 115
     c5c:	29 f1       	breq	.+74     	; 0xca8 <xvprintf+0x96>
     c5e:	53 35       	cpi	r21, 0x53	; 83
     c60:	59 f1       	breq	.+86     	; 0xcb8 <xvprintf+0xa6>
     c62:	bc 01       	movw	r22, r24
     c64:	88 27       	eor	r24, r24
     c66:	99 27       	eor	r25, r25
     c68:	e8 94       	clt
     c6a:	5c 36       	cpi	r21, 0x6C	; 108
     c6c:	21 f4       	brne	.+8      	; 0xc76 <xvprintf+0x64>
     c6e:	89 91       	ld	r24, Y+
     c70:	99 91       	ld	r25, Y+
     c72:	68 94       	set
     c74:	55 91       	lpm	r21, Z+
     c76:	54 36       	cpi	r21, 0x64	; 100
     c78:	39 f4       	brne	.+14     	; 0xc88 <xvprintf+0x76>
     c7a:	46 ef       	ldi	r20, 0xF6	; 246
     c7c:	7e f0       	brts	.+30     	; 0xc9c <xvprintf+0x8a>
     c7e:	77 ff       	sbrs	r23, 7
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <xvprintf+0x8a>
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <xvprintf+0x8a>
     c88:	55 37       	cpi	r21, 0x75	; 117
     c8a:	4a e0       	ldi	r20, 0x0A	; 10
     c8c:	39 f0       	breq	.+14     	; 0xc9c <xvprintf+0x8a>
     c8e:	58 35       	cpi	r21, 0x58	; 88
     c90:	40 e1       	ldi	r20, 0x10	; 16
     c92:	21 f0       	breq	.+8      	; 0xc9c <xvprintf+0x8a>
     c94:	52 36       	cpi	r21, 0x62	; 98
     c96:	42 e0       	ldi	r20, 0x02	; 2
     c98:	09 f0       	breq	.+2      	; 0xc9c <xvprintf+0x8a>
     c9a:	08 95       	ret
     c9c:	ff 93       	push	r31
     c9e:	ef 93       	push	r30
     ca0:	7d df       	rcall	.-262    	; 0xb9c <xitoa>
     ca2:	ef 91       	pop	r30
     ca4:	ff 91       	pop	r31
     ca6:	b7 cf       	rjmp	.-146    	; 0xc16 <xvprintf+0x4>
     ca8:	ff 93       	push	r31
     caa:	ef 93       	push	r30
     cac:	fc 01       	movw	r30, r24
     cae:	81 91       	ld	r24, Z+
     cb0:	80 30       	cpi	r24, 0x00	; 0
     cb2:	b9 f3       	breq	.-18     	; 0xca2 <xvprintf+0x90>
     cb4:	60 df       	rcall	.-320    	; 0xb76 <xputc>
     cb6:	fb cf       	rjmp	.-10     	; 0xcae <xvprintf+0x9c>
     cb8:	ff 93       	push	r31
     cba:	ef 93       	push	r30
     cbc:	68 df       	rcall	.-304    	; 0xb8e <xputs>
     cbe:	f1 cf       	rjmp	.-30     	; 0xca2 <xvprintf+0x90>

00000cc0 <__xprintf>:
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	25 96       	adiw	r28, 0x05	; 5
     cca:	a3 df       	rcall	.-186    	; 0xc12 <xvprintf>
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <matrix_init>:
#define COL(code)      (code&0x07)


void matrix_init(void)
{
    news_init();
     cd2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <news_init>

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
     cd6:	ea e3       	ldi	r30, 0x3A	; 58
     cd8:	f1 e0       	ldi	r31, 0x01	; 1
     cda:	80 e1       	ldi	r24, 0x10	; 16
     cdc:	df 01       	movw	r26, r30
     cde:	1d 92       	st	X+, r1
     ce0:	8a 95       	dec	r24
     ce2:	e9 f7       	brne	.-6      	; 0xcde <matrix_init+0xc>

    return;
}
     ce4:	08 95       	ret

00000ce6 <matrix_scan>:

uint8_t matrix_scan(void)
{
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
    uint8_t code;
    code = news_recv();
     cec:	0e 94 d2 06 	call	0xda4	; 0xda4 <news_recv>
     cf0:	d8 2f       	mov	r29, r24
    if (code == 0) {
     cf2:	88 23       	and	r24, r24
     cf4:	69 f1       	breq	.+90     	; 0xd50 <matrix_scan+0x6a>
        return 0;
    }

    phex(code); print(" ");
     cf6:	1f 92       	push	r1
     cf8:	8f 93       	push	r24
     cfa:	86 e0       	ldi	r24, 0x06	; 6
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
     d06:	84 e0       	ldi	r24, 0x04	; 4
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    if (code&0x80) {
        // break code
        if (matrix_is_on(ROW(code), COL(code))) {
     d0e:	1d 2f       	mov	r17, r29
     d10:	17 70       	andi	r17, 0x07	; 7
     d12:	cd 2f       	mov	r28, r29
     d14:	c6 95       	lsr	r28
     d16:	c6 95       	lsr	r28
     d18:	c6 95       	lsr	r28
    if (code&0x80) {
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	d7 ff       	sbrs	r29, 7
     d24:	1a c0       	rjmp	.+52     	; 0xd5a <matrix_scan+0x74>
        if (matrix_is_on(ROW(code), COL(code))) {
     d26:	cf 70       	andi	r28, 0x0F	; 15
     d28:	61 2f       	mov	r22, r17
     d2a:	8c 2f       	mov	r24, r28
     d2c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <matrix_is_on>
     d30:	88 23       	and	r24, r24
     d32:	71 f0       	breq	.+28     	; 0xd50 <matrix_scan+0x6a>
            matrix[ROW(code)] &= ~(1<<COL(code));
     d34:	ec 2f       	mov	r30, r28
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	e6 5c       	subi	r30, 0xC6	; 198
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <matrix_scan+0x5e>
     d42:	88 0f       	add	r24, r24
     d44:	1a 95       	dec	r17
     d46:	ea f7       	brpl	.-6      	; 0xd42 <matrix_scan+0x5c>
     d48:	80 95       	com	r24
     d4a:	90 81       	ld	r25, Z
     d4c:	89 23       	and	r24, r25
        }
    } else {
        // make code
        if (!matrix_is_on(ROW(code), COL(code))) {
            matrix[ROW(code)] |=  (1<<COL(code));
     d4e:	80 83       	st	Z, r24
        }
    }
    return code;
}
     d50:	8d 2f       	mov	r24, r29
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	08 95       	ret
        if (!matrix_is_on(ROW(code), COL(code))) {
     d5a:	61 2f       	mov	r22, r17
     d5c:	8c 2f       	mov	r24, r28
     d5e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <matrix_is_on>
     d62:	81 11       	cpse	r24, r1
     d64:	f5 cf       	rjmp	.-22     	; 0xd50 <matrix_scan+0x6a>
            matrix[ROW(code)] |=  (1<<COL(code));
     d66:	ec 2f       	mov	r30, r28
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	e6 5c       	subi	r30, 0xC6	; 198
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <matrix_scan+0x90>
     d74:	22 0f       	add	r18, r18
     d76:	1a 95       	dec	r17
     d78:	ea f7       	brpl	.-6      	; 0xd74 <matrix_scan+0x8e>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 2b       	or	r24, r18
     d7e:	e7 cf       	rjmp	.-50     	; 0xd4e <matrix_scan+0x68>

00000d80 <matrix_get_row>:

inline
uint8_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     d80:	e8 2f       	mov	r30, r24
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	e6 5c       	subi	r30, 0xC6	; 198
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
}
     d88:	80 81       	ld	r24, Z
     d8a:	08 95       	ret

00000d8c <led_set>:


void led_set(uint8_t usb_led)
{
    // not supported now
}
     d8c:	08 95       	ret

00000d8e <news_init>:
#include "news.h"


void news_init(void)
{
    NEWS_KBD_RX_INIT();
     d8e:	87 e6       	ldi	r24, 0x67	; 103
     d90:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__EEPROM_REGION_LENGTH__+0x7f00cc>
     d94:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__EEPROM_REGION_LENGTH__+0x7f00cd>
     d98:	e9 ec       	ldi	r30, 0xC9	; 201
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	80 69       	ori	r24, 0x90	; 144
     da0:	80 83       	st	Z, r24
}
     da2:	08 95       	ret

00000da4 <news_recv>:
static uint8_t rbuf_tail = 0;

uint8_t news_recv(void)
{
    uint8_t data = 0;
    if (rbuf_head == rbuf_tail) {
     da4:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <rbuf_tail>
     da8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rbuf_head>
     dac:	82 17       	cp	r24, r18
     dae:	61 f0       	breq	.+24     	; 0xdc8 <news_recv+0x24>
        return 0;
    }

    data = rbuf[rbuf_tail];
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	f9 01       	movw	r30, r18
     db4:	e4 5b       	subi	r30, 0xB4	; 180
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	80 81       	ld	r24, Z
    rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	27 70       	andi	r18, 0x07	; 7
     dc0:	33 27       	eor	r19, r19
     dc2:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <rbuf_tail>
    return data;
     dc6:	08 95       	ret
        return 0;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
}
     dca:	08 95       	ret

00000dcc <__vector_23>:

// USART RX complete interrupt
ISR(NEWS_KBD_RX_VECT)
{
     dcc:	2f 93       	push	r18
     dce:	2f b7       	in	r18, 0x3f	; 63
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
    uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
     dde:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <rbuf_head>
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9c 01       	movw	r18, r24
     de6:	2f 5f       	subi	r18, 0xFF	; 255
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	27 70       	andi	r18, 0x07	; 7
     dec:	33 27       	eor	r19, r19
    if (next != rbuf_tail) {
     dee:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <rbuf_tail>
     df2:	42 17       	cp	r20, r18
     df4:	41 f0       	breq	.+16     	; 0xe06 <__vector_23+0x3a>
        rbuf[rbuf_head] = NEWS_KBD_RX_DATA;
     df6:	30 91 ce 00 	lds	r19, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
     dfa:	84 5b       	subi	r24, 0xB4	; 180
     dfc:	9e 4f       	sbci	r25, 0xFE	; 254
     dfe:	fc 01       	movw	r30, r24
     e00:	30 83       	st	Z, r19
        rbuf_head = next;
     e02:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <rbuf_head>
    }
}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	9f 91       	pop	r25
     e0c:	8f 91       	pop	r24
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	2f bf       	out	0x3f, r18	; 63
     e16:	2f 91       	pop	r18
     e18:	18 95       	reti

00000e1a <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     e1a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <keyboard_led_stats>
     e1e:	08 95       	ret

00000e20 <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	00 d0       	rcall	.+0      	; 0xe26 <send_consumer+0x6>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     e2c:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <USB_DeviceState>
     e30:	24 30       	cpi	r18, 0x04	; 4
     e32:	19 f5       	brne	.+70     	; 0xe7a <send_consumer+0x5a>
        return;

    report_extra_t r = {
     e34:	23 e0       	ldi	r18, 0x03	; 3
     e36:	29 83       	std	Y+1, r18	; 0x01
     e38:	8a 83       	std	Y+2, r24	; 0x02
     e3a:	9b 83       	std	Y+3, r25	; 0x03
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e3c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e42:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     e46:	81 50       	subi	r24, 0x01	; 1
     e48:	95 fd       	sbrc	r25, 5
     e4a:	06 c0       	rjmp	.+12     	; 0xe58 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e4c:	95 ed       	ldi	r25, 0xD5	; 213
     e4e:	9a 95       	dec	r25
     e50:	f1 f7       	brne	.-4      	; 0xe4e <send_consumer+0x2e>
     e52:	00 00       	nop
     e54:	81 11       	cpse	r24, r1
     e56:	f5 cf       	rjmp	.-22     	; 0xe42 <send_consumer+0x22>
     e58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     e5c:	85 ff       	sbrs	r24, 5
     e5e:	0d c0       	rjmp	.+26     	; 0xe7a <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	63 e0       	ldi	r22, 0x03	; 3
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	ce 01       	movw	r24, r28
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e74:	8e 77       	andi	r24, 0x7E	; 126
     e76:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    Endpoint_ClearIN();
#endif
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <send_system>:
{
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <send_system+0x6>
     e8c:	0f 92       	push	r0
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
     e94:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	31 f5       	brne	.+76     	; 0xee8 <send_system+0x62>
    report_extra_t r = {
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	89 83       	std	Y+1, r24	; 0x01
        .usage = data - SYSTEM_POWER_DOWN + 1
     ea0:	20 58       	subi	r18, 0x80	; 128
     ea2:	31 09       	sbc	r19, r1
    report_extra_t r = {
     ea4:	3b 83       	std	Y+3, r19	; 0x03
     ea6:	2a 83       	std	Y+2, r18	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     eae:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
     eb0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     eb4:	81 50       	subi	r24, 0x01	; 1
     eb6:	95 fd       	sbrc	r25, 5
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <send_system+0x40>
     eba:	95 ed       	ldi	r25, 0xD5	; 213
     ebc:	9a 95       	dec	r25
     ebe:	f1 f7       	brne	.-4      	; 0xebc <send_system+0x36>
     ec0:	00 00       	nop
     ec2:	81 11       	cpse	r24, r1
     ec4:	f5 cf       	rjmp	.-22     	; 0xeb0 <send_system+0x2a>
     ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     eca:	85 ff       	sbrs	r24, 5
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <send_system+0x62>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	63 e0       	ldi	r22, 0x03	; 3
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	ce 01       	movw	r24, r28
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ede:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ee2:	8e 77       	andi	r24, 0x7E	; 126
     ee4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <send_mouse>:
    if (USB_DeviceState != DEVICE_STATE_Configured)
     ef4:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <USB_DeviceState>
     ef8:	24 30       	cpi	r18, 0x04	; 4
     efa:	f1 f4       	brne	.+60     	; 0xf38 <send_mouse+0x44>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efc:	22 e0       	ldi	r18, 0x02	; 2
     efe:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     f02:	2f ef       	ldi	r18, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f04:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     f08:	21 50       	subi	r18, 0x01	; 1
     f0a:	35 fd       	sbrc	r19, 5
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <send_mouse+0x26>
     f0e:	35 ed       	ldi	r19, 0xD5	; 213
     f10:	3a 95       	dec	r19
     f12:	f1 f7       	brne	.-4      	; 0xf10 <send_mouse+0x1c>
     f14:	00 00       	nop
     f16:	21 11       	cpse	r18, r1
     f18:	f5 cf       	rjmp	.-22     	; 0xf04 <send_mouse+0x10>
     f1a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     f1e:	25 ff       	sbrs	r18, 5
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <send_mouse+0x44>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	65 e0       	ldi	r22, 0x05	; 5
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f32:	8e 77       	andi	r24, 0x7E	; 126
     f34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
}
     f38:	08 95       	ret

00000f3a <send_keyboard>:
{
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	d8 2f       	mov	r29, r24
     f40:	c9 2f       	mov	r28, r25
    if (USB_DeviceState != DEVICE_STATE_Configured)
     f42:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	21 f5       	brne	.+72     	; 0xf92 <send_keyboard+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			}
     f50:	81 e8       	ldi	r24, 0x81	; 129
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
     f52:	81 50       	subi	r24, 0x01	; 1
     f54:	21 f0       	breq	.+8      	; 0xf5e <send_keyboard+0x24>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f56:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f5a:	95 ff       	sbrs	r25, 5
     f5c:	1d c0       	rjmp	.+58     	; 0xf98 <send_keyboard+0x5e>
     f5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
     f62:	85 ff       	sbrs	r24, 5
     f64:	16 c0       	rjmp	.+44     	; 0xf92 <send_keyboard+0x58>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	68 e0       	ldi	r22, 0x08	; 8
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	8d 2f       	mov	r24, r29
     f70:	9c 2f       	mov	r25, r28
     f72:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f7a:	8e 77       	andi	r24, 0x7E	; 126
     f7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    keyboard_report_sent = *report;
     f80:	88 e0       	ldi	r24, 0x08	; 8
     f82:	ed 2f       	mov	r30, r29
     f84:	fc 2f       	mov	r31, r28
     f86:	a7 e5       	ldi	r26, 0x57	; 87
     f88:	b2 e0       	ldi	r27, 0x02	; 2
     f8a:	01 90       	ld	r0, Z+
     f8c:	0d 92       	st	X+, r0
     f8e:	8a 95       	dec	r24
     f90:	e1 f7       	brne	.-8      	; 0xf8a <send_keyboard+0x50>
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret
     f98:	ef e3       	ldi	r30, 0x3F	; 63
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	31 97       	sbiw	r30, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <send_keyboard+0x62>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <send_keyboard+0x68>
     fa2:	00 00       	nop
	}
	else
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
#endif
}
     fa4:	d6 cf       	rjmp	.-84     	; 0xf52 <send_keyboard+0x18>

00000fa6 <console_is_ready>:
{
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	00 d0       	rcall	.+0      	; 0xfac <console_is_ready+0x6>
     fac:	00 d0       	rcall	.+0      	; 0xfae <console_is_ready+0x8>
     fae:	0f 92       	push	r0
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
    if (!hid_listen_ready) {
     fb4:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <hid_listen_ready.4>
     fb8:	2d 83       	std	Y+5, r18	; 0x05
     fba:	21 11       	cpse	r18, r1
     fbc:	0c c0       	rjmp	.+24     	; 0xfd6 <console_is_ready+0x30>
        if (timer_read32() < 2500)
     fbe:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <timer_read32>
     fc2:	64 3c       	cpi	r22, 0xC4	; 196
     fc4:	79 40       	sbci	r23, 0x09	; 9
     fc6:	81 05       	cpc	r24, r1
     fc8:	91 05       	cpc	r25, r1
     fca:	28 f0       	brcs	.+10     	; 0xfd6 <console_is_ready+0x30>
        hid_listen_ready = true;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <hid_listen_ready.4>
    return true;
     fd2:	b1 e0       	ldi	r27, 0x01	; 1
     fd4:	bd 83       	std	Y+5, r27	; 0x05
}
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <sendchar>:

/*******************************************************************************
 * sendchar
 ******************************************************************************/
int8_t sendchar(uint8_t c)
{
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	d8 2f       	mov	r29, r24
    if (!(SREG & (1<<SREG_I)))
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	07 fe       	sbrs	r0, 7
     ff8:	48 c0       	rjmp	.+144    	; 0x108a <sendchar+0xa2>
    if (USB_DeviceState != DEVICE_STATE_Configured && !ringbuf_is_full(&sendbuf))
     ffa:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
     ffe:	84 30       	cpi	r24, 0x04	; 4
    1000:	71 f0       	breq	.+28     	; 0x101e <sendchar+0x36>
{
    return (buf->head == buf->tail);
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    1002:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	82 23       	and	r24, r18
    1012:	93 23       	and	r25, r19
    1014:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <sendbuf+0x3>
    1018:	28 17       	cp	r18, r24
    101a:	19 06       	cpc	r1, r25
    101c:	b1 f5       	brne	.+108    	; 0x108a <sendchar+0xa2>
    if (!console_is_ready() && !ringbuf_is_full(&sendbuf))
    101e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <console_is_ready>
    1022:	81 11       	cpse	r24, r1
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <sendchar+0x5c>
    1026:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sendbuf+0x4>
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	28 23       	and	r18, r24
    1038:	39 23       	and	r19, r25
    103a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sendbuf+0x3>
    103e:	82 17       	cp	r24, r18
    1040:	13 06       	cpc	r1, r19
    1042:	19 f5       	brne	.+70     	; 0x108a <sendchar+0xa2>
    uint16_t prev = timer_read();
    1044:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <timer_read>
    1048:	8c 01       	movw	r16, r24
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    104a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    104e:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1050:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1054:	89 2f       	mov	r24, r25
    1056:	81 70       	andi	r24, 0x01	; 1
    1058:	90 fd       	sbrc	r25, 0
    105a:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    105c:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105e:	84 e0       	ldi	r24, 0x04	; 4
    1060:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	f8 2e       	mov	r15, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1068:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    if (Endpoint_IsStalled() || !Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    106c:	85 fd       	sbrc	r24, 5
    106e:	0a c0       	rjmp	.+20     	; 0x1084 <sendchar+0x9c>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1070:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1074:	89 2f       	mov	r24, r25
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	90 ff       	sbrs	r25, 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <sendchar+0x9c>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    107c:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
    1080:	97 fd       	sbrc	r25, 7
    1082:	43 c0       	rjmp	.+134    	; 0x110a <sendchar+0x122>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1084:	cf 70       	andi	r28, 0x0F	; 15
    1086:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    108a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9c 01       	movw	r18, r24
    1092:	2f 5f       	subi	r18, 0xFF	; 255
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	24 23       	and	r18, r20
    109e:	35 23       	and	r19, r21
    10a0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <sendbuf+0x3>
    if (ringbuf_is_full(buf)) {
    10a4:	42 17       	cp	r20, r18
    10a6:	13 06       	cpc	r1, r19
    10a8:	09 f4       	brne	.+2      	; 0x10ac <sendchar+0xc4>
    10aa:	79 c0       	rjmp	.+242    	; 0x119e <sendchar+0x1b6>
    buf->buffer[buf->head] = data;
    10ac:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <sendbuf>
    10b0:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <sendbuf+0x1>
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	fc 01       	movw	r30, r24
    10ba:	d0 83       	st	Z, r29
    buf->head++;
    10bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
    10c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sendbuf+0x4>
    10c6:	89 23       	and	r24, r25
    10c8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sendbuf+0x2>

    #ifdef CONSOLE_ENABLE
    console_putc(c);
    #endif

    return 0;
    10cc:	68 c0       	rjmp	.+208    	; 0x119e <sendchar+0x1b6>
    uint8_t data = buf->buffer[buf->tail];
    10ce:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    10d2:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    10d6:	e9 0f       	add	r30, r25
    10d8:	f1 1d       	adc	r31, r1
    10da:	20 81       	ld	r18, Z
    buf->tail++;
    10dc:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    10de:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <sendbuf+0x4>
    10e2:	93 23       	and	r25, r19
    10e4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10e8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10ec:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    10f0:	95 fd       	sbrc	r25, 5
    10f2:	0b c0       	rjmp	.+22     	; 0x110a <sendchar+0x122>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10f4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10f8:	90 ff       	sbrs	r25, 0
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <sendchar+0x122>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10fc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1100:	9e 77       	andi	r25, 0x7E	; 126
    1102:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    1106:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5>
    return (buf->head == buf->tail);
    110a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    110e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1112:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1116:	29 17       	cp	r18, r25
    1118:	31 f1       	breq	.+76     	; 0x1166 <sendchar+0x17e>
    111a:	35 fd       	sbrc	r19, 5
    111c:	d8 cf       	rjmp	.-80     	; 0x10ce <sendchar+0xe6>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	26 c0       	rjmp	.+76     	; 0x116e <sendchar+0x186>
				UEDATX = Data;
    1122:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			}
    1126:	2b c0       	rjmp	.+86     	; 0x117e <sendchar+0x196>
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	24 23       	and	r18, r20
    1136:	35 23       	and	r19, r21
    if (ringbuf_is_full(&sendbuf) && timeout) {
    1138:	92 17       	cp	r25, r18
    113a:	13 06       	cpc	r1, r19
    113c:	09 f0       	breq	.+2      	; 0x1140 <sendchar+0x158>
    113e:	a2 cf       	rjmp	.-188    	; 0x1084 <sendchar+0x9c>
    1140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <timeout.5>
    1144:	88 23       	and	r24, r24
    1146:	09 f4       	brne	.+2      	; 0x114a <sendchar+0x162>
    1148:	9d cf       	rjmp	.-198    	; 0x1084 <sendchar+0x9c>
        uint16_t curr = timer_read();
    114a:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <timer_read>
    114e:	9c 01       	movw	r18, r24
        if (curr != prev) {
    1150:	80 17       	cp	r24, r16
    1152:	91 07       	cpc	r25, r17
    1154:	09 f4       	brne	.+2      	; 0x1158 <sendchar+0x170>
    1156:	88 cf       	rjmp	.-240    	; 0x1068 <sendchar+0x80>
            timeout--;
    1158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <timeout.5>
    115c:	81 50       	subi	r24, 0x01	; 1
    115e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <timeout.5>
        uint16_t curr = timer_read();
    1162:	89 01       	movw	r16, r18
    1164:	81 cf       	rjmp	.-254    	; 0x1068 <sendchar+0x80>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1166:	35 ff       	sbrs	r19, 5
    1168:	da cf       	rjmp	.-76     	; 0x111e <sendchar+0x136>
				UEDATX = Data;
    116a:	d0 93 f1 00 	sts	0x00F1, r29	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					return UEBCLX;
    116e:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    1172:	33 23       	and	r19, r19
    1174:	79 f0       	breq	.+30     	; 0x1194 <sendchar+0x1ac>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1176:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    117a:	30 ff       	sbrs	r19, 0
    117c:	0b c0       	rjmp	.+22     	; 0x1194 <sendchar+0x1ac>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    117e:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    1182:	35 fd       	sbrc	r19, 5
    1184:	ce cf       	rjmp	.-100    	; 0x1122 <sendchar+0x13a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1186:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    118a:	3e 77       	andi	r19, 0x7E	; 126
    118c:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    1190:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5>
    if (done) {
    1194:	88 23       	and	r24, r24
    1196:	41 f2       	breq	.-112    	; 0x1128 <sendchar+0x140>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1198:	cf 70       	andi	r28, 0x0F	; 15
    119a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
}
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	08 95       	ret

000011ac <EVENT_USB_Device_Connect>:
    if (!USB_IsInitialized) {
    11ac:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <USB_IsInitialized>
    11b0:	81 11       	cpse	r24, r1
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <EVENT_USB_Device_Connect+0x10>
        USB_Disable();
    11b4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <USB_Disable>
        USB_Init();
    11b8:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <USB_Init>
}
    11bc:	08 95       	ret

000011be <EVENT_USB_Device_Disconnect>:
    USB_IsInitialized = false;
    11be:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <USB_IsInitialized>
}
    11c2:	08 95       	ret

000011c4 <EVENT_USB_Device_Reset>:
}
    11c4:	08 95       	ret

000011c6 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    11c6:	42 e0       	ldi	r20, 0x02	; 2
    11c8:	61 ec       	ldi	r22, 0xC1	; 193
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Endpoint_ConfigureEndpoint_Prv>
    11d0:	42 e0       	ldi	r20, 0x02	; 2
    11d2:	61 ec       	ldi	r22, 0xC1	; 193
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Endpoint_ConfigureEndpoint_Prv>
    11da:	42 e0       	ldi	r20, 0x02	; 2
    11dc:	61 ec       	ldi	r22, 0xC1	; 193
    11de:	83 e0       	ldi	r24, 0x03	; 3
    11e0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Endpoint_ConfigureEndpoint_Prv>
    11e4:	42 e2       	ldi	r20, 0x22	; 34
    11e6:	61 ec       	ldi	r22, 0xC1	; 193
    11e8:	84 e0       	ldi	r24, 0x04	; 4
    11ea:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <Endpoint_ConfigureEndpoint_Prv>

000011ee <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    11ee:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <USB_ControlRequest+0x1>
    11f2:	89 30       	cpi	r24, 0x09	; 9
    11f4:	81 f1       	breq	.+96     	; 0x1256 <EVENT_USB_Device_ControlRequest+0x68>
    11f6:	48 f4       	brcc	.+18     	; 0x120a <EVENT_USB_Device_ControlRequest+0x1c>
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	09 f4       	brne	.+2      	; 0x11fe <EVENT_USB_Device_ControlRequest+0x10>
    11fc:	91 c0       	rjmp	.+290    	; 0x1320 <EVENT_USB_Device_ControlRequest+0x132>
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	09 f4       	brne	.+2      	; 0x1204 <EVENT_USB_Device_ControlRequest+0x16>
    1202:	4c c0       	rjmp	.+152    	; 0x129c <EVENT_USB_Device_ControlRequest+0xae>
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	41 f0       	breq	.+16     	; 0x1218 <EVENT_USB_Device_ControlRequest+0x2a>
    1208:	08 95       	ret
    120a:	8a 30       	cpi	r24, 0x0A	; 10
    120c:	09 f4       	brne	.+2      	; 0x1210 <EVENT_USB_Device_ControlRequest+0x22>
    120e:	78 c0       	rjmp	.+240    	; 0x1300 <EVENT_USB_Device_ControlRequest+0x112>
    1210:	8b 30       	cpi	r24, 0x0B	; 11
    1212:	09 f4       	brne	.+2      	; 0x1216 <EVENT_USB_Device_ControlRequest+0x28>
    1214:	5e c0       	rjmp	.+188    	; 0x12d2 <EVENT_USB_Device_ControlRequest+0xe4>
    1216:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1218:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>
    121c:	81 3a       	cpi	r24, 0xA1	; 161
    121e:	e9 f5       	brne	.+122    	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    1220:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1224:	87 7f       	andi	r24, 0xF7	; 247
    1226:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                switch (USB_ControlRequest.wIndex) {
    122a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <USB_ControlRequest+0x4>
    122e:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <USB_ControlRequest+0x5>
    1232:	89 2b       	or	r24, r25
    1234:	61 f4       	brne	.+24     	; 0x124e <EVENT_USB_Device_ControlRequest+0x60>
                    ReportSize = sizeof(keyboard_report_sent);
    1236:	68 e0       	ldi	r22, 0x08	; 8
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1238:	87 e5       	ldi	r24, 0x57	; 87
    123a:	92 e0       	ldi	r25, 0x02	; 2
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1242:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1246:	8b 77       	andi	r24, 0x7B	; 123
    1248:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
    124c:	08 95       	ret
    uint8_t  ReportSize = 0;
    124e:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	f3 cf       	rjmp	.-26     	; 0x123c <EVENT_USB_Device_ControlRequest+0x4e>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1256:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>
    125a:	81 32       	cpi	r24, 0x21	; 33
    125c:	f1 f4       	brne	.+60     	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
                switch (USB_ControlRequest.wIndex) {
    125e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <USB_ControlRequest+0x4>
    1262:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <USB_ControlRequest+0x5>
    1266:	89 2b       	or	r24, r25
    1268:	c1 f4       	brne	.+48     	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    126a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    126e:	87 7f       	andi	r24, 0xF7	; 247
    1270:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1274:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    1278:	82 ff       	sbrs	r24, 2
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <EVENT_USB_Device_ControlRequest+0xa4>
				return UEDATX;
    127c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1280:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1284:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1288:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    128a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                Endpoint_ClearStatusStage();
    128e:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <Endpoint_ClearStatusStage>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1292:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
    1296:	81 11       	cpse	r24, r1
    1298:	ed cf       	rjmp	.-38     	; 0x1274 <EVENT_USB_Device_ControlRequest+0x86>
}
    129a:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    129c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>
    12a0:	81 3a       	cpi	r24, 0xA1	; 161
    12a2:	d9 f7       	brne	.-10     	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    12a4:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <USB_ControlRequest+0x4>
    12a8:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <USB_ControlRequest+0x5>
    12ac:	89 2b       	or	r24, r25
    12ae:	a9 f7       	brne	.-22     	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    12b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12b4:	87 7f       	andi	r24, 0xF7	; 247
    12b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                    while (!(Endpoint_IsINReady()));
    12be:	80 ff       	sbrs	r24, 0
    12c0:	fc cf       	rjmp	.-8      	; 0x12ba <EVENT_USB_Device_ControlRequest+0xcc>
                    Endpoint_Write_8(keyboard_protocol);
    12c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
				UEDATX = Data;
    12c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12ce:	8e 77       	andi	r24, 0x7E	; 126
    12d0:	dc cf       	rjmp	.-72     	; 0x128a <EVENT_USB_Device_ControlRequest+0x9c>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12d2:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>
    12d6:	81 32       	cpi	r24, 0x21	; 33
    12d8:	01 f7       	brne	.-64     	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    12da:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <USB_ControlRequest+0x4>
    12de:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <USB_ControlRequest+0x5>
    12e2:	89 2b       	or	r24, r25
    12e4:	d1 f6       	brne	.-76     	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    12e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12ea:	87 7f       	andi	r24, 0xF7	; 247
    12ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                    Endpoint_ClearStatusStage();
    12f0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    12f4:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <USB_ControlRequest+0x2>
    12f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <keyboard_protocol>
                    clear_keyboard();
    12fc:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1300:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>
    1304:	81 32       	cpi	r24, 0x21	; 33
    1306:	49 f6       	brne	.-110    	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
    1308:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    130c:	87 7f       	andi	r24, 0xF7	; 247
    130e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                Endpoint_ClearStatusStage();
    1312:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1316:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <USB_ControlRequest+0x3>
    131a:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <keyboard_idle>
    131e:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1320:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>
    1324:	81 3a       	cpi	r24, 0xA1	; 161
    1326:	09 f0       	breq	.+2      	; 0x132a <EVENT_USB_Device_ControlRequest+0x13c>
    1328:	b8 cf       	rjmp	.-144    	; 0x129a <EVENT_USB_Device_ControlRequest+0xac>
    132a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    132e:	87 7f       	andi	r24, 0xF7	; 247
    1330:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
                while (!(Endpoint_IsINReady()));
    1338:	80 ff       	sbrs	r24, 0
    133a:	fc cf       	rjmp	.-8      	; 0x1334 <EVENT_USB_Device_ControlRequest+0x146>
                Endpoint_Write_8(keyboard_idle);
    133c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <keyboard_idle>
    1340:	c2 cf       	rjmp	.-124    	; 0x12c6 <EVENT_USB_Device_ControlRequest+0xd8>

00001342 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1342:	08 95       	ret

00001344 <hook_late_init>:
    1344:	08 95       	ret

00001346 <hook_usb_suspend_loop>:
__attribute__((weak))
void hook_usb_suspend_loop(void)
{
#ifndef TMK_LUFA_DEBUG_UART
    // This corrupts debug print when suspend
    suspend_power_down();
    1346:	0e 94 b1 1c 	call	0x3962	; 0x3962 <suspend_power_down>
#endif
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    134a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <USB_Device_RemoteWakeupEnabled>
    134e:	88 23       	and	r24, r24
    1350:	29 f0       	breq	.+10     	; 0x135c <hook_usb_suspend_loop+0x16>
    1352:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <suspend_wakeup_condition>
    1356:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1358:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <USB_Device_SendRemoteWakeup>
    }
}
    135c:	08 95       	ret

0000135e <hook_usb_startup_wait_loop>:
    135e:	08 95       	ret

00001360 <main>:
    MCUSR &= ~(1 << WDRF);
    1360:	84 b7       	in	r24, 0x34	; 52
    1362:	87 7f       	andi	r24, 0xF7	; 247
    1364:	84 bf       	out	0x34, r24	; 52
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	a8 95       	wdr
    136c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    1370:	88 61       	ori	r24, 0x18	; 24
    1372:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    1376:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    137a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    137c:	80 e8       	ldi	r24, 0x80	; 128
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
    1388:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
    138c:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    138e:	84 ef       	ldi	r24, 0xF4	; 244
    1390:	97 e0       	ldi	r25, 0x07	; 7
    1392:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <print_set_sendchar>
    host_set_driver(&lufa_driver);
    1396:	86 e0       	ldi	r24, 0x06	; 6
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <host_set_driver>
    print("\n\nTMK:" STR(TMK_VERSION) "/LUFA\n\n");
    139e:	8f e2       	ldi	r24, 0x2F	; 47
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    hook_early_init();
    13a6:	0e 94 a1 09 	call	0x1342	; 0x1342 <hook_early_init>
    keyboard_setup();
    13aa:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <keyboard_setup>
    USB_Disable();
    13ae:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <USB_Disable>
    USB_Init();
    13b2:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <USB_Init>
    sei();
    13b6:	78 94       	sei
    keyboard_init();
    13b8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <keyboard_init>
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    13bc:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
    13c0:	84 30       	cpi	r24, 0x04	; 4
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <main+0x66>
    13c4:	44 c0       	rjmp	.+136    	; 0x144e <main+0xee>
    print("\nUSB configured.\n");
    13c6:	8d e1       	ldi	r24, 0x1D	; 29
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    hook_late_init();
    13ce:	0e 94 a2 09 	call	0x1344	; 0x1344 <hook_late_init>
    print("\nKeyboard start.\n");
    13d2:	8b e0       	ldi	r24, 0x0B	; 11
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13da:	c4 e0       	ldi	r28, 0x04	; 4
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    13dc:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
    13e0:	85 30       	cpi	r24, 0x05	; 5
    13e2:	c1 f1       	breq	.+112    	; 0x1454 <main+0xf4>
        keyboard_task();
    13e4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    13e8:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
    13ec:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
    if (fn == USB_Device_GetFrameNumber()) {
    13f0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fn.0>
    13f4:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fn.0+0x1>
    13f8:	28 17       	cp	r18, r24
    13fa:	39 07       	cpc	r19, r25
    13fc:	79 f3       	breq	.-34     	; 0x13dc <main+0x7c>
    13fe:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
    1402:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
    fn = USB_Device_GetFrameNumber();
    1406:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <fn.0+0x1>
    140a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <fn.0>
    if (!console_is_ready())
    140e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <console_is_ready>
    1412:	88 23       	and	r24, r24
    1414:	19 f3       	breq	.-58     	; 0x13dc <main+0x7c>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1416:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	f9 f6       	brne	.-66     	; 0x13dc <main+0x7c>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    141e:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1422:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1424:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1428:	82 2f       	mov	r24, r18
    142a:	81 70       	andi	r24, 0x01	; 1
    142c:	20 fd       	sbrc	r18, 0
    142e:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1430:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1432:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1436:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    143a:	90 ff       	sbrs	r25, 0
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <main+0xe6>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    143e:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
    1442:	97 fd       	sbrc	r25, 7
    1444:	26 c0       	rjmp	.+76     	; 0x1492 <main+0x132>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1446:	8f 70       	andi	r24, 0x0F	; 15
    1448:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			}
    144c:	c7 cf       	rjmp	.-114    	; 0x13dc <main+0x7c>
        hook_usb_startup_wait_loop();
    144e:	0e 94 af 09 	call	0x135e	; 0x135e <hook_usb_startup_wait_loop>
    1452:	b4 cf       	rjmp	.-152    	; 0x13bc <main+0x5c>
            hook_usb_suspend_loop();
    1454:	0e 94 a3 09 	call	0x1346	; 0x1346 <hook_usb_suspend_loop>
    1458:	c1 cf       	rjmp	.-126    	; 0x13dc <main+0x7c>
    uint8_t data = buf->buffer[buf->tail];
    145a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    145e:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    1462:	e9 0f       	add	r30, r25
    1464:	f1 1d       	adc	r31, r1
    1466:	20 81       	ld	r18, Z
    buf->tail++;
    1468:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    146a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <sendbuf+0x4>
    146e:	93 23       	and	r25, r19
    1470:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
				UEDATX = Data;
    1474:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1478:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    147c:	95 fd       	sbrc	r25, 5
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <main+0x132>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1480:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1484:	90 ff       	sbrs	r25, 0
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <main+0x132>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1488:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    148c:	9e 77       	andi	r25, 0x7E	; 126
    148e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    return (buf->head == buf->tail);
    1492:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1496:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
    149a:	29 17       	cp	r18, r25
    149c:	21 f0       	breq	.+8      	; 0x14a6 <main+0x146>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    149e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    14a2:	25 fd       	sbrc	r18, 5
    14a4:	da cf       	rjmp	.-76     	; 0x145a <main+0xfa>
					return UEBCLX;
    14a6:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    14aa:	99 23       	and	r25, r25
    14ac:	61 f2       	breq	.-104    	; 0x1446 <main+0xe6>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    14b2:	90 ff       	sbrs	r25, 0
    14b4:	c8 cf       	rjmp	.-112    	; 0x1446 <main+0xe6>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14b6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    14ba:	95 fd       	sbrc	r25, 5
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <main+0x16a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14be:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    14c2:	9e 77       	andi	r25, 0x7E	; 126
    14c4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
    14c8:	be cf       	rjmp	.-132    	; 0x1446 <main+0xe6>
				UEDATX = Data;
    14ca:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			}
    14ce:	f3 cf       	rjmp	.-26     	; 0x14b6 <main+0x156>

000014d0 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    14d0:	fc 01       	movw	r30, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	da 01       	movw	r26, r20
    const uint8_t  DescriptorType   = (wValue >> 8);
    14d6:	2f 2f       	mov	r18, r31
    14d8:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    14da:	23 30       	cpi	r18, 0x03	; 3
    14dc:	31 05       	cpc	r19, r1
    14de:	d1 f0       	breq	.+52     	; 0x1514 <CALLBACK_USB_GetDescriptor+0x44>
    14e0:	70 f4       	brcc	.+28     	; 0x14fe <CALLBACK_USB_GetDescriptor+0x2e>
    14e2:	21 30       	cpi	r18, 0x01	; 1
    14e4:	31 05       	cpc	r19, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <CALLBACK_USB_GetDescriptor+0x1a>
    14e8:	47 c0       	rjmp	.+142    	; 0x1578 <CALLBACK_USB_GetDescriptor+0xa8>
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	69 f4       	brne	.+26     	; 0x150a <CALLBACK_USB_GetDescriptor+0x3a>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    14f0:	84 e7       	ldi	r24, 0x74	; 116
    14f2:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    14f4:	25 e9       	ldi	r18, 0x95	; 149
    14f6:	31 e0       	ldi	r19, 0x01	; 1
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    14f8:	2d 93       	st	X+, r18
    14fa:	3c 93       	st	X, r19
    return Size;
}
    14fc:	08 95       	ret
    switch (DescriptorType)
    14fe:	21 32       	cpi	r18, 0x21	; 33
    1500:	31 05       	cpc	r19, r1
    1502:	e9 f0       	breq	.+58     	; 0x153e <CALLBACK_USB_GetDescriptor+0x6e>
    1504:	22 32       	cpi	r18, 0x22	; 34
    1506:	31 05       	cpc	r19, r1
    1508:	39 f1       	breq	.+78     	; 0x1558 <CALLBACK_USB_GetDescriptor+0x88>
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	f2 cf       	rjmp	.-28     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x28>
            switch (DescriptorIndex )
    1514:	cf 01       	movw	r24, r30
    1516:	99 27       	eor	r25, r25
    1518:	e1 30       	cpi	r30, 0x01	; 1
    151a:	59 f0       	breq	.+22     	; 0x1532 <CALLBACK_USB_GetDescriptor+0x62>
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	91 05       	cpc	r25, r1
    1520:	59 f0       	breq	.+22     	; 0x1538 <CALLBACK_USB_GetDescriptor+0x68>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1522:	e1 e9       	ldi	r30, 0x91	; 145
    1524:	f1 e0       	ldi	r31, 0x01	; 1
    1526:	89 2b       	or	r24, r25
    1528:	81 f7       	brne	.-32     	; 0x150a <CALLBACK_USB_GetDescriptor+0x3a>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    152a:	84 91       	lpm	r24, Z
    152c:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    152e:	9f 01       	movw	r18, r30
                    break;
    1530:	e3 cf       	rjmp	.-58     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x28>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1532:	e1 e8       	ldi	r30, 0x81	; 129
    1534:	f1 e0       	ldi	r31, 0x01	; 1
    1536:	f9 cf       	rjmp	.-14     	; 0x152a <CALLBACK_USB_GetDescriptor+0x5a>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1538:	e5 e4       	ldi	r30, 0x45	; 69
    153a:	f1 e0       	ldi	r31, 0x01	; 1
    153c:	f6 cf       	rjmp	.-20     	; 0x152a <CALLBACK_USB_GetDescriptor+0x5a>
            switch (wIndex) {
    153e:	64 30       	cpi	r22, 0x04	; 4
    1540:	71 05       	cpc	r23, r1
    1542:	18 f7       	brcc	.-58     	; 0x150a <CALLBACK_USB_GetDescriptor+0x3a>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	fc 01       	movw	r30, r24
    154a:	eb 5d       	subi	r30, 0xDB	; 219
    154c:	fe 4f       	sbci	r31, 0xFE	; 254
    154e:	20 81       	ld	r18, Z
    1550:	31 81       	ldd	r19, Z+1	; 0x01
    switch (DescriptorType)
    1552:	89 e0       	ldi	r24, 0x09	; 9
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	d0 cf       	rjmp	.-96     	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x28>
            switch (wIndex) {
    1558:	64 30       	cpi	r22, 0x04	; 4
    155a:	71 05       	cpc	r23, r1
    155c:	b0 f6       	brcc	.-84     	; 0x150a <CALLBACK_USB_GetDescriptor+0x3a>
    155e:	fb 01       	movw	r30, r22
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	e3 5e       	subi	r30, 0xE3	; 227
    1566:	fe 4f       	sbci	r31, 0xFE	; 254
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	87 5e       	subi	r24, 0xE7	; 231
    156e:	9e 4f       	sbci	r25, 0xFE	; 254
    1570:	fc 01       	movw	r30, r24
    1572:	80 81       	ld	r24, Z
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	c0 cf       	rjmp	.-128    	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x28>
    switch (DescriptorType)
    1578:	82 e1       	ldi	r24, 0x12	; 18
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	29 e0       	ldi	r18, 0x09	; 9
    157e:	32 e0       	ldi	r19, 0x02	; 2
    1580:	bb cf       	rjmp	.-138    	; 0x14f8 <CALLBACK_USB_GetDescriptor+0x28>

00001582 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1582:	84 e0       	ldi	r24, 0x04	; 4
    1584:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    158a:	09 b4       	in	r0, 0x29	; 41
    158c:	00 fe       	sbrs	r0, 0
    158e:	fd cf       	rjmp	.-6      	; 0x158a <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1590:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1594:	8f 7d       	andi	r24, 0xDF	; 223
    1596:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    159a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
    159e:	82 60       	ori	r24, 0x02	; 2
    15a0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
	while (UDCON & (1 << RMWKUP));
    15a4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
    15a8:	81 fd       	sbrc	r24, 1
    15aa:	fc cf       	rjmp	.-8      	; 0x15a4 <USB_Device_SendRemoteWakeup+0x22>
}
    15ac:	08 95       	ret

000015ae <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    15ae:	98 2f       	mov	r25, r24
    15b0:	95 30       	cpi	r25, 0x05	; 5
    15b2:	28 f0       	brcs	.+10     	; 0x15be <Endpoint_ConfigureEndpoint_Prv+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	08 95       	ret
    15be:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			UECFG1XTemp = UECFG1XData;
    15c2:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    15c4:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    15c6:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    15c8:	98 17       	cp	r25, r24
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    15cc:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
			UECFG1XTemp = UECFG1X;
    15d0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
			UEIENXTemp  = UEIENX;
    15d4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    15d8:	21 fd       	sbrc	r18, 1
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    15dc:	9f 5f       	subi	r25, 0xFF	; 255
    15de:	e8 cf       	rjmp	.-48     	; 0x15b0 <Endpoint_ConfigureEndpoint_Prv+0x2>
				UECONX &= ~(1 << EPEN);
    15e0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    15e4:	3e 7f       	andi	r19, 0xFE	; 254
    15e6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG1X &= ~(1 << ALLOC);
    15ea:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
    15ee:	3d 7f       	andi	r19, 0xFD	; 253
    15f0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
				UECONX |= (1 << EPEN);
    15f4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    15f8:	31 60       	ori	r19, 0x01	; 1
    15fa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		UECFG0X = UECFG0XTemp;
    15fe:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
		UECFG1X = UECFG1XTemp;
    1602:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
		UEIENX  = UEIENXTemp;
    1606:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    160a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
		if (!(Endpoint_IsConfigured()))
    160e:	27 fd       	sbrc	r18, 7
    1610:	e5 cf       	rjmp	.-54     	; 0x15dc <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    1612:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    1614:	08 95       	ret

00001616 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1616:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>
    161a:	87 ff       	sbrs	r24, 7
    161c:	13 c0       	rjmp	.+38     	; 0x1644 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    161e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1622:	82 ff       	sbrs	r24, 2
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1626:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    162a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    162c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
    1630:	04 c0       	rjmp	.+8      	; 0x163a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1632:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
    1636:	81 11       	cpse	r24, r1
    1638:	f2 cf       	rjmp	.-28     	; 0x161e <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    163a:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    163c:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
    1640:	88 23       	and	r24, r24
    1642:	d9 f3       	breq	.-10     	; 0x163a <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1644:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		while (!(Endpoint_IsINReady()))
    1648:	80 ff       	sbrs	r24, 0
    164a:	f8 cf       	rjmp	.-16     	; 0x163c <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    164c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1650:	8e 77       	andi	r24, 0x7E	; 126
    1652:	ec cf       	rjmp	.-40     	; 0x162c <Endpoint_ClearStatusStage+0x16>

00001654 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1654:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
    1658:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
    165c:	95 e6       	ldi	r25, 0x65	; 101
    165e:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1660:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1664:	82 2f       	mov	r24, r18
    1666:	81 70       	andi	r24, 0x01	; 1
    1668:	20 ff       	sbrs	r18, 0
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    166c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1670:	80 ff       	sbrs	r24, 0
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1678:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    167c:	22 fd       	sbrc	r18, 2
    167e:	1a c0       	rjmp	.+52     	; 0x16b4 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1680:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1684:	88 23       	and	r24, r24
    1686:	89 f0       	breq	.+34     	; 0x16aa <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1688:	85 30       	cpi	r24, 0x05	; 5
    168a:	89 f0       	breq	.+34     	; 0x16ae <Endpoint_WaitUntilReady+0x5a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    168c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1690:	85 fd       	sbrc	r24, 5
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <Endpoint_WaitUntilReady+0x5e>
    1694:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
    1698:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    169c:	42 17       	cp	r20, r18
    169e:	53 07       	cpc	r21, r19
    16a0:	f9 f2       	breq	.-66     	; 0x1660 <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    16a2:	91 50       	subi	r25, 0x01	; 1
    16a4:	e1 f6       	brne	.-72     	; 0x165e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    16a6:	84 e0       	ldi	r24, 0x04	; 4
    16a8:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    16ae:	83 e0       	ldi	r24, 0x03	; 3
    16b0:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    16b4:	08 95       	ret

000016b6 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    16b6:	af 92       	push	r10
    16b8:	bf 92       	push	r11
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	6c 01       	movw	r12, r24
    16ca:	eb 01       	movw	r28, r22
    16cc:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    16ce:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Endpoint_WaitUntilReady>
    16d2:	f8 2e       	mov	r15, r24
    16d4:	81 11       	cpse	r24, r1
    16d6:	23 c0       	rjmp	.+70     	; 0x171e <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16d8:	01 15       	cp	r16, r1
    16da:	11 05       	cpc	r17, r1
    16dc:	39 f0       	breq	.+14     	; 0x16ec <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    16de:	f8 01       	movw	r30, r16
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	c8 1b       	sub	r28, r24
    16e6:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    16e8:	c8 0e       	add	r12, r24
    16ea:	d9 1e       	adc	r13, r25
{
    16ec:	b1 2c       	mov	r11, r1
    16ee:	a1 2c       	mov	r10, r1
	}

	while (Length)
    16f0:	20 97       	sbiw	r28, 0x00	; 0
    16f2:	a9 f0       	breq	.+42     	; 0x171e <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    16f8:	85 fd       	sbrc	r24, 5
    16fa:	22 c0       	rjmp	.+68     	; 0x1740 <Endpoint_Write_Stream_LE+0x8a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1700:	8e 77       	andi	r24, 0x7E	; 126
    1702:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1706:	01 15       	cp	r16, r1
    1708:	11 05       	cpc	r17, r1
    170a:	a1 f0       	breq	.+40     	; 0x1734 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
    170c:	f8 01       	movw	r30, r16
    170e:	80 81       	ld	r24, Z
    1710:	91 81       	ldd	r25, Z+1	; 0x01
    1712:	a8 0e       	add	r10, r24
    1714:	b9 1e       	adc	r11, r25
    1716:	b1 82       	std	Z+1, r11	; 0x01
    1718:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    171a:	85 e0       	ldi	r24, 0x05	; 5
    171c:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    171e:	8f 2d       	mov	r24, r15
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	08 95       	ret
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1734:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Endpoint_WaitUntilReady>
    1738:	88 23       	and	r24, r24
    173a:	d1 f2       	breq	.-76     	; 0x16f0 <Endpoint_Write_Stream_LE+0x3a>
    173c:	f8 2e       	mov	r15, r24
    173e:	ef cf       	rjmp	.-34     	; 0x171e <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1740:	f6 01       	movw	r30, r12
    1742:	81 91       	ld	r24, Z+
    1744:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1746:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			Length--;
    174a:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    174c:	ff ef       	ldi	r31, 0xFF	; 255
    174e:	af 1a       	sub	r10, r31
    1750:	bf 0a       	sbc	r11, r31
    1752:	ce cf       	rjmp	.-100    	; 0x16f0 <Endpoint_Write_Stream_LE+0x3a>

00001754 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1754:	fc 01       	movw	r30, r24
    1756:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1758:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <USB_ControlRequest+0x6>
    175c:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <USB_ControlRequest+0x7>
    1760:	26 17       	cp	r18, r22
    1762:	37 07       	cpc	r19, r23
    1764:	90 f0       	brcs	.+36     	; 0x178a <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	29 f4       	brne	.+10     	; 0x1774 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    176a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    176e:	2e 77       	andi	r18, 0x7E	; 126
    1770:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1774:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	51 f4       	brne	.+20     	; 0x178e <Endpoint_Write_Control_Stream_LE+0x3a>
    177a:	41 11       	cpse	r20, r1
    177c:	08 c0       	rjmp	.+16     	; 0x178e <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    177e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1782:	82 ff       	sbrs	r24, 2
    1784:	30 c0       	rjmp	.+96     	; 0x17e6 <Endpoint_Write_Control_Stream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	08 95       	ret
    178a:	c9 01       	movw	r24, r18
    178c:	f3 cf       	rjmp	.-26     	; 0x1774 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    178e:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1792:	22 23       	and	r18, r18
    1794:	a1 f1       	breq	.+104    	; 0x17fe <Endpoint_Write_Control_Stream_LE+0xaa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1796:	25 30       	cpi	r18, 0x05	; 5
    1798:	a1 f1       	breq	.+104    	; 0x1802 <Endpoint_Write_Control_Stream_LE+0xae>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    179a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
    179e:	23 fd       	sbrc	r18, 3
    17a0:	2c c0       	rjmp	.+88     	; 0x17fa <Endpoint_Write_Control_Stream_LE+0xa6>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17a2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
    17a6:	22 fd       	sbrc	r18, 2
    17a8:	ea cf       	rjmp	.-44     	; 0x177e <Endpoint_Write_Control_Stream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17aa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
    17ae:	20 ff       	sbrs	r18, 0
    17b0:	e2 cf       	rjmp	.-60     	; 0x1776 <Endpoint_Write_Control_Stream_LE+0x22>
					return UEBCLX;
    17b2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    17b6:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <Endpoint_Write_Control_Stream_LE+0x6e>
    17bc:	28 30       	cpi	r18, 0x08	; 8
    17be:	31 05       	cpc	r19, r1
    17c0:	58 f0       	brcs	.+22     	; 0x17d8 <Endpoint_Write_Control_Stream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	28 30       	cpi	r18, 0x08	; 8
    17c6:	31 05       	cpc	r19, r1
    17c8:	09 f0       	breq	.+2      	; 0x17cc <Endpoint_Write_Control_Stream_LE+0x78>
    17ca:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17cc:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    17d0:	2e 77       	andi	r18, 0x7E	; 126
    17d2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
    17d6:	cf cf       	rjmp	.-98     	; 0x1776 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    17d8:	41 91       	ld	r20, Z+
				UEDATX = Data;
    17da:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Length--;
    17de:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    17e0:	2f 5f       	subi	r18, 0xFF	; 255
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	e9 cf       	rjmp	.-46     	; 0x17b8 <Endpoint_Write_Control_Stream_LE+0x64>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17e6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17ea:	88 23       	and	r24, r24
    17ec:	41 f0       	breq	.+16     	; 0x17fe <Endpoint_Write_Control_Stream_LE+0xaa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17ee:	85 30       	cpi	r24, 0x05	; 5
    17f0:	41 f0       	breq	.+16     	; 0x1802 <Endpoint_Write_Control_Stream_LE+0xae>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
    17f6:	83 ff       	sbrs	r24, 3
    17f8:	c2 cf       	rjmp	.-124    	; 0x177e <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
}
    17fc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	08 95       	ret

00001806 <Endpoint_Write_Control_PStream_LE>:
{
    1806:	fc 01       	movw	r30, r24
    1808:	cb 01       	movw	r24, r22
	if (Length > USB_ControlRequest.wLength)
    180a:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <USB_ControlRequest+0x6>
    180e:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <USB_ControlRequest+0x7>
    1812:	26 17       	cp	r18, r22
    1814:	37 07       	cpc	r19, r23
    1816:	90 f0       	brcs	.+36     	; 0x183c <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	29 f4       	brne	.+10     	; 0x1826 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    181c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1820:	2e 77       	andi	r18, 0x7E	; 126
    1822:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1826:	40 e0       	ldi	r20, 0x00	; 0
	while (Length || LastPacketFull)
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	51 f4       	brne	.+20     	; 0x1840 <Endpoint_Write_Control_PStream_LE+0x3a>
    182c:	41 11       	cpse	r20, r1
    182e:	08 c0       	rjmp	.+16     	; 0x1840 <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1830:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsOUTReceived()))
    1834:	82 ff       	sbrs	r24, 2
    1836:	31 c0       	rjmp	.+98     	; 0x189a <Endpoint_Write_Control_PStream_LE+0x94>
	return ENDPOINT_RWCSTREAM_NoError;
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	08 95       	ret
    183c:	c9 01       	movw	r24, r18
    183e:	f3 cf       	rjmp	.-26     	; 0x1826 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1840:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1844:	22 23       	and	r18, r18
    1846:	a9 f1       	breq	.+106    	; 0x18b2 <Endpoint_Write_Control_PStream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1848:	25 30       	cpi	r18, 0x05	; 5
    184a:	a9 f1       	breq	.+106    	; 0x18b6 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    184c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
    1850:	23 fd       	sbrc	r18, 3
    1852:	2d c0       	rjmp	.+90     	; 0x18ae <Endpoint_Write_Control_PStream_LE+0xa8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1854:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsOUTReceived())
    1858:	22 fd       	sbrc	r18, 2
    185a:	ea cf       	rjmp	.-44     	; 0x1830 <Endpoint_Write_Control_PStream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    185c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		if (Endpoint_IsINReady())
    1860:	20 ff       	sbrs	r18, 0
    1862:	e2 cf       	rjmp	.-60     	; 0x1828 <Endpoint_Write_Control_PStream_LE+0x22>
					return UEBCLX;
    1864:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    1868:	30 e0       	ldi	r19, 0x00	; 0
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	19 f0       	breq	.+6      	; 0x1874 <Endpoint_Write_Control_PStream_LE+0x6e>
    186e:	28 30       	cpi	r18, 0x08	; 8
    1870:	31 05       	cpc	r19, r1
    1872:	58 f0       	brcs	.+22     	; 0x188a <Endpoint_Write_Control_PStream_LE+0x84>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	28 30       	cpi	r18, 0x08	; 8
    1878:	31 05       	cpc	r19, r1
    187a:	09 f0       	breq	.+2      	; 0x187e <Endpoint_Write_Control_PStream_LE+0x78>
    187c:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    187e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1882:	2e 77       	andi	r18, 0x7E	; 126
    1884:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}
    1888:	cf cf       	rjmp	.-98     	; 0x1828 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    188a:	44 91       	lpm	r20, Z
				UEDATX = Data;
    188c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1890:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1892:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	e8 cf       	rjmp	.-48     	; 0x186a <Endpoint_Write_Control_PStream_LE+0x64>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    189a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    189e:	88 23       	and	r24, r24
    18a0:	41 f0       	breq	.+16     	; 0x18b2 <Endpoint_Write_Control_PStream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18a2:	85 30       	cpi	r24, 0x05	; 5
    18a4:	41 f0       	breq	.+16     	; 0x18b6 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		else if (Endpoint_IsSETUPReceived())
    18aa:	83 ff       	sbrs	r24, 3
    18ac:	c1 cf       	rjmp	.-126    	; 0x1830 <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
}
    18b0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18b6:	83 e0       	ldi	r24, 0x03	; 3
    18b8:	08 95       	ret

000018ba <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	aa 97       	sbiw	r28, 0x2a	; 42
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    18d0:	85 e6       	ldi	r24, 0x65	; 101
    18d2:	92 e0       	ldi	r25, 0x02	; 2

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    18d4:	fc 01       	movw	r30, r24
    18d6:	01 96       	adiw	r24, 0x01	; 1
				return UEDATX;
    18d8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    18dc:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    18de:	22 e0       	ldi	r18, 0x02	; 2
    18e0:	8d 36       	cpi	r24, 0x6D	; 109
    18e2:	92 07       	cpc	r25, r18
    18e4:	b9 f7       	brne	.-18     	; 0x18d4 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    18e6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
    18ee:	83 ff       	sbrs	r24, 3
    18f0:	1d c1       	rjmp	.+570    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    18f2:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    18f6:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <USB_ControlRequest+0x1>
    18fa:	9a 30       	cpi	r25, 0x0A	; 10
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <USB_Device_ProcessControlRequest+0x46>
    18fe:	16 c1       	rjmp	.+556    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
    1900:	e9 2f       	mov	r30, r25
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	e6 5b       	subi	r30, 0xB6	; 182
    1906:	f5 4d       	sbci	r31, 0xD5	; 213
    1908:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    190c:	80 38       	cpi	r24, 0x80	; 128
    190e:	99 f0       	breq	.+38     	; 0x1936 <USB_Device_ProcessControlRequest+0x7c>
    1910:	82 38       	cpi	r24, 0x82	; 130
    1912:	09 f0       	breq	.+2      	; 0x1916 <USB_Device_ProcessControlRequest+0x5c>
    1914:	0b c1       	rjmp	.+534    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1916:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <USB_ControlRequest+0x4>
    191a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    191c:	85 30       	cpi	r24, 0x05	; 5
    191e:	08 f0       	brcs	.+2      	; 0x1922 <USB_Device_ProcessControlRequest+0x68>
    1920:	05 c1       	rjmp	.+522    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1922:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1926:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    192a:	85 fb       	bst	r24, 5
    192c:	88 27       	eor	r24, r24
    192e:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1930:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			}
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <USB_Device_ProcessControlRequest+0x88>
	uint8_t CurrentStatus = 0;
    1936:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    193a:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <USB_Device_RemoteWakeupEnabled>
    193e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1940:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1942:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1946:	97 7f       	andi	r25, 0xF7	; 247
    1948:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    194c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
    1950:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1958:	8e 77       	andi	r24, 0x7E	; 126
    195a:	e4 c0       	rjmp	.+456    	; 0x1b24 <USB_Device_ProcessControlRequest+0x26a>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    195c:	88 23       	and	r24, r24
    195e:	09 f4       	brne	.+2      	; 0x1962 <USB_Device_ProcessControlRequest+0xa8>
    1960:	d2 c0       	rjmp	.+420    	; 0x1b06 <USB_Device_ProcessControlRequest+0x24c>
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	09 f0       	breq	.+2      	; 0x1968 <USB_Device_ProcessControlRequest+0xae>
    1966:	e2 c0       	rjmp	.+452    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1968:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <USB_ControlRequest+0x2>
    196c:	81 11       	cpse	r24, r1
    196e:	d5 c0       	rjmp	.+426    	; 0x1b1a <USB_Device_ProcessControlRequest+0x260>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1970:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <USB_ControlRequest+0x4>
    1974:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1976:	2f ef       	ldi	r18, 0xFF	; 255
    1978:	28 0f       	add	r18, r24
    197a:	24 30       	cpi	r18, 0x04	; 4
    197c:	08 f0       	brcs	.+2      	; 0x1980 <USB_Device_ProcessControlRequest+0xc6>
    197e:	d6 c0       	rjmp	.+428    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1980:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1984:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1988:	20 ff       	sbrs	r18, 0
    198a:	c7 c0       	rjmp	.+398    	; 0x1b1a <USB_Device_ProcessControlRequest+0x260>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    198c:	93 30       	cpi	r25, 0x03	; 3
    198e:	31 f4       	brne	.+12     	; 0x199c <USB_Device_ProcessControlRequest+0xe2>
				UECONX |= (1 << STALLRQ);
    1990:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1994:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1996:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			}
    199a:	bf c0       	rjmp	.+382    	; 0x1b1a <USB_Device_ProcessControlRequest+0x260>
				UECONX |= (1 << STALLRQC);
    199c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    19a0:	90 61       	ori	r25, 0x10	; 16
    19a2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    19a6:	21 e0       	ldi	r18, 0x01	; 1
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <USB_Device_ProcessControlRequest+0xf4>
    19ac:	22 0f       	add	r18, r18
    19ae:	8a 95       	dec	r24
    19b0:	ea f7       	brpl	.-6      	; 0x19ac <USB_Device_ProcessControlRequest+0xf2>
    19b2:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
    19b6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UECONX |= (1 << RSTDT);
    19ba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    19be:	88 60       	ori	r24, 0x08	; 8
    19c0:	ea cf       	rjmp	.-44     	; 0x1996 <USB_Device_ProcessControlRequest+0xdc>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    19c2:	81 11       	cpse	r24, r1
    19c4:	b3 c0       	rjmp	.+358    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    19c6:	10 91 67 02 	lds	r17, 0x0267	; 0x800267 <USB_ControlRequest+0x2>
    19ca:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    19cc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    19d0:	80 78       	andi	r24, 0x80	; 128
    19d2:	81 2b       	or	r24, r17
    19d4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
				UEINTX &= ~(1 << RXSTPI);
    19d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    19dc:	87 7f       	andi	r24, 0xF7	; 247
    19de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearStatusStage();
    19e2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	while (!(Endpoint_IsINReady()));
    19ea:	80 ff       	sbrs	r24, 0
    19ec:	fc cf       	rjmp	.-8      	; 0x19e6 <USB_Device_ProcessControlRequest+0x12c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    19ee:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    19f2:	80 68       	ori	r24, 0x80	; 128
    19f4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	11 11       	cpse	r17, r1
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <USB_DeviceState>
}
    1a02:	94 c0       	rjmp	.+296    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a04:	80 58       	subi	r24, 0x80	; 128
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <USB_Device_ProcessControlRequest+0x152>
    1a0a:	90 c0       	rjmp	.+288    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1a0c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <USB_ControlRequest+0x2>
    1a10:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <USB_ControlRequest+0x3>
    1a14:	8c 3d       	cpi	r24, 0xDC	; 220
    1a16:	23 e0       	ldi	r18, 0x03	; 3
    1a18:	92 07       	cpc	r25, r18
    1a1a:	99 f5       	brne	.+102    	; 0x1a82 <USB_Device_ProcessControlRequest+0x1c8>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1a20:	8a e2       	ldi	r24, 0x2A	; 42
    1a22:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1a24:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1a26:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1a28:	de 01       	movw	r26, r28
    1a2a:	13 96       	adiw	r26, 0x03	; 3
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1a2e:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1a30:	51 e2       	ldi	r21, 0x21	; 33
    1a32:	e3 2f       	mov	r30, r19
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    1a3a:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    1a3c:	20 ff       	sbrs	r18, 0
    1a3e:	03 c0       	rjmp	.+6      	; 0x1a46 <USB_Device_ProcessControlRequest+0x18c>
					{
						SerialByte >>= 4;
    1a40:	82 95       	swap	r24
    1a42:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1a44:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1a46:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1a48:	8a 30       	cpi	r24, 0x0A	; 10
    1a4a:	c8 f0       	brcs	.+50     	; 0x1a7e <USB_Device_ProcessControlRequest+0x1c4>
    1a4c:	89 5c       	subi	r24, 0xC9	; 201
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	8d 93       	st	X+, r24
    1a52:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1a54:	2f 5f       	subi	r18, 0xFF	; 255
    1a56:	24 31       	cpi	r18, 0x14	; 20
    1a58:	61 f7       	brne	.-40     	; 0x1a32 <USB_Device_ProcessControlRequest+0x178>
				SREG = GlobalIntState;
    1a5a:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1a5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1a60:	87 7f       	andi	r24, 0xF7	; 247
    1a62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1a66:	6a e2       	ldi	r22, 0x2A	; 42
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1a76:	8b 77       	andi	r24, 0x7B	; 123
    1a78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1a7c:	57 c0       	rjmp	.+174    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1a7e:	80 5d       	subi	r24, 0xD0	; 208
    1a80:	e6 cf       	rjmp	.-52     	; 0x1a4e <USB_Device_ProcessControlRequest+0x194>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1a82:	60 91 69 02 	lds	r22, 0x0269	; 0x800269 <USB_ControlRequest+0x4>
    1a86:	70 91 6a 02 	lds	r23, 0x026A	; 0x80026a <USB_ControlRequest+0x5>
    1a8a:	ae 01       	movw	r20, r28
    1a8c:	4f 5f       	subi	r20, 0xFF	; 255
    1a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a90:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <CALLBACK_USB_GetDescriptor>
    1a94:	bc 01       	movw	r22, r24
    1a96:	89 2b       	or	r24, r25
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <USB_Device_ProcessControlRequest+0x1e2>
    1a9a:	48 c0       	rjmp	.+144    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
				UEINTX &= ~(1 << RXSTPI);
    1a9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1aa0:	87 7f       	andi	r24, 0xF7	; 247
    1aa2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	0e 94 03 0c 	call	0x1806	; 0x1806 <Endpoint_Write_Control_PStream_LE>
    1aae:	e1 cf       	rjmp	.-62     	; 0x1a72 <USB_Device_ProcessControlRequest+0x1b8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1ab0:	80 38       	cpi	r24, 0x80	; 128
    1ab2:	e1 f5       	brne	.+120    	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
    1ab4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1ab8:	87 7f       	andi	r24, 0xF7	; 247
    1aba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1abe:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1ac2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    1ac6:	46 cf       	rjmp	.-372    	; 0x1954 <USB_Device_ProcessControlRequest+0x9a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ac8:	81 11       	cpse	r24, r1
    1aca:	30 c0       	rjmp	.+96     	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1acc:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <USB_ControlRequest+0x2>
    1ad0:	92 30       	cpi	r25, 0x02	; 2
    1ad2:	60 f5       	brcc	.+88     	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
				UEINTX &= ~(1 << RXSTPI);
    1ad4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1ad8:	87 7f       	andi	r24, 0xF7	; 247
    1ada:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1ade:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1ae2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    1ae6:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <USB_Device_ConfigurationNumber>
    1aea:	88 23       	and	r24, r24
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <USB_Device_ProcessControlRequest+0x238>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <USB_Device_ProcessControlRequest+0x242>
				return (UDADDR & (1 << ADDEN));
    1af2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1af6:	87 fd       	sbrc	r24, 7
    1af8:	fa cf       	rjmp	.-12     	; 0x1aee <USB_Device_ProcessControlRequest+0x234>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1b00:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <EVENT_USB_Device_ConfigurationChanged>
    1b04:	13 c0       	rjmp	.+38     	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b06:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <USB_ControlRequest+0x2>
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	79 f4       	brne	.+30     	; 0x1b2c <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	93 30       	cpi	r25, 0x03	; 3
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <USB_Device_ProcessControlRequest+0x25c>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b1a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
				UEINTX &= ~(1 << RXSTPI);
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1b22:	87 7f       	andi	r24, 0xF7	; 247
    1b24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1b28:	0e 94 0b 0b 	call	0x1616	; 0x1616 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (Endpoint_IsSETUPReceived())
    1b30:	83 ff       	sbrs	r24, 3
    1b32:	0a c0       	rjmp	.+20     	; 0x1b48 <USB_Device_ProcessControlRequest+0x28e>
				UEINTX &= ~(1 << RXSTPI);
    1b34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1b38:	87 7f       	andi	r24, 0xF7	; 247
    1b3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				UECONX |= (1 << STALLRQ);
    1b3e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1b42:	80 62       	ori	r24, 0x20	; 32
    1b44:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
}
    1b48:	aa 96       	adiw	r28, 0x2a	; 42
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	08 95       	ret

00001b5c <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1b5c:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b60:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b64:	e0 ee       	ldi	r30, 0xE0	; 224
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	81 60       	ori	r24, 0x01	; 1
    1b6c:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b6e:	e8 ed       	ldi	r30, 0xD8	; 216
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	8f 77       	andi	r24, 0x7F	; 127
    1b76:	80 83       	st	Z, r24
				PLLCSR = 0;
    1b78:	19 bc       	out	0x29, r1	; 41
				REGCR  |=  (1 << REGDIS);
    1b7a:	e3 e6       	ldi	r30, 0x63	; 99
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	81 60       	ori	r24, 0x01	; 1
    1b82:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b84:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <USB_IsInitialized>
}
    1b88:	08 95       	ret

00001b8a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b8a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b8e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b92:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1b96:	8f 77       	andi	r24, 0x7F	; 127
    1b98:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
    1b9c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1ba0:	80 68       	ori	r24, 0x80	; 128
    1ba2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON &= ~(1 << FRZCLK);
    1ba6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1baa:	8f 7d       	andi	r24, 0xDF	; 223
    1bac:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = USB_PLL_PSC;
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bb4:	86 e0       	ldi	r24, 0x06	; 6
    1bb6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1bb8:	09 b4       	in	r0, 0x29	; 41
    1bba:	00 fe       	sbrs	r0, 0
    1bbc:	fd cf       	rjmp	.-6      	; 0x1bb8 <USB_ResetInterface+0x2e>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1bbe:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1bc2:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1bc6:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1bca:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <USB_Device_CurrentlySelfPowered>
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bce:	42 e0       	ldi	r20, 0x02	; 2
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bd8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1bdc:	8e 7f       	andi	r24, 0xFE	; 254
    1bde:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  |= (1 << SUSPE);
    1be2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1be6:	81 60       	ori	r24, 0x01	; 1
    1be8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << EORSTE);
    1bec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1bf0:	88 60       	ori	r24, 0x08	; 8
    1bf2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				UDCON  &= ~(1 << DETACH);
    1bf6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
    1bfa:	8e 7f       	andi	r24, 0xFE	; 254
    1bfc:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
}
    1c00:	08 95       	ret

00001c02 <USB_Init>:
				REGCR  &= ~(1 << REGDIS);
    1c02:	e3 e6       	ldi	r30, 0x63	; 99
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	8e 7f       	andi	r24, 0xFE	; 254
    1c0a:	80 83       	st	Z, r24
	USB_IsInitialized = true;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <USB_IsInitialized>
	USB_ResetInterface();
    1c12:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <USB_ResetInterface>

00001c16 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c16:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	#endif
}
    1c1a:	08 95       	ret

00001c1c <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c1c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#endif
}
    1c20:	08 95       	ret

00001c22 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c22:	1f 92       	push	r1
    1c24:	0f 92       	push	r0
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c44:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c48:	82 ff       	sbrs	r24, 2
    1c4a:	0b c0       	rjmp	.+22     	; 0x1c62 <__vector_11+0x40>
						return (UDIEN  & (1 << SOFE));
    1c4c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1c50:	82 ff       	sbrs	r24, 2
    1c52:	07 c0       	rjmp	.+14     	; 0x1c62 <__vector_11+0x40>
						UDINT  &= ~(1 << SOFI);
    1c54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1c58:	8b 7f       	andi	r24, 0xFB	; 251
    1c5a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c5e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <USB_Event_Stub>
						return (UDINT  & (1 << SUSPI));
    1c62:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c66:	80 ff       	sbrs	r24, 0
    1c68:	18 c0       	rjmp	.+48     	; 0x1c9a <__vector_11+0x78>
						return (UDIEN  & (1 << SUSPE));
    1c6a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1c6e:	80 ff       	sbrs	r24, 0
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <__vector_11+0x78>
						UDIEN  &= ~(1 << SUSPE);
    1c72:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1c76:	8e 7f       	andi	r24, 0xFE	; 254
    1c78:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
    1c7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1c80:	80 61       	ori	r24, 0x10	; 16
    1c82:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				USBCON |=  (1 << FRZCLK);
    1c86:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				PLLCSR = 0;
    1c90:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1c92:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
    1c96:	0e 94 df 08 	call	0x11be	; 0x11be <EVENT_USB_Device_Disconnect>
						return (UDINT  & (1 << WAKEUPI));
    1c9a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c9e:	84 ff       	sbrs	r24, 4
    1ca0:	29 c0       	rjmp	.+82     	; 0x1cf4 <__vector_11+0xd2>
						return (UDIEN  & (1 << WAKEUPE));
    1ca2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1ca6:	84 ff       	sbrs	r24, 4
    1ca8:	25 c0       	rjmp	.+74     	; 0x1cf4 <__vector_11+0xd2>
				PLLCSR = USB_PLL_PSC;
    1caa:	84 e0       	ldi	r24, 0x04	; 4
    1cac:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cae:	86 e0       	ldi	r24, 0x06	; 6
    1cb0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1cb2:	09 b4       	in	r0, 0x29	; 41
    1cb4:	00 fe       	sbrs	r0, 0
    1cb6:	fd cf       	rjmp	.-6      	; 0x1cb2 <__vector_11+0x90>
				USBCON &= ~(1 << FRZCLK);
    1cb8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
    1cbc:	8f 7d       	andi	r24, 0xDF	; 223
    1cbe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1cc2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1cc6:	8f 7e       	andi	r24, 0xEF	; 239
    1cc8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1ccc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1cd0:	8f 7e       	andi	r24, 0xEF	; 239
    1cd2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << SUSPE);
    1cd6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1cda:	81 60       	ori	r24, 0x01	; 1
    1cdc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ce0:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <USB_Device_ConfigurationNumber>
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <__vector_11+0xc8>
    1ce8:	43 c0       	rjmp	.+134    	; 0x1d70 <__vector_11+0x14e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1cea:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1cec:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1cf0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << EORSTI));
    1cf4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1cf8:	83 ff       	sbrs	r24, 3
    1cfa:	29 c0       	rjmp	.+82     	; 0x1d4e <__vector_11+0x12c>
						return (UDIEN  & (1 << EORSTE));
    1cfc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1d00:	83 ff       	sbrs	r24, 3
    1d02:	25 c0       	rjmp	.+74     	; 0x1d4e <__vector_11+0x12c>
						UDINT  &= ~(1 << EORSTI);
    1d04:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1d08:	87 7f       	andi	r24, 0xF7	; 247
    1d0a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1d14:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1d18:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
    1d1c:	8e 7f       	andi	r24, 0xFE	; 254
    1d1e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						UDIEN  &= ~(1 << SUSPE);
    1d22:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1d26:	8e 7f       	andi	r24, 0xFE	; 254
    1d28:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						UDIEN  |= (1 << WAKEUPE);
    1d2c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
    1d30:	80 61       	ori	r24, 0x10	; 16
    1d32:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d36:	42 e0       	ldi	r20, 0x02	; 2
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1d40:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    1d44:	88 60       	ori	r24, 0x08	; 8
    1d46:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d4a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d4e:	ff 91       	pop	r31
    1d50:	ef 91       	pop	r30
    1d52:	bf 91       	pop	r27
    1d54:	af 91       	pop	r26
    1d56:	9f 91       	pop	r25
    1d58:	8f 91       	pop	r24
    1d5a:	7f 91       	pop	r23
    1d5c:	6f 91       	pop	r22
    1d5e:	5f 91       	pop	r21
    1d60:	4f 91       	pop	r20
    1d62:	3f 91       	pop	r19
    1d64:	2f 91       	pop	r18
    1d66:	0f 90       	pop	r0
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	0f 90       	pop	r0
    1d6c:	1f 90       	pop	r1
    1d6e:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d70:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d74:	87 fd       	sbrc	r24, 7
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <__vector_11+0x15a>
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	b8 cf       	rjmp	.-144    	; 0x1cec <__vector_11+0xca>
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	b6 cf       	rjmp	.-148    	; 0x1cec <__vector_11+0xca>

00001d80 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	2f 93       	push	r18
    1d8c:	3f 93       	push	r19
    1d8e:	4f 93       	push	r20
    1d90:	5f 93       	push	r21
    1d92:	6f 93       	push	r22
    1d94:	7f 93       	push	r23
    1d96:	8f 93       	push	r24
    1d98:	9f 93       	push	r25
    1d9a:	af 93       	push	r26
    1d9c:	bf 93       	push	r27
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	ef 93       	push	r30
    1da4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1da6:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1daa:	df 70       	andi	r29, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1dac:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1db0:	c8 2f       	mov	r28, r24
    1db2:	c1 70       	andi	r28, 0x01	; 1
    1db4:	80 fd       	sbrc	r24, 0
    1db6:	c0 e8       	ldi	r28, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1db8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX &= ~(1 << RXSTPE);
    1dbc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    1dc0:	87 7f       	andi	r24, 0xF7	; 247
    1dc2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1dc6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1dc8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <USB_Device_ProcessControlRequest>
    1dcc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						UEIENX |= (1 << RXSTPE);
    1dd0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
    1dd4:	88 60       	ori	r24, 0x08	; 8
    1dd6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1dda:	cd 2b       	or	r28, r29
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ddc:	cf 70       	andi	r28, 0x0F	; 15
    1dde:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	bf 91       	pop	r27
    1dec:	af 91       	pop	r26
    1dee:	9f 91       	pop	r25
    1df0:	8f 91       	pop	r24
    1df2:	7f 91       	pop	r23
    1df4:	6f 91       	pop	r22
    1df6:	5f 91       	pop	r21
    1df8:	4f 91       	pop	r20
    1dfa:	3f 91       	pop	r19
    1dfc:	2f 91       	pop	r18
    1dfe:	0f 90       	pop	r0
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	0f 90       	pop	r0
    1e04:	1f 90       	pop	r1
    1e06:	18 95       	reti

00001e08 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1e08:	08 95       	ret

00001e0a <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1e0a:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <driver+0x1>
    1e0e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <driver>
}
    1e12:	08 95       	ret

00001e14 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1e14:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <driver>
    1e18:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <driver+0x1>
    1e1c:	30 97       	sbiw	r30, 0x00	; 0
    1e1e:	21 f0       	breq	.+8      	; 0x1e28 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1e20:	01 90       	ld	r0, Z+
    1e22:	f0 81       	ld	r31, Z
    1e24:	e0 2d       	mov	r30, r0
    1e26:	09 94       	ijmp
}
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	08 95       	ret

00001e2c <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	8c 01       	movw	r16, r24
    if (!driver) return;
    1e3a:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <driver>
    1e3e:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <driver+0x1>
    1e42:	30 97       	sbiw	r30, 0x00	; 0
    1e44:	b1 f1       	breq	.+108    	; 0x1eb2 <host_keyboard_send+0x86>
    (*driver->send_keyboard)(report);
    1e46:	02 80       	ldd	r0, Z+2	; 0x02
    1e48:	f3 81       	ldd	r31, Z+3	; 0x03
    1e4a:	e0 2d       	mov	r30, r0
    1e4c:	09 95       	icall

    if (debug_keyboard) {
    1e4e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    1e52:	82 ff       	sbrs	r24, 2
    1e54:	2e c0       	rjmp	.+92     	; 0x1eb2 <host_keyboard_send+0x86>
        dprint("keyboard: ");
    1e56:	80 ff       	sbrs	r24, 0
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <host_keyboard_send+0x36>
    1e5a:	86 e2       	ldi	r24, 0x26	; 38
    1e5c:	93 e0       	ldi	r25, 0x03	; 3
    1e5e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    1e62:	e8 01       	movw	r28, r16
    1e64:	78 01       	movw	r14, r16
    1e66:	88 e0       	ldi	r24, 0x08	; 8
    1e68:	e8 0e       	add	r14, r24
    1e6a:	f1 1c       	adc	r15, r1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1e6c:	00 e2       	ldi	r16, 0x20	; 32
    1e6e:	13 e0       	ldi	r17, 0x03	; 3
    1e70:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    1e74:	80 ff       	sbrs	r24, 0
    1e76:	0b c0       	rjmp	.+22     	; 0x1e8e <host_keyboard_send+0x62>
    1e78:	88 81       	ld	r24, Y
    1e7a:	1f 92       	push	r1
    1e7c:	8f 93       	push	r24
    1e7e:	1f 93       	push	r17
    1e80:	0f 93       	push	r16
    1e82:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1e8e:	21 96       	adiw	r28, 0x01	; 1
    1e90:	ce 15       	cp	r28, r14
    1e92:	df 05       	cpc	r29, r15
    1e94:	69 f7       	brne	.-38     	; 0x1e70 <host_keyboard_send+0x44>
        }
        dprint("\n");
    1e96:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    1e9a:	80 ff       	sbrs	r24, 0
    1e9c:	0a c0       	rjmp	.+20     	; 0x1eb2 <host_keyboard_send+0x86>
    1e9e:	8e e1       	ldi	r24, 0x1E	; 30
    1ea0:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	ef 90       	pop	r14
        dprint("\n");
    1eae:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <xputs>
}
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	08 95       	ret

00001ec0 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    1ec0:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <driver>
    1ec4:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <driver+0x1>
    1ec8:	30 97       	sbiw	r30, 0x00	; 0
    1eca:	21 f0       	breq	.+8      	; 0x1ed4 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1ecc:	04 80       	ldd	r0, Z+4	; 0x04
    1ece:	f5 81       	ldd	r31, Z+5	; 0x05
    1ed0:	e0 2d       	mov	r30, r0
    1ed2:	09 94       	ijmp
}
    1ed4:	08 95       	ret

00001ed6 <host_system_send>:

void host_system_send(uint16_t report)
{
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    1edc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <last_system_report>
    1ee0:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <last_system_report+0x1>
    1ee4:	8c 17       	cp	r24, r28
    1ee6:	9d 07       	cpc	r25, r29
    1ee8:	01 f1       	breq	.+64     	; 0x1f2a <host_system_send+0x54>
    last_system_report = report;
    1eea:	d0 93 71 02 	sts	0x0271, r29	; 0x800271 <last_system_report+0x1>
    1eee:	c0 93 70 02 	sts	0x0270, r28	; 0x800270 <last_system_report>

    if (!driver) return;
    1ef2:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <driver>
    1ef6:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <driver+0x1>
    1efa:	30 97       	sbiw	r30, 0x00	; 0
    1efc:	b1 f0       	breq	.+44     	; 0x1f2a <host_system_send+0x54>
    (*driver->send_system)(report);
    1efe:	06 80       	ldd	r0, Z+6	; 0x06
    1f00:	f7 81       	ldd	r31, Z+7	; 0x07
    1f02:	e0 2d       	mov	r30, r0
    1f04:	ce 01       	movw	r24, r28
    1f06:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    1f08:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    1f0c:	85 70       	andi	r24, 0x05	; 5
    1f0e:	85 30       	cpi	r24, 0x05	; 5
    1f10:	61 f4       	brne	.+24     	; 0x1f2a <host_system_send+0x54>
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	80 e1       	ldi	r24, 0x10	; 16
    1f18:	93 e0       	ldi	r25, 0x03	; 3
    1f1a:	9f 93       	push	r25
    1f1c:	8f 93       	push	r24
    1f1e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    }
}
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	08 95       	ret

00001f30 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    1f36:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <last_consumer_report>
    1f3a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <last_consumer_report+0x1>
    1f3e:	8c 17       	cp	r24, r28
    1f40:	9d 07       	cpc	r25, r29
    1f42:	01 f1       	breq	.+64     	; 0x1f84 <host_consumer_send+0x54>
    last_consumer_report = report;
    1f44:	d0 93 6f 02 	sts	0x026F, r29	; 0x80026f <last_consumer_report+0x1>
    1f48:	c0 93 6e 02 	sts	0x026E, r28	; 0x80026e <last_consumer_report>

    if (!driver) return;
    1f4c:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <driver>
    1f50:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <driver+0x1>
    1f54:	30 97       	sbiw	r30, 0x00	; 0
    1f56:	b1 f0       	breq	.+44     	; 0x1f84 <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    1f58:	00 84       	ldd	r0, Z+8	; 0x08
    1f5a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f5c:	e0 2d       	mov	r30, r0
    1f5e:	ce 01       	movw	r24, r28
    1f60:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    1f62:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    1f66:	85 70       	andi	r24, 0x05	; 5
    1f68:	85 30       	cpi	r24, 0x05	; 5
    1f6a:	61 f4       	brne	.+24     	; 0x1f84 <host_consumer_send+0x54>
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	9f 93       	push	r25
    1f76:	8f 93       	push	r24
    1f78:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    }
}
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    1f8a:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <matrix_setup>

00001f8e <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1f8e:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <timer_init>
    matrix_init();
    1f92:	0e 94 69 06 	call	0xcd2	; 0xcd2 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    1f96:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <bootmagic>

00001f9a <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1f9a:	8f 92       	push	r8
    1f9c:	9f 92       	push	r9
    1f9e:	af 92       	push	r10
    1fa0:	bf 92       	push	r11
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	00 d0       	rcall	.+0      	; 0x1fb2 <keyboard_task+0x18>
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <keyboard_task+0x1a>
    1fb4:	0f 92       	push	r0
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1fba:	0e 94 73 06 	call	0xce6	; 0xce6 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1fbe:	85 e7       	ldi	r24, 0x75	; 117
    1fc0:	a8 2e       	mov	r10, r24
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	b8 2e       	mov	r11, r24
    1fc6:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row = matrix_get_row(r);
    1fc8:	81 2f       	mov	r24, r17
    1fca:	0e 94 c0 06 	call	0xd80	; 0xd80 <matrix_get_row>
    1fce:	f8 2e       	mov	r15, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1fd0:	f5 01       	movw	r30, r10
    1fd2:	d1 90       	ld	r13, Z+
    1fd4:	5f 01       	movw	r10, r30
        if (matrix_change) {
    1fd6:	d8 16       	cp	r13, r24
    1fd8:	99 f1       	breq	.+102    	; 0x2040 <keyboard_task+0xa6>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1fda:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    1fde:	81 fd       	sbrc	r24, 1
    1fe0:	0e 94 8f 10 	call	0x211e	; 0x211e <matrix_print>
        matrix_change = matrix_row ^ matrix_prev[r];
    1fe4:	df 24       	eor	r13, r15
    1fe6:	e1 2c       	mov	r14, r1
    1fe8:	01 e0       	ldi	r16, 0x01	; 1
    1fea:	45 01       	movw	r8, r10
    1fec:	f1 e0       	ldi	r31, 0x01	; 1
    1fee:	8f 1a       	sub	r8, r31
    1ff0:	91 08       	sbc	r9, r1
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    1ff2:	8d 2d       	mov	r24, r13
    1ff4:	80 23       	and	r24, r16
    1ff6:	f9 f0       	breq	.+62     	; 0x2036 <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
    1ff8:	e9 82       	std	Y+1, r14	; 0x01
    1ffa:	1a 83       	std	Y+2, r17	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    1ffc:	91 e0       	ldi	r25, 0x01	; 1
    1ffe:	8f 2d       	mov	r24, r15
    2000:	80 23       	and	r24, r16
    2002:	09 f4       	brne	.+2      	; 0x2006 <keyboard_task+0x6c>
    2004:	90 e0       	ldi	r25, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2006:	9b 83       	std	Y+3, r25	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    2008:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <timer_read>
    200c:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    200e:	78 2f       	mov	r23, r24
    2010:	9d 83       	std	Y+5, r25	; 0x05
    2012:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2014:	49 81       	ldd	r20, Y+1	; 0x01
    2016:	5a 81       	ldd	r21, Y+2	; 0x02
    2018:	6b 81       	ldd	r22, Y+3	; 0x03
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	0e 94 c5 10 	call	0x218a	; 0x218a <action_exec>
                    hook_matrix_change(e);
    2020:	49 81       	ldd	r20, Y+1	; 0x01
    2022:	5a 81       	ldd	r21, Y+2	; 0x02
    2024:	6b 81       	ldd	r22, Y+3	; 0x03
    2026:	7c 81       	ldd	r23, Y+4	; 0x04
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	0e 94 9b 1c 	call	0x3936	; 0x3936 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    202e:	f4 01       	movw	r30, r8
    2030:	80 81       	ld	r24, Z
    2032:	80 27       	eor	r24, r16
    2034:	80 83       	st	Z, r24
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    2036:	e3 94       	inc	r14
    2038:	00 0f       	add	r16, r16
    203a:	f8 e0       	ldi	r31, 0x08	; 8
    203c:	ef 12       	cpse	r14, r31
    203e:	d9 cf       	rjmp	.-78     	; 0x1ff2 <keyboard_task+0x58>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2040:	1f 5f       	subi	r17, 0xFF	; 255
    2042:	10 31       	cpi	r17, 0x10	; 16
    2044:	09 f0       	breq	.+2      	; 0x2048 <keyboard_task+0xae>
    2046:	c0 cf       	rjmp	.-128    	; 0x1fc8 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	8a 83       	std	Y+2, r24	; 0x02
    204e:	1b 82       	std	Y+3, r1	; 0x03
    2050:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <timer_read>
    2054:	81 60       	ori	r24, 0x01	; 1
    2056:	78 2f       	mov	r23, r24
    2058:	9d 83       	std	Y+5, r25	; 0x05
    205a:	8c 83       	std	Y+4, r24	; 0x04
    205c:	49 81       	ldd	r20, Y+1	; 0x01
    205e:	5a 81       	ldd	r21, Y+2	; 0x02
    2060:	6b 81       	ldd	r22, Y+3	; 0x03
    2062:	8d 81       	ldd	r24, Y+5	; 0x05
    2064:	0e 94 c5 10 	call	0x218a	; 0x218a <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    2068:	0e 94 9a 1c 	call	0x3934	; 0x3934 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    206c:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2070:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <host_keyboard_leds>
    2074:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <led_status.1>
    2078:	89 17       	cp	r24, r25
    207a:	49 f1       	breq	.+82     	; 0x20ce <keyboard_task+0x134>
        led_status = host_keyboard_leds();
    207c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <host_keyboard_leds>
    2080:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <led_status.1>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2084:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <debug_config>
    2088:	95 70       	andi	r25, 0x05	; 5
    208a:	95 30       	cpi	r25, 0x05	; 5
    208c:	61 f4       	brne	.+24     	; 0x20a6 <keyboard_task+0x10c>
    208e:	1f 92       	push	r1
    2090:	8f 93       	push	r24
    2092:	81 e3       	ldi	r24, 0x31	; 49
    2094:	93 e0       	ldi	r25, 0x03	; 3
    2096:	9f 93       	push	r25
    2098:	8f 93       	push	r24
    209a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    20a6:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <led_status.1>
    }
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	ff 90       	pop	r15
    20be:	ef 90       	pop	r14
    20c0:	df 90       	pop	r13
    20c2:	bf 90       	pop	r11
    20c4:	af 90       	pop	r10
    20c6:	9f 90       	pop	r9
    20c8:	8f 90       	pop	r8
        hook_keyboard_leds_change(led_status);
    20ca:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <hook_keyboard_leds_change>
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	9f 90       	pop	r9
    20ec:	8f 90       	pop	r8
    20ee:	08 95       	ret

000020f0 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    20f0:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <led_set>

000020f4 <matrix_setup>:
void matrix_clear(void)
{
}

__attribute__ ((weak))
void matrix_setup(void) {}
    20f4:	08 95       	ret

000020f6 <matrix_is_on>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    20f6:	cf 93       	push	r28
    20f8:	c6 2f       	mov	r28, r22
    return (matrix_get_row(row) & (1<<col));
    20fa:	0e 94 c0 06 	call	0xd80	; 0xd80 <matrix_get_row>
    20fe:	21 e0       	ldi	r18, 0x01	; 1
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <matrix_is_on+0x12>
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	ca 95       	dec	r28
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <matrix_is_on+0xe>
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	28 23       	and	r18, r24
    2110:	39 23       	and	r19, r25
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	23 2b       	or	r18, r19
    2116:	09 f4       	brne	.+2      	; 0x211a <matrix_is_on+0x24>
    2118:	80 e0       	ldi	r24, 0x00	; 0
}
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    211e:	ef 92       	push	r14
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    212a:	8a e4       	ldi	r24, 0x4A	; 74
    212c:	93 e0       	ldi	r25, 0x03	; 3
    212e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    2132:	d0 e0       	ldi	r29, 0x00	; 0
    2134:	c0 e0       	ldi	r28, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2136:	8d e2       	ldi	r24, 0x2D	; 45
    2138:	e8 2e       	mov	r14, r24
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	f8 2e       	mov	r15, r24
    213e:	0c e3       	ldi	r16, 0x3C	; 60
    2140:	13 e0       	ldi	r17, 0x03	; 3
    2142:	8c 2f       	mov	r24, r28
    2144:	0e 94 c0 06 	call	0xd80	; 0xd80 <matrix_get_row>
    2148:	0e 94 82 1c 	call	0x3904	; 0x3904 <bitrev>
    214c:	ff 92       	push	r15
    214e:	ef 92       	push	r14
    2150:	1f 92       	push	r1
    2152:	8f 93       	push	r24
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	1f 93       	push	r17
    215a:	0f 93       	push	r16
    215c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    2160:	21 96       	adiw	r28, 0x01	; 1
    2162:	8d b7       	in	r24, 0x3d	; 61
    2164:	9e b7       	in	r25, 0x3e	; 62
    2166:	08 96       	adiw	r24, 0x08	; 8
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	9e bf       	out	0x3e, r25	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	8d bf       	out	0x3d, r24	; 61
    2172:	c0 31       	cpi	r28, 0x10	; 16
    2174:	d1 05       	cpc	r29, r1
    2176:	29 f7       	brne	.-54     	; 0x2142 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	ff 90       	pop	r15
    2182:	ef 90       	pop	r14
    2184:	08 95       	ret

00002186 <matrix_power_up>:
    2186:	08 95       	ret

00002188 <matrix_power_down>:
    2188:	08 95       	ret

0000218a <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	2b 97       	sbiw	r28, 0x0b	; 11
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	4f 83       	std	Y+7, r20	; 0x07
    21a0:	58 87       	std	Y+8, r21	; 0x08
    21a2:	69 87       	std	Y+9, r22	; 0x09
    21a4:	7a 87       	std	Y+10, r23	; 0x0a
    21a6:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    21a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ac:	89 2b       	or	r24, r25
    21ae:	21 f0       	breq	.+8      	; 0x21b8 <action_exec+0x2e>
    21b0:	84 2f       	mov	r24, r20
    21b2:	85 23       	and	r24, r21
    21b4:	8f 3f       	cpi	r24, 0xFF	; 255
    21b6:	d1 f4       	brne	.+52     	; 0x21ec <action_exec+0x62>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    21b8:	1e 82       	std	Y+6, r1	; 0x06
    21ba:	85 e0       	ldi	r24, 0x05	; 5
    21bc:	fe 01       	movw	r30, r28
    21be:	37 96       	adiw	r30, 0x07	; 7
    21c0:	de 01       	movw	r26, r28
    21c2:	11 96       	adiw	r26, 0x01	; 1
    21c4:	01 90       	ld	r0, Z+
    21c6:	0d 92       	st	X+, r0
    21c8:	8a 95       	dec	r24
    21ca:	e1 f7       	brne	.-8      	; 0x21c4 <action_exec+0x3a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    21cc:	49 81       	ldd	r20, Y+1	; 0x01
    21ce:	5a 81       	ldd	r21, Y+2	; 0x02
    21d0:	6b 81       	ldd	r22, Y+3	; 0x03
    21d2:	7c 81       	ldd	r23, Y+4	; 0x04
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    21d8:	2b 96       	adiw	r28, 0x0b	; 11
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    action_tapping_process(record);
    21e8:	0c 94 23 18 	jmp	0x3046	; 0x3046 <action_tapping_process>
        hook_matrix_change(event);
    21ec:	69 85       	ldd	r22, Y+9	; 0x09
    21ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    21f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f2:	0e 94 9b 1c 	call	0x3936	; 0x3936 <hook_matrix_change>
    21f6:	e0 cf       	rjmp	.-64     	; 0x21b8 <action_exec+0x2e>

000021f8 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    21f8:	cf 93       	push	r28
    21fa:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    21fc:	88 23       	and	r24, r24
    21fe:	09 f4       	brne	.+2      	; 0x2202 <register_code+0xa>
    2200:	90 c0       	rjmp	.+288    	; 0x2322 <register_code+0x12a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2202:	8c ef       	ldi	r24, 0xFC	; 252
    2204:	8c 0f       	add	r24, r28
    2206:	81 3a       	cpi	r24, 0xA1	; 161
    2208:	58 f4       	brcc	.+22     	; 0x2220 <register_code+0x28>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    220a:	8c 2f       	mov	r24, r28
    220c:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <command_proc>
    2210:	81 11       	cpse	r24, r1
    2212:	87 c0       	rjmp	.+270    	; 0x2322 <register_code+0x12a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2214:	8c 2f       	mov	r24, r28
    2216:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <add_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    221a:	cf 91       	pop	r28
        send_keyboard_report();
    221c:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <send_keyboard_report>
    else if IS_MOD(code) {
    2220:	80 e2       	ldi	r24, 0x20	; 32
    2222:	8c 0f       	add	r24, r28
    2224:	88 30       	cpi	r24, 0x08	; 8
    2226:	48 f4       	brcc	.+18     	; 0x223a <register_code+0x42>
        add_mods(MOD_BIT(code));
    2228:	c7 70       	andi	r28, 0x07	; 7
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	01 c0       	rjmp	.+2      	; 0x2230 <register_code+0x38>
    222e:	88 0f       	add	r24, r24
    2230:	ca 95       	dec	r28
    2232:	ea f7       	brpl	.-6      	; 0x222e <register_code+0x36>
    2234:	0e 94 1c 1c 	call	0x3838	; 0x3838 <add_mods>
    2238:	f0 cf       	rjmp	.-32     	; 0x221a <register_code+0x22>
    else if IS_SYSTEM(code) {
    223a:	8b e5       	ldi	r24, 0x5B	; 91
    223c:	8c 0f       	add	r24, r28
    223e:	83 30       	cpi	r24, 0x03	; 3
    2240:	68 f4       	brcc	.+26     	; 0x225c <register_code+0x64>
        host_system_send(KEYCODE2SYSTEM(code));
    2242:	81 e8       	ldi	r24, 0x81	; 129
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	c5 3a       	cpi	r28, 0xA5	; 165
    2248:	31 f0       	breq	.+12     	; 0x2256 <register_code+0x5e>
    224a:	83 e8       	ldi	r24, 0x83	; 131
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	c6 3a       	cpi	r28, 0xA6	; 166
    2250:	11 f4       	brne	.+4      	; 0x2256 <register_code+0x5e>
    2252:	82 e8       	ldi	r24, 0x82	; 130
    2254:	90 e0       	ldi	r25, 0x00	; 0
}
    2256:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2258:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <host_system_send>
    else if IS_CONSUMER(code) {
    225c:	88 e5       	ldi	r24, 0x58	; 88
    225e:	8c 0f       	add	r24, r28
    2260:	85 31       	cpi	r24, 0x15	; 21
    2262:	08 f0       	brcs	.+2      	; 0x2266 <register_code+0x6e>
    2264:	5e c0       	rjmp	.+188    	; 0x2322 <register_code+0x12a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2266:	82 ee       	ldi	r24, 0xE2	; 226
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	c8 3a       	cpi	r28, 0xA8	; 168
    226c:	09 f4       	brne	.+2      	; 0x2270 <register_code+0x78>
    226e:	56 c0       	rjmp	.+172    	; 0x231c <register_code+0x124>
    2270:	89 ee       	ldi	r24, 0xE9	; 233
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	c9 3a       	cpi	r28, 0xA9	; 169
    2276:	09 f4       	brne	.+2      	; 0x227a <register_code+0x82>
    2278:	51 c0       	rjmp	.+162    	; 0x231c <register_code+0x124>
    227a:	8a ee       	ldi	r24, 0xEA	; 234
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	ca 3a       	cpi	r28, 0xAA	; 170
    2280:	09 f4       	brne	.+2      	; 0x2284 <register_code+0x8c>
    2282:	4c c0       	rjmp	.+152    	; 0x231c <register_code+0x124>
    2284:	85 eb       	ldi	r24, 0xB5	; 181
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	cb 3a       	cpi	r28, 0xAB	; 171
    228a:	09 f4       	brne	.+2      	; 0x228e <register_code+0x96>
    228c:	47 c0       	rjmp	.+142    	; 0x231c <register_code+0x124>
    228e:	86 eb       	ldi	r24, 0xB6	; 182
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	cc 3a       	cpi	r28, 0xAC	; 172
    2294:	09 f4       	brne	.+2      	; 0x2298 <register_code+0xa0>
    2296:	42 c0       	rjmp	.+132    	; 0x231c <register_code+0x124>
    2298:	83 eb       	ldi	r24, 0xB3	; 179
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	cd 3a       	cpi	r28, 0xAD	; 173
    229e:	f1 f1       	breq	.+124    	; 0x231c <register_code+0x124>
    22a0:	84 eb       	ldi	r24, 0xB4	; 180
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	ce 3a       	cpi	r28, 0xAE	; 174
    22a6:	d1 f1       	breq	.+116    	; 0x231c <register_code+0x124>
    22a8:	87 eb       	ldi	r24, 0xB7	; 183
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	cf 3a       	cpi	r28, 0xAF	; 175
    22ae:	b1 f1       	breq	.+108    	; 0x231c <register_code+0x124>
    22b0:	8c ec       	ldi	r24, 0xCC	; 204
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	c1 3b       	cpi	r28, 0xB1	; 177
    22b6:	91 f1       	breq	.+100    	; 0x231c <register_code+0x124>
    22b8:	8d ec       	ldi	r24, 0xCD	; 205
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	c0 3b       	cpi	r28, 0xB0	; 176
    22be:	71 f1       	breq	.+92     	; 0x231c <register_code+0x124>
    22c0:	83 e8       	ldi	r24, 0x83	; 131
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	c2 3b       	cpi	r28, 0xB2	; 178
    22c6:	51 f1       	breq	.+84     	; 0x231c <register_code+0x124>
    22c8:	8a e8       	ldi	r24, 0x8A	; 138
    22ca:	91 e0       	ldi	r25, 0x01	; 1
    22cc:	c3 3b       	cpi	r28, 0xB3	; 179
    22ce:	31 f1       	breq	.+76     	; 0x231c <register_code+0x124>
    22d0:	82 e9       	ldi	r24, 0x92	; 146
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	c4 3b       	cpi	r28, 0xB4	; 180
    22d6:	11 f1       	breq	.+68     	; 0x231c <register_code+0x124>
    22d8:	84 e9       	ldi	r24, 0x94	; 148
    22da:	91 e0       	ldi	r25, 0x01	; 1
    22dc:	c5 3b       	cpi	r28, 0xB5	; 181
    22de:	f1 f0       	breq	.+60     	; 0x231c <register_code+0x124>
    22e0:	81 e2       	ldi	r24, 0x21	; 33
    22e2:	92 e0       	ldi	r25, 0x02	; 2
    22e4:	c6 3b       	cpi	r28, 0xB6	; 182
    22e6:	d1 f0       	breq	.+52     	; 0x231c <register_code+0x124>
    22e8:	83 e2       	ldi	r24, 0x23	; 35
    22ea:	92 e0       	ldi	r25, 0x02	; 2
    22ec:	c7 3b       	cpi	r28, 0xB7	; 183
    22ee:	b1 f0       	breq	.+44     	; 0x231c <register_code+0x124>
    22f0:	84 e2       	ldi	r24, 0x24	; 36
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	c8 3b       	cpi	r28, 0xB8	; 184
    22f6:	91 f0       	breq	.+36     	; 0x231c <register_code+0x124>
    22f8:	85 e2       	ldi	r24, 0x25	; 37
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	c9 3b       	cpi	r28, 0xB9	; 185
    22fe:	71 f0       	breq	.+28     	; 0x231c <register_code+0x124>
    2300:	86 e2       	ldi	r24, 0x26	; 38
    2302:	92 e0       	ldi	r25, 0x02	; 2
    2304:	ca 3b       	cpi	r28, 0xBA	; 186
    2306:	51 f0       	breq	.+20     	; 0x231c <register_code+0x124>
    2308:	87 e2       	ldi	r24, 0x27	; 39
    230a:	92 e0       	ldi	r25, 0x02	; 2
    230c:	cb 3b       	cpi	r28, 0xBB	; 187
    230e:	31 f0       	breq	.+12     	; 0x231c <register_code+0x124>
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	cc 3b       	cpi	r28, 0xBC	; 188
    2316:	11 f4       	brne	.+4      	; 0x231c <register_code+0x124>
    2318:	8a e2       	ldi	r24, 0x2A	; 42
    231a:	92 e0       	ldi	r25, 0x02	; 2
}
    231c:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    231e:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <host_consumer_send>
}
    2322:	cf 91       	pop	r28
    2324:	08 95       	ret

00002326 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2326:	88 23       	and	r24, r24
    2328:	29 f1       	breq	.+74     	; 0x2374 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    232a:	9c ef       	ldi	r25, 0xFC	; 252
    232c:	98 0f       	add	r25, r24
    232e:	91 3a       	cpi	r25, 0xA1	; 161
    2330:	20 f4       	brcc	.+8      	; 0x233a <unregister_code+0x14>
        del_key(code);
    2332:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <del_key>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    2336:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <send_keyboard_report>
    else if IS_MOD(code) {
    233a:	90 e2       	ldi	r25, 0x20	; 32
    233c:	98 0f       	add	r25, r24
    233e:	98 30       	cpi	r25, 0x08	; 8
    2340:	50 f4       	brcc	.+20     	; 0x2356 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    2342:	87 70       	andi	r24, 0x07	; 7
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	01 c0       	rjmp	.+2      	; 0x234a <unregister_code+0x24>
    2348:	99 0f       	add	r25, r25
    234a:	8a 95       	dec	r24
    234c:	ea f7       	brpl	.-6      	; 0x2348 <unregister_code+0x22>
    234e:	89 2f       	mov	r24, r25
    2350:	0e 94 22 1c 	call	0x3844	; 0x3844 <del_mods>
    2354:	f0 cf       	rjmp	.-32     	; 0x2336 <unregister_code+0x10>
    }
    else if IS_SYSTEM(code) {
    2356:	9b e5       	ldi	r25, 0x5B	; 91
    2358:	98 0f       	add	r25, r24
    235a:	93 30       	cpi	r25, 0x03	; 3
    235c:	20 f4       	brcc	.+8      	; 0x2366 <unregister_code+0x40>
        host_system_send(0);
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2366:	88 5a       	subi	r24, 0xA8	; 168
    2368:	85 31       	cpi	r24, 0x15	; 21
    236a:	20 f4       	brcc	.+8      	; 0x2374 <unregister_code+0x4e>
        host_consumer_send(0);
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <host_consumer_send>
    }
}
    2374:	08 95       	ret

00002376 <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2376:	88 23       	and	r24, r24
    2378:	21 f0       	breq	.+8      	; 0x2382 <register_mods+0xc>
        add_mods(mods);
    237a:	0e 94 1c 1c 	call	0x3838	; 0x3838 <add_mods>
        send_keyboard_report();
    237e:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <send_keyboard_report>
    }
}
    2382:	08 95       	ret

00002384 <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2384:	88 23       	and	r24, r24
    2386:	21 f0       	breq	.+8      	; 0x2390 <unregister_mods+0xc>
        del_mods(mods);
    2388:	0e 94 22 1c 	call	0x3844	; 0x3844 <del_mods>
        send_keyboard_report();
    238c:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <send_keyboard_report>
    }
}
    2390:	08 95       	ret

00002392 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2392:	0e 94 3e 1c 	call	0x387c	; 0x387c <clear_weak_mods>
    clear_keys();
    2396:	0e 94 0b 1c 	call	0x3816	; 0x3816 <clear_keys>
    send_keyboard_report();
    239a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    239e:	0e 94 bb 23 	call	0x4776	; 0x4776 <mousekey_clear>
    mousekey_send();
    23a2:	0e 94 46 22 	call	0x448c	; 0x448c <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <host_system_send>
    host_consumer_send(0);
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <host_consumer_send>

000023b6 <clear_keyboard>:
    clear_mods();
    23b6:	0e 94 2d 1c 	call	0x385a	; 0x385a <clear_mods>
    clear_keyboard_but_mods();
    23ba:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <clear_keyboard_but_mods>

000023be <process_action>:
{
    23be:	af 92       	push	r10
    23c0:	bf 92       	push	r11
    23c2:	cf 92       	push	r12
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	29 97       	sbiw	r28, 0x09	; 9
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	5c 01       	movw	r10, r24
    if (hook_process_action(record)) return;
    23e4:	0e 94 af 1c 	call	0x395e	; 0x395e <hook_process_action>
    23e8:	81 11       	cpse	r24, r1
    23ea:	14 c0       	rjmp	.+40     	; 0x2414 <process_action+0x56>
    keyevent_t event = record->event;
    23ec:	85 e0       	ldi	r24, 0x05	; 5
    23ee:	f5 01       	movw	r30, r10
    23f0:	de 01       	movw	r26, r28
    23f2:	11 96       	adiw	r26, 0x01	; 1
    23f4:	01 90       	ld	r0, Z+
    23f6:	0d 92       	st	X+, r0
    23f8:	8a 95       	dec	r24
    23fa:	e1 f7       	brne	.-8      	; 0x23f4 <process_action+0x36>
    23fc:	f5 01       	movw	r30, r10
    23fe:	83 81       	ldd	r24, Z+3	; 0x03
    2400:	94 81       	ldd	r25, Z+4	; 0x04
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	39 f0       	breq	.+14     	; 0x2414 <process_action+0x56>
    2406:	40 81       	ld	r20, Z
    2408:	51 81       	ldd	r21, Z+1	; 0x01
    240a:	24 2f       	mov	r18, r20
    240c:	25 23       	and	r18, r21
    240e:	2f 3f       	cpi	r18, 0xFF	; 255
    2410:	09 f0       	breq	.+2      	; 0x2414 <process_action+0x56>
    2412:	46 c3       	rjmp	.+1676   	; 0x2aa0 <process_action+0x6e2>
}
    2414:	29 96       	adiw	r28, 0x09	; 9
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	ef 90       	pop	r14
    242c:	df 90       	pop	r13
    242e:	cf 90       	pop	r12
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	08 95       	ret
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2436:	f1 2f       	mov	r31, r17
    2438:	ff 70       	andi	r31, 0x0F	; 15
    243a:	ef 2e       	mov	r14, r31
    243c:	10 7f       	andi	r17, 0xF0	; 240
    243e:	19 f0       	breq	.+6      	; 0x2446 <process_action+0x88>
    2440:	e2 94       	swap	r14
    2442:	40 ef       	ldi	r20, 0xF0	; 240
    2444:	e4 22       	and	r14, r20
                if (event.pressed) {
    2446:	ff 20       	and	r15, r15
    2448:	d1 f0       	breq	.+52     	; 0x247e <process_action+0xc0>
                    if (mods) {
    244a:	ee 20       	and	r14, r14
    244c:	29 f0       	breq	.+10     	; 0x2458 <process_action+0x9a>
                        add_weak_mods(mods);
    244e:	8e 2d       	mov	r24, r14
    2450:	0e 94 30 1c 	call	0x3860	; 0x3860 <add_weak_mods>
                        send_keyboard_report();
    2454:	0e 94 57 1c 	call	0x38ae	; 0x38ae <send_keyboard_report>
                            register_code(action.layer_tap.code);
    2458:	80 2f       	mov	r24, r16
}
    245a:	29 96       	adiw	r28, 0x09	; 9
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	ff 90       	pop	r15
    2470:	ef 90       	pop	r14
    2472:	df 90       	pop	r13
    2474:	cf 90       	pop	r12
    2476:	bf 90       	pop	r11
    2478:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    247a:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <register_code>
                    unregister_code(action.key.code);
    247e:	80 2f       	mov	r24, r16
    2480:	0e 94 93 11 	call	0x2326	; 0x2326 <unregister_code>
                    if (mods) {
    2484:	ee 20       	and	r14, r14
    2486:	31 f2       	breq	.-116    	; 0x2414 <process_action+0x56>
                        del_weak_mods(mods);
    2488:	8e 2d       	mov	r24, r14
    248a:	0e 94 36 1c 	call	0x386c	; 0x386c <del_weak_mods>
}
    248e:	29 96       	adiw	r28, 0x09	; 9
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	1f 91       	pop	r17
    24a0:	0f 91       	pop	r16
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	df 90       	pop	r13
    24a8:	cf 90       	pop	r12
    24aa:	bf 90       	pop	r11
    24ac:	af 90       	pop	r10
                        send_keyboard_report();
    24ae:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    24b2:	21 2f       	mov	r18, r17
    24b4:	2f 70       	andi	r18, 0x0F	; 15
    24b6:	d2 2e       	mov	r13, r18
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    24b8:	10 7f       	andi	r17, 0xF0	; 240
    24ba:	10 32       	cpi	r17, 0x20	; 32
    24bc:	19 f0       	breq	.+6      	; 0x24c4 <process_action+0x106>
    24be:	d2 94       	swap	r13
    24c0:	30 ef       	ldi	r19, 0xF0	; 240
    24c2:	d3 22       	and	r13, r19
                switch (action.key.code) {
    24c4:	00 23       	and	r16, r16
    24c6:	79 f0       	breq	.+30     	; 0x24e6 <process_action+0x128>
    24c8:	01 30       	cpi	r16, 0x01	; 1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <process_action+0x110>
    24cc:	55 c0       	rjmp	.+170    	; 0x2578 <process_action+0x1ba>
                        if (event.pressed) {
    24ce:	ff 20       	and	r15, r15
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <process_action+0x116>
    24d2:	63 c0       	rjmp	.+198    	; 0x259a <process_action+0x1dc>
                            if (tap_count > 0) {
    24d4:	ee 20       	and	r14, r14
    24d6:	59 f0       	breq	.+22     	; 0x24ee <process_action+0x130>
                                if (record->tap.interrupted) {
    24d8:	f5 01       	movw	r30, r10
    24da:	85 81       	ldd	r24, Z+5	; 0x05
    24dc:	80 ff       	sbrs	r24, 0
    24de:	bc cf       	rjmp	.-136    	; 0x2458 <process_action+0x9a>
                                    record->tap.count = 0;
    24e0:	8f 70       	andi	r24, 0x0F	; 15
    24e2:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    24e4:	04 c0       	rjmp	.+8      	; 0x24ee <process_action+0x130>
                        if (event.pressed) {
    24e6:	ff 20       	and	r15, r15
    24e8:	59 f1       	breq	.+86     	; 0x2540 <process_action+0x182>
                            if (tap_count == 0) {
    24ea:	e1 10       	cpse	r14, r1
    24ec:	13 c0       	rjmp	.+38     	; 0x2514 <process_action+0x156>
                                    register_mods(mods);
    24ee:	8d 2d       	mov	r24, r13
}
    24f0:	29 96       	adiw	r28, 0x09	; 9
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	cf 90       	pop	r12
    250c:	bf 90       	pop	r11
    250e:	af 90       	pop	r10
                                    register_mods(mods);
    2510:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <register_mods>
                            else if (tap_count == 1) {
    2514:	31 e0       	ldi	r19, 0x01	; 1
                                set_oneshot_mods(mods);
    2516:	8d 2d       	mov	r24, r13
                            else if (tap_count == 1) {
    2518:	e3 12       	cpse	r14, r19
    251a:	ea cf       	rjmp	.-44     	; 0x24f0 <process_action+0x132>
}
    251c:	29 96       	adiw	r28, 0x09	; 9
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
    2538:	bf 90       	pop	r11
    253a:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    253c:	0c 94 41 1c 	jmp	0x3882	; 0x3882 <set_oneshot_mods>
                            if (tap_count == 0) {
    2540:	e1 10       	cpse	r14, r1
    2542:	15 c0       	rjmp	.+42     	; 0x256e <process_action+0x1b0>
                                clear_oneshot_mods();
    2544:	0e 94 44 1c 	call	0x3888	; 0x3888 <clear_oneshot_mods>
                                unregister_mods(mods);
    2548:	8d 2d       	mov	r24, r13
}
    254a:	29 96       	adiw	r28, 0x09	; 9
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	ff 90       	pop	r15
    2560:	ef 90       	pop	r14
    2562:	df 90       	pop	r13
    2564:	cf 90       	pop	r12
    2566:	bf 90       	pop	r11
    2568:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    256a:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <unregister_mods>
                            else if (tap_count == 1) {
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	e4 16       	cp	r14, r20
    2572:	09 f4       	brne	.+2      	; 0x2576 <process_action+0x1b8>
    2574:	4f cf       	rjmp	.-354    	; 0x2414 <process_action+0x56>
    2576:	e6 cf       	rjmp	.-52     	; 0x2544 <process_action+0x186>
                        if (event.pressed) {
    2578:	ff 20       	and	r15, r15
    257a:	51 f0       	breq	.+20     	; 0x2590 <process_action+0x1d2>
                            if (tap_count <= TAPPING_TOGGLE) {
    257c:	55 e0       	ldi	r21, 0x05	; 5
    257e:	5e 15       	cp	r21, r14
    2580:	08 f4       	brcc	.+2      	; 0x2584 <process_action+0x1c6>
    2582:	48 cf       	rjmp	.-368    	; 0x2414 <process_action+0x56>
                                if (mods & get_mods()) {
    2584:	0e 94 19 1c 	call	0x3832	; 0x3832 <get_mods>
    2588:	8d 21       	and	r24, r13
    258a:	09 f4       	brne	.+2      	; 0x258e <process_action+0x1d0>
    258c:	b0 cf       	rjmp	.-160    	; 0x24ee <process_action+0x130>
    258e:	dc cf       	rjmp	.-72     	; 0x2548 <process_action+0x18a>
                            if (tap_count < TAPPING_TOGGLE) {
    2590:	84 e0       	ldi	r24, 0x04	; 4
    2592:	8e 15       	cp	r24, r14
    2594:	08 f4       	brcc	.+2      	; 0x2598 <process_action+0x1da>
    2596:	3e cf       	rjmp	.-388    	; 0x2414 <process_action+0x56>
    2598:	d7 cf       	rjmp	.-82     	; 0x2548 <process_action+0x18a>
                            if (tap_count > 0) {
    259a:	ee 20       	and	r14, r14
    259c:	a9 f2       	breq	.-86     	; 0x2548 <process_action+0x18a>
                            unregister_code(action.layer_tap.code);
    259e:	80 2f       	mov	r24, r16
}
    25a0:	29 96       	adiw	r28, 0x09	; 9
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	df 90       	pop	r13
    25ba:	cf 90       	pop	r12
    25bc:	bf 90       	pop	r11
    25be:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    25c0:	0c 94 93 11 	jmp	0x2326	; 0x2326 <unregister_code>
            switch (action.usage.page) {
    25c4:	81 2f       	mov	r24, r17
    25c6:	86 95       	lsr	r24
    25c8:	86 95       	lsr	r24
    25ca:	83 70       	andi	r24, 0x03	; 3
    25cc:	d9 f0       	breq	.+54     	; 0x2604 <process_action+0x246>
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <process_action+0x216>
    25d2:	20 cf       	rjmp	.-448    	; 0x2414 <process_action+0x56>
                        host_consumer_send(action.usage.code);
    25d4:	c8 01       	movw	r24, r16
    25d6:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    25d8:	f1 10       	cpse	r15, r1
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <process_action+0x222>
                        host_consumer_send(0);
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	80 e0       	ldi	r24, 0x00	; 0
}
    25e0:	29 96       	adiw	r28, 0x09	; 9
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	df 90       	pop	r13
    25fa:	cf 90       	pop	r12
    25fc:	bf 90       	pop	r11
    25fe:	af 90       	pop	r10
                        host_consumer_send(0);
    2600:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <host_consumer_send>
                        host_system_send(action.usage.code);
    2604:	c8 01       	movw	r24, r16
    2606:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    2608:	f1 10       	cpse	r15, r1
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <process_action+0x252>
                        host_system_send(0);
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	80 e0       	ldi	r24, 0x00	; 0
}
    2610:	29 96       	adiw	r28, 0x09	; 9
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	ff 90       	pop	r15
    2626:	ef 90       	pop	r14
    2628:	df 90       	pop	r13
    262a:	cf 90       	pop	r12
    262c:	bf 90       	pop	r11
    262e:	af 90       	pop	r10
                        host_system_send(0);
    2630:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <host_system_send>
                mousekey_on(action.key.code);
    2634:	80 2f       	mov	r24, r16
            if (event.pressed) {
    2636:	ff 20       	and	r15, r15
    2638:	a1 f0       	breq	.+40     	; 0x2662 <process_action+0x2a4>
                mousekey_on(action.key.code);
    263a:	0e 94 5f 21 	call	0x42be	; 0x42be <mousekey_on>
}
    263e:	29 96       	adiw	r28, 0x09	; 9
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	1f 91       	pop	r17
    2650:	0f 91       	pop	r16
    2652:	ff 90       	pop	r15
    2654:	ef 90       	pop	r14
    2656:	df 90       	pop	r13
    2658:	cf 90       	pop	r12
    265a:	bf 90       	pop	r11
    265c:	af 90       	pop	r10
                mousekey_send();
    265e:	0c 94 46 22 	jmp	0x448c	; 0x448c <mousekey_send>
                mousekey_off(action.key.code);
    2662:	0e 94 c7 21 	call	0x438e	; 0x438e <mousekey_off>
    2666:	eb cf       	rjmp	.-42     	; 0x263e <process_action+0x280>
            if (action.layer_bitop.on == 0) {
    2668:	81 2f       	mov	r24, r17
    266a:	83 70       	andi	r24, 0x03	; 3
    266c:	09 f0       	breq	.+2      	; 0x2670 <process_action+0x2b2>
    266e:	8c c0       	rjmp	.+280    	; 0x2788 <process_action+0x3ca>
                if (!event.pressed) {
    2670:	f1 10       	cpse	r15, r1
    2672:	d0 ce       	rjmp	.-608    	; 0x2414 <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    2674:	20 2f       	mov	r18, r16
    2676:	22 95       	swap	r18
    2678:	26 95       	lsr	r18
    267a:	27 70       	andi	r18, 0x07	; 7
    267c:	22 0f       	add	r18, r18
    267e:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2680:	80 2f       	mov	r24, r16
    2682:	8f 70       	andi	r24, 0x0F	; 15
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	a0 e0       	ldi	r26, 0x00	; 0
    268a:	6c 01       	movw	r12, r24
    268c:	7d 01       	movw	r14, r26
    268e:	02 2e       	mov	r0, r18
    2690:	04 c0       	rjmp	.+8      	; 0x269a <process_action+0x2dc>
    2692:	cc 0c       	add	r12, r12
    2694:	dd 1c       	adc	r13, r13
    2696:	ee 1c       	adc	r14, r14
    2698:	ff 1c       	adc	r15, r15
    269a:	0a 94       	dec	r0
    269c:	d2 f7       	brpl	.-12     	; 0x2692 <process_action+0x2d4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	cb 01       	movw	r24, r22
    26a4:	04 ff       	sbrs	r16, 4
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <process_action+0x308>
    26a8:	6f e0       	ldi	r22, 0x0F	; 15
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <process_action+0x2fc>
    26b2:	66 0f       	add	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	88 1f       	adc	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	2a 95       	dec	r18
    26bc:	d2 f7       	brpl	.-12     	; 0x26b2 <process_action+0x2f4>
    26be:	60 95       	com	r22
    26c0:	70 95       	com	r23
    26c2:	80 95       	com	r24
    26c4:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    26c6:	16 95       	lsr	r17
    26c8:	16 95       	lsr	r17
    26ca:	13 70       	andi	r17, 0x03	; 3
    26cc:	12 30       	cpi	r17, 0x02	; 2
    26ce:	c9 f1       	breq	.+114    	; 0x2742 <process_action+0x384>
    26d0:	13 30       	cpi	r17, 0x03	; 3
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <process_action+0x318>
    26d4:	54 c0       	rjmp	.+168    	; 0x277e <process_action+0x3c0>
    26d6:	9b 01       	movw	r18, r22
    26d8:	ac 01       	movw	r20, r24
    26da:	2c 29       	or	r18, r12
    26dc:	3d 29       	or	r19, r13
    26de:	4e 29       	or	r20, r14
    26e0:	5f 29       	or	r21, r15
    26e2:	2e 83       	std	Y+6, r18	; 0x06
    26e4:	3f 83       	std	Y+7, r19	; 0x07
    26e6:	48 87       	std	Y+8, r20	; 0x08
    26e8:	59 87       	std	Y+9, r21	; 0x09
    26ea:	11 30       	cpi	r17, 0x01	; 1
    26ec:	a1 f0       	breq	.+40     	; 0x2716 <process_action+0x358>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    26ee:	ca 01       	movw	r24, r20
    26f0:	b9 01       	movw	r22, r18
}
    26f2:	29 96       	adiw	r28, 0x09	; 9
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	df 90       	pop	r13
    270c:	cf 90       	pop	r12
    270e:	bf 90       	pop	r11
    2710:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2712:	0c 94 a0 19 	jmp	0x3340	; 0x3340 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    2716:	6e 81       	ldd	r22, Y+6	; 0x06
    2718:	7f 81       	ldd	r23, Y+7	; 0x07
    271a:	88 85       	ldd	r24, Y+8	; 0x08
    271c:	99 85       	ldd	r25, Y+9	; 0x09
}
    271e:	29 96       	adiw	r28, 0x09	; 9
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	df 90       	pop	r13
    2738:	cf 90       	pop	r12
    273a:	bf 90       	pop	r11
    273c:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    273e:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <default_layer_or>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2742:	9b 01       	movw	r18, r22
    2744:	ac 01       	movw	r20, r24
    2746:	2c 29       	or	r18, r12
    2748:	3d 29       	or	r19, r13
    274a:	4e 29       	or	r20, r14
    274c:	5f 29       	or	r21, r15
    274e:	2e 83       	std	Y+6, r18	; 0x06
    2750:	3f 83       	std	Y+7, r19	; 0x07
    2752:	48 87       	std	Y+8, r20	; 0x08
    2754:	59 87       	std	Y+9, r21	; 0x09
    2756:	ca 01       	movw	r24, r20
    2758:	b9 01       	movw	r22, r18
}
    275a:	29 96       	adiw	r28, 0x09	; 9
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	1f 91       	pop	r17
    276c:	0f 91       	pop	r16
    276e:	ff 90       	pop	r15
    2770:	ef 90       	pop	r14
    2772:	df 90       	pop	r13
    2774:	cf 90       	pop	r12
    2776:	bf 90       	pop	r11
    2778:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    277a:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    277e:	0e 94 a0 19 	call	0x3340	; 0x3340 <default_layer_and>
    2782:	c7 01       	movw	r24, r14
    2784:	b6 01       	movw	r22, r12
    2786:	cb cf       	rjmp	.-106    	; 0x271e <process_action+0x360>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2788:	ff 20       	and	r15, r15
    278a:	09 f4       	brne	.+2      	; 0x278e <process_action+0x3d0>
    278c:	53 c0       	rjmp	.+166    	; 0x2834 <process_action+0x476>
    278e:	10 ff       	sbrs	r17, 0
    2790:	41 ce       	rjmp	.-894    	; 0x2414 <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    2792:	20 2f       	mov	r18, r16
    2794:	22 95       	swap	r18
    2796:	26 95       	lsr	r18
    2798:	27 70       	andi	r18, 0x07	; 7
    279a:	22 0f       	add	r18, r18
    279c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    279e:	80 2f       	mov	r24, r16
    27a0:	8f 70       	andi	r24, 0x0F	; 15
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	a0 e0       	ldi	r26, 0x00	; 0
    27a8:	6c 01       	movw	r12, r24
    27aa:	7d 01       	movw	r14, r26
    27ac:	02 2e       	mov	r0, r18
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <process_action+0x3fa>
    27b0:	cc 0c       	add	r12, r12
    27b2:	dd 1c       	adc	r13, r13
    27b4:	ee 1c       	adc	r14, r14
    27b6:	ff 1c       	adc	r15, r15
    27b8:	0a 94       	dec	r0
    27ba:	d2 f7       	brpl	.-12     	; 0x27b0 <process_action+0x3f2>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	70 e0       	ldi	r23, 0x00	; 0
    27c0:	cb 01       	movw	r24, r22
    27c2:	04 ff       	sbrs	r16, 4
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <process_action+0x426>
    27c6:	6f e0       	ldi	r22, 0x0F	; 15
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <process_action+0x41a>
    27d0:	66 0f       	add	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	88 1f       	adc	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	2a 95       	dec	r18
    27da:	d2 f7       	brpl	.-12     	; 0x27d0 <process_action+0x412>
    27dc:	60 95       	com	r22
    27de:	70 95       	com	r23
    27e0:	80 95       	com	r24
    27e2:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    27e4:	16 95       	lsr	r17
    27e6:	16 95       	lsr	r17
    27e8:	13 70       	andi	r17, 0x03	; 3
    27ea:	12 30       	cpi	r17, 0x02	; 2
    27ec:	e1 f1       	breq	.+120    	; 0x2866 <process_action+0x4a8>
    27ee:	13 30       	cpi	r17, 0x03	; 3
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <process_action+0x436>
    27f2:	57 c0       	rjmp	.+174    	; 0x28a2 <process_action+0x4e4>
    27f4:	9b 01       	movw	r18, r22
    27f6:	ac 01       	movw	r20, r24
    27f8:	2c 29       	or	r18, r12
    27fa:	3d 29       	or	r19, r13
    27fc:	4e 29       	or	r20, r14
    27fe:	5f 29       	or	r21, r15
    2800:	2e 83       	std	Y+6, r18	; 0x06
    2802:	3f 83       	std	Y+7, r19	; 0x07
    2804:	48 87       	std	Y+8, r20	; 0x08
    2806:	59 87       	std	Y+9, r21	; 0x09
    2808:	11 30       	cpi	r17, 0x01	; 1
    280a:	b9 f0       	breq	.+46     	; 0x283a <process_action+0x47c>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    280c:	ca 01       	movw	r24, r20
    280e:	b9 01       	movw	r22, r18
}
    2810:	29 96       	adiw	r28, 0x09	; 9
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	1f 91       	pop	r17
    2822:	0f 91       	pop	r16
    2824:	ff 90       	pop	r15
    2826:	ef 90       	pop	r14
    2828:	df 90       	pop	r13
    282a:	cf 90       	pop	r12
    282c:	bf 90       	pop	r11
    282e:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2830:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <layer_and>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2834:	11 ff       	sbrs	r17, 1
    2836:	ee cd       	rjmp	.-1060   	; 0x2414 <process_action+0x56>
    2838:	ac cf       	rjmp	.-168    	; 0x2792 <process_action+0x3d4>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    283a:	6e 81       	ldd	r22, Y+6	; 0x06
    283c:	7f 81       	ldd	r23, Y+7	; 0x07
    283e:	88 85       	ldd	r24, Y+8	; 0x08
    2840:	99 85       	ldd	r25, Y+9	; 0x09
}
    2842:	29 96       	adiw	r28, 0x09	; 9
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	df 90       	pop	r13
    285c:	cf 90       	pop	r12
    285e:	bf 90       	pop	r11
    2860:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2862:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <layer_or>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2866:	9b 01       	movw	r18, r22
    2868:	ac 01       	movw	r20, r24
    286a:	2c 29       	or	r18, r12
    286c:	3d 29       	or	r19, r13
    286e:	4e 29       	or	r20, r14
    2870:	5f 29       	or	r21, r15
    2872:	2e 83       	std	Y+6, r18	; 0x06
    2874:	3f 83       	std	Y+7, r19	; 0x07
    2876:	48 87       	std	Y+8, r20	; 0x08
    2878:	59 87       	std	Y+9, r21	; 0x09
    287a:	ca 01       	movw	r24, r20
    287c:	b9 01       	movw	r22, r18
}
    287e:	29 96       	adiw	r28, 0x09	; 9
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	df 90       	pop	r13
    2898:	cf 90       	pop	r12
    289a:	bf 90       	pop	r11
    289c:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    289e:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    28a2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <layer_and>
    28a6:	c7 01       	movw	r24, r14
    28a8:	b6 01       	movw	r22, r12
    28aa:	cb cf       	rjmp	.-106    	; 0x2842 <process_action+0x484>
            switch (action.layer_tap.code) {
    28ac:	01 3f       	cpi	r16, 0xF1	; 241
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <process_action+0x4f4>
    28b0:	64 c0       	rjmp	.+200    	; 0x297a <process_action+0x5bc>
    28b2:	f0 f4       	brcc	.+60     	; 0x28f0 <process_action+0x532>
    28b4:	00 3e       	cpi	r16, 0xE0	; 224
    28b6:	90 f4       	brcc	.+36     	; 0x28dc <process_action+0x51e>
    28b8:	00 3c       	cpi	r16, 0xC0	; 192
    28ba:	90 f0       	brcs	.+36     	; 0x28e0 <process_action+0x522>
                        layer_on(action.layer_tap.val);
    28bc:	81 2f       	mov	r24, r17
    28be:	8f 71       	andi	r24, 0x1F	; 31
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    28c0:	10 2f       	mov	r17, r16
    28c2:	10 71       	andi	r17, 0x10	; 16
                    if (event.pressed) {
    28c4:	ff 20       	and	r15, r15
    28c6:	81 f1       	breq	.+96     	; 0x2928 <process_action+0x56a>
                        layer_on(action.layer_tap.val);
    28c8:	0e 94 2a 1a 	call	0x3454	; 0x3454 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    28cc:	80 2f       	mov	r24, r16
    28ce:	82 95       	swap	r24
    28d0:	80 7f       	andi	r24, 0xF0	; 240
    28d2:	11 11       	cpse	r17, r1
    28d4:	0d ce       	rjmp	.-998    	; 0x24f0 <process_action+0x132>
    28d6:	80 2f       	mov	r24, r16
    28d8:	8f 70       	andi	r24, 0x0F	; 15
    28da:	0a ce       	rjmp	.-1004   	; 0x24f0 <process_action+0x132>
    28dc:	00 3f       	cpi	r16, 0xF0	; 240
    28de:	71 f1       	breq	.+92     	; 0x293c <process_action+0x57e>
                    if (event.pressed) {
    28e0:	ff 20       	and	r15, r15
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <process_action+0x528>
    28e4:	88 c0       	rjmp	.+272    	; 0x29f6 <process_action+0x638>
                        if (tap_count > 0) {
    28e6:	e1 10       	cpse	r14, r1
    28e8:	b7 cd       	rjmp	.-1170   	; 0x2458 <process_action+0x9a>
                            layer_on(action.layer_tap.val);
    28ea:	81 2f       	mov	r24, r17
    28ec:	8f 71       	andi	r24, 0x1F	; 31
    28ee:	49 c0       	rjmp	.+146    	; 0x2982 <process_action+0x5c4>
    28f0:	02 3f       	cpi	r16, 0xF2	; 242
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <process_action+0x538>
    28f4:	58 c0       	rjmp	.+176    	; 0x29a6 <process_action+0x5e8>
    28f6:	03 3f       	cpi	r16, 0xF3	; 243
    28f8:	99 f7       	brne	.-26     	; 0x28e0 <process_action+0x522>
                    event.pressed ? layer_move(action.layer_tap.val) :
    28fa:	ff 20       	and	r15, r15
    28fc:	09 f4       	brne	.+2      	; 0x2900 <process_action+0x542>
    28fe:	69 c0       	rjmp	.+210    	; 0x29d2 <process_action+0x614>
    2900:	81 2f       	mov	r24, r17
    2902:	8f 71       	andi	r24, 0x1F	; 31
}
    2904:	29 96       	adiw	r28, 0x09	; 9
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	df 90       	pop	r13
    291e:	cf 90       	pop	r12
    2920:	bf 90       	pop	r11
    2922:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    2924:	0c 94 05 1a 	jmp	0x340a	; 0x340a <layer_move>
                        layer_off(action.layer_tap.val);
    2928:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    292c:	80 2f       	mov	r24, r16
    292e:	82 95       	swap	r24
    2930:	80 7f       	andi	r24, 0xF0	; 240
    2932:	11 11       	cpse	r17, r1
    2934:	0a ce       	rjmp	.-1004   	; 0x254a <process_action+0x18c>
    2936:	80 2f       	mov	r24, r16
    2938:	8f 70       	andi	r24, 0x0F	; 15
    293a:	07 ce       	rjmp	.-1010   	; 0x254a <process_action+0x18c>
                    if (event.pressed) {
    293c:	ff 20       	and	r15, r15
    293e:	c1 f0       	breq	.+48     	; 0x2970 <process_action+0x5b2>
                        if (tap_count < TAPPING_TOGGLE) {
    2940:	34 e0       	ldi	r19, 0x04	; 4
    2942:	3e 15       	cp	r19, r14
    2944:	08 f4       	brcc	.+2      	; 0x2948 <process_action+0x58a>
    2946:	66 cd       	rjmp	.-1332   	; 0x2414 <process_action+0x56>
                            layer_invert(action.layer_tap.val);
    2948:	81 2f       	mov	r24, r17
    294a:	8f 71       	andi	r24, 0x1F	; 31
}
    294c:	29 96       	adiw	r28, 0x09	; 9
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
    2968:	bf 90       	pop	r11
    296a:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    296c:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2970:	45 e0       	ldi	r20, 0x05	; 5
    2972:	4e 15       	cp	r20, r14
    2974:	08 f4       	brcc	.+2      	; 0x2978 <process_action+0x5ba>
    2976:	4e cd       	rjmp	.-1380   	; 0x2414 <process_action+0x56>
    2978:	e7 cf       	rjmp	.-50     	; 0x2948 <process_action+0x58a>
                        layer_on(action.layer_tap.val);
    297a:	81 2f       	mov	r24, r17
    297c:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_on(action.layer_tap.val) :
    297e:	ff 20       	and	r15, r15
    2980:	b1 f0       	breq	.+44     	; 0x29ae <process_action+0x5f0>
}
    2982:	29 96       	adiw	r28, 0x09	; 9
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	df 90       	pop	r13
    299c:	cf 90       	pop	r12
    299e:	bf 90       	pop	r11
    29a0:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    29a2:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <layer_on>
                        layer_on(action.layer_tap.val);
    29a6:	81 2f       	mov	r24, r17
    29a8:	8f 71       	andi	r24, 0x1F	; 31
                    event.pressed ? layer_off(action.layer_tap.val) :
    29aa:	ff 20       	and	r15, r15
    29ac:	51 f3       	breq	.-44     	; 0x2982 <process_action+0x5c4>
}
    29ae:	29 96       	adiw	r28, 0x09	; 9
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	ef 90       	pop	r14
    29c6:	df 90       	pop	r13
    29c8:	cf 90       	pop	r12
    29ca:	bf 90       	pop	r11
    29cc:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    29ce:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <layer_off>
}
    29d2:	29 96       	adiw	r28, 0x09	; 9
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ff 90       	pop	r15
    29e8:	ef 90       	pop	r14
    29ea:	df 90       	pop	r13
    29ec:	cf 90       	pop	r12
    29ee:	bf 90       	pop	r11
    29f0:	af 90       	pop	r10
                                    layer_clear();
    29f2:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <layer_clear>
                        if (tap_count > 0) {
    29f6:	e1 10       	cpse	r14, r1
    29f8:	d2 cd       	rjmp	.-1116   	; 0x259e <process_action+0x1e0>
                            layer_off(action.layer_tap.val);
    29fa:	81 2f       	mov	r24, r17
    29fc:	8f 71       	andi	r24, 0x1F	; 31
    29fe:	d7 cf       	rjmp	.-82     	; 0x29ae <process_action+0x5f0>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2a00:	41 2f       	mov	r20, r17
    2a02:	4f 70       	andi	r20, 0x0F	; 15
    2a04:	60 2f       	mov	r22, r16
    2a06:	c5 01       	movw	r24, r10
    2a08:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <action_get_macro>
}
    2a0c:	29 96       	adiw	r28, 0x09	; 9
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2a2c:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <action_macro_play>
            switch (action.command.id) {
    2a30:	01 11       	cpse	r16, r1
    2a32:	f0 cc       	rjmp	.-1568   	; 0x2414 <process_action+0x56>
                    if (event.pressed) {
    2a34:	ff 20       	and	r15, r15
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <process_action+0x67c>
    2a38:	ed cc       	rjmp	.-1574   	; 0x2414 <process_action+0x56>
                        clear_keyboard();
    2a3a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <clear_keyboard>
	__builtin_avr_delay_cycles(__ticks_dc);
    2a3e:	5f ef       	ldi	r21, 0xFF	; 255
    2a40:	80 e7       	ldi	r24, 0x70	; 112
    2a42:	92 e0       	ldi	r25, 0x02	; 2
    2a44:	51 50       	subi	r21, 0x01	; 1
    2a46:	80 40       	sbci	r24, 0x00	; 0
    2a48:	90 40       	sbci	r25, 0x00	; 0
    2a4a:	e1 f7       	brne	.-8      	; 0x2a44 <process_action+0x686>
    2a4c:	00 c0       	rjmp	.+0      	; 0x2a4e <process_action+0x690>
    2a4e:	00 00       	nop
}
    2a50:	29 96       	adiw	r28, 0x09	; 9
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	ff 90       	pop	r15
    2a66:	ef 90       	pop	r14
    2a68:	df 90       	pop	r13
    2a6a:	cf 90       	pop	r12
    2a6c:	bf 90       	pop	r11
    2a6e:	af 90       	pop	r10
                        bootloader_jump();
    2a70:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <bootloader_jump>
            action_function(record, action.func.id, action.func.opt);
    2a74:	41 2f       	mov	r20, r17
    2a76:	4f 70       	andi	r20, 0x0F	; 15
    2a78:	60 2f       	mov	r22, r16
    2a7a:	c5 01       	movw	r24, r10
}
    2a7c:	29 96       	adiw	r28, 0x09	; 9
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	bf 90       	pop	r11
    2a9a:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2a9c:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <action_function>
    keyevent_t event = record->event;
    2aa0:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2aa2:	e5 80       	ldd	r14, Z+5	; 0x05
    2aa4:	e2 94       	swap	r14
    2aa6:	2f e0       	ldi	r18, 0x0F	; 15
    2aa8:	e2 22       	and	r14, r18
    action_t action = layer_switch_get_action(event);
    2aaa:	49 83       	std	Y+1, r20	; 0x01
    2aac:	5a 83       	std	Y+2, r21	; 0x02
    2aae:	fb 82       	std	Y+3, r15	; 0x03
    2ab0:	78 2f       	mov	r23, r24
    2ab2:	9d 83       	std	Y+5, r25	; 0x05
    2ab4:	8c 83       	std	Y+4, r24	; 0x04
    2ab6:	6f 2d       	mov	r22, r15
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	0e 94 3a 1b 	call	0x3674	; 0x3674 <layer_switch_get_action>
    2abe:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    2ac0:	0e 94 39 1b 	call	0x3672	; 0x3672 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2ac4:	0e 94 65 19 	call	0x32ca	; 0x32ca <default_layer_debug>
    switch (action.kind.id) {
    2ac8:	e1 2f       	mov	r30, r17
    2aca:	e2 95       	swap	r30
    2acc:	ef 70       	andi	r30, 0x0F	; 15
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	ec 5a       	subi	r30, 0xAC	; 172
    2ad2:	f5 4d       	sbci	r31, 0xD5	; 213
    2ad4:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <__tablejump2__>

00002ad8 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <is_tap_key+0x6>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <is_tap_key+0x8>
    2ae0:	0f 92       	push	r0
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	6b 83       	std	Y+3, r22	; 0x03
    2ae8:	7c 83       	std	Y+4, r23	; 0x04
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	89 2b       	or	r24, r25
    2af2:	21 f0       	breq	.+8      	; 0x2afc <is_tap_key+0x24>
    2af4:	84 2f       	mov	r24, r20
    2af6:	85 23       	and	r24, r21
    2af8:	8f 3f       	cpi	r24, 0xFF	; 255
    2afa:	d1 f4       	brne	.+52     	; 0x2b30 <is_tap_key+0x58>
    if (IS_NOEVENT(event)) { return false; }

    action_t action = layer_switch_get_action(event);

    switch (action.kind.id) {
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	0c c0       	rjmp	.+24     	; 0x2b18 <is_tap_key+0x40>
    2b00:	80 e2       	ldi	r24, 0x20	; 32
    2b02:	82 0f       	add	r24, r18
    2b04:	88 30       	cpi	r24, 0x08	; 8
    2b06:	58 f1       	brcs	.+86     	; 0x2b5e <is_tap_key+0x86>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2b08:	28 3e       	cpi	r18, 0xE8	; 232
    2b0a:	70 f4       	brcc	.+28     	; 0x2b28 <is_tap_key+0x50>
    2b0c:	20 3e       	cpi	r18, 0xE0	; 224
    2b0e:	38 f5       	brcc	.+78     	; 0x2b5e <is_tap_key+0x86>
    2b10:	24 50       	subi	r18, 0x04	; 4
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	21 3a       	cpi	r18, 0xA1	; 161
    2b16:	90 f7       	brcc	.-28     	; 0x2afc <is_tap_key+0x24>
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	20 3f       	cpi	r18, 0xF0	; 240
    2b2c:	39 f7       	brne	.-50     	; 0x2afc <is_tap_key+0x24>
    2b2e:	f4 cf       	rjmp	.-24     	; 0x2b18 <is_tap_key+0x40>
    action_t action = layer_switch_get_action(event);
    2b30:	6b 81       	ldd	r22, Y+3	; 0x03
    2b32:	7c 81       	ldd	r23, Y+4	; 0x04
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	0e 94 3a 1b 	call	0x3674	; 0x3674 <layer_switch_get_action>
    2b3a:	28 2f       	mov	r18, r24
    switch (action.kind.id) {
    2b3c:	89 2f       	mov	r24, r25
    2b3e:	82 95       	swap	r24
    2b40:	8f 70       	andi	r24, 0x0F	; 15
    2b42:	90 3c       	cpi	r25, 0xC0	; 192
    2b44:	70 f4       	brcc	.+28     	; 0x2b62 <is_tap_key+0x8a>
    2b46:	8a 30       	cpi	r24, 0x0A	; 10
    2b48:	f8 f6       	brcc	.-66     	; 0x2b08 <is_tap_key+0x30>
    2b4a:	82 5f       	subi	r24, 0xF2	; 242
    2b4c:	8f 70       	andi	r24, 0x0F	; 15
    2b4e:	82 30       	cpi	r24, 0x02	; 2
    2b50:	a8 f6       	brcc	.-86     	; 0x2afc <is_tap_key+0x24>
            switch (action.key.code) {
    2b52:	25 3a       	cpi	r18, 0xA5	; 165
    2b54:	a8 f6       	brcc	.-86     	; 0x2b00 <is_tap_key+0x28>
    2b56:	8e ef       	ldi	r24, 0xFE	; 254
    2b58:	82 0f       	add	r24, r18
    2b5a:	82 30       	cpi	r24, 0x02	; 2
    2b5c:	c8 f2       	brcs	.-78     	; 0x2b10 <is_tap_key+0x38>
                    return true;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	db cf       	rjmp	.-74     	; 0x2b18 <is_tap_key+0x40>
    switch (action.kind.id) {
    2b62:	8c 30       	cpi	r24, 0x0C	; 12
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <is_tap_key+0x92>
    2b66:	8f 30       	cpi	r24, 0x0F	; 15
    2b68:	49 f6       	brne	.-110    	; 0x2afc <is_tap_key+0x24>
            if (action.func.opt & FUNC_TAP) { return true; }
    2b6a:	93 fb       	bst	r25, 3
    2b6c:	88 27       	eor	r24, r24
    2b6e:	80 f9       	bld	r24, 0
    2b70:	d3 cf       	rjmp	.-90     	; 0x2b18 <is_tap_key+0x40>

00002b72 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <debug_event+0x6>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <debug_event+0x8>
    2b7a:	0f 92       	push	r0
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	08 95       	ret

00002b90 <debug_record>:

void debug_record(keyrecord_t record)
{
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <debug_record+0x6>
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <debug_record+0x8>
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <debug_record+0xa>
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2b9e:	26 96       	adiw	r28, 0x06	; 6
    2ba0:	0f b6       	in	r0, 0x3f	; 63
    2ba2:	f8 94       	cli
    2ba4:	de bf       	out	0x3e, r29	; 62
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2bb4:	c0 91 85 02 	lds	r28, 0x0285	; 0x800285 <waiting_buffer_tail>
    2bb8:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <waiting_buffer_head>
    2bbc:	8c 13       	cpse	r24, r28
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <debug_waiting_buffer+0x16>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2bc6:	d0 e0       	ldi	r29, 0x00	; 0
    2bc8:	ce 01       	movw	r24, r28
    2bca:	66 e0       	ldi	r22, 0x06	; 6
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e9 57       	subi	r30, 0x79	; 121
    2bd6:	fd 4f       	sbci	r31, 0xFD	; 253
    2bd8:	40 81       	ld	r20, Z
    2bda:	51 81       	ldd	r21, Z+1	; 0x01
    2bdc:	62 81       	ldd	r22, Z+2	; 0x02
    2bde:	73 81       	ldd	r23, Z+3	; 0x03
    2be0:	84 81       	ldd	r24, Z+4	; 0x04
    2be2:	95 81       	ldd	r25, Z+5	; 0x05
    2be4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2be8:	21 96       	adiw	r28, 0x01	; 1
    2bea:	c7 70       	andi	r28, 0x07	; 7
    2bec:	e5 cf       	rjmp	.-54     	; 0x2bb8 <debug_waiting_buffer+0x8>

00002bee <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2bee:	40 91 b7 02 	lds	r20, 0x02B7	; 0x8002b7 <tapping_key>
    2bf2:	50 91 b8 02 	lds	r21, 0x02B8	; 0x8002b8 <tapping_key+0x1>
    2bf6:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <tapping_key+0x2>
    2bfa:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <tapping_key+0x3>
    2bfe:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <tapping_key+0x4>
    2c02:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2c06:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <debug_record>

00002c0a <waiting_buffer_scan_tap>:
{
    2c0a:	ff 92       	push	r15
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2c14:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2c18:	80 7f       	andi	r24, 0xF0	; 240
    2c1a:	b9 f4       	brne	.+46     	; 0x2c4a <waiting_buffer_scan_tap+0x40>
    if (!tapping_key.event.pressed) return;
    2c1c:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <tapping_key+0x2>
    2c20:	88 23       	and	r24, r24
    2c22:	99 f0       	breq	.+38     	; 0x2c4a <waiting_buffer_scan_tap+0x40>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c24:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <waiting_buffer_tail>
    2c28:	00 91 86 02 	lds	r16, 0x0286	; 0x800286 <waiting_buffer_head>
    2c2c:	10 91 b7 02 	lds	r17, 0x02B7	; 0x8002b7 <tapping_key>
    2c30:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <tapping_key+0x1>
    2c34:	a0 91 ba 02 	lds	r26, 0x02BA	; 0x8002ba <tapping_key+0x3>
    2c38:	b0 91 bb 02 	lds	r27, 0x02BB	; 0x8002bb <tapping_key+0x4>
    2c3c:	f4 2e       	mov	r15, r20
    2c3e:	f1 22       	and	r15, r17
    2c40:	ed 01       	movw	r28, r26
    2c42:	c0 95       	com	r28
    2c44:	d0 95       	com	r29
    2c46:	02 13       	cpse	r16, r18
    2c48:	06 c0       	rjmp	.+12     	; 0x2c56 <waiting_buffer_scan_tap+0x4c>
}
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	08 95       	ret
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	10 97       	sbiw	r26, 0x00	; 0
    2c5a:	19 f0       	breq	.+6      	; 0x2c62 <waiting_buffer_scan_tap+0x58>
    2c5c:	8f ef       	ldi	r24, 0xFF	; 255
    2c5e:	f8 12       	cpse	r15, r24
    2c60:	07 c0       	rjmp	.+14     	; 0x2c70 <waiting_buffer_scan_tap+0x66>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c62:	2f 5f       	subi	r18, 0xFF	; 255
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	27 70       	andi	r18, 0x07	; 7
    2c68:	ee cf       	rjmp	.-36     	; 0x2c46 <waiting_buffer_scan_tap+0x3c>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2c6a:	8c 0f       	add	r24, r28
    2c6c:	9d 1f       	adc	r25, r29
    2c6e:	18 c0       	rjmp	.+48     	; 0x2ca0 <waiting_buffer_scan_tap+0x96>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2c70:	c9 01       	movw	r24, r18
    2c72:	66 e0       	ldi	r22, 0x06	; 6
    2c74:	70 e0       	ldi	r23, 0x00	; 0
    2c76:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	e9 57       	subi	r30, 0x79	; 121
    2c7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c80:	81 81       	ldd	r24, Z+1	; 0x01
    2c82:	48 13       	cpse	r20, r24
    2c84:	ee cf       	rjmp	.-36     	; 0x2c62 <waiting_buffer_scan_tap+0x58>
    2c86:	80 81       	ld	r24, Z
    2c88:	81 13       	cpse	r24, r17
    2c8a:	eb cf       	rjmp	.-42     	; 0x2c62 <waiting_buffer_scan_tap+0x58>
    2c8c:	82 81       	ldd	r24, Z+2	; 0x02
    2c8e:	81 11       	cpse	r24, r1
    2c90:	e8 cf       	rjmp	.-48     	; 0x2c62 <waiting_buffer_scan_tap+0x58>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2c92:	83 81       	ldd	r24, Z+3	; 0x03
    2c94:	94 81       	ldd	r25, Z+4	; 0x04
    2c96:	8a 17       	cp	r24, r26
    2c98:	9b 07       	cpc	r25, r27
    2c9a:	38 f3       	brcs	.-50     	; 0x2c6a <waiting_buffer_scan_tap+0x60>
    2c9c:	8a 1b       	sub	r24, r26
    2c9e:	9b 0b       	sbc	r25, r27
                !waiting_buffer[i].event.pressed &&
    2ca0:	88 3c       	cpi	r24, 0xC8	; 200
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	f0 f6       	brcc	.-68     	; 0x2c62 <waiting_buffer_scan_tap+0x58>
            tapping_key.tap.count = 1;
    2ca6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2caa:	8f 70       	andi	r24, 0x0F	; 15
    2cac:	80 61       	ori	r24, 0x10	; 16
    2cae:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	66 e0       	ldi	r22, 0x06	; 6
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e4 57       	subi	r30, 0x74	; 116
    2cc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc2:	90 81       	ld	r25, Z
    2cc4:	9f 70       	andi	r25, 0x0F	; 15
    2cc6:	90 61       	ori	r25, 0x10	; 16
    2cc8:	90 83       	st	Z, r25
            process_action(&tapping_key);
    2cca:	87 eb       	ldi	r24, 0xB7	; 183
    2ccc:	92 e0       	ldi	r25, 0x02	; 2
    2cce:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
}
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
            debug_waiting_buffer();
    2cdc:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <debug_waiting_buffer>

00002ce0 <process_tapping>:
{
    2ce0:	9f 92       	push	r9
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	2b 97       	sbiw	r28, 0x0b	; 11
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
    2d06:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2d08:	85 e0       	ldi	r24, 0x05	; 5
    2d0a:	f8 01       	movw	r30, r16
    2d0c:	de 01       	movw	r26, r28
    2d0e:	17 96       	adiw	r26, 0x07	; 7
    2d10:	01 90       	ld	r0, Z+
    2d12:	0d 92       	st	X+, r0
    2d14:	8a 95       	dec	r24
    2d16:	e1 f7       	brne	.-8      	; 0x2d10 <process_tapping+0x30>
    2d18:	d8 01       	movw	r26, r16
    2d1a:	4c 91       	ld	r20, X
    2d1c:	11 96       	adiw	r26, 0x01	; 1
    2d1e:	2c 91       	ld	r18, X
    2d20:	11 97       	sbiw	r26, 0x01	; 1
    2d22:	12 96       	adiw	r26, 0x02	; 2
    2d24:	fc 90       	ld	r15, X
    if (IS_TAPPING_PRESSED()) {
    2d26:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <tapping_key+0x3>
    2d2a:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <tapping_key+0x4>
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	49 f0       	breq	.+18     	; 0x2d44 <process_tapping+0x64>
    2d32:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <tapping_key>
    2d36:	50 91 b8 02 	lds	r21, 0x02B8	; 0x8002b8 <tapping_key+0x1>
    2d3a:	63 2f       	mov	r22, r19
    2d3c:	65 23       	and	r22, r21
    2d3e:	6f 3f       	cpi	r22, 0xFF	; 255
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <process_tapping+0x64>
    2d42:	5f c1       	rjmp	.+702    	; 0x3002 <process_tapping+0x322>
        if (event.pressed && is_tap_key(event)) {
    2d44:	ff 20       	and	r15, r15
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <process_tapping+0x6a>
    2d48:	ca c0       	rjmp	.+404    	; 0x2ede <process_tapping+0x1fe>
    2d4a:	4f 83       	std	Y+7, r20	; 0x07
    2d4c:	28 87       	std	Y+8, r18	; 0x08
    2d4e:	f9 86       	std	Y+9, r15	; 0x09
    2d50:	52 2f       	mov	r21, r18
    2d52:	6f 2d       	mov	r22, r15
    2d54:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d56:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d58:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <is_tap_key>
    2d5c:	88 23       	and	r24, r24
    2d5e:	09 f4       	brne	.+2      	; 0x2d62 <process_tapping+0x82>
    2d60:	be c0       	rjmp	.+380    	; 0x2ede <process_tapping+0x1fe>
    2d62:	08 c1       	rjmp	.+528    	; 0x2f74 <process_tapping+0x294>
        if (WITHIN_TAPPING_TERM(event)) {
    2d64:	a8 16       	cp	r10, r24
    2d66:	b9 06       	cpc	r11, r25
    2d68:	40 f1       	brcs	.+80     	; 0x2dba <process_tapping+0xda>
    2d6a:	f5 01       	movw	r30, r10
    2d6c:	e8 1b       	sub	r30, r24
    2d6e:	f9 0b       	sbc	r31, r25
    2d70:	cf 01       	movw	r24, r30
    2d72:	ee 24       	eor	r14, r14
    2d74:	e3 94       	inc	r14
    2d76:	88 3c       	cpi	r24, 0xC8	; 200
    2d78:	91 05       	cpc	r25, r1
    2d7a:	08 f0       	brcs	.+2      	; 0x2d7e <process_tapping+0x9e>
    2d7c:	e1 2c       	mov	r14, r1
            if (tapping_key.tap.count == 0) {
    2d7e:	87 eb       	ldi	r24, 0xB7	; 183
    2d80:	c8 2e       	mov	r12, r24
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	d8 2e       	mov	r13, r24
    2d86:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2d8a:	98 2f       	mov	r25, r24
    2d8c:	90 7f       	andi	r25, 0xF0	; 240
        if (WITHIN_TAPPING_TERM(event)) {
    2d8e:	e1 10       	cpse	r14, r1
    2d90:	19 c0       	rjmp	.+50     	; 0x2dc4 <process_tapping+0xe4>
            if (tapping_key.tap.count == 0) {
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <process_tapping+0xb6>
    2d94:	fe c0       	rjmp	.+508    	; 0x2f92 <process_tapping+0x2b2>
                debug_event(event); debug("\n");
    2d96:	52 2f       	mov	r21, r18
    2d98:	6f 2d       	mov	r22, r15
    2d9a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d9e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <debug_event>
                process_action(&tapping_key);
    2da2:	87 eb       	ldi	r24, 0xB7	; 183
    2da4:	92 e0       	ldi	r25, 0x02	; 2
    2da6:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
                tapping_key = (keyrecord_t){};
    2daa:	86 e0       	ldi	r24, 0x06	; 6
    2dac:	f6 01       	movw	r30, r12
    2dae:	11 92       	st	Z+, r1
    2db0:	8a 95       	dec	r24
    2db2:	e9 f7       	brne	.-6      	; 0x2dae <process_tapping+0xce>
                debug_tapping_key();
    2db4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <debug_tapping_key>
                return false;
    2db8:	1d c0       	rjmp	.+58     	; 0x2df4 <process_tapping+0x114>
        if (WITHIN_TAPPING_TERM(event)) {
    2dba:	80 95       	com	r24
    2dbc:	90 95       	com	r25
    2dbe:	8a 0d       	add	r24, r10
    2dc0:	9b 1d       	adc	r25, r11
    2dc2:	d7 cf       	rjmp	.-82     	; 0x2d72 <process_tapping+0x92>
            if (tapping_key.tap.count == 0) {
    2dc4:	91 11       	cpse	r25, r1
    2dc6:	af c0       	rjmp	.+350    	; 0x2f26 <process_tapping+0x246>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2dc8:	ef 2c       	mov	r14, r15
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2dca:	52 13       	cpse	r21, r18
    2dcc:	26 c0       	rjmp	.+76     	; 0x2e1a <process_tapping+0x13a>
    2dce:	34 13       	cpse	r19, r20
    2dd0:	24 c0       	rjmp	.+72     	; 0x2e1a <process_tapping+0x13a>
    2dd2:	f1 10       	cpse	r15, r1
    2dd4:	22 c0       	rjmp	.+68     	; 0x2e1a <process_tapping+0x13a>
                    tapping_key.tap.count = 1;
    2dd6:	8f 70       	andi	r24, 0x0F	; 15
    2dd8:	80 61       	ori	r24, 0x10	; 16
    2dda:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <tapping_key+0x5>
                    debug_tapping_key();
    2dde:	0e 94 f7 15 	call	0x2bee	; 0x2bee <debug_tapping_key>
                    process_action(&tapping_key);
    2de2:	87 eb       	ldi	r24, 0xB7	; 183
    2de4:	92 e0       	ldi	r25, 0x02	; 2
    2de6:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
                    keyp->tap = tapping_key.tap;
    2dea:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2dee:	d8 01       	movw	r26, r16
    2df0:	15 96       	adiw	r26, 0x05	; 5
    2df2:	8c 93       	st	X, r24
}
    2df4:	8e 2d       	mov	r24, r14
    2df6:	2b 96       	adiw	r28, 0x0b	; 11
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	ef 90       	pop	r14
    2e0e:	df 90       	pop	r13
    2e10:	cf 90       	pop	r12
    2e12:	bf 90       	pop	r11
    2e14:	af 90       	pop	r10
    2e16:	9f 90       	pop	r9
    2e18:	08 95       	ret
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2e1a:	ab 28       	or	r10, r11
    2e1c:	29 f0       	breq	.+10     	; 0x2e28 <process_tapping+0x148>
    2e1e:	84 2f       	mov	r24, r20
    2e20:	82 23       	and	r24, r18
    2e22:	8f 3f       	cpi	r24, 0xFF	; 255
    2e24:	09 f0       	breq	.+2      	; 0x2e28 <process_tapping+0x148>
    2e26:	7c c0       	rjmp	.+248    	; 0x2f20 <process_tapping+0x240>
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2e28:	80 e0       	ldi	r24, 0x00	; 0
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2e2a:	b8 2f       	mov	r27, r24
    2e2c:	b1 70       	andi	r27, 0x01	; 1
    2e2e:	db 2e       	mov	r13, r27
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e30:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <waiting_buffer_tail>
    2e34:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <waiting_buffer_head>
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2e38:	80 fd       	sbrc	r24, 0
    2e3a:	20 c0       	rjmp	.+64     	; 0x2e7c <process_tapping+0x19c>
                    if (event.pressed) {
    2e3c:	ff 20       	and	r15, r15
    2e3e:	d1 f2       	breq	.-76     	; 0x2df4 <process_tapping+0x114>
                        tapping_key.tap.interrupted = true;
    2e40:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2e44:	81 60       	ori	r24, 0x01	; 1
    2e46:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <tapping_key+0x5>
            return false;
    2e4a:	e1 2c       	mov	r14, r1
    2e4c:	d3 cf       	rjmp	.-90     	; 0x2df4 <process_tapping+0x114>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	cf 01       	movw	r24, r30
    2e52:	66 e0       	ldi	r22, 0x06	; 6
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	a9 57       	subi	r26, 0x79	; 121
    2e5e:	bd 4f       	sbci	r27, 0xFD	; 253
    2e60:	11 96       	adiw	r26, 0x01	; 1
    2e62:	8c 91       	ld	r24, X
    2e64:	11 97       	sbiw	r26, 0x01	; 1
    2e66:	82 13       	cpse	r24, r18
    2e68:	07 c0       	rjmp	.+14     	; 0x2e78 <process_tapping+0x198>
    2e6a:	8c 91       	ld	r24, X
    2e6c:	84 13       	cpse	r24, r20
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <process_tapping+0x198>
    2e70:	12 96       	adiw	r26, 0x02	; 2
    2e72:	8c 91       	ld	r24, X
    2e74:	8f 11       	cpse	r24, r15
    2e76:	e2 cf       	rjmp	.-60     	; 0x2e3c <process_tapping+0x15c>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e78:	31 96       	adiw	r30, 0x01	; 1
    2e7a:	e7 70       	andi	r30, 0x07	; 7
    2e7c:	e3 13       	cpse	r30, r19
    2e7e:	e7 cf       	rjmp	.-50     	; 0x2e4e <process_tapping+0x16e>
                    action_t action = layer_switch_get_action(event);
    2e80:	52 2f       	mov	r21, r18
    2e82:	6f 2d       	mov	r22, r15
    2e84:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e88:	0e 94 3a 1b 	call	0x3674	; 0x3674 <layer_switch_get_action>
                    switch (action.kind.id) {
    2e8c:	29 2f       	mov	r18, r25
    2e8e:	22 95       	swap	r18
    2e90:	2f 70       	andi	r18, 0x0F	; 15
    2e92:	90 32       	cpi	r25, 0x20	; 32
    2e94:	60 f0       	brcs	.+24     	; 0x2eae <process_tapping+0x1ce>
    2e96:	22 5f       	subi	r18, 0xF2	; 242
    2e98:	2f 70       	andi	r18, 0x0F	; 15
    2e9a:	22 30       	cpi	r18, 0x02	; 2
    2e9c:	78 f4       	brcc	.+30     	; 0x2ebc <process_tapping+0x1dc>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2e9e:	9f 70       	andi	r25, 0x0F	; 15
    2ea0:	51 f0       	breq	.+20     	; 0x2eb6 <process_tapping+0x1d6>
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	95 81       	ldd	r25, Z+5	; 0x05
    2ea6:	90 7f       	andi	r25, 0xF0	; 240
    2ea8:	31 f4       	brne	.+12     	; 0x2eb6 <process_tapping+0x1d6>
                            if (action.key.mods && !action.key.code) return false;
    2eaa:	d1 2c       	mov	r13, r1
    2eac:	0a c0       	rjmp	.+20     	; 0x2ec2 <process_tapping+0x1e2>
    2eae:	9f 70       	andi	r25, 0x0F	; 15
    2eb0:	11 f0       	breq	.+4      	; 0x2eb6 <process_tapping+0x1d6>
    2eb2:	88 23       	and	r24, r24
    2eb4:	d1 f3       	breq	.-12     	; 0x2eaa <process_tapping+0x1ca>
                            if (IS_MOD(action.key.code)) return false;
    2eb6:	80 5e       	subi	r24, 0xE0	; 224
    2eb8:	88 30       	cpi	r24, 0x08	; 8
    2eba:	b8 f3       	brcs	.-18     	; 0x2eaa <process_tapping+0x1ca>
                    process_action(keyp);
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
                    return true;
    2ec2:	ed 2c       	mov	r14, r13
    2ec4:	97 cf       	rjmp	.-210    	; 0x2df4 <process_tapping+0x114>
        if (WITHIN_TAPPING_TERM(event)) {
    2ec6:	80 95       	com	r24
    2ec8:	90 95       	com	r25
    2eca:	a8 0e       	add	r10, r24
    2ecc:	b9 1e       	adc	r11, r25
    2ece:	68 ec       	ldi	r22, 0xC8	; 200
    2ed0:	a6 16       	cp	r10, r22
    2ed2:	b1 04       	cpc	r11, r1
    2ed4:	08 f0       	brcs	.+2      	; 0x2ed8 <process_tapping+0x1f8>
    2ed6:	a7 c0       	rjmp	.+334    	; 0x3026 <process_tapping+0x346>
            if (event.pressed) {
    2ed8:	ef 2c       	mov	r14, r15
    2eda:	f1 10       	cpse	r15, r1
    2edc:	6d c0       	rjmp	.+218    	; 0x2fb8 <process_tapping+0x2d8>
                    process_action(keyp);
    2ede:	c8 01       	movw	r24, r16
    2ee0:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
    2ee4:	53 c0       	rjmp	.+166    	; 0x2f8c <process_tapping+0x2ac>
                        tapping_key = *keyp;
    2ee6:	86 e0       	ldi	r24, 0x06	; 6
    2ee8:	f8 01       	movw	r30, r16
    2eea:	a7 eb       	ldi	r26, 0xB7	; 183
    2eec:	b2 e0       	ldi	r27, 0x02	; 2
    2eee:	01 90       	ld	r0, Z+
    2ef0:	0d 92       	st	X+, r0
    2ef2:	8a 95       	dec	r24
    2ef4:	e1 f7       	brne	.-8      	; 0x2eee <process_tapping+0x20e>
                        return true;
    2ef6:	7e cf       	rjmp	.-260    	; 0x2df4 <process_tapping+0x114>
                } else if (is_tap_key(event)) {
    2ef8:	4f 83       	std	Y+7, r20	; 0x07
    2efa:	28 87       	std	Y+8, r18	; 0x08
    2efc:	f9 86       	std	Y+9, r15	; 0x09
    2efe:	52 2f       	mov	r21, r18
    2f00:	6f 2d       	mov	r22, r15
    2f02:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f04:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f06:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <is_tap_key>
    2f0a:	81 11       	cpse	r24, r1
    2f0c:	33 c0       	rjmp	.+102    	; 0x2f74 <process_tapping+0x294>
                    tapping_key.tap.interrupted = true;
    2f0e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2f12:	81 60       	ori	r24, 0x01	; 1
    2f14:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <tapping_key+0x5>
                    process_action(keyp);
    2f18:	c8 01       	movw	r24, r16
    2f1a:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
                    return true;
    2f1e:	6a cf       	rjmp	.-300    	; 0x2df4 <process_tapping+0x114>
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	8f 25       	eor	r24, r15
    2f24:	82 cf       	rjmp	.-252    	; 0x2e2a <process_tapping+0x14a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f26:	52 13       	cpse	r21, r18
    2f28:	06 c0       	rjmp	.+12     	; 0x2f36 <process_tapping+0x256>
    2f2a:	34 13       	cpse	r19, r20
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <process_tapping+0x256>
                    keyp->tap = tapping_key.tap;
    2f2e:	d8 01       	movw	r26, r16
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f30:	ff 20       	and	r15, r15
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <process_tapping+0x256>
    2f34:	58 c0       	rjmp	.+176    	; 0x2fe6 <process_tapping+0x306>
                else if (is_tap_key(event) && event.pressed) {
    2f36:	4f 83       	std	Y+7, r20	; 0x07
    2f38:	28 87       	std	Y+8, r18	; 0x08
    2f3a:	f9 86       	std	Y+9, r15	; 0x09
    2f3c:	52 2f       	mov	r21, r18
    2f3e:	6f 2d       	mov	r22, r15
    2f40:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f44:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <is_tap_key>
    2f48:	88 23       	and	r24, r24
    2f4a:	49 f2       	breq	.-110    	; 0x2ede <process_tapping+0x1fe>
    2f4c:	ff 20       	and	r15, r15
    2f4e:	39 f2       	breq	.-114    	; 0x2ede <process_tapping+0x1fe>
                    if (tapping_key.tap.count > 1) {
    2f50:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2f54:	80 32       	cpi	r24, 0x20	; 32
    2f56:	70 f0       	brcs	.+28     	; 0x2f74 <process_tapping+0x294>
                        process_action(&(keyrecord_t){
    2f58:	20 91 b7 02 	lds	r18, 0x02B7	; 0x8002b7 <tapping_key>
    2f5c:	30 91 b8 02 	lds	r19, 0x02B8	; 0x8002b8 <tapping_key+0x1>
    2f60:	3a 83       	std	Y+2, r19	; 0x02
    2f62:	29 83       	std	Y+1, r18	; 0x01
    2f64:	1b 82       	std	Y+3, r1	; 0x03
    2f66:	bd 82       	std	Y+5, r11	; 0x05
    2f68:	ac 82       	std	Y+4, r10	; 0x04
    2f6a:	8e 83       	std	Y+6, r24	; 0x06
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	01 96       	adiw	r24, 0x01	; 1
    2f70:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
                    tapping_key = *keyp;
    2f74:	86 e0       	ldi	r24, 0x06	; 6
    2f76:	f8 01       	movw	r30, r16
    2f78:	a7 eb       	ldi	r26, 0xB7	; 183
    2f7a:	b2 e0       	ldi	r27, 0x02	; 2
    2f7c:	01 90       	ld	r0, Z+
    2f7e:	0d 92       	st	X+, r0
    2f80:	8a 95       	dec	r24
    2f82:	e1 f7       	brne	.-8      	; 0x2f7c <process_tapping+0x29c>
                    waiting_buffer_scan_tap();
    2f84:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2f88:	0e 94 f7 15 	call	0x2bee	; 0x2bee <debug_tapping_key>
                    return true;
    2f8c:	ee 24       	eor	r14, r14
    2f8e:	e3 94       	inc	r14
    2f90:	31 cf       	rjmp	.-414    	; 0x2df4 <process_tapping+0x114>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f92:	52 13       	cpse	r21, r18
    2f94:	d0 cf       	rjmp	.-96     	; 0x2f36 <process_tapping+0x256>
    2f96:	34 13       	cpse	r19, r20
    2f98:	ce cf       	rjmp	.-100    	; 0x2f36 <process_tapping+0x256>
    2f9a:	f1 10       	cpse	r15, r1
    2f9c:	cc cf       	rjmp	.-104    	; 0x2f36 <process_tapping+0x256>
                    keyp->tap = tapping_key.tap;
    2f9e:	d8 01       	movw	r26, r16
    2fa0:	15 96       	adiw	r26, 0x05	; 5
    2fa2:	8c 93       	st	X, r24
                    process_action(keyp);
    2fa4:	c8 01       	movw	r24, r16
    2fa6:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
                    tapping_key = (keyrecord_t){};
    2faa:	86 e0       	ldi	r24, 0x06	; 6
    2fac:	f6 01       	movw	r30, r12
    2fae:	11 92       	st	Z+, r1
    2fb0:	8a 95       	dec	r24
    2fb2:	e9 f7       	brne	.-6      	; 0x2fae <process_tapping+0x2ce>
                    return true;
    2fb4:	e9 2c       	mov	r14, r9
    2fb6:	1e cf       	rjmp	.-452    	; 0x2df4 <process_tapping+0x114>
                if (IS_TAPPING_KEY(event.key)) {
    2fb8:	52 13       	cpse	r21, r18
    2fba:	9e cf       	rjmp	.-196    	; 0x2ef8 <process_tapping+0x218>
    2fbc:	34 13       	cpse	r19, r20
    2fbe:	9c cf       	rjmp	.-200    	; 0x2ef8 <process_tapping+0x218>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2fc0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <tapping_key+0x5>
    2fc4:	80 fd       	sbrc	r24, 0
    2fc6:	8f cf       	rjmp	.-226    	; 0x2ee6 <process_tapping+0x206>
    2fc8:	98 2f       	mov	r25, r24
    2fca:	90 7f       	andi	r25, 0xF0	; 240
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <process_tapping+0x2f0>
    2fce:	8b cf       	rjmp	.-234    	; 0x2ee6 <process_tapping+0x206>
                        keyp->tap = tapping_key.tap;
    2fd0:	d8 01       	movw	r26, r16
    2fd2:	15 96       	adiw	r26, 0x05	; 5
    2fd4:	8c 93       	st	X, r24
    2fd6:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2fd8:	90 3f       	cpi	r25, 0xF0	; 240
    2fda:	39 f0       	breq	.+14     	; 0x2fea <process_tapping+0x30a>
    2fdc:	98 2f       	mov	r25, r24
    2fde:	90 7f       	andi	r25, 0xF0	; 240
    2fe0:	90 5f       	subi	r25, 0xF0	; 240
    2fe2:	8f 70       	andi	r24, 0x0F	; 15
    2fe4:	89 2b       	or	r24, r25
    2fe6:	15 96       	adiw	r26, 0x05	; 5
    2fe8:	8c 93       	st	X, r24
                        process_action(keyp);
    2fea:	c8 01       	movw	r24, r16
    2fec:	0e 94 df 11 	call	0x23be	; 0x23be <process_action>
                        tapping_key = *keyp;
    2ff0:	86 e0       	ldi	r24, 0x06	; 6
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	a7 eb       	ldi	r26, 0xB7	; 183
    2ff6:	b2 e0       	ldi	r27, 0x02	; 2
    2ff8:	01 90       	ld	r0, Z+
    2ffa:	0d 92       	st	X+, r0
    2ffc:	8a 95       	dec	r24
    2ffe:	e1 f7       	brne	.-8      	; 0x2ff8 <process_tapping+0x318>
                        debug_tapping_key();
    3000:	d9 ce       	rjmp	.-590    	; 0x2db4 <process_tapping+0xd4>
    keyevent_t event = keyp->event;
    3002:	f8 01       	movw	r30, r16
    3004:	a3 80       	ldd	r10, Z+3	; 0x03
    3006:	b4 80       	ldd	r11, Z+4	; 0x04
    if (IS_TAPPING_PRESSED()) {
    3008:	90 90 b9 02 	lds	r9, 0x02B9	; 0x8002b9 <tapping_key+0x2>
    300c:	91 10       	cpse	r9, r1
    300e:	aa ce       	rjmp	.-684    	; 0x2d64 <process_tapping+0x84>
        if (WITHIN_TAPPING_TERM(event)) {
    3010:	a8 16       	cp	r10, r24
    3012:	b9 06       	cpc	r11, r25
    3014:	08 f4       	brcc	.+2      	; 0x3018 <process_tapping+0x338>
    3016:	57 cf       	rjmp	.-338    	; 0x2ec6 <process_tapping+0x1e6>
    3018:	a8 1a       	sub	r10, r24
    301a:	b9 0a       	sbc	r11, r25
    301c:	f8 ec       	ldi	r31, 0xC8	; 200
    301e:	af 16       	cp	r10, r31
    3020:	b1 04       	cpc	r11, r1
    3022:	08 f4       	brcc	.+2      	; 0x3026 <process_tapping+0x346>
    3024:	59 cf       	rjmp	.-334    	; 0x2ed8 <process_tapping+0x1f8>
            debug_event(event); debug("\n");
    3026:	52 2f       	mov	r21, r18
    3028:	6f 2d       	mov	r22, r15
    302a:	7a 85       	ldd	r23, Y+10	; 0x0a
    302c:	8b 85       	ldd	r24, Y+11	; 0x0b
    302e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <debug_event>
            tapping_key = (keyrecord_t){};
    3032:	86 e0       	ldi	r24, 0x06	; 6
    3034:	e7 eb       	ldi	r30, 0xB7	; 183
    3036:	f2 e0       	ldi	r31, 0x02	; 2
    3038:	df 01       	movw	r26, r30
    303a:	1d 92       	st	X+, r1
    303c:	8a 95       	dec	r24
    303e:	e9 f7       	brne	.-6      	; 0x303a <process_tapping+0x35a>
            debug_tapping_key();
    3040:	0e 94 f7 15 	call	0x2bee	; 0x2bee <debug_tapping_key>
    3044:	02 cf       	rjmp	.-508    	; 0x2e4a <process_tapping+0x16a>

00003046 <action_tapping_process>:
{
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	2c 97       	sbiw	r28, 0x0c	; 12
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	4f 83       	std	Y+7, r20	; 0x07
    305c:	58 87       	std	Y+8, r21	; 0x08
    305e:	69 87       	std	Y+9, r22	; 0x09
    3060:	7a 87       	std	Y+10, r23	; 0x0a
    3062:	8b 87       	std	Y+11, r24	; 0x0b
    3064:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3066:	ce 01       	movw	r24, r28
    3068:	07 96       	adiw	r24, 0x07	; 7
    306a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <process_tapping>
    306e:	88 23       	and	r24, r24
    3070:	d1 f0       	breq	.+52     	; 0x30a6 <action_tapping_process+0x60>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3072:	8a 85       	ldd	r24, Y+10	; 0x0a
    3074:	9b 85       	ldd	r25, Y+11	; 0x0b
    3076:	89 2b       	or	r24, r25
    3078:	39 f0       	breq	.+14     	; 0x3088 <action_tapping_process+0x42>
    307a:	58 85       	ldd	r21, Y+8	; 0x08
    307c:	4f 81       	ldd	r20, Y+7	; 0x07
    307e:	85 2f       	mov	r24, r21
    3080:	84 23       	and	r24, r20
    3082:	8f 3f       	cpi	r24, 0xFF	; 255
    3084:	09 f0       	breq	.+2      	; 0x3088 <action_tapping_process+0x42>
    3086:	76 c0       	rjmp	.+236    	; 0x3174 <action_tapping_process+0x12e>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3088:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <waiting_buffer_tail>
    308c:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <waiting_buffer_head>
    3090:	89 13       	cpse	r24, r25
    3092:	49 c0       	rjmp	.+146    	; 0x3126 <action_tapping_process+0xe0>
}
    3094:	2c 96       	adiw	r28, 0x0c	; 12
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	08 95       	ret
        if (!waiting_buffer_enq(record)) {
    30a6:	86 e0       	ldi	r24, 0x06	; 6
    30a8:	fe 01       	movw	r30, r28
    30aa:	37 96       	adiw	r30, 0x07	; 7
    30ac:	de 01       	movw	r26, r28
    30ae:	11 96       	adiw	r26, 0x01	; 1
    30b0:	01 90       	ld	r0, Z+
    30b2:	0d 92       	st	X+, r0
    30b4:	8a 95       	dec	r24
    30b6:	e1 f7       	brne	.-8      	; 0x30b0 <action_tapping_process+0x6a>
    30b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    30bc:	89 2b       	or	r24, r25
    30be:	21 f3       	breq	.-56     	; 0x3088 <action_tapping_process+0x42>
    30c0:	8f 81       	ldd	r24, Y+7	; 0x07
    30c2:	98 85       	ldd	r25, Y+8	; 0x08
    30c4:	89 23       	and	r24, r25
    30c6:	8f 3f       	cpi	r24, 0xFF	; 255
    30c8:	f9 f2       	breq	.-66     	; 0x3088 <action_tapping_process+0x42>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    30ca:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <waiting_buffer_head>
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9c 01       	movw	r18, r24
    30d2:	2f 5f       	subi	r18, 0xFF	; 255
    30d4:	3f 4f       	sbci	r19, 0xFF	; 255
    30d6:	27 70       	andi	r18, 0x07	; 7
    30d8:	33 27       	eor	r19, r19
    30da:	40 91 85 02 	lds	r20, 0x0285	; 0x800285 <waiting_buffer_tail>
    30de:	42 17       	cp	r20, r18
    30e0:	13 06       	cpc	r1, r19
    30e2:	71 f4       	brne	.+28     	; 0x3100 <action_tapping_process+0xba>
            clear_keyboard();
    30e4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <clear_keyboard>
    waiting_buffer_head = 0;
    30e8:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    30ec:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    30f0:	86 e0       	ldi	r24, 0x06	; 6
    30f2:	e7 eb       	ldi	r30, 0xB7	; 183
    30f4:	f2 e0       	ldi	r31, 0x02	; 2
    30f6:	df 01       	movw	r26, r30
    30f8:	1d 92       	st	X+, r1
    30fa:	8a 95       	dec	r24
    30fc:	e9 f7       	brne	.-6      	; 0x30f8 <action_tapping_process+0xb2>
    30fe:	c4 cf       	rjmp	.-120    	; 0x3088 <action_tapping_process+0x42>
    waiting_buffer[waiting_buffer_head] = record;
    3100:	66 e0       	ldi	r22, 0x06	; 6
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    3108:	dc 01       	movw	r26, r24
    310a:	a9 57       	subi	r26, 0x79	; 121
    310c:	bd 4f       	sbci	r27, 0xFD	; 253
    310e:	86 e0       	ldi	r24, 0x06	; 6
    3110:	fe 01       	movw	r30, r28
    3112:	31 96       	adiw	r30, 0x01	; 1
    3114:	01 90       	ld	r0, Z+
    3116:	0d 92       	st	X+, r0
    3118:	8a 95       	dec	r24
    311a:	e1 f7       	brne	.-8      	; 0x3114 <action_tapping_process+0xce>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    311c:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3120:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <debug_waiting_buffer>
    return true;
    3124:	b1 cf       	rjmp	.-158    	; 0x3088 <action_tapping_process+0x42>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	66 e0       	ldi	r22, 0x06	; 6
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    3130:	89 57       	subi	r24, 0x79	; 121
    3132:	9d 4f       	sbci	r25, 0xFD	; 253
    3134:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <process_tapping>
    3138:	88 23       	and	r24, r24
    313a:	09 f4       	brne	.+2      	; 0x313e <action_tapping_process+0xf8>
    313c:	ab cf       	rjmp	.-170    	; 0x3094 <action_tapping_process+0x4e>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    313e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <waiting_buffer_tail>
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	66 e0       	ldi	r22, 0x06	; 6
    3146:	70 e0       	ldi	r23, 0x00	; 0
    3148:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    314c:	fc 01       	movw	r30, r24
    314e:	e9 57       	subi	r30, 0x79	; 121
    3150:	fd 4f       	sbci	r31, 0xFD	; 253
    3152:	40 81       	ld	r20, Z
    3154:	51 81       	ldd	r21, Z+1	; 0x01
    3156:	62 81       	ldd	r22, Z+2	; 0x02
    3158:	73 81       	ldd	r23, Z+3	; 0x03
    315a:	84 81       	ldd	r24, Z+4	; 0x04
    315c:	95 81       	ldd	r25, Z+5	; 0x05
    315e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3162:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <waiting_buffer_tail>
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	87 70       	andi	r24, 0x07	; 7
    316c:	99 27       	eor	r25, r25
    316e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <waiting_buffer_tail>
    3172:	8a cf       	rjmp	.-236    	; 0x3088 <action_tapping_process+0x42>
            debug("processed: "); debug_record(record); debug("\n");
    3174:	69 85       	ldd	r22, Y+9	; 0x09
    3176:	7a 85       	ldd	r23, Y+10	; 0x0a
    3178:	8b 85       	ldd	r24, Y+11	; 0x0b
    317a:	9c 85       	ldd	r25, Y+12	; 0x0c
    317c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <debug_record>
    3180:	83 cf       	rjmp	.-250    	; 0x3088 <action_tapping_process+0x42>

00003182 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3182:	df 92       	push	r13
    3184:	ef 92       	push	r14
    3186:	ff 92       	push	r15
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3192:	89 2b       	or	r24, r25
    3194:	b9 f0       	breq	.+46     	; 0x31c4 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    3196:	f1 2c       	mov	r15, r1
    uint8_t interval = 0;
    3198:	e1 2c       	mov	r14, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    319a:	dd 24       	eor	r13, r13
    319c:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    319e:	e9 01       	movw	r28, r18
    31a0:	21 96       	adiw	r28, 0x01	; 1
    31a2:	f9 01       	movw	r30, r18
    31a4:	84 91       	lpm	r24, Z
    31a6:	85 37       	cpi	r24, 0x75	; 117
    31a8:	09 f4       	brne	.+2      	; 0x31ac <action_macro_play+0x2a>
    31aa:	6e c0       	rjmp	.+220    	; 0x3288 <action_macro_play+0x106>
    31ac:	98 f4       	brcc	.+38     	; 0x31d4 <action_macro_play+0x52>
    31ae:	84 37       	cpi	r24, 0x74	; 116
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <action_macro_play+0x32>
    31b2:	5a c0       	rjmp	.+180    	; 0x3268 <action_macro_play+0xe6>
    31b4:	84 30       	cpi	r24, 0x04	; 4
    31b6:	08 f0       	brcs	.+2      	; 0x31ba <action_macro_play+0x38>
    31b8:	73 c0       	rjmp	.+230    	; 0x32a0 <action_macro_play+0x11e>
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	11 f1       	breq	.+68     	; 0x3202 <action_macro_play+0x80>
    31be:	82 30       	cpi	r24, 0x02	; 2
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <action_macro_play+0x42>
    31c2:	3c c0       	rjmp	.+120    	; 0x323c <action_macro_play+0xba>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	df 90       	pop	r13
    31d2:	08 95       	ret
        switch (MACRO_READ()) {
    31d4:	88 37       	cpi	r24, 0x78	; 120
    31d6:	09 f4       	brne	.+2      	; 0x31da <action_macro_play+0x58>
    31d8:	60 c0       	rjmp	.+192    	; 0x329a <action_macro_play+0x118>
    31da:	58 f4       	brcc	.+22     	; 0x31f2 <action_macro_play+0x70>
    31dc:	86 37       	cpi	r24, 0x76	; 118
    31de:	09 f4       	brne	.+2      	; 0x31e2 <action_macro_play+0x60>
    31e0:	58 c0       	rjmp	.+176    	; 0x3292 <action_macro_play+0x110>
    31e2:	87 37       	cpi	r24, 0x77	; 119
    31e4:	79 f7       	brne	.-34     	; 0x31c4 <action_macro_play+0x42>
                set_mods(mod_storage);
    31e6:	8f 2d       	mov	r24, r15
    31e8:	0e 94 2a 1c 	call	0x3854	; 0x3854 <set_mods>
                send_keyboard_report();
    31ec:	0e 94 57 1c 	call	0x38ae	; 0x38ae <send_keyboard_report>
                break;
    31f0:	20 c0       	rjmp	.+64     	; 0x3232 <action_macro_play+0xb0>
        switch (MACRO_READ()) {
    31f2:	9c e7       	ldi	r25, 0x7C	; 124
    31f4:	98 0f       	add	r25, r24
    31f6:	90 37       	cpi	r25, 0x70	; 112
    31f8:	28 f7       	brcc	.-54     	; 0x31c4 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    31fa:	8f 77       	andi	r24, 0x7F	; 127
    31fc:	0e 94 93 11 	call	0x2326	; 0x2326 <unregister_code>
                break;
    3200:	18 c0       	rjmp	.+48     	; 0x3232 <action_macro_play+0xb0>
                MACRO_READ();
    3202:	89 01       	movw	r16, r18
    3204:	0e 5f       	subi	r16, 0xFE	; 254
    3206:	1f 4f       	sbci	r17, 0xFF	; 255
    3208:	fe 01       	movw	r30, r28
    320a:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    320c:	90 e2       	ldi	r25, 0x20	; 32
    320e:	98 0f       	add	r25, r24
    3210:	98 30       	cpi	r25, 0x08	; 8
    3212:	60 f4       	brcc	.+24     	; 0x322c <action_macro_play+0xaa>
                    add_weak_mods(MOD_BIT(macro));
    3214:	87 70       	andi	r24, 0x07	; 7
    3216:	fd 2d       	mov	r31, r13
    3218:	01 c0       	rjmp	.+2      	; 0x321c <action_macro_play+0x9a>
    321a:	ff 0f       	add	r31, r31
    321c:	8a 95       	dec	r24
    321e:	ea f7       	brpl	.-6      	; 0x321a <action_macro_play+0x98>
    3220:	8f 2f       	mov	r24, r31
    3222:	0e 94 30 1c 	call	0x3860	; 0x3860 <add_weak_mods>
                    send_keyboard_report();
    3226:	0e 94 57 1c 	call	0x38ae	; 0x38ae <send_keyboard_report>
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <action_macro_play+0xae>
                    register_code(macro);
    322c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <register_code>
                MACRO_READ();
    3230:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3232:	8e 2d       	mov	r24, r14
    3234:	81 11       	cpse	r24, r1
    3236:	37 c0       	rjmp	.+110    	; 0x32a6 <action_macro_play+0x124>
    3238:	9e 01       	movw	r18, r28
    323a:	b1 cf       	rjmp	.-158    	; 0x319e <action_macro_play+0x1c>
                MACRO_READ();
    323c:	89 01       	movw	r16, r18
    323e:	0e 5f       	subi	r16, 0xFE	; 254
    3240:	1f 4f       	sbci	r17, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3246:	90 e2       	ldi	r25, 0x20	; 32
    3248:	98 0f       	add	r25, r24
    324a:	98 30       	cpi	r25, 0x08	; 8
    324c:	50 f4       	brcc	.+20     	; 0x3262 <action_macro_play+0xe0>
                    del_weak_mods(MOD_BIT(macro));
    324e:	87 70       	andi	r24, 0x07	; 7
    3250:	fd 2d       	mov	r31, r13
    3252:	01 c0       	rjmp	.+2      	; 0x3256 <action_macro_play+0xd4>
    3254:	ff 0f       	add	r31, r31
    3256:	8a 95       	dec	r24
    3258:	ea f7       	brpl	.-6      	; 0x3254 <action_macro_play+0xd2>
    325a:	8f 2f       	mov	r24, r31
    325c:	0e 94 36 1c 	call	0x386c	; 0x386c <del_weak_mods>
    3260:	e2 cf       	rjmp	.-60     	; 0x3226 <action_macro_play+0xa4>
                    unregister_code(macro);
    3262:	0e 94 93 11 	call	0x2326	; 0x2326 <unregister_code>
    3266:	e4 cf       	rjmp	.-56     	; 0x3230 <action_macro_play+0xae>
                MACRO_READ();
    3268:	2e 5f       	subi	r18, 0xFE	; 254
    326a:	3f 4f       	sbci	r19, 0xFF	; 255
    326c:	fe 01       	movw	r30, r28
    326e:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3270:	c1 11       	cpse	r28, r1
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <action_macro_play+0xf6>
                interval = MACRO_READ();
    3274:	e9 01       	movw	r28, r18
                break;
    3276:	dd cf       	rjmp	.-70     	; 0x3232 <action_macro_play+0xb0>
    3278:	8f e9       	ldi	r24, 0x9F	; 159
    327a:	9f e0       	ldi	r25, 0x0F	; 15
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <action_macro_play+0xfa>
    3280:	00 c0       	rjmp	.+0      	; 0x3282 <action_macro_play+0x100>
    3282:	00 00       	nop
    3284:	c1 50       	subi	r28, 0x01	; 1
}
    3286:	f4 cf       	rjmp	.-24     	; 0x3270 <action_macro_play+0xee>
                interval = MACRO_READ();
    3288:	2e 5f       	subi	r18, 0xFE	; 254
    328a:	3f 4f       	sbci	r19, 0xFF	; 255
    328c:	fe 01       	movw	r30, r28
    328e:	e4 90       	lpm	r14, Z
    3290:	f1 cf       	rjmp	.-30     	; 0x3274 <action_macro_play+0xf2>
                mod_storage = get_mods();
    3292:	0e 94 19 1c 	call	0x3832	; 0x3832 <get_mods>
    3296:	f8 2e       	mov	r15, r24
                break;
    3298:	cc cf       	rjmp	.-104    	; 0x3232 <action_macro_play+0xb0>
                clear_mods();
    329a:	0e 94 2d 1c 	call	0x385a	; 0x385a <clear_mods>
    329e:	a6 cf       	rjmp	.-180    	; 0x31ec <action_macro_play+0x6a>
                register_code(macro);
    32a0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <register_code>
                break;
    32a4:	c6 cf       	rjmp	.-116    	; 0x3232 <action_macro_play+0xb0>
	__builtin_avr_delay_cycles(__ticks_dc);
    32a6:	ef e9       	ldi	r30, 0x9F	; 159
    32a8:	ff e0       	ldi	r31, 0x0F	; 15
    32aa:	31 97       	sbiw	r30, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <action_macro_play+0x128>
    32ae:	00 c0       	rjmp	.+0      	; 0x32b0 <action_macro_play+0x12e>
    32b0:	00 00       	nop
    32b2:	81 50       	subi	r24, 0x01	; 1
}
    32b4:	bf cf       	rjmp	.-130    	; 0x3234 <action_macro_play+0xb2>

000032b6 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    32b6:	60 93 3d 03 	sts	0x033D, r22	; 0x80033d <layer_state>
    32ba:	70 93 3e 03 	sts	0x033E, r23	; 0x80033e <layer_state+0x1>
    32be:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <layer_state+0x2>
    32c2:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <layer_state+0x3>
    hook_layer_change(layer_state);
    32c6:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <hook_layer_change>

000032ca <default_layer_debug>:
}
    32ca:	08 95       	ret

000032cc <default_layer_set>:
    default_layer_state = state;
    32cc:	60 93 41 03 	sts	0x0341, r22	; 0x800341 <default_layer_state>
    32d0:	70 93 42 03 	sts	0x0342, r23	; 0x800342 <default_layer_state+0x1>
    32d4:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <default_layer_state+0x2>
    32d8:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    32dc:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <hook_default_layer_change>

000032e0 <default_layer_or>:
{
    32e0:	cf 93       	push	r28
    32e2:	df 93       	push	r29
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <default_layer_or+0x6>
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <default_layer_or+0x8>
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	69 83       	std	Y+1, r22	; 0x01
    32ee:	7a 83       	std	Y+2, r23	; 0x02
    32f0:	8b 83       	std	Y+3, r24	; 0x03
    32f2:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state | state);
    32f4:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <default_layer_state>
    32f8:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <default_layer_state+0x1>
    32fc:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <default_layer_state+0x2>
    3300:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <default_layer_state+0x3>
    3304:	29 81       	ldd	r18, Y+1	; 0x01
    3306:	3a 81       	ldd	r19, Y+2	; 0x02
    3308:	4b 81       	ldd	r20, Y+3	; 0x03
    330a:	5c 81       	ldd	r21, Y+4	; 0x04
    330c:	28 2b       	or	r18, r24
    330e:	39 2b       	or	r19, r25
    3310:	4a 2b       	or	r20, r26
    3312:	5b 2b       	or	r21, r27
    3314:	29 83       	std	Y+1, r18	; 0x01
    3316:	3a 83       	std	Y+2, r19	; 0x02
    3318:	4b 83       	std	Y+3, r20	; 0x03
    331a:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    331c:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <default_layer_state>
    3320:	30 93 42 03 	sts	0x0342, r19	; 0x800342 <default_layer_state+0x1>
    3324:	40 93 43 03 	sts	0x0343, r20	; 0x800343 <default_layer_state+0x2>
    3328:	50 93 44 03 	sts	0x0344, r21	; 0x800344 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    332c:	ca 01       	movw	r24, r20
    332e:	b9 01       	movw	r22, r18
}
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    333c:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <hook_default_layer_change>

00003340 <default_layer_and>:
{
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	00 d0       	rcall	.+0      	; 0x3346 <default_layer_and+0x6>
    3346:	00 d0       	rcall	.+0      	; 0x3348 <default_layer_and+0x8>
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	69 83       	std	Y+1, r22	; 0x01
    334e:	7a 83       	std	Y+2, r23	; 0x02
    3350:	8b 83       	std	Y+3, r24	; 0x03
    3352:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state & state);
    3354:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <default_layer_state>
    3358:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <default_layer_state+0x1>
    335c:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <default_layer_state+0x2>
    3360:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <default_layer_state+0x3>
    3364:	29 81       	ldd	r18, Y+1	; 0x01
    3366:	3a 81       	ldd	r19, Y+2	; 0x02
    3368:	4b 81       	ldd	r20, Y+3	; 0x03
    336a:	5c 81       	ldd	r21, Y+4	; 0x04
    336c:	28 23       	and	r18, r24
    336e:	39 23       	and	r19, r25
    3370:	4a 23       	and	r20, r26
    3372:	5b 23       	and	r21, r27
    3374:	29 83       	std	Y+1, r18	; 0x01
    3376:	3a 83       	std	Y+2, r19	; 0x02
    3378:	4b 83       	std	Y+3, r20	; 0x03
    337a:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    337c:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <default_layer_state>
    3380:	30 93 42 03 	sts	0x0342, r19	; 0x800342 <default_layer_state+0x1>
    3384:	40 93 43 03 	sts	0x0343, r20	; 0x800343 <default_layer_state+0x2>
    3388:	50 93 44 03 	sts	0x0344, r21	; 0x800344 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    338c:	ca 01       	movw	r24, r20
    338e:	b9 01       	movw	r22, r18
}
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    339c:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <hook_default_layer_change>

000033a0 <default_layer_xor>:
{
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <default_layer_xor+0x6>
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <default_layer_xor+0x8>
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	69 83       	std	Y+1, r22	; 0x01
    33ae:	7a 83       	std	Y+2, r23	; 0x02
    33b0:	8b 83       	std	Y+3, r24	; 0x03
    33b2:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state ^ state);
    33b4:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <default_layer_state>
    33b8:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <default_layer_state+0x1>
    33bc:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <default_layer_state+0x2>
    33c0:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <default_layer_state+0x3>
    33c4:	29 81       	ldd	r18, Y+1	; 0x01
    33c6:	3a 81       	ldd	r19, Y+2	; 0x02
    33c8:	4b 81       	ldd	r20, Y+3	; 0x03
    33ca:	5c 81       	ldd	r21, Y+4	; 0x04
    33cc:	28 27       	eor	r18, r24
    33ce:	39 27       	eor	r19, r25
    33d0:	4a 27       	eor	r20, r26
    33d2:	5b 27       	eor	r21, r27
    33d4:	29 83       	std	Y+1, r18	; 0x01
    33d6:	3a 83       	std	Y+2, r19	; 0x02
    33d8:	4b 83       	std	Y+3, r20	; 0x03
    33da:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    33dc:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <default_layer_state>
    33e0:	30 93 42 03 	sts	0x0342, r19	; 0x800342 <default_layer_state+0x1>
    33e4:	40 93 43 03 	sts	0x0343, r20	; 0x800343 <default_layer_state+0x2>
    33e8:	50 93 44 03 	sts	0x0344, r21	; 0x800344 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    33ec:	ca 01       	movw	r24, r20
    33ee:	b9 01       	movw	r22, r18
}
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    33fc:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <hook_default_layer_change>

00003400 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	cb 01       	movw	r24, r22
    3406:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

0000340a <layer_move>:
}

void layer_move(uint8_t layer)
{
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	00 d0       	rcall	.+0      	; 0x3414 <layer_move+0xa>
    3414:	00 d0       	rcall	.+0      	; 0x3416 <layer_move+0xc>
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(1UL<<layer);
    341a:	41 e0       	ldi	r20, 0x01	; 1
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	8a 01       	movw	r16, r20
    3424:	9b 01       	movw	r18, r22
    3426:	04 c0       	rjmp	.+8      	; 0x3430 <layer_move+0x26>
    3428:	00 0f       	add	r16, r16
    342a:	11 1f       	adc	r17, r17
    342c:	22 1f       	adc	r18, r18
    342e:	33 1f       	adc	r19, r19
    3430:	8a 95       	dec	r24
    3432:	d2 f7       	brpl	.-12     	; 0x3428 <layer_move+0x1e>
    3434:	09 83       	std	Y+1, r16	; 0x01
    3436:	1a 83       	std	Y+2, r17	; 0x02
    3438:	2b 83       	std	Y+3, r18	; 0x03
    343a:	3c 83       	std	Y+4, r19	; 0x04
    343c:	c9 01       	movw	r24, r18
    343e:	b8 01       	movw	r22, r16
}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    3450:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

00003454 <layer_on>:

void layer_on(uint8_t layer)
{
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	00 d0       	rcall	.+0      	; 0x345e <layer_on+0xa>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <layer_on+0xc>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state | (1UL<<layer));
    3464:	41 e0       	ldi	r20, 0x01	; 1
    3466:	50 e0       	ldi	r21, 0x00	; 0
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <layer_on+0x22>
    346e:	44 0f       	add	r20, r20
    3470:	55 1f       	adc	r21, r21
    3472:	66 1f       	adc	r22, r22
    3474:	77 1f       	adc	r23, r23
    3476:	8a 95       	dec	r24
    3478:	d2 f7       	brpl	.-12     	; 0x346e <layer_on+0x1a>
    347a:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <layer_state>
    347e:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <layer_state+0x1>
    3482:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <layer_state+0x2>
    3486:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <layer_state+0x3>
    348a:	8a 01       	movw	r16, r20
    348c:	9b 01       	movw	r18, r22
    348e:	08 2b       	or	r16, r24
    3490:	19 2b       	or	r17, r25
    3492:	2a 2b       	or	r18, r26
    3494:	3b 2b       	or	r19, r27
    3496:	09 83       	std	Y+1, r16	; 0x01
    3498:	1a 83       	std	Y+2, r17	; 0x02
    349a:	2b 83       	std	Y+3, r18	; 0x03
    349c:	3c 83       	std	Y+4, r19	; 0x04
    349e:	c9 01       	movw	r24, r18
    34a0:	b8 01       	movw	r22, r16
}
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    34b2:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

000034b6 <layer_off>:

void layer_off(uint8_t layer)
{
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <layer_off+0xa>
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <layer_off+0xc>
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state & ~(1UL<<layer));
    34c6:	41 e0       	ldi	r20, 0x01	; 1
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	04 c0       	rjmp	.+8      	; 0x34d8 <layer_off+0x22>
    34d0:	44 0f       	add	r20, r20
    34d2:	55 1f       	adc	r21, r21
    34d4:	66 1f       	adc	r22, r22
    34d6:	77 1f       	adc	r23, r23
    34d8:	8a 95       	dec	r24
    34da:	d2 f7       	brpl	.-12     	; 0x34d0 <layer_off+0x1a>
    34dc:	40 95       	com	r20
    34de:	50 95       	com	r21
    34e0:	60 95       	com	r22
    34e2:	70 95       	com	r23
    34e4:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <layer_state>
    34e8:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <layer_state+0x1>
    34ec:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <layer_state+0x2>
    34f0:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <layer_state+0x3>
    34f4:	8a 01       	movw	r16, r20
    34f6:	9b 01       	movw	r18, r22
    34f8:	08 23       	and	r16, r24
    34fa:	19 23       	and	r17, r25
    34fc:	2a 23       	and	r18, r26
    34fe:	3b 23       	and	r19, r27
    3500:	09 83       	std	Y+1, r16	; 0x01
    3502:	1a 83       	std	Y+2, r17	; 0x02
    3504:	2b 83       	std	Y+3, r18	; 0x03
    3506:	3c 83       	std	Y+4, r19	; 0x04
    3508:	c9 01       	movw	r24, r18
    350a:	b8 01       	movw	r22, r16
}
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    351c:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

00003520 <layer_invert>:

void layer_invert(uint8_t layer)
{
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	00 d0       	rcall	.+0      	; 0x352a <layer_invert+0xa>
    352a:	00 d0       	rcall	.+0      	; 0x352c <layer_invert+0xc>
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state ^ (1UL<<layer));
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	70 e0       	ldi	r23, 0x00	; 0
    3538:	04 c0       	rjmp	.+8      	; 0x3542 <layer_invert+0x22>
    353a:	44 0f       	add	r20, r20
    353c:	55 1f       	adc	r21, r21
    353e:	66 1f       	adc	r22, r22
    3540:	77 1f       	adc	r23, r23
    3542:	8a 95       	dec	r24
    3544:	d2 f7       	brpl	.-12     	; 0x353a <layer_invert+0x1a>
    3546:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <layer_state>
    354a:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <layer_state+0x1>
    354e:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <layer_state+0x2>
    3552:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <layer_state+0x3>
    3556:	8a 01       	movw	r16, r20
    3558:	9b 01       	movw	r18, r22
    355a:	08 27       	eor	r16, r24
    355c:	19 27       	eor	r17, r25
    355e:	2a 27       	eor	r18, r26
    3560:	3b 27       	eor	r19, r27
    3562:	09 83       	std	Y+1, r16	; 0x01
    3564:	1a 83       	std	Y+2, r17	; 0x02
    3566:	2b 83       	std	Y+3, r18	; 0x03
    3568:	3c 83       	std	Y+4, r19	; 0x04
    356a:	c9 01       	movw	r24, r18
    356c:	b8 01       	movw	r22, r16
}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	df 91       	pop	r29
    3578:	cf 91       	pop	r28
    357a:	1f 91       	pop	r17
    357c:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    357e:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

00003582 <layer_or>:

void layer_or(uint32_t state)
{
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	00 d0       	rcall	.+0      	; 0x3588 <layer_or+0x6>
    3588:	00 d0       	rcall	.+0      	; 0x358a <layer_or+0x8>
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	69 83       	std	Y+1, r22	; 0x01
    3590:	7a 83       	std	Y+2, r23	; 0x02
    3592:	8b 83       	std	Y+3, r24	; 0x03
    3594:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state | state);
    3596:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <layer_state>
    359a:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <layer_state+0x1>
    359e:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <layer_state+0x2>
    35a2:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <layer_state+0x3>
    35a6:	29 81       	ldd	r18, Y+1	; 0x01
    35a8:	3a 81       	ldd	r19, Y+2	; 0x02
    35aa:	4b 81       	ldd	r20, Y+3	; 0x03
    35ac:	5c 81       	ldd	r21, Y+4	; 0x04
    35ae:	28 2b       	or	r18, r24
    35b0:	39 2b       	or	r19, r25
    35b2:	4a 2b       	or	r20, r26
    35b4:	5b 2b       	or	r21, r27
    35b6:	29 83       	std	Y+1, r18	; 0x01
    35b8:	3a 83       	std	Y+2, r19	; 0x02
    35ba:	4b 83       	std	Y+3, r20	; 0x03
    35bc:	5c 83       	std	Y+4, r21	; 0x04
    35be:	ca 01       	movw	r24, r20
    35c0:	b9 01       	movw	r22, r18
}
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	df 91       	pop	r29
    35cc:	cf 91       	pop	r28
    layer_state_set(layer_state | state);
    35ce:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

000035d2 <layer_and>:
void layer_and(uint32_t state)
{
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <layer_and+0x6>
    35d8:	00 d0       	rcall	.+0      	; 0x35da <layer_and+0x8>
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
    35de:	69 83       	std	Y+1, r22	; 0x01
    35e0:	7a 83       	std	Y+2, r23	; 0x02
    35e2:	8b 83       	std	Y+3, r24	; 0x03
    35e4:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state & state);
    35e6:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <layer_state>
    35ea:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <layer_state+0x1>
    35ee:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <layer_state+0x2>
    35f2:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <layer_state+0x3>
    35f6:	29 81       	ldd	r18, Y+1	; 0x01
    35f8:	3a 81       	ldd	r19, Y+2	; 0x02
    35fa:	4b 81       	ldd	r20, Y+3	; 0x03
    35fc:	5c 81       	ldd	r21, Y+4	; 0x04
    35fe:	28 23       	and	r18, r24
    3600:	39 23       	and	r19, r25
    3602:	4a 23       	and	r20, r26
    3604:	5b 23       	and	r21, r27
    3606:	29 83       	std	Y+1, r18	; 0x01
    3608:	3a 83       	std	Y+2, r19	; 0x02
    360a:	4b 83       	std	Y+3, r20	; 0x03
    360c:	5c 83       	std	Y+4, r21	; 0x04
    360e:	ca 01       	movw	r24, r20
    3610:	b9 01       	movw	r22, r18
}
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    layer_state_set(layer_state & state);
    361e:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

00003622 <layer_xor>:
void layer_xor(uint32_t state)
{
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	00 d0       	rcall	.+0      	; 0x3628 <layer_xor+0x6>
    3628:	00 d0       	rcall	.+0      	; 0x362a <layer_xor+0x8>
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	69 83       	std	Y+1, r22	; 0x01
    3630:	7a 83       	std	Y+2, r23	; 0x02
    3632:	8b 83       	std	Y+3, r24	; 0x03
    3634:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state ^ state);
    3636:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <layer_state>
    363a:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <layer_state+0x1>
    363e:	a0 91 3f 03 	lds	r26, 0x033F	; 0x80033f <layer_state+0x2>
    3642:	b0 91 40 03 	lds	r27, 0x0340	; 0x800340 <layer_state+0x3>
    3646:	29 81       	ldd	r18, Y+1	; 0x01
    3648:	3a 81       	ldd	r19, Y+2	; 0x02
    364a:	4b 81       	ldd	r20, Y+3	; 0x03
    364c:	5c 81       	ldd	r21, Y+4	; 0x04
    364e:	28 27       	eor	r18, r24
    3650:	39 27       	eor	r19, r25
    3652:	4a 27       	eor	r20, r26
    3654:	5b 27       	eor	r21, r27
    3656:	29 83       	std	Y+1, r18	; 0x01
    3658:	3a 83       	std	Y+2, r19	; 0x02
    365a:	4b 83       	std	Y+3, r20	; 0x03
    365c:	5c 83       	std	Y+4, r21	; 0x04
    365e:	ca 01       	movw	r24, r20
    3660:	b9 01       	movw	r22, r18
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	df 91       	pop	r29
    366c:	cf 91       	pop	r28
    layer_state_set(layer_state ^ state);
    366e:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <layer_state_set>

00003672 <layer_debug>:
    3672:	08 95       	ret

00003674 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    3674:	4f 92       	push	r4
    3676:	5f 92       	push	r5
    3678:	6f 92       	push	r6
    367a:	7f 92       	push	r7
    367c:	9f 92       	push	r9
    367e:	af 92       	push	r10
    3680:	bf 92       	push	r11
    3682:	cf 92       	push	r12
    3684:	df 92       	push	r13
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	00 d0       	rcall	.+0      	; 0x3694 <layer_switch_get_action+0x20>
    3694:	00 d0       	rcall	.+0      	; 0x3696 <layer_switch_get_action+0x22>
    3696:	0f 92       	push	r0
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	49 83       	std	Y+1, r20	; 0x01
    369e:	5a 83       	std	Y+2, r21	; 0x02
    36a0:	6b 83       	std	Y+3, r22	; 0x03
    36a2:	7c 83       	std	Y+4, r23	; 0x04
    36a4:	8d 83       	std	Y+5, r24	; 0x05
    36a6:	8c 81       	ldd	r24, Y+4	; 0x04
    36a8:	9d 81       	ldd	r25, Y+5	; 0x05
    36aa:	89 2b       	or	r24, r25
    36ac:	31 f0       	breq	.+12     	; 0x36ba <layer_switch_get_action+0x46>
    36ae:	a4 2e       	mov	r10, r20
    36b0:	95 2e       	mov	r9, r21
    36b2:	84 2f       	mov	r24, r20
    36b4:	85 23       	and	r24, r21
    36b6:	8f 3f       	cpi	r24, 0xFF	; 255
    36b8:	59 f5       	brne	.+86     	; 0x3710 <layer_switch_get_action+0x9c>
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
}
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	ef 90       	pop	r14
    36d4:	df 90       	pop	r13
    36d6:	cf 90       	pop	r12
    36d8:	bf 90       	pop	r11
    36da:	af 90       	pop	r10
    36dc:	9f 90       	pop	r9
    36de:	7f 90       	pop	r7
    36e0:	6f 90       	pop	r6
    36e2:	5f 90       	pop	r5
    36e4:	4f 90       	pop	r4
    36e6:	08 95       	ret
            action = action_for_key(i, key);
    36e8:	6a 2d       	mov	r22, r10
    36ea:	79 2d       	mov	r23, r9
    36ec:	8c 2d       	mov	r24, r12
    36ee:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	c1 f1       	breq	.+112    	; 0x3766 <layer_switch_get_action+0xf2>
    36f6:	3c c0       	rjmp	.+120    	; 0x3770 <layer_switch_get_action+0xfc>
        layer = layer_pressed[event.key.row][event.key.col];
    36f8:	f8 01       	movw	r30, r16
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	ee 0f       	add	r30, r30
    36fe:	ff 1f       	adc	r31, r31
    3700:	8a 95       	dec	r24
    3702:	e1 f7       	brne	.-8      	; 0x36fc <layer_switch_get_action+0x88>
    3704:	e3 54       	subi	r30, 0x43	; 67
    3706:	fd 4f       	sbci	r31, 0xFD	; 253
    3708:	ee 0d       	add	r30, r14
    370a:	ff 1d       	adc	r31, r15
    370c:	b0 80       	ld	r11, Z
    370e:	3b c0       	rjmp	.+118    	; 0x3786 <layer_switch_get_action+0x112>
        layer_pressed[event.key.row][event.key.col] = layer;
    3710:	05 2f       	mov	r16, r21
    3712:	10 e0       	ldi	r17, 0x00	; 0
    3714:	e4 2e       	mov	r14, r20
    3716:	f1 2c       	mov	r15, r1
    if (event.pressed) {
    3718:	8b 81       	ldd	r24, Y+3	; 0x03
    371a:	88 23       	and	r24, r24
    371c:	69 f3       	breq	.-38     	; 0x36f8 <layer_switch_get_action+0x84>
    uint32_t layers = layer_state | default_layer_state;
    371e:	40 90 3d 03 	lds	r4, 0x033D	; 0x80033d <layer_state>
    3722:	50 90 3e 03 	lds	r5, 0x033E	; 0x80033e <layer_state+0x1>
    3726:	60 90 3f 03 	lds	r6, 0x033F	; 0x80033f <layer_state+0x2>
    372a:	70 90 40 03 	lds	r7, 0x0340	; 0x800340 <layer_state+0x3>
    372e:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <default_layer_state>
    3732:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <default_layer_state+0x1>
    3736:	a0 91 43 03 	lds	r26, 0x0343	; 0x800343 <default_layer_state+0x2>
    373a:	b0 91 44 03 	lds	r27, 0x0344	; 0x800344 <default_layer_state+0x3>
    373e:	48 2a       	or	r4, r24
    3740:	59 2a       	or	r5, r25
    3742:	6a 2a       	or	r6, r26
    3744:	7b 2a       	or	r7, r27
    3746:	2f e1       	ldi	r18, 0x1F	; 31
    3748:	c2 2e       	mov	r12, r18
    374a:	d1 2c       	mov	r13, r1
        if (layers & (1UL<<i)) {
    374c:	bc 2c       	mov	r11, r12
    374e:	d3 01       	movw	r26, r6
    3750:	c2 01       	movw	r24, r4
    3752:	0c 2c       	mov	r0, r12
    3754:	04 c0       	rjmp	.+8      	; 0x375e <layer_switch_get_action+0xea>
    3756:	b6 95       	lsr	r27
    3758:	a7 95       	ror	r26
    375a:	97 95       	ror	r25
    375c:	87 95       	ror	r24
    375e:	0a 94       	dec	r0
    3760:	d2 f7       	brpl	.-12     	; 0x3756 <layer_switch_get_action+0xe2>
    3762:	80 fd       	sbrc	r24, 0
    3764:	c1 cf       	rjmp	.-126    	; 0x36e8 <layer_switch_get_action+0x74>
    for (int8_t i = 31; i >= 0; i--) {
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	c8 1a       	sub	r12, r24
    376a:	d1 08       	sbc	r13, r1
    376c:	78 f7       	brcc	.-34     	; 0x374c <layer_switch_get_action+0xd8>
    return 0;
    376e:	b1 2c       	mov	r11, r1
        layer_pressed[event.key.row][event.key.col] = layer;
    3770:	f8 01       	movw	r30, r16
    3772:	93 e0       	ldi	r25, 0x03	; 3
    3774:	ee 0f       	add	r30, r30
    3776:	ff 1f       	adc	r31, r31
    3778:	9a 95       	dec	r25
    377a:	e1 f7       	brne	.-8      	; 0x3774 <layer_switch_get_action+0x100>
    377c:	e3 54       	subi	r30, 0x43	; 67
    377e:	fd 4f       	sbci	r31, 0xFD	; 253
    3780:	ee 0d       	add	r30, r14
    3782:	ff 1d       	adc	r31, r15
    3784:	b0 82       	st	Z, r11
    return action_for_key(layer, event.key);
    3786:	69 81       	ldd	r22, Y+1	; 0x01
    3788:	7a 81       	ldd	r23, Y+2	; 0x02
    378a:	8b 2d       	mov	r24, r11
}
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	df 90       	pop	r13
    37a4:	cf 90       	pop	r12
    37a6:	bf 90       	pop	r11
    37a8:	af 90       	pop	r10
    37aa:	9f 90       	pop	r9
    37ac:	7f 90       	pop	r7
    37ae:	6f 90       	pop	r6
    37b0:	5f 90       	pop	r5
    37b2:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    37b4:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <action_for_key>

000037b8 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    37b8:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <keyboard_report>
    37bc:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <keyboard_report+0x1>
    37c0:	f9 01       	movw	r30, r18
    37c2:	32 96       	adiw	r30, 0x02	; 2
    int8_t empty = -1;
    37c4:	9f ef       	ldi	r25, 0xFF	; 255
    int8_t i = 0;
    37c6:	40 e0       	ldi	r20, 0x00	; 0
        if (keyboard_report->keys[i] == code) {
    37c8:	51 91       	ld	r21, Z+
    37ca:	85 17       	cp	r24, r21
    37cc:	51 f0       	breq	.+20     	; 0x37e2 <add_key+0x2a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    37ce:	9f 3f       	cpi	r25, 0xFF	; 255
    37d0:	19 f4       	brne	.+6      	; 0x37d8 <add_key+0x20>
    37d2:	51 11       	cpse	r21, r1
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <add_key+0x20>
    37d6:	94 2f       	mov	r25, r20
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    37d8:	4f 5f       	subi	r20, 0xFF	; 255
    37da:	46 30       	cpi	r20, 0x06	; 6
    37dc:	a9 f7       	brne	.-22     	; 0x37c8 <add_key+0x10>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    37de:	9f 3f       	cpi	r25, 0xFF	; 255
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <add_key+0x2c>
}
    37e2:	08 95       	ret
            keyboard_report->keys[empty] = code;
    37e4:	29 0f       	add	r18, r25
    37e6:	31 1d       	adc	r19, r1
    37e8:	97 fd       	sbrc	r25, 7
    37ea:	3a 95       	dec	r19
    37ec:	f9 01       	movw	r30, r18
    37ee:	82 83       	std	Z+2, r24	; 0x02
}
    37f0:	08 95       	ret

000037f2 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    37f2:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <keyboard_report>
    37f6:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <keyboard_report+0x1>
    37fa:	f9 01       	movw	r30, r18
    37fc:	32 96       	adiw	r30, 0x02	; 2
    37fe:	28 5f       	subi	r18, 0xF8	; 248
    3800:	3f 4f       	sbci	r19, 0xFF	; 255
    3802:	91 91       	ld	r25, Z+
    3804:	89 13       	cpse	r24, r25
    3806:	03 c0       	rjmp	.+6      	; 0x380e <del_key+0x1c>
            keyboard_report->keys[i] = 0;
    3808:	df 01       	movw	r26, r30
    380a:	11 97       	sbiw	r26, 0x01	; 1
    380c:	1c 92       	st	X, r1
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    380e:	e2 17       	cp	r30, r18
    3810:	f3 07       	cpc	r31, r19
    3812:	b9 f7       	brne	.-18     	; 0x3802 <del_key+0x10>
}
    3814:	08 95       	ret

00003816 <clear_keys>:
{
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
        keyboard_report->raw[i] = 0;
    381a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    381e:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    3822:	e8 0f       	add	r30, r24
    3824:	f9 1f       	adc	r31, r25
    3826:	10 82       	st	Z, r1
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3828:	01 96       	adiw	r24, 0x01	; 1
    382a:	88 30       	cpi	r24, 0x08	; 8
    382c:	91 05       	cpc	r25, r1
    382e:	a9 f7       	brne	.-22     	; 0x381a <clear_keys+0x4>
}
    3830:	08 95       	ret

00003832 <get_mods>:
uint8_t get_mods(void) { return real_mods; }
    3832:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <real_mods>
    3836:	08 95       	ret

00003838 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3838:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <real_mods>
    383c:	98 2b       	or	r25, r24
    383e:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <real_mods>
    3842:	08 95       	ret

00003844 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3844:	98 2f       	mov	r25, r24
    3846:	90 95       	com	r25
    3848:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <real_mods>
    384c:	89 23       	and	r24, r25
    384e:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <real_mods>
    3852:	08 95       	ret

00003854 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3854:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <real_mods>
    3858:	08 95       	ret

0000385a <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    385a:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <real_mods>
    385e:	08 95       	ret

00003860 <add_weak_mods>:
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3860:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <weak_mods>
    3864:	98 2b       	or	r25, r24
    3866:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <weak_mods>
    386a:	08 95       	ret

0000386c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    386c:	98 2f       	mov	r25, r24
    386e:	90 95       	com	r25
    3870:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <weak_mods>
    3874:	89 23       	and	r24, r25
    3876:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <weak_mods>
    387a:	08 95       	ret

0000387c <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    387c:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <weak_mods>
    3880:	08 95       	ret

00003882 <set_oneshot_mods>:
    oneshot_mods = mods;
    3882:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <oneshot_mods>
}
    3886:	08 95       	ret

00003888 <clear_oneshot_mods>:
    oneshot_mods = 0;
    3888:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <oneshot_mods>
}
    388c:	08 95       	ret

0000388e <has_anykey>:
        if (keyboard_report->raw[i])
    388e:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <keyboard_report>
    3892:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <keyboard_report+0x1>
    3896:	f9 01       	movw	r30, r18
    3898:	31 96       	adiw	r30, 0x01	; 1
    389a:	28 5f       	subi	r18, 0xF8	; 248
    389c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    389e:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    38a0:	91 91       	ld	r25, Z+
    38a2:	91 11       	cpse	r25, r1
            cnt++;
    38a4:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38a6:	e2 17       	cp	r30, r18
    38a8:	f3 07       	cpc	r31, r19
    38aa:	d1 f7       	brne	.-12     	; 0x38a0 <has_anykey+0x12>
}
    38ac:	08 95       	ret

000038ae <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    38ae:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    38b2:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    38b6:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <real_mods>
    38ba:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    38bc:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    38c0:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    38c4:	80 81       	ld	r24, Z
    38c6:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <weak_mods>
    38ca:	89 2b       	or	r24, r25
    38cc:	80 83       	st	Z, r24
    if (oneshot_mods) {
    38ce:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <oneshot_mods>
    38d2:	99 23       	and	r25, r25
    38d4:	61 f0       	breq	.+24     	; 0x38ee <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    38d6:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    38da:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    38de:	80 81       	ld	r24, Z
    38e0:	89 2b       	or	r24, r25
    38e2:	80 83       	st	Z, r24
        if (has_anykey()) {
    38e4:	0e 94 47 1c 	call	0x388e	; 0x388e <has_anykey>
    38e8:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    38ea:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    38ee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <keyboard_report>
    38f2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <keyboard_report+0x1>
    38f6:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <host_keyboard_send>

000038fa <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    38fa:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__bss_start+0x1>
    38fe:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__bss_start>
}
    3902:	08 95       	ret

00003904 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3904:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	9c 01       	movw	r18, r24
    390a:	22 0f       	add	r18, r18
    390c:	33 1f       	adc	r19, r19
    390e:	22 0f       	add	r18, r18
    3910:	33 1f       	adc	r19, r19
    3912:	2c 7c       	andi	r18, 0xCC	; 204
    3914:	95 95       	asr	r25
    3916:	87 95       	ror	r24
    3918:	95 95       	asr	r25
    391a:	87 95       	ror	r24
    391c:	83 73       	andi	r24, 0x33	; 51
    391e:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	c9 01       	movw	r24, r18
    3924:	88 0f       	add	r24, r24
    3926:	99 1f       	adc	r25, r25
    3928:	8a 7a       	andi	r24, 0xAA	; 170
    392a:	35 95       	asr	r19
    392c:	27 95       	ror	r18
    392e:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    3930:	82 2b       	or	r24, r18
    3932:	08 95       	ret

00003934 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3934:	08 95       	ret

00003936 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3936:	cf 93       	push	r28
    3938:	df 93       	push	r29
    393a:	00 d0       	rcall	.+0      	; 0x393c <hook_matrix_change+0x6>
    393c:	00 d0       	rcall	.+0      	; 0x393e <hook_matrix_change+0x8>
    393e:	0f 92       	push	r0
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    3954:	08 95       	ret

00003956 <hook_layer_change>:
    3956:	08 95       	ret

00003958 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3958:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <keyboard_set_leds>

0000395c <hook_bootmagic>:
    395c:	08 95       	ret

0000395e <hook_process_action>:
void hook_bootmagic(void) {}

__attribute__((weak))
bool hook_process_action(keyrecord_t *record) {
    return false;
}
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	08 95       	ret

00003962 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3962:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <USB_DeviceState>
    3966:	84 30       	cpi	r24, 0x04	; 4
    3968:	21 f1       	breq	.+72     	; 0x39b2 <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    396a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    396e:	88 e1       	ldi	r24, 0x18	; 24
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	20 e4       	ldi	r18, 0x40	; 64
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	a8 95       	wdr
    397a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3984:	83 b7       	in	r24, 0x33	; 51
    3986:	81 7f       	andi	r24, 0xF1	; 241
    3988:	84 60       	ori	r24, 0x04	; 4
    398a:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    398c:	83 b7       	in	r24, 0x33	; 51
    398e:	81 60       	ori	r24, 0x01	; 1
    3990:	83 bf       	out	0x33, r24	; 51
    sei();
    3992:	78 94       	sei
    sleep_cpu();
    3994:	88 95       	sleep
    sleep_disable();
    3996:	83 b7       	in	r24, 0x33	; 51
    3998:	8e 7f       	andi	r24, 0xFE	; 254
    399a:	83 bf       	out	0x33, r24	; 51
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	f8 94       	cli
    39a0:	a8 95       	wdr
    39a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    39a6:	88 61       	ori	r24, 0x18	; 24
    39a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    39ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    39b0:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    39b2:	08 95       	ret

000039b4 <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    39b4:	cf 93       	push	r28
    matrix_power_up();
    39b6:	0e 94 c3 10 	call	0x2186	; 0x2186 <matrix_power_up>
    matrix_scan();
    39ba:	0e 94 73 06 	call	0xce6	; 0xce6 <matrix_scan>
    matrix_power_down();
    39be:	0e 94 c4 10 	call	0x2188	; 0x2188 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    39c2:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    39c4:	8c 2f       	mov	r24, r28
    39c6:	0e 94 c0 06 	call	0xd80	; 0xd80 <matrix_get_row>
    39ca:	81 11       	cpse	r24, r1
    39cc:	05 c0       	rjmp	.+10     	; 0x39d8 <suspend_wakeup_condition+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    39ce:	cf 5f       	subi	r28, 0xFF	; 255
    39d0:	c0 31       	cpi	r28, 0x10	; 16
    39d2:	c1 f7       	brne	.-16     	; 0x39c4 <suspend_wakeup_condition+0x10>
    }
    return false;
}
    39d4:	cf 91       	pop	r28
    39d6:	08 95       	ret
        if (matrix_get_row(r)) return true;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	fc cf       	rjmp	.-8      	; 0x39d4 <suspend_wakeup_condition+0x20>

000039dc <__vector_13>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    39dc:	1f 92       	push	r1
    39de:	1f b6       	in	r1, 0x3f	; 63
    39e0:	1f 92       	push	r1
    39e2:	11 24       	eor	r1, r1
    39e4:	8f 93       	push	r24
    39e6:	9f 93       	push	r25
    39e8:	af 93       	push	r26
    39ea:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    39ec:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <wdt_timeout>
    39f0:	81 11       	cpse	r24, r1
    39f2:	13 c0       	rjmp	.+38     	; 0x3a1a <__vector_13+0x3e>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    39f4:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <timer_count>
    39f8:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <timer_count+0x1>
    39fc:	a0 91 54 03 	lds	r26, 0x0354	; 0x800354 <timer_count+0x2>
    3a00:	b0 91 55 03 	lds	r27, 0x0355	; 0x800355 <timer_count+0x3>
    3a04:	41 96       	adiw	r24, 0x11	; 17
    3a06:	a1 1d       	adc	r26, r1
    3a08:	b1 1d       	adc	r27, r1
    3a0a:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <timer_count>
    3a0e:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <timer_count+0x1>
    3a12:	a0 93 54 03 	sts	0x0354, r26	; 0x800354 <timer_count+0x2>
    3a16:	b0 93 55 03 	sts	0x0355, r27	; 0x800355 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3a1a:	bf 91       	pop	r27
    3a1c:	af 91       	pop	r26
    3a1e:	9f 91       	pop	r25
    3a20:	8f 91       	pop	r24
    3a22:	1f 90       	pop	r1
    3a24:	1f be       	out	0x3f, r1	; 63
    3a26:	1f 90       	pop	r1
    3a28:	18 95       	reti

00003a2a <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3a2a:	82 e0       	ldi	r24, 0x02	; 2
    3a2c:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3a2e:	93 e0       	ldi	r25, 0x03	; 3
    3a30:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3a32:	9a ef       	ldi	r25, 0xFA	; 250
    3a34:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    3a36:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__EEPROM_REGION_LENGTH__+0x7f006e>
#else
    TIMSK = (1<<OCIE0A);
#endif
}
    3a3a:	08 95       	ret

00003a3c <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3a3c:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3a3e:	f8 94       	cli
    t = timer_count;
    3a40:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <timer_count>
    3a44:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <timer_count+0x1>
    3a48:	a0 91 54 03 	lds	r26, 0x0354	; 0x800354 <timer_count+0x2>
    3a4c:	b0 91 55 03 	lds	r27, 0x0355	; 0x800355 <timer_count+0x3>
    SREG = sreg;
    3a50:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3a52:	08 95       	ret

00003a54 <timer_read32>:

inline
uint32_t timer_read32(void)
{
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	00 d0       	rcall	.+0      	; 0x3a5a <timer_read32+0x6>
    3a5a:	00 d0       	rcall	.+0      	; 0x3a5c <timer_read32+0x8>
    3a5c:	cd b7       	in	r28, 0x3d	; 61
    3a5e:	de b7       	in	r29, 0x3e	; 62
    uint32_t t;

    uint8_t sreg = SREG;
    3a60:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3a62:	f8 94       	cli
    t = timer_count;
    3a64:	20 91 52 03 	lds	r18, 0x0352	; 0x800352 <timer_count>
    3a68:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <timer_count+0x1>
    3a6c:	40 91 54 03 	lds	r20, 0x0354	; 0x800354 <timer_count+0x2>
    3a70:	50 91 55 03 	lds	r21, 0x0355	; 0x800355 <timer_count+0x3>
    3a74:	29 83       	std	Y+1, r18	; 0x01
    3a76:	3a 83       	std	Y+2, r19	; 0x02
    3a78:	4b 83       	std	Y+3, r20	; 0x03
    3a7a:	5c 83       	std	Y+4, r21	; 0x04
    SREG = sreg;
    3a7c:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    3a7e:	69 81       	ldd	r22, Y+1	; 0x01
    3a80:	7a 81       	ldd	r23, Y+2	; 0x02
    3a82:	8b 81       	ldd	r24, Y+3	; 0x03
    3a84:	9c 81       	ldd	r25, Y+4	; 0x04
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	08 95       	ret

00003a94 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3a94:	cf 92       	push	r12
    3a96:	df 92       	push	r13
    3a98:	ef 92       	push	r14
    3a9a:	ff 92       	push	r15
    3a9c:	9c 01       	movw	r18, r24
    uint32_t t;

    uint8_t sreg = SREG;
    3a9e:	4f b7       	in	r20, 0x3f	; 63
    cli();
    3aa0:	f8 94       	cli
    t = timer_count;
    3aa2:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <timer_count>
    3aa6:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <timer_count+0x1>
    3aaa:	a0 91 54 03 	lds	r26, 0x0354	; 0x800354 <timer_count+0x2>
    3aae:	b0 91 55 03 	lds	r27, 0x0355	; 0x800355 <timer_count+0x3>
    SREG = sreg;
    3ab2:	4f bf       	out	0x3f, r20	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3ab4:	6c 01       	movw	r12, r24
    3ab6:	7d 01       	movw	r14, r26
    3ab8:	ee 24       	eor	r14, r14
    3aba:	ff 24       	eor	r15, r15
    3abc:	a9 01       	movw	r20, r18
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	60 e0       	ldi	r22, 0x00	; 0
    3ac2:	c4 16       	cp	r12, r20
    3ac4:	d5 06       	cpc	r13, r21
    3ac6:	e6 06       	cpc	r14, r22
    3ac8:	f7 06       	cpc	r15, r23
    3aca:	38 f0       	brcs	.+14     	; 0x3ada <timer_elapsed+0x46>
    3acc:	82 1b       	sub	r24, r18
    3ace:	93 0b       	sbc	r25, r19
}
    3ad0:	ff 90       	pop	r15
    3ad2:	ef 90       	pop	r14
    3ad4:	df 90       	pop	r13
    3ad6:	cf 90       	pop	r12
    3ad8:	08 95       	ret
    return TIMER_DIFF_16((t & 0xFFFF), last);
    3ada:	01 97       	sbiw	r24, 0x01	; 1
    3adc:	f7 cf       	rjmp	.-18     	; 0x3acc <timer_elapsed+0x38>

00003ade <__vector_19>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3ade:	1f 92       	push	r1
    3ae0:	1f b6       	in	r1, 0x3f	; 63
    3ae2:	1f 92       	push	r1
    3ae4:	11 24       	eor	r1, r1
    3ae6:	8f 93       	push	r24
    3ae8:	9f 93       	push	r25
    3aea:	af 93       	push	r26
    3aec:	bf 93       	push	r27
    timer_count++;
    3aee:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <timer_count>
    3af2:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <timer_count+0x1>
    3af6:	a0 91 54 03 	lds	r26, 0x0354	; 0x800354 <timer_count+0x2>
    3afa:	b0 91 55 03 	lds	r27, 0x0355	; 0x800355 <timer_count+0x3>
    3afe:	01 96       	adiw	r24, 0x01	; 1
    3b00:	a1 1d       	adc	r26, r1
    3b02:	b1 1d       	adc	r27, r1
    3b04:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <timer_count>
    3b08:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <timer_count+0x1>
    3b0c:	a0 93 54 03 	sts	0x0354, r26	; 0x800354 <timer_count+0x2>
    3b10:	b0 93 55 03 	sts	0x0355, r27	; 0x800355 <timer_count+0x3>
}
    3b14:	bf 91       	pop	r27
    3b16:	af 91       	pop	r26
    3b18:	9f 91       	pop	r25
    3b1a:	8f 91       	pop	r24
    3b1c:	1f 90       	pop	r1
    3b1e:	1f be       	out	0x3f, r1	; 63
    3b20:	1f 90       	pop	r1
    3b22:	18 95       	reti

00003b24 <bootloader_jump>:
    USB_Disable();
    3b24:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <USB_Disable>
    cli();
    3b28:	f8 94       	cli
    *(volatile uint16_t *)0x0800 = 0x7777;
    3b2a:	87 e7       	ldi	r24, 0x77	; 119
    3b2c:	97 e7       	ldi	r25, 0x77	; 119
    3b2e:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x49b>
    3b32:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x49a>
    reset_key = BOOTLOADER_RESET_KEY;
    3b36:	87 e0       	ldi	r24, 0x07	; 7
    3b38:	90 eb       	ldi	r25, 0xB0	; 176
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <reset_key>
    3b40:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <reset_key+0x1>
    3b44:	a0 93 64 03 	sts	0x0364, r26	; 0x800364 <reset_key+0x2>
    3b48:	b0 93 65 03 	sts	0x0365, r27	; 0x800365 <reset_key+0x3>
		__asm__ __volatile__ (
    3b4c:	88 e1       	ldi	r24, 0x18	; 24
    3b4e:	9c e0       	ldi	r25, 0x0C	; 12
    3b50:	0f b6       	in	r0, 0x3f	; 63
    3b52:	f8 94       	cli
    3b54:	a8 95       	wdr
    3b56:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
    for (;;);
    3b60:	ff cf       	rjmp	.-2      	; 0x3b60 <bootloader_jump+0x3c>

00003b62 <keycode_to_action>:


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    3b62:	8d 3b       	cpi	r24, 0xBD	; 189
    3b64:	b0 f4       	brcc	.+44     	; 0x3b92 <keycode_to_action+0x30>
    3b66:	88 3a       	cpi	r24, 0xA8	; 168
    3b68:	20 f5       	brcc	.+72     	; 0x3bb2 <keycode_to_action+0x50>
    3b6a:	85 3a       	cpi	r24, 0xA5	; 165
    3b6c:	40 f4       	brcc	.+16     	; 0x3b7e <keycode_to_action+0x1c>
    3b6e:	84 30       	cpi	r24, 0x04	; 4
    3b70:	f0 f4       	brcc	.+60     	; 0x3bae <keycode_to_action+0x4c>
    3b72:	81 30       	cpi	r24, 0x01	; 1
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <keycode_to_action+0x16>
    3b76:	77 c0       	rjmp	.+238    	; 0x3c66 <keycode_to_action+0x104>
            break;
        case KC_BOOTLOADER:
            return (action_t)ACTION_COMMAND(COMMAND_BOOTLOADER, 0);
            break;
        default:
            return (action_t)ACTION_NO;
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
            break;
    }
    return (action_t)ACTION_NO;
}
    3b7c:	08 95       	ret
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3b7e:	21 e8       	ldi	r18, 0x81	; 129
    3b80:	85 3a       	cpi	r24, 0xA5	; 165
    3b82:	21 f0       	breq	.+8      	; 0x3b8c <keycode_to_action+0x2a>
    3b84:	23 e8       	ldi	r18, 0x83	; 131
    3b86:	86 3a       	cpi	r24, 0xA6	; 166
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <keycode_to_action+0x2a>
    3b8a:	22 e8       	ldi	r18, 0x82	; 130
    3b8c:	82 2f       	mov	r24, r18
    3b8e:	90 e4       	ldi	r25, 0x40	; 64
    3b90:	08 95       	ret
    switch (keycode) {
    3b92:	88 3e       	cpi	r24, 0xE8	; 232
    3b94:	38 f4       	brcc	.+14     	; 0x3ba4 <keycode_to_action+0x42>
    3b96:	80 3e       	cpi	r24, 0xE0	; 224
    3b98:	50 f4       	brcc	.+20     	; 0x3bae <keycode_to_action+0x4c>
    3b9a:	8f 3b       	cpi	r24, 0xBF	; 191
    3b9c:	69 f7       	brne	.-38     	; 0x3b78 <keycode_to_action+0x16>
            return (action_t)ACTION_COMMAND(COMMAND_BOOTLOADER, 0);
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	90 ee       	ldi	r25, 0xE0	; 224
    3ba2:	08 95       	ret
    switch (keycode) {
    3ba4:	80 3f       	cpi	r24, 0xF0	; 240
    3ba6:	40 f3       	brcs	.-48     	; 0x3b78 <keycode_to_action+0x16>
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
            return (action_t)ACTION_MOUSEKEY(keycode);
    3baa:	90 65       	ori	r25, 0x50	; 80
    3bac:	08 95       	ret
            return (action_t)ACTION_KEY(keycode);
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	08 95       	ret
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3bb2:	88 3a       	cpi	r24, 0xA8	; 168
    3bb4:	59 f1       	breq	.+86     	; 0x3c0c <keycode_to_action+0xaa>
    3bb6:	89 3a       	cpi	r24, 0xA9	; 169
    3bb8:	71 f1       	breq	.+92     	; 0x3c16 <keycode_to_action+0xb4>
    3bba:	8a 3a       	cpi	r24, 0xAA	; 170
    3bbc:	71 f1       	breq	.+92     	; 0x3c1a <keycode_to_action+0xb8>
    3bbe:	8b 3a       	cpi	r24, 0xAB	; 171
    3bc0:	71 f1       	breq	.+92     	; 0x3c1e <keycode_to_action+0xbc>
    3bc2:	8c 3a       	cpi	r24, 0xAC	; 172
    3bc4:	71 f1       	breq	.+92     	; 0x3c22 <keycode_to_action+0xc0>
    3bc6:	8d 3a       	cpi	r24, 0xAD	; 173
    3bc8:	71 f1       	breq	.+92     	; 0x3c26 <keycode_to_action+0xc4>
    3bca:	8e 3a       	cpi	r24, 0xAE	; 174
    3bcc:	71 f1       	breq	.+92     	; 0x3c2a <keycode_to_action+0xc8>
    3bce:	8f 3a       	cpi	r24, 0xAF	; 175
    3bd0:	71 f1       	breq	.+92     	; 0x3c2e <keycode_to_action+0xcc>
    3bd2:	81 3b       	cpi	r24, 0xB1	; 177
    3bd4:	71 f1       	breq	.+92     	; 0x3c32 <keycode_to_action+0xd0>
    3bd6:	80 3b       	cpi	r24, 0xB0	; 176
    3bd8:	71 f1       	breq	.+92     	; 0x3c36 <keycode_to_action+0xd4>
    3bda:	82 3b       	cpi	r24, 0xB2	; 178
    3bdc:	71 f1       	breq	.+92     	; 0x3c3a <keycode_to_action+0xd8>
    3bde:	83 3b       	cpi	r24, 0xB3	; 179
    3be0:	79 f1       	breq	.+94     	; 0x3c40 <keycode_to_action+0xde>
    3be2:	84 3b       	cpi	r24, 0xB4	; 180
    3be4:	79 f1       	breq	.+94     	; 0x3c44 <keycode_to_action+0xe2>
    3be6:	85 3b       	cpi	r24, 0xB5	; 181
    3be8:	79 f1       	breq	.+94     	; 0x3c48 <keycode_to_action+0xe6>
    3bea:	86 3b       	cpi	r24, 0xB6	; 182
    3bec:	79 f1       	breq	.+94     	; 0x3c4c <keycode_to_action+0xea>
    3bee:	87 3b       	cpi	r24, 0xB7	; 183
    3bf0:	81 f1       	breq	.+96     	; 0x3c52 <keycode_to_action+0xf0>
    3bf2:	88 3b       	cpi	r24, 0xB8	; 184
    3bf4:	81 f1       	breq	.+96     	; 0x3c56 <keycode_to_action+0xf4>
    3bf6:	89 3b       	cpi	r24, 0xB9	; 185
    3bf8:	81 f1       	breq	.+96     	; 0x3c5a <keycode_to_action+0xf8>
    3bfa:	8a 3b       	cpi	r24, 0xBA	; 186
    3bfc:	81 f1       	breq	.+96     	; 0x3c5e <keycode_to_action+0xfc>
    3bfe:	8b 3b       	cpi	r24, 0xBB	; 187
    3c00:	81 f1       	breq	.+96     	; 0x3c62 <keycode_to_action+0x100>
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	8c 3b       	cpi	r24, 0xBC	; 188
    3c06:	19 f4       	brne	.+6      	; 0x3c0e <keycode_to_action+0xac>
    3c08:	3a e2       	ldi	r19, 0x2A	; 42
    3c0a:	21 c0       	rjmp	.+66     	; 0x3c4e <keycode_to_action+0xec>
    3c0c:	32 ee       	ldi	r19, 0xE2	; 226
    3c0e:	24 e4       	ldi	r18, 0x44	; 68
    3c10:	83 2f       	mov	r24, r19
    3c12:	92 2f       	mov	r25, r18
    3c14:	08 95       	ret
    3c16:	39 ee       	ldi	r19, 0xE9	; 233
    3c18:	fa cf       	rjmp	.-12     	; 0x3c0e <keycode_to_action+0xac>
    3c1a:	3a ee       	ldi	r19, 0xEA	; 234
    3c1c:	f8 cf       	rjmp	.-16     	; 0x3c0e <keycode_to_action+0xac>
    3c1e:	35 eb       	ldi	r19, 0xB5	; 181
    3c20:	f6 cf       	rjmp	.-20     	; 0x3c0e <keycode_to_action+0xac>
    3c22:	36 eb       	ldi	r19, 0xB6	; 182
    3c24:	f4 cf       	rjmp	.-24     	; 0x3c0e <keycode_to_action+0xac>
    3c26:	33 eb       	ldi	r19, 0xB3	; 179
    3c28:	f2 cf       	rjmp	.-28     	; 0x3c0e <keycode_to_action+0xac>
    3c2a:	34 eb       	ldi	r19, 0xB4	; 180
    3c2c:	f0 cf       	rjmp	.-32     	; 0x3c0e <keycode_to_action+0xac>
    3c2e:	37 eb       	ldi	r19, 0xB7	; 183
    3c30:	ee cf       	rjmp	.-36     	; 0x3c0e <keycode_to_action+0xac>
    3c32:	3c ec       	ldi	r19, 0xCC	; 204
    3c34:	ec cf       	rjmp	.-40     	; 0x3c0e <keycode_to_action+0xac>
    3c36:	3d ec       	ldi	r19, 0xCD	; 205
    3c38:	ea cf       	rjmp	.-44     	; 0x3c0e <keycode_to_action+0xac>
    3c3a:	33 e8       	ldi	r19, 0x83	; 131
    3c3c:	25 e4       	ldi	r18, 0x45	; 69
    3c3e:	e8 cf       	rjmp	.-48     	; 0x3c10 <keycode_to_action+0xae>
    3c40:	3a e8       	ldi	r19, 0x8A	; 138
    3c42:	fc cf       	rjmp	.-8      	; 0x3c3c <keycode_to_action+0xda>
    3c44:	32 e9       	ldi	r19, 0x92	; 146
    3c46:	fa cf       	rjmp	.-12     	; 0x3c3c <keycode_to_action+0xda>
    3c48:	34 e9       	ldi	r19, 0x94	; 148
    3c4a:	f8 cf       	rjmp	.-16     	; 0x3c3c <keycode_to_action+0xda>
    3c4c:	31 e2       	ldi	r19, 0x21	; 33
    3c4e:	26 e4       	ldi	r18, 0x46	; 70
    3c50:	df cf       	rjmp	.-66     	; 0x3c10 <keycode_to_action+0xae>
    3c52:	33 e2       	ldi	r19, 0x23	; 35
    3c54:	fc cf       	rjmp	.-8      	; 0x3c4e <keycode_to_action+0xec>
    3c56:	34 e2       	ldi	r19, 0x24	; 36
    3c58:	fa cf       	rjmp	.-12     	; 0x3c4e <keycode_to_action+0xec>
    3c5a:	35 e2       	ldi	r19, 0x25	; 37
    3c5c:	f8 cf       	rjmp	.-16     	; 0x3c4e <keycode_to_action+0xec>
    3c5e:	36 e2       	ldi	r19, 0x26	; 38
    3c60:	f6 cf       	rjmp	.-20     	; 0x3c4e <keycode_to_action+0xec>
    3c62:	37 e2       	ldi	r19, 0x27	; 39
    3c64:	f4 cf       	rjmp	.-24     	; 0x3c4e <keycode_to_action+0xec>
            return (action_t)ACTION_TRANSPARENT;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	08 95       	ret

00003c6c <action_get_macro>:
}
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	08 95       	ret

00003c72 <action_function>:
}
    3c72:	08 95       	ret

00003c74 <keymap_get_keycode>:
extern const uint8_t fn_keycode[];

__attribute__ ((weak))
uint8_t keymap_get_keycode(uint8_t layer, uint8_t row, uint8_t col)
{
    return pgm_read_byte(&keymaps[(layer)][(row)][(col)]);
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	24 e0       	ldi	r18, 0x04	; 4
    3c78:	88 0f       	add	r24, r24
    3c7a:	99 1f       	adc	r25, r25
    3c7c:	2a 95       	dec	r18
    3c7e:	e1 f7       	brne	.-8      	; 0x3c78 <keymap_get_keycode+0x4>
    3c80:	86 0f       	add	r24, r22
    3c82:	91 1d       	adc	r25, r1
    3c84:	33 e0       	ldi	r19, 0x03	; 3
    3c86:	88 0f       	add	r24, r24
    3c88:	99 1f       	adc	r25, r25
    3c8a:	3a 95       	dec	r19
    3c8c:	e1 f7       	brne	.-8      	; 0x3c86 <keymap_get_keycode+0x12>
    3c8e:	84 0f       	add	r24, r20
    3c90:	91 1d       	adc	r25, r1
    3c92:	8c 58       	subi	r24, 0x8C	; 140
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	fc 01       	movw	r30, r24
    3c98:	84 91       	lpm	r24, Z
}
    3c9a:	08 95       	ret

00003c9c <keymap_fn_layer>:

__attribute__ ((weak))
uint8_t keymap_fn_layer(uint8_t index)
{
    return pgm_read_byte(&fn_layer[index]);
    3c9c:	e8 2f       	mov	r30, r24
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	e4 50       	subi	r30, 0x04	; 4
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	84 91       	lpm	r24, Z
}
    3ca6:	08 95       	ret

00003ca8 <keymap_fn_keycode>:

__attribute__ ((weak))
uint8_t keymap_fn_keycode(uint8_t index)
{
    return pgm_read_byte(&fn_keycode[index]);
    3ca8:	e8 2f       	mov	r30, r24
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	ec 50       	subi	r30, 0x0C	; 12
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	84 91       	lpm	r24, Z
}
    3cb2:	08 95       	ret

00003cb4 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    3cb4:	46 2f       	mov	r20, r22
    3cb6:	67 2f       	mov	r22, r23
    return keymap_get_keycode(layer, key.row, key.col);
    3cb8:	0c 94 3a 1e 	jmp	0x3c74	; 0x3c74 <keymap_get_keycode>

00003cbc <keymap_fn_to_action>:


/* Legacy keymap support */
__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	d8 2f       	mov	r29, r24
    switch (keycode) {
    3cc2:	28 2f       	mov	r18, r24
    3cc4:	20 5c       	subi	r18, 0xC0	; 192
    3cc6:	33 0b       	sbc	r19, r19
    3cc8:	20 32       	cpi	r18, 0x20	; 32
    3cca:	31 05       	cpc	r19, r1
    3ccc:	c8 f4       	brcc	.+50     	; 0x3d00 <keymap_fn_to_action+0x44>
        case KC_FN0 ... KC_FN31:
            {
                uint8_t layer = keymap_fn_layer(FN_INDEX(keycode));
    3cce:	d0 5c       	subi	r29, 0xC0	; 192
    3cd0:	8d 2f       	mov	r24, r29
    3cd2:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <keymap_fn_layer>
    3cd6:	c8 2f       	mov	r28, r24
                uint8_t key = keymap_fn_keycode(FN_INDEX(keycode));
    3cd8:	8d 2f       	mov	r24, r29
    3cda:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <keymap_fn_keycode>
                if (key) {
    3cde:	2c 2f       	mov	r18, r28
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	88 23       	and	r24, r24
    3ce4:	41 f0       	breq	.+16     	; 0x3cf6 <keymap_fn_to_action+0x3a>
                    return (action_t)ACTION_LAYER_TAP_KEY(layer, key);
    3ce6:	48 2f       	mov	r20, r24
    3ce8:	5c 2f       	mov	r21, r28
    3cea:	9a 01       	movw	r18, r20
    3cec:	30 6a       	ori	r19, 0xA0	; 160
                } else {
                    return (action_t)ACTION_LAYER_MOMENTARY(layer);
    3cee:	c9 01       	movw	r24, r18
            }
            return (action_t)ACTION_NO;
        default:
            return (action_t)ACTION_NO;
    }
}
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	08 95       	ret
                    return (action_t)ACTION_LAYER_MOMENTARY(layer);
    3cf6:	32 2f       	mov	r19, r18
    3cf8:	22 27       	eor	r18, r18
    3cfa:	21 6f       	ori	r18, 0xF1	; 241
    3cfc:	30 6a       	ori	r19, 0xA0	; 160
    3cfe:	f7 cf       	rjmp	.-18     	; 0x3cee <keymap_fn_to_action+0x32>
            return (action_t)ACTION_NO;
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	f5 cf       	rjmp	.-22     	; 0x3cf0 <keymap_fn_to_action+0x34>

00003d06 <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d06:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <keymap_key_to_keycode>
    switch (keycode) {
    3d0a:	80 3e       	cpi	r24, 0xE0	; 224
    3d0c:	d0 f4       	brcc	.+52     	; 0x3d42 <action_for_key+0x3c>
    3d0e:	80 3c       	cpi	r24, 0xC0	; 192
    3d10:	88 f5       	brcc	.+98     	; 0x3d74 <action_for_key+0x6e>
    3d12:	81 33       	cpi	r24, 0x31	; 49
    3d14:	09 f4       	brne	.+2      	; 0x3d18 <action_for_key+0x12>
    3d16:	52 c0       	rjmp	.+164    	; 0x3dbc <action_for_key+0xb6>
    3d18:	40 f4       	brcc	.+16     	; 0x3d2a <action_for_key+0x24>
    3d1a:	89 32       	cpi	r24, 0x29	; 41
    3d1c:	09 f4       	brne	.+2      	; 0x3d20 <action_for_key+0x1a>
    3d1e:	48 c0       	rjmp	.+144    	; 0x3db0 <action_for_key+0xaa>
    3d20:	8a 32       	cpi	r24, 0x2A	; 42
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <action_for_key+0x20>
    3d24:	51 c0       	rjmp	.+162    	; 0x3dc8 <action_for_key+0xc2>
            return keycode_to_action(keycode);
    3d26:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <keycode_to_action>
    switch (keycode) {
    3d2a:	89 33       	cpi	r24, 0x39	; 57
    3d2c:	29 f1       	breq	.+74     	; 0x3d78 <action_for_key+0x72>
    3d2e:	82 38       	cpi	r24, 0x82	; 130
    3d30:	19 f1       	breq	.+70     	; 0x3d78 <action_for_key+0x72>
    3d32:	85 33       	cpi	r24, 0x35	; 53
    3d34:	c1 f7       	brne	.-16     	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3d36:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3d3a:	85 ff       	sbrs	r24, 5
    3d3c:	3d c0       	rjmp	.+122    	; 0x3db8 <action_for_key+0xb2>
                return keycode_to_action(KC_ESC);
    3d3e:	89 e2       	ldi	r24, 0x29	; 41
    3d40:	f2 cf       	rjmp	.-28     	; 0x3d26 <action_for_key+0x20>
    switch (keycode) {
    3d42:	83 3e       	cpi	r24, 0xE3	; 227
    3d44:	39 f1       	breq	.+78     	; 0x3d94 <action_for_key+0x8e>
    3d46:	60 f4       	brcc	.+24     	; 0x3d60 <action_for_key+0x5a>
    3d48:	80 3e       	cpi	r24, 0xE0	; 224
    3d4a:	e1 f0       	breq	.+56     	; 0x3d84 <action_for_key+0x7e>
    3d4c:	82 3e       	cpi	r24, 0xE2	; 226
    3d4e:	59 f7       	brne	.-42     	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3d50:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3d54:	82 ff       	sbrs	r24, 2
    3d56:	22 c0       	rjmp	.+68     	; 0x3d9c <action_for_key+0x96>
                if (keymap_config.no_gui) {
    3d58:	84 ff       	sbrs	r24, 4
    3d5a:	1a c0       	rjmp	.+52     	; 0x3d90 <action_for_key+0x8a>
                    return keycode_to_action(KC_NO);
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	e3 cf       	rjmp	.-58     	; 0x3d26 <action_for_key+0x20>
    switch (keycode) {
    3d60:	86 3e       	cpi	r24, 0xE6	; 230
    3d62:	f1 f0       	breq	.+60     	; 0x3da0 <action_for_key+0x9a>
    3d64:	87 3e       	cpi	r24, 0xE7	; 231
    3d66:	f9 f6       	brne	.-66     	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3d68:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3d6c:	83 ff       	sbrs	r24, 3
    3d6e:	1c c0       	rjmp	.+56     	; 0x3da8 <action_for_key+0xa2>
            return keycode_to_action(KC_RALT);
    3d70:	86 ee       	ldi	r24, 0xE6	; 230
    3d72:	d9 cf       	rjmp	.-78     	; 0x3d26 <action_for_key+0x20>
            return keymap_fn_to_action(keycode);
    3d74:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <keymap_fn_to_action>
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3d78:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3d7c:	93 70       	andi	r25, 0x03	; 3
    3d7e:	99 f2       	breq	.-90     	; 0x3d26 <action_for_key+0x20>
                return keycode_to_action(KC_LCTL);
    3d80:	80 ee       	ldi	r24, 0xE0	; 224
    3d82:	d1 cf       	rjmp	.-94     	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_control_capslock) {
    3d84:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3d88:	80 ff       	sbrs	r24, 0
    3d8a:	fa cf       	rjmp	.-12     	; 0x3d80 <action_for_key+0x7a>
                return keycode_to_action(KC_CAPSLOCK);
    3d8c:	89 e3       	ldi	r24, 0x39	; 57
    3d8e:	cb cf       	rjmp	.-106    	; 0x3d26 <action_for_key+0x20>
                return keycode_to_action(KC_LGUI);
    3d90:	83 ee       	ldi	r24, 0xE3	; 227
    3d92:	c9 cf       	rjmp	.-110    	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_lalt_lgui) {
    3d94:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3d98:	82 ff       	sbrs	r24, 2
    3d9a:	de cf       	rjmp	.-68     	; 0x3d58 <action_for_key+0x52>
            return keycode_to_action(KC_LALT);
    3d9c:	82 ee       	ldi	r24, 0xE2	; 226
    3d9e:	c3 cf       	rjmp	.-122    	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_ralt_rgui) {
    3da0:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3da4:	83 ff       	sbrs	r24, 3
    3da6:	e4 cf       	rjmp	.-56     	; 0x3d70 <action_for_key+0x6a>
            if (keymap_config.no_gui) {
    3da8:	84 fd       	sbrc	r24, 4
    3daa:	d8 cf       	rjmp	.-80     	; 0x3d5c <action_for_key+0x56>
                return keycode_to_action(KC_RGUI);
    3dac:	87 ee       	ldi	r24, 0xE7	; 231
    3dae:	bb cf       	rjmp	.-138    	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_grave_esc) {
    3db0:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3db4:	85 ff       	sbrs	r24, 5
    3db6:	c3 cf       	rjmp	.-122    	; 0x3d3e <action_for_key+0x38>
            return keycode_to_action(KC_GRAVE);
    3db8:	85 e3       	ldi	r24, 0x35	; 53
    3dba:	b5 cf       	rjmp	.-150    	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3dbc:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3dc0:	86 ff       	sbrs	r24, 6
    3dc2:	06 c0       	rjmp	.+12     	; 0x3dd0 <action_for_key+0xca>
                return keycode_to_action(KC_BSPACE);
    3dc4:	8a e2       	ldi	r24, 0x2A	; 42
    3dc6:	af cf       	rjmp	.-162    	; 0x3d26 <action_for_key+0x20>
            if (keymap_config.swap_backslash_backspace) {
    3dc8:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    3dcc:	86 ff       	sbrs	r24, 6
    3dce:	fa cf       	rjmp	.-12     	; 0x3dc4 <action_for_key+0xbe>
            return keycode_to_action(KC_BSLASH);
    3dd0:	81 e3       	ldi	r24, 0x31	; 49
    3dd2:	a9 cf       	rjmp	.-174    	; 0x3d26 <action_for_key+0x20>

00003dd4 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3dd4:	cf 92       	push	r12
    3dd6:	df 92       	push	r13
    3dd8:	ef 92       	push	r14
    3dda:	ff 92       	push	r15
    3ddc:	0f 93       	push	r16
    3dde:	1f 93       	push	r17
    3de0:	cf 93       	push	r28
    3de2:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3de4:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
    3de6:	8c 2f       	mov	r24, r28
    3de8:	0e 94 c0 06 	call	0xd80	; 0xd80 <matrix_get_row>
    3dec:	10 e0       	ldi	r17, 0x00	; 0
    3dee:	00 e0       	ldi	r16, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3df0:	c8 2e       	mov	r12, r24
    3df2:	d1 2c       	mov	r13, r1
    3df4:	c6 01       	movw	r24, r12
    3df6:	00 2e       	mov	r0, r16
    3df8:	02 c0       	rjmp	.+4      	; 0x3dfe <scan_key+0x2a>
    3dfa:	95 95       	asr	r25
    3dfc:	87 95       	ror	r24
    3dfe:	0a 94       	dec	r0
    3e00:	e2 f7       	brpl	.-8      	; 0x3dfa <scan_key+0x26>
    3e02:	80 ff       	sbrs	r24, 0
    3e04:	1c c0       	rjmp	.+56     	; 0x3e3e <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3e06:	60 2f       	mov	r22, r16
    3e08:	7c 2f       	mov	r23, r28
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <action_for_key>
    3e10:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3e12:	8e 15       	cp	r24, r14
    3e14:	9f 05       	cpc	r25, r15
    3e16:	51 f0       	breq	.+20     	; 0x3e2c <scan_key+0x58>
    3e18:	83 2f       	mov	r24, r19
    3e1a:	80 7e       	andi	r24, 0xE0	; 224
    3e1c:	93 2f       	mov	r25, r19
    3e1e:	90 7c       	andi	r25, 0xC0	; 192
    3e20:	11 f0       	breq	.+4      	; 0x3e26 <scan_key+0x52>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3e22:	80 3a       	cpi	r24, 0xA0	; 160
    3e24:	61 f4       	brne	.+24     	; 0x3e3e <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3e26:	2e 15       	cp	r18, r14
    3e28:	1f 04       	cpc	r1, r15
    3e2a:	49 f4       	brne	.+18     	; 0x3e3e <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	df 90       	pop	r13
    3e3a:	cf 90       	pop	r12
    3e3c:	08 95       	ret
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3e3e:	0f 5f       	subi	r16, 0xFF	; 255
    3e40:	1f 4f       	sbci	r17, 0xFF	; 255
    3e42:	08 30       	cpi	r16, 0x08	; 8
    3e44:	11 05       	cpc	r17, r1
    3e46:	b1 f6       	brne	.-84     	; 0x3df4 <scan_key+0x20>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e48:	cf 5f       	subi	r28, 0xFF	; 255
    3e4a:	c0 31       	cpi	r28, 0x10	; 16
    3e4c:	61 f6       	brne	.-104    	; 0x3de6 <scan_key+0x12>
    return false;
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	ee cf       	rjmp	.-36     	; 0x3e2e <scan_key+0x5a>

00003e52 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
    3e56:	d8 2f       	mov	r29, r24
    3e58:	c9 2f       	mov	r28, r25
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3e5a:	8c e2       	ldi	r24, 0x2C	; 44
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <scan_key>
    3e62:	88 23       	and	r24, r24
    3e64:	31 f0       	breq	.+12     	; 0x3e72 <bootmagic_scan_key+0x20>

    return scan_key(code);
    3e66:	8d 2f       	mov	r24, r29
    3e68:	9c 2f       	mov	r25, r28
}
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    return scan_key(code);
    3e6e:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <scan_key>
}
    3e72:	80 e0       	ldi	r24, 0x00	; 0
    3e74:	df 91       	pop	r29
    3e76:	cf 91       	pop	r28
    3e78:	08 95       	ret

00003e7a <bootmagic>:
{
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <bootmagic+0x6>
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <bootmagic+0x8>
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    if (!eeconfig_is_enabled()) {
    3e86:	0e 94 ae 20 	call	0x415c	; 0x415c <eeconfig_is_enabled>
    3e8a:	81 11       	cpse	r24, r1
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <bootmagic+0x18>
        eeconfig_init();
    3e8e:	0e 94 94 20 	call	0x4128	; 0x4128 <eeconfig_init>
    print("bootmagic scan: ... ");
    3e92:	8f e5       	ldi	r24, 0x5F	; 95
    3e94:	93 e0       	ldi	r25, 0x03	; 3
    3e96:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    while (scan--) { matrix_scan(); wait_ms(10); }
    3e9a:	25 e6       	ldi	r18, 0x65	; 101
    3e9c:	29 83       	std	Y+1, r18	; 0x01
    3e9e:	99 81       	ldd	r25, Y+1	; 0x01
    3ea0:	91 50       	subi	r25, 0x01	; 1
    3ea2:	99 83       	std	Y+1, r25	; 0x01
    3ea4:	91 11       	cpse	r25, r1
    3ea6:	0a c1       	rjmp	.+532    	; 0x40bc <bootmagic+0x242>
    print("done.\n");
    3ea8:	88 e5       	ldi	r24, 0x58	; 88
    3eaa:	93 e0       	ldi	r25, 0x03	; 3
    3eac:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3eb0:	89 e2       	ldi	r24, 0x29	; 41
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3eb8:	81 11       	cpse	r24, r1
    3eba:	2f c1       	rjmp	.+606    	; 0x411a <bootmagic+0x2a0>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3ebc:	8a e2       	ldi	r24, 0x2A	; 42
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3ec4:	81 11       	cpse	r24, r1
        eeconfig_init();
    3ec6:	0e 94 94 20 	call	0x4128	; 0x4128 <eeconfig_init>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3eca:	85 e0       	ldi	r24, 0x05	; 5
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3ed2:	81 11       	cpse	r24, r1
        bootloader_jump();
    3ed4:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <bootloader_jump>
    hook_bootmagic();
    3ed8:	0e 94 ae 1c 	call	0x395c	; 0x395c <hook_bootmagic>
    debug_config.raw = eeconfig_read_debug();
    3edc:	0e 94 b9 20 	call	0x4172	; 0x4172 <eeconfig_read_debug>
    3ee0:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <debug_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3ee4:	87 e0       	ldi	r24, 0x07	; 7
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3eec:	88 23       	and	r24, r24
    3eee:	79 f0       	breq	.+30     	; 0x3f0e <bootmagic+0x94>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3ef0:	8b e1       	ldi	r24, 0x1B	; 27
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3ef8:	88 23       	and	r24, r24
    3efa:	09 f4       	brne	.+2      	; 0x3efe <bootmagic+0x84>
    3efc:	e8 c0       	rjmp	.+464    	; 0x40ce <bootmagic+0x254>
            debug_config.matrix = !debug_config.matrix;
    3efe:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <debug_config>
    3f02:	89 2f       	mov	r24, r25
    3f04:	8d 7f       	andi	r24, 0xFD	; 253
    3f06:	91 ff       	sbrs	r25, 1
    3f08:	82 60       	ori	r24, 0x02	; 2
            debug_config.enable = !debug_config.enable;
    3f0a:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <debug_config>
    eeconfig_write_debug(debug_config.raw);
    3f0e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    3f12:	0e 94 bd 20 	call	0x417a	; 0x417a <eeconfig_write_debug>
    keymap_config.raw = eeconfig_read_keymap();
    3f16:	0e 94 cb 20 	call	0x4196	; 0x4196 <eeconfig_read_keymap>
    3f1a:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3f1e:	80 ee       	ldi	r24, 0xE0	; 224
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3f26:	88 23       	and	r24, r24
    3f28:	41 f0       	breq	.+16     	; 0x3f3a <bootmagic+0xc0>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3f2a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3f2e:	89 2f       	mov	r24, r25
    3f30:	8e 7f       	andi	r24, 0xFE	; 254
    3f32:	90 ff       	sbrs	r25, 0
    3f34:	81 60       	ori	r24, 0x01	; 1
    3f36:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3f3a:	89 e3       	ldi	r24, 0x39	; 57
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3f42:	88 23       	and	r24, r24
    3f44:	41 f0       	breq	.+16     	; 0x3f56 <bootmagic+0xdc>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3f46:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3f4a:	89 2f       	mov	r24, r25
    3f4c:	8d 7f       	andi	r24, 0xFD	; 253
    3f4e:	91 ff       	sbrs	r25, 1
    3f50:	82 60       	ori	r24, 0x02	; 2
    3f52:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3f56:	82 ee       	ldi	r24, 0xE2	; 226
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3f5e:	88 23       	and	r24, r24
    3f60:	41 f0       	breq	.+16     	; 0x3f72 <bootmagic+0xf8>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3f62:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3f66:	89 2f       	mov	r24, r25
    3f68:	8b 7f       	andi	r24, 0xFB	; 251
    3f6a:	92 ff       	sbrs	r25, 2
    3f6c:	84 60       	ori	r24, 0x04	; 4
    3f6e:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3f72:	86 ee       	ldi	r24, 0xE6	; 230
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3f7a:	88 23       	and	r24, r24
    3f7c:	41 f0       	breq	.+16     	; 0x3f8e <bootmagic+0x114>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3f7e:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3f82:	89 2f       	mov	r24, r25
    3f84:	87 7f       	andi	r24, 0xF7	; 247
    3f86:	93 ff       	sbrs	r25, 3
    3f88:	88 60       	ori	r24, 0x08	; 8
    3f8a:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3f8e:	83 ee       	ldi	r24, 0xE3	; 227
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3f96:	88 23       	and	r24, r24
    3f98:	41 f0       	breq	.+16     	; 0x3faa <bootmagic+0x130>
        keymap_config.no_gui = !keymap_config.no_gui;
    3f9a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3f9e:	89 2f       	mov	r24, r25
    3fa0:	8f 7e       	andi	r24, 0xEF	; 239
    3fa2:	94 ff       	sbrs	r25, 4
    3fa4:	80 61       	ori	r24, 0x10	; 16
    3fa6:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3faa:	85 e3       	ldi	r24, 0x35	; 53
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3fb2:	88 23       	and	r24, r24
    3fb4:	41 f0       	breq	.+16     	; 0x3fc6 <bootmagic+0x14c>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3fb6:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3fba:	89 2f       	mov	r24, r25
    3fbc:	8f 7d       	andi	r24, 0xDF	; 223
    3fbe:	95 ff       	sbrs	r25, 5
    3fc0:	80 62       	ori	r24, 0x20	; 32
    3fc2:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3fc6:	81 e3       	ldi	r24, 0x31	; 49
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3fce:	88 23       	and	r24, r24
    3fd0:	41 f0       	breq	.+16     	; 0x3fe2 <bootmagic+0x168>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3fd2:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3fd6:	89 2f       	mov	r24, r25
    3fd8:	8f 7b       	andi	r24, 0xBF	; 191
    3fda:	96 ff       	sbrs	r25, 6
    3fdc:	80 64       	ori	r24, 0x40	; 64
    3fde:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    3fe2:	81 e1       	ldi	r24, 0x11	; 17
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    3fea:	88 23       	and	r24, r24
    3fec:	41 f0       	breq	.+16     	; 0x3ffe <bootmagic+0x184>
        keymap_config.nkro = !keymap_config.nkro;
    3fee:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <keymap_config>
    3ff2:	89 2f       	mov	r24, r25
    3ff4:	97 fb       	bst	r25, 7
    3ff6:	87 f9       	bld	r24, 7
    3ff8:	80 58       	subi	r24, 0x80	; 128
    3ffa:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <keymap_config>
    eeconfig_write_keymap(keymap_config.raw);
    3ffe:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <keymap_config>
    4002:	0e 94 cf 20 	call	0x419e	; 0x419e <eeconfig_write_keymap>
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4006:	87 e2       	ldi	r24, 0x27	; 39
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    400e:	89 83       	std	Y+1, r24	; 0x01
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4010:	8e e1       	ldi	r24, 0x1E	; 30
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    4018:	88 23       	and	r24, r24
    401a:	19 f0       	breq	.+6      	; 0x4022 <bootmagic+0x1a8>
    401c:	a9 81       	ldd	r26, Y+1	; 0x01
    401e:	a2 60       	ori	r26, 0x02	; 2
    4020:	a9 83       	std	Y+1, r26	; 0x01
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4022:	8f e1       	ldi	r24, 0x1F	; 31
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    402a:	88 23       	and	r24, r24
    402c:	19 f0       	breq	.+6      	; 0x4034 <bootmagic+0x1ba>
    402e:	b9 81       	ldd	r27, Y+1	; 0x01
    4030:	b4 60       	ori	r27, 0x04	; 4
    4032:	b9 83       	std	Y+1, r27	; 0x01
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4034:	80 e2       	ldi	r24, 0x20	; 32
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    403c:	88 23       	and	r24, r24
    403e:	19 f0       	breq	.+6      	; 0x4046 <bootmagic+0x1cc>
    4040:	29 81       	ldd	r18, Y+1	; 0x01
    4042:	28 60       	ori	r18, 0x08	; 8
    4044:	29 83       	std	Y+1, r18	; 0x01
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4046:	81 e2       	ldi	r24, 0x21	; 33
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    404e:	88 23       	and	r24, r24
    4050:	19 f0       	breq	.+6      	; 0x4058 <bootmagic+0x1de>
    4052:	39 81       	ldd	r19, Y+1	; 0x01
    4054:	30 61       	ori	r19, 0x10	; 16
    4056:	39 83       	std	Y+1, r19	; 0x01
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4058:	82 e2       	ldi	r24, 0x22	; 34
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    4060:	88 23       	and	r24, r24
    4062:	19 f0       	breq	.+6      	; 0x406a <bootmagic+0x1f0>
    4064:	49 81       	ldd	r20, Y+1	; 0x01
    4066:	40 62       	ori	r20, 0x20	; 32
    4068:	49 83       	std	Y+1, r20	; 0x01
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    406a:	83 e2       	ldi	r24, 0x23	; 35
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    4072:	88 23       	and	r24, r24
    4074:	19 f0       	breq	.+6      	; 0x407c <bootmagic+0x202>
    4076:	59 81       	ldd	r21, Y+1	; 0x01
    4078:	50 64       	ori	r21, 0x40	; 64
    407a:	59 83       	std	Y+1, r21	; 0x01
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    407c:	84 e2       	ldi	r24, 0x24	; 36
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    4084:	88 23       	and	r24, r24
    4086:	09 f4       	brne	.+2      	; 0x408a <bootmagic+0x210>
    4088:	41 c0       	rjmp	.+130    	; 0x410c <bootmagic+0x292>
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	80 68       	ori	r24, 0x80	; 128
    408e:	89 83       	std	Y+1, r24	; 0x01
        eeconfig_write_default_layer(default_layer);
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	0e 94 c6 20 	call	0x418c	; 0x418c <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4096:	39 81       	ldd	r19, Y+1	; 0x01
    4098:	23 2f       	mov	r18, r19
        default_layer_set((uint32_t)default_layer);
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	50 e0       	ldi	r21, 0x00	; 0
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	29 83       	std	Y+1, r18	; 0x01
    40a2:	3a 83       	std	Y+2, r19	; 0x02
    40a4:	4b 83       	std	Y+3, r20	; 0x03
    40a6:	5c 83       	std	Y+4, r21	; 0x04
    40a8:	ca 01       	movw	r24, r20
    40aa:	b9 01       	movw	r22, r18
}
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	df 91       	pop	r29
    40b6:	cf 91       	pop	r28
        default_layer_set((uint32_t)default_layer);
    40b8:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <default_layer_set>
    while (scan--) { matrix_scan(); wait_ms(10); }
    40bc:	0e 94 73 06 	call	0xce6	; 0xce6 <matrix_scan>
	__builtin_avr_delay_cycles(__ticks_dc);
    40c0:	8f e3       	ldi	r24, 0x3F	; 63
    40c2:	9c e9       	ldi	r25, 0x9C	; 156
    40c4:	01 97       	sbiw	r24, 0x01	; 1
    40c6:	f1 f7       	brne	.-4      	; 0x40c4 <bootmagic+0x24a>
    40c8:	00 c0       	rjmp	.+0      	; 0x40ca <bootmagic+0x250>
    40ca:	00 00       	nop
}
    40cc:	e8 ce       	rjmp	.-560    	; 0x3e9e <bootmagic+0x24>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    40ce:	8e e0       	ldi	r24, 0x0E	; 14
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    40d6:	88 23       	and	r24, r24
    40d8:	39 f0       	breq	.+14     	; 0x40e8 <bootmagic+0x26e>
            debug_config.keyboard = !debug_config.keyboard;
    40da:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <debug_config>
    40de:	89 2f       	mov	r24, r25
    40e0:	8b 7f       	andi	r24, 0xFB	; 251
    40e2:	92 ff       	sbrs	r25, 2
    40e4:	84 60       	ori	r24, 0x04	; 4
    40e6:	11 cf       	rjmp	.-478    	; 0x3f0a <bootmagic+0x90>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    40e8:	80 e1       	ldi	r24, 0x10	; 16
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <bootmagic_scan_key>
    40f0:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <debug_config>
    40f4:	88 23       	and	r24, r24
    40f6:	29 f0       	breq	.+10     	; 0x4102 <bootmagic+0x288>
            debug_config.mouse = !debug_config.mouse;
    40f8:	89 2f       	mov	r24, r25
    40fa:	87 7f       	andi	r24, 0xF7	; 247
    40fc:	93 ff       	sbrs	r25, 3
    40fe:	88 60       	ori	r24, 0x08	; 8
    4100:	04 cf       	rjmp	.-504    	; 0x3f0a <bootmagic+0x90>
            debug_config.enable = !debug_config.enable;
    4102:	89 2f       	mov	r24, r25
    4104:	8e 7f       	andi	r24, 0xFE	; 254
    4106:	90 ff       	sbrs	r25, 0
    4108:	81 60       	ori	r24, 0x01	; 1
    410a:	ff ce       	rjmp	.-514    	; 0x3f0a <bootmagic+0x90>
    if (default_layer) {
    410c:	99 81       	ldd	r25, Y+1	; 0x01
    410e:	91 11       	cpse	r25, r1
    4110:	bf cf       	rjmp	.-130    	; 0x4090 <bootmagic+0x216>
        default_layer = eeconfig_read_default_layer();
    4112:	0e 94 c2 20 	call	0x4184	; 0x4184 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4116:	28 2f       	mov	r18, r24
    4118:	c0 cf       	rjmp	.-128    	; 0x409a <bootmagic+0x220>
}
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	08 95       	ret

00004128 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4128:	6d ee       	ldi	r22, 0xED	; 237
    412a:	7e ef       	ldi	r23, 0xFE	; 254
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	80 e0       	ldi	r24, 0x00	; 0
    4130:	0e 94 33 2a 	call	0x5466	; 0x5466 <eeprom_write_word>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4134:	60 e0       	ldi	r22, 0x00	; 0
    4136:	82 e0       	ldi	r24, 0x02	; 2
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 94 25 2a 	call	0x544a	; 0x544a <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	83 e0       	ldi	r24, 0x03	; 3
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	0e 94 25 2a 	call	0x544a	; 0x544a <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4148:	60 e0       	ldi	r22, 0x00	; 0
    414a:	84 e0       	ldi	r24, 0x04	; 4
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 25 2a 	call	0x544a	; 0x544a <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4152:	60 e0       	ldi	r22, 0x00	; 0
    4154:	85 e0       	ldi	r24, 0x05	; 5
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	0c 94 25 2a 	jmp	0x544a	; 0x544a <eeprom_write_byte>

0000415c <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	0e 94 1f 2a 	call	0x543e	; 0x543e <eeprom_read_word>
    4164:	9c 01       	movw	r18, r24
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	2d 3e       	cpi	r18, 0xED	; 237
    416a:	3e 4f       	sbci	r19, 0xFE	; 254
    416c:	09 f0       	breq	.+2      	; 0x4170 <eeconfig_is_enabled+0x14>
    416e:	80 e0       	ldi	r24, 0x00	; 0
}
    4170:	08 95       	ret

00004172 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4172:	82 e0       	ldi	r24, 0x02	; 2
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	0c 94 17 2a 	jmp	0x542e	; 0x542e <eeprom_read_byte>

0000417a <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    417a:	68 2f       	mov	r22, r24
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	0c 94 25 2a 	jmp	0x544a	; 0x544a <eeprom_write_byte>

00004184 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4184:	83 e0       	ldi	r24, 0x03	; 3
    4186:	90 e0       	ldi	r25, 0x00	; 0
    4188:	0c 94 17 2a 	jmp	0x542e	; 0x542e <eeprom_read_byte>

0000418c <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    418c:	68 2f       	mov	r22, r24
    418e:	83 e0       	ldi	r24, 0x03	; 3
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0c 94 25 2a 	jmp	0x544a	; 0x544a <eeprom_write_byte>

00004196 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4196:	84 e0       	ldi	r24, 0x04	; 4
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0c 94 17 2a 	jmp	0x542e	; 0x542e <eeprom_read_byte>

0000419e <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    419e:	68 2f       	mov	r22, r24
    41a0:	84 e0       	ldi	r24, 0x04	; 4
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0c 94 25 2a 	jmp	0x544a	; 0x544a <eeprom_write_byte>

000041a8 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    41a8:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    41ac:	80 ff       	sbrs	r24, 0
    41ae:	14 c0       	rjmp	.+40     	; 0x41d8 <move_unit+0x30>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    41b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	65 e0       	ldi	r22, 0x05	; 5
    41b8:	70 e0       	ldi	r23, 0x00	; 0
    41ba:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    41be:	bc 01       	movw	r22, r24
    41c0:	75 95       	asr	r23
    41c2:	67 95       	ror	r22
    41c4:	75 95       	asr	r23
    41c6:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    41c8:	60 38       	cpi	r22, 0x80	; 128
    41ca:	71 05       	cpc	r23, r1
    41cc:	c8 f5       	brcc	.+114    	; 0x4240 <move_unit+0x98>
    41ce:	61 15       	cp	r22, r1
    41d0:	71 05       	cpc	r23, r1
    41d2:	c1 f1       	breq	.+112    	; 0x4244 <move_unit+0x9c>
    41d4:	86 2f       	mov	r24, r22
    41d6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    41d8:	81 ff       	sbrs	r24, 1
    41da:	0b c0       	rjmp	.+22     	; 0x41f2 <move_unit+0x4a>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    41dc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	65 e0       	ldi	r22, 0x05	; 5
    41e4:	70 e0       	ldi	r23, 0x00	; 0
    41e6:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    41ea:	bc 01       	movw	r22, r24
    41ec:	75 95       	asr	r23
    41ee:	67 95       	ror	r22
    41f0:	eb cf       	rjmp	.-42     	; 0x41c8 <move_unit+0x20>
    } else if (mousekey_accel & (1<<2)) {
    41f2:	82 ff       	sbrs	r24, 2
    41f4:	09 c0       	rjmp	.+18     	; 0x4208 <move_unit+0x60>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    41f6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    41fa:	90 e0       	ldi	r25, 0x00	; 0
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    41fc:	65 e0       	ldi	r22, 0x05	; 5
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    4204:	bc 01       	movw	r22, r24
    4206:	e0 cf       	rjmp	.-64     	; 0x41c8 <move_unit+0x20>
    } else if (mousekey_repeat == 0) {
    4208:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <mousekey_repeat>
    420c:	88 23       	and	r24, r24
    420e:	a9 f0       	breq	.+42     	; 0x423a <move_unit+0x92>
    } else if (mousekey_repeat >= mk_time_to_max) {
    4210:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <mk_time_to_max>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4214:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <mk_max_speed>
    4218:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
    421a:	82 17       	cp	r24, r18
    421c:	10 f0       	brcs	.+4      	; 0x4222 <move_unit+0x7a>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    421e:	cb 01       	movw	r24, r22
    4220:	ed cf       	rjmp	.-38     	; 0x41fc <move_unit+0x54>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    4228:	65 e0       	ldi	r22, 0x05	; 5
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    4230:	62 2f       	mov	r22, r18
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__divmodhi4>
    4238:	c7 cf       	rjmp	.-114    	; 0x41c8 <move_unit+0x20>
        unit = MOUSEKEY_MOVE_DELTA;
    423a:	65 e0       	ldi	r22, 0x05	; 5
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	ca cf       	rjmp	.-108    	; 0x41d4 <move_unit+0x2c>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4240:	8f e7       	ldi	r24, 0x7F	; 127
    4242:	08 95       	ret
    4244:	81 e0       	ldi	r24, 0x01	; 1
}
    4246:	08 95       	ret

00004248 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4248:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    424c:	80 ff       	sbrs	r24, 0
    424e:	0c c0       	rjmp	.+24     	; 0x4268 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4250:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_max_speed>
    4254:	70 e0       	ldi	r23, 0x00	; 0
    4256:	75 95       	asr	r23
    4258:	67 95       	ror	r22
    425a:	75 95       	asr	r23
    425c:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    425e:	61 15       	cp	r22, r1
    4260:	71 05       	cpc	r23, r1
    4262:	59 f1       	breq	.+86     	; 0x42ba <wheel_unit+0x72>
    4264:	86 2f       	mov	r24, r22
    4266:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    4268:	81 ff       	sbrs	r24, 1
    426a:	06 c0       	rjmp	.+12     	; 0x4278 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    426c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_max_speed>
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	75 95       	asr	r23
    4274:	67 95       	ror	r22
    4276:	f3 cf       	rjmp	.-26     	; 0x425e <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4278:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_max_speed>
    427c:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_accel & (1<<2)) {
    427e:	82 fd       	sbrc	r24, 2
    4280:	0c c0       	rjmp	.+24     	; 0x429a <wheel_unit+0x52>
    } else if (mousekey_repeat == 0) {
    4282:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <mousekey_repeat>
    4286:	66 23       	and	r22, r22
    4288:	a9 f0       	breq	.+42     	; 0x42b4 <wheel_unit+0x6c>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    428a:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mk_wheel_time_to_max>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    428e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    4292:	90 e0       	ldi	r25, 0x00	; 0
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4294:	62 17       	cp	r22, r18
    4296:	30 f0       	brcs	.+12     	; 0x42a4 <wheel_unit+0x5c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    4298:	bc 01       	movw	r22, r24
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    429a:	60 38       	cpi	r22, 0x80	; 128
    429c:	71 05       	cpc	r23, r1
    429e:	f8 f2       	brcs	.-66     	; 0x425e <wheel_unit+0x16>
    42a0:	8f e7       	ldi	r24, 0x7F	; 127
    42a2:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    42a4:	70 e0       	ldi	r23, 0x00	; 0
    42a6:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    42aa:	62 2f       	mov	r22, r18
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__divmodhi4>
    42b2:	f3 cf       	rjmp	.-26     	; 0x429a <wheel_unit+0x52>
        unit = MOUSEKEY_WHEEL_DELTA;
    42b4:	61 e0       	ldi	r22, 0x01	; 1
    42b6:	70 e0       	ldi	r23, 0x00	; 0
    42b8:	d5 cf       	rjmp	.-86     	; 0x4264 <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    42ba:	81 e0       	ldi	r24, 0x01	; 1
}
    42bc:	08 95       	ret

000042be <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    42be:	80 3f       	cpi	r24, 0xF0	; 240
    42c0:	31 f4       	brne	.+12     	; 0x42ce <mousekey_on+0x10>
    42c2:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    42c6:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    42c8:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <mouse_report+0x2>
    42cc:	08 95       	ret
    42ce:	81 3f       	cpi	r24, 0xF1	; 241
    42d0:	19 f4       	brne	.+6      	; 0x42d8 <mousekey_on+0x1a>
    42d2:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    42d6:	f8 cf       	rjmp	.-16     	; 0x42c8 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    42d8:	82 3f       	cpi	r24, 0xF2	; 242
    42da:	31 f4       	brne	.+12     	; 0x42e8 <mousekey_on+0x2a>
    42dc:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    42e0:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    42e2:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <mouse_report+0x1>
    42e6:	08 95       	ret
    42e8:	83 3f       	cpi	r24, 0xF3	; 243
    42ea:	19 f4       	brne	.+6      	; 0x42f2 <mousekey_on+0x34>
    42ec:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    42f0:	f8 cf       	rjmp	.-16     	; 0x42e2 <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    42f2:	89 3f       	cpi	r24, 0xF9	; 249
    42f4:	29 f4       	brne	.+10     	; 0x4300 <mousekey_on+0x42>
    42f6:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    42fa:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <mouse_report+0x3>
    42fe:	08 95       	ret
    4300:	8a 3f       	cpi	r24, 0xFA	; 250
    4302:	21 f4       	brne	.+8      	; 0x430c <mousekey_on+0x4e>
    4304:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    4308:	81 95       	neg	r24
    430a:	f7 cf       	rjmp	.-18     	; 0x42fa <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    430c:	8b 3f       	cpi	r24, 0xFB	; 251
    430e:	31 f4       	brne	.+12     	; 0x431c <mousekey_on+0x5e>
    4310:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    4314:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4316:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <mouse_report+0x4>
    431a:	08 95       	ret
    431c:	8c 3f       	cpi	r24, 0xFC	; 252
    431e:	19 f4       	brne	.+6      	; 0x4326 <mousekey_on+0x68>
    4320:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    4324:	f8 cf       	rjmp	.-16     	; 0x4316 <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4326:	84 3f       	cpi	r24, 0xF4	; 244
    4328:	31 f4       	brne	.+12     	; 0x4336 <mousekey_on+0x78>
    432a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    432e:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4330:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <mouse_report>
    4334:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4336:	85 3f       	cpi	r24, 0xF5	; 245
    4338:	21 f4       	brne	.+8      	; 0x4342 <mousekey_on+0x84>
    433a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    433e:	82 60       	ori	r24, 0x02	; 2
    4340:	f7 cf       	rjmp	.-18     	; 0x4330 <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4342:	86 3f       	cpi	r24, 0xF6	; 246
    4344:	21 f4       	brne	.+8      	; 0x434e <mousekey_on+0x90>
    4346:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    434a:	84 60       	ori	r24, 0x04	; 4
    434c:	f1 cf       	rjmp	.-30     	; 0x4330 <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    434e:	87 3f       	cpi	r24, 0xF7	; 247
    4350:	21 f4       	brne	.+8      	; 0x435a <mousekey_on+0x9c>
    4352:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    4356:	88 60       	ori	r24, 0x08	; 8
    4358:	eb cf       	rjmp	.-42     	; 0x4330 <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    435a:	88 3f       	cpi	r24, 0xF8	; 248
    435c:	21 f4       	brne	.+8      	; 0x4366 <mousekey_on+0xa8>
    435e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    4362:	80 61       	ori	r24, 0x10	; 16
    4364:	e5 cf       	rjmp	.-54     	; 0x4330 <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4366:	8d 3f       	cpi	r24, 0xFD	; 253
    4368:	31 f4       	brne	.+12     	; 0x4376 <mousekey_on+0xb8>
    436a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    436e:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4370:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <mousekey_accel>
}
    4374:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4376:	8e 3f       	cpi	r24, 0xFE	; 254
    4378:	21 f4       	brne	.+8      	; 0x4382 <mousekey_on+0xc4>
    437a:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    437e:	82 60       	ori	r24, 0x02	; 2
    4380:	f7 cf       	rjmp	.-18     	; 0x4370 <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4382:	8f 3f       	cpi	r24, 0xFF	; 255
    4384:	b9 f7       	brne	.-18     	; 0x4374 <mousekey_on+0xb6>
    4386:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    438a:	84 60       	ori	r24, 0x04	; 4
    438c:	f1 cf       	rjmp	.-30     	; 0x4370 <mousekey_on+0xb2>

0000438e <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    438e:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <mouse_report+0x1>
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4392:	80 3f       	cpi	r24, 0xF0	; 240
    4394:	41 f4       	brne	.+16     	; 0x43a6 <mousekey_off+0x18>
    4396:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <mouse_report+0x2>
    439a:	87 fd       	sbrc	r24, 7
    439c:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    43a0:	99 23       	and	r25, r25
    43a2:	71 f0       	breq	.+28     	; 0x43c0 <mousekey_off+0x32>
        mousekey_repeat = 0;
}
    43a4:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    43a6:	81 3f       	cpi	r24, 0xF1	; 241
    43a8:	29 f4       	brne	.+10     	; 0x43b4 <mousekey_off+0x26>
    43aa:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <mouse_report+0x2>
    43ae:	18 16       	cp	r1, r24
    43b0:	ac f3       	brlt	.-22     	; 0x439c <mousekey_off+0xe>
    43b2:	f6 cf       	rjmp	.-20     	; 0x43a0 <mousekey_off+0x12>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    43b4:	82 3f       	cpi	r24, 0xF2	; 242
    43b6:	81 f4       	brne	.+32     	; 0x43d8 <mousekey_off+0x4a>
    43b8:	97 ff       	sbrs	r25, 7
    43ba:	f2 cf       	rjmp	.-28     	; 0x43a0 <mousekey_off+0x12>
    43bc:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <mouse_report+0x1>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    43c0:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <mouse_report+0x2>
    43c4:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <mouse_report+0x3>
    43c8:	89 2b       	or	r24, r25
    43ca:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <mouse_report+0x4>
    43ce:	89 2b       	or	r24, r25
    43d0:	49 f7       	brne	.-46     	; 0x43a4 <mousekey_off+0x16>
        mousekey_repeat = 0;
    43d2:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <mousekey_repeat>
}
    43d6:	08 95       	ret
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    43d8:	83 3f       	cpi	r24, 0xF3	; 243
    43da:	19 f4       	brne	.+6      	; 0x43e2 <mousekey_off+0x54>
    43dc:	19 16       	cp	r1, r25
    43de:	74 f3       	brlt	.-36     	; 0x43bc <mousekey_off+0x2e>
    43e0:	df cf       	rjmp	.-66     	; 0x43a0 <mousekey_off+0x12>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    43e2:	89 3f       	cpi	r24, 0xF9	; 249
    43e4:	39 f4       	brne	.+14     	; 0x43f4 <mousekey_off+0x66>
    43e6:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <mouse_report+0x3>
    43ea:	18 16       	cp	r1, r24
    43ec:	cc f6       	brge	.-78     	; 0x43a0 <mousekey_off+0x12>
    43ee:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <mouse_report+0x3>
    43f2:	d6 cf       	rjmp	.-84     	; 0x43a0 <mousekey_off+0x12>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    43f4:	8a 3f       	cpi	r24, 0xFA	; 250
    43f6:	29 f4       	brne	.+10     	; 0x4402 <mousekey_off+0x74>
    43f8:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <mouse_report+0x3>
    43fc:	87 ff       	sbrs	r24, 7
    43fe:	d0 cf       	rjmp	.-96     	; 0x43a0 <mousekey_off+0x12>
    4400:	f6 cf       	rjmp	.-20     	; 0x43ee <mousekey_off+0x60>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4402:	8b 3f       	cpi	r24, 0xFB	; 251
    4404:	39 f4       	brne	.+14     	; 0x4414 <mousekey_off+0x86>
    4406:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <mouse_report+0x4>
    440a:	87 ff       	sbrs	r24, 7
    440c:	c9 cf       	rjmp	.-110    	; 0x43a0 <mousekey_off+0x12>
    440e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <mouse_report+0x4>
    4412:	c6 cf       	rjmp	.-116    	; 0x43a0 <mousekey_off+0x12>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4414:	8c 3f       	cpi	r24, 0xFC	; 252
    4416:	29 f4       	brne	.+10     	; 0x4422 <mousekey_off+0x94>
    4418:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <mouse_report+0x4>
    441c:	18 16       	cp	r1, r24
    441e:	bc f3       	brlt	.-18     	; 0x440e <mousekey_off+0x80>
    4420:	bf cf       	rjmp	.-130    	; 0x43a0 <mousekey_off+0x12>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4422:	84 3f       	cpi	r24, 0xF4	; 244
    4424:	31 f4       	brne	.+12     	; 0x4432 <mousekey_off+0xa4>
    4426:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    442a:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    442c:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <mouse_report>
    4430:	b7 cf       	rjmp	.-146    	; 0x43a0 <mousekey_off+0x12>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4432:	85 3f       	cpi	r24, 0xF5	; 245
    4434:	21 f4       	brne	.+8      	; 0x443e <mousekey_off+0xb0>
    4436:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    443a:	8d 7f       	andi	r24, 0xFD	; 253
    443c:	f7 cf       	rjmp	.-18     	; 0x442c <mousekey_off+0x9e>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    443e:	86 3f       	cpi	r24, 0xF6	; 246
    4440:	21 f4       	brne	.+8      	; 0x444a <mousekey_off+0xbc>
    4442:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    4446:	8b 7f       	andi	r24, 0xFB	; 251
    4448:	f1 cf       	rjmp	.-30     	; 0x442c <mousekey_off+0x9e>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    444a:	87 3f       	cpi	r24, 0xF7	; 247
    444c:	21 f4       	brne	.+8      	; 0x4456 <mousekey_off+0xc8>
    444e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    4452:	87 7f       	andi	r24, 0xF7	; 247
    4454:	eb cf       	rjmp	.-42     	; 0x442c <mousekey_off+0x9e>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4456:	88 3f       	cpi	r24, 0xF8	; 248
    4458:	21 f4       	brne	.+8      	; 0x4462 <mousekey_off+0xd4>
    445a:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    445e:	8f 7e       	andi	r24, 0xEF	; 239
    4460:	e5 cf       	rjmp	.-54     	; 0x442c <mousekey_off+0x9e>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4462:	8d 3f       	cpi	r24, 0xFD	; 253
    4464:	31 f4       	brne	.+12     	; 0x4472 <mousekey_off+0xe4>
    4466:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    446a:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    446c:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <mousekey_accel>
    4470:	97 cf       	rjmp	.-210    	; 0x43a0 <mousekey_off+0x12>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4472:	8e 3f       	cpi	r24, 0xFE	; 254
    4474:	21 f4       	brne	.+8      	; 0x447e <mousekey_off+0xf0>
    4476:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    447a:	8d 7f       	andi	r24, 0xFD	; 253
    447c:	f7 cf       	rjmp	.-18     	; 0x446c <mousekey_off+0xde>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    447e:	8f 3f       	cpi	r24, 0xFF	; 255
    4480:	09 f0       	breq	.+2      	; 0x4484 <mousekey_off+0xf6>
    4482:	8e cf       	rjmp	.-228    	; 0x43a0 <mousekey_off+0x12>
    4484:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    4488:	8b 7f       	andi	r24, 0xFB	; 251
    448a:	f0 cf       	rjmp	.-32     	; 0x446c <mousekey_off+0xde>

0000448c <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    448c:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    4490:	83 ff       	sbrs	r24, 3
    4492:	7e c0       	rjmp	.+252    	; 0x4590 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4494:	8b e9       	ldi	r24, 0x9B	; 155
    4496:	93 e0       	ldi	r25, 0x03	; 3
    4498:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    phex(mouse_report.buttons); print("|");
    449c:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <mouse_report>
    44a0:	1f 92       	push	r1
    44a2:	8f 93       	push	r24
    44a4:	86 e9       	ldi	r24, 0x96	; 150
    44a6:	93 e0       	ldi	r25, 0x03	; 3
    44a8:	9f 93       	push	r25
    44aa:	8f 93       	push	r24
    44ac:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    44b0:	84 e9       	ldi	r24, 0x94	; 148
    44b2:	93 e0       	ldi	r25, 0x03	; 3
    44b4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print_decs(mouse_report.x); print(" ");
    44b8:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <mouse_report+0x1>
    44bc:	28 2f       	mov	r18, r24
    44be:	08 2e       	mov	r0, r24
    44c0:	00 0c       	add	r0, r0
    44c2:	33 0b       	sbc	r19, r19
    44c4:	3f 93       	push	r19
    44c6:	8f 93       	push	r24
    44c8:	81 e9       	ldi	r24, 0x91	; 145
    44ca:	93 e0       	ldi	r25, 0x03	; 3
    44cc:	9f 93       	push	r25
    44ce:	8f 93       	push	r24
    44d0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    44d4:	8f e8       	ldi	r24, 0x8F	; 143
    44d6:	93 e0       	ldi	r25, 0x03	; 3
    44d8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print_decs(mouse_report.y); print(" ");
    44dc:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <mouse_report+0x2>
    44e0:	28 2f       	mov	r18, r24
    44e2:	08 2e       	mov	r0, r24
    44e4:	00 0c       	add	r0, r0
    44e6:	33 0b       	sbc	r19, r19
    44e8:	3f 93       	push	r19
    44ea:	8f 93       	push	r24
    44ec:	8c e8       	ldi	r24, 0x8C	; 140
    44ee:	93 e0       	ldi	r25, 0x03	; 3
    44f0:	9f 93       	push	r25
    44f2:	8f 93       	push	r24
    44f4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    44f8:	8a e8       	ldi	r24, 0x8A	; 138
    44fa:	93 e0       	ldi	r25, 0x03	; 3
    44fc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print_decs(mouse_report.v); print(" ");
    4500:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <mouse_report+0x3>
    4504:	28 2f       	mov	r18, r24
    4506:	08 2e       	mov	r0, r24
    4508:	00 0c       	add	r0, r0
    450a:	33 0b       	sbc	r19, r19
    450c:	3f 93       	push	r19
    450e:	8f 93       	push	r24
    4510:	87 e8       	ldi	r24, 0x87	; 135
    4512:	93 e0       	ldi	r25, 0x03	; 3
    4514:	9f 93       	push	r25
    4516:	8f 93       	push	r24
    4518:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    451c:	85 e8       	ldi	r24, 0x85	; 133
    451e:	93 e0       	ldi	r25, 0x03	; 3
    4520:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print_decs(mouse_report.h); print("](");
    4524:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <mouse_report+0x4>
    4528:	28 2f       	mov	r18, r24
    452a:	08 2e       	mov	r0, r24
    452c:	00 0c       	add	r0, r0
    452e:	33 0b       	sbc	r19, r19
    4530:	3f 93       	push	r19
    4532:	8f 93       	push	r24
    4534:	82 e8       	ldi	r24, 0x82	; 130
    4536:	93 e0       	ldi	r25, 0x03	; 3
    4538:	9f 93       	push	r25
    453a:	8f 93       	push	r24
    453c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4540:	8f e7       	ldi	r24, 0x7F	; 127
    4542:	93 e0       	ldi	r25, 0x03	; 3
    4544:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print_dec(mousekey_repeat); print("/");
    4548:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <mousekey_repeat>
    454c:	1f 92       	push	r1
    454e:	8f 93       	push	r24
    4550:	8c e7       	ldi	r24, 0x7C	; 124
    4552:	93 e0       	ldi	r25, 0x03	; 3
    4554:	9f 93       	push	r25
    4556:	8f 93       	push	r24
    4558:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    455c:	8a e7       	ldi	r24, 0x7A	; 122
    455e:	93 e0       	ldi	r25, 0x03	; 3
    4560:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print_dec(mousekey_accel); print(")\n");
    4564:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <mousekey_accel>
    4568:	1f 92       	push	r1
    456a:	8f 93       	push	r24
    456c:	87 e7       	ldi	r24, 0x77	; 119
    456e:	93 e0       	ldi	r25, 0x03	; 3
    4570:	9f 93       	push	r25
    4572:	8f 93       	push	r24
    4574:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4578:	84 e7       	ldi	r24, 0x74	; 116
    457a:	93 e0       	ldi	r25, 0x03	; 3
    457c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4580:	8d b7       	in	r24, 0x3d	; 61
    4582:	9e b7       	in	r25, 0x3e	; 62
    4584:	4c 96       	adiw	r24, 0x1c	; 28
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	f8 94       	cli
    458a:	9e bf       	out	0x3e, r25	; 62
    458c:	0f be       	out	0x3f, r0	; 63
    458e:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    4590:	8b e5       	ldi	r24, 0x5B	; 91
    4592:	93 e0       	ldi	r25, 0x03	; 3
    4594:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <host_mouse_send>
    last_timer = timer_read();
    4598:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <timer_read>
    459c:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <last_timer+0x1>
    45a0:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <last_timer>
}
    45a4:	08 95       	ret

000045a6 <mousekey_task>:
{
    45a6:	1f 93       	push	r17
    45a8:	cf 93       	push	r28
    45aa:	df 93       	push	r29
    45ac:	00 d0       	rcall	.+0      	; 0x45ae <mousekey_task+0x8>
    45ae:	00 d0       	rcall	.+0      	; 0x45b0 <mousekey_task+0xa>
    45b0:	00 d0       	rcall	.+0      	; 0x45b2 <mousekey_task+0xc>
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    45b6:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <last_timer>
    45ba:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <last_timer+0x1>
    45be:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <timer_elapsed>
    45c2:	fc 01       	movw	r30, r24
    45c4:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <mousekey_repeat>
    45c8:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <mk_interval>
    45cc:	50 e0       	ldi	r21, 0x00	; 0
    45ce:	21 11       	cpse	r18, r1
    45d0:	08 c0       	rjmp	.+16     	; 0x45e2 <mousekey_task+0x3c>
    45d2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    45d6:	90 e0       	ldi	r25, 0x00	; 0
    45d8:	6a e0       	ldi	r22, 0x0A	; 10
    45da:	70 e0       	ldi	r23, 0x00	; 0
    45dc:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__mulhi3>
    45e0:	ac 01       	movw	r20, r24
    45e2:	e4 17       	cp	r30, r20
    45e4:	f5 07       	cpc	r31, r21
    45e6:	88 f0       	brcs	.+34     	; 0x460a <mousekey_task+0x64>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    45e8:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <mouse_report+0x1>
    45ec:	30 91 5d 03 	lds	r19, 0x035D	; 0x80035d <mouse_report+0x2>
    45f0:	39 83       	std	Y+1, r19	; 0x01
    45f2:	10 91 5e 03 	lds	r17, 0x035E	; 0x80035e <mouse_report+0x3>
    45f6:	40 91 5f 03 	lds	r20, 0x035F	; 0x80035f <mouse_report+0x4>
    45fa:	4e 83       	std	Y+6, r20	; 0x06
    45fc:	91 11       	cpse	r25, r1
    45fe:	0f c0       	rjmp	.+30     	; 0x461e <mousekey_task+0x78>
    4600:	83 2f       	mov	r24, r19
    4602:	81 2b       	or	r24, r17
    4604:	84 2b       	or	r24, r20
    4606:	09 f0       	breq	.+2      	; 0x460a <mousekey_task+0x64>
    4608:	b2 c0       	rjmp	.+356    	; 0x476e <mousekey_task+0x1c8>
}
    460a:	26 96       	adiw	r28, 0x06	; 6
    460c:	0f b6       	in	r0, 0x3f	; 63
    460e:	f8 94       	cli
    4610:	de bf       	out	0x3e, r29	; 62
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	cd bf       	out	0x3d, r28	; 61
    4616:	df 91       	pop	r29
    4618:	cf 91       	pop	r28
    461a:	1f 91       	pop	r17
    461c:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    461e:	2f 3f       	cpi	r18, 0xFF	; 255
    4620:	19 f0       	breq	.+6      	; 0x4628 <mousekey_task+0x82>
        mousekey_repeat++;
    4622:	2f 5f       	subi	r18, 0xFF	; 255
    4624:	20 93 5a 03 	sts	0x035A, r18	; 0x80035a <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4628:	19 16       	cp	r1, r25
    462a:	24 f4       	brge	.+8      	; 0x4634 <mousekey_task+0x8e>
    462c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    4630:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4634:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <mouse_report+0x1>
    4638:	87 ff       	sbrs	r24, 7
    463a:	05 c0       	rjmp	.+10     	; 0x4646 <mousekey_task+0xa0>
    463c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    4640:	81 95       	neg	r24
    4642:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4646:	59 81       	ldd	r21, Y+1	; 0x01
    4648:	15 16       	cp	r1, r21
    464a:	24 f4       	brge	.+8      	; 0x4654 <mousekey_task+0xae>
    464c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    4650:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4654:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <mouse_report+0x2>
    4658:	87 ff       	sbrs	r24, 7
    465a:	05 c0       	rjmp	.+10     	; 0x4666 <mousekey_task+0xc0>
    465c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <move_unit>
    4660:	81 95       	neg	r24
    4662:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    4666:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <mouse_report+0x1>
    466a:	88 23       	and	r24, r24
    466c:	09 f4       	brne	.+2      	; 0x4670 <mousekey_task+0xca>
    466e:	55 c0       	rjmp	.+170    	; 0x471a <mousekey_task+0x174>
    4670:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <mouse_report+0x2>
    4674:	9d 83       	std	Y+5, r25	; 0x05
    4676:	99 23       	and	r25, r25
    4678:	09 f4       	brne	.+2      	; 0x467c <mousekey_task+0xd6>
    467a:	4f c0       	rjmp	.+158    	; 0x471a <mousekey_task+0x174>
        mouse_report.x *= 0.7;
    467c:	28 2f       	mov	r18, r24
    467e:	88 0f       	add	r24, r24
    4680:	33 0b       	sbc	r19, r19
    4682:	44 0b       	sbc	r20, r20
    4684:	55 0b       	sbc	r21, r21
    4686:	29 83       	std	Y+1, r18	; 0x01
    4688:	3a 83       	std	Y+2, r19	; 0x02
    468a:	4b 83       	std	Y+3, r20	; 0x03
    468c:	5c 83       	std	Y+4, r21	; 0x04
    468e:	ca 01       	movw	r24, r20
    4690:	b9 01       	movw	r22, r18
    4692:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__floatsisf>
    4696:	23 e3       	ldi	r18, 0x33	; 51
    4698:	33 e3       	ldi	r19, 0x33	; 51
    469a:	43 e3       	ldi	r20, 0x33	; 51
    469c:	5f e3       	ldi	r21, 0x3F	; 63
    469e:	69 83       	std	Y+1, r22	; 0x01
    46a0:	7a 83       	std	Y+2, r23	; 0x02
    46a2:	8b 83       	std	Y+3, r24	; 0x03
    46a4:	9c 83       	std	Y+4, r25	; 0x04
    46a6:	69 81       	ldd	r22, Y+1	; 0x01
    46a8:	7a 81       	ldd	r23, Y+2	; 0x02
    46aa:	8b 81       	ldd	r24, Y+3	; 0x03
    46ac:	9c 81       	ldd	r25, Y+4	; 0x04
    46ae:	0e 94 3b 29 	call	0x5276	; 0x5276 <__mulsf3>
    46b2:	69 83       	std	Y+1, r22	; 0x01
    46b4:	7a 83       	std	Y+2, r23	; 0x02
    46b6:	8b 83       	std	Y+3, r24	; 0x03
    46b8:	9c 83       	std	Y+4, r25	; 0x04
    46ba:	69 81       	ldd	r22, Y+1	; 0x01
    46bc:	7a 81       	ldd	r23, Y+2	; 0x02
    46be:	8b 81       	ldd	r24, Y+3	; 0x03
    46c0:	9c 81       	ldd	r25, Y+4	; 0x04
    46c2:	0e 94 9f 28 	call	0x513e	; 0x513e <__fixsfsi>
    46c6:	60 93 5c 03 	sts	0x035C, r22	; 0x80035c <mouse_report+0x1>
        mouse_report.y *= 0.7;
    46ca:	8d 81       	ldd	r24, Y+5	; 0x05
    46cc:	08 2e       	mov	r0, r24
    46ce:	00 0c       	add	r0, r0
    46d0:	99 0b       	sbc	r25, r25
    46d2:	aa 0b       	sbc	r26, r26
    46d4:	bb 0b       	sbc	r27, r27
    46d6:	89 83       	std	Y+1, r24	; 0x01
    46d8:	9a 83       	std	Y+2, r25	; 0x02
    46da:	ab 83       	std	Y+3, r26	; 0x03
    46dc:	bc 83       	std	Y+4, r27	; 0x04
    46de:	bc 01       	movw	r22, r24
    46e0:	cd 01       	movw	r24, r26
    46e2:	0e 94 d7 28 	call	0x51ae	; 0x51ae <__floatsisf>
    46e6:	23 e3       	ldi	r18, 0x33	; 51
    46e8:	33 e3       	ldi	r19, 0x33	; 51
    46ea:	43 e3       	ldi	r20, 0x33	; 51
    46ec:	5f e3       	ldi	r21, 0x3F	; 63
    46ee:	69 83       	std	Y+1, r22	; 0x01
    46f0:	7a 83       	std	Y+2, r23	; 0x02
    46f2:	8b 83       	std	Y+3, r24	; 0x03
    46f4:	9c 83       	std	Y+4, r25	; 0x04
    46f6:	69 81       	ldd	r22, Y+1	; 0x01
    46f8:	7a 81       	ldd	r23, Y+2	; 0x02
    46fa:	8b 81       	ldd	r24, Y+3	; 0x03
    46fc:	9c 81       	ldd	r25, Y+4	; 0x04
    46fe:	0e 94 3b 29 	call	0x5276	; 0x5276 <__mulsf3>
    4702:	69 83       	std	Y+1, r22	; 0x01
    4704:	7a 83       	std	Y+2, r23	; 0x02
    4706:	8b 83       	std	Y+3, r24	; 0x03
    4708:	9c 83       	std	Y+4, r25	; 0x04
    470a:	69 81       	ldd	r22, Y+1	; 0x01
    470c:	7a 81       	ldd	r23, Y+2	; 0x02
    470e:	8b 81       	ldd	r24, Y+3	; 0x03
    4710:	9c 81       	ldd	r25, Y+4	; 0x04
    4712:	0e 94 9f 28 	call	0x513e	; 0x513e <__fixsfsi>
    4716:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    471a:	11 16       	cp	r1, r17
    471c:	24 f4       	brge	.+8      	; 0x4726 <mousekey_task+0x180>
    471e:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    4722:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4726:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <mouse_report+0x3>
    472a:	87 ff       	sbrs	r24, 7
    472c:	05 c0       	rjmp	.+10     	; 0x4738 <mousekey_task+0x192>
    472e:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    4732:	81 95       	neg	r24
    4734:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4738:	9e 81       	ldd	r25, Y+6	; 0x06
    473a:	19 16       	cp	r1, r25
    473c:	24 f4       	brge	.+8      	; 0x4746 <mousekey_task+0x1a0>
    473e:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    4742:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4746:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <mouse_report+0x4>
    474a:	87 ff       	sbrs	r24, 7
    474c:	05 c0       	rjmp	.+10     	; 0x4758 <mousekey_task+0x1b2>
    474e:	0e 94 24 21 	call	0x4248	; 0x4248 <wheel_unit>
    4752:	81 95       	neg	r24
    4754:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <mouse_report+0x4>
}
    4758:	26 96       	adiw	r28, 0x06	; 6
    475a:	0f b6       	in	r0, 0x3f	; 63
    475c:	f8 94       	cli
    475e:	de bf       	out	0x3e, r29	; 62
    4760:	0f be       	out	0x3f, r0	; 63
    4762:	cd bf       	out	0x3d, r28	; 61
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	1f 91       	pop	r17
    mousekey_send();
    476a:	0c 94 46 22 	jmp	0x448c	; 0x448c <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    476e:	2f 3f       	cpi	r18, 0xFF	; 255
    4770:	09 f0       	breq	.+2      	; 0x4774 <mousekey_task+0x1ce>
    4772:	57 cf       	rjmp	.-338    	; 0x4622 <mousekey_task+0x7c>
    4774:	68 cf       	rjmp	.-304    	; 0x4646 <mousekey_task+0xa0>

00004776 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    4776:	85 e0       	ldi	r24, 0x05	; 5
    4778:	eb e5       	ldi	r30, 0x5B	; 91
    477a:	f3 e0       	ldi	r31, 0x03	; 3
    477c:	df 01       	movw	r26, r30
    477e:	1d 92       	st	X+, r1
    4780:	8a 95       	dec	r24
    4782:	e9 f7       	brne	.-6      	; 0x477e <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4784:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <mousekey_repeat>
    mousekey_accel = 0;
    4788:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <mousekey_accel>
}
    478c:	08 95       	ret

0000478e <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    478e:	8e eb       	ldi	r24, 0xBE	; 190
    4790:	95 e0       	ldi	r25, 0x05	; 5
    4792:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4796:	1f 92       	push	r1
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	8f 93       	push	r24
    479c:	1f 92       	push	r1
    479e:	85 e0       	ldi	r24, 0x05	; 5
    47a0:	8f 93       	push	r24
    47a2:	80 e7       	ldi	r24, 0x70	; 112
    47a4:	95 e0       	ldi	r25, 0x05	; 5
    47a6:	9f 93       	push	r25
    47a8:	8f 93       	push	r24
    47aa:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    47ae:	0f 90       	pop	r0
    47b0:	0f 90       	pop	r0
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	08 95       	ret

000047bc <mousekey_param_inc>:
    switch (param) {
    47bc:	84 30       	cpi	r24, 0x04	; 4
    47be:	09 f4       	brne	.+2      	; 0x47c2 <mousekey_param_inc+0x6>
    47c0:	5d c0       	rjmp	.+186    	; 0x487c <mousekey_param_inc+0xc0>
    47c2:	40 f4       	brcc	.+16     	; 0x47d4 <mousekey_param_inc+0x18>
    47c4:	82 30       	cpi	r24, 0x02	; 2
    47c6:	61 f1       	breq	.+88     	; 0x4820 <mousekey_param_inc+0x64>
    47c8:	83 30       	cpi	r24, 0x03	; 3
    47ca:	09 f4       	brne	.+2      	; 0x47ce <mousekey_param_inc+0x12>
    47cc:	40 c0       	rjmp	.+128    	; 0x484e <mousekey_param_inc+0x92>
    47ce:	81 30       	cpi	r24, 0x01	; 1
    47d0:	41 f0       	breq	.+16     	; 0x47e2 <mousekey_param_inc+0x26>
    47d2:	08 95       	ret
    47d4:	85 30       	cpi	r24, 0x05	; 5
    47d6:	09 f4       	brne	.+2      	; 0x47da <mousekey_param_inc+0x1e>
    47d8:	68 c0       	rjmp	.+208    	; 0x48aa <mousekey_param_inc+0xee>
    47da:	86 30       	cpi	r24, 0x06	; 6
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <mousekey_param_inc+0x24>
    47de:	7c c0       	rjmp	.+248    	; 0x48d8 <mousekey_param_inc+0x11c>
    47e0:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    47e2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    47e6:	48 2f       	mov	r20, r24
    47e8:	46 0f       	add	r20, r22
    47ea:	55 27       	eor	r21, r21
    47ec:	55 1f       	adc	r21, r21
    47ee:	4f 3f       	cpi	r20, 0xFF	; 255
    47f0:	51 05       	cpc	r21, r1
    47f2:	94 f4       	brge	.+36     	; 0x4818 <mousekey_param_inc+0x5c>
                mk_delay += inc;
    47f4:	68 0f       	add	r22, r24
    47f6:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    47fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    47fe:	1f 92       	push	r1
    4800:	8f 93       	push	r24
    4802:	89 ea       	ldi	r24, 0xA9	; 169
    4804:	94 e0       	ldi	r25, 0x04	; 4
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4806:	9f 93       	push	r25
    4808:	8f 93       	push	r24
    480a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
            break;
    480e:	0f 90       	pop	r0
    4810:	0f 90       	pop	r0
    4812:	0f 90       	pop	r0
    4814:	0f 90       	pop	r0
}
    4816:	08 95       	ret
                mk_delay = UINT8_MAX;
    4818:	8f ef       	ldi	r24, 0xFF	; 255
    481a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_delay>
    481e:	ed cf       	rjmp	.-38     	; 0x47fa <mousekey_param_inc+0x3e>
            if (mk_interval + inc < UINT8_MAX)
    4820:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    4824:	48 2f       	mov	r20, r24
    4826:	46 0f       	add	r20, r22
    4828:	55 27       	eor	r21, r21
    482a:	55 1f       	adc	r21, r21
    482c:	4f 3f       	cpi	r20, 0xFF	; 255
    482e:	51 05       	cpc	r21, r1
    4830:	54 f4       	brge	.+20     	; 0x4846 <mousekey_param_inc+0x8a>
                mk_interval += inc;
    4832:	68 0f       	add	r22, r24
    4834:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4838:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    483c:	1f 92       	push	r1
    483e:	8f 93       	push	r24
    4840:	87 e9       	ldi	r24, 0x97	; 151
    4842:	94 e0       	ldi	r25, 0x04	; 4
    4844:	e0 cf       	rjmp	.-64     	; 0x4806 <mousekey_param_inc+0x4a>
                mk_interval = UINT8_MAX;
    4846:	8f ef       	ldi	r24, 0xFF	; 255
    4848:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_interval>
    484c:	f5 cf       	rjmp	.-22     	; 0x4838 <mousekey_param_inc+0x7c>
            if (mk_max_speed + inc < UINT8_MAX)
    484e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    4852:	48 2f       	mov	r20, r24
    4854:	46 0f       	add	r20, r22
    4856:	55 27       	eor	r21, r21
    4858:	55 1f       	adc	r21, r21
    485a:	4f 3f       	cpi	r20, 0xFF	; 255
    485c:	51 05       	cpc	r21, r1
    485e:	54 f4       	brge	.+20     	; 0x4874 <mousekey_param_inc+0xb8>
                mk_max_speed += inc;
    4860:	68 0f       	add	r22, r24
    4862:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4866:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    486a:	1f 92       	push	r1
    486c:	8f 93       	push	r24
    486e:	84 e8       	ldi	r24, 0x84	; 132
    4870:	94 e0       	ldi	r25, 0x04	; 4
    4872:	c9 cf       	rjmp	.-110    	; 0x4806 <mousekey_param_inc+0x4a>
                mk_max_speed = UINT8_MAX;
    4874:	8f ef       	ldi	r24, 0xFF	; 255
    4876:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_max_speed>
    487a:	f5 cf       	rjmp	.-22     	; 0x4866 <mousekey_param_inc+0xaa>
            if (mk_time_to_max + inc < UINT8_MAX)
    487c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    4880:	48 2f       	mov	r20, r24
    4882:	46 0f       	add	r20, r22
    4884:	55 27       	eor	r21, r21
    4886:	55 1f       	adc	r21, r21
    4888:	4f 3f       	cpi	r20, 0xFF	; 255
    488a:	51 05       	cpc	r21, r1
    488c:	54 f4       	brge	.+20     	; 0x48a2 <mousekey_param_inc+0xe6>
                mk_time_to_max += inc;
    488e:	68 0f       	add	r22, r24
    4890:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4894:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    4898:	1f 92       	push	r1
    489a:	8f 93       	push	r24
    489c:	8f e6       	ldi	r24, 0x6F	; 111
    489e:	94 e0       	ldi	r25, 0x04	; 4
    48a0:	b2 cf       	rjmp	.-156    	; 0x4806 <mousekey_param_inc+0x4a>
                mk_time_to_max = UINT8_MAX;
    48a2:	8f ef       	ldi	r24, 0xFF	; 255
    48a4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_time_to_max>
    48a8:	f5 cf       	rjmp	.-22     	; 0x4894 <mousekey_param_inc+0xd8>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    48aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    48ae:	48 2f       	mov	r20, r24
    48b0:	46 0f       	add	r20, r22
    48b2:	55 27       	eor	r21, r21
    48b4:	55 1f       	adc	r21, r21
    48b6:	4f 3f       	cpi	r20, 0xFF	; 255
    48b8:	51 05       	cpc	r21, r1
    48ba:	54 f4       	brge	.+20     	; 0x48d0 <mousekey_param_inc+0x114>
                mk_wheel_max_speed += inc;
    48bc:	68 0f       	add	r22, r24
    48be:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    48c2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    48c6:	1f 92       	push	r1
    48c8:	8f 93       	push	r24
    48ca:	86 e5       	ldi	r24, 0x56	; 86
    48cc:	94 e0       	ldi	r25, 0x04	; 4
    48ce:	9b cf       	rjmp	.-202    	; 0x4806 <mousekey_param_inc+0x4a>
                mk_wheel_max_speed = UINT8_MAX;
    48d0:	8f ef       	ldi	r24, 0xFF	; 255
    48d2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_max_speed>
    48d6:	f5 cf       	rjmp	.-22     	; 0x48c2 <mousekey_param_inc+0x106>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    48d8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    48dc:	48 2f       	mov	r20, r24
    48de:	46 0f       	add	r20, r22
    48e0:	55 27       	eor	r21, r21
    48e2:	55 1f       	adc	r21, r21
    48e4:	4f 3f       	cpi	r20, 0xFF	; 255
    48e6:	51 05       	cpc	r21, r1
    48e8:	54 f4       	brge	.+20     	; 0x48fe <mousekey_param_inc+0x142>
                mk_wheel_time_to_max += inc;
    48ea:	68 0f       	add	r22, r24
    48ec:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    48f0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    48f4:	1f 92       	push	r1
    48f6:	8f 93       	push	r24
    48f8:	8b e3       	ldi	r24, 0x3B	; 59
    48fa:	94 e0       	ldi	r25, 0x04	; 4
    48fc:	84 cf       	rjmp	.-248    	; 0x4806 <mousekey_param_inc+0x4a>
                mk_wheel_time_to_max = UINT8_MAX;
    48fe:	8f ef       	ldi	r24, 0xFF	; 255
    4900:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_wheel_time_to_max>
    4904:	f5 cf       	rjmp	.-22     	; 0x48f0 <mousekey_param_inc+0x134>

00004906 <mousekey_param_dec>:
    switch (param) {
    4906:	84 30       	cpi	r24, 0x04	; 4
    4908:	09 f4       	brne	.+2      	; 0x490c <mousekey_param_dec+0x6>
    490a:	4a c0       	rjmp	.+148    	; 0x49a0 <mousekey_param_dec+0x9a>
    490c:	38 f4       	brcc	.+14     	; 0x491c <mousekey_param_dec+0x16>
    490e:	82 30       	cpi	r24, 0x02	; 2
    4910:	29 f1       	breq	.+74     	; 0x495c <mousekey_param_dec+0x56>
    4912:	83 30       	cpi	r24, 0x03	; 3
    4914:	a1 f1       	breq	.+104    	; 0x497e <mousekey_param_dec+0x78>
    4916:	81 30       	cpi	r24, 0x01	; 1
    4918:	41 f0       	breq	.+16     	; 0x492a <mousekey_param_dec+0x24>
    491a:	08 95       	ret
    491c:	85 30       	cpi	r24, 0x05	; 5
    491e:	09 f4       	brne	.+2      	; 0x4922 <mousekey_param_dec+0x1c>
    4920:	50 c0       	rjmp	.+160    	; 0x49c2 <mousekey_param_dec+0xbc>
    4922:	86 30       	cpi	r24, 0x06	; 6
    4924:	09 f4       	brne	.+2      	; 0x4928 <mousekey_param_dec+0x22>
    4926:	5e c0       	rjmp	.+188    	; 0x49e4 <mousekey_param_dec+0xde>
    4928:	08 95       	ret
            if (mk_delay > dec)
    492a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    492e:	68 17       	cp	r22, r24
    4930:	90 f4       	brcc	.+36     	; 0x4956 <mousekey_param_dec+0x50>
                mk_delay -= dec;
    4932:	86 1b       	sub	r24, r22
    4934:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4938:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    493c:	1f 92       	push	r1
    493e:	8f 93       	push	r24
    4940:	8c e2       	ldi	r24, 0x2C	; 44
    4942:	94 e0       	ldi	r25, 0x04	; 4
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4944:	9f 93       	push	r25
    4946:	8f 93       	push	r24
    4948:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
            break;
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	0f 90       	pop	r0
    4952:	0f 90       	pop	r0
}
    4954:	08 95       	ret
                mk_delay = 0;
    4956:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <mk_delay>
    495a:	ee cf       	rjmp	.-36     	; 0x4938 <mousekey_param_dec+0x32>
            if (mk_interval > dec)
    495c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    4960:	68 17       	cp	r22, r24
    4962:	50 f4       	brcc	.+20     	; 0x4978 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4964:	86 1b       	sub	r24, r22
    4966:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    496a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    496e:	1f 92       	push	r1
    4970:	8f 93       	push	r24
    4972:	8a e1       	ldi	r24, 0x1A	; 26
    4974:	94 e0       	ldi	r25, 0x04	; 4
    4976:	e6 cf       	rjmp	.-52     	; 0x4944 <mousekey_param_dec+0x3e>
                mk_interval = 0;
    4978:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <mk_interval>
    497c:	f6 cf       	rjmp	.-20     	; 0x496a <mousekey_param_dec+0x64>
            if (mk_max_speed > dec)
    497e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    4982:	68 17       	cp	r22, r24
    4984:	50 f4       	brcc	.+20     	; 0x499a <mousekey_param_dec+0x94>
                mk_max_speed -= dec;
    4986:	86 1b       	sub	r24, r22
    4988:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    498c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    4990:	1f 92       	push	r1
    4992:	8f 93       	push	r24
    4994:	87 e0       	ldi	r24, 0x07	; 7
    4996:	94 e0       	ldi	r25, 0x04	; 4
    4998:	d5 cf       	rjmp	.-86     	; 0x4944 <mousekey_param_dec+0x3e>
                mk_max_speed = 0;
    499a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <mk_max_speed>
    499e:	f6 cf       	rjmp	.-20     	; 0x498c <mousekey_param_dec+0x86>
            if (mk_time_to_max > dec)
    49a0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    49a4:	68 17       	cp	r22, r24
    49a6:	50 f4       	brcc	.+20     	; 0x49bc <mousekey_param_dec+0xb6>
                mk_time_to_max -= dec;
    49a8:	86 1b       	sub	r24, r22
    49aa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    49ae:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    49b2:	1f 92       	push	r1
    49b4:	8f 93       	push	r24
    49b6:	82 ef       	ldi	r24, 0xF2	; 242
    49b8:	93 e0       	ldi	r25, 0x03	; 3
    49ba:	c4 cf       	rjmp	.-120    	; 0x4944 <mousekey_param_dec+0x3e>
                mk_time_to_max = 0;
    49bc:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mk_time_to_max>
    49c0:	f6 cf       	rjmp	.-20     	; 0x49ae <mousekey_param_dec+0xa8>
            if (mk_wheel_max_speed > dec)
    49c2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    49c6:	68 17       	cp	r22, r24
    49c8:	50 f4       	brcc	.+20     	; 0x49de <mousekey_param_dec+0xd8>
                mk_wheel_max_speed -= dec;
    49ca:	86 1b       	sub	r24, r22
    49cc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    49d0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    49d4:	1f 92       	push	r1
    49d6:	8f 93       	push	r24
    49d8:	89 ed       	ldi	r24, 0xD9	; 217
    49da:	93 e0       	ldi	r25, 0x03	; 3
    49dc:	b3 cf       	rjmp	.-154    	; 0x4944 <mousekey_param_dec+0x3e>
                mk_wheel_max_speed = 0;
    49de:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_wheel_max_speed>
    49e2:	f6 cf       	rjmp	.-20     	; 0x49d0 <mousekey_param_dec+0xca>
            if (mk_wheel_time_to_max > dec)
    49e4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    49e8:	68 17       	cp	r22, r24
    49ea:	50 f4       	brcc	.+20     	; 0x4a00 <mousekey_param_dec+0xfa>
                mk_wheel_time_to_max -= dec;
    49ec:	86 1b       	sub	r24, r22
    49ee:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    49f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    49f6:	1f 92       	push	r1
    49f8:	8f 93       	push	r24
    49fa:	8e eb       	ldi	r24, 0xBE	; 190
    49fc:	93 e0       	ldi	r25, 0x03	; 3
    49fe:	a2 cf       	rjmp	.-188    	; 0x4944 <mousekey_param_dec+0x3e>
                mk_wheel_time_to_max = 0;
    4a00:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_wheel_time_to_max>
    4a04:	f6 cf       	rjmp	.-20     	; 0x49f2 <mousekey_param_dec+0xec>

00004a06 <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    4a06:	cf 93       	push	r28
    4a08:	df 93       	push	r29
    4a0a:	00 d0       	rcall	.+0      	; 0x4a0c <switch_default_layer+0x6>
    4a0c:	00 d0       	rcall	.+0      	; 0x4a0e <switch_default_layer+0x8>
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62
    4a12:	89 83       	std	Y+1, r24	; 0x01
    xprintf("L%d\n", layer);
    4a14:	1f 92       	push	r1
    4a16:	8f 93       	push	r24
    4a18:	83 ec       	ldi	r24, 0xC3	; 195
    4a1a:	96 e0       	ldi	r25, 0x06	; 6
    4a1c:	9f 93       	push	r25
    4a1e:	8f 93       	push	r24
    4a20:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    default_layer_set(1UL<<layer);
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	a0 e0       	ldi	r26, 0x00	; 0
    4a2a:	b0 e0       	ldi	r27, 0x00	; 0
    4a2c:	9c 01       	movw	r18, r24
    4a2e:	ad 01       	movw	r20, r26
    4a30:	09 80       	ldd	r0, Y+1	; 0x01
    4a32:	04 c0       	rjmp	.+8      	; 0x4a3c <switch_default_layer+0x36>
    4a34:	22 0f       	add	r18, r18
    4a36:	33 1f       	adc	r19, r19
    4a38:	44 1f       	adc	r20, r20
    4a3a:	55 1f       	adc	r21, r21
    4a3c:	0a 94       	dec	r0
    4a3e:	d2 f7       	brpl	.-12     	; 0x4a34 <switch_default_layer+0x2e>
    4a40:	29 83       	std	Y+1, r18	; 0x01
    4a42:	3a 83       	std	Y+2, r19	; 0x02
    4a44:	4b 83       	std	Y+3, r20	; 0x03
    4a46:	5c 83       	std	Y+4, r21	; 0x04
    4a48:	ca 01       	movw	r24, r20
    4a4a:	b9 01       	movw	r22, r18
    4a4c:	0e 94 66 19 	call	0x32cc	; 0x32cc <default_layer_set>
    clear_keyboard();
    4a50:	0f 90       	pop	r0
    4a52:	0f 90       	pop	r0
    4a54:	0f 90       	pop	r0
    4a56:	0f 90       	pop	r0
}
    4a58:	0f 90       	pop	r0
    4a5a:	0f 90       	pop	r0
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    clear_keyboard();
    4a64:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <clear_keyboard>

00004a68 <command_common>:
{
    4a68:	cf 93       	push	r28
    switch (code) {
    4a6a:	8a 32       	cpi	r24, 0x2A	; 42
    4a6c:	58 f4       	brcc	.+22     	; 0x4a84 <command_common+0x1c>
    4a6e:	86 30       	cpi	r24, 0x06	; 6
    4a70:	a0 f0       	brcs	.+40     	; 0x4a9a <command_common+0x32>
    4a72:	ea ef       	ldi	r30, 0xFA	; 250
    4a74:	e8 0f       	add	r30, r24
    4a76:	e4 32       	cpi	r30, 0x24	; 36
    4a78:	80 f4       	brcc	.+32     	; 0x4a9a <command_common+0x32>
    4a7a:	f0 e0       	ldi	r31, 0x00	; 0
    4a7c:	ec 59       	subi	r30, 0x9C	; 156
    4a7e:	f5 4d       	sbci	r31, 0xD5	; 213
    4a80:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <__tablejump2__>
    4a84:	83 34       	cpi	r24, 0x43	; 67
    4a86:	78 f4       	brcc	.+30     	; 0x4aa6 <command_common+0x3e>
    4a88:	8a 33       	cpi	r24, 0x3A	; 58
    4a8a:	08 f0       	brcs	.+2      	; 0x4a8e <command_common+0x26>
    4a8c:	04 c2       	rjmp	.+1032   	; 0x4e96 <command_common+0x42e>
    4a8e:	85 33       	cpi	r24, 0x35	; 53
    4a90:	09 f4       	brne	.+2      	; 0x4a94 <command_common+0x2c>
    4a92:	fb c1       	rjmp	.+1014   	; 0x4e8a <command_common+0x422>
    4a94:	88 33       	cpi	r24, 0x38	; 56
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <command_common+0x32>
    4a98:	4d c1       	rjmp	.+666    	; 0x4d34 <command_common+0x2cc>
            print("?");
    4a9a:	8f ec       	ldi	r24, 0xCF	; 207
    4a9c:	98 e0       	ldi	r25, 0x08	; 8
    4a9e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            return false;
    4aa2:	80 e0       	ldi	r24, 0x00	; 0
    4aa4:	5c c1       	rjmp	.+696    	; 0x4d5e <command_common+0x2f6>
    switch (code) {
    4aa6:	83 34       	cpi	r24, 0x43	; 67
    4aa8:	09 f4       	brne	.+2      	; 0x4aac <command_common+0x44>
    4aaa:	ef c1       	rjmp	.+990    	; 0x4e8a <command_common+0x422>
    4aac:	88 34       	cpi	r24, 0x48	; 72
    4aae:	a9 f7       	brne	.-22     	; 0x4a9a <command_common+0x32>
            clear_keyboard();
    4ab0:	0e 94 db 11 	call	0x23b6	; 0x23b6 <clear_keyboard>
            print("\n\nbootloader... ");
    4ab4:	81 ec       	ldi	r24, 0xC1	; 193
    4ab6:	9a e0       	ldi	r25, 0x0A	; 10
    4ab8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
	__builtin_avr_delay_cycles(__ticks_dc);
    4abc:	9f ef       	ldi	r25, 0xFF	; 255
    4abe:	23 ed       	ldi	r18, 0xD3	; 211
    4ac0:	80 e3       	ldi	r24, 0x30	; 48
    4ac2:	91 50       	subi	r25, 0x01	; 1
    4ac4:	20 40       	sbci	r18, 0x00	; 0
    4ac6:	80 40       	sbci	r24, 0x00	; 0
    4ac8:	e1 f7       	brne	.-8      	; 0x4ac2 <command_common+0x5a>
    4aca:	00 c0       	rjmp	.+0      	; 0x4acc <command_common+0x64>
    4acc:	00 00       	nop
            bootloader_jump(); // not return
    4ace:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <bootloader_jump>
            break;
    4ad2:	2e c1       	rjmp	.+604    	; 0x4d30 <command_common+0x2c8>
            print("eeconfig:\n");
    4ad4:	86 ed       	ldi	r24, 0xD6	; 214
    4ad6:	9a e0       	ldi	r25, 0x0A	; 10
    4ad8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4adc:	8f eb       	ldi	r24, 0xBF	; 191
    4ade:	98 e0       	ldi	r25, 0x08	; 8
    4ae0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4ae4:	0e 94 c2 20 	call	0x4184	; 0x4184 <eeconfig_read_default_layer>
    4ae8:	1f 92       	push	r1
    4aea:	8f 93       	push	r24
    4aec:	8c eb       	ldi	r24, 0xBC	; 188
    4aee:	98 e0       	ldi	r25, 0x08	; 8
    4af0:	9f 93       	push	r25
    4af2:	8f 93       	push	r24
    4af4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4af8:	8a eb       	ldi	r24, 0xBA	; 186
    4afa:	98 e0       	ldi	r25, 0x08	; 8
    4afc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    dc.raw = eeconfig_read_debug();
    4b00:	0e 94 b9 20 	call	0x4172	; 0x4172 <eeconfig_read_debug>
    4b04:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4b06:	87 ea       	ldi	r24, 0xA7	; 167
    4b08:	98 e0       	ldi	r25, 0x08	; 8
    4b0a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4b0e:	1f 92       	push	r1
    4b10:	cf 93       	push	r28
    4b12:	82 ea       	ldi	r24, 0xA2	; 162
    4b14:	98 e0       	ldi	r25, 0x08	; 8
    4b16:	9f 93       	push	r25
    4b18:	8f 93       	push	r24
    4b1a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4b1e:	80 ea       	ldi	r24, 0xA0	; 160
    4b20:	98 e0       	ldi	r25, 0x08	; 8
    4b22:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4b26:	86 e9       	ldi	r24, 0x96	; 150
    4b28:	98 e0       	ldi	r25, 0x08	; 8
    4b2a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4b2e:	8c 2f       	mov	r24, r28
    4b30:	81 70       	andi	r24, 0x01	; 1
    4b32:	1f 92       	push	r1
    4b34:	8f 93       	push	r24
    4b36:	83 e9       	ldi	r24, 0x93	; 147
    4b38:	98 e0       	ldi	r25, 0x08	; 8
    4b3a:	9f 93       	push	r25
    4b3c:	8f 93       	push	r24
    4b3e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4b42:	81 e9       	ldi	r24, 0x91	; 145
    4b44:	98 e0       	ldi	r25, 0x08	; 8
    4b46:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4b4a:	87 e8       	ldi	r24, 0x87	; 135
    4b4c:	98 e0       	ldi	r25, 0x08	; 8
    4b4e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4b52:	c1 fb       	bst	r28, 1
    4b54:	88 27       	eor	r24, r24
    4b56:	80 f9       	bld	r24, 0
    4b58:	1f 92       	push	r1
    4b5a:	8f 93       	push	r24
    4b5c:	84 e8       	ldi	r24, 0x84	; 132
    4b5e:	98 e0       	ldi	r25, 0x08	; 8
    4b60:	9f 93       	push	r25
    4b62:	8f 93       	push	r24
    4b64:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4b68:	82 e8       	ldi	r24, 0x82	; 130
    4b6a:	98 e0       	ldi	r25, 0x08	; 8
    4b6c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4b70:	86 e7       	ldi	r24, 0x76	; 118
    4b72:	98 e0       	ldi	r25, 0x08	; 8
    4b74:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4b78:	c2 fb       	bst	r28, 2
    4b7a:	88 27       	eor	r24, r24
    4b7c:	80 f9       	bld	r24, 0
    4b7e:	1f 92       	push	r1
    4b80:	8f 93       	push	r24
    4b82:	83 e7       	ldi	r24, 0x73	; 115
    4b84:	98 e0       	ldi	r25, 0x08	; 8
    4b86:	9f 93       	push	r25
    4b88:	8f 93       	push	r24
    4b8a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4b8e:	81 e7       	ldi	r24, 0x71	; 113
    4b90:	98 e0       	ldi	r25, 0x08	; 8
    4b92:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4b96:	88 e6       	ldi	r24, 0x68	; 104
    4b98:	98 e0       	ldi	r25, 0x08	; 8
    4b9a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4b9e:	c3 fb       	bst	r28, 3
    4ba0:	cc 27       	eor	r28, r28
    4ba2:	c0 f9       	bld	r28, 0
    4ba4:	1f 92       	push	r1
    4ba6:	cf 93       	push	r28
    4ba8:	85 e6       	ldi	r24, 0x65	; 101
    4baa:	98 e0       	ldi	r25, 0x08	; 8
    4bac:	9f 93       	push	r25
    4bae:	8f 93       	push	r24
    4bb0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4bb4:	83 e6       	ldi	r24, 0x63	; 99
    4bb6:	98 e0       	ldi	r25, 0x08	; 8
    4bb8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    kc.raw = eeconfig_read_keymap();
    4bbc:	0e 94 cb 20 	call	0x4196	; 0x4196 <eeconfig_read_keymap>
    4bc0:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4bc2:	8f e4       	ldi	r24, 0x4F	; 79
    4bc4:	98 e0       	ldi	r25, 0x08	; 8
    4bc6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4bca:	1f 92       	push	r1
    4bcc:	cf 93       	push	r28
    4bce:	8a e4       	ldi	r24, 0x4A	; 74
    4bd0:	98 e0       	ldi	r25, 0x08	; 8
    4bd2:	9f 93       	push	r25
    4bd4:	8f 93       	push	r24
    4bd6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4bda:	88 e4       	ldi	r24, 0x48	; 72
    4bdc:	98 e0       	ldi	r25, 0x08	; 8
    4bde:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4be2:	8f e2       	ldi	r24, 0x2F	; 47
    4be4:	98 e0       	ldi	r25, 0x08	; 8
    4be6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4bea:	8c 2f       	mov	r24, r28
    4bec:	81 70       	andi	r24, 0x01	; 1
    4bee:	1f 92       	push	r1
    4bf0:	8f 93       	push	r24
    4bf2:	8c e2       	ldi	r24, 0x2C	; 44
    4bf4:	98 e0       	ldi	r25, 0x08	; 8
    4bf6:	9f 93       	push	r25
    4bf8:	8f 93       	push	r24
    4bfa:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4bfe:	8d b7       	in	r24, 0x3d	; 61
    4c00:	9e b7       	in	r25, 0x3e	; 62
    4c02:	80 96       	adiw	r24, 0x20	; 32
    4c04:	0f b6       	in	r0, 0x3f	; 63
    4c06:	f8 94       	cli
    4c08:	9e bf       	out	0x3e, r25	; 62
    4c0a:	0f be       	out	0x3f, r0	; 63
    4c0c:	8d bf       	out	0x3d, r24	; 61
    4c0e:	8a e2       	ldi	r24, 0x2A	; 42
    4c10:	98 e0       	ldi	r25, 0x08	; 8
    4c12:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4c16:	83 e1       	ldi	r24, 0x13	; 19
    4c18:	98 e0       	ldi	r25, 0x08	; 8
    4c1a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4c1e:	c1 fb       	bst	r28, 1
    4c20:	88 27       	eor	r24, r24
    4c22:	80 f9       	bld	r24, 0
    4c24:	1f 92       	push	r1
    4c26:	8f 93       	push	r24
    4c28:	80 e1       	ldi	r24, 0x10	; 16
    4c2a:	98 e0       	ldi	r25, 0x08	; 8
    4c2c:	9f 93       	push	r25
    4c2e:	8f 93       	push	r24
    4c30:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4c34:	8e e0       	ldi	r24, 0x0E	; 14
    4c36:	98 e0       	ldi	r25, 0x08	; 8
    4c38:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4c3c:	8c ef       	ldi	r24, 0xFC	; 252
    4c3e:	97 e0       	ldi	r25, 0x07	; 7
    4c40:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4c44:	c2 fb       	bst	r28, 2
    4c46:	88 27       	eor	r24, r24
    4c48:	80 f9       	bld	r24, 0
    4c4a:	1f 92       	push	r1
    4c4c:	8f 93       	push	r24
    4c4e:	89 ef       	ldi	r24, 0xF9	; 249
    4c50:	97 e0       	ldi	r25, 0x07	; 7
    4c52:	9f 93       	push	r25
    4c54:	8f 93       	push	r24
    4c56:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4c5a:	87 ef       	ldi	r24, 0xF7	; 247
    4c5c:	97 e0       	ldi	r25, 0x07	; 7
    4c5e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4c62:	85 ee       	ldi	r24, 0xE5	; 229
    4c64:	97 e0       	ldi	r25, 0x07	; 7
    4c66:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4c6a:	c3 fb       	bst	r28, 3
    4c6c:	88 27       	eor	r24, r24
    4c6e:	80 f9       	bld	r24, 0
    4c70:	1f 92       	push	r1
    4c72:	8f 93       	push	r24
    4c74:	82 ee       	ldi	r24, 0xE2	; 226
    4c76:	97 e0       	ldi	r25, 0x07	; 7
    4c78:	9f 93       	push	r25
    4c7a:	8f 93       	push	r24
    4c7c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4c80:	80 ee       	ldi	r24, 0xE0	; 224
    4c82:	97 e0       	ldi	r25, 0x07	; 7
    4c84:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4c88:	86 ed       	ldi	r24, 0xD6	; 214
    4c8a:	97 e0       	ldi	r25, 0x07	; 7
    4c8c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4c90:	c4 fb       	bst	r28, 4
    4c92:	88 27       	eor	r24, r24
    4c94:	80 f9       	bld	r24, 0
    4c96:	1f 92       	push	r1
    4c98:	8f 93       	push	r24
    4c9a:	83 ed       	ldi	r24, 0xD3	; 211
    4c9c:	97 e0       	ldi	r25, 0x07	; 7
    4c9e:	9f 93       	push	r25
    4ca0:	8f 93       	push	r24
    4ca2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4ca6:	81 ed       	ldi	r24, 0xD1	; 209
    4ca8:	97 e0       	ldi	r25, 0x07	; 7
    4caa:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4cae:	8f eb       	ldi	r24, 0xBF	; 191
    4cb0:	97 e0       	ldi	r25, 0x07	; 7
    4cb2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4cb6:	c5 fb       	bst	r28, 5
    4cb8:	88 27       	eor	r24, r24
    4cba:	80 f9       	bld	r24, 0
    4cbc:	1f 92       	push	r1
    4cbe:	8f 93       	push	r24
    4cc0:	8c eb       	ldi	r24, 0xBC	; 188
    4cc2:	97 e0       	ldi	r25, 0x07	; 7
    4cc4:	9f 93       	push	r25
    4cc6:	8f 93       	push	r24
    4cc8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4ccc:	8a eb       	ldi	r24, 0xBA	; 186
    4cce:	97 e0       	ldi	r25, 0x07	; 7
    4cd0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4cd4:	8e e9       	ldi	r24, 0x9E	; 158
    4cd6:	97 e0       	ldi	r25, 0x07	; 7
    4cd8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4cdc:	c6 fb       	bst	r28, 6
    4cde:	88 27       	eor	r24, r24
    4ce0:	80 f9       	bld	r24, 0
    4ce2:	1f 92       	push	r1
    4ce4:	8f 93       	push	r24
    4ce6:	8b e9       	ldi	r24, 0x9B	; 155
    4ce8:	97 e0       	ldi	r25, 0x07	; 7
    4cea:	9f 93       	push	r25
    4cec:	8f 93       	push	r24
    4cee:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4cf2:	89 e9       	ldi	r24, 0x99	; 153
    4cf4:	97 e0       	ldi	r25, 0x07	; 7
    4cf6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4cfa:	81 e9       	ldi	r24, 0x91	; 145
    4cfc:	97 e0       	ldi	r25, 0x07	; 7
    4cfe:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4d02:	c7 fb       	bst	r28, 7
    4d04:	cc 27       	eor	r28, r28
    4d06:	c0 f9       	bld	r28, 0
    4d08:	1f 92       	push	r1
    4d0a:	cf 93       	push	r28
    4d0c:	8e e8       	ldi	r24, 0x8E	; 142
    4d0e:	97 e0       	ldi	r25, 0x07	; 7
    4d10:	9f 93       	push	r25
    4d12:	8f 93       	push	r24
    4d14:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4d18:	8c e8       	ldi	r24, 0x8C	; 140
    4d1a:	97 e0       	ldi	r25, 0x07	; 7
    4d1c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
}
    4d20:	8d b7       	in	r24, 0x3d	; 61
    4d22:	9e b7       	in	r25, 0x3e	; 62
    4d24:	4c 96       	adiw	r24, 0x1c	; 28
    4d26:	0f b6       	in	r0, 0x3f	; 63
    4d28:	f8 94       	cli
    4d2a:	9e bf       	out	0x3e, r25	; 62
    4d2c:	0f be       	out	0x3f, r0	; 63
    4d2e:	8d bf       	out	0x3d, r24	; 61
    return true;
    4d30:	81 e0       	ldi	r24, 0x01	; 1
            break;
    4d32:	15 c0       	rjmp	.+42     	; 0x4d5e <command_common+0x2f6>
    print("\n\t- Magic -\n"
    4d34:	8f ee       	ldi	r24, 0xEF	; 239
    4d36:	96 e0       	ldi	r25, 0x06	; 6
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4d38:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            break;
    4d3c:	f9 cf       	rjmp	.-14     	; 0x4d30 <command_common+0x2c8>
            debug_enable   = false;
    4d3e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    4d42:	80 7f       	andi	r24, 0xF0	; 240
    4d44:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <debug_config>
    print("\n\t- Console -\n"
    4d48:	88 ec       	ldi	r24, 0xC8	; 200
    4d4a:	96 e0       	ldi	r25, 0x06	; 6
    4d4c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            print("C> ");
    4d50:	82 ed       	ldi	r24, 0xD2	; 210
    4d52:	9a e0       	ldi	r25, 0x0A	; 10
    4d54:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            command_state = CONSOLE;
    4d58:	81 e0       	ldi	r24, 0x01	; 1
    4d5a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <command_state>
}
    4d5e:	cf 91       	pop	r28
    4d60:	08 95       	ret
            if (debug_enable) {
    4d62:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    4d66:	80 ff       	sbrs	r24, 0
    4d68:	0a c0       	rjmp	.+20     	; 0x4d7e <command_common+0x316>
                print("\ndebug: off\n");
    4d6a:	84 eb       	ldi	r24, 0xB4	; 180
    4d6c:	9a e0       	ldi	r25, 0x0A	; 10
    4d6e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
                debug_enable   = false;
    4d72:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    4d76:	80 7f       	andi	r24, 0xF0	; 240
                debug_enable = true;
    4d78:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <debug_config>
    4d7c:	d9 cf       	rjmp	.-78     	; 0x4d30 <command_common+0x2c8>
                print("\ndebug: on\n");
    4d7e:	88 ea       	ldi	r24, 0xA8	; 168
    4d80:	9a e0       	ldi	r25, 0x0A	; 10
                print("\nmouse: on\n");
    4d82:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
                debug_enable = true;
    4d86:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <debug_config>
    4d8a:	81 60       	ori	r24, 0x01	; 1
    4d8c:	f5 cf       	rjmp	.-22     	; 0x4d78 <command_common+0x310>
            debug_matrix = !debug_matrix;
    4d8e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <debug_config>
    4d92:	89 2f       	mov	r24, r25
    4d94:	8d 7f       	andi	r24, 0xFD	; 253
    4d96:	91 ff       	sbrs	r25, 1
    4d98:	82 60       	ori	r24, 0x02	; 2
    4d9a:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <debug_config>
            if (debug_matrix) {
    4d9e:	81 ff       	sbrs	r24, 1
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <command_common+0x340>
                print("\nmatrix: on\n");
    4da2:	8b e9       	ldi	r24, 0x9B	; 155
    4da4:	9a e0       	ldi	r25, 0x0A	; 10
    4da6:	ed cf       	rjmp	.-38     	; 0x4d82 <command_common+0x31a>
                print("\nmatrix: off\n");
    4da8:	8d e8       	ldi	r24, 0x8D	; 141
    4daa:	9a e0       	ldi	r25, 0x0A	; 10
    4dac:	c5 cf       	rjmp	.-118    	; 0x4d38 <command_common+0x2d0>
            debug_keyboard = !debug_keyboard;
    4dae:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <debug_config>
    4db2:	89 2f       	mov	r24, r25
    4db4:	8b 7f       	andi	r24, 0xFB	; 251
    4db6:	92 ff       	sbrs	r25, 2
    4db8:	84 60       	ori	r24, 0x04	; 4
    4dba:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <debug_config>
            if (debug_keyboard) {
    4dbe:	82 ff       	sbrs	r24, 2
    4dc0:	03 c0       	rjmp	.+6      	; 0x4dc8 <command_common+0x360>
                print("\nkeyboard: on\n");
    4dc2:	8e e7       	ldi	r24, 0x7E	; 126
    4dc4:	9a e0       	ldi	r25, 0x0A	; 10
    4dc6:	dd cf       	rjmp	.-70     	; 0x4d82 <command_common+0x31a>
                print("\nkeyboard: off\n");
    4dc8:	8e e6       	ldi	r24, 0x6E	; 110
    4dca:	9a e0       	ldi	r25, 0x0A	; 10
    4dcc:	b5 cf       	rjmp	.-150    	; 0x4d38 <command_common+0x2d0>
            debug_mouse = !debug_mouse;
    4dce:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <debug_config>
    4dd2:	89 2f       	mov	r24, r25
    4dd4:	87 7f       	andi	r24, 0xF7	; 247
    4dd6:	93 ff       	sbrs	r25, 3
    4dd8:	88 60       	ori	r24, 0x08	; 8
    4dda:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <debug_config>
            if (debug_mouse) {
    4dde:	83 ff       	sbrs	r24, 3
    4de0:	03 c0       	rjmp	.+6      	; 0x4de8 <command_common+0x380>
                print("\nmouse: on\n");
    4de2:	82 e6       	ldi	r24, 0x62	; 98
    4de4:	9a e0       	ldi	r25, 0x0A	; 10
    4de6:	cd cf       	rjmp	.-102    	; 0x4d82 <command_common+0x31a>
                print("\nmouse: off\n");
    4de8:	85 e5       	ldi	r24, 0x55	; 85
    4dea:	9a e0       	ldi	r25, 0x0A	; 10
    4dec:	a5 cf       	rjmp	.-182    	; 0x4d38 <command_common+0x2d0>
            print("\n\t- Version -\n");
    4dee:	86 e4       	ldi	r24, 0x46	; 70
    4df0:	9a e0       	ldi	r25, 0x0A	; 10
    4df2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4df6:	8a e1       	ldi	r24, 0x1A	; 26
    4df8:	9a e0       	ldi	r25, 0x0A	; 10
    4dfa:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4dfe:	8f ec       	ldi	r24, 0xCF	; 207
    4e00:	99 e0       	ldi	r25, 0x09	; 9
    4e02:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            print("BUILD: " STR(TMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4e06:	87 ea       	ldi	r24, 0xA7	; 167
    4e08:	99 e0       	ldi	r25, 0x09	; 9
    4e0a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            print("OPTIONS:"
    4e0e:	87 e6       	ldi	r24, 0x67	; 103
    4e10:	99 e0       	ldi	r25, 0x09	; 9
    4e12:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4e16:	8a e3       	ldi	r24, 0x3A	; 58
    4e18:	99 e0       	ldi	r25, 0x09	; 9
    4e1a:	8e cf       	rjmp	.-228    	; 0x4d38 <command_common+0x2d0>
            print("\n\t- Status -\n");
    4e1c:	8c e2       	ldi	r24, 0x2C	; 44
    4e1e:	99 e0       	ldi	r25, 0x09	; 9
    4e20:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            print_val_hex8(host_keyboard_leds());
    4e24:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <host_keyboard_leds>
    4e28:	1f 92       	push	r1
    4e2a:	8f 93       	push	r24
    4e2c:	82 e1       	ldi	r24, 0x12	; 18
    4e2e:	99 e0       	ldi	r25, 0x09	; 9
    4e30:	9f 93       	push	r25
    4e32:	8f 93       	push	r24
    4e34:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4e38:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    4e3c:	1f 92       	push	r1
    4e3e:	8f 93       	push	r24
    4e40:	8b ef       	ldi	r24, 0xFB	; 251
    4e42:	98 e0       	ldi	r25, 0x08	; 8
    4e44:	9f 93       	push	r25
    4e46:	8f 93       	push	r24
    4e48:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
            print_val_hex8(keyboard_idle);
    4e4c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <keyboard_idle>
    4e50:	1f 92       	push	r1
    4e52:	8f 93       	push	r24
    4e54:	88 ee       	ldi	r24, 0xE8	; 232
    4e56:	98 e0       	ldi	r25, 0x08	; 8
    4e58:	9f 93       	push	r25
    4e5a:	8f 93       	push	r24
    4e5c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
            print_val_hex32(timer_read32());
    4e60:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <timer_read32>
    4e64:	9f 93       	push	r25
    4e66:	8f 93       	push	r24
    4e68:	7f 93       	push	r23
    4e6a:	6f 93       	push	r22
    4e6c:	81 ed       	ldi	r24, 0xD1	; 209
    4e6e:	98 e0       	ldi	r25, 0x08	; 8
    4e70:	9f 93       	push	r25
    4e72:	8f 93       	push	r24
    4e74:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
            break;
    4e78:	8d b7       	in	r24, 0x3d	; 61
    4e7a:	9e b7       	in	r25, 0x3e	; 62
    4e7c:	42 96       	adiw	r24, 0x12	; 18
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	f8 94       	cli
    4e82:	9e bf       	out	0x3e, r25	; 62
    4e84:	0f be       	out	0x3f, r0	; 63
    4e86:	8d bf       	out	0x3d, r24	; 61
    4e88:	53 cf       	rjmp	.-346    	; 0x4d30 <command_common+0x2c8>
            switch_default_layer(0);
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4e8c:	0e 94 03 25 	call	0x4a06	; 0x4a06 <switch_default_layer>
    4e90:	4f cf       	rjmp	.-354    	; 0x4d30 <command_common+0x2c8>
            switch_default_layer((code - KC_1) + 1);
    4e92:	8d 51       	subi	r24, 0x1D	; 29
    4e94:	fb cf       	rjmp	.-10     	; 0x4e8c <command_common+0x424>
            switch_default_layer((code - KC_F1) + 1);
    4e96:	89 53       	subi	r24, 0x39	; 57
    4e98:	f9 cf       	rjmp	.-14     	; 0x4e8c <command_common+0x424>

00004e9a <command_extra>:
}
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	08 95       	ret

00004e9e <command_console_extra>:
    4e9e:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <command_extra>

00004ea2 <command_proc>:
{
    4ea2:	cf 93       	push	r28
    4ea4:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4ea6:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <command_state>
    4eaa:	81 30       	cpi	r24, 0x01	; 1
    4eac:	c9 f0       	breq	.+50     	; 0x4ee0 <command_proc+0x3e>
    4eae:	82 30       	cpi	r24, 0x02	; 2
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <command_proc+0x12>
    4eb2:	4e c0       	rjmp	.+156    	; 0x4f50 <command_proc+0xae>
    4eb4:	81 11       	cpse	r24, r1
    4eb6:	3f c1       	rjmp	.+638    	; 0x5136 <command_proc+0x294>
            if (!IS_COMMAND())
    4eb8:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    4ebc:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    4ec0:	80 81       	ld	r24, Z
    4ec2:	81 52       	subi	r24, 0x21	; 33
    4ec4:	82 30       	cpi	r24, 0x02	; 2
    4ec6:	08 f0       	brcs	.+2      	; 0x4eca <command_proc+0x28>
    4ec8:	38 c1       	rjmp	.+624    	; 0x513a <command_proc+0x298>
                return (command_extra(code) || command_common(code));
    4eca:	8c 2f       	mov	r24, r28
    4ecc:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <command_extra>
    4ed0:	81 11       	cpse	r24, r1
    4ed2:	1f c0       	rjmp	.+62     	; 0x4f12 <command_proc+0x70>
    4ed4:	8c 2f       	mov	r24, r28
    4ed6:	0e 94 34 25 	call	0x4a68	; 0x4a68 <command_common>
                return (command_console_extra(code) || command_console(code));
    4eda:	81 70       	andi	r24, 0x01	; 1
}
    4edc:	cf 91       	pop	r28
    4ede:	08 95       	ret
            if (IS_COMMAND())
    4ee0:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    4ee4:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    4ee8:	80 81       	ld	r24, Z
    4eea:	81 52       	subi	r24, 0x21	; 33
    4eec:	82 30       	cpi	r24, 0x02	; 2
    4eee:	68 f3       	brcs	.-38     	; 0x4eca <command_proc+0x28>
                return (command_console_extra(code) || command_console(code));
    4ef0:	8c 2f       	mov	r24, r28
    4ef2:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <command_console_extra>
    4ef6:	81 11       	cpse	r24, r1
    4ef8:	1b c0       	rjmp	.+54     	; 0x4f30 <command_proc+0x8e>
    switch (code) {
    4efa:	c4 31       	cpi	r28, 0x14	; 20
    4efc:	d9 f0       	breq	.+54     	; 0x4f34 <command_proc+0x92>
    4efe:	60 f4       	brcc	.+24     	; 0x4f18 <command_proc+0x76>
    4f00:	cb 30       	cpi	r28, 0x0B	; 11
    4f02:	71 f0       	breq	.+28     	; 0x4f20 <command_proc+0x7e>
    4f04:	c0 31       	cpi	r28, 0x10	; 16
    4f06:	d1 f0       	breq	.+52     	; 0x4f3c <command_proc+0x9a>
            print("?");
    4f08:	89 eb       	ldi	r24, 0xB9	; 185
    4f0a:	96 e0       	ldi	r25, 0x06	; 6
    4f0c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4f10:	13 c0       	rjmp	.+38     	; 0x4f38 <command_proc+0x96>
                return (command_extra(code) || command_common(code));
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	e1 cf       	rjmp	.-62     	; 0x4eda <command_proc+0x38>
    switch (code) {
    4f18:	c9 32       	cpi	r28, 0x29	; 41
    4f1a:	61 f0       	breq	.+24     	; 0x4f34 <command_proc+0x92>
    4f1c:	c8 33       	cpi	r28, 0x38	; 56
    4f1e:	a1 f7       	brne	.-24     	; 0x4f08 <command_proc+0x66>
    print("\n\t- Console -\n"
    4f20:	88 ec       	ldi	r24, 0xC8	; 200
    4f22:	96 e0       	ldi	r25, 0x06	; 6
    4f24:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("C> ");
    4f28:	8f eb       	ldi	r24, 0xBF	; 191
    4f2a:	96 e0       	ldi	r25, 0x06	; 6
    4f2c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
                return (command_console_extra(code) || command_console(code));
    4f30:	81 e0       	ldi	r24, 0x01	; 1
    4f32:	d3 cf       	rjmp	.-90     	; 0x4eda <command_proc+0x38>
            command_state = ONESHOT;
    4f34:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <command_state>
                return (command_console_extra(code) || command_console(code));
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	cf cf       	rjmp	.-98     	; 0x4eda <command_proc+0x38>
            mousekey_console_help();
    4f3c:	0e 94 c7 23 	call	0x478e	; 0x478e <mousekey_console_help>
            print("M> ");
    4f40:	8b eb       	ldi	r24, 0xBB	; 187
    4f42:	96 e0       	ldi	r25, 0x06	; 6
    4f44:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            command_state = MOUSEKEY;
    4f48:	82 e0       	ldi	r24, 0x02	; 2
    4f4a:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <command_state>
            return true;
    4f4e:	f0 cf       	rjmp	.-32     	; 0x4f30 <command_proc+0x8e>
    switch (code) {
    4f50:	c9 32       	cpi	r28, 0x29	; 41
    4f52:	09 f4       	brne	.+2      	; 0x4f56 <command_proc+0xb4>
    4f54:	46 c0       	rjmp	.+140    	; 0x4fe2 <command_proc+0x140>
    4f56:	68 f5       	brcc	.+90     	; 0x4fb2 <command_proc+0x110>
    4f58:	c3 31       	cpi	r28, 0x13	; 19
    4f5a:	09 f4       	brne	.+2      	; 0x4f5e <command_proc+0xbc>
    4f5c:	51 c0       	rjmp	.+162    	; 0x5000 <command_proc+0x15e>
    4f5e:	50 f4       	brcc	.+20     	; 0x4f74 <command_proc+0xd2>
    4f60:	c7 30       	cpi	r28, 0x07	; 7
    4f62:	09 f4       	brne	.+2      	; 0x4f66 <command_proc+0xc4>
    4f64:	ce c0       	rjmp	.+412    	; 0x5102 <command_proc+0x260>
    4f66:	cb 30       	cpi	r28, 0x0B	; 11
    4f68:	c9 f1       	breq	.+114    	; 0x4fdc <command_proc+0x13a>
            print("?");
    4f6a:	8d e5       	ldi	r24, 0x5D	; 93
    4f6c:	95 e0       	ldi	r25, 0x05	; 5
        print("M>" );
    4f6e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    4f72:	1d c0       	rjmp	.+58     	; 0x4fae <command_proc+0x10c>
    switch (code) {
    4f74:	c4 31       	cpi	r28, 0x14	; 20
    4f76:	a9 f1       	breq	.+106    	; 0x4fe2 <command_proc+0x140>
    4f78:	ce 51       	subi	r28, 0x1E	; 30
    4f7a:	c6 30       	cpi	r28, 0x06	; 6
    4f7c:	b0 f7       	brcc	.-20     	; 0x4f6a <command_proc+0xc8>
            mousekey_param = numkey2num(code);
    4f7e:	ec 2f       	mov	r30, r28
    4f80:	f0 e0       	ldi	r31, 0x00	; 0
    4f82:	e2 5d       	subi	r30, 0xD2	; 210
    4f84:	fe 4f       	sbci	r31, 0xFE	; 254
    4f86:	80 81       	ld	r24, Z
    4f88:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <mousekey_param>
    if (mousekey_param) {
    4f8c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <mousekey_param>
    4f90:	88 23       	and	r24, r24
    4f92:	09 f4       	brne	.+2      	; 0x4f96 <command_proc+0xf4>
    4f94:	cd c0       	rjmp	.+410    	; 0x5130 <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    4f96:	1f 92       	push	r1
    4f98:	8f 93       	push	r24
    4f9a:	87 e5       	ldi	r24, 0x57	; 87
    4f9c:	95 e0       	ldi	r25, 0x05	; 5
    4f9e:	9f 93       	push	r25
    4fa0:	8f 93       	push	r24
    4fa2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    4fa6:	0f 90       	pop	r0
    4fa8:	0f 90       	pop	r0
    4faa:	0f 90       	pop	r0
    4fac:	0f 90       	pop	r0
    return true;
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	95 cf       	rjmp	.-214    	; 0x4edc <command_proc+0x3a>
    switch (code) {
    4fb2:	ce 34       	cpi	r28, 0x4E	; 78
    4fb4:	09 f4       	brne	.+2      	; 0x4fb8 <command_proc+0x116>
    4fb6:	a3 c0       	rjmp	.+326    	; 0x50fe <command_proc+0x25c>
    4fb8:	50 f4       	brcc	.+20     	; 0x4fce <command_proc+0x12c>
    4fba:	c8 33       	cpi	r28, 0x38	; 56
    4fbc:	79 f0       	breq	.+30     	; 0x4fdc <command_proc+0x13a>
            mousekey_param_inc(mousekey_param, 10);
    4fbe:	6a e0       	ldi	r22, 0x0A	; 10
    switch (code) {
    4fc0:	cb 34       	cpi	r28, 0x4B	; 75
    4fc2:	99 f6       	brne	.-90     	; 0x4f6a <command_proc+0xc8>
            mousekey_param_inc(mousekey_param, 10);
    4fc4:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <mousekey_param>
    4fc8:	0e 94 de 23 	call	0x47bc	; 0x47bc <mousekey_param_inc>
            break;
    4fcc:	df cf       	rjmp	.-66     	; 0x4f8c <command_proc+0xea>
    switch (code) {
    4fce:	c1 35       	cpi	r28, 0x51	; 81
    4fd0:	09 f4       	brne	.+2      	; 0x4fd4 <command_proc+0x132>
    4fd2:	8f c0       	rjmp	.+286    	; 0x50f2 <command_proc+0x250>
            mousekey_param_inc(mousekey_param, 1);
    4fd4:	61 e0       	ldi	r22, 0x01	; 1
    switch (code) {
    4fd6:	c2 35       	cpi	r28, 0x52	; 82
    4fd8:	a9 f3       	breq	.-22     	; 0x4fc4 <command_proc+0x122>
    4fda:	c7 cf       	rjmp	.-114    	; 0x4f6a <command_proc+0xc8>
            mousekey_console_help();
    4fdc:	0e 94 c7 23 	call	0x478e	; 0x478e <mousekey_console_help>
            break;
    4fe0:	d5 cf       	rjmp	.-86     	; 0x4f8c <command_proc+0xea>
            if (mousekey_param) {
    4fe2:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <mousekey_param>
    4fe6:	88 23       	and	r24, r24
    4fe8:	19 f0       	breq	.+6      	; 0x4ff0 <command_proc+0x14e>
                mousekey_param = 0;
    4fea:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <mousekey_param>
            break;
    4fee:	ce cf       	rjmp	.-100    	; 0x4f8c <command_proc+0xea>
                print("C> ");
    4ff0:	8c e6       	ldi	r24, 0x6C	; 108
    4ff2:	95 e0       	ldi	r25, 0x05	; 5
    4ff4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
                command_state = CONSOLE;
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <command_state>
                return false;
    4ffe:	6e cf       	rjmp	.-292    	; 0x4edc <command_proc+0x3a>
    print("\n\t- Values -\n");
    5000:	86 e4       	ldi	r24, 0x46	; 70
    5002:	95 e0       	ldi	r25, 0x05	; 5
    5004:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5008:	84 e3       	ldi	r24, 0x34	; 52
    500a:	95 e0       	ldi	r25, 0x05	; 5
    500c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    5010:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    5014:	1f 92       	push	r1
    5016:	8f 93       	push	r24
    5018:	81 e3       	ldi	r24, 0x31	; 49
    501a:	95 e0       	ldi	r25, 0x05	; 5
    501c:	9f 93       	push	r25
    501e:	8f 93       	push	r24
    5020:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    5024:	8f e2       	ldi	r24, 0x2F	; 47
    5026:	95 e0       	ldi	r25, 0x05	; 5
    5028:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    502c:	8d e1       	ldi	r24, 0x1D	; 29
    502e:	95 e0       	ldi	r25, 0x05	; 5
    5030:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    5034:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    5038:	1f 92       	push	r1
    503a:	8f 93       	push	r24
    503c:	8a e1       	ldi	r24, 0x1A	; 26
    503e:	95 e0       	ldi	r25, 0x05	; 5
    5040:	9f 93       	push	r25
    5042:	8f 93       	push	r24
    5044:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    5048:	88 e1       	ldi	r24, 0x18	; 24
    504a:	95 e0       	ldi	r25, 0x05	; 5
    504c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5050:	89 e0       	ldi	r24, 0x09	; 9
    5052:	95 e0       	ldi	r25, 0x05	; 5
    5054:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    5058:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    505c:	1f 92       	push	r1
    505e:	8f 93       	push	r24
    5060:	86 e0       	ldi	r24, 0x06	; 6
    5062:	95 e0       	ldi	r25, 0x05	; 5
    5064:	9f 93       	push	r25
    5066:	8f 93       	push	r24
    5068:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    506c:	84 e0       	ldi	r24, 0x04	; 4
    506e:	95 e0       	ldi	r25, 0x05	; 5
    5070:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5074:	83 ef       	ldi	r24, 0xF3	; 243
    5076:	94 e0       	ldi	r25, 0x04	; 4
    5078:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    507c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    5080:	1f 92       	push	r1
    5082:	8f 93       	push	r24
    5084:	80 ef       	ldi	r24, 0xF0	; 240
    5086:	94 e0       	ldi	r25, 0x04	; 4
    5088:	9f 93       	push	r25
    508a:	8f 93       	push	r24
    508c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    5090:	8e ee       	ldi	r24, 0xEE	; 238
    5092:	94 e0       	ldi	r25, 0x04	; 4
    5094:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5098:	89 ed       	ldi	r24, 0xD9	; 217
    509a:	94 e0       	ldi	r25, 0x04	; 4
    509c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    50a0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    50a4:	1f 92       	push	r1
    50a6:	8f 93       	push	r24
    50a8:	86 ed       	ldi	r24, 0xD6	; 214
    50aa:	94 e0       	ldi	r25, 0x04	; 4
    50ac:	9f 93       	push	r25
    50ae:	8f 93       	push	r24
    50b0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    50b4:	84 ed       	ldi	r24, 0xD4	; 212
    50b6:	94 e0       	ldi	r25, 0x04	; 4
    50b8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    50bc:	8d eb       	ldi	r24, 0xBD	; 189
    50be:	94 e0       	ldi	r25, 0x04	; 4
    50c0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
    50c4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    50c8:	1f 92       	push	r1
    50ca:	8f 93       	push	r24
    50cc:	8a eb       	ldi	r24, 0xBA	; 186
    50ce:	94 e0       	ldi	r25, 0x04	; 4
    50d0:	9f 93       	push	r25
    50d2:	8f 93       	push	r24
    50d4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__xprintf>
    50d8:	88 eb       	ldi	r24, 0xB8	; 184
    50da:	94 e0       	ldi	r25, 0x04	; 4
    50dc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
}
    50e0:	8d b7       	in	r24, 0x3d	; 61
    50e2:	9e b7       	in	r25, 0x3e	; 62
    50e4:	48 96       	adiw	r24, 0x18	; 24
    50e6:	0f b6       	in	r0, 0x3f	; 63
    50e8:	f8 94       	cli
    50ea:	9e bf       	out	0x3e, r25	; 62
    50ec:	0f be       	out	0x3f, r0	; 63
    50ee:	8d bf       	out	0x3d, r24	; 61
    50f0:	4d cf       	rjmp	.-358    	; 0x4f8c <command_proc+0xea>
            mousekey_param_dec(mousekey_param, 1);
    50f2:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    50f4:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <mousekey_param>
    50f8:	0e 94 83 24 	call	0x4906	; 0x4906 <mousekey_param_dec>
            break;
    50fc:	47 cf       	rjmp	.-370    	; 0x4f8c <command_proc+0xea>
            mousekey_param_dec(mousekey_param, 10);
    50fe:	6a e0       	ldi	r22, 0x0A	; 10
    5100:	f9 cf       	rjmp	.-14     	; 0x50f4 <command_proc+0x252>
            mk_delay = MOUSEKEY_DELAY/10;
    5102:	8e e1       	ldi	r24, 0x1E	; 30
    5104:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    5108:	82 e3       	ldi	r24, 0x32	; 50
    510a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    510e:	8a e0       	ldi	r24, 0x0A	; 10
    5110:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5114:	84 e1       	ldi	r24, 0x14	; 20
    5116:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    511a:	88 e0       	ldi	r24, 0x08	; 8
    511c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5120:	88 e2       	ldi	r24, 0x28	; 40
    5122:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_wheel_time_to_max>
            print("set default\n");
    5126:	8f e5       	ldi	r24, 0x5F	; 95
    5128:	95 e0       	ldi	r25, 0x05	; 5
    512a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <xputs>
            break;
    512e:	2e cf       	rjmp	.-420    	; 0x4f8c <command_proc+0xea>
        print("M>" );
    5130:	84 e5       	ldi	r24, 0x54	; 84
    5132:	95 e0       	ldi	r25, 0x05	; 5
    5134:	1c cf       	rjmp	.-456    	; 0x4f6e <command_proc+0xcc>
            command_state = ONESHOT;
    5136:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <command_state>
                return false;
    513a:	80 e0       	ldi	r24, 0x00	; 0
    513c:	cf ce       	rjmp	.-610    	; 0x4edc <command_proc+0x3a>

0000513e <__fixsfsi>:
    513e:	0e 94 a6 28 	call	0x514c	; 0x514c <__fixunssfsi>
    5142:	68 94       	set
    5144:	b1 11       	cpse	r27, r1
    5146:	0c 94 35 29 	jmp	0x526a	; 0x526a <__fp_szero>
    514a:	08 95       	ret

0000514c <__fixunssfsi>:
    514c:	0e 94 1a 29 	call	0x5234	; 0x5234 <__fp_splitA>
    5150:	88 f0       	brcs	.+34     	; 0x5174 <__fixunssfsi+0x28>
    5152:	9f 57       	subi	r25, 0x7F	; 127
    5154:	98 f0       	brcs	.+38     	; 0x517c <__fixunssfsi+0x30>
    5156:	b9 2f       	mov	r27, r25
    5158:	99 27       	eor	r25, r25
    515a:	b7 51       	subi	r27, 0x17	; 23
    515c:	b0 f0       	brcs	.+44     	; 0x518a <__fixunssfsi+0x3e>
    515e:	e1 f0       	breq	.+56     	; 0x5198 <__fixunssfsi+0x4c>
    5160:	66 0f       	add	r22, r22
    5162:	77 1f       	adc	r23, r23
    5164:	88 1f       	adc	r24, r24
    5166:	99 1f       	adc	r25, r25
    5168:	1a f0       	brmi	.+6      	; 0x5170 <__fixunssfsi+0x24>
    516a:	ba 95       	dec	r27
    516c:	c9 f7       	brne	.-14     	; 0x5160 <__fixunssfsi+0x14>
    516e:	14 c0       	rjmp	.+40     	; 0x5198 <__fixunssfsi+0x4c>
    5170:	b1 30       	cpi	r27, 0x01	; 1
    5172:	91 f0       	breq	.+36     	; 0x5198 <__fixunssfsi+0x4c>
    5174:	0e 94 34 29 	call	0x5268	; 0x5268 <__fp_zero>
    5178:	b1 e0       	ldi	r27, 0x01	; 1
    517a:	08 95       	ret
    517c:	0c 94 34 29 	jmp	0x5268	; 0x5268 <__fp_zero>
    5180:	67 2f       	mov	r22, r23
    5182:	78 2f       	mov	r23, r24
    5184:	88 27       	eor	r24, r24
    5186:	b8 5f       	subi	r27, 0xF8	; 248
    5188:	39 f0       	breq	.+14     	; 0x5198 <__fixunssfsi+0x4c>
    518a:	b9 3f       	cpi	r27, 0xF9	; 249
    518c:	cc f3       	brlt	.-14     	; 0x5180 <__fixunssfsi+0x34>
    518e:	86 95       	lsr	r24
    5190:	77 95       	ror	r23
    5192:	67 95       	ror	r22
    5194:	b3 95       	inc	r27
    5196:	d9 f7       	brne	.-10     	; 0x518e <__fixunssfsi+0x42>
    5198:	3e f4       	brtc	.+14     	; 0x51a8 <__fixunssfsi+0x5c>
    519a:	90 95       	com	r25
    519c:	80 95       	com	r24
    519e:	70 95       	com	r23
    51a0:	61 95       	neg	r22
    51a2:	7f 4f       	sbci	r23, 0xFF	; 255
    51a4:	8f 4f       	sbci	r24, 0xFF	; 255
    51a6:	9f 4f       	sbci	r25, 0xFF	; 255
    51a8:	08 95       	ret

000051aa <__floatunsisf>:
    51aa:	e8 94       	clt
    51ac:	09 c0       	rjmp	.+18     	; 0x51c0 <__floatsisf+0x12>

000051ae <__floatsisf>:
    51ae:	97 fb       	bst	r25, 7
    51b0:	3e f4       	brtc	.+14     	; 0x51c0 <__floatsisf+0x12>
    51b2:	90 95       	com	r25
    51b4:	80 95       	com	r24
    51b6:	70 95       	com	r23
    51b8:	61 95       	neg	r22
    51ba:	7f 4f       	sbci	r23, 0xFF	; 255
    51bc:	8f 4f       	sbci	r24, 0xFF	; 255
    51be:	9f 4f       	sbci	r25, 0xFF	; 255
    51c0:	99 23       	and	r25, r25
    51c2:	a9 f0       	breq	.+42     	; 0x51ee <__floatsisf+0x40>
    51c4:	f9 2f       	mov	r31, r25
    51c6:	96 e9       	ldi	r25, 0x96	; 150
    51c8:	bb 27       	eor	r27, r27
    51ca:	93 95       	inc	r25
    51cc:	f6 95       	lsr	r31
    51ce:	87 95       	ror	r24
    51d0:	77 95       	ror	r23
    51d2:	67 95       	ror	r22
    51d4:	b7 95       	ror	r27
    51d6:	f1 11       	cpse	r31, r1
    51d8:	f8 cf       	rjmp	.-16     	; 0x51ca <__floatsisf+0x1c>
    51da:	fa f4       	brpl	.+62     	; 0x521a <__floatsisf+0x6c>
    51dc:	bb 0f       	add	r27, r27
    51de:	11 f4       	brne	.+4      	; 0x51e4 <__floatsisf+0x36>
    51e0:	60 ff       	sbrs	r22, 0
    51e2:	1b c0       	rjmp	.+54     	; 0x521a <__floatsisf+0x6c>
    51e4:	6f 5f       	subi	r22, 0xFF	; 255
    51e6:	7f 4f       	sbci	r23, 0xFF	; 255
    51e8:	8f 4f       	sbci	r24, 0xFF	; 255
    51ea:	9f 4f       	sbci	r25, 0xFF	; 255
    51ec:	16 c0       	rjmp	.+44     	; 0x521a <__floatsisf+0x6c>
    51ee:	88 23       	and	r24, r24
    51f0:	11 f0       	breq	.+4      	; 0x51f6 <__floatsisf+0x48>
    51f2:	96 e9       	ldi	r25, 0x96	; 150
    51f4:	11 c0       	rjmp	.+34     	; 0x5218 <__floatsisf+0x6a>
    51f6:	77 23       	and	r23, r23
    51f8:	21 f0       	breq	.+8      	; 0x5202 <__floatsisf+0x54>
    51fa:	9e e8       	ldi	r25, 0x8E	; 142
    51fc:	87 2f       	mov	r24, r23
    51fe:	76 2f       	mov	r23, r22
    5200:	05 c0       	rjmp	.+10     	; 0x520c <__floatsisf+0x5e>
    5202:	66 23       	and	r22, r22
    5204:	71 f0       	breq	.+28     	; 0x5222 <__floatsisf+0x74>
    5206:	96 e8       	ldi	r25, 0x86	; 134
    5208:	86 2f       	mov	r24, r22
    520a:	70 e0       	ldi	r23, 0x00	; 0
    520c:	60 e0       	ldi	r22, 0x00	; 0
    520e:	2a f0       	brmi	.+10     	; 0x521a <__floatsisf+0x6c>
    5210:	9a 95       	dec	r25
    5212:	66 0f       	add	r22, r22
    5214:	77 1f       	adc	r23, r23
    5216:	88 1f       	adc	r24, r24
    5218:	da f7       	brpl	.-10     	; 0x5210 <__floatsisf+0x62>
    521a:	88 0f       	add	r24, r24
    521c:	96 95       	lsr	r25
    521e:	87 95       	ror	r24
    5220:	97 f9       	bld	r25, 7
    5222:	08 95       	ret

00005224 <__fp_split3>:
    5224:	57 fd       	sbrc	r21, 7
    5226:	90 58       	subi	r25, 0x80	; 128
    5228:	44 0f       	add	r20, r20
    522a:	55 1f       	adc	r21, r21
    522c:	59 f0       	breq	.+22     	; 0x5244 <__fp_splitA+0x10>
    522e:	5f 3f       	cpi	r21, 0xFF	; 255
    5230:	71 f0       	breq	.+28     	; 0x524e <__fp_splitA+0x1a>
    5232:	47 95       	ror	r20

00005234 <__fp_splitA>:
    5234:	88 0f       	add	r24, r24
    5236:	97 fb       	bst	r25, 7
    5238:	99 1f       	adc	r25, r25
    523a:	61 f0       	breq	.+24     	; 0x5254 <__fp_splitA+0x20>
    523c:	9f 3f       	cpi	r25, 0xFF	; 255
    523e:	79 f0       	breq	.+30     	; 0x525e <__fp_splitA+0x2a>
    5240:	87 95       	ror	r24
    5242:	08 95       	ret
    5244:	12 16       	cp	r1, r18
    5246:	13 06       	cpc	r1, r19
    5248:	14 06       	cpc	r1, r20
    524a:	55 1f       	adc	r21, r21
    524c:	f2 cf       	rjmp	.-28     	; 0x5232 <__fp_split3+0xe>
    524e:	46 95       	lsr	r20
    5250:	f1 df       	rcall	.-30     	; 0x5234 <__fp_splitA>
    5252:	08 c0       	rjmp	.+16     	; 0x5264 <__fp_splitA+0x30>
    5254:	16 16       	cp	r1, r22
    5256:	17 06       	cpc	r1, r23
    5258:	18 06       	cpc	r1, r24
    525a:	99 1f       	adc	r25, r25
    525c:	f1 cf       	rjmp	.-30     	; 0x5240 <__fp_splitA+0xc>
    525e:	86 95       	lsr	r24
    5260:	71 05       	cpc	r23, r1
    5262:	61 05       	cpc	r22, r1
    5264:	08 94       	sec
    5266:	08 95       	ret

00005268 <__fp_zero>:
    5268:	e8 94       	clt

0000526a <__fp_szero>:
    526a:	bb 27       	eor	r27, r27
    526c:	66 27       	eor	r22, r22
    526e:	77 27       	eor	r23, r23
    5270:	cb 01       	movw	r24, r22
    5272:	97 f9       	bld	r25, 7
    5274:	08 95       	ret

00005276 <__mulsf3>:
    5276:	0e 94 4d 29 	call	0x529a	; 0x529a <__mulsf3x>
    527a:	0c 94 c7 29 	jmp	0x538e	; 0x538e <__fp_round>
    527e:	0e 94 b9 29 	call	0x5372	; 0x5372 <__fp_pscA>
    5282:	38 f0       	brcs	.+14     	; 0x5292 <__mulsf3+0x1c>
    5284:	0e 94 c0 29 	call	0x5380	; 0x5380 <__fp_pscB>
    5288:	20 f0       	brcs	.+8      	; 0x5292 <__mulsf3+0x1c>
    528a:	95 23       	and	r25, r21
    528c:	11 f0       	breq	.+4      	; 0x5292 <__mulsf3+0x1c>
    528e:	0c 94 b0 29 	jmp	0x5360	; 0x5360 <__fp_inf>
    5292:	0c 94 b6 29 	jmp	0x536c	; 0x536c <__fp_nan>
    5296:	0c 94 35 29 	jmp	0x526a	; 0x526a <__fp_szero>

0000529a <__mulsf3x>:
    529a:	0e 94 12 29 	call	0x5224	; 0x5224 <__fp_split3>
    529e:	78 f3       	brcs	.-34     	; 0x527e <__mulsf3+0x8>

000052a0 <__mulsf3_pse>:
    52a0:	99 23       	and	r25, r25
    52a2:	c9 f3       	breq	.-14     	; 0x5296 <__mulsf3+0x20>
    52a4:	55 23       	and	r21, r21
    52a6:	b9 f3       	breq	.-18     	; 0x5296 <__mulsf3+0x20>
    52a8:	95 0f       	add	r25, r21
    52aa:	50 e0       	ldi	r21, 0x00	; 0
    52ac:	55 1f       	adc	r21, r21
    52ae:	aa 27       	eor	r26, r26
    52b0:	ee 27       	eor	r30, r30
    52b2:	ff 27       	eor	r31, r31
    52b4:	bb 27       	eor	r27, r27
    52b6:	00 24       	eor	r0, r0
    52b8:	08 94       	sec
    52ba:	67 95       	ror	r22
    52bc:	20 f4       	brcc	.+8      	; 0x52c6 <__mulsf3_pse+0x26>
    52be:	e2 0f       	add	r30, r18
    52c0:	f3 1f       	adc	r31, r19
    52c2:	b4 1f       	adc	r27, r20
    52c4:	0a 1e       	adc	r0, r26
    52c6:	22 0f       	add	r18, r18
    52c8:	33 1f       	adc	r19, r19
    52ca:	44 1f       	adc	r20, r20
    52cc:	aa 1f       	adc	r26, r26
    52ce:	66 95       	lsr	r22
    52d0:	a9 f7       	brne	.-22     	; 0x52bc <__mulsf3_pse+0x1c>
    52d2:	77 95       	ror	r23
    52d4:	30 f4       	brcc	.+12     	; 0x52e2 <__mulsf3_pse+0x42>
    52d6:	f3 0f       	add	r31, r19
    52d8:	b4 1f       	adc	r27, r20
    52da:	0a 1e       	adc	r0, r26
    52dc:	12 1e       	adc	r1, r18
    52de:	08 f4       	brcc	.+2      	; 0x52e2 <__mulsf3_pse+0x42>
    52e0:	63 95       	inc	r22
    52e2:	33 0f       	add	r19, r19
    52e4:	44 1f       	adc	r20, r20
    52e6:	aa 1f       	adc	r26, r26
    52e8:	22 1f       	adc	r18, r18
    52ea:	76 95       	lsr	r23
    52ec:	99 f7       	brne	.-26     	; 0x52d4 <__mulsf3_pse+0x34>
    52ee:	87 95       	ror	r24
    52f0:	20 f4       	brcc	.+8      	; 0x52fa <__mulsf3_pse+0x5a>
    52f2:	b4 0f       	add	r27, r20
    52f4:	0a 1e       	adc	r0, r26
    52f6:	12 1e       	adc	r1, r18
    52f8:	63 1f       	adc	r22, r19
    52fa:	44 0f       	add	r20, r20
    52fc:	aa 1f       	adc	r26, r26
    52fe:	22 1f       	adc	r18, r18
    5300:	33 1f       	adc	r19, r19
    5302:	86 95       	lsr	r24
    5304:	a9 f7       	brne	.-22     	; 0x52f0 <__mulsf3_pse+0x50>
    5306:	86 2f       	mov	r24, r22
    5308:	71 2d       	mov	r23, r1
    530a:	60 2d       	mov	r22, r0
    530c:	11 24       	eor	r1, r1
    530e:	9f 57       	subi	r25, 0x7F	; 127
    5310:	50 40       	sbci	r21, 0x00	; 0
    5312:	9a f0       	brmi	.+38     	; 0x533a <__mulsf3_pse+0x9a>
    5314:	f1 f0       	breq	.+60     	; 0x5352 <__mulsf3_pse+0xb2>
    5316:	88 23       	and	r24, r24
    5318:	4a f0       	brmi	.+18     	; 0x532c <__mulsf3_pse+0x8c>
    531a:	ee 0f       	add	r30, r30
    531c:	ff 1f       	adc	r31, r31
    531e:	bb 1f       	adc	r27, r27
    5320:	66 1f       	adc	r22, r22
    5322:	77 1f       	adc	r23, r23
    5324:	88 1f       	adc	r24, r24
    5326:	91 50       	subi	r25, 0x01	; 1
    5328:	50 40       	sbci	r21, 0x00	; 0
    532a:	a9 f7       	brne	.-22     	; 0x5316 <__mulsf3_pse+0x76>
    532c:	9e 3f       	cpi	r25, 0xFE	; 254
    532e:	51 05       	cpc	r21, r1
    5330:	80 f0       	brcs	.+32     	; 0x5352 <__mulsf3_pse+0xb2>
    5332:	0c 94 b0 29 	jmp	0x5360	; 0x5360 <__fp_inf>
    5336:	0c 94 35 29 	jmp	0x526a	; 0x526a <__fp_szero>
    533a:	5f 3f       	cpi	r21, 0xFF	; 255
    533c:	e4 f3       	brlt	.-8      	; 0x5336 <__mulsf3_pse+0x96>
    533e:	98 3e       	cpi	r25, 0xE8	; 232
    5340:	d4 f3       	brlt	.-12     	; 0x5336 <__mulsf3_pse+0x96>
    5342:	86 95       	lsr	r24
    5344:	77 95       	ror	r23
    5346:	67 95       	ror	r22
    5348:	b7 95       	ror	r27
    534a:	f7 95       	ror	r31
    534c:	e7 95       	ror	r30
    534e:	9f 5f       	subi	r25, 0xFF	; 255
    5350:	c1 f7       	brne	.-16     	; 0x5342 <__mulsf3_pse+0xa2>
    5352:	fe 2b       	or	r31, r30
    5354:	88 0f       	add	r24, r24
    5356:	91 1d       	adc	r25, r1
    5358:	96 95       	lsr	r25
    535a:	87 95       	ror	r24
    535c:	97 f9       	bld	r25, 7
    535e:	08 95       	ret

00005360 <__fp_inf>:
    5360:	97 f9       	bld	r25, 7
    5362:	9f 67       	ori	r25, 0x7F	; 127
    5364:	80 e8       	ldi	r24, 0x80	; 128
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	60 e0       	ldi	r22, 0x00	; 0
    536a:	08 95       	ret

0000536c <__fp_nan>:
    536c:	9f ef       	ldi	r25, 0xFF	; 255
    536e:	80 ec       	ldi	r24, 0xC0	; 192
    5370:	08 95       	ret

00005372 <__fp_pscA>:
    5372:	00 24       	eor	r0, r0
    5374:	0a 94       	dec	r0
    5376:	16 16       	cp	r1, r22
    5378:	17 06       	cpc	r1, r23
    537a:	18 06       	cpc	r1, r24
    537c:	09 06       	cpc	r0, r25
    537e:	08 95       	ret

00005380 <__fp_pscB>:
    5380:	00 24       	eor	r0, r0
    5382:	0a 94       	dec	r0
    5384:	12 16       	cp	r1, r18
    5386:	13 06       	cpc	r1, r19
    5388:	14 06       	cpc	r1, r20
    538a:	05 06       	cpc	r0, r21
    538c:	08 95       	ret

0000538e <__fp_round>:
    538e:	09 2e       	mov	r0, r25
    5390:	03 94       	inc	r0
    5392:	00 0c       	add	r0, r0
    5394:	11 f4       	brne	.+4      	; 0x539a <__fp_round+0xc>
    5396:	88 23       	and	r24, r24
    5398:	52 f0       	brmi	.+20     	; 0x53ae <__fp_round+0x20>
    539a:	bb 0f       	add	r27, r27
    539c:	40 f4       	brcc	.+16     	; 0x53ae <__fp_round+0x20>
    539e:	bf 2b       	or	r27, r31
    53a0:	11 f4       	brne	.+4      	; 0x53a6 <__fp_round+0x18>
    53a2:	60 ff       	sbrs	r22, 0
    53a4:	04 c0       	rjmp	.+8      	; 0x53ae <__fp_round+0x20>
    53a6:	6f 5f       	subi	r22, 0xFF	; 255
    53a8:	7f 4f       	sbci	r23, 0xFF	; 255
    53aa:	8f 4f       	sbci	r24, 0xFF	; 255
    53ac:	9f 4f       	sbci	r25, 0xFF	; 255
    53ae:	08 95       	ret

000053b0 <__mulhi3>:
    53b0:	00 24       	eor	r0, r0
    53b2:	55 27       	eor	r21, r21
    53b4:	04 c0       	rjmp	.+8      	; 0x53be <__mulhi3+0xe>
    53b6:	08 0e       	add	r0, r24
    53b8:	59 1f       	adc	r21, r25
    53ba:	88 0f       	add	r24, r24
    53bc:	99 1f       	adc	r25, r25
    53be:	00 97       	sbiw	r24, 0x00	; 0
    53c0:	29 f0       	breq	.+10     	; 0x53cc <__mulhi3+0x1c>
    53c2:	76 95       	lsr	r23
    53c4:	67 95       	ror	r22
    53c6:	b8 f3       	brcs	.-18     	; 0x53b6 <__mulhi3+0x6>
    53c8:	71 05       	cpc	r23, r1
    53ca:	b9 f7       	brne	.-18     	; 0x53ba <__mulhi3+0xa>
    53cc:	80 2d       	mov	r24, r0
    53ce:	95 2f       	mov	r25, r21
    53d0:	08 95       	ret

000053d2 <__divmodhi4>:
    53d2:	97 fb       	bst	r25, 7
    53d4:	07 2e       	mov	r0, r23
    53d6:	16 f4       	brtc	.+4      	; 0x53dc <__divmodhi4+0xa>
    53d8:	00 94       	com	r0
    53da:	07 d0       	rcall	.+14     	; 0x53ea <__divmodhi4_neg1>
    53dc:	77 fd       	sbrc	r23, 7
    53de:	09 d0       	rcall	.+18     	; 0x53f2 <__divmodhi4_neg2>
    53e0:	0e 94 03 2a 	call	0x5406	; 0x5406 <__udivmodhi4>
    53e4:	07 fc       	sbrc	r0, 7
    53e6:	05 d0       	rcall	.+10     	; 0x53f2 <__divmodhi4_neg2>
    53e8:	3e f4       	brtc	.+14     	; 0x53f8 <__divmodhi4_exit>

000053ea <__divmodhi4_neg1>:
    53ea:	90 95       	com	r25
    53ec:	81 95       	neg	r24
    53ee:	9f 4f       	sbci	r25, 0xFF	; 255
    53f0:	08 95       	ret

000053f2 <__divmodhi4_neg2>:
    53f2:	70 95       	com	r23
    53f4:	61 95       	neg	r22
    53f6:	7f 4f       	sbci	r23, 0xFF	; 255

000053f8 <__divmodhi4_exit>:
    53f8:	08 95       	ret

000053fa <__tablejump2__>:
    53fa:	ee 0f       	add	r30, r30
    53fc:	ff 1f       	adc	r31, r31
    53fe:	05 90       	lpm	r0, Z+
    5400:	f4 91       	lpm	r31, Z
    5402:	e0 2d       	mov	r30, r0
    5404:	09 94       	ijmp

00005406 <__udivmodhi4>:
    5406:	aa 1b       	sub	r26, r26
    5408:	bb 1b       	sub	r27, r27
    540a:	51 e1       	ldi	r21, 0x11	; 17
    540c:	07 c0       	rjmp	.+14     	; 0x541c <__udivmodhi4_ep>

0000540e <__udivmodhi4_loop>:
    540e:	aa 1f       	adc	r26, r26
    5410:	bb 1f       	adc	r27, r27
    5412:	a6 17       	cp	r26, r22
    5414:	b7 07       	cpc	r27, r23
    5416:	10 f0       	brcs	.+4      	; 0x541c <__udivmodhi4_ep>
    5418:	a6 1b       	sub	r26, r22
    541a:	b7 0b       	sbc	r27, r23

0000541c <__udivmodhi4_ep>:
    541c:	88 1f       	adc	r24, r24
    541e:	99 1f       	adc	r25, r25
    5420:	5a 95       	dec	r21
    5422:	a9 f7       	brne	.-22     	; 0x540e <__udivmodhi4_loop>
    5424:	80 95       	com	r24
    5426:	90 95       	com	r25
    5428:	bc 01       	movw	r22, r24
    542a:	cd 01       	movw	r24, r26
    542c:	08 95       	ret

0000542e <eeprom_read_byte>:
    542e:	f9 99       	sbic	0x1f, 1	; 31
    5430:	fe cf       	rjmp	.-4      	; 0x542e <eeprom_read_byte>
    5432:	92 bd       	out	0x22, r25	; 34
    5434:	81 bd       	out	0x21, r24	; 33
    5436:	f8 9a       	sbi	0x1f, 0	; 31
    5438:	99 27       	eor	r25, r25
    543a:	80 b5       	in	r24, 0x20	; 32
    543c:	08 95       	ret

0000543e <eeprom_read_word>:
    543e:	a8 e1       	ldi	r26, 0x18	; 24
    5440:	b0 e0       	ldi	r27, 0x00	; 0
    5442:	42 e0       	ldi	r20, 0x02	; 2
    5444:	50 e0       	ldi	r21, 0x00	; 0
    5446:	0c 94 3a 2a 	jmp	0x5474	; 0x5474 <eeprom_read_blraw>

0000544a <eeprom_write_byte>:
    544a:	26 2f       	mov	r18, r22

0000544c <eeprom_write_r18>:
    544c:	f9 99       	sbic	0x1f, 1	; 31
    544e:	fe cf       	rjmp	.-4      	; 0x544c <eeprom_write_r18>
    5450:	1f ba       	out	0x1f, r1	; 31
    5452:	92 bd       	out	0x22, r25	; 34
    5454:	81 bd       	out	0x21, r24	; 33
    5456:	20 bd       	out	0x20, r18	; 32
    5458:	0f b6       	in	r0, 0x3f	; 63
    545a:	f8 94       	cli
    545c:	fa 9a       	sbi	0x1f, 2	; 31
    545e:	f9 9a       	sbi	0x1f, 1	; 31
    5460:	0f be       	out	0x3f, r0	; 63
    5462:	01 96       	adiw	r24, 0x01	; 1
    5464:	08 95       	ret

00005466 <eeprom_write_word>:
    5466:	0e 94 25 2a 	call	0x544a	; 0x544a <eeprom_write_byte>
    546a:	27 2f       	mov	r18, r23
    546c:	0c 94 26 2a 	jmp	0x544c	; 0x544c <eeprom_write_r18>

00005470 <eeprom_read_block>:
    5470:	dc 01       	movw	r26, r24
    5472:	cb 01       	movw	r24, r22

00005474 <eeprom_read_blraw>:
    5474:	fc 01       	movw	r30, r24
    5476:	f9 99       	sbic	0x1f, 1	; 31
    5478:	fe cf       	rjmp	.-4      	; 0x5476 <eeprom_read_blraw+0x2>
    547a:	06 c0       	rjmp	.+12     	; 0x5488 <eeprom_read_blraw+0x14>
    547c:	f2 bd       	out	0x22, r31	; 34
    547e:	e1 bd       	out	0x21, r30	; 33
    5480:	f8 9a       	sbi	0x1f, 0	; 31
    5482:	31 96       	adiw	r30, 0x01	; 1
    5484:	00 b4       	in	r0, 0x20	; 32
    5486:	0d 92       	st	X+, r0
    5488:	41 50       	subi	r20, 0x01	; 1
    548a:	50 40       	sbci	r21, 0x00	; 0
    548c:	b8 f7       	brcc	.-18     	; 0x547c <eeprom_read_blraw+0x8>
    548e:	08 95       	ret

00005490 <_exit>:
    5490:	f8 94       	cli

00005492 <__stop_program>:
    5492:	ff cf       	rjmp	.-2      	; 0x5492 <__stop_program>
    5494:	86 0c       	add	r8, r6
    5496:	ae 0c       	add	r10, r14
    5498:	96 0d       	add	r25, r6
    549a:	ae 0c       	add	r10, r14
    549c:	96 0d       	add	r25, r6
    549e:	e1 0c       	add	r14, r1
    54a0:	02 0d       	add	r16, r2
    54a2:	96 0d       	add	r25, r6
    54a4:	58 0d       	add	r21, r8
    54a6:	64 0d       	add	r22, r4
    54a8:	1b 12       	cpse	r1, r27
    54aa:	1b 12       	cpse	r1, r27
    54ac:	59 12       	cpse	r5, r25
    54ae:	59 12       	cpse	r5, r25
    54b0:	e2 12       	cpse	r14, r18
    54b2:	1a 13       	cpse	r17, r26
    54b4:	0a 12       	cpse	r0, r26
    54b6:	0a 12       	cpse	r0, r26
    54b8:	34 13       	cpse	r19, r20
    54ba:	0a 12       	cpse	r0, r26
    54bc:	56 14       	cp	r5, r6
    54be:	56 14       	cp	r5, r6
    54c0:	00 15       	cp	r16, r0
    54c2:	0a 12       	cpse	r0, r26
    54c4:	18 15       	cp	r17, r8
    54c6:	3a 15       	cp	r19, r10
    54c8:	9f 26       	eor	r9, r31
    54ca:	b1 26       	eor	r11, r17
    54cc:	6a 25       	eor	r22, r10
    54ce:	4d 25       	eor	r20, r13
    54d0:	4d 25       	eor	r20, r13
    54d2:	9a 26       	eor	r9, r26
    54d4:	4d 25       	eor	r20, r13
    54d6:	4d 25       	eor	r20, r13
    54d8:	d7 26       	eor	r13, r23
    54da:	4d 25       	eor	r20, r13
    54dc:	e7 26       	eor	r14, r23
    54de:	4d 25       	eor	r20, r13
    54e0:	4d 25       	eor	r20, r13
    54e2:	4d 25       	eor	r20, r13
    54e4:	4d 25       	eor	r20, r13
    54e6:	4d 25       	eor	r20, r13
    54e8:	0e 27       	eor	r16, r30
    54ea:	4d 25       	eor	r20, r13
    54ec:	4d 25       	eor	r20, r13
    54ee:	f7 26       	eor	r15, r23
    54f0:	4d 25       	eor	r20, r13
    54f2:	c7 26       	eor	r12, r23
    54f4:	4d 25       	eor	r20, r13
    54f6:	4d 25       	eor	r20, r13
    54f8:	49 27       	eor	r20, r25
    54fa:	49 27       	eor	r20, r25
    54fc:	49 27       	eor	r20, r25
    54fe:	49 27       	eor	r20, r25
    5500:	49 27       	eor	r20, r25
    5502:	49 27       	eor	r20, r25
    5504:	49 27       	eor	r20, r25
    5506:	49 27       	eor	r20, r25
    5508:	49 27       	eor	r20, r25
    550a:	45 27       	eor	r20, r21
    550c:	4d 25       	eor	r20, r13
    550e:	45 27       	eor	r20, r21
