   1               		.file	"news.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.news_init,"ax",@progbits
  11               	.global	news_init
  13               	news_init:
  14               	.LFB0:
  15               		.file 1 "../../tmk_core/protocol/news.c"
   1:../../tmk_core/protocol/news.c **** /*
   2:../../tmk_core/protocol/news.c **** Copyright 2012 Jun WAKO <wakojun@gmail.com>
   3:../../tmk_core/protocol/news.c **** 
   4:../../tmk_core/protocol/news.c **** This software is licensed with a Modified BSD License.
   5:../../tmk_core/protocol/news.c **** All of this is supposed to be Free Software, Open Source, DFSG-free,
   6:../../tmk_core/protocol/news.c **** GPL-compatible, and OK to use in both free and proprietary applications.
   7:../../tmk_core/protocol/news.c **** Additions and corrections to this file are welcome.
   8:../../tmk_core/protocol/news.c **** 
   9:../../tmk_core/protocol/news.c **** 
  10:../../tmk_core/protocol/news.c **** Redistribution and use in source and binary forms, with or without
  11:../../tmk_core/protocol/news.c **** modification, are permitted provided that the following conditions are met:
  12:../../tmk_core/protocol/news.c **** 
  13:../../tmk_core/protocol/news.c **** * Redistributions of source code must retain the above copyright
  14:../../tmk_core/protocol/news.c ****   notice, this list of conditions and the following disclaimer.
  15:../../tmk_core/protocol/news.c **** 
  16:../../tmk_core/protocol/news.c **** * Redistributions in binary form must reproduce the above copyright
  17:../../tmk_core/protocol/news.c ****   notice, this list of conditions and the following disclaimer in
  18:../../tmk_core/protocol/news.c ****   the documentation and/or other materials provided with the
  19:../../tmk_core/protocol/news.c ****   distribution.
  20:../../tmk_core/protocol/news.c **** 
  21:../../tmk_core/protocol/news.c **** * Neither the name of the copyright holders nor the names of
  22:../../tmk_core/protocol/news.c ****   contributors may be used to endorse or promote products derived
  23:../../tmk_core/protocol/news.c ****   from this software without specific prior written permission.
  24:../../tmk_core/protocol/news.c **** 
  25:../../tmk_core/protocol/news.c **** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:../../tmk_core/protocol/news.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:../../tmk_core/protocol/news.c **** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  28:../../tmk_core/protocol/news.c **** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  29:../../tmk_core/protocol/news.c **** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  30:../../tmk_core/protocol/news.c **** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  31:../../tmk_core/protocol/news.c **** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  32:../../tmk_core/protocol/news.c **** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  33:../../tmk_core/protocol/news.c **** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  34:../../tmk_core/protocol/news.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  35:../../tmk_core/protocol/news.c **** POSSIBILITY OF SUCH DAMAGE.
  36:../../tmk_core/protocol/news.c **** */
  37:../../tmk_core/protocol/news.c **** 
  38:../../tmk_core/protocol/news.c **** #include <stdbool.h>
  39:../../tmk_core/protocol/news.c **** #include <avr/io.h>
  40:../../tmk_core/protocol/news.c **** #include <avr/interrupt.h>
  41:../../tmk_core/protocol/news.c **** #include "news.h"
  42:../../tmk_core/protocol/news.c **** 
  43:../../tmk_core/protocol/news.c **** 
  44:../../tmk_core/protocol/news.c **** void news_init(void)
  45:../../tmk_core/protocol/news.c **** {
  16               		.loc 1 45 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  46:../../tmk_core/protocol/news.c ****     NEWS_KBD_RX_INIT();
  22               		.loc 1 46 5 view .LVU1
  23               		.loc 1 46 5 view .LVU2
  24 0000 87E6      		ldi r24,lo8(103)
  25 0002 8093 CC00 		sts 204,r24
  26               		.loc 1 46 5 view .LVU3
  27 0006 1092 CD00 		sts 205,__zero_reg__
  28               		.loc 1 46 5 view .LVU4
  29 000a E9EC      		ldi r30,lo8(-55)
  30 000c F0E0      		ldi r31,0
  31 000e 8081      		ld r24,Z
  32 0010 8069      		ori r24,lo8(-112)
  33 0012 8083      		st Z,r24
  34               		.loc 1 46 5 view .LVU5
  35               	/* epilogue start */
  47:../../tmk_core/protocol/news.c **** }
  36               		.loc 1 47 1 is_stmt 0 view .LVU6
  37 0014 0895      		ret
  38               		.cfi_endproc
  39               	.LFE0:
  41               		.section	.text.news_recv,"ax",@progbits
  42               	.global	news_recv
  44               	news_recv:
  45               	.LFB1:
  48:../../tmk_core/protocol/news.c **** 
  49:../../tmk_core/protocol/news.c **** // RX ring buffer
  50:../../tmk_core/protocol/news.c **** #define RBUF_SIZE   8
  51:../../tmk_core/protocol/news.c **** static uint8_t rbuf[RBUF_SIZE];
  52:../../tmk_core/protocol/news.c **** static uint8_t rbuf_head = 0;
  53:../../tmk_core/protocol/news.c **** static uint8_t rbuf_tail = 0;
  54:../../tmk_core/protocol/news.c **** 
  55:../../tmk_core/protocol/news.c **** uint8_t news_recv(void)
  56:../../tmk_core/protocol/news.c **** {
  46               		.loc 1 56 1 is_stmt 1 view -0
  47               		.cfi_startproc
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 0 */
  51               	.L__stack_usage = 0
  57:../../tmk_core/protocol/news.c ****     uint8_t data = 0;
  52               		.loc 1 57 5 view .LVU8
  53               	.LVL0:
  58:../../tmk_core/protocol/news.c ****     if (rbuf_head == rbuf_tail) {
  54               		.loc 1 58 5 view .LVU9
  55               		.loc 1 58 19 is_stmt 0 view .LVU10
  56 0000 2091 0000 		lds r18,rbuf_tail
  57               		.loc 1 58 8 view .LVU11
  58 0004 8091 0000 		lds r24,rbuf_head
  59 0008 8217      		cp r24,r18
  60 000a 01F0      		breq .L4
  59:../../tmk_core/protocol/news.c ****         return 0;
  60:../../tmk_core/protocol/news.c ****     }
  61:../../tmk_core/protocol/news.c **** 
  62:../../tmk_core/protocol/news.c ****     data = rbuf[rbuf_tail];
  61               		.loc 1 62 5 is_stmt 1 view .LVU12
  62               		.loc 1 62 16 is_stmt 0 view .LVU13
  63 000c 30E0      		ldi r19,0
  64               		.loc 1 62 10 view .LVU14
  65 000e F901      		movw r30,r18
  66 0010 E050      		subi r30,lo8(-(rbuf))
  67 0012 F040      		sbci r31,hi8(-(rbuf))
  68 0014 8081      		ld r24,Z
  69               	.LVL1:
  63:../../tmk_core/protocol/news.c ****     rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
  70               		.loc 1 63 5 is_stmt 1 view .LVU15
  71               		.loc 1 63 28 is_stmt 0 view .LVU16
  72 0016 2F5F      		subi r18,-1
  73 0018 3F4F      		sbci r19,-1
  74               		.loc 1 63 33 view .LVU17
  75 001a 2770      		andi r18,7
  76 001c 3327      		clr r19
  77               		.loc 1 63 15 view .LVU18
  78 001e 2093 0000 		sts rbuf_tail,r18
  64:../../tmk_core/protocol/news.c ****     return data;
  79               		.loc 1 64 5 is_stmt 1 view .LVU19
  80               		.loc 1 64 12 is_stmt 0 view .LVU20
  81 0022 0895      		ret
  82               	.LVL2:
  83               	.L4:
  59:../../tmk_core/protocol/news.c ****         return 0;
  84               		.loc 1 59 16 view .LVU21
  85 0024 80E0      		ldi r24,0
  86               	/* epilogue start */
  65:../../tmk_core/protocol/news.c **** }
  87               		.loc 1 65 1 view .LVU22
  88 0026 0895      		ret
  89               		.cfi_endproc
  90               	.LFE1:
  92               		.section	.text.__vector_23,"ax",@progbits
  93               	.global	__vector_23
  95               	__vector_23:
  96               	.LFB2:
  66:../../tmk_core/protocol/news.c **** 
  67:../../tmk_core/protocol/news.c **** // USART RX complete interrupt
  68:../../tmk_core/protocol/news.c **** ISR(NEWS_KBD_RX_VECT)
  69:../../tmk_core/protocol/news.c **** {
  97               		.loc 1 69 1 is_stmt 1 view -0
  98               		.cfi_startproc
  99 0000 2F93 2FB7 		__gcc_isr 1
  99      2F93 
 100 0006 3F93      		push r19
 101               	.LCFI0:
 102               		.cfi_def_cfa_offset 3
 103               		.cfi_offset 19, -2
 104 0008 4F93      		push r20
 105               	.LCFI1:
 106               		.cfi_def_cfa_offset 4
 107               		.cfi_offset 20, -3
 108 000a 8F93      		push r24
 109               	.LCFI2:
 110               		.cfi_def_cfa_offset 5
 111               		.cfi_offset 24, -4
 112 000c 9F93      		push r25
 113               	.LCFI3:
 114               		.cfi_def_cfa_offset 6
 115               		.cfi_offset 25, -5
 116 000e EF93      		push r30
 117               	.LCFI4:
 118               		.cfi_def_cfa_offset 7
 119               		.cfi_offset 30, -6
 120 0010 FF93      		push r31
 121               	.LCFI5:
 122               		.cfi_def_cfa_offset 8
 123               		.cfi_offset 31, -7
 124               	/* prologue: Signal */
 125               	/* frame size = 0 */
 126               	/* stack size = 6...10 */
 127               	.L__stack_usage = 6 + __gcc_isr.n_pushed
  70:../../tmk_core/protocol/news.c ****     uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
 128               		.loc 1 70 5 view .LVU24
 129               		.loc 1 70 31 is_stmt 0 view .LVU25
 130 0012 8091 0000 		lds r24,rbuf_head
 131 0016 90E0      		ldi r25,0
 132 0018 9C01      		movw r18,r24
 133 001a 2F5F      		subi r18,-1
 134 001c 3F4F      		sbci r19,-1
 135               		.loc 1 70 36 view .LVU26
 136 001e 2770      		andi r18,7
 137 0020 3327      		clr r19
 138               	.LVL3:
  71:../../tmk_core/protocol/news.c ****     if (next != rbuf_tail) {
 139               		.loc 1 71 5 is_stmt 1 view .LVU27
 140               		.loc 1 71 8 is_stmt 0 view .LVU28
 141 0022 4091 0000 		lds r20,rbuf_tail
 142 0026 4217      		cp r20,r18
 143 0028 01F0      		breq .L5
  72:../../tmk_core/protocol/news.c ****         rbuf[rbuf_head] = NEWS_KBD_RX_DATA;
 144               		.loc 1 72 9 is_stmt 1 view .LVU29
 145               		.loc 1 72 27 is_stmt 0 view .LVU30
 146 002a 3091 CE00 		lds r19,206
 147               		.loc 1 72 25 view .LVU31
 148 002e 8050      		subi r24,lo8(-(rbuf))
 149 0030 9040      		sbci r25,hi8(-(rbuf))
 150 0032 FC01      		movw r30,r24
 151 0034 3083      		st Z,r19
  73:../../tmk_core/protocol/news.c ****         rbuf_head = next;
 152               		.loc 1 73 9 is_stmt 1 view .LVU32
 153               		.loc 1 73 19 is_stmt 0 view .LVU33
 154 0036 2093 0000 		sts rbuf_head,r18
 155               	.L5:
 156               	/* epilogue start */
  74:../../tmk_core/protocol/news.c ****     }
  75:../../tmk_core/protocol/news.c **** }
 157               		.loc 1 75 1 view .LVU34
 158 003a FF91      		pop r31
 159 003c EF91      		pop r30
 160 003e 9F91      		pop r25
 161 0040 8F91      		pop r24
 162 0042 4F91      		pop r20
 163 0044 3F91      		pop r19
 164 0046 2F91 2FBF 		__gcc_isr 2
 164      2F91 
 165 004c 1895      		reti
 166               		__gcc_isr 0,r18
 167               		.cfi_endproc
 168               	.LFE2:
 170               		.section	.bss.rbuf_tail,"aw",@nobits
 173               	rbuf_tail:
 174 0000 00        		.zero	1
 175               		.section	.bss.rbuf_head,"aw",@nobits
 178               	rbuf_head:
 179 0000 00        		.zero	1
 180               		.section	.bss.rbuf,"aw",@nobits
 183               	rbuf:
 184 0000 0000 0000 		.zero	8
 184      0000 0000 
 185               		.text
 186               	.Letext0:
 187               		.file 2 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 news.c
     /tmp/ccjIJCDN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccjIJCDN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccjIJCDN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccjIJCDN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccjIJCDN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccjIJCDN.s:13     .text.news_init:0000000000000000 news_init
     /tmp/ccjIJCDN.s:44     .text.news_recv:0000000000000000 news_recv
     /tmp/ccjIJCDN.s:173    .bss.rbuf_tail:0000000000000000 rbuf_tail
     /tmp/ccjIJCDN.s:178    .bss.rbuf_head:0000000000000000 rbuf_head
     /tmp/ccjIJCDN.s:183    .bss.rbuf:0000000000000000 rbuf
     /tmp/ccjIJCDN.s:95     .text.__vector_23:0000000000000000 __vector_23
                            *ABS*:0000000000000002 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
__do_clear_bss
