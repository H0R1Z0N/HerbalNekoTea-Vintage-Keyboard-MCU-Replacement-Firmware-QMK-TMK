
pc98_usb_32u4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00004c6c  00004d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000323  00800138  00800138  00004d38  2**0
                  ALLOC
  3 .noinit       00000004  0080045b  0080045b  00004d38  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00004d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  000055f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005663  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005674  2**2
                  CONTENTS, READONLY, OCTETS
  8 .debug_aranges 000008c8  00000000  00000000  000056b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00011b6b  00000000  00000000  00005f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004cb1  00000000  00000000  00017ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000107d7  00000000  00000000  0001c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000180c  00000000  00000000  0002cf70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004732  00000000  00000000  0002e77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a4db  00000000  00000000  00032eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  0003d389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 05 	jmp	0xada	; 0xada <__ctors_end>
       4:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
       8:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
       c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      10:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      14:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      18:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      1c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      20:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      24:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      28:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_10>
      2c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      30:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <__vector_12>
      34:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      38:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      3c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      40:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      44:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      48:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      4c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      50:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      54:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <__vector_21>
      58:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      5c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      60:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      64:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__vector_25>
      68:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      6c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      70:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      74:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      78:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      7c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      80:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      84:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      88:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      8c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      90:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      94:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      98:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      9c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      a0:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      a4:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>
      a8:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__bad_interrupt>

000000ac <actionmaps>:
      ac:	e0 00 00 00 00 00 00 00 04 00 05 00 06 00 07 00     ................
      bc:	08 00 09 00 0a 00 0b 00 0c 00 0d 00 0e 00 0f 00     ................
      cc:	10 00 11 00 12 00 13 00 14 00 15 00 16 00 17 00     ................
      dc:	18 00 19 00 1a 00 1b 00 1c 00 1d 00 1e 00 1f 00     ................
      ec:	20 00 21 00 22 00 23 00 24 00 25 00 26 00 27 00      .!.".#.$.%.&.'.
      fc:	28 00 35 00 2a 00 2b 00 2c 00 2d 00 2e 00 2f 00     (.5.*.+.,.-.../.
     10c:	30 00 31 00 00 00 33 00 34 00 00 00 36 00 37 00     0.1...3.4...6.7.
     11c:	38 00 39 00 3a 00 3b 00 3c 00 3d 00 3e 00 3f 00     8.9.:.;.<.=.>.?.
     12c:	40 00 41 00 42 00 43 00 44 00 45 00 cd 44 00 00     @.A.B.C.D.E..D..
     13c:	29 00 46 00 4a 00 4e 00 4c 00 4d 00 4b 00 4f 00     ).F.J.N.L.M.K.O.
     14c:	50 00 51 00 52 00 00 00 54 00 55 00 56 00 57 00     P.Q.R...T.U.V.W.
     15c:	58 00 59 00 5a 00 5b 00 5c 00 5d 00 5e 00 5f 00     X.Y.Z.[.\.].^._.
     16c:	60 00 61 00 62 00 63 00 00 00 65 00 85 00 67 00     `.a.b.c...e...g.
     17c:	e2 44 ea 44 e9 44 00 00 00 00 00 00 00 00 00 00     .D.D.D..........
     18c:	00 00 00 00 00 00 00 00 64 00 e4 00 e6 00 e2 00     ........d.......
     19c:	e0 00 e1 00 e3 00 e3 00 00 00 65 00 e6 00 e7 00     ..........e.....

000001ac <unimap_trans>:
     1ac:	29 1e 1f 20 21 22 23 24 25 26 27 2d 2e 74 2a 2b     ).. !"#$%&'-.t*+
     1bc:	14 1a 08 15 17 1c 18 0c 12 13 2f 30 28 04 16 07     ........../0(...
     1cc:	09 0a 0b 0d 0e 0f 33 34 31 1d 1b 06 19 05 11 10     ......341.......
     1dc:	36 37 38 75 2c 76 4e 4b 49 4c 52 50 4f 51 4a 4d     678u,vNKILRPOQJM
     1ec:	56 54 5f 60 61 55 5c 5d 5e 57 59 5a 5b 67 62 66     VT_`aU\]^WYZ[gbf
     1fc:	63 77 44 45 68 69 6a 80 70 71 72 73 80 80 65 80     cwDEhij.pqrs..e.
     20c:	48 46 3a 3b 3c 3d 3e 3f 40 41 42 43 80 80 80 80     HF:;<=>?@ABC....
     21c:	79 39 00 7a 78 80 80 7b 7f 7e 80 80 80 7d 80 80     y9.zx..{.~...}..

0000022c <__c.1973>:
     22c:	70 63 39 38 5f 6c 65 64 3a 20 25 30 32 58 0a 00     pc98_led: %02X..

0000023c <__c.1971>:
     23c:	75 73 62 5f 6c 65 64 3a 20 25 30 32 58 0a 00        usb_led: %02X..

0000024b <__c.1950>:
     24b:	73 65 6e 64 20 25 30 32 58 3a 20 25 30 32 58 0a     send %02X: %02X.
     25b:	00                                                  .

0000025c <__c.1948>:
     25c:	73 65 6e 64 20 39 44 3a 20 25 30 32 58 0a 00        send 9D: %02X..

0000026b <__c.1963>:
     26b:	25 30 32 58 20 00                                   %02X .

00000271 <__c.1940>:
     271:	73 65 6e 64 20 37 30 3a 20 25 30 32 58 0a 00        send 70: %02X..

00000280 <__c.1938>:
     280:	73 65 6e 64 20 39 43 3a 20 25 30 32 58 0a 00        send 9C: %02X..

0000028f <__c.5253>:
     28f:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     29f:	0a 00                                               ..

000002a1 <__c.5251>:
     2a1:	0a 55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e     .USB configured.
     2b1:	0a 00                                               ..

000002b3 <__c.5246>:
     2b3:	0a 0a 54 4d 4b 3a 38 66 38 36 64 31 32 35 2f 4c     ..TMK:8f86d125/L
     2c3:	55 46 41 0a 0a 00                                   UFA...

000002c9 <ProductString>:
     2c9:	30 03 50 00 43 00 39 00 38 00 20 00 6b 00 65 00     0.P.C.9.8. .k.e.
     2d9:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 63 00     y.b.o.a.r.d. .c.
     2e9:	6f 00 6e 00 76 00 65 00 72 00 74 00 65 00 72 00     o.n.v.e.r.t.e.r.
     2f9:	00 00                                               ..

000002fb <ManufacturerString>:
     2fb:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

0000030b <LanguageString>:
     30b:	04 03 09 04                                         ....

0000030f <ConfigurationDescriptor>:
     30f:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     31f:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     32f:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     33f:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     34f:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     35f:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     36f:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     37f:	03 20 00 01                                         . ..

00000383 <DeviceDescriptor>:
     383:	12 01 10 01 00 00 00 08 ed fe 01 98 01 01 01 02     ................
     393:	00 01                                               ..

00000395 <ConsoleReport>:
     395:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     3a5:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     3b5:	02 c0                                               ..

000003b7 <ExtrakeyReport>:
     3b7:	05 01 09 80 a1 01 85 02 16 01 00 26 37 00 1a 81     ...........&7...
     3c7:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     3d7:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     3e7:	10 95 01 81 00 c0                                   ......

000003ed <MouseReport>:
     3ed:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     3fd:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     40d:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     41d:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     42d:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000043a <KeyboardReport>:
     43a:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     44a:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     45a:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     46a:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

0000047a <__c.2134>:
     47a:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

0000048a <__c.2129>:
     48a:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000498 <__c.2121>:
     498:	0a 00                                               ..

0000049a <__c.2116>:
     49a:	25 30 32 58 20 00                                   %02X .

000004a0 <__c.2113>:
     4a0:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000004ab <__c.2471>:
     4ab:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000004b6 <__c.1793>:
     4b6:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

000004c4 <__c.1790>:
     4c4:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

000004d2 <__c.2194>:
     4d2:	29 0a 00                                            )..

000004d5 <__c.2192>:
     4d5:	25 75 00                                            %u.

000004d8 <__c.2190>:
     4d8:	2f 00                                               /.

000004da <__c.2188>:
     4da:	25 75 00                                            %u.

000004dd <__c.2186>:
     4dd:	5d 28 00                                            ](.

000004e0 <__c.2184>:
     4e0:	25 64 00                                            %d.

000004e3 <__c.2182>:
     4e3:	20 00                                                .

000004e5 <__c.2180>:
     4e5:	25 64 00                                            %d.

000004e8 <__c.2178>:
     4e8:	20 00                                                .

000004ea <__c.2176>:
     4ea:	25 64 00                                            %d.

000004ed <__c.2174>:
     4ed:	20 00                                                .

000004ef <__c.2172>:
     4ef:	25 64 00                                            %d.

000004f2 <__c.2170>:
     4f2:	7c 00                                               |.

000004f4 <__c.2168>:
     4f4:	25 30 32 58 00                                      %02X.

000004f9 <__c.2166>:
     4f9:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     509:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     519:	20 5b 00                                             [.

0000051c <__c.2820>:
     51c:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     52c:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000537 <__c.2817>:
     537:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     547:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000550 <__c.2814>:
     550:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     560:	20 25 64 0a 00                                       %d..

00000565 <__c.2811>:
     565:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     575:	64 0a 00                                            d..

00000578 <__c.2808>:
     578:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     588:	0a 00                                               ..

0000058a <__c.2804>:
     58a:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000599 <__c.2797>:
     599:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     5a9:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000005b4 <__c.2794>:
     5b4:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5c4:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000005cd <__c.2791>:
     5cd:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     5dd:	20 25 64 0a 00                                       %d..

000005e2 <__c.2788>:
     5e2:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     5f2:	64 0a 00                                            d..

000005f5 <__c.2785>:
     5f5:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     605:	0a 00                                               ..

00000607 <__c.2781>:
     607:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000616 <__c.2774>:
     616:	0a 00                                               ..

00000618 <__c.2772>:
     618:	25 75 00                                            %u.

0000061b <__c.2770>:
     61b:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     62b:	5f 6d 61 78 3a 20 00                                _max: .

00000632 <__c.2768>:
     632:	0a 00                                               ..

00000634 <__c.2766>:
     634:	25 75 00                                            %u.

00000637 <__c.2764>:
     637:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     647:	65 64 3a 20 00                                      ed: .

0000064c <__c.2762>:
     64c:	0a 00                                               ..

0000064e <__c.2760>:
     64e:	25 75 00                                            %u.

00000651 <__c.2758>:
     651:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     661:	00                                                  .

00000662 <__c.2756>:
     662:	0a 00                                               ..

00000664 <__c.2754>:
     664:	25 75 00                                            %u.

00000667 <__c.2752>:
     667:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000676 <__c.2750>:
     676:	0a 00                                               ..

00000678 <__c.2748>:
     678:	25 75 00                                            %u.

0000067b <__c.2746>:
     67b:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     68b:	20 00                                                .

0000068d <__c.2744>:
     68d:	0a 00                                               ..

0000068f <__c.2742>:
     68f:	25 75 00                                            %u.

00000692 <__c.2740>:
     692:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     6a2:	20 00                                                .

000006a4 <__c.2738>:
     6a4:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000006b2 <__c.2858>:
     6b2:	4d 3e 00                                            M>.

000006b5 <__c.2856>:
     6b5:	4d 25 64 3e 20 00                                   M%d> .

000006bb <__c.2854>:
     6bb:	3f 00                                               ?.

000006bd <__c.2851>:
     6bd:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000006ca <__c.2837>:
     6ca:	43 3e 20 00                                         C> .

000006ce <__c.2827>:
     6ce:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     6de:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     6ee:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     6fe:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     70e:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000071c <__c.2825>:
     71c:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     72c:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     73c:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     74c:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     75c:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     76c:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     77c:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     78c:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     79c:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     7ac:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     7bc:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     7cc:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     7dc:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     7ec:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     7fc:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     80c:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000817 <__c.2730>:
     817:	3f 00                                               ?.

00000819 <__c.2727>:
     819:	4d 3e 20 00                                         M> .

0000081d <__c.2732>:
     81d:	43 3e 20 00                                         C> .

00000821 <__c.2876>:
     821:	4c 25 64 0a 00                                      L%d..

00000826 <__c.2716>:
     826:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     836:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     846:	73 65 6b 65 79 0a 00                                sekey..

0000084d <__c.2646>:
     84d:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     85d:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     86d:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     87d:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     88d:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     89d:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     8ad:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     8bd:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     8cd:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     8dd:	72 0a 00                                            r..

000008e0 <__c.2711>:
     8e0:	3f 00                                               ?.

000008e2 <__c.2702>:
     8e2:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     8f2:	25 30 34 6c 58 0a 00                                %04lX..

000008f9 <__c.2700>:
     8f9:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     909:	58 0a 00                                            X..

0000090c <__c.2698>:
     90c:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     91c:	6c 3a 20 25 58 0a 00                                l: %X..

00000923 <__c.2696>:
     923:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     933:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

0000093d <__c.2694>:
     93d:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

0000094b <__c.2691>:
     94b:	47 43 43 3a 20 38 2e 33 2e 30 20 41 56 52 2d 4c     GCC: 8.3.0 AVR-L
     95b:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     96b:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000976 <__c.2689>:
     976:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     986:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     996:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     9a6:	34 30 39 36 0a 00                                   4096..

000009ac <__c.2687>:
     9ac:	42 55 49 4c 44 3a 20 38 66 38 36 64 31 32 35 20     BUILD: 8f86d125 
     9bc:	28 31 31 3a 34 31 3a 30 30 20 4e 6f 76 20 31 33     (11:41:00 Nov 13
     9cc:	20 32 30 32 30 29 0a 00                              2020)..

000009d4 <__c.2685>:
     9d4:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     9e4:	6b 2e 29 20 50 49 44 3a 20 30 78 39 38 30 31 28     k.) PID: 0x9801(
     9f4:	50 43 39 38 20 6b 65 79 62 6f 61 72 64 20 63 6f     PC98 keyboard co
     a04:	6e 76 65 72 74 65 72 29 20 56 45 52 3a 20 30 78     nverter) VER: 0x
     a14:	30 31 30 31 0a 00                                   0101..

00000a1a <__c.2683>:
     a1a:	44 45 53 43 3a 20 63 6f 6e 76 65 72 74 73 20 50     DESC: converts P
     a2a:	43 39 38 20 6b 65 79 62 6f 61 72 64 20 70 72 6f     C98 keyboard pro
     a3a:	74 6f 63 6f 6c 20 69 6e 74 6f 20 55 53 42 0a 00     tocol into USB..

00000a4a <__c.2681>:
     a4a:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a59 <__c.2678>:
     a59:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a66 <__c.2676>:
     a66:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000a72 <__c.2673>:
     a72:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000a82 <__c.2671>:
     a82:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000a91 <__c.2668>:
     a91:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000a9f <__c.2666>:
     a9f:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000aac <__c.2663>:
     aac:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000ab8 <__c.2661>:
     ab8:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000ac5 <__c.2658>:
     ac5:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     ad5:	00                                                  .

00000ad6 <__c.2655>:
     ad6:	43 3e 20 00                                         C> .

00000ada <__ctors_end>:
     ada:	11 24       	eor	r1, r1
     adc:	1f be       	out	0x3f, r1	; 63
     ade:	cf ef       	ldi	r28, 0xFF	; 255
     ae0:	da e0       	ldi	r29, 0x0A	; 10
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	cd bf       	out	0x3d, r28	; 61

00000ae6 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     ae6:	04 b6       	in	r0, 0x34	; 52
     ae8:	03 fe       	sbrs	r0, 3
     aea:	28 c0       	rjmp	.+80     	; 0xb3c <__do_copy_data>
     aec:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <reset_key>
     af0:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <reset_key+0x1>
     af4:	a0 91 5d 04 	lds	r26, 0x045D	; 0x80045d <reset_key+0x2>
     af8:	b0 91 5e 04 	lds	r27, 0x045E	; 0x80045e <reset_key+0x3>
     afc:	87 30       	cpi	r24, 0x07	; 7
     afe:	90 4b       	sbci	r25, 0xB0	; 176
     b00:	a7 40       	sbci	r26, 0x07	; 7
     b02:	b0 4b       	sbci	r27, 0xB0	; 176
     b04:	d9 f4       	brne	.+54     	; 0xb3c <__do_copy_data>
        reset_key = 0;
     b06:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <reset_key>
     b0a:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <reset_key+0x1>
     b0e:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <reset_key+0x2>
     b12:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <reset_key+0x3>

        // some of bootloaders may need to preseve?
        MCUSR = 0;
     b16:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	a8 95       	wdr
     b1e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b22:	88 61       	ori	r24, 0x18	; 24
     b24:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b28:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     b2c:	0f be       	out	0x3f, r0	; 63

#ifndef NO_BOOTLOADER_CATERINA_BOOTKEY
        // Clear bootkey of Caterina bootloader for other bootloaders
        // Leonardo and Pro Micro with Arduino default fuse setting don't reach here
        // because bootloader section are executed before application everytime.
        *(volatile uint16_t *)0x0800 = 0;
     b2e:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <_end+0x3a2>
     b32:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <_end+0x3a1>
#endif

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))( (uint16_t)(BOOTLOADER_START / 2) ))();
     b36:	e0 e0       	ldi	r30, 0x00	; 0
     b38:	f8 e3       	ldi	r31, 0x38	; 56
     b3a:	09 95       	icall

00000b3c <__do_copy_data>:
     b3c:	11 e0       	ldi	r17, 0x01	; 1
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b1 e0       	ldi	r27, 0x01	; 1
     b42:	ec e6       	ldi	r30, 0x6C	; 108
     b44:	fc e4       	ldi	r31, 0x4C	; 76
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <__do_copy_data+0x10>
     b48:	05 90       	lpm	r0, Z+
     b4a:	0d 92       	st	X+, r0
     b4c:	a8 33       	cpi	r26, 0x38	; 56
     b4e:	b1 07       	cpc	r27, r17
     b50:	d9 f7       	brne	.-10     	; 0xb48 <__do_copy_data+0xc>

00000b52 <__do_clear_bss>:
     b52:	24 e0       	ldi	r18, 0x04	; 4
     b54:	a8 e3       	ldi	r26, 0x38	; 56
     b56:	b1 e0       	ldi	r27, 0x01	; 1
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <.do_clear_bss_start>

00000b5a <.do_clear_bss_loop>:
     b5a:	1d 92       	st	X+, r1

00000b5c <.do_clear_bss_start>:
     b5c:	ab 35       	cpi	r26, 0x5B	; 91
     b5e:	b2 07       	cpc	r27, r18
     b60:	e1 f7       	brne	.-8      	; 0xb5a <.do_clear_bss_loop>
     b62:	0e 94 c5 0a 	call	0x158a	; 0x158a <main>
     b66:	0c 94 1a 26 	jmp	0x4c34	; 0x4c34 <_exit>

00000b6a <__bad_interrupt>:
     b6a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000b6e <xputc>:
     b6e:	ff 93       	push	r31
     b70:	ef 93       	push	r30
     b72:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <__bss_start>
     b76:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <__bss_start+0x1>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	09 f0       	breq	.+2      	; 0xb80 <xputc+0x12>
     b7e:	09 95       	icall
     b80:	ef 91       	pop	r30
     b82:	ff 91       	pop	r31
     b84:	08 95       	ret

00000b86 <xputs>:
     b86:	fc 01       	movw	r30, r24
     b88:	85 91       	lpm	r24, Z+
     b8a:	80 30       	cpi	r24, 0x00	; 0
     b8c:	11 f0       	breq	.+4      	; 0xb92 <xputs+0xc>
     b8e:	ef df       	rcall	.-34     	; 0xb6e <xputc>
     b90:	fb cf       	rjmp	.-10     	; 0xb88 <xputs+0x2>
     b92:	08 95       	ret

00000b94 <xitoa>:
     b94:	ff 27       	eor	r31, r31
     b96:	e0 e2       	ldi	r30, 0x20	; 32
     b98:	30 e2       	ldi	r19, 0x20	; 32
     b9a:	47 ff       	sbrs	r20, 7
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <xitoa+0x22>
     b9e:	41 95       	neg	r20
     ba0:	97 ff       	sbrs	r25, 7
     ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <xitoa+0x22>
     ba4:	ed e2       	ldi	r30, 0x2D	; 45
     ba6:	60 95       	com	r22
     ba8:	70 95       	com	r23
     baa:	80 95       	com	r24
     bac:	90 95       	com	r25
     bae:	61 1d       	adc	r22, r1
     bb0:	71 1d       	adc	r23, r1
     bb2:	81 1d       	adc	r24, r1
     bb4:	91 1d       	adc	r25, r1
     bb6:	27 ff       	sbrs	r18, 7
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <xitoa+0x2a>
     bba:	21 95       	neg	r18
     bbc:	30 e3       	ldi	r19, 0x30	; 48
     bbe:	50 e2       	ldi	r21, 0x20	; 32
     bc0:	aa 27       	eor	r26, r26
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	88 1f       	adc	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	a4 17       	cp	r26, r20
     bce:	10 f0       	brcs	.+4      	; 0xbd4 <xitoa+0x40>
     bd0:	a4 1b       	sub	r26, r20
     bd2:	63 95       	inc	r22
     bd4:	5a 95       	dec	r21
     bd6:	a9 f7       	brne	.-22     	; 0xbc2 <xitoa+0x2e>
     bd8:	aa 30       	cpi	r26, 0x0A	; 10
     bda:	08 f0       	brcs	.+2      	; 0xbde <xitoa+0x4a>
     bdc:	a9 5f       	subi	r26, 0xF9	; 249
     bde:	a0 5d       	subi	r26, 0xD0	; 208
     be0:	af 93       	push	r26
     be2:	f3 95       	inc	r31
     be4:	61 15       	cp	r22, r1
     be6:	71 05       	cpc	r23, r1
     be8:	81 05       	cpc	r24, r1
     bea:	91 05       	cpc	r25, r1
     bec:	41 f7       	brne	.-48     	; 0xbbe <xitoa+0x2a>
     bee:	ed 32       	cpi	r30, 0x2D	; 45
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <xitoa+0x62>
     bf2:	ef 93       	push	r30
     bf4:	f3 95       	inc	r31
     bf6:	f2 17       	cp	r31, r18
     bf8:	18 f4       	brcc	.+6      	; 0xc00 <xitoa+0x6c>
     bfa:	3f 93       	push	r19
     bfc:	f3 95       	inc	r31
     bfe:	fb cf       	rjmp	.-10     	; 0xbf6 <xitoa+0x62>
     c00:	8f 91       	pop	r24
     c02:	b5 df       	rcall	.-150    	; 0xb6e <xputc>
     c04:	fa 95       	dec	r31
     c06:	e1 f7       	brne	.-8      	; 0xc00 <xitoa+0x6c>
     c08:	08 95       	ret

00000c0a <xvprintf>:
     c0a:	e9 91       	ld	r30, Y+
     c0c:	f9 91       	ld	r31, Y+
     c0e:	85 91       	lpm	r24, Z+
     c10:	80 30       	cpi	r24, 0x00	; 0
     c12:	21 f0       	breq	.+8      	; 0xc1c <xvprintf+0x12>
     c14:	85 32       	cpi	r24, 0x25	; 37
     c16:	19 f0       	breq	.+6      	; 0xc1e <xvprintf+0x14>
     c18:	aa df       	rcall	.-172    	; 0xb6e <xputc>
     c1a:	f9 cf       	rjmp	.-14     	; 0xc0e <xvprintf+0x4>
     c1c:	08 95       	ret
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	e8 94       	clt
     c22:	55 91       	lpm	r21, Z+
     c24:	55 32       	cpi	r21, 0x25	; 37
     c26:	c1 f3       	breq	.-16     	; 0xc18 <xvprintf+0xe>
     c28:	50 33       	cpi	r21, 0x30	; 48
     c2a:	11 f4       	brne	.+4      	; 0xc30 <xvprintf+0x26>
     c2c:	68 94       	set
     c2e:	55 91       	lpm	r21, Z+
     c30:	5a 33       	cpi	r21, 0x3A	; 58
     c32:	48 f4       	brcc	.+18     	; 0xc46 <xvprintf+0x3c>
     c34:	50 53       	subi	r21, 0x30	; 48
     c36:	90 f3       	brcs	.-28     	; 0xc1c <xvprintf+0x12>
     c38:	22 0f       	add	r18, r18
     c3a:	02 2e       	mov	r0, r18
     c3c:	22 0f       	add	r18, r18
     c3e:	22 0f       	add	r18, r18
     c40:	20 0d       	add	r18, r0
     c42:	25 0f       	add	r18, r21
     c44:	f4 cf       	rjmp	.-24     	; 0xc2e <xvprintf+0x24>
     c46:	0e f4       	brtc	.+2      	; 0xc4a <xvprintf+0x40>
     c48:	21 95       	neg	r18
     c4a:	89 91       	ld	r24, Y+
     c4c:	99 91       	ld	r25, Y+
     c4e:	53 36       	cpi	r21, 0x63	; 99
     c50:	19 f3       	breq	.-58     	; 0xc18 <xvprintf+0xe>
     c52:	53 37       	cpi	r21, 0x73	; 115
     c54:	29 f1       	breq	.+74     	; 0xca0 <xvprintf+0x96>
     c56:	53 35       	cpi	r21, 0x53	; 83
     c58:	59 f1       	breq	.+86     	; 0xcb0 <xvprintf+0xa6>
     c5a:	bc 01       	movw	r22, r24
     c5c:	88 27       	eor	r24, r24
     c5e:	99 27       	eor	r25, r25
     c60:	e8 94       	clt
     c62:	5c 36       	cpi	r21, 0x6C	; 108
     c64:	21 f4       	brne	.+8      	; 0xc6e <xvprintf+0x64>
     c66:	89 91       	ld	r24, Y+
     c68:	99 91       	ld	r25, Y+
     c6a:	68 94       	set
     c6c:	55 91       	lpm	r21, Z+
     c6e:	54 36       	cpi	r21, 0x64	; 100
     c70:	39 f4       	brne	.+14     	; 0xc80 <xvprintf+0x76>
     c72:	46 ef       	ldi	r20, 0xF6	; 246
     c74:	7e f0       	brts	.+30     	; 0xc94 <xvprintf+0x8a>
     c76:	77 ff       	sbrs	r23, 7
     c78:	0d c0       	rjmp	.+26     	; 0xc94 <xvprintf+0x8a>
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	9f ef       	ldi	r25, 0xFF	; 255
     c7e:	0a c0       	rjmp	.+20     	; 0xc94 <xvprintf+0x8a>
     c80:	55 37       	cpi	r21, 0x75	; 117
     c82:	4a e0       	ldi	r20, 0x0A	; 10
     c84:	39 f0       	breq	.+14     	; 0xc94 <xvprintf+0x8a>
     c86:	58 35       	cpi	r21, 0x58	; 88
     c88:	40 e1       	ldi	r20, 0x10	; 16
     c8a:	21 f0       	breq	.+8      	; 0xc94 <xvprintf+0x8a>
     c8c:	52 36       	cpi	r21, 0x62	; 98
     c8e:	42 e0       	ldi	r20, 0x02	; 2
     c90:	09 f0       	breq	.+2      	; 0xc94 <xvprintf+0x8a>
     c92:	08 95       	ret
     c94:	ff 93       	push	r31
     c96:	ef 93       	push	r30
     c98:	7d df       	rcall	.-262    	; 0xb94 <xitoa>
     c9a:	ef 91       	pop	r30
     c9c:	ff 91       	pop	r31
     c9e:	b7 cf       	rjmp	.-146    	; 0xc0e <xvprintf+0x4>
     ca0:	ff 93       	push	r31
     ca2:	ef 93       	push	r30
     ca4:	fc 01       	movw	r30, r24
     ca6:	81 91       	ld	r24, Z+
     ca8:	80 30       	cpi	r24, 0x00	; 0
     caa:	b9 f3       	breq	.-18     	; 0xc9a <xvprintf+0x90>
     cac:	60 df       	rcall	.-320    	; 0xb6e <xputc>
     cae:	fb cf       	rjmp	.-10     	; 0xca6 <xvprintf+0x9c>
     cb0:	ff 93       	push	r31
     cb2:	ef 93       	push	r30
     cb4:	68 df       	rcall	.-304    	; 0xb86 <xputs>
     cb6:	f1 cf       	rjmp	.-30     	; 0xc9a <xvprintf+0x90>

00000cb8 <__xprintf>:
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	25 96       	adiw	r28, 0x05	; 5
     cc2:	a3 df       	rcall	.-186    	; 0xc0a <xvprintf>
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <pc98_send>:
#define COL(code)      (code&0x07)


static void pc98_send(uint8_t data)
{
    PC98_RDY_PORT |= (1<<PC98_RDY_BIT);
     cca:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ccc:	ef e9       	ldi	r30, 0x9F	; 159
     cce:	ff e0       	ldi	r31, 0x0F	; 15
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <pc98_send+0x6>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <pc98_send+0xc>
     cd6:	00 00       	nop
    _delay_ms(1);
    serial_send(data);
     cd8:	0e 94 f7 07 	call	0xfee	; 0xfee <serial_send>
     cdc:	8f e9       	ldi	r24, 0x9F	; 159
     cde:	9f e0       	ldi	r25, 0x0F	; 15
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	f1 f7       	brne	.-4      	; 0xce0 <pc98_send+0x16>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <pc98_send+0x1c>
     ce6:	00 00       	nop
    _delay_ms(1);
    PC98_RDY_PORT &= ~(1<<PC98_RDY_BIT);
     ce8:	5c 98       	cbi	0x0b, 4	; 11
}
     cea:	08 95       	ret

00000cec <pc98_wait_response>:

static int16_t pc98_wait_response(void)
{
     cec:	cf 93       	push	r28
     cee:	c0 e0       	ldi	r28, 0x00	; 0
    int16_t code = -1;
    uint8_t timeout = 255;
    while (timeout-- && (code = serial_recv2()) == -1) _delay_ms(1);
     cf0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <serial_recv2>
     cf4:	c1 50       	subi	r28, 0x01	; 1
     cf6:	8f 3f       	cpi	r24, 0xFF	; 255
     cf8:	98 07       	cpc	r25, r24
     cfa:	41 f4       	brne	.+16     	; 0xd0c <pc98_wait_response+0x20>
     cfc:	ef e9       	ldi	r30, 0x9F	; 159
     cfe:	ff e0       	ldi	r31, 0x0F	; 15
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <pc98_wait_response+0x14>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <pc98_wait_response+0x1a>
     d06:	00 00       	nop
     d08:	c1 30       	cpi	r28, 0x01	; 1
     d0a:	91 f7       	brne	.-28     	; 0xcf0 <pc98_wait_response+0x4>
    return code;
}
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <matrix_init>:
    if (code != -1) dprintf("send %02X: %02X\n", pc98_led, code);
    if (code != 0xFA) goto RETRY;
}

void matrix_init(void)
{
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
    PC98_RST_DDR |= (1<<PC98_RST_BIT);
     d1c:	53 9a       	sbi	0x0a, 3	; 10
    PC98_RDY_DDR |= (1<<PC98_RDY_BIT);
     d1e:	54 9a       	sbi	0x0a, 4	; 10
    PC98_RTY_DDR |= (1<<PC98_RTY_BIT);
     d20:	51 9a       	sbi	0x0a, 1	; 10
    PC98_RST_PORT |= (1<<PC98_RST_BIT);
     d22:	5b 9a       	sbi	0x0b, 3	; 11
    PC98_RDY_PORT |= (1<<PC98_RDY_BIT);
     d24:	5c 9a       	sbi	0x0b, 4	; 11
    PC98_RTY_PORT |= (1<<PC98_RTY_BIT);
     d26:	59 9a       	sbi	0x0b, 1	; 11


    serial_init();
     d28:	0e 94 ce 07 	call	0xf9c	; 0xf9c <serial_init>

    // PC98 reset
    // https://archive.org/stream/PC9800TechnicalDataBookHARDWARE1993/PC-9800TechnicalDataBook_HARDWARE1993#page/n359
    PC98_RDY_PORT |=  (1<<PC98_RDY_BIT);    // RDY: high
     d2c:	5c 9a       	sbi	0x0b, 4	; 11
    PC98_RST_PORT &= ~(1<<PC98_RST_BIT);    // RST: low
     d2e:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d30:	20 e5       	ldi	r18, 0x50	; 80
     d32:	2a 95       	dec	r18
     d34:	f1 f7       	brne	.-4      	; 0xd32 <matrix_init+0x22>
    _delay_us(15);                          // > 13us
    PC98_RST_PORT |= (1<<PC98_RST_BIT);     // RST: high
     d36:	5b 9a       	sbi	0x0b, 3	; 11
	__builtin_avr_delay_cycles(__ticks_dc);
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	90 e7       	ldi	r25, 0x70	; 112
     d3c:	22 e0       	ldi	r18, 0x02	; 2
     d3e:	81 50       	subi	r24, 0x01	; 1
     d40:	90 40       	sbci	r25, 0x00	; 0
     d42:	20 40       	sbci	r18, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <matrix_init+0x2e>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <matrix_init+0x38>
     d48:	00 00       	nop
    if (code != -1) dprintf("send 9C: %02X\n", code);
     d4a:	00 e8       	ldi	r16, 0x80	; 128
     d4c:	12 e0       	ldi	r17, 0x02	; 2
    if (code != -1) dprintf("send 70: %02X\n", code);
     d4e:	81 e7       	ldi	r24, 0x71	; 113
     d50:	e8 2e       	mov	r14, r24
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	f8 2e       	mov	r15, r24
    pc98_send(0x9C);
     d56:	8c e9       	ldi	r24, 0x9C	; 156
     d58:	0e 94 65 06 	call	0xcca	; 0xcca <pc98_send>
    code = pc98_wait_response();
     d5c:	0e 94 76 06 	call	0xcec	; 0xcec <pc98_wait_response>
     d60:	ec 01       	movw	r28, r24
    if (code != -1) dprintf("send 9C: %02X\n", code);
     d62:	cf 3f       	cpi	r28, 0xFF	; 255
     d64:	dc 07       	cpc	r29, r28
     d66:	59 f1       	breq	.+86     	; 0xdbe <matrix_init+0xae>
     d68:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
     d6c:	80 ff       	sbrs	r24, 0
     d6e:	0a c0       	rjmp	.+20     	; 0xd84 <matrix_init+0x74>
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	1f 93       	push	r17
     d76:	0f 93       	push	r16
     d78:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
    if (code != 0xFA) return;
     d84:	ca 3f       	cpi	r28, 0xFA	; 250
     d86:	d1 05       	cpc	r29, r1
     d88:	d1 f4       	brne	.+52     	; 0xdbe <matrix_init+0xae>
    pc98_send(0x70);
     d8a:	80 e7       	ldi	r24, 0x70	; 112
     d8c:	0e 94 65 06 	call	0xcca	; 0xcca <pc98_send>
    code = pc98_wait_response();
     d90:	0e 94 76 06 	call	0xcec	; 0xcec <pc98_wait_response>
     d94:	ec 01       	movw	r28, r24
    if (code != -1) dprintf("send 70: %02X\n", code);
     d96:	cf 3f       	cpi	r28, 0xFF	; 255
     d98:	dc 07       	cpc	r29, r28
     d9a:	e9 f2       	breq	.-70     	; 0xd56 <matrix_init+0x46>
     d9c:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
     da0:	80 ff       	sbrs	r24, 0
     da2:	0a c0       	rjmp	.+20     	; 0xdb8 <matrix_init+0xa8>
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	ff 92       	push	r15
     daa:	ef 92       	push	r14
     dac:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
    if (code != 0xFA) goto RETRY;
     db8:	ca 3f       	cpi	r28, 0xFA	; 250
     dba:	d1 05       	cpc	r29, r1
     dbc:	61 f6       	brne	.-104    	; 0xd56 <matrix_init+0x46>
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f1 e0       	ldi	r31, 0x01	; 1

    _delay_ms(50);
    pc98_inhibit_repeat();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
     dc2:	11 92       	st	Z+, r1
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	eb 34       	cpi	r30, 0x4B	; 75
     dc8:	f8 07       	cpc	r31, r24
     dca:	d9 f7       	brne	.-10     	; 0xdc2 <matrix_init+0xb2>

    // ready to receive from keyboard
    PC98_RDY_PORT &= ~(1<<PC98_RDY_BIT);    // RDY: low
     dcc:	5c 98       	cbi	0x0b, 4	; 11

    return;
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	08 95       	ret

00000ddc <matrix_scan>:

uint8_t matrix_scan(void)
{
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
    uint16_t code;
    code = serial_recv2();
     de8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <serial_recv2>
     dec:	f8 2e       	mov	r15, r24
     dee:	08 2f       	mov	r16, r24
     df0:	19 2f       	mov	r17, r25
    if (code == -1) {
     df2:	0f 3f       	cpi	r16, 0xFF	; 255
     df4:	10 07       	cpc	r17, r16
     df6:	09 f0       	breq	.+2      	; 0xdfa <matrix_scan+0x1e>
     df8:	52 c0       	rjmp	.+164    	; 0xe9e <matrix_scan+0xc2>
#ifdef PC98_LED_CONTROL
        // Before sending command  we have to make sure that there is no unprocessed key in queue
        // otherwise keys will be missed during sending command
        if (pc98_led) {
     dfa:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <pc98_led>
     dfe:	ff 20       	and	r15, r15
     e00:	91 f0       	breq	.+36     	; 0xe26 <matrix_scan+0x4a>
    if (code != -1) dprintf("send 9D: %02X\n", code);
     e02:	0c e5       	ldi	r16, 0x5C	; 92
     e04:	12 e0       	ldi	r17, 0x02	; 2
    if (code != -1) dprintf("send %02X: %02X\n", pc98_led, code);
     e06:	9b e4       	ldi	r25, 0x4B	; 75
     e08:	e9 2e       	mov	r14, r25
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	f9 2e       	mov	r15, r25
    pc98_send(0x9D);
     e0e:	8d e9       	ldi	r24, 0x9D	; 157
     e10:	0e 94 65 06 	call	0xcca	; 0xcca <pc98_send>
    code = pc98_wait_response();
     e14:	0e 94 76 06 	call	0xcec	; 0xcec <pc98_wait_response>
     e18:	ec 01       	movw	r28, r24
    if (code != -1) dprintf("send 9D: %02X\n", code);
     e1a:	cf 3f       	cpi	r28, 0xFF	; 255
     e1c:	dc 07       	cpc	r29, r28
     e1e:	59 f4       	brne	.+22     	; 0xe36 <matrix_scan+0x5a>
            pc98_led_set();
            pc98_led = 0;
     e20:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <pc98_led>
        }
#endif
        return 0;
     e24:	f1 2c       	mov	r15, r1
    // This is not optimal place though, it works.
    PC98_RDY_PORT |=  (1<<PC98_RDY_BIT);    // RDY: high
    _delay_us(20);
    PC98_RDY_PORT &= ~(1<<PC98_RDY_BIT);    // RDY: low
    return code;
}
     e26:	8f 2d       	mov	r24, r15
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret
    if (code != -1) dprintf("send 9D: %02X\n", code);
     e36:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
     e3a:	80 ff       	sbrs	r24, 0
     e3c:	0a c0       	rjmp	.+20     	; 0xe52 <matrix_scan+0x76>
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	1f 93       	push	r17
     e44:	0f 93       	push	r16
     e46:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
    if (code != 0xFA) return;
     e52:	ca 3f       	cpi	r28, 0xFA	; 250
     e54:	d1 05       	cpc	r29, r1
     e56:	21 f7       	brne	.-56     	; 0xe20 <matrix_scan+0x44>
    pc98_send(pc98_led);
     e58:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <pc98_led>
     e5c:	0e 94 65 06 	call	0xcca	; 0xcca <pc98_send>
    code = pc98_wait_response();
     e60:	0e 94 76 06 	call	0xcec	; 0xcec <pc98_wait_response>
     e64:	ec 01       	movw	r28, r24
    if (code != -1) dprintf("send %02X: %02X\n", pc98_led, code);
     e66:	cf 3f       	cpi	r28, 0xFF	; 255
     e68:	dc 07       	cpc	r29, r28
     e6a:	89 f2       	breq	.-94     	; 0xe0e <matrix_scan+0x32>
     e6c:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
     e70:	80 ff       	sbrs	r24, 0
     e72:	10 c0       	rjmp	.+32     	; 0xe94 <matrix_scan+0xb8>
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <pc98_led>
     e7c:	1f 92       	push	r1
     e7e:	8f 93       	push	r24
     e80:	ff 92       	push	r15
     e82:	ef 92       	push	r14
     e84:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
    if (code != 0xFA) goto RETRY;
     e94:	ca 3f       	cpi	r28, 0xFA	; 250
     e96:	d1 05       	cpc	r29, r1
     e98:	09 f0       	breq	.+2      	; 0xe9c <matrix_scan+0xc0>
     e9a:	b9 cf       	rjmp	.-142    	; 0xe0e <matrix_scan+0x32>
     e9c:	c1 cf       	rjmp	.-126    	; 0xe20 <matrix_scan+0x44>
    dprintf("%02X ", code);
     e9e:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
     ea2:	80 ff       	sbrs	r24, 0
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <matrix_scan+0xe2>
     ea6:	9f 93       	push	r25
     ea8:	ff 92       	push	r15
     eaa:	8b e6       	ldi	r24, 0x6B	; 107
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	9f 93       	push	r25
     eb0:	8f 93       	push	r24
     eb2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
    if (code&0x80) {
     ebe:	6f 2d       	mov	r22, r15
     ec0:	67 70       	andi	r22, 0x07	; 7
     ec2:	e8 01       	movw	r28, r16
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	d6 95       	lsr	r29
     ec8:	c7 95       	ror	r28
     eca:	8a 95       	dec	r24
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <matrix_scan+0xea>
     ece:	8c 2f       	mov	r24, r28
     ed0:	8f 70       	andi	r24, 0x0F	; 15
     ed2:	07 ff       	sbrs	r16, 7
     ed4:	1b c0       	rjmp	.+54     	; 0xf0c <matrix_scan+0x130>
        if (matrix_is_on(ROW(code), COL(code))) {
     ed6:	0e 94 b2 11 	call	0x2364	; 0x2364 <matrix_is_on>
     eda:	88 23       	and	r24, r24
     edc:	81 f0       	breq	.+32     	; 0xefe <matrix_scan+0x122>
            matrix[ROW(code)] &= ~(1<<COL(code));
     ede:	cf 70       	andi	r28, 0x0F	; 15
     ee0:	dd 27       	eor	r29, r29
     ee2:	c5 5c       	subi	r28, 0xC5	; 197
     ee4:	de 4f       	sbci	r29, 0xFE	; 254
     ee6:	07 70       	andi	r16, 0x07	; 7
     ee8:	11 27       	eor	r17, r17
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <matrix_scan+0x116>
     ef0:	88 0f       	add	r24, r24
     ef2:	0a 95       	dec	r16
     ef4:	ea f7       	brpl	.-6      	; 0xef0 <matrix_scan+0x114>
     ef6:	80 95       	com	r24
     ef8:	98 81       	ld	r25, Y
     efa:	89 23       	and	r24, r25
            matrix[ROW(code)] |=  (1<<COL(code));
     efc:	88 83       	st	Y, r24
    PC98_RDY_PORT |=  (1<<PC98_RDY_BIT);    // RDY: high
     efe:	5c 9a       	sbi	0x0b, 4	; 11
	__builtin_avr_delay_cycles(__ticks_dc);
     f00:	8a e6       	ldi	r24, 0x6A	; 106
     f02:	8a 95       	dec	r24
     f04:	f1 f7       	brne	.-4      	; 0xf02 <matrix_scan+0x126>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <matrix_scan+0x12c>
    PC98_RDY_PORT &= ~(1<<PC98_RDY_BIT);    // RDY: low
     f08:	5c 98       	cbi	0x0b, 4	; 11
    return code;
     f0a:	8d cf       	rjmp	.-230    	; 0xe26 <matrix_scan+0x4a>
        if (!matrix_is_on(ROW(code), COL(code))) {
     f0c:	0e 94 b2 11 	call	0x2364	; 0x2364 <matrix_is_on>
     f10:	81 11       	cpse	r24, r1
     f12:	f5 cf       	rjmp	.-22     	; 0xefe <matrix_scan+0x122>
            matrix[ROW(code)] |=  (1<<COL(code));
     f14:	cf 70       	andi	r28, 0x0F	; 15
     f16:	dd 27       	eor	r29, r29
     f18:	c5 5c       	subi	r28, 0xC5	; 197
     f1a:	de 4f       	sbci	r29, 0xFE	; 254
     f1c:	07 70       	andi	r16, 0x07	; 7
     f1e:	11 27       	eor	r17, r17
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <matrix_scan+0x14c>
     f26:	22 0f       	add	r18, r18
     f28:	0a 95       	dec	r16
     f2a:	ea f7       	brpl	.-6      	; 0xf26 <matrix_scan+0x14a>
     f2c:	88 81       	ld	r24, Y
     f2e:	82 2b       	or	r24, r18
     f30:	e5 cf       	rjmp	.-54     	; 0xefc <matrix_scan+0x120>

00000f32 <matrix_get_row>:

inline
uint8_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     f32:	e8 2f       	mov	r30, r24
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	e5 5c       	subi	r30, 0xC5	; 197
     f38:	fe 4f       	sbci	r31, 0xFE	; 254
}
     f3a:	80 81       	ld	r24, Z
     f3c:	08 95       	ret

00000f3e <led_set>:

void led_set(uint8_t usb_led)
{
    // https://archive.org/stream/PC9800TechnicalDataBookHARDWARE1993/PC-9800TechnicalDataBook_HARDWARE1993#page/n161
    // http://www.webtech.co.jp/company/doc/undocumented_mem/io_kb.txt
    pc98_led = 0x70;
     f3e:	90 e7       	ldi	r25, 0x70	; 112
    if (usb_led & (1<<USB_LED_NUM_LOCK))    pc98_led |= (1<<0);
     f40:	80 fd       	sbrc	r24, 0
     f42:	91 e7       	ldi	r25, 0x71	; 113
     f44:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <pc98_led>
    if (usb_led & (1<<USB_LED_CAPS_LOCK))   pc98_led |= (1<<2);
     f48:	81 ff       	sbrs	r24, 1
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <led_set+0x18>
     f4c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <pc98_led>
     f50:	94 60       	ori	r25, 0x04	; 4
     f52:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <pc98_led>
    dprintf("usb_led: %02X\n", usb_led);
     f56:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <debug_config>
     f5a:	90 ff       	sbrs	r25, 0
     f5c:	1e c0       	rjmp	.+60     	; 0xf9a <led_set+0x5c>
     f5e:	1f 92       	push	r1
     f60:	8f 93       	push	r24
     f62:	8c e3       	ldi	r24, 0x3C	; 60
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    dprintf("pc98_led: %02X\n", pc98_led);
     f6e:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	80 ff       	sbrs	r24, 0
     f7c:	0e c0       	rjmp	.+28     	; 0xf9a <led_set+0x5c>
     f7e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <pc98_led>
     f82:	1f 92       	push	r1
     f84:	8f 93       	push	r24
     f86:	8c e2       	ldi	r24, 0x2C	; 44
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	9f 93       	push	r25
     f8c:	8f 93       	push	r24
     f8e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
}
     f9a:	08 95       	ret

00000f9c <serial_init>:
#endif


void serial_init(void)
{
    SERIAL_UART_INIT();
     f9c:	83 e3       	ldi	r24, 0x33	; 51
     f9e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     fa2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     fa6:	e9 ec       	ldi	r30, 0xC9	; 201
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 69       	ori	r24, 0x90	; 144
     fae:	80 83       	st	Z, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	88 60       	ori	r24, 0x08	; 8
     fb4:	80 83       	st	Z, r24
     fb6:	ea ec       	ldi	r30, 0xCA	; 202
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 63       	ori	r24, 0x30	; 48
     fbe:	80 83       	st	Z, r24
     fc0:	52 98       	cbi	0x0a, 2	; 10
     fc2:	5a 9a       	sbi	0x0b, 2	; 11
     fc4:	78 94       	sei
}
     fc6:	08 95       	ret

00000fc8 <serial_recv2>:
}

int16_t serial_recv2(void)
{
    uint8_t data = 0;
    if (rbuf_head == rbuf_tail) {
     fc8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <rbuf_tail>
     fcc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rbuf_head>
     fd0:	89 17       	cp	r24, r25
     fd2:	51 f0       	breq	.+20     	; 0xfe8 <serial_recv2+0x20>
        return -1;
    }

    data = rbuf[rbuf_tail];
     fd4:	e9 2f       	mov	r30, r25
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	e3 5b       	subi	r30, 0xB3	; 179
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	80 81       	ld	r24, Z
    rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
     fde:	9f 5f       	subi	r25, 0xFF	; 255
     fe0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <rbuf_tail>
    rbuf_check_rts_lo();
    return data;
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	08 95       	ret
        return -1;
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	9f ef       	ldi	r25, 0xFF	; 255
}
     fec:	08 95       	ret

00000fee <serial_send>:

void serial_send(uint8_t data)
{
    while (!SERIAL_UART_TXD_READY) ;
     fee:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     ff2:	95 ff       	sbrs	r25, 5
     ff4:	fc cf       	rjmp	.-8      	; 0xfee <serial_send>
    SERIAL_UART_DATA = data;
     ff6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
}
     ffa:	08 95       	ret

00000ffc <__vector_25>:

// USART RX complete interrupt
ISR(SERIAL_UART_RXD_VECT)
{
     ffc:	8f 93       	push	r24
     ffe:	8f b7       	in	r24, 0x3f	; 63
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
    uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
    1008:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <rbuf_head>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	8e 0f       	add	r24, r30
    if (next != rbuf_tail) {
    1010:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <rbuf_tail>
    1014:	98 17       	cp	r25, r24
    1016:	41 f0       	breq	.+16     	; 0x1028 <__vector_25+0x2c>
        rbuf[rbuf_head] = SERIAL_UART_DATA;
    1018:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
    101c:	f0 e0       	ldi	r31, 0x00	; 0
        rbuf[rbuf_head] = SERIAL_UART_DATA;
    101e:	e3 5b       	subi	r30, 0xB3	; 179
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	90 83       	st	Z, r25
        rbuf_head = next;
    1024:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <rbuf_head>
    }
    rbuf_check_rts_hi();
}
    1028:	ff 91       	pop	r31
    102a:	ef 91       	pop	r30
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	8f bf       	out	0x3f, r24	; 63
    1032:	8f 91       	pop	r24
    1034:	18 95       	reti

00001036 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1036:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <keyboard_led_stats>
    103a:	08 95       	ret

0000103c <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	00 d0       	rcall	.+0      	; 0x1042 <send_consumer+0x6>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9c 01       	movw	r18, r24
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    104a:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	19 f5       	brne	.+70     	; 0x1098 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	99 83       	std	Y+1, r25	; 0x01
    1056:	3b 83       	std	Y+3, r19	; 0x03
    1058:	2a 83       	std	Y+2, r18	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1060:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1064:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1066:	95 fd       	sbrc	r25, 5
    1068:	06 c0       	rjmp	.+12     	; 0x1076 <send_consumer+0x3a>
    106a:	95 ed       	ldi	r25, 0xD5	; 213
    106c:	9a 95       	dec	r25
    106e:	f1 f7       	brne	.-4      	; 0x106c <send_consumer+0x30>
    1070:	00 00       	nop
    1072:	81 11       	cpse	r24, r1
    1074:	f5 cf       	rjmp	.-22     	; 0x1060 <send_consumer+0x24>
    1076:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    107a:	85 ff       	sbrs	r24, 5
    107c:	0d c0       	rjmp	.+26     	; 0x1098 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	63 e0       	ldi	r22, 0x03	; 3
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    108e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1092:	8e 77       	andi	r24, 0x7E	; 126
    1094:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
#endif
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <send_system>:
{
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <send_system+0x6>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
    10b0:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <USB_DeviceState>
    10b4:	24 30       	cpi	r18, 0x04	; 4
    10b6:	31 f5       	brne	.+76     	; 0x1104 <send_system+0x60>
    report_extra_t r = {
    10b8:	22 e0       	ldi	r18, 0x02	; 2
    10ba:	29 83       	std	Y+1, r18	; 0x01
        .usage = data - SYSTEM_POWER_DOWN + 1
    10bc:	80 58       	subi	r24, 0x80	; 128
    10be:	91 09       	sbc	r25, r1
    report_extra_t r = {
    10c0:	9b 83       	std	Y+3, r25	; 0x03
    10c2:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10cc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10d0:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    10d2:	95 fd       	sbrc	r25, 5
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <send_system+0x3e>
    10d6:	95 ed       	ldi	r25, 0xD5	; 213
    10d8:	9a 95       	dec	r25
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <send_system+0x34>
    10dc:	00 00       	nop
    10de:	81 11       	cpse	r24, r1
    10e0:	f5 cf       	rjmp	.-22     	; 0x10cc <send_system+0x28>
    10e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    10e6:	85 ff       	sbrs	r24, 5
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <send_system+0x60>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	63 e0       	ldi	r22, 0x03	; 3
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	ce 01       	movw	r24, r28
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10fe:	8e 77       	andi	r24, 0x7E	; 126
    1100:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <send_mouse>:
{
    1110:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1112:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	f9 f4       	brne	.+62     	; 0x1158 <send_mouse+0x48>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1120:	9f ef       	ldi	r25, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1122:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1126:	91 50       	subi	r25, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1128:	85 fd       	sbrc	r24, 5
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <send_mouse+0x28>
    112c:	85 ed       	ldi	r24, 0xD5	; 213
    112e:	8a 95       	dec	r24
    1130:	f1 f7       	brne	.-4      	; 0x112e <send_mouse+0x1e>
    1132:	00 00       	nop
    1134:	91 11       	cpse	r25, r1
    1136:	f5 cf       	rjmp	.-22     	; 0x1122 <send_mouse+0x12>
    1138:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    113c:	85 ff       	sbrs	r24, 5
    113e:	0c c0       	rjmp	.+24     	; 0x1158 <send_mouse+0x48>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	65 e0       	ldi	r22, 0x05	; 5
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	c9 01       	movw	r24, r18
    114a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    114e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1152:	8e 77       	andi	r24, 0x7E	; 126
    1154:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    1158:	08 95       	ret

0000115a <send_keyboard>:
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1160:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	11 f5       	brne	.+68     	; 0x11ac <send_keyboard+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    116e:	81 e8       	ldi	r24, 0x81	; 129
    1170:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
    1172:	21 f0       	breq	.+8      	; 0x117c <send_keyboard+0x22>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1174:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1178:	95 ff       	sbrs	r25, 5
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <send_keyboard+0x58>
    117c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    1180:	85 ff       	sbrs	r24, 5
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <send_keyboard+0x52>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	68 e0       	ldi	r22, 0x08	; 8
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	ce 01       	movw	r24, r28
    118e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1192:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1196:	8e 77       	andi	r24, 0x7E	; 126
    1198:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    119c:	88 e0       	ldi	r24, 0x08	; 8
    119e:	fe 01       	movw	r30, r28
    11a0:	a1 e5       	ldi	r26, 0x51	; 81
    11a2:	b3 e0       	ldi	r27, 0x03	; 3
    11a4:	01 90       	ld	r0, Z+
    11a6:	0d 92       	st	X+, r0
    11a8:	8a 95       	dec	r24
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <send_keyboard+0x4a>
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret
    11b2:	ef e3       	ldi	r30, 0x3F	; 63
    11b4:	f1 e0       	ldi	r31, 0x01	; 1
    11b6:	31 97       	sbiw	r30, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <send_keyboard+0x5c>
    11ba:	00 c0       	rjmp	.+0      	; 0x11bc <send_keyboard+0x62>
    11bc:	00 00       	nop
    11be:	d8 cf       	rjmp	.-80     	; 0x1170 <send_keyboard+0x16>

000011c0 <console_is_ready>:
{
    11c0:	cf 93       	push	r28
    if (!hid_listen_ready) {
    11c2:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <hid_listen_ready.5124>
    11c6:	c1 11       	cpse	r28, r1
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <console_is_ready+0x20>
        if (timer_read32() < 2500)
    11ca:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <timer_read32>
    11ce:	64 3c       	cpi	r22, 0xC4	; 196
    11d0:	79 40       	sbci	r23, 0x09	; 9
    11d2:	81 05       	cpc	r24, r1
    11d4:	91 05       	cpc	r25, r1
    11d6:	20 f0       	brcs	.+8      	; 0x11e0 <console_is_ready+0x20>
        hid_listen_ready = true;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <hid_listen_ready.5124>
    return true;
    11de:	c1 e0       	ldi	r28, 0x01	; 1
}
    11e0:	8c 2f       	mov	r24, r28
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <sendchar>:

/*******************************************************************************
 * sendchar
 ******************************************************************************/
int8_t sendchar(uint8_t c)
{
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	d8 2f       	mov	r29, r24
    if (!(SREG & (1<<SREG_I)))
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	07 fe       	sbrs	r0, 7
    11f6:	45 c0       	rjmp	.+138    	; 0x1282 <sendchar+0x9c>
    if (USB_DeviceState != DEVICE_STATE_Configured && !ringbuf_is_full(&sendbuf))
    11f8:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	71 f0       	breq	.+28     	; 0x121c <sendchar+0x36>
{
    return (buf->head == buf->tail);
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    1200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	82 23       	and	r24, r18
    1210:	93 23       	and	r25, r19
    1212:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <sendbuf+0x3>
    1216:	28 17       	cp	r18, r24
    1218:	19 06       	cpc	r1, r25
    121a:	99 f5       	brne	.+102    	; 0x1282 <sendchar+0x9c>
    if (!console_is_ready() && !ringbuf_is_full(&sendbuf))
    121c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <console_is_ready>
    1220:	81 11       	cpse	r24, r1
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <sendchar+0x5a>
    1224:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	82 23       	and	r24, r18
    1234:	93 23       	and	r25, r19
    1236:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <sendbuf+0x3>
    123a:	28 17       	cp	r18, r24
    123c:	19 06       	cpc	r1, r25
    123e:	09 f5       	brne	.+66     	; 0x1282 <sendchar+0x9c>
    uint16_t prev = timer_read();
    1240:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <timer_read>
    1244:	8c 01       	movw	r16, r24
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1246:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    124a:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    124c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1250:	89 2f       	mov	r24, r25
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	90 fd       	sbrc	r25, 0
    1256:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1258:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    1260:	85 e0       	ldi	r24, 0x05	; 5
    1262:	f8 2e       	mov	r15, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1264:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (Endpoint_IsStalled() || !Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1268:	85 fd       	sbrc	r24, 5
    126a:	08 c0       	rjmp	.+16     	; 0x127c <sendchar+0x96>
				return ((UECONX & (1 << EPEN)) ? true : false);
    126c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1270:	80 ff       	sbrs	r24, 0
    1272:	04 c0       	rjmp	.+8      	; 0x127c <sendchar+0x96>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1274:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1278:	87 fd       	sbrc	r24, 7
    127a:	43 c0       	rjmp	.+134    	; 0x1302 <sendchar+0x11c>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    127c:	cf 70       	andi	r28, 0x0F	; 15
    127e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1282:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 01       	movw	r18, r24
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	24 23       	and	r18, r20
    1296:	35 23       	and	r19, r21
    1298:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <sendbuf+0x3>
    if (ringbuf_is_full(buf)) {
    129c:	42 17       	cp	r20, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <sendchar+0xbe>
    12a2:	7d c0       	rjmp	.+250    	; 0x139e <sendchar+0x1b8>
    buf->buffer[buf->head] = data;
    12a4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <sendbuf>
    12a8:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <sendbuf+0x1>
    12ac:	82 0f       	add	r24, r18
    12ae:	93 1f       	adc	r25, r19
    12b0:	fc 01       	movw	r30, r24
    12b2:	d0 83       	st	Z, r29
    buf->head++;
    12b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
    12ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sendbuf+0x4>
    12be:	89 23       	and	r24, r25
    12c0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sendbuf+0x2>

    #ifdef CONSOLE_ENABLE
    console_putc(c);
    #endif

    return 0;
    12c4:	6c c0       	rjmp	.+216    	; 0x139e <sendchar+0x1b8>
    uint8_t data = buf->buffer[buf->tail];
    12c6:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    12ca:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    12ce:	e8 0f       	add	r30, r24
    12d0:	f1 1d       	adc	r31, r1
    12d2:	90 81       	ld	r25, Z
    buf->tail++;
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    buf->tail &= buf->size_mask;
    12d6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
    12da:	82 23       	and	r24, r18
    12dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12e0:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    12e8:	85 fd       	sbrc	r24, 5
    12ea:	0b c0       	rjmp	.+22     	; 0x1302 <sendchar+0x11c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12f0:	80 ff       	sbrs	r24, 0
    12f2:	07 c0       	rjmp	.+14     	; 0x1302 <sendchar+0x11c>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12f8:	8e 77       	andi	r24, 0x7E	; 126
    12fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    12fe:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5130>
    return (buf->head == buf->tail);
    1302:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1306:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    130a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    130e:	28 17       	cp	r18, r24
    1310:	31 f1       	breq	.+76     	; 0x135e <sendchar+0x178>
    1312:	95 fd       	sbrc	r25, 5
    1314:	d8 cf       	rjmp	.-80     	; 0x12c6 <sendchar+0xe0>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	27 c0       	rjmp	.+78     	; 0x1368 <sendchar+0x182>
				UEDATX = Data;
    131a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    131e:	2f c0       	rjmp	.+94     	; 0x137e <sendchar+0x198>
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	24 23       	and	r18, r20
    132e:	35 23       	and	r19, r21
    if (ringbuf_is_full(&sendbuf) && timeout) {
    1330:	82 17       	cp	r24, r18
    1332:	13 06       	cpc	r1, r19
    1334:	09 f0       	breq	.+2      	; 0x1338 <sendchar+0x152>
    1336:	a2 cf       	rjmp	.-188    	; 0x127c <sendchar+0x96>
    1338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <timeout.5130>
    133c:	88 23       	and	r24, r24
    133e:	09 f4       	brne	.+2      	; 0x1342 <sendchar+0x15c>
    1340:	9d cf       	rjmp	.-198    	; 0x127c <sendchar+0x96>
        uint16_t curr = timer_read();
    1342:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <timer_read>
    1346:	9c 01       	movw	r18, r24
        if (curr != prev) {
    1348:	80 17       	cp	r24, r16
    134a:	91 07       	cpc	r25, r17
    134c:	09 f4       	brne	.+2      	; 0x1350 <sendchar+0x16a>
    134e:	8a cf       	rjmp	.-236    	; 0x1264 <sendchar+0x7e>
            timeout--;
    1350:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <timeout.5130>
    1354:	91 50       	subi	r25, 0x01	; 1
    1356:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <timeout.5130>
        uint16_t curr = timer_read();
    135a:	89 01       	movw	r16, r18
    135c:	83 cf       	rjmp	.-250    	; 0x1264 <sendchar+0x7e>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    135e:	95 ff       	sbrs	r25, 5
    1360:	da cf       	rjmp	.-76     	; 0x1316 <sendchar+0x130>
    1362:	d0 93 f1 00 	sts	0x00F1, r29	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
        done = true;
    1366:	91 e0       	ldi	r25, 0x01	; 1
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1368:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    136c:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1370:	53 2f       	mov	r21, r19
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    1372:	45 2b       	or	r20, r21
    1374:	79 f0       	breq	.+30     	; 0x1394 <sendchar+0x1ae>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1376:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    137a:	30 ff       	sbrs	r19, 0
    137c:	0b c0       	rjmp	.+22     	; 0x1394 <sendchar+0x1ae>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    137e:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    1382:	35 fd       	sbrc	r19, 5
    1384:	ca cf       	rjmp	.-108    	; 0x131a <sendchar+0x134>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1386:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    138a:	3e 77       	andi	r19, 0x7E	; 126
    138c:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    1390:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5130>
    if (done) {
    1394:	99 23       	and	r25, r25
    1396:	21 f2       	breq	.-120    	; 0x1320 <sendchar+0x13a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1398:	cf 70       	andi	r28, 0x0F	; 15
    139a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	08 95       	ret

000013ac <EVENT_USB_Device_Connect>:
    if (!USB_IsInitialized) {
    13ac:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <USB_IsInitialized>
    13b0:	81 11       	cpse	r24, r1
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <EVENT_USB_Device_Connect+0x10>
        USB_Disable();
    13b4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <USB_Disable>
        USB_Init();
    13b8:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <USB_Init>
}
    13bc:	08 95       	ret

000013be <EVENT_USB_Device_Disconnect>:
    USB_IsInitialized = false;
    13be:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <USB_IsInitialized>
}
    13c2:	08 95       	ret

000013c4 <EVENT_USB_Device_Reset>:
}
    13c4:	08 95       	ret

000013c6 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    13c6:	42 e0       	ldi	r20, 0x02	; 2
    13c8:	61 ec       	ldi	r22, 0xC1	; 193
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Endpoint_ConfigureEndpoint_Prv>
    13d0:	42 e0       	ldi	r20, 0x02	; 2
    13d2:	61 ec       	ldi	r22, 0xC1	; 193
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Endpoint_ConfigureEndpoint_Prv>
    13da:	42 e0       	ldi	r20, 0x02	; 2
    13dc:	61 ec       	ldi	r22, 0xC1	; 193
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Endpoint_ConfigureEndpoint_Prv>
    13e4:	42 e2       	ldi	r20, 0x22	; 34
    13e6:	61 ec       	ldi	r22, 0xC1	; 193
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <Endpoint_ConfigureEndpoint_Prv>

000013ee <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    13ee:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <USB_ControlRequest+0x1>
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <EVENT_USB_Device_ControlRequest+0xa>
    13f6:	52 c0       	rjmp	.+164    	; 0x149c <EVENT_USB_Device_ControlRequest+0xae>
    13f8:	30 f4       	brcc	.+12     	; 0x1406 <EVENT_USB_Device_ControlRequest+0x18>
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	59 f1       	breq	.+86     	; 0x1454 <EVENT_USB_Device_ControlRequest+0x66>
    13fe:	82 30       	cpi	r24, 0x02	; 2
    1400:	09 f4       	brne	.+2      	; 0x1404 <EVENT_USB_Device_ControlRequest+0x16>
    1402:	8e c0       	rjmp	.+284    	; 0x1520 <EVENT_USB_Device_ControlRequest+0x132>
    1404:	08 95       	ret
    1406:	8a 30       	cpi	r24, 0x0A	; 10
    1408:	09 f4       	brne	.+2      	; 0x140c <EVENT_USB_Device_ControlRequest+0x1e>
    140a:	7a c0       	rjmp	.+244    	; 0x1500 <EVENT_USB_Device_ControlRequest+0x112>
    140c:	8b 30       	cpi	r24, 0x0B	; 11
    140e:	09 f4       	brne	.+2      	; 0x1412 <EVENT_USB_Device_ControlRequest+0x24>
    1410:	60 c0       	rjmp	.+192    	; 0x14d2 <EVENT_USB_Device_ControlRequest+0xe4>
    1412:	89 30       	cpi	r24, 0x09	; 9
    1414:	09 f0       	breq	.+2      	; 0x1418 <EVENT_USB_Device_ControlRequest+0x2a>
    1416:	41 c0       	rjmp	.+130    	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1418:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>
    141c:	81 32       	cpi	r24, 0x21	; 33
    141e:	e9 f5       	brne	.+122    	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
                switch (USB_ControlRequest.wIndex) {
    1420:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <USB_ControlRequest+0x4>
    1424:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <USB_ControlRequest+0x5>
    1428:	89 2b       	or	r24, r25
    142a:	b9 f5       	brne	.+110    	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    142c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1430:	87 7f       	andi	r24, 0xF7	; 247
    1432:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1436:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    143a:	82 ff       	sbrs	r24, 2
    143c:	2a c0       	rjmp	.+84     	; 0x1492 <EVENT_USB_Device_ControlRequest+0xa4>
				return UEDATX;
    143e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1442:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1446:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    144a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    144c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1450:	0c 94 25 0c 	jmp	0x184a	; 0x184a <Endpoint_ClearStatusStage>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1454:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>
    1458:	81 3a       	cpi	r24, 0xA1	; 161
    145a:	f9 f4       	brne	.+62     	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    145c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1460:	87 7f       	andi	r24, 0xF7	; 247
    1462:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    1466:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <USB_ControlRequest+0x4>
    146a:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <USB_ControlRequest+0x5>
    146e:	89 2b       	or	r24, r25
    1470:	61 f4       	brne	.+24     	; 0x148a <EVENT_USB_Device_ControlRequest+0x9c>
                    ReportSize = sizeof(keyboard_report_sent);
    1472:	68 e0       	ldi	r22, 0x08	; 8
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1474:	81 e5       	ldi	r24, 0x51	; 81
    1476:	93 e0       	ldi	r25, 0x03	; 3
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	0e 94 c6 0c 	call	0x198c	; 0x198c <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    147e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1482:	8b 77       	andi	r24, 0x7B	; 123
    1484:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1488:	08 95       	ret
    uint8_t  ReportSize = 0;
    148a:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	f3 cf       	rjmp	.-26     	; 0x1478 <EVENT_USB_Device_ControlRequest+0x8a>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1492:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    1496:	81 11       	cpse	r24, r1
    1498:	ce cf       	rjmp	.-100    	; 0x1436 <EVENT_USB_Device_ControlRequest+0x48>
}
    149a:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    149c:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>
    14a0:	81 3a       	cpi	r24, 0xA1	; 161
    14a2:	d9 f7       	brne	.-10     	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    14a4:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <USB_ControlRequest+0x4>
    14a8:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <USB_ControlRequest+0x5>
    14ac:	89 2b       	or	r24, r25
    14ae:	a9 f7       	brne	.-22     	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    14b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14b4:	87 7f       	andi	r24, 0xF7	; 247
    14b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
    14be:	80 ff       	sbrs	r24, 0
    14c0:	fc cf       	rjmp	.-8      	; 0x14ba <EVENT_USB_Device_ControlRequest+0xcc>
                    Endpoint_Write_8(keyboard_protocol);
    14c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
				UEDATX = Data;
    14c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ce:	8e 77       	andi	r24, 0x7E	; 126
    14d0:	bd cf       	rjmp	.-134    	; 0x144c <EVENT_USB_Device_ControlRequest+0x5e>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14d2:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>
    14d6:	81 32       	cpi	r24, 0x21	; 33
    14d8:	01 f7       	brne	.-64     	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    14da:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <USB_ControlRequest+0x4>
    14de:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <USB_ControlRequest+0x5>
    14e2:	89 2b       	or	r24, r25
    14e4:	d1 f6       	brne	.-76     	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
    14e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ea:	87 7f       	andi	r24, 0xF7	; 247
    14ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
    14f0:	0e 94 25 0c 	call	0x184a	; 0x184a <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    14f4:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USB_ControlRequest+0x2>
    14f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <keyboard_protocol>
                    clear_keyboard();
    14fc:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1500:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>
    1504:	81 32       	cpi	r24, 0x21	; 33
    1506:	49 f6       	brne	.-110    	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
    1508:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    150c:	87 7f       	andi	r24, 0xF7	; 247
    150e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1512:	0e 94 25 0c 	call	0x184a	; 0x184a <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1516:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <USB_ControlRequest+0x3>
    151a:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <keyboard_idle>
    151e:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1520:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>
    1524:	81 3a       	cpi	r24, 0xA1	; 161
    1526:	09 f0       	breq	.+2      	; 0x152a <EVENT_USB_Device_ControlRequest+0x13c>
    1528:	b8 cf       	rjmp	.-144    	; 0x149a <EVENT_USB_Device_ControlRequest+0xac>
    152a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    152e:	87 7f       	andi	r24, 0xF7	; 247
    1530:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1534:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    1538:	80 ff       	sbrs	r24, 0
    153a:	fc cf       	rjmp	.-8      	; 0x1534 <EVENT_USB_Device_ControlRequest+0x146>
                Endpoint_Write_8(keyboard_idle);
    153c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <keyboard_idle>
    1540:	c2 cf       	rjmp	.-124    	; 0x14c6 <EVENT_USB_Device_ControlRequest+0xd8>

00001542 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1542:	08 95       	ret

00001544 <hook_late_init>:
    1544:	08 95       	ret

00001546 <hook_usb_suspend_entry>:
 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    // Turn off LED to save power and keep its status to resotre it later.
    // LED status will be updated by keyboard_task() in main loop hopefully.
    _led_stats = keyboard_led_stats;
    1546:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <keyboard_led_stats>
    154a:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <_led_stats>
    keyboard_led_stats = 0;
    154e:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <keyboard_led_stats>

    // Calling long task here can prevent USB state transition

    matrix_clear();
    1552:	0e 94 b0 11 	call	0x2360	; 0x2360 <matrix_clear>
    clear_keyboard();
    1556:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <clear_keyboard>

0000155a <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    155a:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <hook_usb_suspend_entry>

0000155e <hook_usb_suspend_loop>:
__attribute__((weak))
void hook_usb_suspend_loop(void)
{
#ifndef TMK_LUFA_DEBUG_UART
    // This corrupts debug print when suspend
    suspend_power_down();
    155e:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <suspend_power_down>
#endif
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1562:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <USB_Device_RemoteWakeupEnabled>
    1566:	88 23       	and	r24, r24
    1568:	29 f0       	breq	.+10     	; 0x1574 <hook_usb_suspend_loop+0x16>
    156a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <suspend_wakeup_condition>
    156e:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1570:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <USB_Device_SendRemoteWakeup>
    }
}
    1574:	08 95       	ret

00001576 <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    1576:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
#endif

    // Restore LED status and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    157a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <_led_stats>
    157e:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <keyboard_led_stats>

    // Calling long task here can prevent USB state transition
}
    1582:	08 95       	ret

00001584 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    1584:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <hook_usb_wakeup>

00001588 <hook_usb_startup_wait_loop>:
    1588:	08 95       	ret

0000158a <main>:
    MCUSR &= ~(1 << WDRF);
    158a:	84 b7       	in	r24, 0x34	; 52
    158c:	87 7f       	andi	r24, 0xF7	; 247
    158e:	84 bf       	out	0x34, r24	; 52
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	a8 95       	wdr
    1596:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    159a:	88 61       	ori	r24, 0x18	; 24
    159c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    15a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    15a4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    15a6:	80 e8       	ldi	r24, 0x80	; 128
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    15b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    15b6:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    15b8:	83 ef       	ldi	r24, 0xF3	; 243
    15ba:	98 e0       	ldi	r25, 0x08	; 8
    15bc:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <print_set_sendchar>
    host_set_driver(&lufa_driver);
    15c0:	86 e0       	ldi	r24, 0x06	; 6
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 3b 10 	call	0x2076	; 0x2076 <host_set_driver>
    print("\n\nTMK:" STR(TMK_VERSION) "/LUFA\n\n");
    15c8:	83 eb       	ldi	r24, 0xB3	; 179
    15ca:	92 e0       	ldi	r25, 0x02	; 2
    15cc:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    hook_early_init();
    15d0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <hook_early_init>
    keyboard_setup();
    15d4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <keyboard_setup>
    USB_Disable();
    15d8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <USB_Disable>
    USB_Init();
    15dc:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <USB_Init>
    sei();
    15e0:	78 94       	sei
    keyboard_init();
    15e2:	0e 94 ff 10 	call	0x21fe	; 0x21fe <keyboard_init>
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    15e6:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <main+0x66>
    15ee:	46 c0       	rjmp	.+140    	; 0x167c <main+0xf2>
    print("\nUSB configured.\n");
    15f0:	81 ea       	ldi	r24, 0xA1	; 161
    15f2:	92 e0       	ldi	r25, 0x02	; 2
    15f4:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    hook_late_init();
    15f8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <hook_late_init>
    print("\nKeyboard start.\n");
    15fc:	8f e8       	ldi	r24, 0x8F	; 143
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1604:	c4 e0       	ldi	r28, 0x04	; 4
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1606:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    160a:	85 30       	cpi	r24, 0x05	; 5
    160c:	e1 f1       	breq	.+120    	; 0x1686 <main+0xfc>
        keyboard_task();
    160e:	0e 94 03 11 	call	0x2206	; 0x2206 <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1612:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1616:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    if (fn == USB_Device_GetFrameNumber()) {
    161a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <fn.5156>
    161e:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <fn.5156+0x1>
    1622:	28 17       	cp	r18, r24
    1624:	39 07       	cpc	r19, r25
    1626:	39 f1       	breq	.+78     	; 0x1676 <main+0xec>
    1628:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    162c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    fn = USB_Device_GetFrameNumber();
    1630:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <fn.5156+0x1>
    1634:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fn.5156>
    if (!console_is_ready())
    1638:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <console_is_ready>
    163c:	88 23       	and	r24, r24
    163e:	d9 f0       	breq	.+54     	; 0x1676 <main+0xec>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1640:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	b9 f4       	brne	.+46     	; 0x1676 <main+0xec>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1648:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    164c:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    164e:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1652:	82 2f       	mov	r24, r18
    1654:	81 70       	andi	r24, 0x01	; 1
    1656:	20 fd       	sbrc	r18, 0
    1658:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    165a:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    165c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1660:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1664:	90 ff       	sbrs	r25, 0
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <main+0xe6>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1668:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    166c:	97 fd       	sbrc	r25, 7
    166e:	2a c0       	rjmp	.+84     	; 0x16c4 <main+0x13a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1670:	8f 70       	andi	r24, 0x0F	; 15
    1672:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
        USB_USBTask();
    1676:	0e 94 20 10 	call	0x2040	; 0x2040 <USB_USBTask>
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    167a:	c5 cf       	rjmp	.-118    	; 0x1606 <main+0x7c>
        USB_USBTask();
    167c:	0e 94 20 10 	call	0x2040	; 0x2040 <USB_USBTask>
        hook_usb_startup_wait_loop();
    1680:	0e 94 c4 0a 	call	0x1588	; 0x1588 <hook_usb_startup_wait_loop>
    1684:	b0 cf       	rjmp	.-160    	; 0x15e6 <main+0x5c>
            hook_usb_suspend_loop();
    1686:	0e 94 af 0a 	call	0x155e	; 0x155e <hook_usb_suspend_loop>
    168a:	bd cf       	rjmp	.-134    	; 0x1606 <main+0x7c>
    uint8_t data = buf->buffer[buf->tail];
    168c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    1690:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    1694:	e9 0f       	add	r30, r25
    1696:	f1 1d       	adc	r31, r1
    1698:	20 81       	ld	r18, Z
    buf->tail++;
    169a:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    169c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <sendbuf+0x4>
    16a0:	93 23       	and	r25, r19
    16a2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
				UEDATX = Data;
    16a6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16aa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    16ae:	95 fd       	sbrc	r25, 5
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <main+0x13a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16b2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16b6:	90 ff       	sbrs	r25, 0
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <main+0x13a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ba:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16be:	9e 77       	andi	r25, 0x7E	; 126
    16c0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    return (buf->head == buf->tail);
    16c4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    16c8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
    16cc:	29 17       	cp	r18, r25
    16ce:	21 f0       	breq	.+8      	; 0x16d8 <main+0x14e>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16d0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16d4:	25 fd       	sbrc	r18, 5
    16d6:	da cf       	rjmp	.-76     	; 0x168c <main+0x102>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    16d8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    16dc:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    16e0:	39 2f       	mov	r19, r25
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    16e2:	23 2b       	or	r18, r19
    16e4:	29 f2       	breq	.-118    	; 0x1670 <main+0xe6>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16e6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ea:	90 ff       	sbrs	r25, 0
    16ec:	c1 cf       	rjmp	.-126    	; 0x1670 <main+0xe6>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16ee:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    16f2:	95 fd       	sbrc	r25, 5
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <main+0x178>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16f6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16fa:	9e 77       	andi	r25, 0x7E	; 126
    16fc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1700:	b7 cf       	rjmp	.-146    	; 0x1670 <main+0xe6>
				UEDATX = Data;
    1702:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1706:	f3 cf       	rjmp	.-26     	; 0x16ee <main+0x164>

00001708 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1708:	29 2f       	mov	r18, r25
    170a:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    170c:	23 30       	cpi	r18, 0x03	; 3
    170e:	31 05       	cpc	r19, r1
    1710:	21 f1       	breq	.+72     	; 0x175a <CALLBACK_USB_GetDescriptor+0x52>
    1712:	68 f4       	brcc	.+26     	; 0x172e <CALLBACK_USB_GetDescriptor+0x26>
    1714:	21 30       	cpi	r18, 0x01	; 1
    1716:	31 05       	cpc	r19, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <CALLBACK_USB_GetDescriptor+0x14>
    171a:	43 c0       	rjmp	.+134    	; 0x17a2 <CALLBACK_USB_GetDescriptor+0x9a>
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <CALLBACK_USB_GetDescriptor+0x1c>
    1722:	44 c0       	rjmp	.+136    	; 0x17ac <CALLBACK_USB_GetDescriptor+0xa4>
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	26 c0       	rjmp	.+76     	; 0x177a <CALLBACK_USB_GetDescriptor+0x72>
    172e:	21 32       	cpi	r18, 0x21	; 33
    1730:	31 05       	cpc	r19, r1
    1732:	51 f1       	breq	.+84     	; 0x1788 <CALLBACK_USB_GetDescriptor+0x80>
    1734:	22 32       	cpi	r18, 0x22	; 34
    1736:	31 05       	cpc	r19, r1
    1738:	a9 f7       	brne	.-22     	; 0x1724 <CALLBACK_USB_GetDescriptor+0x1c>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    173a:	64 30       	cpi	r22, 0x04	; 4
    173c:	71 05       	cpc	r23, r1
    173e:	90 f7       	brcc	.-28     	; 0x1724 <CALLBACK_USB_GetDescriptor+0x1c>
    1740:	fb 01       	movw	r30, r22
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	e3 5e       	subi	r30, 0xE3	; 227
    1748:	fe 4f       	sbci	r31, 0xFE	; 254
    174a:	20 81       	ld	r18, Z
    174c:	31 81       	ldd	r19, Z+1	; 0x01
    174e:	67 5e       	subi	r22, 0xE7	; 231
    1750:	7e 4f       	sbci	r23, 0xFE	; 254
    1752:	fb 01       	movw	r30, r22
    1754:	80 81       	ld	r24, Z
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	10 c0       	rjmp	.+32     	; 0x177a <CALLBACK_USB_GetDescriptor+0x72>
            switch (DescriptorIndex )
    175a:	99 27       	eor	r25, r25
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <CALLBACK_USB_GetDescriptor+0x7a>
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	29 f0       	breq	.+10     	; 0x1770 <CALLBACK_USB_GetDescriptor+0x68>
    1766:	02 97       	sbiw	r24, 0x02	; 2
    1768:	e9 f6       	brne	.-70     	; 0x1724 <CALLBACK_USB_GetDescriptor+0x1c>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    176a:	e9 ec       	ldi	r30, 0xC9	; 201
    176c:	f2 e0       	ldi	r31, 0x02	; 2
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <CALLBACK_USB_GetDescriptor+0x6c>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1770:	eb e0       	ldi	r30, 0x0B	; 11
    1772:	f3 e0       	ldi	r31, 0x03	; 3
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1774:	84 91       	lpm	r24, Z
    1776:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    1778:	9f 01       	movw	r18, r30
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    177a:	fa 01       	movw	r30, r20
    177c:	31 83       	std	Z+1, r19	; 0x01
    177e:	20 83       	st	Z, r18
    return Size;
}
    1780:	08 95       	ret
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1782:	eb ef       	ldi	r30, 0xFB	; 251
    1784:	f2 e0       	ldi	r31, 0x02	; 2
    1786:	f6 cf       	rjmp	.-20     	; 0x1774 <CALLBACK_USB_GetDescriptor+0x6c>
            switch (wIndex) {
    1788:	64 30       	cpi	r22, 0x04	; 4
    178a:	71 05       	cpc	r23, r1
    178c:	58 f6       	brcc	.-106    	; 0x1724 <CALLBACK_USB_GetDescriptor+0x1c>
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	fb 01       	movw	r30, r22
    1794:	eb 5d       	subi	r30, 0xDB	; 219
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	20 81       	ld	r18, Z
    179a:	31 81       	ldd	r19, Z+1	; 0x01
    switch (DescriptorType)
    179c:	89 e0       	ldi	r24, 0x09	; 9
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	ec cf       	rjmp	.-40     	; 0x177a <CALLBACK_USB_GetDescriptor+0x72>
            Size    = sizeof(USB_Descriptor_Device_t);
    17a2:	82 e1       	ldi	r24, 0x12	; 18
    17a4:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    17a6:	23 e8       	ldi	r18, 0x83	; 131
    17a8:	33 e0       	ldi	r19, 0x03	; 3
    17aa:	e7 cf       	rjmp	.-50     	; 0x177a <CALLBACK_USB_GetDescriptor+0x72>
            Size    = sizeof(USB_Descriptor_Configuration_t);
    17ac:	84 e7       	ldi	r24, 0x74	; 116
    17ae:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    17b0:	2f e0       	ldi	r18, 0x0F	; 15
    17b2:	33 e0       	ldi	r19, 0x03	; 3
    17b4:	e2 cf       	rjmp	.-60     	; 0x177a <CALLBACK_USB_GetDescriptor+0x72>

000017b6 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    17b6:	80 e1       	ldi	r24, 0x10	; 16
    17b8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    17ba:	82 e1       	ldi	r24, 0x12	; 18
    17bc:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    17be:	09 b4       	in	r0, 0x29	; 41
    17c0:	00 fe       	sbrs	r0, 0
    17c2:	fd cf       	rjmp	.-6      	; 0x17be <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    17c4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    17c8:	8f 7d       	andi	r24, 0xDF	; 223
    17ca:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    17ce:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    17d2:	82 60       	ori	r24, 0x02	; 2
    17d4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    17d8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    17dc:	81 fd       	sbrc	r24, 1
    17de:	fc cf       	rjmp	.-8      	; 0x17d8 <USB_Device_SendRemoteWakeup+0x22>
}
    17e0:	08 95       	ret

000017e2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    17e2:	98 2f       	mov	r25, r24
    17e4:	97 30       	cpi	r25, 0x07	; 7
    17e6:	28 f0       	brcs	.+10     	; 0x17f2 <Endpoint_ConfigureEndpoint_Prv+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17e8:	8f 70       	andi	r24, 0x0F	; 15
    17ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	08 95       	ret
    17f2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
    17f6:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    17f8:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    17fa:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    17fc:	98 17       	cp	r25, r24
    17fe:	31 f0       	breq	.+12     	; 0x180c <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    1800:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
    1804:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
    1808:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    180c:	21 fd       	sbrc	r18, 1
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1810:	9f 5f       	subi	r25, 0xFF	; 255
    1812:	e8 cf       	rjmp	.-48     	; 0x17e4 <Endpoint_ConfigureEndpoint_Prv+0x2>
				UECONX &= ~(1 << EPEN);
    1814:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1818:	3e 7f       	andi	r19, 0xFE	; 254
    181a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
    181e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1822:	3d 7f       	andi	r19, 0xFD	; 253
    1824:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
    1828:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    182c:	31 60       	ori	r19, 0x01	; 1
    182e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
    1832:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
    1836:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
    183a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    183e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
    1842:	27 fd       	sbrc	r18, 7
    1844:	e5 cf       	rjmp	.-54     	; 0x1810 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    1846:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    1848:	08 95       	ret

0000184a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    184a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>
    184e:	87 ff       	sbrs	r24, 7
    1850:	13 c0       	rjmp	.+38     	; 0x1878 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1852:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1856:	82 ff       	sbrs	r24, 2
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    185a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    185e:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1860:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1864:	04 c0       	rjmp	.+8      	; 0x186e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1866:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    186a:	81 11       	cpse	r24, r1
    186c:	f2 cf       	rjmp	.-28     	; 0x1852 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    186e:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1870:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    1874:	88 23       	and	r24, r24
    1876:	d9 f3       	breq	.-10     	; 0x186e <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    187c:	80 ff       	sbrs	r24, 0
    187e:	f8 cf       	rjmp	.-16     	; 0x1870 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1880:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1884:	8e 77       	andi	r24, 0x7E	; 126
    1886:	ec cf       	rjmp	.-40     	; 0x1860 <Endpoint_ClearStatusStage+0x16>

00001888 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1888:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    188c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1890:	95 e6       	ldi	r25, 0x65	; 101
    1892:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1894:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1898:	82 2f       	mov	r24, r18
    189a:	81 70       	andi	r24, 0x01	; 1
    189c:	20 ff       	sbrs	r18, 0
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    18a4:	80 ff       	sbrs	r24, 0
    18a6:	06 c0       	rjmp	.+12     	; 0x18b4 <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ac:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    18b0:	22 fd       	sbrc	r18, 2
    18b2:	1a c0       	rjmp	.+52     	; 0x18e8 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18b4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18b8:	88 23       	and	r24, r24
    18ba:	89 f0       	breq	.+34     	; 0x18de <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18bc:	85 30       	cpi	r24, 0x05	; 5
    18be:	89 f0       	breq	.+34     	; 0x18e2 <Endpoint_WaitUntilReady+0x5a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    18c0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    18c4:	85 fd       	sbrc	r24, 5
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <Endpoint_WaitUntilReady+0x5e>
    18c8:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    18cc:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    18d0:	42 17       	cp	r20, r18
    18d2:	53 07       	cpc	r21, r19
    18d4:	f9 f2       	breq	.-66     	; 0x1894 <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	e1 f6       	brne	.-72     	; 0x1892 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    18e8:	08 95       	ret

000018ea <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    18ea:	af 92       	push	r10
    18ec:	bf 92       	push	r11
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	6c 01       	movw	r12, r24
    18fe:	eb 01       	movw	r28, r22
    1900:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1902:	0e 94 44 0c 	call	0x1888	; 0x1888 <Endpoint_WaitUntilReady>
    1906:	f8 2e       	mov	r15, r24
    1908:	81 11       	cpse	r24, r1
    190a:	25 c0       	rjmp	.+74     	; 0x1956 <Endpoint_Write_Stream_LE+0x6c>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    190c:	01 15       	cp	r16, r1
    190e:	11 05       	cpc	r17, r1
    1910:	39 f0       	breq	.+14     	; 0x1920 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    1912:	f8 01       	movw	r30, r16
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	c8 1b       	sub	r28, r24
    191a:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    191c:	c8 0e       	add	r12, r24
    191e:	d9 1e       	adc	r13, r25
{
    1920:	b1 2c       	mov	r11, r1
    1922:	a1 2c       	mov	r10, r1
	}

	while (Length)
    1924:	20 97       	sbiw	r28, 0x00	; 0
    1926:	b9 f0       	breq	.+46     	; 0x1956 <Endpoint_Write_Stream_LE+0x6c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1928:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    192c:	85 fd       	sbrc	r24, 5
    192e:	24 c0       	rjmp	.+72     	; 0x1978 <Endpoint_Write_Stream_LE+0x8e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1930:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1934:	8e 77       	andi	r24, 0x7E	; 126
    1936:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    193a:	0e 94 20 10 	call	0x2040	; 0x2040 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    193e:	01 15       	cp	r16, r1
    1940:	11 05       	cpc	r17, r1
    1942:	a1 f0       	breq	.+40     	; 0x196c <Endpoint_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    1944:	f8 01       	movw	r30, r16
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	a8 0e       	add	r10, r24
    194c:	b9 1e       	adc	r11, r25
    194e:	b1 82       	std	Z+1, r11	; 0x01
    1950:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1952:	85 e0       	ldi	r24, 0x05	; 5
    1954:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1956:	8f 2d       	mov	r24, r15
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	08 95       	ret
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    196c:	0e 94 44 0c 	call	0x1888	; 0x1888 <Endpoint_WaitUntilReady>
    1970:	88 23       	and	r24, r24
    1972:	c1 f2       	breq	.-80     	; 0x1924 <Endpoint_Write_Stream_LE+0x3a>
    1974:	f8 2e       	mov	r15, r24
    1976:	ef cf       	rjmp	.-34     	; 0x1956 <Endpoint_Write_Stream_LE+0x6c>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1978:	f6 01       	movw	r30, r12
    197a:	81 91       	ld	r24, Z+
    197c:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    197e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
    1982:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1984:	ff ef       	ldi	r31, 0xFF	; 255
    1986:	af 1a       	sub	r10, r31
    1988:	bf 0a       	sbc	r11, r31
    198a:	cc cf       	rjmp	.-104    	; 0x1924 <Endpoint_Write_Stream_LE+0x3a>

0000198c <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    198c:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    198e:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <USB_ControlRequest+0x6>
    1992:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <USB_ControlRequest+0x7>
    1996:	86 17       	cp	r24, r22
    1998:	97 07       	cpc	r25, r23
    199a:	a0 f0       	brcs	.+40     	; 0x19c4 <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    199c:	61 15       	cp	r22, r1
    199e:	71 05       	cpc	r23, r1
    19a0:	29 f4       	brne	.+10     	; 0x19ac <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19a2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19a6:	9e 77       	andi	r25, 0x7E	; 126
    19a8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19ac:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19ae:	61 15       	cp	r22, r1
    19b0:	71 05       	cpc	r23, r1
    19b2:	51 f4       	brne	.+20     	; 0x19c8 <Endpoint_Write_Control_Stream_LE+0x3c>
    19b4:	91 11       	cpse	r25, r1
    19b6:	08 c0       	rjmp	.+16     	; 0x19c8 <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19bc:	82 ff       	sbrs	r24, 2
    19be:	34 c0       	rjmp	.+104    	; 0x1a28 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	08 95       	ret
    19c4:	bc 01       	movw	r22, r24
    19c6:	f2 cf       	rjmp	.-28     	; 0x19ac <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19c8:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19cc:	88 23       	and	r24, r24
    19ce:	c1 f1       	breq	.+112    	; 0x1a40 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19d0:	85 30       	cpi	r24, 0x05	; 5
    19d2:	c1 f1       	breq	.+112    	; 0x1a44 <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    19d8:	83 fd       	sbrc	r24, 3
    19da:	30 c0       	rjmp	.+96     	; 0x1a3c <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    19e0:	82 fd       	sbrc	r24, 2
    19e2:	ea cf       	rjmp	.-44     	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    19e8:	80 ff       	sbrs	r24, 0
    19ea:	e1 cf       	rjmp	.-62     	; 0x19ae <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19ec:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    19f0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    19f4:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	19 f0       	breq	.+6      	; 0x1a02 <Endpoint_Write_Control_Stream_LE+0x76>
    19fc:	28 30       	cpi	r18, 0x08	; 8
    19fe:	31 05       	cpc	r19, r1
    1a00:	58 f0       	brcs	.+22     	; 0x1a18 <Endpoint_Write_Control_Stream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a02:	91 e0       	ldi	r25, 0x01	; 1
    1a04:	28 30       	cpi	r18, 0x08	; 8
    1a06:	31 05       	cpc	r19, r1
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <Endpoint_Write_Control_Stream_LE+0x80>
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a0c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a10:	2e 77       	andi	r18, 0x7E	; 126
    1a12:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a16:	cb cf       	rjmp	.-106    	; 0x19ae <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a18:	81 91       	ld	r24, Z+
				UEDATX = Data;
    1a1a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    1a1e:	61 50       	subi	r22, 0x01	; 1
    1a20:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a22:	2f 5f       	subi	r18, 0xFF	; 255
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	e7 cf       	rjmp	.-50     	; 0x19f6 <Endpoint_Write_Control_Stream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a28:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a2c:	88 23       	and	r24, r24
    1a2e:	41 f0       	breq	.+16     	; 0x1a40 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a30:	85 30       	cpi	r24, 0x05	; 5
    1a32:	41 f0       	breq	.+16     	; 0x1a44 <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1a38:	83 ff       	sbrs	r24, 3
    1a3a:	be cf       	rjmp	.-132    	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
}
    1a3e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	08 95       	ret

00001a48 <Endpoint_Write_Control_PStream_LE>:
{
    1a48:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
    1a4a:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <USB_ControlRequest+0x6>
    1a4e:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <USB_ControlRequest+0x7>
    1a52:	86 17       	cp	r24, r22
    1a54:	97 07       	cpc	r25, r23
    1a56:	a0 f0       	brcs	.+40     	; 0x1a80 <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
    1a58:	61 15       	cp	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a62:	8e 77       	andi	r24, 0x7E	; 126
    1a64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a68:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
    1a6a:	61 15       	cp	r22, r1
    1a6c:	71 05       	cpc	r23, r1
    1a6e:	51 f4       	brne	.+20     	; 0x1a84 <Endpoint_Write_Control_PStream_LE+0x3c>
    1a70:	91 11       	cpse	r25, r1
    1a72:	08 c0       	rjmp	.+16     	; 0x1a84 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
    1a78:	82 ff       	sbrs	r24, 2
    1a7a:	35 c0       	rjmp	.+106    	; 0x1ae6 <Endpoint_Write_Control_PStream_LE+0x9e>
	return ENDPOINT_RWCSTREAM_NoError;
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	08 95       	ret
    1a80:	bc 01       	movw	r22, r24
    1a82:	f2 cf       	rjmp	.-28     	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a84:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a88:	88 23       	and	r24, r24
    1a8a:	c9 f1       	breq	.+114    	; 0x1afe <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a8c:	85 30       	cpi	r24, 0x05	; 5
    1a8e:	c9 f1       	breq	.+114    	; 0x1b02 <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1a94:	83 fd       	sbrc	r24, 3
    1a96:	31 c0       	rjmp	.+98     	; 0x1afa <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1a9c:	82 fd       	sbrc	r24, 2
    1a9e:	ea cf       	rjmp	.-44     	; 0x1a74 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    1aa4:	80 ff       	sbrs	r24, 0
    1aa6:	e1 cf       	rjmp	.-62     	; 0x1a6a <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1aa8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1aac:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1ab0:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ab2:	61 15       	cp	r22, r1
    1ab4:	71 05       	cpc	r23, r1
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <Endpoint_Write_Control_PStream_LE+0x76>
    1ab8:	28 30       	cpi	r18, 0x08	; 8
    1aba:	31 05       	cpc	r19, r1
    1abc:	58 f0       	brcs	.+22     	; 0x1ad4 <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	28 30       	cpi	r18, 0x08	; 8
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <Endpoint_Write_Control_PStream_LE+0x80>
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ac8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1acc:	8e 77       	andi	r24, 0x7E	; 126
    1ace:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ad2:	cb cf       	rjmp	.-106    	; 0x1a6a <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ad4:	84 91       	lpm	r24, Z
				UEDATX = Data;
    1ad6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1ada:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1adc:	61 50       	subi	r22, 0x01	; 1
    1ade:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1ae0:	2f 5f       	subi	r18, 0xFF	; 255
    1ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae4:	e6 cf       	rjmp	.-52     	; 0x1ab2 <Endpoint_Write_Control_PStream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ae6:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1aea:	88 23       	and	r24, r24
    1aec:	41 f0       	breq	.+16     	; 0x1afe <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aee:	85 30       	cpi	r24, 0x05	; 5
    1af0:	41 f0       	breq	.+16     	; 0x1b02 <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1af2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1af6:	83 ff       	sbrs	r24, 3
    1af8:	bd cf       	rjmp	.-134    	; 0x1a74 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
}
    1afc:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b02:	83 e0       	ldi	r24, 0x03	; 3
    1b04:	08 95       	ret

00001b06 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	aa 97       	sbiw	r28, 0x2a	; 42
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1b1c:	83 e5       	ldi	r24, 0x53	; 83
    1b1e:	94 e0       	ldi	r25, 0x04	; 4
				return UEDATX;
    1b20:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1b24:	fc 01       	movw	r30, r24
    1b26:	21 93       	st	Z+, r18
    1b28:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1b2a:	f4 e0       	ldi	r31, 0x04	; 4
    1b2c:	8b 35       	cpi	r24, 0x5B	; 91
    1b2e:	9f 07       	cpc	r25, r31
    1b30:	b9 f7       	brne	.-18     	; 0x1b20 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1b32:	0e 94 f7 09 	call	0x13ee	; 0x13ee <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1b3a:	83 ff       	sbrs	r24, 3
    1b3c:	1e c1       	rjmp	.+572    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b3e:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1b42:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <USB_ControlRequest+0x1>
    1b46:	9a 30       	cpi	r25, 0x0A	; 10
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <USB_Device_ProcessControlRequest+0x46>
    1b4a:	17 c1       	rjmp	.+558    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
    1b4c:	e9 2f       	mov	r30, r25
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	e4 5e       	subi	r30, 0xE4	; 228
    1b52:	f9 4d       	sbci	r31, 0xD9	; 217
    1b54:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b58:	80 38       	cpi	r24, 0x80	; 128
    1b5a:	99 f0       	breq	.+38     	; 0x1b82 <USB_Device_ProcessControlRequest+0x7c>
    1b5c:	82 38       	cpi	r24, 0x82	; 130
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <USB_Device_ProcessControlRequest+0x5c>
    1b60:	0c c1       	rjmp	.+536    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b62:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <USB_ControlRequest+0x4>
    1b66:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1b68:	87 30       	cpi	r24, 0x07	; 7
    1b6a:	08 f0       	brcs	.+2      	; 0x1b6e <USB_Device_ProcessControlRequest+0x68>
    1b6c:	06 c1       	rjmp	.+524    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b6e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b72:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b76:	85 fb       	bst	r24, 5
    1b78:	88 27       	eor	r24, r24
    1b7a:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b7c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <USB_Device_ProcessControlRequest+0x88>
	uint8_t CurrentStatus = 0;
    1b82:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1b86:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <USB_Device_RemoteWakeupEnabled>
    1b8a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1b8c:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1b8e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b92:	97 7f       	andi	r25, 0xF7	; 247
    1b94:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1b98:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1b9c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ba0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ba4:	8e 77       	andi	r24, 0x7E	; 126
    1ba6:	e5 c0       	rjmp	.+458    	; 0x1d72 <USB_Device_ProcessControlRequest+0x26c>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f4       	brne	.+2      	; 0x1bae <USB_Device_ProcessControlRequest+0xa8>
    1bac:	d3 c0       	rjmp	.+422    	; 0x1d54 <USB_Device_ProcessControlRequest+0x24e>
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <USB_Device_ProcessControlRequest+0xae>
    1bb2:	e3 c0       	rjmp	.+454    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1bb4:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USB_ControlRequest+0x2>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	d6 c0       	rjmp	.+428    	; 0x1d68 <USB_Device_ProcessControlRequest+0x262>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1bbc:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <USB_ControlRequest+0x4>
    1bc0:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1bc2:	2f ef       	ldi	r18, 0xFF	; 255
    1bc4:	28 0f       	add	r18, r24
    1bc6:	26 30       	cpi	r18, 0x06	; 6
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <USB_Device_ProcessControlRequest+0xc6>
    1bca:	d7 c0       	rjmp	.+430    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bcc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1bd0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1bd4:	20 ff       	sbrs	r18, 0
    1bd6:	c8 c0       	rjmp	.+400    	; 0x1d68 <USB_Device_ProcessControlRequest+0x262>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1bd8:	93 30       	cpi	r25, 0x03	; 3
    1bda:	31 f4       	brne	.+12     	; 0x1be8 <USB_Device_ProcessControlRequest+0xe2>
				UECONX |= (1 << STALLRQ);
    1bdc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1be0:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1be2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1be6:	c0 c0       	rjmp	.+384    	; 0x1d68 <USB_Device_ProcessControlRequest+0x262>
				UECONX |= (1 << STALLRQC);
    1be8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1bec:	90 61       	ori	r25, 0x10	; 16
    1bee:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1bf2:	21 e0       	ldi	r18, 0x01	; 1
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <USB_Device_ProcessControlRequest+0xf4>
    1bf8:	22 0f       	add	r18, r18
    1bfa:	8a 95       	dec	r24
    1bfc:	ea f7       	brpl	.-6      	; 0x1bf8 <USB_Device_ProcessControlRequest+0xf2>
    1bfe:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1c02:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1c06:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1c0a:	88 60       	ori	r24, 0x08	; 8
    1c0c:	ea cf       	rjmp	.-44     	; 0x1be2 <USB_Device_ProcessControlRequest+0xdc>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c0e:	81 11       	cpse	r24, r1
    1c10:	b4 c0       	rjmp	.+360    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1c12:	10 91 55 04 	lds	r17, 0x0455	; 0x800455 <USB_ControlRequest+0x2>
    1c16:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1c18:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1c1c:	80 78       	andi	r24, 0x80	; 128
    1c1e:	81 2b       	or	r24, r17
    1c20:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c28:	87 7f       	andi	r24, 0xF7	; 247
    1c2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1c2e:	0e 94 25 0c 	call	0x184a	; 0x184a <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1c36:	80 ff       	sbrs	r24, 0
    1c38:	fc cf       	rjmp	.-8      	; 0x1c32 <USB_Device_ProcessControlRequest+0x12c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1c3a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	11 11       	cpse	r17, r1
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <USB_DeviceState>
    1c4e:	95 c0       	rjmp	.+298    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c50:	80 58       	subi	r24, 0x80	; 128
    1c52:	82 30       	cpi	r24, 0x02	; 2
    1c54:	08 f0       	brcs	.+2      	; 0x1c58 <USB_Device_ProcessControlRequest+0x152>
    1c56:	91 c0       	rjmp	.+290    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1c58:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USB_ControlRequest+0x2>
    1c5c:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <USB_ControlRequest+0x3>
    1c60:	8c 3d       	cpi	r24, 0xDC	; 220
    1c62:	23 e0       	ldi	r18, 0x03	; 3
    1c64:	92 07       	cpc	r25, r18
    1c66:	a1 f5       	brne	.+104    	; 0x1cd0 <USB_Device_ProcessControlRequest+0x1ca>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1c6c:	8a e2       	ldi	r24, 0x2A	; 42
    1c6e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1c70:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1c72:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c74:	de 01       	movw	r26, r28
    1c76:	13 96       	adiw	r26, 0x03	; 3
    1c78:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1c7a:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1c7c:	51 e2       	ldi	r21, 0x21	; 33
    1c7e:	e3 2f       	mov	r30, r19
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1c86:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1c88:	20 ff       	sbrs	r18, 0
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <USB_Device_ProcessControlRequest+0x18c>
					{
						SerialByte >>= 4;
    1c8c:	e2 95       	swap	r30
    1c8e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1c90:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1c92:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c94:	8e 2f       	mov	r24, r30
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	ea 30       	cpi	r30, 0x0A	; 10
    1c9a:	c0 f0       	brcs	.+48     	; 0x1ccc <USB_Device_ProcessControlRequest+0x1c6>
    1c9c:	c7 96       	adiw	r24, 0x37	; 55
    1c9e:	8d 93       	st	X+, r24
    1ca0:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ca2:	2f 5f       	subi	r18, 0xFF	; 255
    1ca4:	24 31       	cpi	r18, 0x14	; 20
    1ca6:	59 f7       	brne	.-42     	; 0x1c7e <USB_Device_ProcessControlRequest+0x178>
				SREG = GlobalIntState;
    1ca8:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1caa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cae:	87 7f       	andi	r24, 0xF7	; 247
    1cb0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1cb4:	6a e2       	ldi	r22, 0x2A	; 42
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	ce 01       	movw	r24, r28
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	0e 94 c6 0c 	call	0x198c	; 0x198c <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cc4:	8b 77       	andi	r24, 0x7B	; 123
    1cc6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cca:	57 c0       	rjmp	.+174    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1ccc:	c0 96       	adiw	r24, 0x30	; 48
    1cce:	e7 cf       	rjmp	.-50     	; 0x1c9e <USB_Device_ProcessControlRequest+0x198>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1cd0:	60 91 57 04 	lds	r22, 0x0457	; 0x800457 <USB_ControlRequest+0x4>
    1cd4:	70 91 58 04 	lds	r23, 0x0458	; 0x800458 <USB_ControlRequest+0x5>
    1cd8:	ae 01       	movw	r20, r28
    1cda:	4f 5f       	subi	r20, 0xFF	; 255
    1cdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cde:	0e 94 84 0b 	call	0x1708	; 0x1708 <CALLBACK_USB_GetDescriptor>
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	89 2b       	or	r24, r25
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <USB_Device_ProcessControlRequest+0x1e4>
    1ce8:	48 c0       	rjmp	.+144    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    1cea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cee:	97 7f       	andi	r25, 0xF7	; 247
    1cf0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <Endpoint_Write_Control_PStream_LE>
    1cfc:	e1 cf       	rjmp	.-62     	; 0x1cc0 <USB_Device_ProcessControlRequest+0x1ba>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1cfe:	80 38       	cpi	r24, 0x80	; 128
    1d00:	e1 f5       	brne	.+120    	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
    1d02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d06:	87 7f       	andi	r24, 0xF7	; 247
    1d08:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1d0c:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1d10:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d14:	45 cf       	rjmp	.-374    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x9a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1d16:	81 11       	cpse	r24, r1
    1d18:	30 c0       	rjmp	.+96     	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1d1a:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <USB_ControlRequest+0x2>
    1d1e:	92 30       	cpi	r25, 0x02	; 2
    1d20:	60 f5       	brcc	.+88     	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    1d22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d26:	87 7f       	andi	r24, 0xF7	; 247
    1d28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1d2c:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1d30:	0e 94 25 0c 	call	0x184a	; 0x184a <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    1d34:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <USB_Device_ConfigurationNumber>
    1d38:	88 23       	and	r24, r24
    1d3a:	11 f0       	breq	.+4      	; 0x1d40 <USB_Device_ProcessControlRequest+0x23a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <USB_Device_ProcessControlRequest+0x244>
				return (UDADDR & (1 << ADDEN));
    1d40:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1d44:	87 fd       	sbrc	r24, 7
    1d46:	fa cf       	rjmp	.-12     	; 0x1d3c <USB_Device_ProcessControlRequest+0x236>
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1d4e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <EVENT_USB_Device_ConfigurationChanged>
    1d52:	13 c0       	rjmp	.+38     	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1d54:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <USB_ControlRequest+0x2>
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	79 f4       	brne	.+30     	; 0x1d7a <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	93 30       	cpi	r25, 0x03	; 3
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <USB_Device_ProcessControlRequest+0x25e>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d68:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1d6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d70:	87 7f       	andi	r24, 0xF7	; 247
    1d72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1d76:	0e 94 25 0c 	call	0x184a	; 0x184a <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1d7e:	83 ff       	sbrs	r24, 3
    1d80:	0a c0       	rjmp	.+20     	; 0x1d96 <USB_Device_ProcessControlRequest+0x290>
				UEINTX &= ~(1 << RXSTPI);
    1d82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d86:	87 7f       	andi	r24, 0xF7	; 247
    1d88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1d8c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1d90:	80 62       	ori	r24, 0x20	; 32
    1d92:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1d96:	aa 96       	adiw	r28, 0x2a	; 42
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	08 95       	ret

00001daa <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1daa:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1dae:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1db2:	e0 ee       	ldi	r30, 0xE0	; 224
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	81 60       	ori	r24, 0x01	; 1
    1dba:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1dbc:	e8 ed       	ldi	r30, 0xD8	; 216
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 77       	andi	r24, 0x7F	; 127
    1dc4:	80 83       	st	Z, r24
				PLLCSR = 0;
    1dc6:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    1dc8:	a7 ed       	ldi	r26, 0xD7	; 215
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	8c 91       	ld	r24, X
    1dce:	8e 7f       	andi	r24, 0xFE	; 254
    1dd0:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 7e       	andi	r24, 0xEF	; 239
    1dd6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1dd8:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <USB_IsInitialized>
}
    1ddc:	08 95       	ret

00001dde <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1de6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1dea:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1dee:	c8 ed       	ldi	r28, 0xD8	; 216
    1df0:	d0 e0       	ldi	r29, 0x00	; 0
    1df2:	88 81       	ld	r24, Y
    1df4:	8f 77       	andi	r24, 0x7F	; 127
    1df6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1df8:	88 81       	ld	r24, Y
    1dfa:	80 68       	ori	r24, 0x80	; 128
    1dfc:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    1dfe:	88 81       	ld	r24, Y
    1e00:	8f 7d       	andi	r24, 0xDF	; 223
    1e02:	88 83       	st	Y, r24
				PLLCSR = 0;
    1e04:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1e06:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1e0a:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1e0e:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1e12:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1e16:	00 ee       	ldi	r16, 0xE0	; 224
    1e18:	10 e0       	ldi	r17, 0x00	; 0
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8b 7f       	andi	r24, 0xFB	; 251
    1e20:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1e22:	88 81       	ld	r24, Y
    1e24:	81 60       	ori	r24, 0x01	; 1
    1e26:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e28:	42 e0       	ldi	r20, 0x02	; 2
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e32:	e1 ee       	ldi	r30, 0xE1	; 225
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	8e 7f       	andi	r24, 0xFE	; 254
    1e3a:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    1e3c:	e2 ee       	ldi	r30, 0xE2	; 226
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	81 60       	ori	r24, 0x01	; 1
    1e44:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1e46:	80 81       	ld	r24, Z
    1e48:	88 60       	ori	r24, 0x08	; 8
    1e4a:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 81       	ld	r24, Z
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1e54:	88 81       	ld	r24, Y
    1e56:	80 61       	ori	r24, 0x10	; 16
    1e58:	88 83       	st	Y, r24
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	08 95       	ret

00001e64 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1e64:	e8 ed       	ldi	r30, 0xD8	; 216
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	8f 7e       	andi	r24, 0xEF	; 239
    1e6c:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1e6e:	e7 ed       	ldi	r30, 0xD7	; 215
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	81 60       	ori	r24, 0x01	; 1
    1e76:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1e78:	84 e0       	ldi	r24, 0x04	; 4
    1e7a:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <USB_IsInitialized>
	USB_ResetInterface();
    1e82:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <USB_ResetInterface>

00001e86 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1e86:	e8 ed       	ldi	r30, 0xD8	; 216
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8e 7f       	andi	r24, 0xFE	; 254
    1e8e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1e90:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    1e94:	08 95       	ret

00001e96 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1e96:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1e9a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    1e9e:	08 95       	ret

00001ea0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	2f 93       	push	r18
    1eac:	3f 93       	push	r19
    1eae:	4f 93       	push	r20
    1eb0:	5f 93       	push	r21
    1eb2:	6f 93       	push	r22
    1eb4:	7f 93       	push	r23
    1eb6:	8f 93       	push	r24
    1eb8:	9f 93       	push	r25
    1eba:	af 93       	push	r26
    1ebc:	bf 93       	push	r27
    1ebe:	ef 93       	push	r30
    1ec0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1ec2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1ec6:	82 ff       	sbrs	r24, 2
    1ec8:	0b c0       	rjmp	.+22     	; 0x1ee0 <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    1eca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ece:	82 ff       	sbrs	r24, 2
    1ed0:	07 c0       	rjmp	.+14     	; 0x1ee0 <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1ed2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ed6:	8b 7f       	andi	r24, 0xFB	; 251
    1ed8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1edc:	0e 94 1f 10 	call	0x203e	; 0x203e <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1ee0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1ee4:	80 ff       	sbrs	r24, 0
    1ee6:	19 c0       	rjmp	.+50     	; 0x1f1a <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    1ee8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1eec:	80 ff       	sbrs	r24, 0
    1eee:	15 c0       	rjmp	.+42     	; 0x1f1a <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1ef0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1ef4:	8e 7f       	andi	r24, 0xFE	; 254
    1ef6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1efa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1efe:	80 ff       	sbrs	r24, 0
    1f00:	91 c0       	rjmp	.+290    	; 0x2024 <__vector_10+0x184>
				PLLCSR = USB_PLL_PSC;
    1f02:	80 e1       	ldi	r24, 0x10	; 16
    1f04:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f06:	82 e1       	ldi	r24, 0x12	; 18
    1f08:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1f0a:	09 b4       	in	r0, 0x29	; 41
    1f0c:	00 fe       	sbrs	r0, 0
    1f0e:	fd cf       	rjmp	.-6      	; 0x1f0a <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1f16:	0e 94 d6 09 	call	0x13ac	; 0x13ac <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1f1a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1f1e:	80 ff       	sbrs	r24, 0
    1f20:	19 c0       	rjmp	.+50     	; 0x1f54 <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    1f22:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f26:	80 ff       	sbrs	r24, 0
    1f28:	15 c0       	rjmp	.+42     	; 0x1f54 <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    1f2a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f2e:	8e 7f       	andi	r24, 0xFE	; 254
    1f30:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1f34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f38:	80 61       	ori	r24, 0x10	; 16
    1f3a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1f3e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1f42:	80 62       	ori	r24, 0x20	; 32
    1f44:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1f48:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1f4a:	85 e0       	ldi	r24, 0x05	; 5
    1f4c:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1f50:	0e 94 ad 0a 	call	0x155a	; 0x155a <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1f54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1f58:	84 ff       	sbrs	r24, 4
    1f5a:	2b c0       	rjmp	.+86     	; 0x1fb2 <__vector_10+0x112>
						return (UDIEN  & (1 << WAKEUPE));
    1f5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f60:	84 ff       	sbrs	r24, 4
    1f62:	27 c0       	rjmp	.+78     	; 0x1fb2 <__vector_10+0x112>
				PLLCSR = USB_PLL_PSC;
    1f64:	80 e1       	ldi	r24, 0x10	; 16
    1f66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f68:	82 e1       	ldi	r24, 0x12	; 18
    1f6a:	89 bd       	out	0x29, r24	; 41
				return ((PLLCSR & (1 << PLOCK)) ? true : false);
    1f6c:	89 b5       	in	r24, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1f6e:	98 2f       	mov	r25, r24
    1f70:	91 70       	andi	r25, 0x01	; 1
    1f72:	80 ff       	sbrs	r24, 0
    1f74:	fb cf       	rjmp	.-10     	; 0x1f6c <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1f76:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1f7a:	8f 7d       	andi	r24, 0xDF	; 223
    1f7c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1f80:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1f84:	8f 7e       	andi	r24, 0xEF	; 239
    1f86:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1f8a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f8e:	8f 7e       	andi	r24, 0xEF	; 239
    1f90:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1f94:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f98:	81 60       	ori	r24, 0x01	; 1
    1f9a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1f9e:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <USB_Device_ConfigurationNumber>
    1fa2:	88 23       	and	r24, r24
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <__vector_10+0x108>
    1fa6:	44 c0       	rjmp	.+136    	; 0x2030 <__vector_10+0x190>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1fa8:	84 e0       	ldi	r24, 0x04	; 4
    1faa:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <USB_DeviceState>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1fae:	0e 94 c2 0a 	call	0x1584	; 0x1584 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1fb2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1fb6:	83 ff       	sbrs	r24, 3
    1fb8:	24 c0       	rjmp	.+72     	; 0x2002 <__vector_10+0x162>
						return (UDIEN  & (1 << EORSTE));
    1fba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fbe:	83 ff       	sbrs	r24, 3
    1fc0:	20 c0       	rjmp	.+64     	; 0x2002 <__vector_10+0x162>
						UDINT  &= ~(1 << EORSTI);
    1fc2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1fc6:	87 7f       	andi	r24, 0xF7	; 247
    1fc8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1fd2:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1fd6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1fda:	8e 7f       	andi	r24, 0xFE	; 254
    1fdc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1fe0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fe4:	8e 7f       	andi	r24, 0xFE	; 254
    1fe6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1fea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1fee:	80 61       	ori	r24, 0x10	; 16
    1ff0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ff4:	42 e0       	ldi	r20, 0x02	; 2
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ffe:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti
				PLLCSR = 0;
    2024:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    2026:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    202a:	0e 94 df 09 	call	0x13be	; 0x13be <EVENT_USB_Device_Disconnect>
    202e:	75 cf       	rjmp	.-278    	; 0x1f1a <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2030:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2034:	87 fd       	sbrc	r24, 7
    2036:	93 e0       	ldi	r25, 0x03	; 3
    2038:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <USB_DeviceState>
    203c:	b8 cf       	rjmp	.-144    	; 0x1fae <__vector_10+0x10e>

0000203e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    203e:	08 95       	ret

00002040 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2040:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2042:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    2046:	88 23       	and	r24, r24
    2048:	a1 f0       	breq	.+40     	; 0x2072 <USB_USBTask+0x32>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    204a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    204e:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2050:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2054:	89 2f       	mov	r24, r25
    2056:	81 70       	andi	r24, 0x01	; 1
    2058:	90 fd       	sbrc	r25, 0
    205a:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    205c:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    205e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2062:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2066:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2068:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    206c:	cf 70       	andi	r28, 0x0F	; 15
    206e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2076:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <driver+0x1>
    207a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <driver>
}
    207e:	08 95       	ret

00002080 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2080:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <driver>
    2084:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <driver+0x1>
    2088:	30 97       	sbiw	r30, 0x00	; 0
    208a:	21 f0       	breq	.+8      	; 0x2094 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    208c:	01 90       	ld	r0, Z+
    208e:	f0 81       	ld	r31, Z
    2090:	e0 2d       	mov	r30, r0
    2092:	09 94       	ijmp
}
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	08 95       	ret

00002098 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	8c 01       	movw	r16, r24
    if (!driver) return;
    20a6:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <driver>
    20aa:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <driver+0x1>
    20ae:	30 97       	sbiw	r30, 0x00	; 0
    20b0:	c1 f1       	breq	.+112    	; 0x2122 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    20b2:	02 80       	ldd	r0, Z+2	; 0x02
    20b4:	f3 81       	ldd	r31, Z+3	; 0x03
    20b6:	e0 2d       	mov	r30, r0
    20b8:	09 95       	icall

    if (debug_keyboard) {
    20ba:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    20be:	82 ff       	sbrs	r24, 2
    20c0:	30 c0       	rjmp	.+96     	; 0x2122 <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    20c2:	80 ff       	sbrs	r24, 0
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <host_keyboard_send+0x36>
    20c6:	80 ea       	ldi	r24, 0xA0	; 160
    20c8:	94 e0       	ldi	r25, 0x04	; 4
    20ca:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
{
    20ce:	d0 e0       	ldi	r29, 0x00	; 0
    20d0:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    20d2:	8a e9       	ldi	r24, 0x9A	; 154
    20d4:	e8 2e       	mov	r14, r24
    20d6:	84 e0       	ldi	r24, 0x04	; 4
    20d8:	f8 2e       	mov	r15, r24
    20da:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    20de:	80 ff       	sbrs	r24, 0
    20e0:	0e c0       	rjmp	.+28     	; 0x20fe <host_keyboard_send+0x66>
    20e2:	f8 01       	movw	r30, r16
    20e4:	ec 0f       	add	r30, r28
    20e6:	fd 1f       	adc	r31, r29
    20e8:	80 81       	ld	r24, Z
    20ea:	1f 92       	push	r1
    20ec:	8f 93       	push	r24
    20ee:	ff 92       	push	r15
    20f0:	ef 92       	push	r14
    20f2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2100:	c8 30       	cpi	r28, 0x08	; 8
    2102:	d1 05       	cpc	r29, r1
    2104:	51 f7       	brne	.-44     	; 0x20da <host_keyboard_send+0x42>
        }
        dprint("\n");
    2106:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    210a:	80 ff       	sbrs	r24, 0
    210c:	0a c0       	rjmp	.+20     	; 0x2122 <host_keyboard_send+0x8a>
    210e:	88 e9       	ldi	r24, 0x98	; 152
    2110:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	ff 90       	pop	r15
    211c:	ef 90       	pop	r14
        dprint("\n");
    211e:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <xputs>
}
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	08 95       	ret

00002130 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2130:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <driver>
    2134:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <driver+0x1>
    2138:	30 97       	sbiw	r30, 0x00	; 0
    213a:	21 f0       	breq	.+8      	; 0x2144 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    213c:	04 80       	ldd	r0, Z+4	; 0x04
    213e:	f5 81       	ldd	r31, Z+5	; 0x05
    2140:	e0 2d       	mov	r30, r0
    2142:	09 94       	ijmp
}
    2144:	08 95       	ret

00002146 <host_system_send>:

void host_system_send(uint16_t report)
{
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    214c:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <last_system_report>
    2150:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <last_system_report+0x1>
    2154:	8c 17       	cp	r24, r28
    2156:	9d 07       	cpc	r25, r29
    2158:	01 f1       	breq	.+64     	; 0x219a <host_system_send+0x54>
    last_system_report = report;
    215a:	d0 93 5e 03 	sts	0x035E, r29	; 0x80035e <last_system_report+0x1>
    215e:	c0 93 5d 03 	sts	0x035D, r28	; 0x80035d <last_system_report>

    if (!driver) return;
    2162:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <driver>
    2166:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <driver+0x1>
    216a:	30 97       	sbiw	r30, 0x00	; 0
    216c:	b1 f0       	breq	.+44     	; 0x219a <host_system_send+0x54>
    (*driver->send_system)(report);
    216e:	06 80       	ldd	r0, Z+6	; 0x06
    2170:	f7 81       	ldd	r31, Z+7	; 0x07
    2172:	e0 2d       	mov	r30, r0
    2174:	ce 01       	movw	r24, r28
    2176:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    2178:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    217c:	85 70       	andi	r24, 0x05	; 5
    217e:	85 30       	cpi	r24, 0x05	; 5
    2180:	61 f4       	brne	.+24     	; 0x219a <host_system_send+0x54>
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	8a e8       	ldi	r24, 0x8A	; 138
    2188:	94 e0       	ldi	r25, 0x04	; 4
    218a:	9f 93       	push	r25
    218c:	8f 93       	push	r24
    218e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    }
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    21a6:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <last_consumer_report>
    21aa:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <last_consumer_report+0x1>
    21ae:	8c 17       	cp	r24, r28
    21b0:	9d 07       	cpc	r25, r29
    21b2:	01 f1       	breq	.+64     	; 0x21f4 <host_consumer_send+0x54>
    last_consumer_report = report;
    21b4:	d0 93 5c 03 	sts	0x035C, r29	; 0x80035c <last_consumer_report+0x1>
    21b8:	c0 93 5b 03 	sts	0x035B, r28	; 0x80035b <last_consumer_report>

    if (!driver) return;
    21bc:	e0 91 5f 03 	lds	r30, 0x035F	; 0x80035f <driver>
    21c0:	f0 91 60 03 	lds	r31, 0x0360	; 0x800360 <driver+0x1>
    21c4:	30 97       	sbiw	r30, 0x00	; 0
    21c6:	b1 f0       	breq	.+44     	; 0x21f4 <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    21c8:	00 84       	ldd	r0, Z+8	; 0x08
    21ca:	f1 85       	ldd	r31, Z+9	; 0x09
    21cc:	e0 2d       	mov	r30, r0
    21ce:	ce 01       	movw	r24, r28
    21d0:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    21d2:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    21d6:	85 70       	andi	r24, 0x05	; 5
    21d8:	85 30       	cpi	r24, 0x05	; 5
    21da:	61 f4       	brne	.+24     	; 0x21f4 <host_consumer_send+0x54>
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	8a e7       	ldi	r24, 0x7A	; 122
    21e2:	94 e0       	ldi	r25, 0x04	; 4
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    }
}
    21f4:	df 91       	pop	r29
    21f6:	cf 91       	pop	r28
    21f8:	08 95       	ret

000021fa <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    21fa:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <matrix_setup>

000021fe <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    21fe:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <timer_init>
    matrix_init();
    2202:	0c 94 88 06 	jmp	0xd10	; 0xd10 <matrix_init>

00002206 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2206:	9f 92       	push	r9
    2208:	af 92       	push	r10
    220a:	bf 92       	push	r11
    220c:	cf 92       	push	r12
    220e:	df 92       	push	r13
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	00 d0       	rcall	.+0      	; 0x221e <keyboard_task+0x18>
    221e:	00 d0       	rcall	.+0      	; 0x2220 <keyboard_task+0x1a>
    2220:	0f 92       	push	r0
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2226:	0e 94 ee 06 	call	0xddc	; 0xddc <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    222a:	82 e6       	ldi	r24, 0x62	; 98
    222c:	c8 2e       	mov	r12, r24
    222e:	83 e0       	ldi	r24, 0x03	; 3
    2230:	d8 2e       	mov	r13, r24
    2232:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row = matrix_get_row(r);
    2234:	81 2f       	mov	r24, r17
    2236:	0e 94 99 07 	call	0xf32	; 0xf32 <matrix_get_row>
    223a:	98 2e       	mov	r9, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    223c:	f6 01       	movw	r30, r12
    223e:	e1 90       	ld	r14, Z+
    2240:	6f 01       	movw	r12, r30
        if (matrix_change) {
    2242:	e8 16       	cp	r14, r24
    2244:	99 f1       	breq	.+102    	; 0x22ac <keyboard_task+0xa6>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2246:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    224a:	81 fd       	sbrc	r24, 1
    224c:	0e 94 c6 11 	call	0x238c	; 0x238c <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2250:	f1 2c       	mov	r15, r1
    2252:	01 e0       	ldi	r16, 0x01	; 1
        matrix_change = matrix_row ^ matrix_prev[r];
    2254:	e9 24       	eor	r14, r9
    2256:	56 01       	movw	r10, r12
    2258:	f1 e0       	ldi	r31, 0x01	; 1
    225a:	af 1a       	sub	r10, r31
    225c:	b1 08       	sbc	r11, r1
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    225e:	8e 2d       	mov	r24, r14
    2260:	80 23       	and	r24, r16
    2262:	f9 f0       	breq	.+62     	; 0x22a2 <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
    2264:	f9 82       	std	Y+1, r15	; 0x01
    2266:	1a 83       	std	Y+2, r17	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	89 2d       	mov	r24, r9
    226c:	80 23       	and	r24, r16
    226e:	09 f4       	brne	.+2      	; 0x2272 <keyboard_task+0x6c>
    2270:	90 e0       	ldi	r25, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2272:	9b 83       	std	Y+3, r25	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    2274:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <timer_read>
    2278:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    227a:	78 2f       	mov	r23, r24
    227c:	9d 83       	std	Y+5, r25	; 0x05
    227e:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2280:	49 81       	ldd	r20, Y+1	; 0x01
    2282:	5a 81       	ldd	r21, Y+2	; 0x02
    2284:	6b 81       	ldd	r22, Y+3	; 0x03
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <action_exec>
                    hook_matrix_change(e);
    228c:	49 81       	ldd	r20, Y+1	; 0x01
    228e:	5a 81       	ldd	r21, Y+2	; 0x02
    2290:	6b 81       	ldd	r22, Y+3	; 0x03
    2292:	7c 81       	ldd	r23, Y+4	; 0x04
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    229a:	f5 01       	movw	r30, r10
    229c:	80 81       	ld	r24, Z
    229e:	80 27       	eor	r24, r16
    22a0:	80 83       	st	Z, r24
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    22a2:	f3 94       	inc	r15
    22a4:	00 0f       	add	r16, r16
    22a6:	f8 e0       	ldi	r31, 0x08	; 8
    22a8:	ff 12       	cpse	r15, r31
    22aa:	d9 cf       	rjmp	.-78     	; 0x225e <keyboard_task+0x58>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
    22ae:	10 31       	cpi	r17, 0x10	; 16
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <keyboard_task+0xae>
    22b2:	c0 cf       	rjmp	.-128    	; 0x2234 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	8a 83       	std	Y+2, r24	; 0x02
    22ba:	1b 82       	std	Y+3, r1	; 0x03
    22bc:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <timer_read>
    22c0:	81 60       	ori	r24, 0x01	; 1
    22c2:	78 2f       	mov	r23, r24
    22c4:	9d 83       	std	Y+5, r25	; 0x05
    22c6:	8c 83       	std	Y+4, r24	; 0x04
    22c8:	49 81       	ldd	r20, Y+1	; 0x01
    22ca:	5a 81       	ldd	r21, Y+2	; 0x02
    22cc:	6b 81       	ldd	r22, Y+3	; 0x03
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    22d4:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    22d8:	0e 94 57 20 	call	0x40ae	; 0x40ae <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    22dc:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    22e0:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <led_status.2454>
    22e4:	89 17       	cp	r24, r25
    22e6:	49 f1       	breq	.+82     	; 0x233a <keyboard_task+0x134>
        led_status = host_keyboard_leds();
    22e8:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    22ec:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <led_status.2454>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    22f0:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <debug_config>
    22f4:	95 70       	andi	r25, 0x05	; 5
    22f6:	95 30       	cpi	r25, 0x05	; 5
    22f8:	61 f4       	brne	.+24     	; 0x2312 <keyboard_task+0x10c>
    22fa:	1f 92       	push	r1
    22fc:	8f 93       	push	r24
    22fe:	8b ea       	ldi	r24, 0xAB	; 171
    2300:	94 e0       	ldi	r25, 0x04	; 4
    2302:	9f 93       	push	r25
    2304:	8f 93       	push	r24
    2306:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2312:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <led_status.2454>
    }
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	1f 91       	pop	r17
    2326:	0f 91       	pop	r16
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	bf 90       	pop	r11
    2332:	af 90       	pop	r10
    2334:	9f 90       	pop	r9
        hook_keyboard_leds_change(led_status);
    2336:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <hook_keyboard_leds_change>
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	ff 90       	pop	r15
    234e:	ef 90       	pop	r14
    2350:	df 90       	pop	r13
    2352:	cf 90       	pop	r12
    2354:	bf 90       	pop	r11
    2356:	af 90       	pop	r10
    2358:	9f 90       	pop	r9
    235a:	08 95       	ret

0000235c <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    235c:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <led_set>

00002360 <matrix_clear>:
    2360:	08 95       	ret

00002362 <matrix_setup>:
void matrix_clear(void)
{
}

__attribute__ ((weak))
void matrix_setup(void) {}
    2362:	08 95       	ret

00002364 <matrix_is_on>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    2364:	cf 93       	push	r28
    2366:	c6 2f       	mov	r28, r22
    return (matrix_get_row(row) & (1<<col));
    2368:	0e 94 99 07 	call	0xf32	; 0xf32 <matrix_get_row>
    236c:	21 e0       	ldi	r18, 0x01	; 1
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <matrix_is_on+0x12>
    2372:	22 0f       	add	r18, r18
    2374:	33 1f       	adc	r19, r19
    2376:	ca 95       	dec	r28
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <matrix_is_on+0xe>
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	28 23       	and	r18, r24
    237e:	39 23       	and	r19, r25
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	23 2b       	or	r18, r19
    2384:	09 f4       	brne	.+2      	; 0x2388 <matrix_is_on+0x24>
    2386:	80 e0       	ldi	r24, 0x00	; 0
}
    2388:	cf 91       	pop	r28
    238a:	08 95       	ret

0000238c <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    238c:	ef 92       	push	r14
    238e:	ff 92       	push	r15
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    2398:	84 ec       	ldi	r24, 0xC4	; 196
    239a:	94 e0       	ldi	r25, 0x04	; 4
    239c:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    23a0:	d0 e0       	ldi	r29, 0x00	; 0
    23a2:	c0 e0       	ldi	r28, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    23a4:	8d e2       	ldi	r24, 0x2D	; 45
    23a6:	e8 2e       	mov	r14, r24
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	f8 2e       	mov	r15, r24
    23ac:	06 eb       	ldi	r16, 0xB6	; 182
    23ae:	14 e0       	ldi	r17, 0x04	; 4
    23b0:	8c 2f       	mov	r24, r28
    23b2:	0e 94 99 07 	call	0xf32	; 0xf32 <matrix_get_row>
    23b6:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <bitrev>
    23ba:	ff 92       	push	r15
    23bc:	ef 92       	push	r14
    23be:	1f 92       	push	r1
    23c0:	8f 93       	push	r24
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	1f 93       	push	r17
    23c8:	0f 93       	push	r16
    23ca:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    23ce:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    23d0:	8d b7       	in	r24, 0x3d	; 61
    23d2:	9e b7       	in	r25, 0x3e	; 62
    23d4:	08 96       	adiw	r24, 0x08	; 8
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	9e bf       	out	0x3e, r25	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	8d bf       	out	0x3d, r24	; 61
    23e0:	c0 31       	cpi	r28, 0x10	; 16
    23e2:	d1 05       	cpc	r29, r1
    23e4:	29 f7       	brne	.-54     	; 0x23b0 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	08 95       	ret

000023f4 <matrix_power_up>:
    23f4:	08 95       	ret

000023f6 <matrix_power_down>:
    23f6:	08 95       	ret

000023f8 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	2b 97       	sbiw	r28, 0x0b	; 11
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	4f 83       	std	Y+7, r20	; 0x07
    240e:	58 87       	std	Y+8, r21	; 0x08
    2410:	69 87       	std	Y+9, r22	; 0x09
    2412:	7a 87       	std	Y+10, r23	; 0x0a
    2414:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2416:	8a 85       	ldd	r24, Y+10	; 0x0a
    2418:	9b 85       	ldd	r25, Y+11	; 0x0b
    241a:	89 2b       	or	r24, r25
    241c:	21 f0       	breq	.+8      	; 0x2426 <action_exec+0x2e>
    241e:	85 2f       	mov	r24, r21
    2420:	84 23       	and	r24, r20
    2422:	8f 3f       	cpi	r24, 0xFF	; 255
    2424:	d9 f4       	brne	.+54     	; 0x245c <action_exec+0x64>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    2426:	1e 82       	std	Y+6, r1	; 0x06
    2428:	1d 82       	std	Y+5, r1	; 0x05
    242a:	85 e0       	ldi	r24, 0x05	; 5
    242c:	fe 01       	movw	r30, r28
    242e:	37 96       	adiw	r30, 0x07	; 7
    2430:	de 01       	movw	r26, r28
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	01 90       	ld	r0, Z+
    2436:	0d 92       	st	X+, r0
    2438:	8a 95       	dec	r24
    243a:	e1 f7       	brne	.-8      	; 0x2434 <action_exec+0x3c>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    243c:	49 81       	ldd	r20, Y+1	; 0x01
    243e:	5a 81       	ldd	r21, Y+2	; 0x02
    2440:	6b 81       	ldd	r22, Y+3	; 0x03
    2442:	7c 81       	ldd	r23, Y+4	; 0x04
    2444:	8d 81       	ldd	r24, Y+5	; 0x05
    2446:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2448:	2b 96       	adiw	r28, 0x0b	; 11
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    action_tapping_process(record);
    2458:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <action_tapping_process>
        hook_matrix_change(event);
    245c:	69 85       	ldd	r22, Y+9	; 0x09
    245e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2460:	8b 85       	ldd	r24, Y+11	; 0x0b
    2462:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <hook_matrix_change>
    2466:	df cf       	rjmp	.-66     	; 0x2426 <action_exec+0x2e>

00002468 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2468:	cf 93       	push	r28
    246a:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    246c:	88 23       	and	r24, r24
    246e:	09 f4       	brne	.+2      	; 0x2472 <register_code+0xa>
    2470:	9e c0       	rjmp	.+316    	; 0x25ae <register_code+0x146>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2472:	82 38       	cpi	r24, 0x82	; 130
    2474:	c1 f4       	brne	.+48     	; 0x24a6 <register_code+0x3e>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2476:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    247a:	81 fd       	sbrc	r24, 1
    247c:	98 c0       	rjmp	.+304    	; 0x25ae <register_code+0x146>
#endif
        add_key(KC_CAPSLOCK);
    247e:	89 e3       	ldi	r24, 0x39	; 57
    2480:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <add_key>
        send_keyboard_report();
    2484:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
	__builtin_avr_delay_cycles(__ticks_dc);
    2488:	2f ef       	ldi	r18, 0xFF	; 255
    248a:	81 ee       	ldi	r24, 0xE1	; 225
    248c:	94 e0       	ldi	r25, 0x04	; 4
    248e:	21 50       	subi	r18, 0x01	; 1
    2490:	80 40       	sbci	r24, 0x00	; 0
    2492:	90 40       	sbci	r25, 0x00	; 0
    2494:	e1 f7       	brne	.-8      	; 0x248e <register_code+0x26>
    2496:	00 c0       	rjmp	.+0      	; 0x2498 <register_code+0x30>
    2498:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    249a:	89 e3       	ldi	r24, 0x39	; 57
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    249c:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    24a0:	cf 91       	pop	r28
        send_keyboard_report();
    24a2:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    24a6:	83 38       	cpi	r24, 0x83	; 131
    24a8:	a1 f4       	brne	.+40     	; 0x24d2 <register_code+0x6a>
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    24aa:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    24ae:	80 fd       	sbrc	r24, 0
    24b0:	7e c0       	rjmp	.+252    	; 0x25ae <register_code+0x146>
        add_key(KC_NUMLOCK);
    24b2:	83 e5       	ldi	r24, 0x53	; 83
    24b4:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <add_key>
        send_keyboard_report();
    24b8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
    24bc:	2f ef       	ldi	r18, 0xFF	; 255
    24be:	81 ee       	ldi	r24, 0xE1	; 225
    24c0:	94 e0       	ldi	r25, 0x04	; 4
    24c2:	21 50       	subi	r18, 0x01	; 1
    24c4:	80 40       	sbci	r24, 0x00	; 0
    24c6:	90 40       	sbci	r25, 0x00	; 0
    24c8:	e1 f7       	brne	.-8      	; 0x24c2 <register_code+0x5a>
    24ca:	00 c0       	rjmp	.+0      	; 0x24cc <register_code+0x64>
    24cc:	00 00       	nop
        del_key(KC_NUMLOCK);
    24ce:	83 e5       	ldi	r24, 0x53	; 83
    24d0:	e5 cf       	rjmp	.-54     	; 0x249c <register_code+0x34>
    else if (KC_LOCKING_SCROLL == code) {
    24d2:	84 38       	cpi	r24, 0x84	; 132
    24d4:	a1 f4       	brne	.+40     	; 0x24fe <register_code+0x96>
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    24d6:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    24da:	82 fd       	sbrc	r24, 2
    24dc:	68 c0       	rjmp	.+208    	; 0x25ae <register_code+0x146>
        add_key(KC_SCROLLLOCK);
    24de:	87 e4       	ldi	r24, 0x47	; 71
    24e0:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <add_key>
        send_keyboard_report();
    24e4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
    24e8:	2f ef       	ldi	r18, 0xFF	; 255
    24ea:	81 ee       	ldi	r24, 0xE1	; 225
    24ec:	94 e0       	ldi	r25, 0x04	; 4
    24ee:	21 50       	subi	r18, 0x01	; 1
    24f0:	80 40       	sbci	r24, 0x00	; 0
    24f2:	90 40       	sbci	r25, 0x00	; 0
    24f4:	e1 f7       	brne	.-8      	; 0x24ee <register_code+0x86>
    24f6:	00 c0       	rjmp	.+0      	; 0x24f8 <register_code+0x90>
    24f8:	00 00       	nop
        del_key(KC_SCROLLLOCK);
    24fa:	87 e4       	ldi	r24, 0x47	; 71
    24fc:	cf cf       	rjmp	.-98     	; 0x249c <register_code+0x34>
    else if IS_KEY(code) {
    24fe:	8c ef       	ldi	r24, 0xFC	; 252
    2500:	8c 0f       	add	r24, r28
    2502:	81 3a       	cpi	r24, 0xA1	; 161
    2504:	20 f0       	brcs	.+8      	; 0x250e <register_code+0xa6>
    2506:	80 e5       	ldi	r24, 0x50	; 80
    2508:	8c 0f       	add	r24, r28
    250a:	8e 32       	cpi	r24, 0x2E	; 46
    250c:	48 f4       	brcc	.+18     	; 0x2520 <register_code+0xb8>
        if (command_proc(code)) return;
    250e:	8c 2f       	mov	r24, r28
    2510:	0e 94 59 23 	call	0x46b2	; 0x46b2 <command_proc>
    2514:	81 11       	cpse	r24, r1
    2516:	4b c0       	rjmp	.+150    	; 0x25ae <register_code+0x146>
            add_key(code);
    2518:	8c 2f       	mov	r24, r28
    251a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <add_key>
            send_keyboard_report();
    251e:	c0 cf       	rjmp	.-128    	; 0x24a0 <register_code+0x38>
    else if IS_MOD(code) {
    2520:	80 e2       	ldi	r24, 0x20	; 32
    2522:	8c 0f       	add	r24, r28
    2524:	88 30       	cpi	r24, 0x08	; 8
    2526:	48 f4       	brcc	.+18     	; 0x253a <register_code+0xd2>
        add_mods(MOD_BIT(code));
    2528:	c7 70       	andi	r28, 0x07	; 7
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <register_code+0xc8>
    252e:	88 0f       	add	r24, r24
    2530:	ca 95       	dec	r28
    2532:	ea f7       	brpl	.-6      	; 0x252e <register_code+0xc6>
    2534:	0e 94 9d 1c 	call	0x393a	; 0x393a <add_mods>
        send_keyboard_report();
    2538:	b3 cf       	rjmp	.-154    	; 0x24a0 <register_code+0x38>
    else if IS_SYSTEM(code) {
    253a:	8b e5       	ldi	r24, 0x5B	; 91
    253c:	8c 0f       	add	r24, r28
    253e:	83 30       	cpi	r24, 0x03	; 3
    2540:	68 f4       	brcc	.+26     	; 0x255c <register_code+0xf4>
        host_system_send(KEYCODE2SYSTEM(code));
    2542:	81 e8       	ldi	r24, 0x81	; 129
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	c5 3a       	cpi	r28, 0xA5	; 165
    2548:	31 f0       	breq	.+12     	; 0x2556 <register_code+0xee>
    254a:	83 e8       	ldi	r24, 0x83	; 131
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	c6 3a       	cpi	r28, 0xA6	; 166
    2550:	11 f4       	brne	.+4      	; 0x2556 <register_code+0xee>
    2552:	82 e8       	ldi	r24, 0x82	; 130
    2554:	90 e0       	ldi	r25, 0x00	; 0
}
    2556:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2558:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <host_system_send>
    else if IS_CONSUMER(code) {
    255c:	88 e5       	ldi	r24, 0x58	; 88
    255e:	8c 0f       	add	r24, r28
    2560:	85 31       	cpi	r24, 0x15	; 21
    2562:	28 f5       	brcc	.+74     	; 0x25ae <register_code+0x146>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2564:	82 ee       	ldi	r24, 0xE2	; 226
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	c8 3a       	cpi	r28, 0xA8	; 168
    256a:	f1 f0       	breq	.+60     	; 0x25a8 <register_code+0x140>
    256c:	89 ee       	ldi	r24, 0xE9	; 233
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	c9 3a       	cpi	r28, 0xA9	; 169
    2572:	d1 f0       	breq	.+52     	; 0x25a8 <register_code+0x140>
    2574:	8a ee       	ldi	r24, 0xEA	; 234
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	ca 3a       	cpi	r28, 0xAA	; 170
    257a:	b1 f0       	breq	.+44     	; 0x25a8 <register_code+0x140>
    257c:	85 eb       	ldi	r24, 0xB5	; 181
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	cb 3a       	cpi	r28, 0xAB	; 171
    2582:	91 f0       	breq	.+36     	; 0x25a8 <register_code+0x140>
    2584:	86 eb       	ldi	r24, 0xB6	; 182
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	cc 3a       	cpi	r28, 0xAC	; 172
    258a:	71 f0       	breq	.+28     	; 0x25a8 <register_code+0x140>
    258c:	83 eb       	ldi	r24, 0xB3	; 179
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	cd 3a       	cpi	r28, 0xAD	; 173
    2592:	51 f0       	breq	.+20     	; 0x25a8 <register_code+0x140>
    2594:	84 eb       	ldi	r24, 0xB4	; 180
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	ce 3a       	cpi	r28, 0xAE	; 174
    259a:	31 f0       	breq	.+12     	; 0x25a8 <register_code+0x140>
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	cf 3a       	cpi	r28, 0xAF	; 175
    25a2:	11 f4       	brne	.+4      	; 0x25a8 <register_code+0x140>
    25a4:	87 eb       	ldi	r24, 0xB7	; 183
    25a6:	90 e0       	ldi	r25, 0x00	; 0
}
    25a8:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    25aa:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <host_consumer_send>
}
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    25b2:	88 23       	and	r24, r24
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <unregister_code+0x6>
    25b6:	6a c0       	rjmp	.+212    	; 0x268c <unregister_code+0xda>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25b8:	82 38       	cpi	r24, 0x82	; 130
    25ba:	b9 f4       	brne	.+46     	; 0x25ea <unregister_code+0x38>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    25bc:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    25c0:	81 ff       	sbrs	r24, 1
    25c2:	64 c0       	rjmp	.+200    	; 0x268c <unregister_code+0xda>
#endif
        add_key(KC_CAPSLOCK);
    25c4:	89 e3       	ldi	r24, 0x39	; 57
    25c6:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <add_key>
        send_keyboard_report();
    25ca:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
    25ce:	2f ef       	ldi	r18, 0xFF	; 255
    25d0:	81 ee       	ldi	r24, 0xE1	; 225
    25d2:	94 e0       	ldi	r25, 0x04	; 4
    25d4:	21 50       	subi	r18, 0x01	; 1
    25d6:	80 40       	sbci	r24, 0x00	; 0
    25d8:	90 40       	sbci	r25, 0x00	; 0
    25da:	e1 f7       	brne	.-8      	; 0x25d4 <unregister_code+0x22>
    25dc:	00 c0       	rjmp	.+0      	; 0x25de <unregister_code+0x2c>
    25de:	00 00       	nop
        wait_ms(100);
        del_key(KC_CAPSLOCK);
    25e0:	89 e3       	ldi	r24, 0x39	; 57
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        wait_ms(100);
        del_key(KC_NUMLOCK);
    25e2:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <del_key>
        send_keyboard_report();
    25e6:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <send_keyboard_report>
    else if (KC_LOCKING_NUM == code) {
    25ea:	83 38       	cpi	r24, 0x83	; 131
    25ec:	a1 f4       	brne	.+40     	; 0x2616 <unregister_code+0x64>
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    25ee:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    25f2:	80 ff       	sbrs	r24, 0
    25f4:	4b c0       	rjmp	.+150    	; 0x268c <unregister_code+0xda>
        add_key(KC_NUMLOCK);
    25f6:	83 e5       	ldi	r24, 0x53	; 83
    25f8:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <add_key>
        send_keyboard_report();
    25fc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
    2600:	2f ef       	ldi	r18, 0xFF	; 255
    2602:	81 ee       	ldi	r24, 0xE1	; 225
    2604:	94 e0       	ldi	r25, 0x04	; 4
    2606:	21 50       	subi	r18, 0x01	; 1
    2608:	80 40       	sbci	r24, 0x00	; 0
    260a:	90 40       	sbci	r25, 0x00	; 0
    260c:	e1 f7       	brne	.-8      	; 0x2606 <unregister_code+0x54>
    260e:	00 c0       	rjmp	.+0      	; 0x2610 <unregister_code+0x5e>
    2610:	00 00       	nop
        del_key(KC_NUMLOCK);
    2612:	83 e5       	ldi	r24, 0x53	; 83
    2614:	e6 cf       	rjmp	.-52     	; 0x25e2 <unregister_code+0x30>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2616:	84 38       	cpi	r24, 0x84	; 132
    2618:	a1 f4       	brne	.+40     	; 0x2642 <unregister_code+0x90>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    261a:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    261e:	82 ff       	sbrs	r24, 2
    2620:	35 c0       	rjmp	.+106    	; 0x268c <unregister_code+0xda>
#endif
        add_key(KC_SCROLLLOCK);
    2622:	87 e4       	ldi	r24, 0x47	; 71
    2624:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <add_key>
        send_keyboard_report();
    2628:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
    262c:	2f ef       	ldi	r18, 0xFF	; 255
    262e:	81 ee       	ldi	r24, 0xE1	; 225
    2630:	94 e0       	ldi	r25, 0x04	; 4
    2632:	21 50       	subi	r18, 0x01	; 1
    2634:	80 40       	sbci	r24, 0x00	; 0
    2636:	90 40       	sbci	r25, 0x00	; 0
    2638:	e1 f7       	brne	.-8      	; 0x2632 <unregister_code+0x80>
    263a:	00 c0       	rjmp	.+0      	; 0x263c <unregister_code+0x8a>
    263c:	00 00       	nop
        wait_ms(100);
        del_key(KC_SCROLLLOCK);
    263e:	87 e4       	ldi	r24, 0x47	; 71
    2640:	d0 cf       	rjmp	.-96     	; 0x25e2 <unregister_code+0x30>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2642:	9c ef       	ldi	r25, 0xFC	; 252
    2644:	98 0f       	add	r25, r24
    2646:	91 3a       	cpi	r25, 0xA1	; 161
    2648:	60 f2       	brcs	.-104    	; 0x25e2 <unregister_code+0x30>
    264a:	90 e5       	ldi	r25, 0x50	; 80
    264c:	98 0f       	add	r25, r24
    264e:	9e 32       	cpi	r25, 0x2E	; 46
    2650:	40 f2       	brcs	.-112    	; 0x25e2 <unregister_code+0x30>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2652:	90 e2       	ldi	r25, 0x20	; 32
    2654:	98 0f       	add	r25, r24
    2656:	98 30       	cpi	r25, 0x08	; 8
    2658:	50 f4       	brcc	.+20     	; 0x266e <unregister_code+0xbc>
        del_mods(MOD_BIT(code));
    265a:	87 70       	andi	r24, 0x07	; 7
    265c:	91 e0       	ldi	r25, 0x01	; 1
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <unregister_code+0xb0>
    2660:	99 0f       	add	r25, r25
    2662:	8a 95       	dec	r24
    2664:	ea f7       	brpl	.-6      	; 0x2660 <unregister_code+0xae>
    2666:	89 2f       	mov	r24, r25
    2668:	0e 94 a3 1c 	call	0x3946	; 0x3946 <del_mods>
        send_keyboard_report();
    266c:	bc cf       	rjmp	.-136    	; 0x25e6 <unregister_code+0x34>
    }
    else if IS_SYSTEM(code) {
    266e:	9b e5       	ldi	r25, 0x5B	; 91
    2670:	98 0f       	add	r25, r24
    2672:	93 30       	cpi	r25, 0x03	; 3
    2674:	20 f4       	brcc	.+8      	; 0x267e <unregister_code+0xcc>
        host_system_send(0);
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    267e:	88 5a       	subi	r24, 0xA8	; 168
    2680:	85 31       	cpi	r24, 0x15	; 21
    2682:	20 f4       	brcc	.+8      	; 0x268c <unregister_code+0xda>
        host_consumer_send(0);
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <host_consumer_send>
    }
}
    268c:	08 95       	ret

0000268e <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    268e:	88 23       	and	r24, r24
    2690:	21 f0       	breq	.+8      	; 0x269a <register_mods+0xc>
        add_mods(mods);
    2692:	0e 94 9d 1c 	call	0x393a	; 0x393a <add_mods>
        send_keyboard_report();
    2696:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <send_keyboard_report>
    }
}
    269a:	08 95       	ret

0000269c <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    269c:	88 23       	and	r24, r24
    269e:	21 f0       	breq	.+8      	; 0x26a8 <unregister_mods+0xc>
        del_mods(mods);
    26a0:	0e 94 a3 1c 	call	0x3946	; 0x3946 <del_mods>
        send_keyboard_report();
    26a4:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <send_keyboard_report>
    }
}
    26a8:	08 95       	ret

000026aa <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    26aa:	0e 94 bd 1c 	call	0x397a	; 0x397a <clear_weak_mods>
    clear_keys();
    26ae:	0e 94 8c 1c 	call	0x3918	; 0x3918 <clear_keys>
    send_keyboard_report();
    26b2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    26b6:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <mousekey_clear>
    mousekey_send();
    26ba:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	0e 94 a3 10 	call	0x2146	; 0x2146 <host_system_send>
    host_consumer_send(0);
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <host_consumer_send>

000026ce <clear_keyboard>:
    clear_mods();
    26ce:	0e 94 ad 1c 	call	0x395a	; 0x395a <clear_mods>
    clear_keyboard_but_mods();
    26d2:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <clear_keyboard_but_mods>

000026d6 <process_action>:
{
    26d6:	af 92       	push	r10
    26d8:	bf 92       	push	r11
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <process_action+0x16>
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <process_action+0x18>
    26ee:	0f 92       	push	r0
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	5c 01       	movw	r10, r24
    if (hook_process_action(record)) return;
    26f6:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <hook_process_action>
    26fa:	81 11       	cpse	r24, r1
    26fc:	14 c0       	rjmp	.+40     	; 0x2726 <process_action+0x50>
    keyevent_t event = record->event;
    26fe:	85 e0       	ldi	r24, 0x05	; 5
    2700:	f5 01       	movw	r30, r10
    2702:	de 01       	movw	r26, r28
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	01 90       	ld	r0, Z+
    2708:	0d 92       	st	X+, r0
    270a:	8a 95       	dec	r24
    270c:	e1 f7       	brne	.-8      	; 0x2706 <process_action+0x30>
    270e:	f5 01       	movw	r30, r10
    2710:	83 81       	ldd	r24, Z+3	; 0x03
    2712:	94 81       	ldd	r25, Z+4	; 0x04
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	39 f0       	breq	.+14     	; 0x2726 <process_action+0x50>
    2718:	40 81       	ld	r20, Z
    271a:	51 81       	ldd	r21, Z+1	; 0x01
    271c:	24 2f       	mov	r18, r20
    271e:	25 23       	and	r18, r21
    2720:	2f 3f       	cpi	r18, 0xFF	; 255
    2722:	09 f0       	breq	.+2      	; 0x2726 <process_action+0x50>
    2724:	fe c2       	rjmp	.+1532   	; 0x2d22 <process_action+0x64c>
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	ff 90       	pop	r15
    273a:	ef 90       	pop	r14
    273c:	df 90       	pop	r13
    273e:	cf 90       	pop	r12
    2740:	bf 90       	pop	r11
    2742:	af 90       	pop	r10
    2744:	08 95       	ret
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2746:	f1 2f       	mov	r31, r17
    2748:	ff 70       	andi	r31, 0x0F	; 15
    274a:	ef 2e       	mov	r14, r31
    274c:	10 7f       	andi	r17, 0xF0	; 240
    274e:	19 f0       	breq	.+6      	; 0x2756 <process_action+0x80>
    2750:	e2 94       	swap	r14
    2752:	40 ef       	ldi	r20, 0xF0	; 240
    2754:	e4 22       	and	r14, r20
                if (event.pressed) {
    2756:	ff 20       	and	r15, r15
    2758:	c9 f0       	breq	.+50     	; 0x278c <process_action+0xb6>
                    if (mods) {
    275a:	ee 20       	and	r14, r14
    275c:	29 f0       	breq	.+10     	; 0x2768 <process_action+0x92>
                        add_weak_mods(mods);
    275e:	8e 2d       	mov	r24, r14
    2760:	0e 94 b0 1c 	call	0x3960	; 0x3960 <add_weak_mods>
                        send_keyboard_report();
    2764:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
                            register_code(action.layer_tap.code);
    2768:	80 2f       	mov	r24, r16
}
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	0f 91       	pop	r16
    277c:	ff 90       	pop	r15
    277e:	ef 90       	pop	r14
    2780:	df 90       	pop	r13
    2782:	cf 90       	pop	r12
    2784:	bf 90       	pop	r11
    2786:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    2788:	0c 94 34 12 	jmp	0x2468	; 0x2468 <register_code>
                    unregister_code(action.key.code);
    278c:	80 2f       	mov	r24, r16
    278e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <unregister_code>
                    if (mods) {
    2792:	ee 20       	and	r14, r14
    2794:	41 f2       	breq	.-112    	; 0x2726 <process_action+0x50>
                        del_weak_mods(mods);
    2796:	8e 2d       	mov	r24, r14
    2798:	0e 94 b6 1c 	call	0x396c	; 0x396c <del_weak_mods>
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	1f 91       	pop	r17
    27ac:	0f 91       	pop	r16
    27ae:	ff 90       	pop	r15
    27b0:	ef 90       	pop	r14
    27b2:	df 90       	pop	r13
    27b4:	cf 90       	pop	r12
    27b6:	bf 90       	pop	r11
    27b8:	af 90       	pop	r10
                        send_keyboard_report();
    27ba:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    27be:	21 2f       	mov	r18, r17
    27c0:	2f 70       	andi	r18, 0x0F	; 15
    27c2:	d2 2e       	mov	r13, r18
    27c4:	10 7f       	andi	r17, 0xF0	; 240
    27c6:	10 32       	cpi	r17, 0x20	; 32
    27c8:	19 f0       	breq	.+6      	; 0x27d0 <process_action+0xfa>
    27ca:	d2 94       	swap	r13
    27cc:	30 ef       	ldi	r19, 0xF0	; 240
    27ce:	d3 22       	and	r13, r19
                switch (action.key.code) {
    27d0:	00 23       	and	r16, r16
    27d2:	79 f0       	breq	.+30     	; 0x27f2 <process_action+0x11c>
    27d4:	01 30       	cpi	r16, 0x01	; 1
    27d6:	09 f4       	brne	.+2      	; 0x27da <process_action+0x104>
    27d8:	52 c0       	rjmp	.+164    	; 0x287e <process_action+0x1a8>
                        if (event.pressed) {
    27da:	ff 20       	and	r15, r15
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <process_action+0x10a>
    27de:	60 c0       	rjmp	.+192    	; 0x28a0 <process_action+0x1ca>
                            if (tap_count > 0) {
    27e0:	ee 20       	and	r14, r14
    27e2:	59 f0       	breq	.+22     	; 0x27fa <process_action+0x124>
                                if (record->tap.interrupted) {
    27e4:	f5 01       	movw	r30, r10
    27e6:	85 81       	ldd	r24, Z+5	; 0x05
    27e8:	80 ff       	sbrs	r24, 0
    27ea:	be cf       	rjmp	.-132    	; 0x2768 <process_action+0x92>
                                    record->tap.count = 0;
    27ec:	8f 70       	andi	r24, 0x0F	; 15
    27ee:	85 83       	std	Z+5, r24	; 0x05
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <process_action+0x124>
                        if (event.pressed) {
    27f2:	ff 20       	and	r15, r15
    27f4:	49 f1       	breq	.+82     	; 0x2848 <process_action+0x172>
                            if (tap_count == 0) {
    27f6:	e1 10       	cpse	r14, r1
    27f8:	12 c0       	rjmp	.+36     	; 0x281e <process_action+0x148>
                                    register_mods(mods);
    27fa:	8d 2d       	mov	r24, r13
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	0f 91       	pop	r16
    280e:	ff 90       	pop	r15
    2810:	ef 90       	pop	r14
    2812:	df 90       	pop	r13
    2814:	cf 90       	pop	r12
    2816:	bf 90       	pop	r11
    2818:	af 90       	pop	r10
                                    register_mods(mods);
    281a:	0c 94 47 13 	jmp	0x268e	; 0x268e <register_mods>
                            else if (tap_count == 1) {
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	e8 12       	cpse	r14, r24
    2822:	eb cf       	rjmp	.-42     	; 0x27fa <process_action+0x124>
                                set_oneshot_mods(mods);
    2824:	8d 2d       	mov	r24, r13
}
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	ff 90       	pop	r15
    283a:	ef 90       	pop	r14
    283c:	df 90       	pop	r13
    283e:	cf 90       	pop	r12
    2840:	bf 90       	pop	r11
    2842:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    2844:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <set_oneshot_mods>
                            if (tap_count == 0) {
    2848:	e1 10       	cpse	r14, r1
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <process_action+0x19e>
                                clear_oneshot_mods();
    284c:	0e 94 c3 1c 	call	0x3986	; 0x3986 <clear_oneshot_mods>
                                unregister_mods(mods);
    2850:	8d 2d       	mov	r24, r13
}
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	bf 90       	pop	r11
    286e:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2870:	0c 94 4e 13 	jmp	0x269c	; 0x269c <unregister_mods>
                            else if (tap_count == 1) {
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	e9 16       	cp	r14, r25
    2878:	09 f4       	brne	.+2      	; 0x287c <process_action+0x1a6>
    287a:	55 cf       	rjmp	.-342    	; 0x2726 <process_action+0x50>
    287c:	e7 cf       	rjmp	.-50     	; 0x284c <process_action+0x176>
                        if (event.pressed) {
    287e:	ff 20       	and	r15, r15
    2880:	51 f0       	breq	.+20     	; 0x2896 <process_action+0x1c0>
                            if (tap_count <= TAPPING_TOGGLE) {
    2882:	e5 e0       	ldi	r30, 0x05	; 5
    2884:	ee 15       	cp	r30, r14
    2886:	08 f4       	brcc	.+2      	; 0x288a <process_action+0x1b4>
    2888:	4e cf       	rjmp	.-356    	; 0x2726 <process_action+0x50>
                                if (mods & get_mods()) {
    288a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <get_mods>
    288e:	8d 21       	and	r24, r13
    2890:	09 f4       	brne	.+2      	; 0x2894 <process_action+0x1be>
    2892:	b3 cf       	rjmp	.-154    	; 0x27fa <process_action+0x124>
    2894:	dd cf       	rjmp	.-70     	; 0x2850 <process_action+0x17a>
                            if (tap_count < TAPPING_TOGGLE) {
    2896:	f4 e0       	ldi	r31, 0x04	; 4
    2898:	fe 15       	cp	r31, r14
    289a:	08 f4       	brcc	.+2      	; 0x289e <process_action+0x1c8>
    289c:	44 cf       	rjmp	.-376    	; 0x2726 <process_action+0x50>
    289e:	d8 cf       	rjmp	.-80     	; 0x2850 <process_action+0x17a>
                            if (tap_count > 0) {
    28a0:	ee 20       	and	r14, r14
    28a2:	b1 f2       	breq	.-84     	; 0x2850 <process_action+0x17a>
                            unregister_code(action.layer_tap.code);
    28a4:	80 2f       	mov	r24, r16
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	df 91       	pop	r29
    28b2:	cf 91       	pop	r28
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
    28c0:	bf 90       	pop	r11
    28c2:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    28c4:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <unregister_code>
            switch (action.usage.page) {
    28c8:	81 2f       	mov	r24, r17
    28ca:	86 95       	lsr	r24
    28cc:	86 95       	lsr	r24
    28ce:	83 70       	andi	r24, 0x03	; 3
    28d0:	d1 f0       	breq	.+52     	; 0x2906 <process_action+0x230>
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <process_action+0x202>
    28d6:	27 cf       	rjmp	.-434    	; 0x2726 <process_action+0x50>
                        host_consumer_send(action.usage.code);
    28d8:	c8 01       	movw	r24, r16
    28da:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    28dc:	f1 10       	cpse	r15, r1
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <process_action+0x20e>
                        host_consumer_send(0);
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	80 e0       	ldi	r24, 0x00	; 0
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	df 90       	pop	r13
    28fc:	cf 90       	pop	r12
    28fe:	bf 90       	pop	r11
    2900:	af 90       	pop	r10
                        host_consumer_send(0);
    2902:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <host_consumer_send>
                        host_system_send(action.usage.code);
    2906:	c8 01       	movw	r24, r16
    2908:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    290a:	f1 10       	cpse	r15, r1
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <process_action+0x23c>
                        host_system_send(0);
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	80 e0       	ldi	r24, 0x00	; 0
}
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	ef 90       	pop	r14
    2928:	df 90       	pop	r13
    292a:	cf 90       	pop	r12
    292c:	bf 90       	pop	r11
    292e:	af 90       	pop	r10
                        host_system_send(0);
    2930:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <host_system_send>
                mousekey_on(action.key.code);
    2934:	80 2f       	mov	r24, r16
            if (event.pressed) {
    2936:	ff 20       	and	r15, r15
    2938:	99 f0       	breq	.+38     	; 0x2960 <process_action+0x28a>
                mousekey_on(action.key.code);
    293a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <mousekey_on>
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	df 90       	pop	r13
    2956:	cf 90       	pop	r12
    2958:	bf 90       	pop	r11
    295a:	af 90       	pop	r10
                mousekey_send();
    295c:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <mousekey_send>
                mousekey_off(action.key.code);
    2960:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <mousekey_off>
    2964:	ec cf       	rjmp	.-40     	; 0x293e <process_action+0x268>
            if (action.layer_bitop.on == 0) {
    2966:	81 2f       	mov	r24, r17
    2968:	83 70       	andi	r24, 0x03	; 3
    296a:	09 f0       	breq	.+2      	; 0x296e <process_action+0x298>
    296c:	71 c0       	rjmp	.+226    	; 0x2a50 <process_action+0x37a>
                if (!event.pressed) {
    296e:	f1 10       	cpse	r15, r1
    2970:	da ce       	rjmp	.-588    	; 0x2726 <process_action+0x50>
                    uint8_t shift = action.layer_bitop.part*4;
    2972:	20 2f       	mov	r18, r16
    2974:	22 95       	swap	r18
    2976:	26 95       	lsr	r18
    2978:	27 70       	andi	r18, 0x07	; 7
    297a:	22 0f       	add	r18, r18
    297c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    297e:	60 2f       	mov	r22, r16
    2980:	6f 70       	andi	r22, 0x0F	; 15
    2982:	c6 2e       	mov	r12, r22
    2984:	d1 2c       	mov	r13, r1
    2986:	f1 2c       	mov	r15, r1
    2988:	e1 2c       	mov	r14, r1
    298a:	02 2e       	mov	r0, r18
    298c:	04 c0       	rjmp	.+8      	; 0x2996 <process_action+0x2c0>
    298e:	cc 0c       	add	r12, r12
    2990:	dd 1c       	adc	r13, r13
    2992:	ee 1c       	adc	r14, r14
    2994:	ff 1c       	adc	r15, r15
    2996:	0a 94       	dec	r0
    2998:	d2 f7       	brpl	.-12     	; 0x298e <process_action+0x2b8>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	cb 01       	movw	r24, r22
    29a0:	04 ff       	sbrs	r16, 4
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <process_action+0x2ec>
    29a4:	6f e0       	ldi	r22, 0x0F	; 15
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	04 c0       	rjmp	.+8      	; 0x29b6 <process_action+0x2e0>
    29ae:	66 0f       	add	r22, r22
    29b0:	77 1f       	adc	r23, r23
    29b2:	88 1f       	adc	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	2a 95       	dec	r18
    29b8:	d2 f7       	brpl	.-12     	; 0x29ae <process_action+0x2d8>
    29ba:	60 95       	com	r22
    29bc:	70 95       	com	r23
    29be:	80 95       	com	r24
    29c0:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    29c2:	16 95       	lsr	r17
    29c4:	16 95       	lsr	r17
    29c6:	13 70       	andi	r17, 0x03	; 3
    29c8:	12 30       	cpi	r17, 0x02	; 2
    29ca:	c1 f0       	breq	.+48     	; 0x29fc <process_action+0x326>
    29cc:	60 f5       	brcc	.+88     	; 0x2a26 <process_action+0x350>
    29ce:	6c 29       	or	r22, r12
    29d0:	7d 29       	or	r23, r13
    29d2:	8e 29       	or	r24, r14
    29d4:	9f 29       	or	r25, r15
    29d6:	11 30       	cpi	r17, 0x01	; 1
    29d8:	51 f1       	breq	.+84     	; 0x2a2e <process_action+0x358>
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	ff 90       	pop	r15
    29ee:	ef 90       	pop	r14
    29f0:	df 90       	pop	r13
    29f2:	cf 90       	pop	r12
    29f4:	bf 90       	pop	r11
    29f6:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    29f8:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <default_layer_and>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    29fc:	6c 29       	or	r22, r12
    29fe:	7d 29       	or	r23, r13
    2a00:	8e 29       	or	r24, r14
    2a02:	9f 29       	or	r25, r15
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	df 90       	pop	r13
    2a1c:	cf 90       	pop	r12
    2a1e:	bf 90       	pop	r11
    2a20:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2a22:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a26:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <default_layer_and>
    2a2a:	c7 01       	movw	r24, r14
    2a2c:	b6 01       	movw	r22, r12
}
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	df 90       	pop	r13
    2a46:	cf 90       	pop	r12
    2a48:	bf 90       	pop	r11
    2a4a:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2a4c:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2a50:	86 95       	lsr	r24
    2a52:	ff 20       	and	r15, r15
    2a54:	11 f0       	breq	.+4      	; 0x2a5a <process_action+0x384>
    2a56:	81 2f       	mov	r24, r17
    2a58:	81 70       	andi	r24, 0x01	; 1
    2a5a:	88 23       	and	r24, r24
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <process_action+0x38a>
    2a5e:	63 ce       	rjmp	.-826    	; 0x2726 <process_action+0x50>
                    uint8_t shift = action.layer_bitop.part*4;
    2a60:	20 2f       	mov	r18, r16
    2a62:	22 95       	swap	r18
    2a64:	26 95       	lsr	r18
    2a66:	27 70       	andi	r18, 0x07	; 7
    2a68:	22 0f       	add	r18, r18
    2a6a:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a6c:	60 2f       	mov	r22, r16
    2a6e:	6f 70       	andi	r22, 0x0F	; 15
    2a70:	c6 2e       	mov	r12, r22
    2a72:	d1 2c       	mov	r13, r1
    2a74:	f1 2c       	mov	r15, r1
    2a76:	e1 2c       	mov	r14, r1
    2a78:	02 2e       	mov	r0, r18
    2a7a:	04 c0       	rjmp	.+8      	; 0x2a84 <process_action+0x3ae>
    2a7c:	cc 0c       	add	r12, r12
    2a7e:	dd 1c       	adc	r13, r13
    2a80:	ee 1c       	adc	r14, r14
    2a82:	ff 1c       	adc	r15, r15
    2a84:	0a 94       	dec	r0
    2a86:	d2 f7       	brpl	.-12     	; 0x2a7c <process_action+0x3a6>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	04 ff       	sbrs	r16, 4
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <process_action+0x3da>
    2a92:	6f e0       	ldi	r22, 0x0F	; 15
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <process_action+0x3ce>
    2a9c:	66 0f       	add	r22, r22
    2a9e:	77 1f       	adc	r23, r23
    2aa0:	88 1f       	adc	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	2a 95       	dec	r18
    2aa6:	d2 f7       	brpl	.-12     	; 0x2a9c <process_action+0x3c6>
    2aa8:	60 95       	com	r22
    2aaa:	70 95       	com	r23
    2aac:	80 95       	com	r24
    2aae:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2ab0:	16 95       	lsr	r17
    2ab2:	16 95       	lsr	r17
    2ab4:	13 70       	andi	r17, 0x03	; 3
    2ab6:	12 30       	cpi	r17, 0x02	; 2
    2ab8:	c1 f0       	breq	.+48     	; 0x2aea <process_action+0x414>
    2aba:	60 f5       	brcc	.+88     	; 0x2b14 <process_action+0x43e>
    2abc:	6c 29       	or	r22, r12
    2abe:	7d 29       	or	r23, r13
    2ac0:	8e 29       	or	r24, r14
    2ac2:	9f 29       	or	r25, r15
    2ac4:	11 30       	cpi	r17, 0x01	; 1
    2ac6:	51 f1       	breq	.+84     	; 0x2b1c <process_action+0x446>
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	1f 91       	pop	r17
    2ad8:	0f 91       	pop	r16
    2ada:	ff 90       	pop	r15
    2adc:	ef 90       	pop	r14
    2ade:	df 90       	pop	r13
    2ae0:	cf 90       	pop	r12
    2ae2:	bf 90       	pop	r11
    2ae4:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2ae6:	0c 94 96 1b 	jmp	0x372c	; 0x372c <layer_and>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2aea:	6c 29       	or	r22, r12
    2aec:	7d 29       	or	r23, r13
    2aee:	8e 29       	or	r24, r14
    2af0:	9f 29       	or	r25, r15
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	bf 90       	pop	r11
    2b0e:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2b10:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b14:	0e 94 96 1b 	call	0x372c	; 0x372c <layer_and>
    2b18:	c7 01       	movw	r24, r14
    2b1a:	b6 01       	movw	r22, r12
}
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	cf 90       	pop	r12
    2b36:	bf 90       	pop	r11
    2b38:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2b3a:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <layer_or>
            switch (action.layer_tap.code) {
    2b3e:	00 3f       	cpi	r16, 0xF0	; 240
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <process_action+0x46e>
    2b42:	44 c0       	rjmp	.+136    	; 0x2bcc <process_action+0x4f6>
    2b44:	60 f4       	brcc	.+24     	; 0x2b5e <process_action+0x488>
    2b46:	80 e4       	ldi	r24, 0x40	; 64
    2b48:	80 0f       	add	r24, r16
    2b4a:	80 32       	cpi	r24, 0x20	; 32
    2b4c:	28 f1       	brcs	.+74     	; 0x2b98 <process_action+0x4c2>
                    if (event.pressed) {
    2b4e:	ff 20       	and	r15, r15
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <process_action+0x47e>
    2b52:	95 c0       	rjmp	.+298    	; 0x2c7e <process_action+0x5a8>
                        if (tap_count > 0) {
    2b54:	e1 10       	cpse	r14, r1
    2b56:	08 ce       	rjmp	.-1008   	; 0x2768 <process_action+0x92>
                            layer_on(action.layer_tap.val);
    2b58:	81 2f       	mov	r24, r17
    2b5a:	8f 71       	andi	r24, 0x1F	; 31
    2b5c:	59 c0       	rjmp	.+178    	; 0x2c10 <process_action+0x53a>
    2b5e:	02 3f       	cpi	r16, 0xF2	; 242
    2b60:	09 f4       	brne	.+2      	; 0x2b64 <process_action+0x48e>
    2b62:	67 c0       	rjmp	.+206    	; 0x2c32 <process_action+0x55c>
    2b64:	08 f4       	brcc	.+2      	; 0x2b68 <process_action+0x492>
    2b66:	50 c0       	rjmp	.+160    	; 0x2c08 <process_action+0x532>
    2b68:	03 3f       	cpi	r16, 0xF3	; 243
    2b6a:	89 f7       	brne	.-30     	; 0x2b4e <process_action+0x478>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b6c:	ff 20       	and	r15, r15
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <process_action+0x49c>
    2b70:	75 c0       	rjmp	.+234    	; 0x2c5c <process_action+0x586>
    2b72:	81 2f       	mov	r24, r17
    2b74:	8f 71       	andi	r24, 0x1F	; 31
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	ff 90       	pop	r15
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
    2b90:	bf 90       	pop	r11
    2b92:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b94:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <layer_move>
                    if (event.pressed) {
    2b98:	81 2f       	mov	r24, r17
    2b9a:	8f 71       	andi	r24, 0x1F	; 31
    2b9c:	10 2f       	mov	r17, r16
    2b9e:	10 71       	andi	r17, 0x10	; 16
    2ba0:	ff 20       	and	r15, r15
    2ba2:	51 f0       	breq	.+20     	; 0x2bb8 <process_action+0x4e2>
                        layer_on(action.layer_tap.val);
    2ba4:	0e 94 1f 1b 	call	0x363e	; 0x363e <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2ba8:	80 2f       	mov	r24, r16
    2baa:	82 95       	swap	r24
    2bac:	80 7f       	andi	r24, 0xF0	; 240
    2bae:	11 11       	cpse	r17, r1
    2bb0:	25 ce       	rjmp	.-950    	; 0x27fc <process_action+0x126>
    2bb2:	80 2f       	mov	r24, r16
    2bb4:	8f 70       	andi	r24, 0x0F	; 15
    2bb6:	22 ce       	rjmp	.-956    	; 0x27fc <process_action+0x126>
                        layer_off(action.layer_tap.val);
    2bb8:	0e 94 40 1b 	call	0x3680	; 0x3680 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2bbc:	80 2f       	mov	r24, r16
    2bbe:	82 95       	swap	r24
    2bc0:	80 7f       	andi	r24, 0xF0	; 240
    2bc2:	11 11       	cpse	r17, r1
    2bc4:	46 ce       	rjmp	.-884    	; 0x2852 <process_action+0x17c>
    2bc6:	80 2f       	mov	r24, r16
    2bc8:	8f 70       	andi	r24, 0x0F	; 15
    2bca:	43 ce       	rjmp	.-890    	; 0x2852 <process_action+0x17c>
                    if (event.pressed) {
    2bcc:	ff 20       	and	r15, r15
    2bce:	b9 f0       	breq	.+46     	; 0x2bfe <process_action+0x528>
                        if (tap_count < TAPPING_TOGGLE) {
    2bd0:	f4 e0       	ldi	r31, 0x04	; 4
    2bd2:	fe 15       	cp	r31, r14
    2bd4:	08 f4       	brcc	.+2      	; 0x2bd8 <process_action+0x502>
    2bd6:	a7 cd       	rjmp	.-1202   	; 0x2726 <process_action+0x50>
                            layer_invert(action.layer_tap.val);
    2bd8:	81 2f       	mov	r24, r17
    2bda:	8f 71       	andi	r24, 0x1F	; 31
}
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	bf 90       	pop	r11
    2bf8:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    2bfa:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2bfe:	25 e0       	ldi	r18, 0x05	; 5
    2c00:	2e 15       	cp	r18, r14
    2c02:	08 f4       	brcc	.+2      	; 0x2c06 <process_action+0x530>
    2c04:	90 cd       	rjmp	.-1248   	; 0x2726 <process_action+0x50>
    2c06:	e8 cf       	rjmp	.-48     	; 0x2bd8 <process_action+0x502>
                    event.pressed ? layer_on(action.layer_tap.val) :
    2c08:	81 2f       	mov	r24, r17
    2c0a:	8f 71       	andi	r24, 0x1F	; 31
    2c0c:	ff 20       	and	r15, r15
    2c0e:	a9 f0       	breq	.+42     	; 0x2c3a <process_action+0x564>
}
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    2c2e:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    2c32:	81 2f       	mov	r24, r17
    2c34:	8f 71       	andi	r24, 0x1F	; 31
    2c36:	ff 20       	and	r15, r15
    2c38:	59 f3       	breq	.-42     	; 0x2c10 <process_action+0x53a>
}
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	ef 90       	pop	r14
    2c50:	df 90       	pop	r13
    2c52:	cf 90       	pop	r12
    2c54:	bf 90       	pop	r11
    2c56:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    2c58:	0c 94 40 1b 	jmp	0x3680	; 0x3680 <layer_off>
}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	bf 90       	pop	r11
    2c78:	af 90       	pop	r10
                                    layer_clear();
    2c7a:	0c 94 05 1b 	jmp	0x360a	; 0x360a <layer_clear>
                        if (tap_count > 0) {
    2c7e:	e1 10       	cpse	r14, r1
    2c80:	11 ce       	rjmp	.-990    	; 0x28a4 <process_action+0x1ce>
                            layer_off(action.layer_tap.val);
    2c82:	81 2f       	mov	r24, r17
    2c84:	8f 71       	andi	r24, 0x1F	; 31
    2c86:	d9 cf       	rjmp	.-78     	; 0x2c3a <process_action+0x564>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c88:	41 2f       	mov	r20, r17
    2c8a:	4f 70       	andi	r20, 0x0F	; 15
    2c8c:	60 2f       	mov	r22, r16
    2c8e:	c5 01       	movw	r24, r10
    2c90:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <action_get_macro>
}
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	bf 90       	pop	r11
    2cb0:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2cb2:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <action_macro_play>
            switch (action.command.id) {
    2cb6:	01 11       	cpse	r16, r1
    2cb8:	36 cd       	rjmp	.-1428   	; 0x2726 <process_action+0x50>
                    if (event.pressed) {
    2cba:	ff 20       	and	r15, r15
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <process_action+0x5ea>
    2cbe:	33 cd       	rjmp	.-1434   	; 0x2726 <process_action+0x50>
                        clear_keyboard();
    2cc0:	0e 94 67 13 	call	0x26ce	; 0x26ce <clear_keyboard>
    2cc4:	8f ef       	ldi	r24, 0xFF	; 255
    2cc6:	90 e7       	ldi	r25, 0x70	; 112
    2cc8:	e2 e0       	ldi	r30, 0x02	; 2
    2cca:	81 50       	subi	r24, 0x01	; 1
    2ccc:	90 40       	sbci	r25, 0x00	; 0
    2cce:	e0 40       	sbci	r30, 0x00	; 0
    2cd0:	e1 f7       	brne	.-8      	; 0x2cca <process_action+0x5f4>
    2cd2:	00 c0       	rjmp	.+0      	; 0x2cd4 <process_action+0x5fe>
    2cd4:	00 00       	nop
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	df 90       	pop	r13
    2cee:	cf 90       	pop	r12
    2cf0:	bf 90       	pop	r11
    2cf2:	af 90       	pop	r10
                        bootloader_jump();
    2cf4:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <bootloader_jump>
            action_function(record, action.func.id, action.func.opt);
    2cf8:	41 2f       	mov	r20, r17
    2cfa:	4f 70       	andi	r20, 0x0F	; 15
    2cfc:	60 2f       	mov	r22, r16
    2cfe:	c5 01       	movw	r24, r10
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	ef 90       	pop	r14
    2d16:	df 90       	pop	r13
    2d18:	cf 90       	pop	r12
    2d1a:	bf 90       	pop	r11
    2d1c:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2d1e:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <action_function>
    keyevent_t event = record->event;
    2d22:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2d24:	e5 80       	ldd	r14, Z+5	; 0x05
    2d26:	e2 94       	swap	r14
    2d28:	2f e0       	ldi	r18, 0x0F	; 15
    2d2a:	e2 22       	and	r14, r18
    action_t action = layer_switch_get_action(event);
    2d2c:	49 83       	std	Y+1, r20	; 0x01
    2d2e:	5a 83       	std	Y+2, r21	; 0x02
    2d30:	fb 82       	std	Y+3, r15	; 0x03
    2d32:	78 2f       	mov	r23, r24
    2d34:	9d 83       	std	Y+5, r25	; 0x05
    2d36:	8c 83       	std	Y+4, r24	; 0x04
    2d38:	6f 2d       	mov	r22, r15
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <layer_switch_get_action>
    2d40:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    2d42:	0e 94 ba 1b 	call	0x3774	; 0x3774 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2d46:	0e 94 ac 1a 	call	0x3558	; 0x3558 <default_layer_debug>
    switch (action.kind.id) {
    2d4a:	e1 2f       	mov	r30, r17
    2d4c:	e2 95       	swap	r30
    2d4e:	ef 70       	andi	r30, 0x0F	; 15
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	ea 5d       	subi	r30, 0xDA	; 218
    2d54:	f9 4d       	sbci	r31, 0xD9	; 217
    2d56:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__tablejump2__>

00002d5a <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    2d5a:	cf 93       	push	r28
    2d5c:	df 93       	push	r29
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <is_tap_key+0x6>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <is_tap_key+0x8>
    2d62:	0f 92       	push	r0
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	6b 83       	std	Y+3, r22	; 0x03
    2d6a:	7c 83       	std	Y+4, r23	; 0x04
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d70:	9d 81       	ldd	r25, Y+5	; 0x05
    2d72:	89 2b       	or	r24, r25
    2d74:	21 f0       	breq	.+8      	; 0x2d7e <is_tap_key+0x24>
    2d76:	84 2f       	mov	r24, r20
    2d78:	85 23       	and	r24, r21
    2d7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d7c:	89 f4       	brne	.+34     	; 0x2da0 <is_tap_key+0x46>
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	2e c0       	rjmp	.+92     	; 0x2dde <is_tap_key+0x84>
    2d82:	90 e2       	ldi	r25, 0x20	; 32
    2d84:	98 0f       	add	r25, r24
    2d86:	98 30       	cpi	r25, 0x08	; 8
    2d88:	08 f1       	brcs	.+66     	; 0x2dcc <is_tap_key+0x72>
            switch (action.layer_tap.code) {
    2d8a:	88 3e       	cpi	r24, 0xE8	; 232
    2d8c:	30 f4       	brcc	.+12     	; 0x2d9a <is_tap_key+0x40>
    2d8e:	80 3e       	cpi	r24, 0xE0	; 224
    2d90:	e8 f4       	brcc	.+58     	; 0x2dcc <is_tap_key+0x72>
    2d92:	84 50       	subi	r24, 0x04	; 4
    2d94:	81 3a       	cpi	r24, 0xA1	; 161
    2d96:	98 f7       	brcc	.-26     	; 0x2d7e <is_tap_key+0x24>
    2d98:	19 c0       	rjmp	.+50     	; 0x2dcc <is_tap_key+0x72>
    2d9a:	80 3f       	cpi	r24, 0xF0	; 240
    2d9c:	81 f7       	brne	.-32     	; 0x2d7e <is_tap_key+0x24>
    2d9e:	16 c0       	rjmp	.+44     	; 0x2dcc <is_tap_key+0x72>
    action_t action = layer_switch_get_action(event);
    2da0:	6b 81       	ldd	r22, Y+3	; 0x03
    2da2:	7c 81       	ldd	r23, Y+4	; 0x04
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	0e 94 bb 1b 	call	0x3776	; 0x3776 <layer_switch_get_action>
    switch (action.kind.id) {
    2daa:	29 2f       	mov	r18, r25
    2dac:	22 95       	swap	r18
    2dae:	2f 70       	andi	r18, 0x0F	; 15
    2db0:	2c 30       	cpi	r18, 0x0C	; 12
    2db2:	70 f4       	brcc	.+28     	; 0x2dd0 <is_tap_key+0x76>
    2db4:	2a 30       	cpi	r18, 0x0A	; 10
    2db6:	48 f7       	brcc	.-46     	; 0x2d8a <is_tap_key+0x30>
    2db8:	22 5f       	subi	r18, 0xF2	; 242
    2dba:	2f 70       	andi	r18, 0x0F	; 15
    2dbc:	22 30       	cpi	r18, 0x02	; 2
    2dbe:	f8 f6       	brcc	.-66     	; 0x2d7e <is_tap_key+0x24>
            switch (action.key.code) {
    2dc0:	85 3a       	cpi	r24, 0xA5	; 165
    2dc2:	f8 f6       	brcc	.-66     	; 0x2d82 <is_tap_key+0x28>
    2dc4:	84 30       	cpi	r24, 0x04	; 4
    2dc6:	10 f4       	brcc	.+4      	; 0x2dcc <is_tap_key+0x72>
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	f8 f6       	brcc	.-66     	; 0x2d8a <is_tap_key+0x30>
                case KC_A ... KC_EXSEL:     // tap key
                case KC_LCTRL ... KC_RGUI:  // tap key
                case OP_TAP_TOGGLE:
                    return true;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	07 c0       	rjmp	.+14     	; 0x2dde <is_tap_key+0x84>
    switch (action.kind.id) {
    2dd0:	2c 30       	cpi	r18, 0x0C	; 12
    2dd2:	11 f0       	breq	.+4      	; 0x2dd8 <is_tap_key+0x7e>
    2dd4:	2f 30       	cpi	r18, 0x0F	; 15
    2dd6:	99 f6       	brne	.-90     	; 0x2d7e <is_tap_key+0x24>
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2dd8:	93 fb       	bst	r25, 3
    2dda:	88 27       	eor	r24, r24
    2ddc:	80 f9       	bld	r24, 0
            return false;
    }
    return false;
}
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	08 95       	ret

00002dee <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <debug_event+0x6>
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <debug_event+0x8>
    2df6:	0f 92       	push	r0
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	08 95       	ret

00002e0c <debug_record>:

void debug_record(keyrecord_t record)
{
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <debug_record+0x6>
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <debug_record+0x8>
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <debug_record+0xa>
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2e1a:	26 96       	adiw	r28, 0x06	; 6
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2e2c:	1f 93       	push	r17
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e32:	c0 91 72 03 	lds	r28, 0x0372	; 0x800372 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e36:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e38:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <waiting_buffer_head>
    2e3c:	8c 13       	cpse	r24, r28
    2e3e:	04 c0       	rjmp	.+8      	; 0x2e48 <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	1f 91       	pop	r17
    2e46:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2e48:	d0 e0       	ldi	r29, 0x00	; 0
    2e4a:	1c 9f       	mul	r17, r28
    2e4c:	f0 01       	movw	r30, r0
    2e4e:	1d 9f       	mul	r17, r29
    2e50:	f0 0d       	add	r31, r0
    2e52:	11 24       	eor	r1, r1
    2e54:	ec 58       	subi	r30, 0x8C	; 140
    2e56:	fc 4f       	sbci	r31, 0xFC	; 252
    2e58:	40 81       	ld	r20, Z
    2e5a:	51 81       	ldd	r21, Z+1	; 0x01
    2e5c:	62 81       	ldd	r22, Z+2	; 0x02
    2e5e:	73 81       	ldd	r23, Z+3	; 0x03
    2e60:	84 81       	ldd	r24, Z+4	; 0x04
    2e62:	95 81       	ldd	r25, Z+5	; 0x05
    2e64:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e68:	21 96       	adiw	r28, 0x01	; 1
    2e6a:	c7 70       	andi	r28, 0x07	; 7
    2e6c:	e5 cf       	rjmp	.-54     	; 0x2e38 <debug_waiting_buffer+0xc>

00002e6e <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2e6e:	40 91 a4 03 	lds	r20, 0x03A4	; 0x8003a4 <tapping_key>
    2e72:	50 91 a5 03 	lds	r21, 0x03A5	; 0x8003a5 <tapping_key+0x1>
    2e76:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <tapping_key+0x2>
    2e7a:	70 91 a7 03 	lds	r23, 0x03A7	; 0x8003a7 <tapping_key+0x3>
    2e7e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <tapping_key+0x4>
    2e82:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    2e86:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <debug_record>

00002e8a <waiting_buffer_scan_tap>:
{
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2e90:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    2e94:	80 7f       	andi	r24, 0xF0	; 240
    2e96:	c1 f4       	brne	.+48     	; 0x2ec8 <waiting_buffer_scan_tap+0x3e>
    if (!tapping_key.event.pressed) return;
    2e98:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <tapping_key+0x2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	a1 f0       	breq	.+40     	; 0x2ec8 <waiting_buffer_scan_tap+0x3e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ea0:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <waiting_buffer_tail>
    2ea4:	c0 91 73 03 	lds	r28, 0x0373	; 0x800373 <waiting_buffer_head>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2ea8:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <tapping_key>
    2eac:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <tapping_key+0x1>
    2eb0:	40 91 a7 03 	lds	r20, 0x03A7	; 0x8003a7 <tapping_key+0x3>
    2eb4:	50 91 a8 03 	lds	r21, 0x03A8	; 0x8003a8 <tapping_key+0x4>
    2eb8:	d6 2f       	mov	r29, r22
    2eba:	d7 23       	and	r29, r23
    2ebc:	da 01       	movw	r26, r20
    2ebe:	a0 95       	com	r26
    2ec0:	b0 95       	com	r27
    2ec2:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ec4:	c8 13       	cpse	r28, r24
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <waiting_buffer_scan_tap+0x46>
}
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	08 95       	ret
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	41 15       	cp	r20, r1
    2ed4:	51 05       	cpc	r21, r1
    2ed6:	11 f0       	breq	.+4      	; 0x2edc <waiting_buffer_scan_tap+0x52>
    2ed8:	df 3f       	cpi	r29, 0xFF	; 255
    2eda:	31 f4       	brne	.+12     	; 0x2ee8 <waiting_buffer_scan_tap+0x5e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	87 70       	andi	r24, 0x07	; 7
    2ee0:	f1 cf       	rjmp	.-30     	; 0x2ec4 <waiting_buffer_scan_tap+0x3a>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2ee2:	2a 0f       	add	r18, r26
    2ee4:	3b 1f       	adc	r19, r27
    2ee6:	17 c0       	rjmp	.+46     	; 0x2f16 <waiting_buffer_scan_tap+0x8c>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2ee8:	18 9f       	mul	r17, r24
    2eea:	f0 01       	movw	r30, r0
    2eec:	19 9f       	mul	r17, r25
    2eee:	f0 0d       	add	r31, r0
    2ef0:	11 24       	eor	r1, r1
    2ef2:	ec 58       	subi	r30, 0x8C	; 140
    2ef4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ef6:	21 81       	ldd	r18, Z+1	; 0x01
    2ef8:	27 13       	cpse	r18, r23
    2efa:	f0 cf       	rjmp	.-32     	; 0x2edc <waiting_buffer_scan_tap+0x52>
    2efc:	20 81       	ld	r18, Z
    2efe:	26 13       	cpse	r18, r22
    2f00:	ed cf       	rjmp	.-38     	; 0x2edc <waiting_buffer_scan_tap+0x52>
    2f02:	22 81       	ldd	r18, Z+2	; 0x02
    2f04:	21 11       	cpse	r18, r1
    2f06:	ea cf       	rjmp	.-44     	; 0x2edc <waiting_buffer_scan_tap+0x52>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2f08:	23 81       	ldd	r18, Z+3	; 0x03
    2f0a:	34 81       	ldd	r19, Z+4	; 0x04
    2f0c:	24 17       	cp	r18, r20
    2f0e:	35 07       	cpc	r19, r21
    2f10:	40 f3       	brcs	.-48     	; 0x2ee2 <waiting_buffer_scan_tap+0x58>
    2f12:	24 1b       	sub	r18, r20
    2f14:	35 0b       	sbc	r19, r21
    2f16:	28 3c       	cpi	r18, 0xC8	; 200
    2f18:	31 05       	cpc	r19, r1
    2f1a:	00 f7       	brcc	.-64     	; 0x2edc <waiting_buffer_scan_tap+0x52>
            tapping_key.tap.count = 1;
    2f1c:	20 91 a9 03 	lds	r18, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    2f20:	2f 70       	andi	r18, 0x0F	; 15
    2f22:	20 61       	ori	r18, 0x10	; 16
    2f24:	20 93 a9 03 	sts	0x03A9, r18	; 0x8003a9 <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2f28:	26 e0       	ldi	r18, 0x06	; 6
    2f2a:	28 9f       	mul	r18, r24
    2f2c:	f0 01       	movw	r30, r0
    2f2e:	29 9f       	mul	r18, r25
    2f30:	f0 0d       	add	r31, r0
    2f32:	11 24       	eor	r1, r1
    2f34:	e7 58       	subi	r30, 0x87	; 135
    2f36:	fc 4f       	sbci	r31, 0xFC	; 252
    2f38:	80 81       	ld	r24, Z
    2f3a:	8f 70       	andi	r24, 0x0F	; 15
    2f3c:	80 61       	ori	r24, 0x10	; 16
    2f3e:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2f40:	84 ea       	ldi	r24, 0xA4	; 164
    2f42:	93 e0       	ldi	r25, 0x03	; 3
    2f44:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
}
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	1f 91       	pop	r17
            debug_waiting_buffer();
    2f4e:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <debug_waiting_buffer>

00002f52 <process_tapping>:
{
    2f52:	bf 92       	push	r11
    2f54:	cf 92       	push	r12
    2f56:	df 92       	push	r13
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	61 97       	sbiw	r28, 0x11	; 17
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	6c 01       	movw	r12, r24
    keyevent_t event = keyp->event;
    2f76:	85 e0       	ldi	r24, 0x05	; 5
    2f78:	f6 01       	movw	r30, r12
    2f7a:	de 01       	movw	r26, r28
    2f7c:	1d 96       	adiw	r26, 0x0d	; 13
    2f7e:	01 90       	ld	r0, Z+
    2f80:	0d 92       	st	X+, r0
    2f82:	8a 95       	dec	r24
    2f84:	e1 f7       	brne	.-8      	; 0x2f7e <process_tapping+0x2c>
    2f86:	d6 01       	movw	r26, r12
    2f88:	4c 91       	ld	r20, X
    2f8a:	11 96       	adiw	r26, 0x01	; 1
    2f8c:	5c 91       	ld	r21, X
    2f8e:	11 97       	sbiw	r26, 0x01	; 1
    2f90:	12 96       	adiw	r26, 0x02	; 2
    2f92:	fc 90       	ld	r15, X
    2f94:	12 97       	sbiw	r26, 0x02	; 2
    2f96:	13 96       	adiw	r26, 0x03	; 3
    2f98:	0d 91       	ld	r16, X+
    2f9a:	1c 91       	ld	r17, X
    if (IS_TAPPING_PRESSED()) {
    2f9c:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <tapping_key+0x3>
    2fa0:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <tapping_key+0x4>
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <process_tapping+0x58>
    2fa8:	89 c1       	rjmp	.+786    	; 0x32bc <process_tapping+0x36a>
    2faa:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <tapping_key>
    2fae:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <tapping_key+0x1>
    2fb2:	62 2f       	mov	r22, r18
    2fb4:	63 23       	and	r22, r19
    2fb6:	6f 3f       	cpi	r22, 0xFF	; 255
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <process_tapping+0x6a>
    2fba:	80 c1       	rjmp	.+768    	; 0x32bc <process_tapping+0x36a>
    2fbc:	b0 90 a6 03 	lds	r11, 0x03A6	; 0x8003a6 <tapping_key+0x2>
    2fc0:	bb 20       	and	r11, r11
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <process_tapping+0x74>
    2fc4:	1a c1       	rjmp	.+564    	; 0x31fa <process_tapping+0x2a8>
        if (WITHIN_TAPPING_TERM(event)) {
    2fc6:	08 17       	cp	r16, r24
    2fc8:	19 07       	cpc	r17, r25
    2fca:	d0 f1       	brcs	.+116    	; 0x3040 <process_tapping+0xee>
    2fcc:	f8 01       	movw	r30, r16
    2fce:	e8 1b       	sub	r30, r24
    2fd0:	f9 0b       	sbc	r31, r25
    2fd2:	cf 01       	movw	r24, r30
    2fd4:	ee 24       	eor	r14, r14
    2fd6:	e3 94       	inc	r14
    2fd8:	88 3c       	cpi	r24, 0xC8	; 200
    2fda:	91 05       	cpc	r25, r1
    2fdc:	08 f0       	brcs	.+2      	; 0x2fe0 <process_tapping+0x8e>
    2fde:	e1 2c       	mov	r14, r1
    2fe0:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    2fe4:	98 2f       	mov	r25, r24
    2fe6:	90 7f       	andi	r25, 0xF0	; 240
    2fe8:	ee 20       	and	r14, r14
    2fea:	09 f4       	brne	.+2      	; 0x2fee <process_tapping+0x9c>
    2fec:	bc c0       	rjmp	.+376    	; 0x3166 <process_tapping+0x214>
            if (tapping_key.tap.count == 0) {
    2fee:	91 11       	cpse	r25, r1
    2ff0:	81 c0       	rjmp	.+258    	; 0x30f4 <process_tapping+0x1a2>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2ff2:	ef 2c       	mov	r14, r15
    2ff4:	35 13       	cpse	r19, r21
    2ff6:	29 c0       	rjmp	.+82     	; 0x304a <process_tapping+0xf8>
    2ff8:	24 13       	cpse	r18, r20
    2ffa:	27 c0       	rjmp	.+78     	; 0x304a <process_tapping+0xf8>
    2ffc:	f1 10       	cpse	r15, r1
    2ffe:	25 c0       	rjmp	.+74     	; 0x304a <process_tapping+0xf8>
                    tapping_key.tap.count = 1;
    3000:	8f 70       	andi	r24, 0x0F	; 15
    3002:	80 61       	ori	r24, 0x10	; 16
    3004:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <tapping_key+0x5>
                    debug_tapping_key();
    3008:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <debug_tapping_key>
                    process_action(&tapping_key);
    300c:	84 ea       	ldi	r24, 0xA4	; 164
    300e:	93 e0       	ldi	r25, 0x03	; 3
    3010:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
                    keyp->tap = tapping_key.tap;
    3014:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    3018:	d6 01       	movw	r26, r12
    301a:	15 96       	adiw	r26, 0x05	; 5
    301c:	8c 93       	st	X, r24
}
    301e:	8e 2d       	mov	r24, r14
    3020:	61 96       	adiw	r28, 0x11	; 17
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	df 90       	pop	r13
    303a:	cf 90       	pop	r12
    303c:	bf 90       	pop	r11
    303e:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    3040:	80 95       	com	r24
    3042:	90 95       	com	r25
    3044:	80 0f       	add	r24, r16
    3046:	91 1f       	adc	r25, r17
    3048:	c5 cf       	rjmp	.-118    	; 0x2fd4 <process_tapping+0x82>
    304a:	01 15       	cp	r16, r1
    304c:	11 05       	cpc	r17, r1
    304e:	29 f0       	breq	.+10     	; 0x305a <process_tapping+0x108>
    3050:	85 2f       	mov	r24, r21
    3052:	84 23       	and	r24, r20
    3054:	8f 3f       	cpi	r24, 0xFF	; 255
    3056:	09 f0       	breq	.+2      	; 0x305a <process_tapping+0x108>
    3058:	43 c1       	rjmp	.+646    	; 0x32e0 <process_tapping+0x38e>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    305a:	80 e0       	ldi	r24, 0x00	; 0
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    305c:	b8 2f       	mov	r27, r24
    305e:	b1 70       	andi	r27, 0x01	; 1
    3060:	bb 2e       	mov	r11, r27
    3062:	80 ff       	sbrs	r24, 0
    3064:	3d c0       	rjmp	.+122    	; 0x30e0 <process_tapping+0x18e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3066:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <waiting_buffer_tail>
    306a:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    306e:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3070:	82 13       	cpse	r24, r18
    3072:	16 c0       	rjmp	.+44     	; 0x30a0 <process_tapping+0x14e>
                    action_t action = layer_switch_get_action(event);
    3074:	70 2f       	mov	r23, r16
    3076:	19 8b       	std	Y+17, r17	; 0x11
    3078:	08 8b       	std	Y+16, r16	; 0x10
    307a:	6f 2d       	mov	r22, r15
    307c:	89 89       	ldd	r24, Y+17	; 0x11
    307e:	0e 94 bb 1b 	call	0x3776	; 0x3776 <layer_switch_get_action>
                    switch (action.kind.id) {
    3082:	29 2f       	mov	r18, r25
    3084:	22 95       	swap	r18
    3086:	2f 70       	andi	r18, 0x0F	; 15
    3088:	22 30       	cpi	r18, 0x02	; 2
    308a:	f0 f0       	brcs	.+60     	; 0x30c8 <process_tapping+0x176>
    308c:	24 30       	cpi	r18, 0x04	; 4
    308e:	18 f5       	brcc	.+70     	; 0x30d6 <process_tapping+0x184>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3090:	9f 70       	andi	r25, 0x0F	; 15
    3092:	f1 f0       	breq	.+60     	; 0x30d0 <process_tapping+0x17e>
    3094:	f6 01       	movw	r30, r12
    3096:	95 81       	ldd	r25, Z+5	; 0x05
    3098:	90 7f       	andi	r25, 0xF0	; 240
    309a:	d1 f4       	brne	.+52     	; 0x30d0 <process_tapping+0x17e>
                            if (action.key.mods && !action.key.code) return false;
    309c:	b1 2c       	mov	r11, r1
    309e:	1e c0       	rjmp	.+60     	; 0x30dc <process_tapping+0x18a>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	38 9f       	mul	r19, r24
    30a4:	f0 01       	movw	r30, r0
    30a6:	39 9f       	mul	r19, r25
    30a8:	f0 0d       	add	r31, r0
    30aa:	11 24       	eor	r1, r1
    30ac:	ec 58       	subi	r30, 0x8C	; 140
    30ae:	fc 4f       	sbci	r31, 0xFC	; 252
    30b0:	61 81       	ldd	r22, Z+1	; 0x01
    30b2:	65 13       	cpse	r22, r21
    30b4:	06 c0       	rjmp	.+12     	; 0x30c2 <process_tapping+0x170>
    30b6:	60 81       	ld	r22, Z
    30b8:	64 13       	cpse	r22, r20
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <process_tapping+0x170>
    30bc:	62 81       	ldd	r22, Z+2	; 0x02
    30be:	f6 12       	cpse	r15, r22
    30c0:	0f c0       	rjmp	.+30     	; 0x30e0 <process_tapping+0x18e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30c2:	01 96       	adiw	r24, 0x01	; 1
    30c4:	87 70       	andi	r24, 0x07	; 7
    30c6:	d4 cf       	rjmp	.-88     	; 0x3070 <process_tapping+0x11e>
                            if (action.key.mods && !action.key.code) return false;
    30c8:	9f 70       	andi	r25, 0x0F	; 15
    30ca:	11 f0       	breq	.+4      	; 0x30d0 <process_tapping+0x17e>
    30cc:	88 23       	and	r24, r24
    30ce:	31 f3       	breq	.-52     	; 0x309c <process_tapping+0x14a>
                            if (IS_MOD(action.key.code)) return false;
    30d0:	80 5e       	subi	r24, 0xE0	; 224
    30d2:	88 30       	cpi	r24, 0x08	; 8
    30d4:	18 f3       	brcs	.-58     	; 0x309c <process_tapping+0x14a>
                    process_action(keyp);
    30d6:	c6 01       	movw	r24, r12
    30d8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
                    return true;
    30dc:	eb 2c       	mov	r14, r11
    30de:	9f cf       	rjmp	.-194    	; 0x301e <process_tapping+0xcc>
                    if (event.pressed) {
    30e0:	ff 20       	and	r15, r15
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <process_tapping+0x194>
    30e4:	9c cf       	rjmp	.-200    	; 0x301e <process_tapping+0xcc>
                        tapping_key.tap.interrupted = true;
    30e6:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    30ea:	81 60       	ori	r24, 0x01	; 1
    30ec:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <tapping_key+0x5>
                    return false;
    30f0:	e1 2c       	mov	r14, r1
    30f2:	95 cf       	rjmp	.-214    	; 0x301e <process_tapping+0xcc>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30f4:	35 13       	cpse	r19, r21
    30f6:	06 c0       	rjmp	.+12     	; 0x3104 <process_tapping+0x1b2>
    30f8:	24 13       	cpse	r18, r20
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <process_tapping+0x1b2>
                    keyp->tap = tapping_key.tap;
    30fc:	d6 01       	movw	r26, r12
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30fe:	ff 20       	and	r15, r15
    3100:	09 f4       	brne	.+2      	; 0x3104 <process_tapping+0x1b2>
    3102:	a1 c0       	rjmp	.+322    	; 0x3246 <process_tapping+0x2f4>
                else if (is_tap_key(event) && event.pressed) {
    3104:	4d 87       	std	Y+13, r20	; 0x0d
    3106:	5e 87       	std	Y+14, r21	; 0x0e
    3108:	ff 86       	std	Y+15, r15	; 0x0f
    310a:	70 2f       	mov	r23, r16
    310c:	19 8b       	std	Y+17, r17	; 0x11
    310e:	08 8b       	std	Y+16, r16	; 0x10
    3110:	6f 2d       	mov	r22, r15
    3112:	89 89       	ldd	r24, Y+17	; 0x11
    3114:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_tap_key>
    3118:	88 23       	and	r24, r24
    311a:	09 f4       	brne	.+2      	; 0x311e <process_tapping+0x1cc>
    311c:	dd c0       	rjmp	.+442    	; 0x32d8 <process_tapping+0x386>
    311e:	ff 20       	and	r15, r15
    3120:	09 f4       	brne	.+2      	; 0x3124 <process_tapping+0x1d2>
    3122:	da c0       	rjmp	.+436    	; 0x32d8 <process_tapping+0x386>
                    if (tapping_key.tap.count > 1) {
    3124:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    3128:	80 32       	cpi	r24, 0x20	; 32
    312a:	70 f0       	brcs	.+28     	; 0x3148 <process_tapping+0x1f6>
                        process_action(&(keyrecord_t){
    312c:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <tapping_key>
    3130:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <tapping_key+0x1>
    3134:	38 87       	std	Y+8, r19	; 0x08
    3136:	2f 83       	std	Y+7, r18	; 0x07
    3138:	19 86       	std	Y+9, r1	; 0x09
    313a:	1b 87       	std	Y+11, r17	; 0x0b
    313c:	0a 87       	std	Y+10, r16	; 0x0a
    313e:	8c 87       	std	Y+12, r24	; 0x0c
    3140:	ce 01       	movw	r24, r28
    3142:	07 96       	adiw	r24, 0x07	; 7
    3144:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
                    tapping_key = *keyp;
    3148:	86 e0       	ldi	r24, 0x06	; 6
    314a:	f6 01       	movw	r30, r12
    314c:	a4 ea       	ldi	r26, 0xA4	; 164
    314e:	b3 e0       	ldi	r27, 0x03	; 3
    3150:	01 90       	ld	r0, Z+
    3152:	0d 92       	st	X+, r0
    3154:	8a 95       	dec	r24
    3156:	e1 f7       	brne	.-8      	; 0x3150 <process_tapping+0x1fe>
                    waiting_buffer_scan_tap();
    3158:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <waiting_buffer_scan_tap>
                    debug_tapping_key();
    315c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <debug_tapping_key>
                    return true;
    3160:	ee 24       	eor	r14, r14
    3162:	e3 94       	inc	r14
    3164:	5c cf       	rjmp	.-328    	; 0x301e <process_tapping+0xcc>
            if (tapping_key.tap.count == 0) {
    3166:	91 11       	cpse	r25, r1
    3168:	13 c0       	rjmp	.+38     	; 0x3190 <process_tapping+0x23e>
                debug_event(event); debug("\n");
    316a:	70 2f       	mov	r23, r16
    316c:	19 8b       	std	Y+17, r17	; 0x11
    316e:	08 8b       	std	Y+16, r16	; 0x10
    3170:	6f 2d       	mov	r22, r15
    3172:	89 89       	ldd	r24, Y+17	; 0x11
    3174:	0e 94 f7 16 	call	0x2dee	; 0x2dee <debug_event>
                process_action(&tapping_key);
    3178:	84 ea       	ldi	r24, 0xA4	; 164
    317a:	93 e0       	ldi	r25, 0x03	; 3
    317c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
            tapping_key = (keyrecord_t){};
    3180:	86 e0       	ldi	r24, 0x06	; 6
    3182:	e4 ea       	ldi	r30, 0xA4	; 164
    3184:	f3 e0       	ldi	r31, 0x03	; 3
    3186:	df 01       	movw	r26, r30
    3188:	1d 92       	st	X+, r1
    318a:	8a 95       	dec	r24
    318c:	e9 f7       	brne	.-6      	; 0x3188 <process_tapping+0x236>
    318e:	68 c0       	rjmp	.+208    	; 0x3260 <process_tapping+0x30e>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3190:	35 13       	cpse	r19, r21
    3192:	11 c0       	rjmp	.+34     	; 0x31b6 <process_tapping+0x264>
    3194:	24 13       	cpse	r18, r20
    3196:	0f c0       	rjmp	.+30     	; 0x31b6 <process_tapping+0x264>
    3198:	f1 10       	cpse	r15, r1
    319a:	0d c0       	rjmp	.+26     	; 0x31b6 <process_tapping+0x264>
                    keyp->tap = tapping_key.tap;
    319c:	f6 01       	movw	r30, r12
    319e:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    31a0:	c6 01       	movw	r24, r12
    31a2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
                    tapping_key = (keyrecord_t){};
    31a6:	e4 ea       	ldi	r30, 0xA4	; 164
    31a8:	f3 e0       	ldi	r31, 0x03	; 3
    31aa:	86 e0       	ldi	r24, 0x06	; 6
    31ac:	df 01       	movw	r26, r30
    31ae:	1d 92       	st	X+, r1
    31b0:	8a 95       	dec	r24
    31b2:	e9 f7       	brne	.-6      	; 0x31ae <process_tapping+0x25c>
    31b4:	93 cf       	rjmp	.-218    	; 0x30dc <process_tapping+0x18a>
                else if (is_tap_key(event) && event.pressed) {
    31b6:	4d 87       	std	Y+13, r20	; 0x0d
    31b8:	5e 87       	std	Y+14, r21	; 0x0e
    31ba:	ff 86       	std	Y+15, r15	; 0x0f
    31bc:	70 2f       	mov	r23, r16
    31be:	19 8b       	std	Y+17, r17	; 0x11
    31c0:	08 8b       	std	Y+16, r16	; 0x10
    31c2:	6f 2d       	mov	r22, r15
    31c4:	89 89       	ldd	r24, Y+17	; 0x11
    31c6:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_tap_key>
    31ca:	88 23       	and	r24, r24
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <process_tapping+0x27e>
    31ce:	84 c0       	rjmp	.+264    	; 0x32d8 <process_tapping+0x386>
    31d0:	ff 20       	and	r15, r15
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <process_tapping+0x284>
    31d4:	81 c0       	rjmp	.+258    	; 0x32d8 <process_tapping+0x386>
                    if (tapping_key.tap.count > 1) {
    31d6:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    31da:	80 32       	cpi	r24, 0x20	; 32
    31dc:	08 f4       	brcc	.+2      	; 0x31e0 <process_tapping+0x28e>
    31de:	b4 cf       	rjmp	.-152    	; 0x3148 <process_tapping+0x1f6>
                        process_action(&(keyrecord_t){
    31e0:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <tapping_key>
    31e4:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <tapping_key+0x1>
    31e8:	3a 83       	std	Y+2, r19	; 0x02
    31ea:	29 83       	std	Y+1, r18	; 0x01
    31ec:	1b 82       	std	Y+3, r1	; 0x03
    31ee:	1d 83       	std	Y+5, r17	; 0x05
    31f0:	0c 83       	std	Y+4, r16	; 0x04
    31f2:	8e 83       	std	Y+6, r24	; 0x06
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	a5 cf       	rjmp	.-182    	; 0x3144 <process_tapping+0x1f2>
        if (WITHIN_TAPPING_TERM(event)) {
    31fa:	08 17       	cp	r16, r24
    31fc:	19 07       	cpc	r17, r25
    31fe:	98 f1       	brcs	.+102    	; 0x3266 <process_tapping+0x314>
    3200:	f8 01       	movw	r30, r16
    3202:	e8 1b       	sub	r30, r24
    3204:	f9 0b       	sbc	r31, r25
    3206:	cf 01       	movw	r24, r30
    3208:	e1 2c       	mov	r14, r1
    320a:	88 3c       	cpi	r24, 0xC8	; 200
    320c:	91 05       	cpc	r25, r1
    320e:	08 f0       	brcs	.+2      	; 0x3212 <process_tapping+0x2c0>
    3210:	4d c0       	rjmp	.+154    	; 0x32ac <process_tapping+0x35a>
            if (event.pressed) {
    3212:	ef 2c       	mov	r14, r15
    3214:	ff 20       	and	r15, r15
    3216:	09 f4       	brne	.+2      	; 0x321a <process_tapping+0x2c8>
    3218:	5f c0       	rjmp	.+190    	; 0x32d8 <process_tapping+0x386>
                if (IS_TAPPING_KEY(event.key)) {
    321a:	35 13       	cpse	r19, r21
    321c:	32 c0       	rjmp	.+100    	; 0x3282 <process_tapping+0x330>
    321e:	24 13       	cpse	r18, r20
    3220:	30 c0       	rjmp	.+96     	; 0x3282 <process_tapping+0x330>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3222:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    3226:	80 fd       	sbrc	r24, 0
    3228:	23 c0       	rjmp	.+70     	; 0x3270 <process_tapping+0x31e>
    322a:	98 2f       	mov	r25, r24
    322c:	90 7f       	andi	r25, 0xF0	; 240
    322e:	01 f1       	breq	.+64     	; 0x3270 <process_tapping+0x31e>
                        keyp->tap = tapping_key.tap;
    3230:	d6 01       	movw	r26, r12
    3232:	15 96       	adiw	r26, 0x05	; 5
    3234:	8c 93       	st	X, r24
    3236:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3238:	90 3f       	cpi	r25, 0xF0	; 240
    323a:	39 f0       	breq	.+14     	; 0x324a <process_tapping+0x2f8>
    323c:	98 2f       	mov	r25, r24
    323e:	90 7f       	andi	r25, 0xF0	; 240
    3240:	90 5f       	subi	r25, 0xF0	; 240
    3242:	8f 70       	andi	r24, 0x0F	; 15
    3244:	89 2b       	or	r24, r25
    3246:	15 96       	adiw	r26, 0x05	; 5
    3248:	8c 93       	st	X, r24
                        process_action(keyp);
    324a:	c6 01       	movw	r24, r12
    324c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
                        tapping_key = *keyp;
    3250:	86 e0       	ldi	r24, 0x06	; 6
    3252:	f6 01       	movw	r30, r12
    3254:	a4 ea       	ldi	r26, 0xA4	; 164
    3256:	b3 e0       	ldi	r27, 0x03	; 3
    3258:	01 90       	ld	r0, Z+
    325a:	0d 92       	st	X+, r0
    325c:	8a 95       	dec	r24
    325e:	e1 f7       	brne	.-8      	; 0x3258 <process_tapping+0x306>
            debug_tapping_key();
    3260:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <debug_tapping_key>
            return false;
    3264:	dc ce       	rjmp	.-584    	; 0x301e <process_tapping+0xcc>
        if (WITHIN_TAPPING_TERM(event)) {
    3266:	80 95       	com	r24
    3268:	90 95       	com	r25
    326a:	80 0f       	add	r24, r16
    326c:	91 1f       	adc	r25, r17
    326e:	cc cf       	rjmp	.-104    	; 0x3208 <process_tapping+0x2b6>
                        tapping_key = *keyp;
    3270:	86 e0       	ldi	r24, 0x06	; 6
    3272:	f6 01       	movw	r30, r12
    3274:	a4 ea       	ldi	r26, 0xA4	; 164
    3276:	b3 e0       	ldi	r27, 0x03	; 3
    3278:	01 90       	ld	r0, Z+
    327a:	0d 92       	st	X+, r0
    327c:	8a 95       	dec	r24
    327e:	e1 f7       	brne	.-8      	; 0x3278 <process_tapping+0x326>
                        return true;
    3280:	ce ce       	rjmp	.-612    	; 0x301e <process_tapping+0xcc>
                } else if (is_tap_key(event)) {
    3282:	4d 87       	std	Y+13, r20	; 0x0d
    3284:	5e 87       	std	Y+14, r21	; 0x0e
    3286:	ff 86       	std	Y+15, r15	; 0x0f
    3288:	70 2f       	mov	r23, r16
    328a:	19 8b       	std	Y+17, r17	; 0x11
    328c:	08 8b       	std	Y+16, r16	; 0x10
    328e:	6f 2d       	mov	r22, r15
    3290:	89 89       	ldd	r24, Y+17	; 0x11
    3292:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_tap_key>
    3296:	81 11       	cpse	r24, r1
    3298:	57 cf       	rjmp	.-338    	; 0x3148 <process_tapping+0x1f6>
                    tapping_key.tap.interrupted = true;
    329a:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <tapping_key+0x5>
    329e:	81 60       	ori	r24, 0x01	; 1
    32a0:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <tapping_key+0x5>
                    process_action(keyp);
    32a4:	c6 01       	movw	r24, r12
    32a6:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
                    return true;
    32aa:	b9 ce       	rjmp	.-654    	; 0x301e <process_tapping+0xcc>
            debug_event(event); debug("\n");
    32ac:	70 2f       	mov	r23, r16
    32ae:	19 8b       	std	Y+17, r17	; 0x11
    32b0:	08 8b       	std	Y+16, r16	; 0x10
    32b2:	6f 2d       	mov	r22, r15
    32b4:	89 89       	ldd	r24, Y+17	; 0x11
    32b6:	0e 94 f7 16 	call	0x2dee	; 0x2dee <debug_event>
    32ba:	62 cf       	rjmp	.-316    	; 0x3180 <process_tapping+0x22e>
        if (event.pressed && is_tap_key(event)) {
    32bc:	ff 20       	and	r15, r15
    32be:	61 f0       	breq	.+24     	; 0x32d8 <process_tapping+0x386>
    32c0:	4d 87       	std	Y+13, r20	; 0x0d
    32c2:	5e 87       	std	Y+14, r21	; 0x0e
    32c4:	ff 86       	std	Y+15, r15	; 0x0f
    32c6:	70 2f       	mov	r23, r16
    32c8:	19 8b       	std	Y+17, r17	; 0x11
    32ca:	08 8b       	std	Y+16, r16	; 0x10
    32cc:	6f 2d       	mov	r22, r15
    32ce:	89 89       	ldd	r24, Y+17	; 0x11
    32d0:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <is_tap_key>
    32d4:	81 11       	cpse	r24, r1
    32d6:	38 cf       	rjmp	.-400    	; 0x3148 <process_tapping+0x1f6>
                    process_action(keyp);
    32d8:	c6 01       	movw	r24, r12
    32da:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <process_action>
    32de:	40 cf       	rjmp	.-384    	; 0x3160 <process_tapping+0x20e>
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	8f 25       	eor	r24, r15
    32e4:	bb ce       	rjmp	.-650    	; 0x305c <process_tapping+0x10a>

000032e6 <action_tapping_process>:
{
    32e6:	1f 93       	push	r17
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	2c 97       	sbiw	r28, 0x0c	; 12
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	4f 83       	std	Y+7, r20	; 0x07
    32fe:	58 87       	std	Y+8, r21	; 0x08
    3300:	69 87       	std	Y+9, r22	; 0x09
    3302:	7a 87       	std	Y+10, r23	; 0x0a
    3304:	8b 87       	std	Y+11, r24	; 0x0b
    3306:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3308:	ce 01       	movw	r24, r28
    330a:	07 96       	adiw	r24, 0x07	; 7
    330c:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <process_tapping>
    3310:	88 23       	and	r24, r24
    3312:	69 f0       	breq	.+26     	; 0x332e <action_tapping_process+0x48>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3314:	8a 85       	ldd	r24, Y+10	; 0x0a
    3316:	9b 85       	ldd	r25, Y+11	; 0x0b
    3318:	89 2b       	or	r24, r25
    331a:	39 f0       	breq	.+14     	; 0x332a <action_tapping_process+0x44>
    331c:	4f 81       	ldd	r20, Y+7	; 0x07
    331e:	58 85       	ldd	r21, Y+8	; 0x08
    3320:	84 2f       	mov	r24, r20
    3322:	85 23       	and	r24, r21
    3324:	8f 3f       	cpi	r24, 0xFF	; 255
    3326:	09 f0       	breq	.+2      	; 0x332a <action_tapping_process+0x44>
    3328:	71 c0       	rjmp	.+226    	; 0x340c <action_tapping_process+0x126>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    332a:	16 e0       	ldi	r17, 0x06	; 6
    332c:	5f c0       	rjmp	.+190    	; 0x33ec <action_tapping_process+0x106>
        if (!waiting_buffer_enq(record)) {
    332e:	86 e0       	ldi	r24, 0x06	; 6
    3330:	fe 01       	movw	r30, r28
    3332:	37 96       	adiw	r30, 0x07	; 7
    3334:	de 01       	movw	r26, r28
    3336:	11 96       	adiw	r26, 0x01	; 1
    3338:	01 90       	ld	r0, Z+
    333a:	0d 92       	st	X+, r0
    333c:	8a 95       	dec	r24
    333e:	e1 f7       	brne	.-8      	; 0x3338 <action_tapping_process+0x52>
    3340:	8a 85       	ldd	r24, Y+10	; 0x0a
    3342:	9b 85       	ldd	r25, Y+11	; 0x0b
    3344:	89 2b       	or	r24, r25
    3346:	89 f3       	breq	.-30     	; 0x332a <action_tapping_process+0x44>
    3348:	88 85       	ldd	r24, Y+8	; 0x08
    334a:	9f 81       	ldd	r25, Y+7	; 0x07
    334c:	89 23       	and	r24, r25
    334e:	8f 3f       	cpi	r24, 0xFF	; 255
    3350:	61 f3       	breq	.-40     	; 0x332a <action_tapping_process+0x44>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3352:	20 91 73 03 	lds	r18, 0x0373	; 0x800373 <waiting_buffer_head>
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	c9 01       	movw	r24, r18
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	87 70       	andi	r24, 0x07	; 7
    335e:	99 27       	eor	r25, r25
    3360:	40 91 72 03 	lds	r20, 0x0372	; 0x800372 <waiting_buffer_tail>
    3364:	48 17       	cp	r20, r24
    3366:	19 06       	cpc	r1, r25
    3368:	71 f4       	brne	.+28     	; 0x3386 <action_tapping_process+0xa0>
            clear_keyboard();
    336a:	0e 94 67 13 	call	0x26ce	; 0x26ce <clear_keyboard>
    waiting_buffer_head = 0;
    336e:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    3372:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    3376:	86 e0       	ldi	r24, 0x06	; 6
    3378:	e4 ea       	ldi	r30, 0xA4	; 164
    337a:	f3 e0       	ldi	r31, 0x03	; 3
    337c:	df 01       	movw	r26, r30
    337e:	1d 92       	st	X+, r1
    3380:	8a 95       	dec	r24
    3382:	e9 f7       	brne	.-6      	; 0x337e <action_tapping_process+0x98>
    3384:	d2 cf       	rjmp	.-92     	; 0x332a <action_tapping_process+0x44>
    waiting_buffer[waiting_buffer_head] = record;
    3386:	96 e0       	ldi	r25, 0x06	; 6
    3388:	92 9f       	mul	r25, r18
    338a:	d0 01       	movw	r26, r0
    338c:	93 9f       	mul	r25, r19
    338e:	b0 0d       	add	r27, r0
    3390:	11 24       	eor	r1, r1
    3392:	ac 58       	subi	r26, 0x8C	; 140
    3394:	bc 4f       	sbci	r27, 0xFC	; 252
    3396:	fe 01       	movw	r30, r28
    3398:	31 96       	adiw	r30, 0x01	; 1
    339a:	01 90       	ld	r0, Z+
    339c:	0d 92       	st	X+, r0
    339e:	9a 95       	dec	r25
    33a0:	e1 f7       	brne	.-8      	; 0x339a <action_tapping_process+0xb4>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    33a2:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    33a6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <debug_waiting_buffer>
    return true;
    33aa:	bf cf       	rjmp	.-130    	; 0x332a <action_tapping_process+0x44>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    33ac:	81 9f       	mul	r24, r17
    33ae:	c0 01       	movw	r24, r0
    33b0:	11 24       	eor	r1, r1
    33b2:	8c 58       	subi	r24, 0x8C	; 140
    33b4:	9c 4f       	sbci	r25, 0xFC	; 252
    33b6:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <process_tapping>
    33ba:	88 23       	and	r24, r24
    33bc:	e9 f0       	breq	.+58     	; 0x33f8 <action_tapping_process+0x112>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    33be:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <waiting_buffer_tail>
    33c2:	1e 9f       	mul	r17, r30
    33c4:	f0 01       	movw	r30, r0
    33c6:	11 24       	eor	r1, r1
    33c8:	ec 58       	subi	r30, 0x8C	; 140
    33ca:	fc 4f       	sbci	r31, 0xFC	; 252
    33cc:	40 81       	ld	r20, Z
    33ce:	51 81       	ldd	r21, Z+1	; 0x01
    33d0:	62 81       	ldd	r22, Z+2	; 0x02
    33d2:	73 81       	ldd	r23, Z+3	; 0x03
    33d4:	84 81       	ldd	r24, Z+4	; 0x04
    33d6:	95 81       	ldd	r25, Z+5	; 0x05
    33d8:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    33dc:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <waiting_buffer_tail>
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	01 96       	adiw	r24, 0x01	; 1
    33e4:	87 70       	andi	r24, 0x07	; 7
    33e6:	99 27       	eor	r25, r25
    33e8:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <waiting_buffer_tail>
    33ec:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <waiting_buffer_tail>
    33f0:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <waiting_buffer_head>
    33f4:	89 13       	cpse	r24, r25
    33f6:	da cf       	rjmp	.-76     	; 0x33ac <action_tapping_process+0xc6>
}
    33f8:	2c 96       	adiw	r28, 0x0c	; 12
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	08 95       	ret
            debug("processed: "); debug_record(record); debug("\n");
    340c:	69 85       	ldd	r22, Y+9	; 0x09
    340e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3410:	8b 85       	ldd	r24, Y+11	; 0x0b
    3412:	9c 85       	ldd	r25, Y+12	; 0x0c
    3414:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <debug_record>
    3418:	88 cf       	rjmp	.-240    	; 0x332a <action_tapping_process+0x44>

0000341a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    341a:	df 92       	push	r13
    341c:	ef 92       	push	r14
    341e:	ff 92       	push	r15
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    342a:	89 2b       	or	r24, r25
    342c:	b9 f0       	breq	.+46     	; 0x345c <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    342e:	e1 2c       	mov	r14, r1
    uint8_t interval = 0;
    3430:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3432:	dd 24       	eor	r13, r13
    3434:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    3436:	e8 01       	movw	r28, r16
    3438:	21 96       	adiw	r28, 0x01	; 1
    343a:	f8 01       	movw	r30, r16
    343c:	84 91       	lpm	r24, Z
    343e:	85 37       	cpi	r24, 0x75	; 117
    3440:	09 f4       	brne	.+2      	; 0x3444 <action_macro_play+0x2a>
    3442:	6a c0       	rjmp	.+212    	; 0x3518 <action_macro_play+0xfe>
    3444:	98 f4       	brcc	.+38     	; 0x346c <action_macro_play+0x52>
    3446:	84 37       	cpi	r24, 0x74	; 116
    3448:	08 f0       	brcs	.+2      	; 0x344c <action_macro_play+0x32>
    344a:	59 c0       	rjmp	.+178    	; 0x34fe <action_macro_play+0xe4>
    344c:	84 30       	cpi	r24, 0x04	; 4
    344e:	08 f0       	brcs	.+2      	; 0x3452 <action_macro_play+0x38>
    3450:	6f c0       	rjmp	.+222    	; 0x3530 <action_macro_play+0x116>
    3452:	81 30       	cpi	r24, 0x01	; 1
    3454:	11 f1       	breq	.+68     	; 0x349a <action_macro_play+0x80>
    3456:	82 30       	cpi	r24, 0x02	; 2
    3458:	09 f4       	brne	.+2      	; 0x345c <action_macro_play+0x42>
    345a:	3c c0       	rjmp	.+120    	; 0x34d4 <action_macro_play+0xba>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	1f 91       	pop	r17
    3462:	0f 91       	pop	r16
    3464:	ff 90       	pop	r15
    3466:	ef 90       	pop	r14
    3468:	df 90       	pop	r13
    346a:	08 95       	ret
        switch (MACRO_READ()) {
    346c:	88 37       	cpi	r24, 0x78	; 120
    346e:	09 f4       	brne	.+2      	; 0x3472 <action_macro_play+0x58>
    3470:	5c c0       	rjmp	.+184    	; 0x352a <action_macro_play+0x110>
    3472:	58 f4       	brcc	.+22     	; 0x348a <action_macro_play+0x70>
    3474:	86 37       	cpi	r24, 0x76	; 118
    3476:	09 f4       	brne	.+2      	; 0x347a <action_macro_play+0x60>
    3478:	54 c0       	rjmp	.+168    	; 0x3522 <action_macro_play+0x108>
    347a:	87 37       	cpi	r24, 0x77	; 119
    347c:	79 f7       	brne	.-34     	; 0x345c <action_macro_play+0x42>
                set_mods(mod_storage);
    347e:	8e 2d       	mov	r24, r14
    3480:	0e 94 aa 1c 	call	0x3954	; 0x3954 <set_mods>
                send_keyboard_report();
    3484:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
                break;
    3488:	1f c0       	rjmp	.+62     	; 0x34c8 <action_macro_play+0xae>
        switch (MACRO_READ()) {
    348a:	9c e7       	ldi	r25, 0x7C	; 124
    348c:	98 0f       	add	r25, r24
    348e:	90 37       	cpi	r25, 0x70	; 112
    3490:	28 f7       	brcc	.-54     	; 0x345c <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    3492:	8f 77       	andi	r24, 0x7F	; 127
    3494:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <unregister_code>
                break;
    3498:	17 c0       	rjmp	.+46     	; 0x34c8 <action_macro_play+0xae>
                MACRO_READ();
    349a:	0e 5f       	subi	r16, 0xFE	; 254
    349c:	1f 4f       	sbci	r17, 0xFF	; 255
    349e:	fe 01       	movw	r30, r28
    34a0:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    34a2:	90 e2       	ldi	r25, 0x20	; 32
    34a4:	98 0f       	add	r25, r24
    34a6:	98 30       	cpi	r25, 0x08	; 8
    34a8:	60 f4       	brcc	.+24     	; 0x34c2 <action_macro_play+0xa8>
                    add_weak_mods(MOD_BIT(macro));
    34aa:	87 70       	andi	r24, 0x07	; 7
    34ac:	fd 2d       	mov	r31, r13
    34ae:	01 c0       	rjmp	.+2      	; 0x34b2 <action_macro_play+0x98>
    34b0:	ff 0f       	add	r31, r31
    34b2:	8a 95       	dec	r24
    34b4:	ea f7       	brpl	.-6      	; 0x34b0 <action_macro_play+0x96>
    34b6:	8f 2f       	mov	r24, r31
    34b8:	0e 94 b0 1c 	call	0x3960	; 0x3960 <add_weak_mods>
                    send_keyboard_report();
    34bc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <send_keyboard_report>
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <action_macro_play+0xac>
                    register_code(macro);
    34c2:	0e 94 34 12 	call	0x2468	; 0x2468 <register_code>
                MACRO_READ();
    34c6:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    34c8:	8f 2d       	mov	r24, r15
    34ca:	81 50       	subi	r24, 0x01	; 1
    34cc:	08 f0       	brcs	.+2      	; 0x34d0 <action_macro_play+0xb6>
    34ce:	33 c0       	rjmp	.+102    	; 0x3536 <action_macro_play+0x11c>
    34d0:	8e 01       	movw	r16, r28
    34d2:	b1 cf       	rjmp	.-158    	; 0x3436 <action_macro_play+0x1c>
                MACRO_READ();
    34d4:	0e 5f       	subi	r16, 0xFE	; 254
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	fe 01       	movw	r30, r28
    34da:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    34dc:	90 e2       	ldi	r25, 0x20	; 32
    34de:	98 0f       	add	r25, r24
    34e0:	98 30       	cpi	r25, 0x08	; 8
    34e2:	50 f4       	brcc	.+20     	; 0x34f8 <action_macro_play+0xde>
                    del_weak_mods(MOD_BIT(macro));
    34e4:	87 70       	andi	r24, 0x07	; 7
    34e6:	fd 2d       	mov	r31, r13
    34e8:	01 c0       	rjmp	.+2      	; 0x34ec <action_macro_play+0xd2>
    34ea:	ff 0f       	add	r31, r31
    34ec:	8a 95       	dec	r24
    34ee:	ea f7       	brpl	.-6      	; 0x34ea <action_macro_play+0xd0>
    34f0:	8f 2f       	mov	r24, r31
    34f2:	0e 94 b6 1c 	call	0x396c	; 0x396c <del_weak_mods>
    34f6:	e2 cf       	rjmp	.-60     	; 0x34bc <action_macro_play+0xa2>
                    unregister_code(macro);
    34f8:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <unregister_code>
    34fc:	e4 cf       	rjmp	.-56     	; 0x34c6 <action_macro_play+0xac>
                MACRO_READ();
    34fe:	0e 5f       	subi	r16, 0xFE	; 254
    3500:	1f 4f       	sbci	r17, 0xFF	; 255
    3502:	fe 01       	movw	r30, r28
    3504:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3506:	c1 50       	subi	r28, 0x01	; 1
    3508:	f0 f2       	brcs	.-68     	; 0x34c6 <action_macro_play+0xac>
    350a:	8f e9       	ldi	r24, 0x9F	; 159
    350c:	9f e0       	ldi	r25, 0x0F	; 15
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <action_macro_play+0xf4>
    3512:	00 c0       	rjmp	.+0      	; 0x3514 <action_macro_play+0xfa>
    3514:	00 00       	nop
    3516:	f7 cf       	rjmp	.-18     	; 0x3506 <action_macro_play+0xec>
                interval = MACRO_READ();
    3518:	0e 5f       	subi	r16, 0xFE	; 254
    351a:	1f 4f       	sbci	r17, 0xFF	; 255
    351c:	fe 01       	movw	r30, r28
    351e:	f4 90       	lpm	r15, Z
                break;
    3520:	d2 cf       	rjmp	.-92     	; 0x34c6 <action_macro_play+0xac>
                mod_storage = get_mods();
    3522:	0e 94 9a 1c 	call	0x3934	; 0x3934 <get_mods>
    3526:	e8 2e       	mov	r14, r24
                break;
    3528:	cf cf       	rjmp	.-98     	; 0x34c8 <action_macro_play+0xae>
                clear_mods();
    352a:	0e 94 ad 1c 	call	0x395a	; 0x395a <clear_mods>
    352e:	aa cf       	rjmp	.-172    	; 0x3484 <action_macro_play+0x6a>
                register_code(macro);
    3530:	0e 94 34 12 	call	0x2468	; 0x2468 <register_code>
                break;
    3534:	c9 cf       	rjmp	.-110    	; 0x34c8 <action_macro_play+0xae>
    3536:	ef e9       	ldi	r30, 0x9F	; 159
    3538:	ff e0       	ldi	r31, 0x0F	; 15
    353a:	31 97       	sbiw	r30, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <action_macro_play+0x120>
    353e:	00 c0       	rjmp	.+0      	; 0x3540 <action_macro_play+0x126>
    3540:	00 00       	nop
    3542:	c3 cf       	rjmp	.-122    	; 0x34ca <action_macro_play+0xb0>

00003544 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3544:	60 93 2a 04 	sts	0x042A, r22	; 0x80042a <layer_state>
    3548:	70 93 2b 04 	sts	0x042B, r23	; 0x80042b <layer_state+0x1>
    354c:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <layer_state+0x2>
    3550:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <layer_state+0x3>
    hook_layer_change(layer_state);
    3554:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <hook_layer_change>

00003558 <default_layer_debug>:
}
    3558:	08 95       	ret

0000355a <default_layer_set>:
    default_layer_state = state;
    355a:	60 93 2e 04 	sts	0x042E, r22	; 0x80042e <default_layer_state>
    355e:	70 93 2f 04 	sts	0x042F, r23	; 0x80042f <default_layer_state+0x1>
    3562:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <default_layer_state+0x2>
    3566:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    356a:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <hook_default_layer_change>

0000356e <default_layer_or>:
{
    356e:	0f 93       	push	r16
    3570:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3572:	00 91 2e 04 	lds	r16, 0x042E	; 0x80042e <default_layer_state>
    3576:	10 91 2f 04 	lds	r17, 0x042F	; 0x80042f <default_layer_state+0x1>
    357a:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <default_layer_state+0x2>
    357e:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <default_layer_state+0x3>
    3582:	60 2b       	or	r22, r16
    3584:	71 2b       	or	r23, r17
    3586:	82 2b       	or	r24, r18
    3588:	93 2b       	or	r25, r19
    default_layer_state = state;
    358a:	60 93 2e 04 	sts	0x042E, r22	; 0x80042e <default_layer_state>
    358e:	70 93 2f 04 	sts	0x042F, r23	; 0x80042f <default_layer_state+0x1>
    3592:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <default_layer_state+0x2>
    3596:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <default_layer_state+0x3>
}
    359a:	1f 91       	pop	r17
    359c:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    359e:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <hook_default_layer_change>

000035a2 <default_layer_and>:
{
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    35a6:	00 91 2e 04 	lds	r16, 0x042E	; 0x80042e <default_layer_state>
    35aa:	10 91 2f 04 	lds	r17, 0x042F	; 0x80042f <default_layer_state+0x1>
    35ae:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <default_layer_state+0x2>
    35b2:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <default_layer_state+0x3>
    35b6:	60 23       	and	r22, r16
    35b8:	71 23       	and	r23, r17
    35ba:	82 23       	and	r24, r18
    35bc:	93 23       	and	r25, r19
    default_layer_state = state;
    35be:	60 93 2e 04 	sts	0x042E, r22	; 0x80042e <default_layer_state>
    35c2:	70 93 2f 04 	sts	0x042F, r23	; 0x80042f <default_layer_state+0x1>
    35c6:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <default_layer_state+0x2>
    35ca:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <default_layer_state+0x3>
}
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    35d2:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <hook_default_layer_change>

000035d6 <default_layer_xor>:
{
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    35da:	00 91 2e 04 	lds	r16, 0x042E	; 0x80042e <default_layer_state>
    35de:	10 91 2f 04 	lds	r17, 0x042F	; 0x80042f <default_layer_state+0x1>
    35e2:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <default_layer_state+0x2>
    35e6:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <default_layer_state+0x3>
    35ea:	60 27       	eor	r22, r16
    35ec:	71 27       	eor	r23, r17
    35ee:	82 27       	eor	r24, r18
    35f0:	93 27       	eor	r25, r19
    default_layer_state = state;
    35f2:	60 93 2e 04 	sts	0x042E, r22	; 0x80042e <default_layer_state>
    35f6:	70 93 2f 04 	sts	0x042F, r23	; 0x80042f <default_layer_state+0x1>
    35fa:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <default_layer_state+0x2>
    35fe:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <default_layer_state+0x3>
}
    3602:	1f 91       	pop	r17
    3604:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    3606:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <hook_default_layer_change>

0000360a <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	70 e0       	ldi	r23, 0x00	; 0
    360e:	cb 01       	movw	r24, r22
    3610:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

00003614 <layer_move>:
}

void layer_move(uint8_t layer)
{
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    3618:	41 e0       	ldi	r20, 0x01	; 1
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	8a 01       	movw	r16, r20
    3622:	9b 01       	movw	r18, r22
    3624:	04 c0       	rjmp	.+8      	; 0x362e <layer_move+0x1a>
    3626:	00 0f       	add	r16, r16
    3628:	11 1f       	adc	r17, r17
    362a:	22 1f       	adc	r18, r18
    362c:	33 1f       	adc	r19, r19
    362e:	8a 95       	dec	r24
    3630:	d2 f7       	brpl	.-12     	; 0x3626 <layer_move+0x12>
    3632:	c9 01       	movw	r24, r18
    3634:	b8 01       	movw	r22, r16
}
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    363a:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

0000363e <layer_on>:

void layer_on(uint8_t layer)
{
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3642:	41 e0       	ldi	r20, 0x01	; 1
    3644:	50 e0       	ldi	r21, 0x00	; 0
    3646:	60 e0       	ldi	r22, 0x00	; 0
    3648:	70 e0       	ldi	r23, 0x00	; 0
    364a:	04 c0       	rjmp	.+8      	; 0x3654 <layer_on+0x16>
    364c:	44 0f       	add	r20, r20
    364e:	55 1f       	adc	r21, r21
    3650:	66 1f       	adc	r22, r22
    3652:	77 1f       	adc	r23, r23
    3654:	8a 95       	dec	r24
    3656:	d2 f7       	brpl	.-12     	; 0x364c <layer_on+0xe>
    3658:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <layer_state>
    365c:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <layer_state+0x1>
    3660:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <layer_state+0x2>
    3664:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <layer_state+0x3>
    3668:	8a 01       	movw	r16, r20
    366a:	9b 01       	movw	r18, r22
    366c:	08 2b       	or	r16, r24
    366e:	19 2b       	or	r17, r25
    3670:	2a 2b       	or	r18, r26
    3672:	3b 2b       	or	r19, r27
    3674:	c9 01       	movw	r24, r18
    3676:	b8 01       	movw	r22, r16
}
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    367c:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

00003680 <layer_off>:

void layer_off(uint8_t layer)
{
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    3684:	41 e0       	ldi	r20, 0x01	; 1
    3686:	50 e0       	ldi	r21, 0x00	; 0
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	04 c0       	rjmp	.+8      	; 0x3696 <layer_off+0x16>
    368e:	44 0f       	add	r20, r20
    3690:	55 1f       	adc	r21, r21
    3692:	66 1f       	adc	r22, r22
    3694:	77 1f       	adc	r23, r23
    3696:	8a 95       	dec	r24
    3698:	d2 f7       	brpl	.-12     	; 0x368e <layer_off+0xe>
    369a:	cb 01       	movw	r24, r22
    369c:	ba 01       	movw	r22, r20
    369e:	60 95       	com	r22
    36a0:	70 95       	com	r23
    36a2:	80 95       	com	r24
    36a4:	90 95       	com	r25
    36a6:	00 91 2a 04 	lds	r16, 0x042A	; 0x80042a <layer_state>
    36aa:	10 91 2b 04 	lds	r17, 0x042B	; 0x80042b <layer_state+0x1>
    36ae:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <layer_state+0x2>
    36b2:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <layer_state+0x3>
    36b6:	60 23       	and	r22, r16
    36b8:	71 23       	and	r23, r17
    36ba:	82 23       	and	r24, r18
    36bc:	93 23       	and	r25, r19
}
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    36c2:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

000036c6 <layer_invert>:

void layer_invert(uint8_t layer)
{
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    36ca:	41 e0       	ldi	r20, 0x01	; 1
    36cc:	50 e0       	ldi	r21, 0x00	; 0
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	70 e0       	ldi	r23, 0x00	; 0
    36d2:	04 c0       	rjmp	.+8      	; 0x36dc <layer_invert+0x16>
    36d4:	44 0f       	add	r20, r20
    36d6:	55 1f       	adc	r21, r21
    36d8:	66 1f       	adc	r22, r22
    36da:	77 1f       	adc	r23, r23
    36dc:	8a 95       	dec	r24
    36de:	d2 f7       	brpl	.-12     	; 0x36d4 <layer_invert+0xe>
    36e0:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <layer_state>
    36e4:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <layer_state+0x1>
    36e8:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <layer_state+0x2>
    36ec:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <layer_state+0x3>
    36f0:	8a 01       	movw	r16, r20
    36f2:	9b 01       	movw	r18, r22
    36f4:	08 27       	eor	r16, r24
    36f6:	19 27       	eor	r17, r25
    36f8:	2a 27       	eor	r18, r26
    36fa:	3b 27       	eor	r19, r27
    36fc:	c9 01       	movw	r24, r18
    36fe:	b8 01       	movw	r22, r16
}
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    3704:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

00003708 <layer_or>:

void layer_or(uint32_t state)
{
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    370c:	00 91 2a 04 	lds	r16, 0x042A	; 0x80042a <layer_state>
    3710:	10 91 2b 04 	lds	r17, 0x042B	; 0x80042b <layer_state+0x1>
    3714:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <layer_state+0x2>
    3718:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <layer_state+0x3>
    371c:	60 2b       	or	r22, r16
    371e:	71 2b       	or	r23, r17
    3720:	82 2b       	or	r24, r18
    3722:	93 2b       	or	r25, r19
}
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    layer_state_set(layer_state | state);
    3728:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

0000372c <layer_and>:
void layer_and(uint32_t state)
{
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3730:	00 91 2a 04 	lds	r16, 0x042A	; 0x80042a <layer_state>
    3734:	10 91 2b 04 	lds	r17, 0x042B	; 0x80042b <layer_state+0x1>
    3738:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <layer_state+0x2>
    373c:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <layer_state+0x3>
    3740:	60 23       	and	r22, r16
    3742:	71 23       	and	r23, r17
    3744:	82 23       	and	r24, r18
    3746:	93 23       	and	r25, r19
}
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    layer_state_set(layer_state & state);
    374c:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

00003750 <layer_xor>:
void layer_xor(uint32_t state)
{
    3750:	0f 93       	push	r16
    3752:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3754:	00 91 2a 04 	lds	r16, 0x042A	; 0x80042a <layer_state>
    3758:	10 91 2b 04 	lds	r17, 0x042B	; 0x80042b <layer_state+0x1>
    375c:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <layer_state+0x2>
    3760:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <layer_state+0x3>
    3764:	60 27       	eor	r22, r16
    3766:	71 27       	eor	r23, r17
    3768:	82 27       	eor	r24, r18
    376a:	93 27       	eor	r25, r19
}
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    layer_state_set(layer_state ^ state);
    3770:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <layer_state_set>

00003774 <layer_debug>:
    3774:	08 95       	ret

00003776 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    3776:	4f 92       	push	r4
    3778:	5f 92       	push	r5
    377a:	6f 92       	push	r6
    377c:	7f 92       	push	r7
    377e:	9f 92       	push	r9
    3780:	af 92       	push	r10
    3782:	bf 92       	push	r11
    3784:	cf 92       	push	r12
    3786:	df 92       	push	r13
    3788:	ef 92       	push	r14
    378a:	ff 92       	push	r15
    378c:	0f 93       	push	r16
    378e:	1f 93       	push	r17
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	00 d0       	rcall	.+0      	; 0x3796 <layer_switch_get_action+0x20>
    3796:	00 d0       	rcall	.+0      	; 0x3798 <layer_switch_get_action+0x22>
    3798:	0f 92       	push	r0
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	49 83       	std	Y+1, r20	; 0x01
    37a0:	5a 83       	std	Y+2, r21	; 0x02
    37a2:	6b 83       	std	Y+3, r22	; 0x03
    37a4:	7c 83       	std	Y+4, r23	; 0x04
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	8c 81       	ldd	r24, Y+4	; 0x04
    37aa:	9d 81       	ldd	r25, Y+5	; 0x05
    37ac:	89 2b       	or	r24, r25
    37ae:	29 f0       	breq	.+10     	; 0x37ba <layer_switch_get_action+0x44>
    37b0:	7a 01       	movw	r14, r20
    37b2:	8f 2d       	mov	r24, r15
    37b4:	84 23       	and	r24, r20
    37b6:	8f 3f       	cpi	r24, 0xFF	; 255
    37b8:	51 f5       	brne	.+84     	; 0x380e <layer_switch_get_action+0x98>
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
}
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	ff 90       	pop	r15
    37d2:	ef 90       	pop	r14
    37d4:	df 90       	pop	r13
    37d6:	cf 90       	pop	r12
    37d8:	bf 90       	pop	r11
    37da:	af 90       	pop	r10
    37dc:	9f 90       	pop	r9
    37de:	7f 90       	pop	r7
    37e0:	6f 90       	pop	r6
    37e2:	5f 90       	pop	r5
    37e4:	4f 90       	pop	r4
    37e6:	08 95       	ret
            action = action_for_key(i, key);
    37e8:	b7 01       	movw	r22, r14
    37ea:	8a 2d       	mov	r24, r10
    37ec:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	c1 f1       	breq	.+112    	; 0x3864 <layer_switch_get_action+0xee>
    37f4:	3c c0       	rjmp	.+120    	; 0x386e <layer_switch_get_action+0xf8>
        layer = layer_pressed[event.key.row][event.key.col];
    37f6:	f8 01       	movw	r30, r16
    37f8:	83 e0       	ldi	r24, 0x03	; 3
    37fa:	ee 0f       	add	r30, r30
    37fc:	ff 1f       	adc	r31, r31
    37fe:	8a 95       	dec	r24
    3800:	e1 f7       	brne	.-8      	; 0x37fa <layer_switch_get_action+0x84>
    3802:	e6 55       	subi	r30, 0x56	; 86
    3804:	fc 4f       	sbci	r31, 0xFC	; 252
    3806:	ec 0d       	add	r30, r12
    3808:	fd 1d       	adc	r31, r13
    380a:	90 80       	ld	r9, Z
    380c:	3b c0       	rjmp	.+118    	; 0x3884 <layer_switch_get_action+0x10e>
    if (event.pressed) {
    380e:	0f 2d       	mov	r16, r15
    3810:	10 e0       	ldi	r17, 0x00	; 0
    3812:	c4 2e       	mov	r12, r20
    3814:	d1 2c       	mov	r13, r1
    3816:	8b 81       	ldd	r24, Y+3	; 0x03
    3818:	88 23       	and	r24, r24
    381a:	69 f3       	breq	.-38     	; 0x37f6 <layer_switch_get_action+0x80>
    uint32_t layers = layer_state | default_layer_state;
    381c:	40 90 2a 04 	lds	r4, 0x042A	; 0x80042a <layer_state>
    3820:	50 90 2b 04 	lds	r5, 0x042B	; 0x80042b <layer_state+0x1>
    3824:	60 90 2c 04 	lds	r6, 0x042C	; 0x80042c <layer_state+0x2>
    3828:	70 90 2d 04 	lds	r7, 0x042D	; 0x80042d <layer_state+0x3>
    382c:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <default_layer_state>
    3830:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <default_layer_state+0x1>
    3834:	a0 91 30 04 	lds	r26, 0x0430	; 0x800430 <default_layer_state+0x2>
    3838:	b0 91 31 04 	lds	r27, 0x0431	; 0x800431 <default_layer_state+0x3>
    383c:	48 2a       	or	r4, r24
    383e:	59 2a       	or	r5, r25
    3840:	6a 2a       	or	r6, r26
    3842:	7b 2a       	or	r7, r27
    3844:	2f e1       	ldi	r18, 0x1F	; 31
    3846:	a2 2e       	mov	r10, r18
    3848:	b1 2c       	mov	r11, r1
        if (layers & (1UL<<i)) {
    384a:	9a 2c       	mov	r9, r10
    384c:	d3 01       	movw	r26, r6
    384e:	c2 01       	movw	r24, r4
    3850:	0a 2c       	mov	r0, r10
    3852:	04 c0       	rjmp	.+8      	; 0x385c <layer_switch_get_action+0xe6>
    3854:	b6 95       	lsr	r27
    3856:	a7 95       	ror	r26
    3858:	97 95       	ror	r25
    385a:	87 95       	ror	r24
    385c:	0a 94       	dec	r0
    385e:	d2 f7       	brpl	.-12     	; 0x3854 <layer_switch_get_action+0xde>
    3860:	80 fd       	sbrc	r24, 0
    3862:	c2 cf       	rjmp	.-124    	; 0x37e8 <layer_switch_get_action+0x72>
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	a8 1a       	sub	r10, r24
    3868:	b1 08       	sbc	r11, r1
    386a:	78 f7       	brcc	.-34     	; 0x384a <layer_switch_get_action+0xd4>
    return 0;
    386c:	91 2c       	mov	r9, r1
        layer_pressed[event.key.row][event.key.col] = layer;
    386e:	f8 01       	movw	r30, r16
    3870:	93 e0       	ldi	r25, 0x03	; 3
    3872:	ee 0f       	add	r30, r30
    3874:	ff 1f       	adc	r31, r31
    3876:	9a 95       	dec	r25
    3878:	e1 f7       	brne	.-8      	; 0x3872 <layer_switch_get_action+0xfc>
    387a:	e6 55       	subi	r30, 0x56	; 86
    387c:	fc 4f       	sbci	r31, 0xFC	; 252
    387e:	ec 0d       	add	r30, r12
    3880:	fd 1d       	adc	r31, r13
    3882:	90 82       	st	Z, r9
    return action_for_key(layer, event.key);
    3884:	e9 82       	std	Y+1, r14	; 0x01
    3886:	fa 82       	std	Y+2, r15	; 0x02
    3888:	69 81       	ldd	r22, Y+1	; 0x01
    388a:	7a 81       	ldd	r23, Y+2	; 0x02
    388c:	89 2d       	mov	r24, r9
}
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	ff 90       	pop	r15
    38a2:	ef 90       	pop	r14
    38a4:	df 90       	pop	r13
    38a6:	cf 90       	pop	r12
    38a8:	bf 90       	pop	r11
    38aa:	af 90       	pop	r10
    38ac:	9f 90       	pop	r9
    38ae:	7f 90       	pop	r7
    38b0:	6f 90       	pop	r6
    38b2:	5f 90       	pop	r5
    38b4:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    38b6:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <action_for_key>

000038ba <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    38ba:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <keyboard_report>
    38be:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <keyboard_report+0x1>
    38c2:	f9 01       	movw	r30, r18
    38c4:	32 96       	adiw	r30, 0x02	; 2
    int8_t empty = -1;
    38c6:	9f ef       	ldi	r25, 0xFF	; 255
    int8_t i = 0;
    38c8:	40 e0       	ldi	r20, 0x00	; 0
        if (keyboard_report->keys[i] == code) {
    38ca:	51 91       	ld	r21, Z+
    38cc:	85 17       	cp	r24, r21
    38ce:	51 f0       	breq	.+20     	; 0x38e4 <add_key+0x2a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    38d0:	9f 3f       	cpi	r25, 0xFF	; 255
    38d2:	19 f4       	brne	.+6      	; 0x38da <add_key+0x20>
    38d4:	51 11       	cpse	r21, r1
    38d6:	01 c0       	rjmp	.+2      	; 0x38da <add_key+0x20>
    38d8:	94 2f       	mov	r25, r20
    38da:	4f 5f       	subi	r20, 0xFF	; 255
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    38dc:	46 30       	cpi	r20, 0x06	; 6
    38de:	a9 f7       	brne	.-22     	; 0x38ca <add_key+0x10>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    38e0:	9f 3f       	cpi	r25, 0xFF	; 255
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <add_key+0x2c>
}
    38e4:	08 95       	ret
            keyboard_report->keys[empty] = code;
    38e6:	29 0f       	add	r18, r25
    38e8:	31 1d       	adc	r19, r1
    38ea:	97 fd       	sbrc	r25, 7
    38ec:	3a 95       	dec	r19
    38ee:	f9 01       	movw	r30, r18
    38f0:	82 83       	std	Z+2, r24	; 0x02
}
    38f2:	08 95       	ret

000038f4 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    38f4:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <keyboard_report>
    38f8:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <keyboard_report+0x1>
    38fc:	f9 01       	movw	r30, r18
    38fe:	32 96       	adiw	r30, 0x02	; 2
    3900:	28 5f       	subi	r18, 0xF8	; 248
    3902:	3f 4f       	sbci	r19, 0xFF	; 255
    3904:	91 91       	ld	r25, Z+
    3906:	89 13       	cpse	r24, r25
    3908:	03 c0       	rjmp	.+6      	; 0x3910 <del_key+0x1c>
            keyboard_report->keys[i] = 0;
    390a:	df 01       	movw	r26, r30
    390c:	11 97       	sbiw	r26, 0x01	; 1
    390e:	1c 92       	st	X, r1
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3910:	e2 17       	cp	r30, r18
    3912:	f3 07       	cpc	r31, r19
    3914:	b9 f7       	brne	.-18     	; 0x3904 <del_key+0x10>
}
    3916:	08 95       	ret

00003918 <clear_keys>:
{
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
        keyboard_report->raw[i] = 0;
    391c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    3920:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    3924:	e8 0f       	add	r30, r24
    3926:	f9 1f       	adc	r31, r25
    3928:	10 82       	st	Z, r1
    392a:	01 96       	adiw	r24, 0x01	; 1
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    392c:	88 30       	cpi	r24, 0x08	; 8
    392e:	91 05       	cpc	r25, r1
    3930:	a9 f7       	brne	.-22     	; 0x391c <clear_keys+0x4>
}
    3932:	08 95       	ret

00003934 <get_mods>:
uint8_t get_mods(void) { return real_mods; }
    3934:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <real_mods>
    3938:	08 95       	ret

0000393a <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    393a:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <real_mods>
    393e:	89 2b       	or	r24, r25
    3940:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <real_mods>
    3944:	08 95       	ret

00003946 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3946:	80 95       	com	r24
    3948:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <real_mods>
    394c:	98 23       	and	r25, r24
    394e:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <real_mods>
    3952:	08 95       	ret

00003954 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3954:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <real_mods>
    3958:	08 95       	ret

0000395a <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    395a:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <real_mods>
    395e:	08 95       	ret

00003960 <add_weak_mods>:
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3960:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <weak_mods>
    3964:	89 2b       	or	r24, r25
    3966:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <weak_mods>
    396a:	08 95       	ret

0000396c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    396c:	80 95       	com	r24
    396e:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <weak_mods>
    3972:	98 23       	and	r25, r24
    3974:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <weak_mods>
    3978:	08 95       	ret

0000397a <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    397a:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <weak_mods>
    397e:	08 95       	ret

00003980 <set_oneshot_mods>:
    oneshot_mods = mods;
    3980:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <oneshot_mods>
}
    3984:	08 95       	ret

00003986 <clear_oneshot_mods>:
    oneshot_mods = 0;
    3986:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <oneshot_mods>
}
    398a:	08 95       	ret

0000398c <has_anykey>:
        if (keyboard_report->raw[i])
    398c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <keyboard_report>
    3990:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <keyboard_report+0x1>
    3994:	f9 01       	movw	r30, r18
    3996:	31 96       	adiw	r30, 0x01	; 1
    3998:	28 5f       	subi	r18, 0xF8	; 248
    399a:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    399c:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    399e:	91 91       	ld	r25, Z+
    39a0:	91 11       	cpse	r25, r1
            cnt++;
    39a2:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    39a4:	e2 17       	cp	r30, r18
    39a6:	f3 07       	cpc	r31, r19
    39a8:	d1 f7       	brne	.-12     	; 0x399e <has_anykey+0x12>
}
    39aa:	08 95       	ret

000039ac <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    39ac:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    39b0:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    39b4:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <real_mods>
    39b8:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    39ba:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    39be:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    39c2:	80 81       	ld	r24, Z
    39c4:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <weak_mods>
    39c8:	89 2b       	or	r24, r25
    39ca:	80 83       	st	Z, r24
    if (oneshot_mods) {
    39cc:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <oneshot_mods>
    39d0:	99 23       	and	r25, r25
    39d2:	61 f0       	breq	.+24     	; 0x39ec <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    39d4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    39d8:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    39dc:	80 81       	ld	r24, Z
    39de:	89 2b       	or	r24, r25
    39e0:	80 83       	st	Z, r24
        if (has_anykey()) {
    39e2:	0e 94 c6 1c 	call	0x398c	; 0x398c <has_anykey>
    39e6:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    39e8:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <oneshot_mods>
    host_keyboard_send(keyboard_report);
    39ec:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <keyboard_report>
    39f0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <keyboard_report+0x1>
    39f4:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <host_keyboard_send>

000039f8 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    39f8:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__bss_start+0x1>
    39fc:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__bss_start>
}
    3a00:	08 95       	ret

00003a02 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3a02:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	9c 01       	movw	r18, r24
    3a08:	22 0f       	add	r18, r18
    3a0a:	33 1f       	adc	r19, r19
    3a0c:	22 0f       	add	r18, r18
    3a0e:	33 1f       	adc	r19, r19
    3a10:	2c 7c       	andi	r18, 0xCC	; 204
    3a12:	95 95       	asr	r25
    3a14:	87 95       	ror	r24
    3a16:	95 95       	asr	r25
    3a18:	87 95       	ror	r24
    3a1a:	83 73       	andi	r24, 0x33	; 51
    3a1c:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	c9 01       	movw	r24, r18
    3a22:	88 0f       	add	r24, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	8a 7a       	andi	r24, 0xAA	; 170
    3a28:	35 95       	asr	r19
    3a2a:	27 95       	ror	r18
    3a2c:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    3a2e:	82 2b       	or	r24, r18
    3a30:	08 95       	ret

00003a32 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3a32:	08 95       	ret

00003a34 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3a34:	cf 93       	push	r28
    3a36:	df 93       	push	r29
    3a38:	00 d0       	rcall	.+0      	; 0x3a3a <hook_matrix_change+0x6>
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <hook_matrix_change+0x8>
    3a3c:	0f 92       	push	r0
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	0f 90       	pop	r0
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
    3a4c:	df 91       	pop	r29
    3a4e:	cf 91       	pop	r28
    3a50:	08 95       	ret

00003a52 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    3a52:	08 95       	ret

00003a54 <hook_layer_change>:
    3a54:	08 95       	ret

00003a56 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3a56:	0c 94 ae 11 	jmp	0x235c	; 0x235c <keyboard_set_leds>

00003a5a <hook_process_action>:
void hook_bootmagic(void) {}

__attribute__((weak))
bool hook_process_action(keyrecord_t *record) {
    return false;
}
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	08 95       	ret

00003a5e <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3a5e:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <USB_DeviceState>
    3a62:	84 30       	cpi	r24, 0x04	; 4
    3a64:	21 f1       	breq	.+72     	; 0x3aae <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3a66:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3a6a:	88 e1       	ldi	r24, 0x18	; 24
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	20 e4       	ldi	r18, 0x40	; 64
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	a8 95       	wdr
    3a76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a7a:	0f be       	out	0x3f, r0	; 63
    3a7c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3a80:	83 b7       	in	r24, 0x33	; 51
    3a82:	81 7f       	andi	r24, 0xF1	; 241
    3a84:	84 60       	ori	r24, 0x04	; 4
    3a86:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a88:	83 b7       	in	r24, 0x33	; 51
    3a8a:	81 60       	ori	r24, 0x01	; 1
    3a8c:	83 bf       	out	0x33, r24	; 51
    sei();
    3a8e:	78 94       	sei
    sleep_cpu();
    3a90:	88 95       	sleep
    sleep_disable();
    3a92:	83 b7       	in	r24, 0x33	; 51
    3a94:	8e 7f       	andi	r24, 0xFE	; 254
    3a96:	83 bf       	out	0x33, r24	; 51
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	a8 95       	wdr
    3a9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3aa2:	88 61       	ori	r24, 0x18	; 24
    3aa4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3aa8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3aac:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    3aae:	08 95       	ret

00003ab0 <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    3ab0:	cf 93       	push	r28
    matrix_power_up();
    3ab2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <matrix_power_up>
    matrix_scan();
    3ab6:	0e 94 ee 06 	call	0xddc	; 0xddc <matrix_scan>
    matrix_power_down();
    3aba:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3abe:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3ac0:	8c 2f       	mov	r24, r28
    3ac2:	0e 94 99 07 	call	0xf32	; 0xf32 <matrix_get_row>
    3ac6:	81 11       	cpse	r24, r1
    3ac8:	05 c0       	rjmp	.+10     	; 0x3ad4 <suspend_wakeup_condition+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3aca:	cf 5f       	subi	r28, 0xFF	; 255
    3acc:	c0 31       	cpi	r28, 0x10	; 16
    3ace:	c1 f7       	brne	.-16     	; 0x3ac0 <suspend_wakeup_condition+0x10>
    }
    return false;
}
    3ad0:	cf 91       	pop	r28
    3ad2:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	fc cf       	rjmp	.-8      	; 0x3ad0 <suspend_wakeup_condition+0x20>

00003ad8 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3ad8:	0e 94 b0 11 	call	0x2360	; 0x2360 <matrix_clear>
    clear_keyboard();
    3adc:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <clear_keyboard>

00003ae0 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3ae0:	1f 92       	push	r1
    3ae2:	1f b6       	in	r1, 0x3f	; 63
    3ae4:	1f 92       	push	r1
    3ae6:	11 24       	eor	r1, r1
    3ae8:	8f 93       	push	r24
    3aea:	9f 93       	push	r25
    3aec:	af 93       	push	r26
    3aee:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3af0:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <wdt_timeout>
    3af4:	81 11       	cpse	r24, r1
    3af6:	13 c0       	rjmp	.+38     	; 0x3b1e <__vector_12+0x3e>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3af8:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <timer_count>
    3afc:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <timer_count+0x1>
    3b00:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <timer_count+0x2>
    3b04:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <timer_count+0x3>
    3b08:	41 96       	adiw	r24, 0x11	; 17
    3b0a:	a1 1d       	adc	r26, r1
    3b0c:	b1 1d       	adc	r27, r1
    3b0e:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <timer_count>
    3b12:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <timer_count+0x1>
    3b16:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <timer_count+0x2>
    3b1a:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3b1e:	bf 91       	pop	r27
    3b20:	af 91       	pop	r26
    3b22:	9f 91       	pop	r25
    3b24:	8f 91       	pop	r24
    3b26:	1f 90       	pop	r1
    3b28:	1f be       	out	0x3f, r1	; 63
    3b2a:	1f 90       	pop	r1
    3b2c:	18 95       	reti

00003b2e <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3b2e:	82 e0       	ldi	r24, 0x02	; 2
    3b30:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3b32:	93 e0       	ldi	r25, 0x03	; 3
    3b34:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3b36:	9a ef       	ldi	r25, 0xFA	; 250
    3b38:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    3b3a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
#else
    TIMSK = (1<<OCIE0A);
#endif
}
    3b3e:	08 95       	ret

00003b40 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3b40:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b42:	f8 94       	cli
    t = timer_count;
    3b44:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <timer_count>
    3b48:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <timer_count+0x1>
    3b4c:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <timer_count+0x2>
    3b50:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <timer_count+0x3>
    SREG = sreg;
    3b54:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3b56:	08 95       	ret

00003b58 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3b58:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b5a:	f8 94       	cli
    t = timer_count;
    3b5c:	60 91 3f 04 	lds	r22, 0x043F	; 0x80043f <timer_count>
    3b60:	70 91 40 04 	lds	r23, 0x0440	; 0x800440 <timer_count+0x1>
    3b64:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <timer_count+0x2>
    3b68:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <timer_count+0x3>
    SREG = sreg;
    3b6c:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3b6e:	08 95       	ret

00003b70 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3b7c:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b7e:	f8 94       	cli
    t = timer_count;
    3b80:	40 91 3f 04 	lds	r20, 0x043F	; 0x80043f <timer_count>
    3b84:	50 91 40 04 	lds	r21, 0x0440	; 0x800440 <timer_count+0x1>
    3b88:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <timer_count+0x2>
    3b8c:	70 91 42 04 	lds	r23, 0x0442	; 0x800442 <timer_count+0x3>
    SREG = sreg;
    3b90:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b92:	6a 01       	movw	r12, r20
    3b94:	7b 01       	movw	r14, r22
    3b96:	ee 24       	eor	r14, r14
    3b98:	ff 24       	eor	r15, r15
    3b9a:	8c 01       	movw	r16, r24
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	c0 16       	cp	r12, r16
    3ba2:	d1 06       	cpc	r13, r17
    3ba4:	e2 06       	cpc	r14, r18
    3ba6:	f3 06       	cpc	r15, r19
    3ba8:	50 f0       	brcs	.+20     	; 0x3bbe <timer_elapsed+0x4e>
    3baa:	48 1b       	sub	r20, r24
    3bac:	59 0b       	sbc	r21, r25
}
    3bae:	ca 01       	movw	r24, r20
    3bb0:	1f 91       	pop	r17
    3bb2:	0f 91       	pop	r16
    3bb4:	ff 90       	pop	r15
    3bb6:	ef 90       	pop	r14
    3bb8:	df 90       	pop	r13
    3bba:	cf 90       	pop	r12
    3bbc:	08 95       	ret
    return TIMER_DIFF_16((t & 0xFFFF), last);
    3bbe:	41 50       	subi	r20, 0x01	; 1
    3bc0:	51 09       	sbc	r21, r1
    3bc2:	f3 cf       	rjmp	.-26     	; 0x3baa <timer_elapsed+0x3a>

00003bc4 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3bc4:	1f 92       	push	r1
    3bc6:	1f b6       	in	r1, 0x3f	; 63
    3bc8:	1f 92       	push	r1
    3bca:	11 24       	eor	r1, r1
    3bcc:	8f 93       	push	r24
    3bce:	9f 93       	push	r25
    3bd0:	af 93       	push	r26
    3bd2:	bf 93       	push	r27
    timer_count++;
    3bd4:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <timer_count>
    3bd8:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <timer_count+0x1>
    3bdc:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <timer_count+0x2>
    3be0:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <timer_count+0x3>
    3be4:	01 96       	adiw	r24, 0x01	; 1
    3be6:	a1 1d       	adc	r26, r1
    3be8:	b1 1d       	adc	r27, r1
    3bea:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <timer_count>
    3bee:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <timer_count+0x1>
    3bf2:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <timer_count+0x2>
    3bf6:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <timer_count+0x3>
}
    3bfa:	bf 91       	pop	r27
    3bfc:	af 91       	pop	r26
    3bfe:	9f 91       	pop	r25
    3c00:	8f 91       	pop	r24
    3c02:	1f 90       	pop	r1
    3c04:	1f be       	out	0x3f, r1	; 63
    3c06:	1f 90       	pop	r1
    3c08:	18 95       	reti

00003c0a <bootloader_jump>:
    USB_Disable();
    3c0a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <USB_Disable>
    cli();
    3c0e:	f8 94       	cli
    *(volatile uint16_t *)0x0800 = 0x7777;
    3c10:	87 e7       	ldi	r24, 0x77	; 119
    3c12:	97 e7       	ldi	r25, 0x77	; 119
    3c14:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x3a2>
    3c18:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x3a1>
    reset_key = BOOTLOADER_RESET_KEY;
    3c1c:	87 e0       	ldi	r24, 0x07	; 7
    3c1e:	90 eb       	ldi	r25, 0xB0	; 176
    3c20:	dc 01       	movw	r26, r24
    3c22:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <reset_key>
    3c26:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <reset_key+0x1>
    3c2a:	a0 93 5d 04 	sts	0x045D, r26	; 0x80045d <reset_key+0x2>
    3c2e:	b0 93 5e 04 	sts	0x045E, r27	; 0x80045e <reset_key+0x3>
		__asm__ __volatile__ (
    3c32:	88 e1       	ldi	r24, 0x18	; 24
    3c34:	9c e0       	ldi	r25, 0x0C	; 12
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	a8 95       	wdr
    3c3c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    for (;;);
    3c46:	ff cf       	rjmp	.-2      	; 0x3c46 <bootloader_jump+0x3c>

00003c48 <unimap_translate>:
// translates raw matrix to universal map
keypos_t unimap_translate(keypos_t key)
{
    uint8_t unimap_pos = 
#if defined(__AVR__)
        pgm_read_byte(&unimap_trans[key.row][key.col]);
    3c48:	28 e0       	ldi	r18, 0x08	; 8
    3c4a:	92 9f       	mul	r25, r18
    3c4c:	f0 01       	movw	r30, r0
    3c4e:	11 24       	eor	r1, r1
    3c50:	e8 0f       	add	r30, r24
    3c52:	f1 1d       	adc	r31, r1
    3c54:	e4 55       	subi	r30, 0x54	; 84
    3c56:	fe 4f       	sbci	r31, 0xFE	; 254
    3c58:	84 91       	lpm	r24, Z
#else
        unimap_trans[key.row][key.col];
#endif
    return (keypos_t) {
        .row = ((unimap_pos >> 4 ) & 0x07),
    3c5a:	98 2f       	mov	r25, r24
    3c5c:	92 95       	swap	r25
    3c5e:	9f 70       	andi	r25, 0x0F	; 15
        .col = (unimap_pos & 0x0F)
    };
}
    3c60:	8f 70       	andi	r24, 0x0F	; 15
    3c62:	97 70       	andi	r25, 0x07	; 7
    3c64:	08 95       	ret

00003c66 <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    3c66:	cf 93       	push	r28
    3c68:	c8 2f       	mov	r28, r24
    3c6a:	cb 01       	movw	r24, r22
    keypos_t uni = unimap_translate(key);
    3c6c:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <unimap_translate>
    if ((uni.row << 4 | uni.col) > 0x7F) {
    3c70:	40 e1       	ldi	r20, 0x10	; 16
    3c72:	94 9f       	mul	r25, r20
    3c74:	90 01       	movw	r18, r0
    3c76:	11 24       	eor	r1, r1
    3c78:	28 2b       	or	r18, r24
    3c7a:	20 38       	cpi	r18, 0x80	; 128
    3c7c:	31 05       	cpc	r19, r1
    3c7e:	24 f0       	brlt	.+8      	; 0x3c88 <action_for_key+0x22>
        return (action_t)ACTION_NO;
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	90 e0       	ldi	r25, 0x00	; 0
#if defined(__AVR__)
    return (action_t)pgm_read_word(&actionmaps[(layer)][(uni.row & 0x07)][(uni.col & 0x0F)]);
#else
    return actionmaps[(layer)][(uni.row & 0x07)][(uni.col & 0x0F)];
#endif
}
    3c84:	cf 91       	pop	r28
    3c86:	08 95       	ret
    return (action_t)pgm_read_word(&actionmaps[(layer)][(uni.row & 0x07)][(uni.col & 0x0F)]);
    3c88:	48 e0       	ldi	r20, 0x08	; 8
    3c8a:	c4 9f       	mul	r28, r20
    3c8c:	90 01       	movw	r18, r0
    3c8e:	11 24       	eor	r1, r1
    3c90:	97 70       	andi	r25, 0x07	; 7
    3c92:	29 0f       	add	r18, r25
    3c94:	31 1d       	adc	r19, r1
    3c96:	94 e0       	ldi	r25, 0x04	; 4
    3c98:	22 0f       	add	r18, r18
    3c9a:	33 1f       	adc	r19, r19
    3c9c:	9a 95       	dec	r25
    3c9e:	e1 f7       	brne	.-8      	; 0x3c98 <action_for_key+0x32>
    3ca0:	e8 2f       	mov	r30, r24
    3ca2:	ef 70       	andi	r30, 0x0F	; 15
    3ca4:	e2 0f       	add	r30, r18
    3ca6:	f3 2f       	mov	r31, r19
    3ca8:	f1 1d       	adc	r31, r1
    3caa:	ee 0f       	add	r30, r30
    3cac:	ff 1f       	adc	r31, r31
    3cae:	e4 55       	subi	r30, 0x54	; 84
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	85 91       	lpm	r24, Z+
    3cb4:	94 91       	lpm	r25, Z
    3cb6:	e6 cf       	rjmp	.-52     	; 0x3c84 <action_for_key+0x1e>

00003cb8 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	08 95       	ret

00003cbe <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
}
    3cbe:	08 95       	ret

00003cc0 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3cc0:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3cc4:	80 ff       	sbrs	r24, 0
    3cc6:	12 c0       	rjmp	.+36     	; 0x3cec <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    3cc8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <mk_max_speed>
    3ccc:	85 e0       	ldi	r24, 0x05	; 5
    3cce:	68 9f       	mul	r22, r24
    3cd0:	b0 01       	movw	r22, r0
    3cd2:	11 24       	eor	r1, r1
    3cd4:	75 95       	asr	r23
    3cd6:	67 95       	ror	r22
    3cd8:	75 95       	asr	r23
    3cda:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3cdc:	60 38       	cpi	r22, 0x80	; 128
    3cde:	71 05       	cpc	r23, r1
    3ce0:	a8 f5       	brcc	.+106    	; 0x3d4c <move_unit+0x8c>
    3ce2:	61 15       	cp	r22, r1
    3ce4:	71 05       	cpc	r23, r1
    3ce6:	a1 f1       	breq	.+104    	; 0x3d50 <move_unit+0x90>
    3ce8:	86 2f       	mov	r24, r22
    3cea:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    3cec:	81 ff       	sbrs	r24, 1
    3cee:	09 c0       	rjmp	.+18     	; 0x3d02 <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    3cf0:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <mk_max_speed>
    3cf4:	85 e0       	ldi	r24, 0x05	; 5
    3cf6:	68 9f       	mul	r22, r24
    3cf8:	b0 01       	movw	r22, r0
    3cfa:	11 24       	eor	r1, r1
    3cfc:	75 95       	asr	r23
    3cfe:	67 95       	ror	r22
    3d00:	ed cf       	rjmp	.-38     	; 0x3cdc <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3d02:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <mk_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    3d06:	82 fd       	sbrc	r24, 2
    3d08:	0a c0       	rjmp	.+20     	; 0x3d1e <move_unit+0x5e>
    } else if (mousekey_repeat == 0) {
    3d0a:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <mousekey_repeat>
    3d0e:	88 23       	and	r24, r24
    3d10:	d1 f0       	breq	.+52     	; 0x3d46 <move_unit+0x86>
    } else if (mousekey_repeat >= mk_time_to_max) {
    3d12:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mk_time_to_max>
    3d16:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <mk_max_speed>
    3d1a:	89 17       	cp	r24, r25
    3d1c:	28 f0       	brcs	.+10     	; 0x3d28 <move_unit+0x68>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    3d1e:	85 e0       	ldi	r24, 0x05	; 5
    3d20:	68 9f       	mul	r22, r24
    3d22:	b0 01       	movw	r22, r0
    3d24:	11 24       	eor	r1, r1
    3d26:	da cf       	rjmp	.-76     	; 0x3cdc <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    3d28:	86 9f       	mul	r24, r22
    3d2a:	b0 01       	movw	r22, r0
    3d2c:	11 24       	eor	r1, r1
    3d2e:	85 e0       	ldi	r24, 0x05	; 5
    3d30:	86 9f       	mul	r24, r22
    3d32:	90 01       	movw	r18, r0
    3d34:	87 9f       	mul	r24, r23
    3d36:	30 0d       	add	r19, r0
    3d38:	11 24       	eor	r1, r1
    3d3a:	69 2f       	mov	r22, r25
    3d3c:	70 e0       	ldi	r23, 0x00	; 0
    3d3e:	c9 01       	movw	r24, r18
    3d40:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__divmodhi4>
    3d44:	cb cf       	rjmp	.-106    	; 0x3cdc <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    3d46:	65 e0       	ldi	r22, 0x05	; 5
    3d48:	70 e0       	ldi	r23, 0x00	; 0
    3d4a:	ce cf       	rjmp	.-100    	; 0x3ce8 <move_unit+0x28>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3d4c:	8f e7       	ldi	r24, 0x7F	; 127
    3d4e:	08 95       	ret
    3d50:	81 e0       	ldi	r24, 0x01	; 1
}
    3d52:	08 95       	ret

00003d54 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3d54:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3d58:	80 ff       	sbrs	r24, 0
    3d5a:	0c c0       	rjmp	.+24     	; 0x3d74 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3d5c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_max_speed>
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	75 95       	asr	r23
    3d64:	67 95       	ror	r22
    3d66:	75 95       	asr	r23
    3d68:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3d6a:	61 15       	cp	r22, r1
    3d6c:	71 05       	cpc	r23, r1
    3d6e:	49 f1       	breq	.+82     	; 0x3dc2 <wheel_unit+0x6e>
    3d70:	86 2f       	mov	r24, r22
    3d72:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    3d74:	81 ff       	sbrs	r24, 1
    3d76:	06 c0       	rjmp	.+12     	; 0x3d84 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3d78:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_max_speed>
    3d7c:	70 e0       	ldi	r23, 0x00	; 0
    3d7e:	75 95       	asr	r23
    3d80:	67 95       	ror	r22
    3d82:	f3 cf       	rjmp	.-26     	; 0x3d6a <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    3d84:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <mk_wheel_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    3d88:	82 fd       	sbrc	r24, 2
    3d8a:	0b c0       	rjmp	.+22     	; 0x3da2 <wheel_unit+0x4e>
    } else if (mousekey_repeat == 0) {
    3d8c:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <mousekey_repeat>
    3d90:	99 23       	and	r25, r25
    3d92:	a1 f0       	breq	.+40     	; 0x3dbc <wheel_unit+0x68>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    3d94:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    3d98:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    3d9c:	96 17       	cp	r25, r22
    3d9e:	38 f0       	brcs	.+14     	; 0x3dae <wheel_unit+0x5a>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    3da0:	68 2f       	mov	r22, r24
    3da2:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3da4:	60 38       	cpi	r22, 0x80	; 128
    3da6:	71 05       	cpc	r23, r1
    3da8:	00 f3       	brcs	.-64     	; 0x3d6a <wheel_unit+0x16>
    3daa:	8f e7       	ldi	r24, 0x7F	; 127
    3dac:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    3dae:	89 9f       	mul	r24, r25
    3db0:	c0 01       	movw	r24, r0
    3db2:	11 24       	eor	r1, r1
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <__divmodhi4>
    3dba:	f4 cf       	rjmp	.-24     	; 0x3da4 <wheel_unit+0x50>
        unit = MOUSEKEY_WHEEL_DELTA;
    3dbc:	61 e0       	ldi	r22, 0x01	; 1
    3dbe:	70 e0       	ldi	r23, 0x00	; 0
    3dc0:	d7 cf       	rjmp	.-82     	; 0x3d70 <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
}
    3dc4:	08 95       	ret

00003dc6 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    3dc6:	80 3f       	cpi	r24, 0xF0	; 240
    3dc8:	31 f4       	brne	.+12     	; 0x3dd6 <mousekey_on+0x10>
    3dca:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    3dce:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    3dd0:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <mouse_report+0x2>
    3dd4:	08 95       	ret
    3dd6:	81 3f       	cpi	r24, 0xF1	; 241
    3dd8:	19 f4       	brne	.+6      	; 0x3de0 <mousekey_on+0x1a>
    3dda:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    3dde:	f8 cf       	rjmp	.-16     	; 0x3dd0 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    3de0:	82 3f       	cpi	r24, 0xF2	; 242
    3de2:	31 f4       	brne	.+12     	; 0x3df0 <mousekey_on+0x2a>
    3de4:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    3de8:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    3dea:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <mouse_report+0x1>
    3dee:	08 95       	ret
    3df0:	83 3f       	cpi	r24, 0xF3	; 243
    3df2:	19 f4       	brne	.+6      	; 0x3dfa <mousekey_on+0x34>
    3df4:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    3df8:	f8 cf       	rjmp	.-16     	; 0x3dea <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    3dfa:	89 3f       	cpi	r24, 0xF9	; 249
    3dfc:	29 f4       	brne	.+10     	; 0x3e08 <mousekey_on+0x42>
    3dfe:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    3e02:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <mouse_report+0x3>
    3e06:	08 95       	ret
    3e08:	8a 3f       	cpi	r24, 0xFA	; 250
    3e0a:	21 f4       	brne	.+8      	; 0x3e14 <mousekey_on+0x4e>
    3e0c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    3e10:	81 95       	neg	r24
    3e12:	f7 cf       	rjmp	.-18     	; 0x3e02 <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    3e14:	8b 3f       	cpi	r24, 0xFB	; 251
    3e16:	31 f4       	brne	.+12     	; 0x3e24 <mousekey_on+0x5e>
    3e18:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    3e1c:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    3e1e:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <mouse_report+0x4>
    3e22:	08 95       	ret
    3e24:	8c 3f       	cpi	r24, 0xFC	; 252
    3e26:	19 f4       	brne	.+6      	; 0x3e2e <mousekey_on+0x68>
    3e28:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    3e2c:	f8 cf       	rjmp	.-16     	; 0x3e1e <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    3e2e:	84 3f       	cpi	r24, 0xF4	; 244
    3e30:	31 f4       	brne	.+12     	; 0x3e3e <mousekey_on+0x78>
    3e32:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3e36:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    3e38:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <mouse_report>
    3e3c:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    3e3e:	85 3f       	cpi	r24, 0xF5	; 245
    3e40:	21 f4       	brne	.+8      	; 0x3e4a <mousekey_on+0x84>
    3e42:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3e46:	82 60       	ori	r24, 0x02	; 2
    3e48:	f7 cf       	rjmp	.-18     	; 0x3e38 <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    3e4a:	86 3f       	cpi	r24, 0xF6	; 246
    3e4c:	21 f4       	brne	.+8      	; 0x3e56 <mousekey_on+0x90>
    3e4e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3e52:	84 60       	ori	r24, 0x04	; 4
    3e54:	f1 cf       	rjmp	.-30     	; 0x3e38 <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    3e56:	87 3f       	cpi	r24, 0xF7	; 247
    3e58:	21 f4       	brne	.+8      	; 0x3e62 <mousekey_on+0x9c>
    3e5a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3e5e:	88 60       	ori	r24, 0x08	; 8
    3e60:	eb cf       	rjmp	.-42     	; 0x3e38 <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    3e62:	88 3f       	cpi	r24, 0xF8	; 248
    3e64:	21 f4       	brne	.+8      	; 0x3e6e <mousekey_on+0xa8>
    3e66:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3e6a:	80 61       	ori	r24, 0x10	; 16
    3e6c:	e5 cf       	rjmp	.-54     	; 0x3e38 <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    3e6e:	8d 3f       	cpi	r24, 0xFD	; 253
    3e70:	31 f4       	brne	.+12     	; 0x3e7e <mousekey_on+0xb8>
    3e72:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3e76:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    3e78:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <mousekey_accel>
}
    3e7c:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    3e7e:	8e 3f       	cpi	r24, 0xFE	; 254
    3e80:	21 f4       	brne	.+8      	; 0x3e8a <mousekey_on+0xc4>
    3e82:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3e86:	82 60       	ori	r24, 0x02	; 2
    3e88:	f7 cf       	rjmp	.-18     	; 0x3e78 <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    3e8a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e8c:	b9 f7       	brne	.-18     	; 0x3e7c <mousekey_on+0xb6>
    3e8e:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3e92:	84 60       	ori	r24, 0x04	; 4
    3e94:	f1 cf       	rjmp	.-30     	; 0x3e78 <mousekey_on+0xb2>

00003e96 <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    3e96:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <mouse_report+0x1>
    3e9a:	80 3f       	cpi	r24, 0xF0	; 240
    3e9c:	41 f4       	brne	.+16     	; 0x3eae <mousekey_off+0x18>
    3e9e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <mouse_report+0x2>
    3ea2:	87 fd       	sbrc	r24, 7
    3ea4:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3ea8:	99 23       	and	r25, r25
    3eaa:	71 f0       	breq	.+28     	; 0x3ec8 <mousekey_off+0x32>
        mousekey_repeat = 0;
}
    3eac:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    3eae:	81 3f       	cpi	r24, 0xF1	; 241
    3eb0:	29 f4       	brne	.+10     	; 0x3ebc <mousekey_off+0x26>
    3eb2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <mouse_report+0x2>
    3eb6:	18 16       	cp	r1, r24
    3eb8:	ac f3       	brlt	.-22     	; 0x3ea4 <mousekey_off+0xe>
    3eba:	f6 cf       	rjmp	.-20     	; 0x3ea8 <mousekey_off+0x12>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    3ebc:	82 3f       	cpi	r24, 0xF2	; 242
    3ebe:	81 f4       	brne	.+32     	; 0x3ee0 <mousekey_off+0x4a>
    3ec0:	97 ff       	sbrs	r25, 7
    3ec2:	f2 cf       	rjmp	.-28     	; 0x3ea8 <mousekey_off+0x12>
    3ec4:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <mouse_report+0x1>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3ec8:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <mouse_report+0x2>
    3ecc:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <mouse_report+0x3>
    3ed0:	89 2b       	or	r24, r25
    3ed2:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <mouse_report+0x4>
    3ed6:	89 2b       	or	r24, r25
    3ed8:	49 f7       	brne	.-46     	; 0x3eac <mousekey_off+0x16>
        mousekey_repeat = 0;
    3eda:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <mousekey_repeat>
}
    3ede:	08 95       	ret
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    3ee0:	83 3f       	cpi	r24, 0xF3	; 243
    3ee2:	19 f4       	brne	.+6      	; 0x3eea <mousekey_off+0x54>
    3ee4:	19 16       	cp	r1, r25
    3ee6:	74 f3       	brlt	.-36     	; 0x3ec4 <mousekey_off+0x2e>
    3ee8:	df cf       	rjmp	.-66     	; 0x3ea8 <mousekey_off+0x12>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    3eea:	89 3f       	cpi	r24, 0xF9	; 249
    3eec:	39 f4       	brne	.+14     	; 0x3efc <mousekey_off+0x66>
    3eee:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <mouse_report+0x3>
    3ef2:	18 16       	cp	r1, r24
    3ef4:	cc f6       	brge	.-78     	; 0x3ea8 <mousekey_off+0x12>
    3ef6:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <mouse_report+0x3>
    3efa:	d6 cf       	rjmp	.-84     	; 0x3ea8 <mousekey_off+0x12>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    3efc:	8a 3f       	cpi	r24, 0xFA	; 250
    3efe:	29 f4       	brne	.+10     	; 0x3f0a <mousekey_off+0x74>
    3f00:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <mouse_report+0x3>
    3f04:	87 ff       	sbrs	r24, 7
    3f06:	d0 cf       	rjmp	.-96     	; 0x3ea8 <mousekey_off+0x12>
    3f08:	f6 cf       	rjmp	.-20     	; 0x3ef6 <mousekey_off+0x60>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    3f0a:	8b 3f       	cpi	r24, 0xFB	; 251
    3f0c:	39 f4       	brne	.+14     	; 0x3f1c <mousekey_off+0x86>
    3f0e:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <mouse_report+0x4>
    3f12:	87 ff       	sbrs	r24, 7
    3f14:	c9 cf       	rjmp	.-110    	; 0x3ea8 <mousekey_off+0x12>
    3f16:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <mouse_report+0x4>
    3f1a:	c6 cf       	rjmp	.-116    	; 0x3ea8 <mousekey_off+0x12>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    3f1c:	8c 3f       	cpi	r24, 0xFC	; 252
    3f1e:	29 f4       	brne	.+10     	; 0x3f2a <mousekey_off+0x94>
    3f20:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <mouse_report+0x4>
    3f24:	18 16       	cp	r1, r24
    3f26:	bc f3       	brlt	.-18     	; 0x3f16 <mousekey_off+0x80>
    3f28:	bf cf       	rjmp	.-130    	; 0x3ea8 <mousekey_off+0x12>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    3f2a:	84 3f       	cpi	r24, 0xF4	; 244
    3f2c:	31 f4       	brne	.+12     	; 0x3f3a <mousekey_off+0xa4>
    3f2e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3f32:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    3f34:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <mouse_report>
    3f38:	b7 cf       	rjmp	.-146    	; 0x3ea8 <mousekey_off+0x12>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    3f3a:	85 3f       	cpi	r24, 0xF5	; 245
    3f3c:	21 f4       	brne	.+8      	; 0x3f46 <mousekey_off+0xb0>
    3f3e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3f42:	8d 7f       	andi	r24, 0xFD	; 253
    3f44:	f7 cf       	rjmp	.-18     	; 0x3f34 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    3f46:	86 3f       	cpi	r24, 0xF6	; 246
    3f48:	21 f4       	brne	.+8      	; 0x3f52 <mousekey_off+0xbc>
    3f4a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3f4e:	8b 7f       	andi	r24, 0xFB	; 251
    3f50:	f1 cf       	rjmp	.-30     	; 0x3f34 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    3f52:	87 3f       	cpi	r24, 0xF7	; 247
    3f54:	21 f4       	brne	.+8      	; 0x3f5e <mousekey_off+0xc8>
    3f56:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3f5a:	87 7f       	andi	r24, 0xF7	; 247
    3f5c:	eb cf       	rjmp	.-42     	; 0x3f34 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    3f5e:	88 3f       	cpi	r24, 0xF8	; 248
    3f60:	21 f4       	brne	.+8      	; 0x3f6a <mousekey_off+0xd4>
    3f62:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3f66:	8f 7e       	andi	r24, 0xEF	; 239
    3f68:	e5 cf       	rjmp	.-54     	; 0x3f34 <mousekey_off+0x9e>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    3f6a:	8d 3f       	cpi	r24, 0xFD	; 253
    3f6c:	31 f4       	brne	.+12     	; 0x3f7a <mousekey_off+0xe4>
    3f6e:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3f72:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    3f74:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <mousekey_accel>
    3f78:	97 cf       	rjmp	.-210    	; 0x3ea8 <mousekey_off+0x12>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    3f7a:	8e 3f       	cpi	r24, 0xFE	; 254
    3f7c:	21 f4       	brne	.+8      	; 0x3f86 <mousekey_off+0xf0>
    3f7e:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3f82:	8d 7f       	andi	r24, 0xFD	; 253
    3f84:	f7 cf       	rjmp	.-18     	; 0x3f74 <mousekey_off+0xde>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    3f86:	8f 3f       	cpi	r24, 0xFF	; 255
    3f88:	09 f0       	breq	.+2      	; 0x3f8c <mousekey_off+0xf6>
    3f8a:	8e cf       	rjmp	.-228    	; 0x3ea8 <mousekey_off+0x12>
    3f8c:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    3f90:	8b 7f       	andi	r24, 0xFB	; 251
    3f92:	f0 cf       	rjmp	.-32     	; 0x3f74 <mousekey_off+0xde>

00003f94 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    3f94:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    3f98:	83 ff       	sbrs	r24, 3
    3f9a:	7e c0       	rjmp	.+252    	; 0x4098 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    3f9c:	89 ef       	ldi	r24, 0xF9	; 249
    3f9e:	94 e0       	ldi	r25, 0x04	; 4
    3fa0:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    phex(mouse_report.buttons); print("|");
    3fa4:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <mouse_report>
    3fa8:	1f 92       	push	r1
    3faa:	8f 93       	push	r24
    3fac:	84 ef       	ldi	r24, 0xF4	; 244
    3fae:	94 e0       	ldi	r25, 0x04	; 4
    3fb0:	9f 93       	push	r25
    3fb2:	8f 93       	push	r24
    3fb4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    3fb8:	82 ef       	ldi	r24, 0xF2	; 242
    3fba:	94 e0       	ldi	r25, 0x04	; 4
    3fbc:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print_decs(mouse_report.x); print(" ");
    3fc0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <mouse_report+0x1>
    3fc4:	28 2f       	mov	r18, r24
    3fc6:	08 2e       	mov	r0, r24
    3fc8:	00 0c       	add	r0, r0
    3fca:	33 0b       	sbc	r19, r19
    3fcc:	3f 93       	push	r19
    3fce:	8f 93       	push	r24
    3fd0:	8f ee       	ldi	r24, 0xEF	; 239
    3fd2:	94 e0       	ldi	r25, 0x04	; 4
    3fd4:	9f 93       	push	r25
    3fd6:	8f 93       	push	r24
    3fd8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    3fdc:	8d ee       	ldi	r24, 0xED	; 237
    3fde:	94 e0       	ldi	r25, 0x04	; 4
    3fe0:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print_decs(mouse_report.y); print(" ");
    3fe4:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <mouse_report+0x2>
    3fe8:	28 2f       	mov	r18, r24
    3fea:	08 2e       	mov	r0, r24
    3fec:	00 0c       	add	r0, r0
    3fee:	33 0b       	sbc	r19, r19
    3ff0:	3f 93       	push	r19
    3ff2:	8f 93       	push	r24
    3ff4:	8a ee       	ldi	r24, 0xEA	; 234
    3ff6:	94 e0       	ldi	r25, 0x04	; 4
    3ff8:	9f 93       	push	r25
    3ffa:	8f 93       	push	r24
    3ffc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    4000:	88 ee       	ldi	r24, 0xE8	; 232
    4002:	94 e0       	ldi	r25, 0x04	; 4
    4004:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print_decs(mouse_report.v); print(" ");
    4008:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <mouse_report+0x3>
    400c:	28 2f       	mov	r18, r24
    400e:	08 2e       	mov	r0, r24
    4010:	00 0c       	add	r0, r0
    4012:	33 0b       	sbc	r19, r19
    4014:	3f 93       	push	r19
    4016:	8f 93       	push	r24
    4018:	85 ee       	ldi	r24, 0xE5	; 229
    401a:	94 e0       	ldi	r25, 0x04	; 4
    401c:	9f 93       	push	r25
    401e:	8f 93       	push	r24
    4020:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    4024:	83 ee       	ldi	r24, 0xE3	; 227
    4026:	94 e0       	ldi	r25, 0x04	; 4
    4028:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print_decs(mouse_report.h); print("](");
    402c:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <mouse_report+0x4>
    4030:	28 2f       	mov	r18, r24
    4032:	08 2e       	mov	r0, r24
    4034:	00 0c       	add	r0, r0
    4036:	33 0b       	sbc	r19, r19
    4038:	3f 93       	push	r19
    403a:	8f 93       	push	r24
    403c:	80 ee       	ldi	r24, 0xE0	; 224
    403e:	94 e0       	ldi	r25, 0x04	; 4
    4040:	9f 93       	push	r25
    4042:	8f 93       	push	r24
    4044:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    4048:	8d ed       	ldi	r24, 0xDD	; 221
    404a:	94 e0       	ldi	r25, 0x04	; 4
    404c:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print_dec(mousekey_repeat); print("/");
    4050:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <mousekey_repeat>
    4054:	1f 92       	push	r1
    4056:	8f 93       	push	r24
    4058:	8a ed       	ldi	r24, 0xDA	; 218
    405a:	94 e0       	ldi	r25, 0x04	; 4
    405c:	9f 93       	push	r25
    405e:	8f 93       	push	r24
    4060:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    4064:	88 ed       	ldi	r24, 0xD8	; 216
    4066:	94 e0       	ldi	r25, 0x04	; 4
    4068:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print_dec(mousekey_accel); print(")\n");
    406c:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <mousekey_accel>
    4070:	1f 92       	push	r1
    4072:	8f 93       	push	r24
    4074:	85 ed       	ldi	r24, 0xD5	; 213
    4076:	94 e0       	ldi	r25, 0x04	; 4
    4078:	9f 93       	push	r25
    407a:	8f 93       	push	r24
    407c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    4080:	82 ed       	ldi	r24, 0xD2	; 210
    4082:	94 e0       	ldi	r25, 0x04	; 4
    4084:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    4088:	8d b7       	in	r24, 0x3d	; 61
    408a:	9e b7       	in	r25, 0x3e	; 62
    408c:	4c 96       	adiw	r24, 0x1c	; 28
    408e:	0f b6       	in	r0, 0x3f	; 63
    4090:	f8 94       	cli
    4092:	9e bf       	out	0x3e, r25	; 62
    4094:	0f be       	out	0x3f, r0	; 63
    4096:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    4098:	87 e4       	ldi	r24, 0x47	; 71
    409a:	94 e0       	ldi	r25, 0x04	; 4
    409c:	0e 94 98 10 	call	0x2130	; 0x2130 <host_mouse_send>
    last_timer = timer_read();
    40a0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <timer_read>
    40a4:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <last_timer+0x1>
    40a8:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <last_timer>
}
    40ac:	08 95       	ret

000040ae <mousekey_task>:
{
    40ae:	1f 93       	push	r17
    40b0:	cf 93       	push	r28
    40b2:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    40b4:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <last_timer>
    40b8:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <last_timer+0x1>
    40bc:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <timer_elapsed>
    40c0:	ac 01       	movw	r20, r24
    40c2:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <mousekey_repeat>
    40c6:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <mk_interval>
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	91 11       	cpse	r25, r1
    40ce:	06 c0       	rjmp	.+12     	; 0x40dc <mousekey_task+0x2e>
    40d0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <mk_delay>
    40d4:	8a e0       	ldi	r24, 0x0A	; 10
    40d6:	28 9f       	mul	r18, r24
    40d8:	90 01       	movw	r18, r0
    40da:	11 24       	eor	r1, r1
    40dc:	42 17       	cp	r20, r18
    40de:	53 07       	cpc	r21, r19
    40e0:	78 f0       	brcs	.+30     	; 0x4100 <mousekey_task+0x52>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    40e2:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <mouse_report+0x1>
    40e6:	c0 91 49 04 	lds	r28, 0x0449	; 0x800449 <mouse_report+0x2>
    40ea:	d0 91 4a 04 	lds	r29, 0x044A	; 0x80044a <mouse_report+0x3>
    40ee:	10 91 4b 04 	lds	r17, 0x044B	; 0x80044b <mouse_report+0x4>
    40f2:	21 11       	cpse	r18, r1
    40f4:	09 c0       	rjmp	.+18     	; 0x4108 <mousekey_task+0x5a>
    40f6:	8c 2f       	mov	r24, r28
    40f8:	8d 2b       	or	r24, r29
    40fa:	81 2b       	or	r24, r17
    40fc:	09 f0       	breq	.+2      	; 0x4100 <mousekey_task+0x52>
    40fe:	74 c0       	rjmp	.+232    	; 0x41e8 <mousekey_task+0x13a>
}
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    4108:	9f 3f       	cpi	r25, 0xFF	; 255
    410a:	19 f0       	breq	.+6      	; 0x4112 <mousekey_task+0x64>
        mousekey_repeat++;
    410c:	9f 5f       	subi	r25, 0xFF	; 255
    410e:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4112:	12 16       	cp	r1, r18
    4114:	24 f4       	brge	.+8      	; 0x411e <mousekey_task+0x70>
    4116:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    411a:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    411e:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <mouse_report+0x1>
    4122:	87 ff       	sbrs	r24, 7
    4124:	05 c0       	rjmp	.+10     	; 0x4130 <mousekey_task+0x82>
    4126:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    412a:	81 95       	neg	r24
    412c:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4130:	1c 16       	cp	r1, r28
    4132:	24 f4       	brge	.+8      	; 0x413c <mousekey_task+0x8e>
    4134:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    4138:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    413c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <mouse_report+0x2>
    4140:	87 ff       	sbrs	r24, 7
    4142:	05 c0       	rjmp	.+10     	; 0x414e <mousekey_task+0xa0>
    4144:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <move_unit>
    4148:	81 95       	neg	r24
    414a:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    414e:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <mouse_report+0x1>
    4152:	66 23       	and	r22, r22
    4154:	31 f1       	breq	.+76     	; 0x41a2 <mousekey_task+0xf4>
    4156:	c0 91 49 04 	lds	r28, 0x0449	; 0x800449 <mouse_report+0x2>
    415a:	cc 23       	and	r28, r28
    415c:	11 f1       	breq	.+68     	; 0x41a2 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    415e:	06 2e       	mov	r0, r22
    4160:	00 0c       	add	r0, r0
    4162:	77 0b       	sbc	r23, r23
    4164:	88 0b       	sbc	r24, r24
    4166:	99 0b       	sbc	r25, r25
    4168:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__floatsisf>
    416c:	23 e3       	ldi	r18, 0x33	; 51
    416e:	33 e3       	ldi	r19, 0x33	; 51
    4170:	43 e3       	ldi	r20, 0x33	; 51
    4172:	5f e3       	ldi	r21, 0x3F	; 63
    4174:	0e 94 57 25 	call	0x4aae	; 0x4aae <__mulsf3>
    4178:	0e 94 bb 24 	call	0x4976	; 0x4976 <__fixsfsi>
    417c:	60 93 48 04 	sts	0x0448, r22	; 0x800448 <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4180:	6c 2f       	mov	r22, r28
    4182:	cc 0f       	add	r28, r28
    4184:	77 0b       	sbc	r23, r23
    4186:	88 0b       	sbc	r24, r24
    4188:	99 0b       	sbc	r25, r25
    418a:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <__floatsisf>
    418e:	23 e3       	ldi	r18, 0x33	; 51
    4190:	33 e3       	ldi	r19, 0x33	; 51
    4192:	43 e3       	ldi	r20, 0x33	; 51
    4194:	5f e3       	ldi	r21, 0x3F	; 63
    4196:	0e 94 57 25 	call	0x4aae	; 0x4aae <__mulsf3>
    419a:	0e 94 bb 24 	call	0x4976	; 0x4976 <__fixsfsi>
    419e:	60 93 49 04 	sts	0x0449, r22	; 0x800449 <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    41a2:	1d 16       	cp	r1, r29
    41a4:	24 f4       	brge	.+8      	; 0x41ae <mousekey_task+0x100>
    41a6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    41aa:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    41ae:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <mouse_report+0x3>
    41b2:	87 ff       	sbrs	r24, 7
    41b4:	05 c0       	rjmp	.+10     	; 0x41c0 <mousekey_task+0x112>
    41b6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    41ba:	81 95       	neg	r24
    41bc:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    41c0:	11 16       	cp	r1, r17
    41c2:	24 f4       	brge	.+8      	; 0x41cc <mousekey_task+0x11e>
    41c4:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    41c8:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    41cc:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <mouse_report+0x4>
    41d0:	87 ff       	sbrs	r24, 7
    41d2:	05 c0       	rjmp	.+10     	; 0x41de <mousekey_task+0x130>
    41d4:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <wheel_unit>
    41d8:	81 95       	neg	r24
    41da:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <mouse_report+0x4>
}
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    mousekey_send();
    41e4:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    41e8:	9f 3f       	cpi	r25, 0xFF	; 255
    41ea:	09 f0       	breq	.+2      	; 0x41ee <mousekey_task+0x140>
    41ec:	8f cf       	rjmp	.-226    	; 0x410c <mousekey_task+0x5e>
    41ee:	a0 cf       	rjmp	.-192    	; 0x4130 <mousekey_task+0x82>

000041f0 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    41f0:	85 e0       	ldi	r24, 0x05	; 5
    41f2:	e7 e4       	ldi	r30, 0x47	; 71
    41f4:	f4 e0       	ldi	r31, 0x04	; 4
    41f6:	df 01       	movw	r26, r30
    41f8:	1d 92       	st	X+, r1
    41fa:	8a 95       	dec	r24
    41fc:	e9 f7       	brne	.-6      	; 0x41f8 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    41fe:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <mousekey_repeat>
    mousekey_accel = 0;
    4202:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <mousekey_accel>
}
    4206:	08 95       	ret

00004208 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4208:	8c e1       	ldi	r24, 0x1C	; 28
    420a:	97 e0       	ldi	r25, 0x07	; 7
    420c:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4210:	1f 92       	push	r1
    4212:	81 e0       	ldi	r24, 0x01	; 1
    4214:	8f 93       	push	r24
    4216:	1f 92       	push	r1
    4218:	85 e0       	ldi	r24, 0x05	; 5
    421a:	8f 93       	push	r24
    421c:	8e ec       	ldi	r24, 0xCE	; 206
    421e:	96 e0       	ldi	r25, 0x06	; 6
    4220:	9f 93       	push	r25
    4222:	8f 93       	push	r24
    4224:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	08 95       	ret

00004236 <mousekey_param_inc>:
    switch (param) {
    4236:	83 30       	cpi	r24, 0x03	; 3
    4238:	09 f4       	brne	.+2      	; 0x423c <mousekey_param_inc+0x6>
    423a:	45 c0       	rjmp	.+138    	; 0x42c6 <mousekey_param_inc+0x90>
    423c:	28 f4       	brcc	.+10     	; 0x4248 <mousekey_param_inc+0x12>
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	61 f0       	breq	.+24     	; 0x425a <mousekey_param_inc+0x24>
    4242:	82 30       	cpi	r24, 0x02	; 2
    4244:	49 f1       	breq	.+82     	; 0x4298 <mousekey_param_inc+0x62>
    4246:	08 95       	ret
    4248:	85 30       	cpi	r24, 0x05	; 5
    424a:	09 f4       	brne	.+2      	; 0x424e <mousekey_param_inc+0x18>
    424c:	6a c0       	rjmp	.+212    	; 0x4322 <mousekey_param_inc+0xec>
    424e:	08 f4       	brcc	.+2      	; 0x4252 <mousekey_param_inc+0x1c>
    4250:	51 c0       	rjmp	.+162    	; 0x42f4 <mousekey_param_inc+0xbe>
    4252:	86 30       	cpi	r24, 0x06	; 6
    4254:	09 f4       	brne	.+2      	; 0x4258 <mousekey_param_inc+0x22>
    4256:	7c c0       	rjmp	.+248    	; 0x4350 <mousekey_param_inc+0x11a>
    4258:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    425a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    425e:	48 2f       	mov	r20, r24
    4260:	46 0f       	add	r20, r22
    4262:	55 27       	eor	r21, r21
    4264:	55 1f       	adc	r21, r21
    4266:	4f 3f       	cpi	r20, 0xFF	; 255
    4268:	51 05       	cpc	r21, r1
    426a:	94 f4       	brge	.+36     	; 0x4290 <mousekey_param_inc+0x5a>
                mk_delay += inc;
    426c:	68 0f       	add	r22, r24
    426e:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4272:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    4276:	1f 92       	push	r1
    4278:	8f 93       	push	r24
    427a:	87 e0       	ldi	r24, 0x07	; 7
    427c:	96 e0       	ldi	r25, 0x06	; 6
            PRINT_SET_VAL(mk_wheel_time_to_max);
    427e:	9f 93       	push	r25
    4280:	8f 93       	push	r24
    4282:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
            break;
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	0f 90       	pop	r0
}
    428e:	08 95       	ret
                mk_delay = UINT8_MAX;
    4290:	8f ef       	ldi	r24, 0xFF	; 255
    4292:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_delay>
    4296:	ed cf       	rjmp	.-38     	; 0x4272 <mousekey_param_inc+0x3c>
            if (mk_interval + inc < UINT8_MAX)
    4298:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    429c:	48 2f       	mov	r20, r24
    429e:	46 0f       	add	r20, r22
    42a0:	55 27       	eor	r21, r21
    42a2:	55 1f       	adc	r21, r21
    42a4:	4f 3f       	cpi	r20, 0xFF	; 255
    42a6:	51 05       	cpc	r21, r1
    42a8:	54 f4       	brge	.+20     	; 0x42be <mousekey_param_inc+0x88>
                mk_interval += inc;
    42aa:	68 0f       	add	r22, r24
    42ac:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    42b0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    42b4:	1f 92       	push	r1
    42b6:	8f 93       	push	r24
    42b8:	85 ef       	ldi	r24, 0xF5	; 245
    42ba:	95 e0       	ldi	r25, 0x05	; 5
    42bc:	e0 cf       	rjmp	.-64     	; 0x427e <mousekey_param_inc+0x48>
                mk_interval = UINT8_MAX;
    42be:	8f ef       	ldi	r24, 0xFF	; 255
    42c0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_interval>
    42c4:	f5 cf       	rjmp	.-22     	; 0x42b0 <mousekey_param_inc+0x7a>
            if (mk_max_speed + inc < UINT8_MAX)
    42c6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    42ca:	48 2f       	mov	r20, r24
    42cc:	46 0f       	add	r20, r22
    42ce:	55 27       	eor	r21, r21
    42d0:	55 1f       	adc	r21, r21
    42d2:	4f 3f       	cpi	r20, 0xFF	; 255
    42d4:	51 05       	cpc	r21, r1
    42d6:	54 f4       	brge	.+20     	; 0x42ec <mousekey_param_inc+0xb6>
                mk_max_speed += inc;
    42d8:	68 0f       	add	r22, r24
    42da:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    42de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    42e2:	1f 92       	push	r1
    42e4:	8f 93       	push	r24
    42e6:	82 ee       	ldi	r24, 0xE2	; 226
    42e8:	95 e0       	ldi	r25, 0x05	; 5
    42ea:	c9 cf       	rjmp	.-110    	; 0x427e <mousekey_param_inc+0x48>
                mk_max_speed = UINT8_MAX;
    42ec:	8f ef       	ldi	r24, 0xFF	; 255
    42ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_max_speed>
    42f2:	f5 cf       	rjmp	.-22     	; 0x42de <mousekey_param_inc+0xa8>
            if (mk_time_to_max + inc < UINT8_MAX)
    42f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    42f8:	48 2f       	mov	r20, r24
    42fa:	46 0f       	add	r20, r22
    42fc:	55 27       	eor	r21, r21
    42fe:	55 1f       	adc	r21, r21
    4300:	4f 3f       	cpi	r20, 0xFF	; 255
    4302:	51 05       	cpc	r21, r1
    4304:	54 f4       	brge	.+20     	; 0x431a <mousekey_param_inc+0xe4>
                mk_time_to_max += inc;
    4306:	68 0f       	add	r22, r24
    4308:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    430c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    4310:	1f 92       	push	r1
    4312:	8f 93       	push	r24
    4314:	8d ec       	ldi	r24, 0xCD	; 205
    4316:	95 e0       	ldi	r25, 0x05	; 5
    4318:	b2 cf       	rjmp	.-156    	; 0x427e <mousekey_param_inc+0x48>
                mk_time_to_max = UINT8_MAX;
    431a:	8f ef       	ldi	r24, 0xFF	; 255
    431c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_time_to_max>
    4320:	f5 cf       	rjmp	.-22     	; 0x430c <mousekey_param_inc+0xd6>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4322:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    4326:	48 2f       	mov	r20, r24
    4328:	46 0f       	add	r20, r22
    432a:	55 27       	eor	r21, r21
    432c:	55 1f       	adc	r21, r21
    432e:	4f 3f       	cpi	r20, 0xFF	; 255
    4330:	51 05       	cpc	r21, r1
    4332:	54 f4       	brge	.+20     	; 0x4348 <mousekey_param_inc+0x112>
                mk_wheel_max_speed += inc;
    4334:	68 0f       	add	r22, r24
    4336:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    433a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    433e:	1f 92       	push	r1
    4340:	8f 93       	push	r24
    4342:	84 eb       	ldi	r24, 0xB4	; 180
    4344:	95 e0       	ldi	r25, 0x05	; 5
    4346:	9b cf       	rjmp	.-202    	; 0x427e <mousekey_param_inc+0x48>
                mk_wheel_max_speed = UINT8_MAX;
    4348:	8f ef       	ldi	r24, 0xFF	; 255
    434a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_max_speed>
    434e:	f5 cf       	rjmp	.-22     	; 0x433a <mousekey_param_inc+0x104>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4350:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    4354:	48 2f       	mov	r20, r24
    4356:	46 0f       	add	r20, r22
    4358:	55 27       	eor	r21, r21
    435a:	55 1f       	adc	r21, r21
    435c:	4f 3f       	cpi	r20, 0xFF	; 255
    435e:	51 05       	cpc	r21, r1
    4360:	54 f4       	brge	.+20     	; 0x4376 <mousekey_param_inc+0x140>
                mk_wheel_time_to_max += inc;
    4362:	68 0f       	add	r22, r24
    4364:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4368:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    436c:	1f 92       	push	r1
    436e:	8f 93       	push	r24
    4370:	89 e9       	ldi	r24, 0x99	; 153
    4372:	95 e0       	ldi	r25, 0x05	; 5
    4374:	84 cf       	rjmp	.-248    	; 0x427e <mousekey_param_inc+0x48>
                mk_wheel_time_to_max = UINT8_MAX;
    4376:	8f ef       	ldi	r24, 0xFF	; 255
    4378:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_wheel_time_to_max>
    437c:	f5 cf       	rjmp	.-22     	; 0x4368 <mousekey_param_inc+0x132>

0000437e <mousekey_param_dec>:
    switch (param) {
    437e:	83 30       	cpi	r24, 0x03	; 3
    4380:	c9 f1       	breq	.+114    	; 0x43f4 <mousekey_param_dec+0x76>
    4382:	28 f4       	brcc	.+10     	; 0x438e <mousekey_param_dec+0x10>
    4384:	81 30       	cpi	r24, 0x01	; 1
    4386:	61 f0       	breq	.+24     	; 0x43a0 <mousekey_param_dec+0x22>
    4388:	82 30       	cpi	r24, 0x02	; 2
    438a:	19 f1       	breq	.+70     	; 0x43d2 <mousekey_param_dec+0x54>
    438c:	08 95       	ret
    438e:	85 30       	cpi	r24, 0x05	; 5
    4390:	09 f4       	brne	.+2      	; 0x4394 <mousekey_param_dec+0x16>
    4392:	52 c0       	rjmp	.+164    	; 0x4438 <mousekey_param_dec+0xba>
    4394:	08 f4       	brcc	.+2      	; 0x4398 <mousekey_param_dec+0x1a>
    4396:	3f c0       	rjmp	.+126    	; 0x4416 <mousekey_param_dec+0x98>
    4398:	86 30       	cpi	r24, 0x06	; 6
    439a:	09 f4       	brne	.+2      	; 0x439e <mousekey_param_dec+0x20>
    439c:	5e c0       	rjmp	.+188    	; 0x445a <mousekey_param_dec+0xdc>
    439e:	08 95       	ret
            if (mk_delay > dec)
    43a0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    43a4:	68 17       	cp	r22, r24
    43a6:	90 f4       	brcc	.+36     	; 0x43cc <mousekey_param_dec+0x4e>
                mk_delay -= dec;
    43a8:	86 1b       	sub	r24, r22
    43aa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_delay>
            PRINT_SET_VAL(mk_delay);
    43ae:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    43b2:	1f 92       	push	r1
    43b4:	8f 93       	push	r24
    43b6:	8a e8       	ldi	r24, 0x8A	; 138
    43b8:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    43ba:	9f 93       	push	r25
    43bc:	8f 93       	push	r24
    43be:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
            break;
    43c2:	0f 90       	pop	r0
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	0f 90       	pop	r0
}
    43ca:	08 95       	ret
                mk_delay = 0;
    43cc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <mk_delay>
    43d0:	ee cf       	rjmp	.-36     	; 0x43ae <mousekey_param_dec+0x30>
            if (mk_interval > dec)
    43d2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    43d6:	68 17       	cp	r22, r24
    43d8:	50 f4       	brcc	.+20     	; 0x43ee <mousekey_param_dec+0x70>
                mk_interval -= dec;
    43da:	86 1b       	sub	r24, r22
    43dc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_interval>
            PRINT_SET_VAL(mk_interval);
    43e0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    43e4:	1f 92       	push	r1
    43e6:	8f 93       	push	r24
    43e8:	88 e7       	ldi	r24, 0x78	; 120
    43ea:	95 e0       	ldi	r25, 0x05	; 5
    43ec:	e6 cf       	rjmp	.-52     	; 0x43ba <mousekey_param_dec+0x3c>
                mk_interval = 0;
    43ee:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <mk_interval>
    43f2:	f6 cf       	rjmp	.-20     	; 0x43e0 <mousekey_param_dec+0x62>
            if (mk_max_speed > dec)
    43f4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    43f8:	68 17       	cp	r22, r24
    43fa:	50 f4       	brcc	.+20     	; 0x4410 <mousekey_param_dec+0x92>
                mk_max_speed -= dec;
    43fc:	86 1b       	sub	r24, r22
    43fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4402:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    4406:	1f 92       	push	r1
    4408:	8f 93       	push	r24
    440a:	85 e6       	ldi	r24, 0x65	; 101
    440c:	95 e0       	ldi	r25, 0x05	; 5
    440e:	d5 cf       	rjmp	.-86     	; 0x43ba <mousekey_param_dec+0x3c>
                mk_max_speed = 0;
    4410:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <mk_max_speed>
    4414:	f6 cf       	rjmp	.-20     	; 0x4402 <mousekey_param_dec+0x84>
            if (mk_time_to_max > dec)
    4416:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    441a:	68 17       	cp	r22, r24
    441c:	50 f4       	brcc	.+20     	; 0x4432 <mousekey_param_dec+0xb4>
                mk_time_to_max -= dec;
    441e:	86 1b       	sub	r24, r22
    4420:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    4424:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    4428:	1f 92       	push	r1
    442a:	8f 93       	push	r24
    442c:	80 e5       	ldi	r24, 0x50	; 80
    442e:	95 e0       	ldi	r25, 0x05	; 5
    4430:	c4 cf       	rjmp	.-120    	; 0x43ba <mousekey_param_dec+0x3c>
                mk_time_to_max = 0;
    4432:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mk_time_to_max>
    4436:	f6 cf       	rjmp	.-20     	; 0x4424 <mousekey_param_dec+0xa6>
            if (mk_wheel_max_speed > dec)
    4438:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    443c:	68 17       	cp	r22, r24
    443e:	50 f4       	brcc	.+20     	; 0x4454 <mousekey_param_dec+0xd6>
                mk_wheel_max_speed -= dec;
    4440:	86 1b       	sub	r24, r22
    4442:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    4446:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    444a:	1f 92       	push	r1
    444c:	8f 93       	push	r24
    444e:	87 e3       	ldi	r24, 0x37	; 55
    4450:	95 e0       	ldi	r25, 0x05	; 5
    4452:	b3 cf       	rjmp	.-154    	; 0x43ba <mousekey_param_dec+0x3c>
                mk_wheel_max_speed = 0;
    4454:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <mk_wheel_max_speed>
    4458:	f6 cf       	rjmp	.-20     	; 0x4446 <mousekey_param_dec+0xc8>
            if (mk_wheel_time_to_max > dec)
    445a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    445e:	68 17       	cp	r22, r24
    4460:	50 f4       	brcc	.+20     	; 0x4476 <mousekey_param_dec+0xf8>
                mk_wheel_time_to_max -= dec;
    4462:	86 1b       	sub	r24, r22
    4464:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4468:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    446c:	1f 92       	push	r1
    446e:	8f 93       	push	r24
    4470:	8c e1       	ldi	r24, 0x1C	; 28
    4472:	95 e0       	ldi	r25, 0x05	; 5
    4474:	a2 cf       	rjmp	.-188    	; 0x43ba <mousekey_param_dec+0x3c>
                mk_wheel_time_to_max = 0;
    4476:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <mk_wheel_time_to_max>
    447a:	f6 cf       	rjmp	.-20     	; 0x4468 <mousekey_param_dec+0xea>

0000447c <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    447c:	cf 93       	push	r28
    447e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4480:	1f 92       	push	r1
    4482:	8f 93       	push	r24
    4484:	81 e2       	ldi	r24, 0x21	; 33
    4486:	98 e0       	ldi	r25, 0x08	; 8
    4488:	9f 93       	push	r25
    448a:	8f 93       	push	r24
    448c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    default_layer_set(1UL<<layer);
    4490:	61 e0       	ldi	r22, 0x01	; 1
    4492:	70 e0       	ldi	r23, 0x00	; 0
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	04 c0       	rjmp	.+8      	; 0x44a2 <switch_default_layer+0x26>
    449a:	66 0f       	add	r22, r22
    449c:	77 1f       	adc	r23, r23
    449e:	88 1f       	adc	r24, r24
    44a0:	99 1f       	adc	r25, r25
    44a2:	ca 95       	dec	r28
    44a4:	d2 f7       	brpl	.-12     	; 0x449a <switch_default_layer+0x1e>
    44a6:	0e 94 ad 1a 	call	0x355a	; 0x355a <default_layer_set>
    clear_keyboard();
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
    44b0:	0f 90       	pop	r0
}
    44b2:	cf 91       	pop	r28
    clear_keyboard();
    44b4:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <clear_keyboard>

000044b8 <command_common>:
    switch (code) {
    44b8:	87 32       	cpi	r24, 0x27	; 39
    44ba:	d8 f5       	brcc	.+118    	; 0x4532 <command_common+0x7a>
    44bc:	8e 31       	cpi	r24, 0x1E	; 30
    44be:	08 f0       	brcs	.+2      	; 0x44c2 <command_common+0xa>
    44c0:	f2 c0       	rjmp	.+484    	; 0x46a6 <command_common+0x1ee>
    44c2:	8e 30       	cpi	r24, 0x0E	; 14
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <command_common+0x10>
    44c6:	8e c0       	rjmp	.+284    	; 0x45e4 <command_common+0x12c>
    44c8:	78 f4       	brcc	.+30     	; 0x44e8 <command_common+0x30>
    44ca:	87 30       	cpi	r24, 0x07	; 7
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <command_common+0x18>
    44ce:	71 c0       	rjmp	.+226    	; 0x45b2 <command_common+0xfa>
    44d0:	8b 30       	cpi	r24, 0x0B	; 11
    44d2:	09 f4       	brne	.+2      	; 0x44d6 <command_common+0x1e>
    44d4:	58 c0       	rjmp	.+176    	; 0x4586 <command_common+0xce>
    44d6:	86 30       	cpi	r24, 0x06	; 6
    44d8:	09 f4       	brne	.+2      	; 0x44dc <command_common+0x24>
    44da:	5a c0       	rjmp	.+180    	; 0x4590 <command_common+0xd8>
            print("?");
    44dc:	80 ee       	ldi	r24, 0xE0	; 224
    44de:	98 e0       	ldi	r25, 0x08	; 8
    44e0:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            return false;
    44e4:	80 e0       	ldi	r24, 0x00	; 0
}
    44e6:	08 95       	ret
    switch (code) {
    44e8:	86 31       	cpi	r24, 0x16	; 22
    44ea:	09 f4       	brne	.+2      	; 0x44ee <command_common+0x36>
    44ec:	a5 c0       	rjmp	.+330    	; 0x4638 <command_common+0x180>
    44ee:	78 f4       	brcc	.+30     	; 0x450e <command_common+0x56>
    44f0:	80 31       	cpi	r24, 0x10	; 16
    44f2:	a1 f7       	brne	.-24     	; 0x44dc <command_common+0x24>
            debug_mouse = !debug_mouse;
    44f4:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <debug_config>
    44f8:	89 2f       	mov	r24, r25
    44fa:	87 7f       	andi	r24, 0xF7	; 247
    44fc:	93 ff       	sbrs	r25, 3
    44fe:	88 60       	ori	r24, 0x08	; 8
    4500:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <debug_config>
            if (debug_mouse) {
    4504:	83 ff       	sbrs	r24, 3
    4506:	7e c0       	rjmp	.+252    	; 0x4604 <command_common+0x14c>
                print("\nmouse: on\n");
    4508:	86 e6       	ldi	r24, 0x66	; 102
    450a:	9a e0       	ldi	r25, 0x0A	; 10
    450c:	62 c0       	rjmp	.+196    	; 0x45d2 <command_common+0x11a>
    switch (code) {
    450e:	89 31       	cpi	r24, 0x19	; 25
    4510:	09 f4       	brne	.+2      	; 0x4514 <command_common+0x5c>
    4512:	7b c0       	rjmp	.+246    	; 0x460a <command_common+0x152>
    4514:	8b 31       	cpi	r24, 0x1B	; 27
    4516:	11 f7       	brne	.-60     	; 0x44dc <command_common+0x24>
            debug_matrix = !debug_matrix;
    4518:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <debug_config>
    451c:	89 2f       	mov	r24, r25
    451e:	8d 7f       	andi	r24, 0xFD	; 253
    4520:	91 ff       	sbrs	r25, 1
    4522:	82 60       	ori	r24, 0x02	; 2
    4524:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <debug_config>
            if (debug_matrix) {
    4528:	81 ff       	sbrs	r24, 1
    452a:	59 c0       	rjmp	.+178    	; 0x45de <command_common+0x126>
                print("\nmatrix: on\n");
    452c:	8f e9       	ldi	r24, 0x9F	; 159
    452e:	9a e0       	ldi	r25, 0x0A	; 10
    4530:	50 c0       	rjmp	.+160    	; 0x45d2 <command_common+0x11a>
    switch (code) {
    4532:	88 33       	cpi	r24, 0x38	; 56
    4534:	41 f1       	breq	.+80     	; 0x4586 <command_common+0xce>
    4536:	50 f4       	brcc	.+20     	; 0x454c <command_common+0x94>
    4538:	89 32       	cpi	r24, 0x29	; 41
    453a:	21 f0       	breq	.+8      	; 0x4544 <command_common+0x8c>
    453c:	85 33       	cpi	r24, 0x35	; 53
    453e:	11 f0       	breq	.+4      	; 0x4544 <command_common+0x8c>
    4540:	87 32       	cpi	r24, 0x27	; 39
    4542:	61 f6       	brne	.-104    	; 0x44dc <command_common+0x24>
            switch_default_layer(0);
    4544:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4546:	0e 94 3e 22 	call	0x447c	; 0x447c <switch_default_layer>
            break;
    454a:	1b c0       	rjmp	.+54     	; 0x4582 <command_common+0xca>
    switch (code) {
    454c:	83 34       	cpi	r24, 0x43	; 67
    454e:	d1 f3       	breq	.-12     	; 0x4544 <command_common+0x8c>
    4550:	20 f4       	brcc	.+8      	; 0x455a <command_common+0xa2>
    4552:	8a 33       	cpi	r24, 0x3A	; 58
    4554:	18 f2       	brcs	.-122    	; 0x44dc <command_common+0x24>
            switch_default_layer((code - KC_F1) + 1);
    4556:	89 53       	subi	r24, 0x39	; 57
    4558:	f6 cf       	rjmp	.-20     	; 0x4546 <command_common+0x8e>
    switch (code) {
    455a:	88 34       	cpi	r24, 0x48	; 72
    455c:	09 f0       	breq	.+2      	; 0x4560 <command_common+0xa8>
    455e:	be cf       	rjmp	.-132    	; 0x44dc <command_common+0x24>
            clear_keyboard();
    4560:	0e 94 67 13 	call	0x26ce	; 0x26ce <clear_keyboard>
            print("\n\nbootloader... ");
    4564:	85 ec       	ldi	r24, 0xC5	; 197
    4566:	9a e0       	ldi	r25, 0x0A	; 10
    4568:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    456c:	2f ef       	ldi	r18, 0xFF	; 255
    456e:	83 ed       	ldi	r24, 0xD3	; 211
    4570:	90 e3       	ldi	r25, 0x30	; 48
    4572:	21 50       	subi	r18, 0x01	; 1
    4574:	80 40       	sbci	r24, 0x00	; 0
    4576:	90 40       	sbci	r25, 0x00	; 0
    4578:	e1 f7       	brne	.-8      	; 0x4572 <command_common+0xba>
    457a:	00 c0       	rjmp	.+0      	; 0x457c <command_common+0xc4>
    457c:	00 00       	nop
            bootloader_jump(); // not return
    457e:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <bootloader_jump>
    return true;
    4582:	81 e0       	ldi	r24, 0x01	; 1
            break;
    4584:	08 95       	ret
    print("\n\t- Magic -\n"
    4586:	8d e4       	ldi	r24, 0x4D	; 77
    4588:	98 e0       	ldi	r25, 0x08	; 8
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    458a:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            break;
    458e:	f9 cf       	rjmp	.-14     	; 0x4582 <command_common+0xca>
            debug_enable   = false;
    4590:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    4594:	80 7f       	andi	r24, 0xF0	; 240
    4596:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <debug_config>
    print("\n\t- Console -\n"
    459a:	86 e2       	ldi	r24, 0x26	; 38
    459c:	98 e0       	ldi	r25, 0x08	; 8
    459e:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            print("C> ");
    45a2:	86 ed       	ldi	r24, 0xD6	; 214
    45a4:	9a e0       	ldi	r25, 0x0A	; 10
    45a6:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            command_state = CONSOLE;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <command_state>
            break;
    45b0:	08 95       	ret
            if (debug_enable) {
    45b2:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    45b6:	80 ff       	sbrs	r24, 0
    45b8:	0a c0       	rjmp	.+20     	; 0x45ce <command_common+0x116>
                print("\ndebug: off\n");
    45ba:	88 eb       	ldi	r24, 0xB8	; 184
    45bc:	9a e0       	ldi	r25, 0x0A	; 10
    45be:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
                debug_enable   = false;
    45c2:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    45c6:	80 7f       	andi	r24, 0xF0	; 240
                debug_enable = true;
    45c8:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <debug_config>
    45cc:	da cf       	rjmp	.-76     	; 0x4582 <command_common+0xca>
                print("\ndebug: on\n");
    45ce:	8c ea       	ldi	r24, 0xAC	; 172
    45d0:	9a e0       	ldi	r25, 0x0A	; 10
                print("\nmouse: on\n");
    45d2:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
                debug_enable = true;
    45d6:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <debug_config>
    45da:	81 60       	ori	r24, 0x01	; 1
    45dc:	f5 cf       	rjmp	.-22     	; 0x45c8 <command_common+0x110>
                print("\nmatrix: off\n");
    45de:	81 e9       	ldi	r24, 0x91	; 145
    45e0:	9a e0       	ldi	r25, 0x0A	; 10
    45e2:	d3 cf       	rjmp	.-90     	; 0x458a <command_common+0xd2>
            debug_keyboard = !debug_keyboard;
    45e4:	90 91 3d 04 	lds	r25, 0x043D	; 0x80043d <debug_config>
    45e8:	89 2f       	mov	r24, r25
    45ea:	8b 7f       	andi	r24, 0xFB	; 251
    45ec:	92 ff       	sbrs	r25, 2
    45ee:	84 60       	ori	r24, 0x04	; 4
    45f0:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <debug_config>
            if (debug_keyboard) {
    45f4:	82 ff       	sbrs	r24, 2
    45f6:	03 c0       	rjmp	.+6      	; 0x45fe <command_common+0x146>
                print("\nkeyboard: on\n");
    45f8:	82 e8       	ldi	r24, 0x82	; 130
    45fa:	9a e0       	ldi	r25, 0x0A	; 10
    45fc:	ea cf       	rjmp	.-44     	; 0x45d2 <command_common+0x11a>
                print("\nkeyboard: off\n");
    45fe:	82 e7       	ldi	r24, 0x72	; 114
    4600:	9a e0       	ldi	r25, 0x0A	; 10
    4602:	c3 cf       	rjmp	.-122    	; 0x458a <command_common+0xd2>
                print("\nmouse: off\n");
    4604:	89 e5       	ldi	r24, 0x59	; 89
    4606:	9a e0       	ldi	r25, 0x0A	; 10
    4608:	c0 cf       	rjmp	.-128    	; 0x458a <command_common+0xd2>
            print("\n\t- Version -\n");
    460a:	8a e4       	ldi	r24, 0x4A	; 74
    460c:	9a e0       	ldi	r25, 0x0A	; 10
    460e:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4612:	8a e1       	ldi	r24, 0x1A	; 26
    4614:	9a e0       	ldi	r25, 0x0A	; 10
    4616:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    461a:	84 ed       	ldi	r24, 0xD4	; 212
    461c:	99 e0       	ldi	r25, 0x09	; 9
    461e:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            print("BUILD: " STR(TMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4622:	8c ea       	ldi	r24, 0xAC	; 172
    4624:	99 e0       	ldi	r25, 0x09	; 9
    4626:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            print("OPTIONS:"
    462a:	86 e7       	ldi	r24, 0x76	; 118
    462c:	99 e0       	ldi	r25, 0x09	; 9
    462e:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4632:	8b e4       	ldi	r24, 0x4B	; 75
    4634:	99 e0       	ldi	r25, 0x09	; 9
    4636:	a9 cf       	rjmp	.-174    	; 0x458a <command_common+0xd2>
            print("\n\t- Status -\n");
    4638:	8d e3       	ldi	r24, 0x3D	; 61
    463a:	99 e0       	ldi	r25, 0x09	; 9
    463c:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            print_val_hex8(host_keyboard_leds());
    4640:	0e 94 40 10 	call	0x2080	; 0x2080 <host_keyboard_leds>
    4644:	1f 92       	push	r1
    4646:	8f 93       	push	r24
    4648:	83 e2       	ldi	r24, 0x23	; 35
    464a:	99 e0       	ldi	r25, 0x09	; 9
    464c:	9f 93       	push	r25
    464e:	8f 93       	push	r24
    4650:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4654:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    4658:	1f 92       	push	r1
    465a:	8f 93       	push	r24
    465c:	8c e0       	ldi	r24, 0x0C	; 12
    465e:	99 e0       	ldi	r25, 0x09	; 9
    4660:	9f 93       	push	r25
    4662:	8f 93       	push	r24
    4664:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
            print_val_hex8(keyboard_idle);
    4668:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <keyboard_idle>
    466c:	1f 92       	push	r1
    466e:	8f 93       	push	r24
    4670:	89 ef       	ldi	r24, 0xF9	; 249
    4672:	98 e0       	ldi	r25, 0x08	; 8
    4674:	9f 93       	push	r25
    4676:	8f 93       	push	r24
    4678:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
            print_val_hex32(timer_read32());
    467c:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <timer_read32>
    4680:	9f 93       	push	r25
    4682:	8f 93       	push	r24
    4684:	7f 93       	push	r23
    4686:	6f 93       	push	r22
    4688:	82 ee       	ldi	r24, 0xE2	; 226
    468a:	98 e0       	ldi	r25, 0x08	; 8
    468c:	9f 93       	push	r25
    468e:	8f 93       	push	r24
    4690:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
            break;
    4694:	8d b7       	in	r24, 0x3d	; 61
    4696:	9e b7       	in	r25, 0x3e	; 62
    4698:	42 96       	adiw	r24, 0x12	; 18
    469a:	0f b6       	in	r0, 0x3f	; 63
    469c:	f8 94       	cli
    469e:	9e bf       	out	0x3e, r25	; 62
    46a0:	0f be       	out	0x3f, r0	; 63
    46a2:	8d bf       	out	0x3d, r24	; 61
    46a4:	6e cf       	rjmp	.-292    	; 0x4582 <command_common+0xca>
            switch_default_layer((code - KC_1) + 1);
    46a6:	8d 51       	subi	r24, 0x1D	; 29
    46a8:	4e cf       	rjmp	.-356    	; 0x4546 <command_common+0x8e>

000046aa <command_extra>:
}
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	08 95       	ret

000046ae <command_console_extra>:
    46ae:	0c 94 55 23 	jmp	0x46aa	; 0x46aa <command_extra>

000046b2 <command_proc>:
{
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	cf 93       	push	r28
    46b8:	c8 2f       	mov	r28, r24
    switch (command_state) {
    46ba:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <command_state>
    46be:	81 30       	cpi	r24, 0x01	; 1
    46c0:	29 f1       	breq	.+74     	; 0x470c <command_proc+0x5a>
    46c2:	88 23       	and	r24, r24
    46c4:	39 f0       	breq	.+14     	; 0x46d4 <command_proc+0x22>
    46c6:	82 30       	cpi	r24, 0x02	; 2
    46c8:	09 f4       	brne	.+2      	; 0x46cc <command_proc+0x1a>
    46ca:	61 c0       	rjmp	.+194    	; 0x478e <command_proc+0xdc>
            command_state = ONESHOT;
    46cc:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <command_state>
                return false;
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	18 c0       	rjmp	.+48     	; 0x4704 <command_proc+0x52>
            if (!IS_COMMAND())
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	8c e0       	ldi	r24, 0x0C	; 12
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	0e 94 b2 11 	call	0x2364	; 0x2364 <matrix_is_on>
    46e0:	89 2b       	or	r24, r25
    46e2:	39 f4       	brne	.+14     	; 0x46f2 <command_proc+0x40>
    46e4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    46e8:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    46ec:	80 81       	ld	r24, Z
    46ee:	84 34       	cpi	r24, 0x44	; 68
    46f0:	79 f7       	brne	.-34     	; 0x46d0 <command_proc+0x1e>
                return (command_extra(code) || command_common(code));
    46f2:	8c 2f       	mov	r24, r28
    46f4:	0e 94 55 23 	call	0x46aa	; 0x46aa <command_extra>
    46f8:	81 11       	cpse	r24, r1
    46fa:	29 c0       	rjmp	.+82     	; 0x474e <command_proc+0x9c>
    46fc:	8c 2f       	mov	r24, r28
    46fe:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <command_common>
                return (command_console_extra(code) || command_console(code));
    4702:	81 70       	andi	r24, 0x01	; 1
}
    4704:	cf 91       	pop	r28
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
    470a:	08 95       	ret
            if (IS_COMMAND())
    470c:	70 e0       	ldi	r23, 0x00	; 0
    470e:	60 e0       	ldi	r22, 0x00	; 0
    4710:	8c e0       	ldi	r24, 0x0C	; 12
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	0e 94 b2 11 	call	0x2364	; 0x2364 <matrix_is_on>
    4718:	8c 01       	movw	r16, r24
    471a:	89 2b       	or	r24, r25
    471c:	51 f7       	brne	.-44     	; 0x46f2 <command_proc+0x40>
    471e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <keyboard_report>
    4722:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <keyboard_report+0x1>
    4726:	80 81       	ld	r24, Z
    4728:	84 34       	cpi	r24, 0x44	; 68
    472a:	19 f3       	breq	.-58     	; 0x46f2 <command_proc+0x40>
                return (command_console_extra(code) || command_console(code));
    472c:	8c 2f       	mov	r24, r28
    472e:	0e 94 57 23 	call	0x46ae	; 0x46ae <command_console_extra>
    4732:	81 11       	cpse	r24, r1
    4734:	1b c0       	rjmp	.+54     	; 0x476c <command_proc+0xba>
    switch (code) {
    4736:	c4 31       	cpi	r28, 0x14	; 20
    4738:	e1 f0       	breq	.+56     	; 0x4772 <command_proc+0xc0>
    473a:	60 f4       	brcc	.+24     	; 0x4754 <command_proc+0xa2>
    473c:	cb 30       	cpi	r28, 0x0B	; 11
    473e:	71 f0       	breq	.+28     	; 0x475c <command_proc+0xaa>
    4740:	c0 31       	cpi	r28, 0x10	; 16
    4742:	d9 f0       	breq	.+54     	; 0x477a <command_proc+0xc8>
            print("?");
    4744:	87 e1       	ldi	r24, 0x17	; 23
    4746:	98 e0       	ldi	r25, 0x08	; 8
    4748:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            return false;
    474c:	14 c0       	rjmp	.+40     	; 0x4776 <command_proc+0xc4>
                return (command_extra(code) || command_common(code));
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	d7 cf       	rjmp	.-82     	; 0x4702 <command_proc+0x50>
    switch (code) {
    4754:	c9 32       	cpi	r28, 0x29	; 41
    4756:	69 f0       	breq	.+26     	; 0x4772 <command_proc+0xc0>
    4758:	c8 33       	cpi	r28, 0x38	; 56
    475a:	a1 f7       	brne	.-24     	; 0x4744 <command_proc+0x92>
    print("\n\t- Console -\n"
    475c:	86 e2       	ldi	r24, 0x26	; 38
    475e:	98 e0       	ldi	r25, 0x08	; 8
    4760:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print("C> ");
    4764:	8d e1       	ldi	r24, 0x1D	; 29
    4766:	98 e0       	ldi	r25, 0x08	; 8
    4768:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
                return (command_console_extra(code) || command_console(code));
    476c:	01 e0       	ldi	r16, 0x01	; 1
    476e:	10 e0       	ldi	r17, 0x00	; 0
    4770:	02 c0       	rjmp	.+4      	; 0x4776 <command_proc+0xc4>
            command_state = ONESHOT;
    4772:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <command_state>
                return (command_console_extra(code) || command_console(code));
    4776:	80 2f       	mov	r24, r16
    4778:	c4 cf       	rjmp	.-120    	; 0x4702 <command_proc+0x50>
            mousekey_console_help();
    477a:	0e 94 04 21 	call	0x4208	; 0x4208 <mousekey_console_help>
            print("M> ");
    477e:	89 e1       	ldi	r24, 0x19	; 25
    4780:	98 e0       	ldi	r25, 0x08	; 8
    4782:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            command_state = MOUSEKEY;
    4786:	82 e0       	ldi	r24, 0x02	; 2
    4788:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <command_state>
            return true;
    478c:	ef cf       	rjmp	.-34     	; 0x476c <command_proc+0xba>
    switch (code) {
    478e:	c4 32       	cpi	r28, 0x24	; 36
    4790:	c8 f4       	brcc	.+50     	; 0x47c4 <command_proc+0x112>
    4792:	ce 31       	cpi	r28, 0x1E	; 30
    4794:	08 f0       	brcs	.+2      	; 0x4798 <command_proc+0xe6>
    4796:	be c0       	rjmp	.+380    	; 0x4914 <command_proc+0x262>
    4798:	cb 30       	cpi	r28, 0x0B	; 11
    479a:	e1 f0       	breq	.+56     	; 0x47d4 <command_proc+0x122>
    479c:	40 f4       	brcc	.+16     	; 0x47ae <command_proc+0xfc>
    479e:	c7 30       	cpi	r28, 0x07	; 7
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <command_proc+0xf2>
    47a2:	cf c0       	rjmp	.+414    	; 0x4942 <command_proc+0x290>
            print("?");
    47a4:	8b eb       	ldi	r24, 0xBB	; 187
    47a6:	96 e0       	ldi	r25, 0x06	; 6
        print("M>" );
    47a8:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    47ac:	26 c0       	rjmp	.+76     	; 0x47fa <command_proc+0x148>
    switch (code) {
    47ae:	c3 31       	cpi	r28, 0x13	; 19
    47b0:	c1 f1       	breq	.+112    	; 0x4822 <command_proc+0x170>
    47b2:	c4 31       	cpi	r28, 0x14	; 20
    47b4:	b9 f7       	brne	.-18     	; 0x47a4 <command_proc+0xf2>
            if (mousekey_param) {
    47b6:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <mousekey_param>
    47ba:	88 23       	and	r24, r24
    47bc:	51 f1       	breq	.+84     	; 0x4812 <command_proc+0x160>
                mousekey_param = 0;
    47be:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <mousekey_param>
            break;
    47c2:	0a c0       	rjmp	.+20     	; 0x47d8 <command_proc+0x126>
    switch (code) {
    47c4:	cb 34       	cpi	r28, 0x4B	; 75
    47c6:	09 f4       	brne	.+2      	; 0x47ca <command_proc+0x118>
    47c8:	ba c0       	rjmp	.+372    	; 0x493e <command_proc+0x28c>
    47ca:	c8 f4       	brcc	.+50     	; 0x47fe <command_proc+0x14c>
    47cc:	c9 32       	cpi	r28, 0x29	; 41
    47ce:	99 f3       	breq	.-26     	; 0x47b6 <command_proc+0x104>
    47d0:	c8 33       	cpi	r28, 0x38	; 56
    47d2:	41 f7       	brne	.-48     	; 0x47a4 <command_proc+0xf2>
            mousekey_console_help();
    47d4:	0e 94 04 21 	call	0x4208	; 0x4208 <mousekey_console_help>
    if (mousekey_param) {
    47d8:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <mousekey_param>
    47dc:	88 23       	and	r24, r24
    47de:	09 f4       	brne	.+2      	; 0x47e2 <command_proc+0x130>
    47e0:	c7 c0       	rjmp	.+398    	; 0x4970 <command_proc+0x2be>
        xprintf("M%d> ", mousekey_param);
    47e2:	1f 92       	push	r1
    47e4:	8f 93       	push	r24
    47e6:	85 eb       	ldi	r24, 0xB5	; 181
    47e8:	96 e0       	ldi	r25, 0x06	; 6
    47ea:	9f 93       	push	r25
    47ec:	8f 93       	push	r24
    47ee:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	0f 90       	pop	r0
    return true;
    47fa:	81 e0       	ldi	r24, 0x01	; 1
    47fc:	83 cf       	rjmp	.-250    	; 0x4704 <command_proc+0x52>
    switch (code) {
    47fe:	c1 35       	cpi	r28, 0x51	; 81
    4800:	09 f4       	brne	.+2      	; 0x4804 <command_proc+0x152>
    4802:	97 c0       	rjmp	.+302    	; 0x4932 <command_proc+0x280>
    4804:	c2 35       	cpi	r28, 0x52	; 82
    4806:	09 f4       	brne	.+2      	; 0x480a <command_proc+0x158>
    4808:	8e c0       	rjmp	.+284    	; 0x4926 <command_proc+0x274>
    480a:	ce 34       	cpi	r28, 0x4E	; 78
    480c:	59 f6       	brne	.-106    	; 0x47a4 <command_proc+0xf2>
            mousekey_param_dec(mousekey_param, 10);
    480e:	6a e0       	ldi	r22, 0x0A	; 10
    4810:	91 c0       	rjmp	.+290    	; 0x4934 <command_proc+0x282>
                print("C> ");
    4812:	8a ec       	ldi	r24, 0xCA	; 202
    4814:	96 e0       	ldi	r25, 0x06	; 6
    4816:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
                command_state = CONSOLE;
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <command_state>
                return false;
    4820:	71 cf       	rjmp	.-286    	; 0x4704 <command_proc+0x52>
    print("\n\t- Values -\n");
    4822:	84 ea       	ldi	r24, 0xA4	; 164
    4824:	96 e0       	ldi	r25, 0x06	; 6
    4826:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    482a:	82 e9       	ldi	r24, 0x92	; 146
    482c:	96 e0       	ldi	r25, 0x06	; 6
    482e:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    4832:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <mk_delay>
    4836:	1f 92       	push	r1
    4838:	8f 93       	push	r24
    483a:	8f e8       	ldi	r24, 0x8F	; 143
    483c:	96 e0       	ldi	r25, 0x06	; 6
    483e:	9f 93       	push	r25
    4840:	8f 93       	push	r24
    4842:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    4846:	8d e8       	ldi	r24, 0x8D	; 141
    4848:	96 e0       	ldi	r25, 0x06	; 6
    484a:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    484e:	8b e7       	ldi	r24, 0x7B	; 123
    4850:	96 e0       	ldi	r25, 0x06	; 6
    4852:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    4856:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <mk_interval>
    485a:	1f 92       	push	r1
    485c:	8f 93       	push	r24
    485e:	88 e7       	ldi	r24, 0x78	; 120
    4860:	96 e0       	ldi	r25, 0x06	; 6
    4862:	9f 93       	push	r25
    4864:	8f 93       	push	r24
    4866:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    486a:	86 e7       	ldi	r24, 0x76	; 118
    486c:	96 e0       	ldi	r25, 0x06	; 6
    486e:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4872:	87 e6       	ldi	r24, 0x67	; 103
    4874:	96 e0       	ldi	r25, 0x06	; 6
    4876:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    487a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <mk_max_speed>
    487e:	1f 92       	push	r1
    4880:	8f 93       	push	r24
    4882:	84 e6       	ldi	r24, 0x64	; 100
    4884:	96 e0       	ldi	r25, 0x06	; 6
    4886:	9f 93       	push	r25
    4888:	8f 93       	push	r24
    488a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    488e:	82 e6       	ldi	r24, 0x62	; 98
    4890:	96 e0       	ldi	r25, 0x06	; 6
    4892:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4896:	81 e5       	ldi	r24, 0x51	; 81
    4898:	96 e0       	ldi	r25, 0x06	; 6
    489a:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    489e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mk_time_to_max>
    48a2:	1f 92       	push	r1
    48a4:	8f 93       	push	r24
    48a6:	8e e4       	ldi	r24, 0x4E	; 78
    48a8:	96 e0       	ldi	r25, 0x06	; 6
    48aa:	9f 93       	push	r25
    48ac:	8f 93       	push	r24
    48ae:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    48b2:	8c e4       	ldi	r24, 0x4C	; 76
    48b4:	96 e0       	ldi	r25, 0x06	; 6
    48b6:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    48ba:	87 e3       	ldi	r24, 0x37	; 55
    48bc:	96 e0       	ldi	r25, 0x06	; 6
    48be:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    48c2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <mk_wheel_max_speed>
    48c6:	1f 92       	push	r1
    48c8:	8f 93       	push	r24
    48ca:	84 e3       	ldi	r24, 0x34	; 52
    48cc:	96 e0       	ldi	r25, 0x06	; 6
    48ce:	9f 93       	push	r25
    48d0:	8f 93       	push	r24
    48d2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    48d6:	82 e3       	ldi	r24, 0x32	; 50
    48d8:	96 e0       	ldi	r25, 0x06	; 6
    48da:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    48de:	8b e1       	ldi	r24, 0x1B	; 27
    48e0:	96 e0       	ldi	r25, 0x06	; 6
    48e2:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    48e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <mk_wheel_time_to_max>
    48ea:	1f 92       	push	r1
    48ec:	8f 93       	push	r24
    48ee:	88 e1       	ldi	r24, 0x18	; 24
    48f0:	96 e0       	ldi	r25, 0x06	; 6
    48f2:	9f 93       	push	r25
    48f4:	8f 93       	push	r24
    48f6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__xprintf>
    48fa:	86 e1       	ldi	r24, 0x16	; 22
    48fc:	96 e0       	ldi	r25, 0x06	; 6
    48fe:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
    4902:	8d b7       	in	r24, 0x3d	; 61
    4904:	9e b7       	in	r25, 0x3e	; 62
    4906:	48 96       	adiw	r24, 0x18	; 24
    4908:	0f b6       	in	r0, 0x3f	; 63
    490a:	f8 94       	cli
    490c:	9e bf       	out	0x3e, r25	; 62
    490e:	0f be       	out	0x3f, r0	; 63
    4910:	8d bf       	out	0x3d, r24	; 61
    4912:	62 cf       	rjmp	.-316    	; 0x47d8 <command_proc+0x126>
            mousekey_param = numkey2num(code);
    4914:	ce 51       	subi	r28, 0x1E	; 30
    4916:	ec 2f       	mov	r30, r28
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	e2 5d       	subi	r30, 0xD2	; 210
    491c:	fe 4f       	sbci	r31, 0xFE	; 254
    491e:	80 81       	ld	r24, Z
    4920:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <mousekey_param>
            break;
    4924:	59 cf       	rjmp	.-334    	; 0x47d8 <command_proc+0x126>
            mousekey_param_inc(mousekey_param, 1);
    4926:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_inc(mousekey_param, 10);
    4928:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <mousekey_param>
    492c:	0e 94 1b 21 	call	0x4236	; 0x4236 <mousekey_param_inc>
            break;
    4930:	53 cf       	rjmp	.-346    	; 0x47d8 <command_proc+0x126>
            mousekey_param_dec(mousekey_param, 1);
    4932:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    4934:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <mousekey_param>
    4938:	0e 94 bf 21 	call	0x437e	; 0x437e <mousekey_param_dec>
            break;
    493c:	4d cf       	rjmp	.-358    	; 0x47d8 <command_proc+0x126>
            mousekey_param_inc(mousekey_param, 10);
    493e:	6a e0       	ldi	r22, 0x0A	; 10
    4940:	f3 cf       	rjmp	.-26     	; 0x4928 <command_proc+0x276>
            mk_delay = MOUSEKEY_DELAY/10;
    4942:	8e e1       	ldi	r24, 0x1E	; 30
    4944:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    4948:	82 e3       	ldi	r24, 0x32	; 50
    494a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    494e:	8a e0       	ldi	r24, 0x0A	; 10
    4950:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4954:	84 e1       	ldi	r24, 0x14	; 20
    4956:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    495a:	88 e0       	ldi	r24, 0x08	; 8
    495c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4960:	88 e2       	ldi	r24, 0x28	; 40
    4962:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <mk_wheel_time_to_max>
            print("set default\n");
    4966:	8d eb       	ldi	r24, 0xBD	; 189
    4968:	96 e0       	ldi	r25, 0x06	; 6
    496a:	0e 94 c3 05 	call	0xb86	; 0xb86 <xputs>
            break;
    496e:	34 cf       	rjmp	.-408    	; 0x47d8 <command_proc+0x126>
        print("M>" );
    4970:	82 eb       	ldi	r24, 0xB2	; 178
    4972:	96 e0       	ldi	r25, 0x06	; 6
    4974:	19 cf       	rjmp	.-462    	; 0x47a8 <command_proc+0xf6>

00004976 <__fixsfsi>:
    4976:	0e 94 c2 24 	call	0x4984	; 0x4984 <__fixunssfsi>
    497a:	68 94       	set
    497c:	b1 11       	cpse	r27, r1
    497e:	0c 94 51 25 	jmp	0x4aa2	; 0x4aa2 <__fp_szero>
    4982:	08 95       	ret

00004984 <__fixunssfsi>:
    4984:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <__fp_splitA>
    4988:	88 f0       	brcs	.+34     	; 0x49ac <__fixunssfsi+0x28>
    498a:	9f 57       	subi	r25, 0x7F	; 127
    498c:	98 f0       	brcs	.+38     	; 0x49b4 <__fixunssfsi+0x30>
    498e:	b9 2f       	mov	r27, r25
    4990:	99 27       	eor	r25, r25
    4992:	b7 51       	subi	r27, 0x17	; 23
    4994:	b0 f0       	brcs	.+44     	; 0x49c2 <__fixunssfsi+0x3e>
    4996:	e1 f0       	breq	.+56     	; 0x49d0 <__fixunssfsi+0x4c>
    4998:	66 0f       	add	r22, r22
    499a:	77 1f       	adc	r23, r23
    499c:	88 1f       	adc	r24, r24
    499e:	99 1f       	adc	r25, r25
    49a0:	1a f0       	brmi	.+6      	; 0x49a8 <__fixunssfsi+0x24>
    49a2:	ba 95       	dec	r27
    49a4:	c9 f7       	brne	.-14     	; 0x4998 <__fixunssfsi+0x14>
    49a6:	14 c0       	rjmp	.+40     	; 0x49d0 <__fixunssfsi+0x4c>
    49a8:	b1 30       	cpi	r27, 0x01	; 1
    49aa:	91 f0       	breq	.+36     	; 0x49d0 <__fixunssfsi+0x4c>
    49ac:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <__fp_zero>
    49b0:	b1 e0       	ldi	r27, 0x01	; 1
    49b2:	08 95       	ret
    49b4:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__fp_zero>
    49b8:	67 2f       	mov	r22, r23
    49ba:	78 2f       	mov	r23, r24
    49bc:	88 27       	eor	r24, r24
    49be:	b8 5f       	subi	r27, 0xF8	; 248
    49c0:	39 f0       	breq	.+14     	; 0x49d0 <__fixunssfsi+0x4c>
    49c2:	b9 3f       	cpi	r27, 0xF9	; 249
    49c4:	cc f3       	brlt	.-14     	; 0x49b8 <__fixunssfsi+0x34>
    49c6:	86 95       	lsr	r24
    49c8:	77 95       	ror	r23
    49ca:	67 95       	ror	r22
    49cc:	b3 95       	inc	r27
    49ce:	d9 f7       	brne	.-10     	; 0x49c6 <__fixunssfsi+0x42>
    49d0:	3e f4       	brtc	.+14     	; 0x49e0 <__fixunssfsi+0x5c>
    49d2:	90 95       	com	r25
    49d4:	80 95       	com	r24
    49d6:	70 95       	com	r23
    49d8:	61 95       	neg	r22
    49da:	7f 4f       	sbci	r23, 0xFF	; 255
    49dc:	8f 4f       	sbci	r24, 0xFF	; 255
    49de:	9f 4f       	sbci	r25, 0xFF	; 255
    49e0:	08 95       	ret

000049e2 <__floatunsisf>:
    49e2:	e8 94       	clt
    49e4:	09 c0       	rjmp	.+18     	; 0x49f8 <__floatsisf+0x12>

000049e6 <__floatsisf>:
    49e6:	97 fb       	bst	r25, 7
    49e8:	3e f4       	brtc	.+14     	; 0x49f8 <__floatsisf+0x12>
    49ea:	90 95       	com	r25
    49ec:	80 95       	com	r24
    49ee:	70 95       	com	r23
    49f0:	61 95       	neg	r22
    49f2:	7f 4f       	sbci	r23, 0xFF	; 255
    49f4:	8f 4f       	sbci	r24, 0xFF	; 255
    49f6:	9f 4f       	sbci	r25, 0xFF	; 255
    49f8:	99 23       	and	r25, r25
    49fa:	a9 f0       	breq	.+42     	; 0x4a26 <__floatsisf+0x40>
    49fc:	f9 2f       	mov	r31, r25
    49fe:	96 e9       	ldi	r25, 0x96	; 150
    4a00:	bb 27       	eor	r27, r27
    4a02:	93 95       	inc	r25
    4a04:	f6 95       	lsr	r31
    4a06:	87 95       	ror	r24
    4a08:	77 95       	ror	r23
    4a0a:	67 95       	ror	r22
    4a0c:	b7 95       	ror	r27
    4a0e:	f1 11       	cpse	r31, r1
    4a10:	f8 cf       	rjmp	.-16     	; 0x4a02 <__floatsisf+0x1c>
    4a12:	fa f4       	brpl	.+62     	; 0x4a52 <__floatsisf+0x6c>
    4a14:	bb 0f       	add	r27, r27
    4a16:	11 f4       	brne	.+4      	; 0x4a1c <__floatsisf+0x36>
    4a18:	60 ff       	sbrs	r22, 0
    4a1a:	1b c0       	rjmp	.+54     	; 0x4a52 <__floatsisf+0x6c>
    4a1c:	6f 5f       	subi	r22, 0xFF	; 255
    4a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a20:	8f 4f       	sbci	r24, 0xFF	; 255
    4a22:	9f 4f       	sbci	r25, 0xFF	; 255
    4a24:	16 c0       	rjmp	.+44     	; 0x4a52 <__floatsisf+0x6c>
    4a26:	88 23       	and	r24, r24
    4a28:	11 f0       	breq	.+4      	; 0x4a2e <__floatsisf+0x48>
    4a2a:	96 e9       	ldi	r25, 0x96	; 150
    4a2c:	11 c0       	rjmp	.+34     	; 0x4a50 <__floatsisf+0x6a>
    4a2e:	77 23       	and	r23, r23
    4a30:	21 f0       	breq	.+8      	; 0x4a3a <__floatsisf+0x54>
    4a32:	9e e8       	ldi	r25, 0x8E	; 142
    4a34:	87 2f       	mov	r24, r23
    4a36:	76 2f       	mov	r23, r22
    4a38:	05 c0       	rjmp	.+10     	; 0x4a44 <__floatsisf+0x5e>
    4a3a:	66 23       	and	r22, r22
    4a3c:	71 f0       	breq	.+28     	; 0x4a5a <__floatsisf+0x74>
    4a3e:	96 e8       	ldi	r25, 0x86	; 134
    4a40:	86 2f       	mov	r24, r22
    4a42:	70 e0       	ldi	r23, 0x00	; 0
    4a44:	60 e0       	ldi	r22, 0x00	; 0
    4a46:	2a f0       	brmi	.+10     	; 0x4a52 <__floatsisf+0x6c>
    4a48:	9a 95       	dec	r25
    4a4a:	66 0f       	add	r22, r22
    4a4c:	77 1f       	adc	r23, r23
    4a4e:	88 1f       	adc	r24, r24
    4a50:	da f7       	brpl	.-10     	; 0x4a48 <__floatsisf+0x62>
    4a52:	88 0f       	add	r24, r24
    4a54:	96 95       	lsr	r25
    4a56:	87 95       	ror	r24
    4a58:	97 f9       	bld	r25, 7
    4a5a:	08 95       	ret

00004a5c <__fp_split3>:
    4a5c:	57 fd       	sbrc	r21, 7
    4a5e:	90 58       	subi	r25, 0x80	; 128
    4a60:	44 0f       	add	r20, r20
    4a62:	55 1f       	adc	r21, r21
    4a64:	59 f0       	breq	.+22     	; 0x4a7c <__fp_splitA+0x10>
    4a66:	5f 3f       	cpi	r21, 0xFF	; 255
    4a68:	71 f0       	breq	.+28     	; 0x4a86 <__fp_splitA+0x1a>
    4a6a:	47 95       	ror	r20

00004a6c <__fp_splitA>:
    4a6c:	88 0f       	add	r24, r24
    4a6e:	97 fb       	bst	r25, 7
    4a70:	99 1f       	adc	r25, r25
    4a72:	61 f0       	breq	.+24     	; 0x4a8c <__fp_splitA+0x20>
    4a74:	9f 3f       	cpi	r25, 0xFF	; 255
    4a76:	79 f0       	breq	.+30     	; 0x4a96 <__fp_splitA+0x2a>
    4a78:	87 95       	ror	r24
    4a7a:	08 95       	ret
    4a7c:	12 16       	cp	r1, r18
    4a7e:	13 06       	cpc	r1, r19
    4a80:	14 06       	cpc	r1, r20
    4a82:	55 1f       	adc	r21, r21
    4a84:	f2 cf       	rjmp	.-28     	; 0x4a6a <__fp_split3+0xe>
    4a86:	46 95       	lsr	r20
    4a88:	f1 df       	rcall	.-30     	; 0x4a6c <__fp_splitA>
    4a8a:	08 c0       	rjmp	.+16     	; 0x4a9c <__fp_splitA+0x30>
    4a8c:	16 16       	cp	r1, r22
    4a8e:	17 06       	cpc	r1, r23
    4a90:	18 06       	cpc	r1, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	f1 cf       	rjmp	.-30     	; 0x4a78 <__fp_splitA+0xc>
    4a96:	86 95       	lsr	r24
    4a98:	71 05       	cpc	r23, r1
    4a9a:	61 05       	cpc	r22, r1
    4a9c:	08 94       	sec
    4a9e:	08 95       	ret

00004aa0 <__fp_zero>:
    4aa0:	e8 94       	clt

00004aa2 <__fp_szero>:
    4aa2:	bb 27       	eor	r27, r27
    4aa4:	66 27       	eor	r22, r22
    4aa6:	77 27       	eor	r23, r23
    4aa8:	cb 01       	movw	r24, r22
    4aaa:	97 f9       	bld	r25, 7
    4aac:	08 95       	ret

00004aae <__mulsf3>:
    4aae:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__mulsf3x>
    4ab2:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__fp_round>
    4ab6:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <__fp_pscA>
    4aba:	38 f0       	brcs	.+14     	; 0x4aca <__mulsf3+0x1c>
    4abc:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <__fp_pscB>
    4ac0:	20 f0       	brcs	.+8      	; 0x4aca <__mulsf3+0x1c>
    4ac2:	95 23       	and	r25, r21
    4ac4:	11 f0       	breq	.+4      	; 0x4aca <__mulsf3+0x1c>
    4ac6:	0c 94 c4 25 	jmp	0x4b88	; 0x4b88 <__fp_inf>
    4aca:	0c 94 ca 25 	jmp	0x4b94	; 0x4b94 <__fp_nan>
    4ace:	11 24       	eor	r1, r1
    4ad0:	0c 94 51 25 	jmp	0x4aa2	; 0x4aa2 <__fp_szero>

00004ad4 <__mulsf3x>:
    4ad4:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <__fp_split3>
    4ad8:	70 f3       	brcs	.-36     	; 0x4ab6 <__mulsf3+0x8>

00004ada <__mulsf3_pse>:
    4ada:	95 9f       	mul	r25, r21
    4adc:	c1 f3       	breq	.-16     	; 0x4ace <__mulsf3+0x20>
    4ade:	95 0f       	add	r25, r21
    4ae0:	50 e0       	ldi	r21, 0x00	; 0
    4ae2:	55 1f       	adc	r21, r21
    4ae4:	62 9f       	mul	r22, r18
    4ae6:	f0 01       	movw	r30, r0
    4ae8:	72 9f       	mul	r23, r18
    4aea:	bb 27       	eor	r27, r27
    4aec:	f0 0d       	add	r31, r0
    4aee:	b1 1d       	adc	r27, r1
    4af0:	63 9f       	mul	r22, r19
    4af2:	aa 27       	eor	r26, r26
    4af4:	f0 0d       	add	r31, r0
    4af6:	b1 1d       	adc	r27, r1
    4af8:	aa 1f       	adc	r26, r26
    4afa:	64 9f       	mul	r22, r20
    4afc:	66 27       	eor	r22, r22
    4afe:	b0 0d       	add	r27, r0
    4b00:	a1 1d       	adc	r26, r1
    4b02:	66 1f       	adc	r22, r22
    4b04:	82 9f       	mul	r24, r18
    4b06:	22 27       	eor	r18, r18
    4b08:	b0 0d       	add	r27, r0
    4b0a:	a1 1d       	adc	r26, r1
    4b0c:	62 1f       	adc	r22, r18
    4b0e:	73 9f       	mul	r23, r19
    4b10:	b0 0d       	add	r27, r0
    4b12:	a1 1d       	adc	r26, r1
    4b14:	62 1f       	adc	r22, r18
    4b16:	83 9f       	mul	r24, r19
    4b18:	a0 0d       	add	r26, r0
    4b1a:	61 1d       	adc	r22, r1
    4b1c:	22 1f       	adc	r18, r18
    4b1e:	74 9f       	mul	r23, r20
    4b20:	33 27       	eor	r19, r19
    4b22:	a0 0d       	add	r26, r0
    4b24:	61 1d       	adc	r22, r1
    4b26:	23 1f       	adc	r18, r19
    4b28:	84 9f       	mul	r24, r20
    4b2a:	60 0d       	add	r22, r0
    4b2c:	21 1d       	adc	r18, r1
    4b2e:	82 2f       	mov	r24, r18
    4b30:	76 2f       	mov	r23, r22
    4b32:	6a 2f       	mov	r22, r26
    4b34:	11 24       	eor	r1, r1
    4b36:	9f 57       	subi	r25, 0x7F	; 127
    4b38:	50 40       	sbci	r21, 0x00	; 0
    4b3a:	9a f0       	brmi	.+38     	; 0x4b62 <__mulsf3_pse+0x88>
    4b3c:	f1 f0       	breq	.+60     	; 0x4b7a <__mulsf3_pse+0xa0>
    4b3e:	88 23       	and	r24, r24
    4b40:	4a f0       	brmi	.+18     	; 0x4b54 <__mulsf3_pse+0x7a>
    4b42:	ee 0f       	add	r30, r30
    4b44:	ff 1f       	adc	r31, r31
    4b46:	bb 1f       	adc	r27, r27
    4b48:	66 1f       	adc	r22, r22
    4b4a:	77 1f       	adc	r23, r23
    4b4c:	88 1f       	adc	r24, r24
    4b4e:	91 50       	subi	r25, 0x01	; 1
    4b50:	50 40       	sbci	r21, 0x00	; 0
    4b52:	a9 f7       	brne	.-22     	; 0x4b3e <__mulsf3_pse+0x64>
    4b54:	9e 3f       	cpi	r25, 0xFE	; 254
    4b56:	51 05       	cpc	r21, r1
    4b58:	80 f0       	brcs	.+32     	; 0x4b7a <__mulsf3_pse+0xa0>
    4b5a:	0c 94 c4 25 	jmp	0x4b88	; 0x4b88 <__fp_inf>
    4b5e:	0c 94 51 25 	jmp	0x4aa2	; 0x4aa2 <__fp_szero>
    4b62:	5f 3f       	cpi	r21, 0xFF	; 255
    4b64:	e4 f3       	brlt	.-8      	; 0x4b5e <__mulsf3_pse+0x84>
    4b66:	98 3e       	cpi	r25, 0xE8	; 232
    4b68:	d4 f3       	brlt	.-12     	; 0x4b5e <__mulsf3_pse+0x84>
    4b6a:	86 95       	lsr	r24
    4b6c:	77 95       	ror	r23
    4b6e:	67 95       	ror	r22
    4b70:	b7 95       	ror	r27
    4b72:	f7 95       	ror	r31
    4b74:	e7 95       	ror	r30
    4b76:	9f 5f       	subi	r25, 0xFF	; 255
    4b78:	c1 f7       	brne	.-16     	; 0x4b6a <__mulsf3_pse+0x90>
    4b7a:	fe 2b       	or	r31, r30
    4b7c:	88 0f       	add	r24, r24
    4b7e:	91 1d       	adc	r25, r1
    4b80:	96 95       	lsr	r25
    4b82:	87 95       	ror	r24
    4b84:	97 f9       	bld	r25, 7
    4b86:	08 95       	ret

00004b88 <__fp_inf>:
    4b88:	97 f9       	bld	r25, 7
    4b8a:	9f 67       	ori	r25, 0x7F	; 127
    4b8c:	80 e8       	ldi	r24, 0x80	; 128
    4b8e:	70 e0       	ldi	r23, 0x00	; 0
    4b90:	60 e0       	ldi	r22, 0x00	; 0
    4b92:	08 95       	ret

00004b94 <__fp_nan>:
    4b94:	9f ef       	ldi	r25, 0xFF	; 255
    4b96:	80 ec       	ldi	r24, 0xC0	; 192
    4b98:	08 95       	ret

00004b9a <__fp_pscA>:
    4b9a:	00 24       	eor	r0, r0
    4b9c:	0a 94       	dec	r0
    4b9e:	16 16       	cp	r1, r22
    4ba0:	17 06       	cpc	r1, r23
    4ba2:	18 06       	cpc	r1, r24
    4ba4:	09 06       	cpc	r0, r25
    4ba6:	08 95       	ret

00004ba8 <__fp_pscB>:
    4ba8:	00 24       	eor	r0, r0
    4baa:	0a 94       	dec	r0
    4bac:	12 16       	cp	r1, r18
    4bae:	13 06       	cpc	r1, r19
    4bb0:	14 06       	cpc	r1, r20
    4bb2:	05 06       	cpc	r0, r21
    4bb4:	08 95       	ret

00004bb6 <__fp_round>:
    4bb6:	09 2e       	mov	r0, r25
    4bb8:	03 94       	inc	r0
    4bba:	00 0c       	add	r0, r0
    4bbc:	11 f4       	brne	.+4      	; 0x4bc2 <__fp_round+0xc>
    4bbe:	88 23       	and	r24, r24
    4bc0:	52 f0       	brmi	.+20     	; 0x4bd6 <__fp_round+0x20>
    4bc2:	bb 0f       	add	r27, r27
    4bc4:	40 f4       	brcc	.+16     	; 0x4bd6 <__fp_round+0x20>
    4bc6:	bf 2b       	or	r27, r31
    4bc8:	11 f4       	brne	.+4      	; 0x4bce <__fp_round+0x18>
    4bca:	60 ff       	sbrs	r22, 0
    4bcc:	04 c0       	rjmp	.+8      	; 0x4bd6 <__fp_round+0x20>
    4bce:	6f 5f       	subi	r22, 0xFF	; 255
    4bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    4bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bd6:	08 95       	ret

00004bd8 <__divmodhi4>:
    4bd8:	97 fb       	bst	r25, 7
    4bda:	07 2e       	mov	r0, r23
    4bdc:	16 f4       	brtc	.+4      	; 0x4be2 <__divmodhi4+0xa>
    4bde:	00 94       	com	r0
    4be0:	07 d0       	rcall	.+14     	; 0x4bf0 <__divmodhi4_neg1>
    4be2:	77 fd       	sbrc	r23, 7
    4be4:	09 d0       	rcall	.+18     	; 0x4bf8 <__divmodhi4_neg2>
    4be6:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <__udivmodhi4>
    4bea:	07 fc       	sbrc	r0, 7
    4bec:	05 d0       	rcall	.+10     	; 0x4bf8 <__divmodhi4_neg2>
    4bee:	3e f4       	brtc	.+14     	; 0x4bfe <__divmodhi4_exit>

00004bf0 <__divmodhi4_neg1>:
    4bf0:	90 95       	com	r25
    4bf2:	81 95       	neg	r24
    4bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf6:	08 95       	ret

00004bf8 <__divmodhi4_neg2>:
    4bf8:	70 95       	com	r23
    4bfa:	61 95       	neg	r22
    4bfc:	7f 4f       	sbci	r23, 0xFF	; 255

00004bfe <__divmodhi4_exit>:
    4bfe:	08 95       	ret

00004c00 <__tablejump2__>:
    4c00:	ee 0f       	add	r30, r30
    4c02:	ff 1f       	adc	r31, r31
    4c04:	05 90       	lpm	r0, Z+
    4c06:	f4 91       	lpm	r31, Z
    4c08:	e0 2d       	mov	r30, r0
    4c0a:	09 94       	ijmp

00004c0c <__udivmodhi4>:
    4c0c:	aa 1b       	sub	r26, r26
    4c0e:	bb 1b       	sub	r27, r27
    4c10:	51 e1       	ldi	r21, 0x11	; 17
    4c12:	07 c0       	rjmp	.+14     	; 0x4c22 <__udivmodhi4_ep>

00004c14 <__udivmodhi4_loop>:
    4c14:	aa 1f       	adc	r26, r26
    4c16:	bb 1f       	adc	r27, r27
    4c18:	a6 17       	cp	r26, r22
    4c1a:	b7 07       	cpc	r27, r23
    4c1c:	10 f0       	brcs	.+4      	; 0x4c22 <__udivmodhi4_ep>
    4c1e:	a6 1b       	sub	r26, r22
    4c20:	b7 0b       	sbc	r27, r23

00004c22 <__udivmodhi4_ep>:
    4c22:	88 1f       	adc	r24, r24
    4c24:	99 1f       	adc	r25, r25
    4c26:	5a 95       	dec	r21
    4c28:	a9 f7       	brne	.-22     	; 0x4c14 <__udivmodhi4_loop>
    4c2a:	80 95       	com	r24
    4c2c:	90 95       	com	r25
    4c2e:	bc 01       	movw	r22, r24
    4c30:	cd 01       	movw	r24, r26
    4c32:	08 95       	ret

00004c34 <_exit>:
    4c34:	f8 94       	cli

00004c36 <__stop_program>:
    4c36:	ff cf       	rjmp	.-2      	; 0x4c36 <__stop_program>
    4c38:	ac 0d       	add	r26, r12
    4c3a:	d4 0d       	add	r29, r4
    4c3c:	bd 0e       	add	r11, r29
    4c3e:	d4 0d       	add	r29, r4
    4c40:	bd 0e       	add	r11, r29
    4c42:	07 0e       	add	r0, r23
    4c44:	28 0e       	add	r2, r24
    4c46:	bd 0e       	add	r11, r29
    4c48:	7f 0e       	add	r7, r31
    4c4a:	8b 0e       	add	r8, r27
    4c4c:	a3 13       	cpse	r26, r19
    4c4e:	a3 13       	cpse	r26, r19
    4c50:	df 13       	cpse	r29, r31
    4c52:	df 13       	cpse	r29, r31
    4c54:	64 14       	cp	r6, r4
    4c56:	9a 14       	cp	r9, r10
    4c58:	93 13       	cpse	r25, r19
    4c5a:	93 13       	cpse	r25, r19
    4c5c:	b3 14       	cp	r11, r3
    4c5e:	93 13       	cpse	r25, r19
    4c60:	9f 15       	cp	r25, r15
    4c62:	9f 15       	cp	r25, r15
    4c64:	44 16       	cp	r4, r20
    4c66:	93 13       	cpse	r25, r19
    4c68:	5b 16       	cp	r5, r27
    4c6a:	7c 16       	cp	r7, r28
