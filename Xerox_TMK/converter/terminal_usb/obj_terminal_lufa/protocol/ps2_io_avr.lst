   1               		.file	"ps2_io_avr.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.clock_init,"ax",@progbits
  11               	.global	clock_init
  13               	clock_init:
  14               	.LFB6:
  15               		.file 1 "../../tmk_core/protocol/ps2_io_avr.c"
   1:../../tmk_core/protocol/ps2_io_avr.c **** #include <stdbool.h>
   2:../../tmk_core/protocol/ps2_io_avr.c **** #include <avr/io.h>
   3:../../tmk_core/protocol/ps2_io_avr.c **** #include <util/delay.h>
   4:../../tmk_core/protocol/ps2_io_avr.c **** 
   5:../../tmk_core/protocol/ps2_io_avr.c **** /* Check port settings for clock and data line */
   6:../../tmk_core/protocol/ps2_io_avr.c **** #if !(defined(PS2_CLOCK_PORT) && \
   7:../../tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_CLOCK_PIN) && \
   8:../../tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_CLOCK_DDR) && \
   9:../../tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_CLOCK_BIT))
  10:../../tmk_core/protocol/ps2_io_avr.c **** #   error "PS/2 clock port setting is required in config.h"
  11:../../tmk_core/protocol/ps2_io_avr.c **** #endif
  12:../../tmk_core/protocol/ps2_io_avr.c **** 
  13:../../tmk_core/protocol/ps2_io_avr.c **** #if !(defined(PS2_DATA_PORT) && \
  14:../../tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_DATA_PIN) && \
  15:../../tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_DATA_DDR) && \
  16:../../tmk_core/protocol/ps2_io_avr.c ****       defined(PS2_DATA_BIT))
  17:../../tmk_core/protocol/ps2_io_avr.c **** #   error "PS/2 data port setting is required in config.h"
  18:../../tmk_core/protocol/ps2_io_avr.c **** #endif
  19:../../tmk_core/protocol/ps2_io_avr.c **** 
  20:../../tmk_core/protocol/ps2_io_avr.c **** 
  21:../../tmk_core/protocol/ps2_io_avr.c **** /*
  22:../../tmk_core/protocol/ps2_io_avr.c ****  * Clock
  23:../../tmk_core/protocol/ps2_io_avr.c ****  */
  24:../../tmk_core/protocol/ps2_io_avr.c **** void clock_init(void)
  25:../../tmk_core/protocol/ps2_io_avr.c **** {
  16               		.loc 1 25 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  26:../../tmk_core/protocol/ps2_io_avr.c **** }
  22               		.loc 1 26 1 view .LVU1
  23               	/* epilogue start */
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE6:
  28               		.section	.text.clock_lo,"ax",@progbits
  29               	.global	clock_lo
  31               	clock_lo:
  32               	.LFB7:
  27:../../tmk_core/protocol/ps2_io_avr.c **** 
  28:../../tmk_core/protocol/ps2_io_avr.c **** void clock_lo(void)
  29:../../tmk_core/protocol/ps2_io_avr.c **** {
  33               		.loc 1 29 1 view -0
  34               		.cfi_startproc
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  30:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_PORT &= ~(1<<PS2_CLOCK_BIT);
  39               		.loc 1 30 5 view .LVU3
  40               		.loc 1 30 20 is_stmt 0 view .LVU4
  41 0000 5998      		cbi 0xb,1
  31:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_DDR  |=  (1<<PS2_CLOCK_BIT);
  42               		.loc 1 31 5 is_stmt 1 view .LVU5
  43               		.loc 1 31 20 is_stmt 0 view .LVU6
  44 0002 519A      		sbi 0xa,1
  45               	/* epilogue start */
  32:../../tmk_core/protocol/ps2_io_avr.c **** }
  46               		.loc 1 32 1 view .LVU7
  47 0004 0895      		ret
  48               		.cfi_endproc
  49               	.LFE7:
  51               		.section	.text.clock_hi,"ax",@progbits
  52               	.global	clock_hi
  54               	clock_hi:
  55               	.LFB8:
  33:../../tmk_core/protocol/ps2_io_avr.c **** 
  34:../../tmk_core/protocol/ps2_io_avr.c **** void clock_hi(void)
  35:../../tmk_core/protocol/ps2_io_avr.c **** {
  56               		.loc 1 35 1 is_stmt 1 view -0
  57               		.cfi_startproc
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  36:../../tmk_core/protocol/ps2_io_avr.c ****     /* input with pull up */
  37:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
  62               		.loc 1 37 5 view .LVU9
  63               		.loc 1 37 20 is_stmt 0 view .LVU10
  64 0000 5198      		cbi 0xa,1
  38:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
  65               		.loc 1 38 5 is_stmt 1 view .LVU11
  66               		.loc 1 38 20 is_stmt 0 view .LVU12
  67 0002 599A      		sbi 0xb,1
  68               	/* epilogue start */
  39:../../tmk_core/protocol/ps2_io_avr.c **** }
  69               		.loc 1 39 1 view .LVU13
  70 0004 0895      		ret
  71               		.cfi_endproc
  72               	.LFE8:
  74               		.section	.text.clock_in,"ax",@progbits
  75               	.global	clock_in
  77               	clock_in:
  78               	.LFB9:
  40:../../tmk_core/protocol/ps2_io_avr.c **** 
  41:../../tmk_core/protocol/ps2_io_avr.c **** bool clock_in(void)
  42:../../tmk_core/protocol/ps2_io_avr.c **** {
  79               		.loc 1 42 1 is_stmt 1 view -0
  80               		.cfi_startproc
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  43:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
  85               		.loc 1 43 5 view .LVU15
  86               		.loc 1 43 20 is_stmt 0 view .LVU16
  87 0000 5198      		cbi 0xa,1
  44:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
  88               		.loc 1 44 5 is_stmt 1 view .LVU17
  89               		.loc 1 44 20 is_stmt 0 view .LVU18
  90 0002 599A      		sbi 0xb,1
  45:../../tmk_core/protocol/ps2_io_avr.c ****     _delay_us(1);
  91               		.loc 1 45 5 is_stmt 1 view .LVU19
  92               	.LVL0:
  93               	.LBB6:
  94               	.LBI6:
  95               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
  96               		.loc 2 255 1 view .LVU20
  97               	.LBB7:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
  98               		.loc 2 257 2 view .LVU21
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  99               		.loc 2 261 2 view .LVU22
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 100               		.loc 2 262 2 view .LVU23
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 101               		.loc 2 263 2 view .LVU24
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 102               		.loc 2 273 3 view .LVU25
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 103               		.loc 2 276 2 view .LVU26
 104 0004 85E0      		ldi r24,lo8(5)
 105 0006 8A95      	1:	dec r24
 106 0008 01F4      		brne 1b
 107 000a 0000      		nop
 108               	.LVL1:
 109               		.loc 2 276 2 is_stmt 0 view .LVU27
 110               	.LBE7:
 111               	.LBE6:
  46:../../tmk_core/protocol/ps2_io_avr.c ****     return PS2_CLOCK_PIN&(1<<PS2_CLOCK_BIT);
 112               		.loc 1 46 5 is_stmt 1 view .LVU28
 113               		.loc 1 46 12 is_stmt 0 view .LVU29
 114 000c 89B1      		in r24,0x9
  47:../../tmk_core/protocol/ps2_io_avr.c **** }
 115               		.loc 1 47 1 view .LVU30
 116 000e 8695      		lsr r24
 117 0010 8170      		andi r24,1
 118               	/* epilogue start */
 119 0012 0895      		ret
 120               		.cfi_endproc
 121               	.LFE9:
 123               		.section	.text.data_init,"ax",@progbits
 124               	.global	data_init
 126               	data_init:
 127               	.LFB15:
 128               		.cfi_startproc
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 0 */
 132               	.L__stack_usage = 0
 133               	/* epilogue start */
 134 0000 0895      		ret
 135               		.cfi_endproc
 136               	.LFE15:
 138               		.section	.text.data_lo,"ax",@progbits
 139               	.global	data_lo
 141               	data_lo:
 142               	.LFB11:
  48:../../tmk_core/protocol/ps2_io_avr.c **** 
  49:../../tmk_core/protocol/ps2_io_avr.c **** /*
  50:../../tmk_core/protocol/ps2_io_avr.c ****  * Data
  51:../../tmk_core/protocol/ps2_io_avr.c ****  */
  52:../../tmk_core/protocol/ps2_io_avr.c **** void data_init(void)
  53:../../tmk_core/protocol/ps2_io_avr.c **** {
  54:../../tmk_core/protocol/ps2_io_avr.c **** }
  55:../../tmk_core/protocol/ps2_io_avr.c **** 
  56:../../tmk_core/protocol/ps2_io_avr.c **** void data_lo(void)
  57:../../tmk_core/protocol/ps2_io_avr.c **** {
 143               		.loc 1 57 1 is_stmt 1 view -0
 144               		.cfi_startproc
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
  58:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_PORT &= ~(1<<PS2_DATA_BIT);
 149               		.loc 1 58 5 view .LVU32
 150               		.loc 1 58 19 is_stmt 0 view .LVU33
 151 0000 5898      		cbi 0xb,0
  59:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_DDR  |=  (1<<PS2_DATA_BIT);
 152               		.loc 1 59 5 is_stmt 1 view .LVU34
 153               		.loc 1 59 19 is_stmt 0 view .LVU35
 154 0002 509A      		sbi 0xa,0
 155               	/* epilogue start */
  60:../../tmk_core/protocol/ps2_io_avr.c **** }
 156               		.loc 1 60 1 view .LVU36
 157 0004 0895      		ret
 158               		.cfi_endproc
 159               	.LFE11:
 161               		.section	.text.data_hi,"ax",@progbits
 162               	.global	data_hi
 164               	data_hi:
 165               	.LFB12:
  61:../../tmk_core/protocol/ps2_io_avr.c **** 
  62:../../tmk_core/protocol/ps2_io_avr.c **** void data_hi(void)
  63:../../tmk_core/protocol/ps2_io_avr.c **** {
 166               		.loc 1 63 1 is_stmt 1 view -0
 167               		.cfi_startproc
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 0 */
 171               	.L__stack_usage = 0
  64:../../tmk_core/protocol/ps2_io_avr.c ****     /* input with pull up */
  65:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
 172               		.loc 1 65 5 view .LVU38
 173               		.loc 1 65 19 is_stmt 0 view .LVU39
 174 0000 5098      		cbi 0xa,0
  66:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
 175               		.loc 1 66 5 is_stmt 1 view .LVU40
 176               		.loc 1 66 19 is_stmt 0 view .LVU41
 177 0002 589A      		sbi 0xb,0
 178               	/* epilogue start */
  67:../../tmk_core/protocol/ps2_io_avr.c **** }
 179               		.loc 1 67 1 view .LVU42
 180 0004 0895      		ret
 181               		.cfi_endproc
 182               	.LFE12:
 184               		.section	.text.data_in,"ax",@progbits
 185               	.global	data_in
 187               	data_in:
 188               	.LFB13:
  68:../../tmk_core/protocol/ps2_io_avr.c **** 
  69:../../tmk_core/protocol/ps2_io_avr.c **** bool data_in(void)
  70:../../tmk_core/protocol/ps2_io_avr.c **** {
 189               		.loc 1 70 1 is_stmt 1 view -0
 190               		.cfi_startproc
 191               	/* prologue: function */
 192               	/* frame size = 0 */
 193               	/* stack size = 0 */
 194               	.L__stack_usage = 0
  71:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
 195               		.loc 1 71 5 view .LVU44
 196               		.loc 1 71 19 is_stmt 0 view .LVU45
 197 0000 5098      		cbi 0xa,0
  72:../../tmk_core/protocol/ps2_io_avr.c ****     PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
 198               		.loc 1 72 5 is_stmt 1 view .LVU46
 199               		.loc 1 72 19 is_stmt 0 view .LVU47
 200 0002 589A      		sbi 0xb,0
  73:../../tmk_core/protocol/ps2_io_avr.c ****     _delay_us(1);
 201               		.loc 1 73 5 is_stmt 1 view .LVU48
 202               	.LVL2:
 203               	.LBB8:
 204               	.LBI8:
 255:/usr/avr/include/util/delay.h **** {
 205               		.loc 2 255 1 view .LVU49
 206               	.LBB9:
 257:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 207               		.loc 2 257 2 view .LVU50
 261:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 208               		.loc 2 261 2 view .LVU51
 262:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 209               		.loc 2 262 2 view .LVU52
 263:/usr/avr/include/util/delay.h **** 
 210               		.loc 2 263 2 view .LVU53
 273:/usr/avr/include/util/delay.h **** 	#endif
 211               		.loc 2 273 3 view .LVU54
 212               		.loc 2 276 2 view .LVU55
 213 0004 85E0      		ldi r24,lo8(5)
 214 0006 8A95      	1:	dec r24
 215 0008 01F4      		brne 1b
 216 000a 0000      		nop
 217               	.LVL3:
 218               		.loc 2 276 2 is_stmt 0 view .LVU56
 219               	.LBE9:
 220               	.LBE8:
  74:../../tmk_core/protocol/ps2_io_avr.c ****     return PS2_DATA_PIN&(1<<PS2_DATA_BIT);
 221               		.loc 1 74 5 is_stmt 1 view .LVU57
 222               		.loc 1 74 12 is_stmt 0 view .LVU58
 223 000c 89B1      		in r24,0x9
  75:../../tmk_core/protocol/ps2_io_avr.c **** }
 224               		.loc 1 75 1 view .LVU59
 225 000e 8170      		andi r24,lo8(1)
 226               	/* epilogue start */
 227 0010 0895      		ret
 228               		.cfi_endproc
 229               	.LFE13:
 231               		.text
 232               	.Letext0:
 233               		.file 3 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ps2_io_avr.c
     /tmp/ccJlYfnU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccJlYfnU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccJlYfnU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccJlYfnU.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccJlYfnU.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccJlYfnU.s:13     .text.clock_init:0000000000000000 clock_init
     /tmp/ccJlYfnU.s:31     .text.clock_lo:0000000000000000 clock_lo
     /tmp/ccJlYfnU.s:54     .text.clock_hi:0000000000000000 clock_hi
     /tmp/ccJlYfnU.s:77     .text.clock_in:0000000000000000 clock_in
     /tmp/ccJlYfnU.s:126    .text.data_init:0000000000000000 data_init
     /tmp/ccJlYfnU.s:141    .text.data_lo:0000000000000000 data_lo
     /tmp/ccJlYfnU.s:164    .text.data_hi:0000000000000000 data_hi
     /tmp/ccJlYfnU.s:187    .text.data_in:0000000000000000 data_in

NO UNDEFINED SYMBOLS
