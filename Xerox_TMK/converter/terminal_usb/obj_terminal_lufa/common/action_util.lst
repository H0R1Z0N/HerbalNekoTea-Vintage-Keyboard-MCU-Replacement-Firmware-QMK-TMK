   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LVL0:
  15               	.LFB2:
  16               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  17               		.loc 1 77 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  23               		.loc 1 84 5 view .LVU1
  24               	.LBB4:
  25               	.LBI4:
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
  26               		.loc 1 187 20 view .LVU2
  27               	.LBB5:
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
  28               		.loc 1 235 5 view .LVU3
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
  29               		.loc 1 236 5 view .LVU4
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
  30               		.loc 1 237 5 view .LVU5
  31               		.loc 1 237 12 view .LVU6
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  32               		.loc 1 238 28 is_stmt 0 view .LVU7
  33 0000 2091 0000 		lds r18,keyboard_report
  34 0004 3091 0000 		lds r19,keyboard_report+1
  35 0008 F901      		movw r30,r18
  36 000a 3296      		adiw r30,2
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
  37               		.loc 1 236 12 view .LVU8
  38 000c 9FEF      		ldi r25,lo8(-1)
 235:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
  39               		.loc 1 235 12 view .LVU9
  40 000e 40E0      		ldi r20,0
  41               	.LVL1:
  42               	.L4:
  43               		.loc 1 238 9 is_stmt 1 view .LVU10
  44               		.loc 1 238 34 is_stmt 0 view .LVU11
  45 0010 5191      		ld r21,Z+
  46               		.loc 1 238 12 view .LVU12
  47 0012 8517      		cp r24,r21
  48 0014 01F0      		breq .L1
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
  49               		.loc 1 241 9 is_stmt 1 view .LVU13
  50               		.loc 1 241 12 is_stmt 0 view .LVU14
  51 0016 9F3F      		cpi r25,lo8(-1)
  52 0018 01F4      		brne .L3
  53               		.loc 1 241 25 view .LVU15
  54 001a 5111      		cpse r21,__zero_reg__
  55 001c 00C0      		rjmp .L3
  56 001e 942F      		mov r25,r20
  57               	.LVL2:
  58               	.L3:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  59               		.loc 1 237 38 is_stmt 1 view .LVU16
  60 0020 4F5F      		subi r20,lo8(-(1))
  61               	.LVL3:
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  62               		.loc 1 237 12 view .LVU17
 237:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  63               		.loc 1 237 5 is_stmt 0 view .LVU18
  64 0022 4630      		cpi r20,lo8(6)
  65 0024 01F4      		brne .L4
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
  66               		.loc 1 245 5 is_stmt 1 view .LVU19
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
  67               		.loc 1 246 9 view .LVU20
  68               		.loc 1 246 12 is_stmt 0 view .LVU21
  69 0026 9F3F      		cpi r25,lo8(-1)
  70 0028 01F4      		brne .L6
  71               	.L1:
  72               	/* epilogue start */
  73               		.loc 1 246 12 view .LVU22
  74               	.LBE5:
  75               	.LBE4:
  85:../../tmk_core/common/action_util.c **** 
  76               		.loc 1 85 1 view .LVU23
  77 002a 0895      		ret
  78               	.L6:
  79               	.LBB7:
  80               	.LBB6:
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
  81               		.loc 1 247 13 is_stmt 1 view .LVU24
  82               		.loc 1 247 42 is_stmt 0 view .LVU25
  83 002c 290F      		add r18,r25
  84 002e 311D      		adc r19,__zero_reg__
  85 0030 97FD      		sbrc r25,7
  86 0032 3A95      		dec r19
  87 0034 F901      		movw r30,r18
  88 0036 8283      		std Z+2,r24
  89               	.LVL4:
  90               		.loc 1 247 42 view .LVU26
  91               	.LBE6:
  92               	.LBE7:
  85:../../tmk_core/common/action_util.c **** 
  93               		.loc 1 85 1 view .LVU27
  94 0038 0895      		ret
  95               		.cfi_endproc
  96               	.LFE2:
  98               		.section	.text.del_key,"ax",@progbits
  99               	.global	del_key
 101               	del_key:
 102               	.LVL5:
 103               	.LFB3:
  88:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 104               		.loc 1 88 1 is_stmt 1 view -0
 105               		.cfi_startproc
 106               	/* prologue: function */
 107               	/* frame size = 0 */
 108               	/* stack size = 0 */
 109               	.L__stack_usage = 0
  95:../../tmk_core/common/action_util.c **** }
 110               		.loc 1 95 5 view .LVU29
 111               	.LBB11:
 112               	.LBI11:
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 113               		.loc 1 253 20 view .LVU30
 114               	.LBE11:
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 115               		.loc 1 281 5 view .LVU31
 116               	.LBB13:
 117               	.LBB12:
 118               		.loc 1 281 10 view .LVU32
 119               		.loc 1 281 25 view .LVU33
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 120               		.loc 1 282 28 is_stmt 0 view .LVU34
 121 0000 2091 0000 		lds r18,keyboard_report
 122 0004 3091 0000 		lds r19,keyboard_report+1
 123 0008 F901      		movw r30,r18
 124 000a 3296      		adiw r30,2
 125 000c 285F      		subi r18,-8
 126 000e 3F4F      		sbci r19,-1
 127               	.LVL6:
 128               	.L11:
 129               		.loc 1 282 9 is_stmt 1 view .LVU35
 130               		.loc 1 282 34 is_stmt 0 view .LVU36
 131 0010 9191      		ld r25,Z+
 132               	.LVL7:
 133               		.loc 1 282 12 view .LVU37
 134 0012 8913      		cpse r24,r25
 135 0014 00C0      		rjmp .L10
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 136               		.loc 1 283 13 is_stmt 1 view .LVU38
 137               		.loc 1 283 38 is_stmt 0 view .LVU39
 138 0016 DF01      		movw r26,r30
 139 0018 1197      		sbiw r26,1
 140 001a 1C92      		st X,__zero_reg__
 141               	.L10:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 142               		.loc 1 281 51 is_stmt 1 view .LVU40
 143               	.LVL8:
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 144               		.loc 1 281 25 view .LVU41
 281:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 145               		.loc 1 281 5 is_stmt 0 view .LVU42
 146 001c E217      		cp r30,r18
 147 001e F307      		cpc r31,r19
 148 0020 01F4      		brne .L11
 149               	/* epilogue start */
 150               	.LBE12:
 151               	.LBE13:
  96:../../tmk_core/common/action_util.c **** 
 152               		.loc 1 96 1 view .LVU43
 153 0022 0895      		ret
 154               		.cfi_endproc
 155               	.LFE3:
 157               		.section	.text.clear_keys,"ax",@progbits
 158               	.global	clear_keys
 160               	clear_keys:
 161               	.LFB4:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 162               		.loc 1 99 1 is_stmt 1 view -0
 163               		.cfi_startproc
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166               	/* stack size = 0 */
 167               	.L__stack_usage = 0
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 168               		.loc 1 101 5 view .LVU45
 169               	.LBB14:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 170               		.loc 1 101 10 view .LVU46
 171               	.LVL9:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 172               		.loc 1 101 24 view .LVU47
 173               	.LBE14:
  99:../../tmk_core/common/action_util.c ****     // not clear mods
 174               		.loc 1 99 1 is_stmt 0 view .LVU48
 175 0000 81E0      		ldi r24,lo8(1)
 176 0002 90E0      		ldi r25,0
 177               	.LVL10:
 178               	.L14:
 179               	.LBB15:
 102:../../tmk_core/common/action_util.c ****     }
 180               		.loc 1 102 9 is_stmt 1 discriminator 3 view .LVU49
 102:../../tmk_core/common/action_util.c ****     }
 181               		.loc 1 102 24 is_stmt 0 discriminator 3 view .LVU50
 182 0004 E091 0000 		lds r30,keyboard_report
 183 0008 F091 0000 		lds r31,keyboard_report+1
 102:../../tmk_core/common/action_util.c ****     }
 184               		.loc 1 102 33 discriminator 3 view .LVU51
 185 000c E80F      		add r30,r24
 186 000e F91F      		adc r31,r25
 187 0010 1082      		st Z,__zero_reg__
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 188               		.loc 1 101 50 is_stmt 1 discriminator 3 view .LVU52
 189               	.LVL11:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 190               		.loc 1 101 24 discriminator 3 view .LVU53
 191 0012 0196      		adiw r24,1
 192               	.LVL12:
 101:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 193               		.loc 1 101 5 is_stmt 0 discriminator 3 view .LVU54
 194 0014 8830      		cpi r24,8
 195 0016 9105      		cpc r25,__zero_reg__
 196 0018 01F4      		brne .L14
 197               	/* epilogue start */
 198               	.LBE15:
 104:../../tmk_core/common/action_util.c **** 
 199               		.loc 1 104 1 view .LVU55
 200 001a 0895      		ret
 201               		.cfi_endproc
 202               	.LFE4:
 204               		.section	.text.get_mods,"ax",@progbits
 205               	.global	get_mods
 207               	get_mods:
 208               	.LFB5:
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 209               		.loc 1 108 24 is_stmt 1 view -0
 210               		.cfi_startproc
 211               	/* prologue: function */
 212               	/* frame size = 0 */
 213               	/* stack size = 0 */
 214               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 215               		.loc 1 108 26 view .LVU57
 108:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 216               		.loc 1 108 1 is_stmt 0 view .LVU58
 217 0000 8091 0000 		lds r24,real_mods
 218               	/* epilogue start */
 219 0004 0895      		ret
 220               		.cfi_endproc
 221               	.LFE5:
 223               		.section	.text.add_mods,"ax",@progbits
 224               	.global	add_mods
 226               	add_mods:
 227               	.LVL13:
 228               	.LFB6:
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 229               		.loc 1 109 29 is_stmt 1 view -0
 230               		.cfi_startproc
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 0 */
 234               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 235               		.loc 1 109 31 view .LVU60
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 236               		.loc 1 109 41 is_stmt 0 view .LVU61
 237 0000 9091 0000 		lds r25,real_mods
 238 0004 982B      		or r25,r24
 239 0006 9093 0000 		sts real_mods,r25
 240               	/* epilogue start */
 109:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 241               		.loc 1 109 1 view .LVU62
 242 000a 0895      		ret
 243               		.cfi_endproc
 244               	.LFE6:
 246               		.section	.text.del_mods,"ax",@progbits
 247               	.global	del_mods
 249               	del_mods:
 250               	.LVL14:
 251               	.LFB7:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 252               		.loc 1 110 29 is_stmt 1 view -0
 253               		.cfi_startproc
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256               	/* stack size = 0 */
 257               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 258               		.loc 1 110 31 view .LVU64
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 259               		.loc 1 110 41 is_stmt 0 view .LVU65
 260 0000 982F      		mov r25,r24
 261 0002 9095      		com r25
 262 0004 8091 0000 		lds r24,real_mods
 263               	.LVL15:
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 264               		.loc 1 110 41 view .LVU66
 265 0008 8923      		and r24,r25
 266 000a 8093 0000 		sts real_mods,r24
 267               	/* epilogue start */
 110:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 268               		.loc 1 110 1 view .LVU67
 269 000e 0895      		ret
 270               		.cfi_endproc
 271               	.LFE7:
 273               		.section	.text.set_mods,"ax",@progbits
 274               	.global	set_mods
 276               	set_mods:
 277               	.LVL16:
 278               	.LFB8:
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 279               		.loc 1 111 29 is_stmt 1 view -0
 280               		.cfi_startproc
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 0 */
 284               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 285               		.loc 1 111 31 view .LVU69
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 286               		.loc 1 111 41 is_stmt 0 view .LVU70
 287 0000 8093 0000 		sts real_mods,r24
 288               	/* epilogue start */
 111:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 289               		.loc 1 111 1 view .LVU71
 290 0004 0895      		ret
 291               		.cfi_endproc
 292               	.LFE8:
 294               		.section	.text.clear_mods,"ax",@progbits
 295               	.global	clear_mods
 297               	clear_mods:
 298               	.LFB9:
 112:../../tmk_core/common/action_util.c **** 
 299               		.loc 1 112 23 is_stmt 1 view -0
 300               		.cfi_startproc
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** 
 305               		.loc 1 112 25 view .LVU73
 112:../../tmk_core/common/action_util.c **** 
 306               		.loc 1 112 35 is_stmt 0 view .LVU74
 307 0000 1092 0000 		sts real_mods,__zero_reg__
 308               	/* epilogue start */
 112:../../tmk_core/common/action_util.c **** 
 309               		.loc 1 112 1 view .LVU75
 310 0004 0895      		ret
 311               		.cfi_endproc
 312               	.LFE9:
 314               		.section	.text.get_weak_mods,"ax",@progbits
 315               	.global	get_weak_mods
 317               	get_weak_mods:
 318               	.LFB10:
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 319               		.loc 1 115 29 is_stmt 1 view -0
 320               		.cfi_startproc
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 0 */
 324               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 325               		.loc 1 115 31 view .LVU77
 115:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 326               		.loc 1 115 1 is_stmt 0 view .LVU78
 327 0000 8091 0000 		lds r24,weak_mods
 328               	/* epilogue start */
 329 0004 0895      		ret
 330               		.cfi_endproc
 331               	.LFE10:
 333               		.section	.text.add_weak_mods,"ax",@progbits
 334               	.global	add_weak_mods
 336               	add_weak_mods:
 337               	.LVL17:
 338               	.LFB11:
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 339               		.loc 1 116 34 is_stmt 1 view -0
 340               		.cfi_startproc
 341               	/* prologue: function */
 342               	/* frame size = 0 */
 343               	/* stack size = 0 */
 344               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 345               		.loc 1 116 36 view .LVU80
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 346               		.loc 1 116 46 is_stmt 0 view .LVU81
 347 0000 9091 0000 		lds r25,weak_mods
 348 0004 982B      		or r25,r24
 349 0006 9093 0000 		sts weak_mods,r25
 350               	/* epilogue start */
 116:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 351               		.loc 1 116 1 view .LVU82
 352 000a 0895      		ret
 353               		.cfi_endproc
 354               	.LFE11:
 356               		.section	.text.del_weak_mods,"ax",@progbits
 357               	.global	del_weak_mods
 359               	del_weak_mods:
 360               	.LVL18:
 361               	.LFB12:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 362               		.loc 1 117 34 is_stmt 1 view -0
 363               		.cfi_startproc
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 0 */
 367               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 368               		.loc 1 117 36 view .LVU84
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 369               		.loc 1 117 46 is_stmt 0 view .LVU85
 370 0000 982F      		mov r25,r24
 371 0002 9095      		com r25
 372 0004 8091 0000 		lds r24,weak_mods
 373               	.LVL19:
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 374               		.loc 1 117 46 view .LVU86
 375 0008 8923      		and r24,r25
 376 000a 8093 0000 		sts weak_mods,r24
 377               	/* epilogue start */
 117:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 378               		.loc 1 117 1 view .LVU87
 379 000e 0895      		ret
 380               		.cfi_endproc
 381               	.LFE12:
 383               		.section	.text.set_weak_mods,"ax",@progbits
 384               	.global	set_weak_mods
 386               	set_weak_mods:
 387               	.LVL20:
 388               	.LFB13:
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 389               		.loc 1 118 34 is_stmt 1 view -0
 390               		.cfi_startproc
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 395               		.loc 1 118 36 view .LVU89
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 396               		.loc 1 118 46 is_stmt 0 view .LVU90
 397 0000 8093 0000 		sts weak_mods,r24
 398               	/* epilogue start */
 118:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 399               		.loc 1 118 1 view .LVU91
 400 0004 0895      		ret
 401               		.cfi_endproc
 402               	.LFE13:
 404               		.section	.text.clear_weak_mods,"ax",@progbits
 405               	.global	clear_weak_mods
 407               	clear_weak_mods:
 408               	.LFB14:
 119:../../tmk_core/common/action_util.c **** 
 409               		.loc 1 119 28 is_stmt 1 view -0
 410               		.cfi_startproc
 411               	/* prologue: function */
 412               	/* frame size = 0 */
 413               	/* stack size = 0 */
 414               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** 
 415               		.loc 1 119 30 view .LVU93
 119:../../tmk_core/common/action_util.c **** 
 416               		.loc 1 119 40 is_stmt 0 view .LVU94
 417 0000 1092 0000 		sts weak_mods,__zero_reg__
 418               	/* epilogue start */
 119:../../tmk_core/common/action_util.c **** 
 419               		.loc 1 119 1 view .LVU95
 420 0004 0895      		ret
 421               		.cfi_endproc
 422               	.LFE14:
 424               		.section	.text.set_oneshot_mods,"ax",@progbits
 425               	.global	set_oneshot_mods
 427               	set_oneshot_mods:
 428               	.LVL21:
 429               	.LFB15:
 124:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 430               		.loc 1 124 1 is_stmt 1 view -0
 431               		.cfi_startproc
 432               	/* prologue: function */
 433               	/* frame size = 0 */
 434               	/* stack size = 0 */
 435               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 436               		.loc 1 125 5 view .LVU97
 125:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 437               		.loc 1 125 18 is_stmt 0 view .LVU98
 438 0000 8093 0000 		sts oneshot_mods,r24
 439               	/* epilogue start */
 129:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 440               		.loc 1 129 1 view .LVU99
 441 0004 0895      		ret
 442               		.cfi_endproc
 443               	.LFE15:
 445               		.section	.text.clear_oneshot_mods,"ax",@progbits
 446               	.global	clear_oneshot_mods
 448               	clear_oneshot_mods:
 449               	.LFB16:
 131:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 450               		.loc 1 131 1 is_stmt 1 view -0
 451               		.cfi_startproc
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 0 */
 455               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 456               		.loc 1 132 5 view .LVU101
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 457               		.loc 1 132 18 is_stmt 0 view .LVU102
 458 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 459               	/* epilogue start */
 136:../../tmk_core/common/action_util.c **** #endif
 460               		.loc 1 136 1 view .LVU103
 461 0004 0895      		ret
 462               		.cfi_endproc
 463               	.LFE16:
 465               		.section	.text.has_anykey,"ax",@progbits
 466               	.global	has_anykey
 468               	has_anykey:
 469               	.LFB17:
 146:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 470               		.loc 1 146 1 is_stmt 1 view -0
 471               		.cfi_startproc
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 474               	/* stack size = 0 */
 475               	.L__stack_usage = 0
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 476               		.loc 1 147 5 view .LVU105
 477               	.LVL22:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 478               		.loc 1 148 5 view .LVU106
 479               	.LBB16:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 480               		.loc 1 148 10 view .LVU107
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 481               		.loc 1 148 25 view .LVU108
 149:../../tmk_core/common/action_util.c ****             cnt++;
 482               		.loc 1 149 28 is_stmt 0 view .LVU109
 483 0000 2091 0000 		lds r18,keyboard_report
 484 0004 3091 0000 		lds r19,keyboard_report+1
 485 0008 F901      		movw r30,r18
 486 000a 3196      		adiw r30,1
 487 000c 285F      		subi r18,-8
 488 000e 3F4F      		sbci r19,-1
 489               	.LBE16:
 147:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 490               		.loc 1 147 13 view .LVU110
 491 0010 80E0      		ldi r24,0
 492               	.LVL23:
 493               	.L30:
 494               	.LBB17:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 495               		.loc 1 149 9 is_stmt 1 view .LVU111
 149:../../tmk_core/common/action_util.c ****             cnt++;
 496               		.loc 1 149 33 is_stmt 0 view .LVU112
 497 0012 9191      		ld r25,Z+
 498               	.LVL24:
 149:../../tmk_core/common/action_util.c ****             cnt++;
 499               		.loc 1 149 12 view .LVU113
 500 0014 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****     }
 501               		.loc 1 150 13 is_stmt 1 view .LVU114
 150:../../tmk_core/common/action_util.c ****     }
 502               		.loc 1 150 16 is_stmt 0 view .LVU115
 503 0016 8F5F      		subi r24,lo8(-(1))
 504               	.LVL25:
 505               	.L29:
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 506               		.loc 1 148 51 is_stmt 1 discriminator 2 view .LVU116
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 507               		.loc 1 148 25 discriminator 2 view .LVU117
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 508               		.loc 1 148 5 is_stmt 0 discriminator 2 view .LVU118
 509 0018 E217      		cp r30,r18
 510 001a F307      		cpc r31,r19
 511 001c 01F4      		brne .L30
 512               	/* epilogue start */
 148:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 513               		.loc 1 148 5 discriminator 2 view .LVU119
 514               	.LBE17:
 153:../../tmk_core/common/action_util.c **** 
 515               		.loc 1 153 1 view .LVU120
 516 001e 0895      		ret
 517               		.cfi_endproc
 518               	.LFE17:
 520               		.section	.text.send_keyboard_report,"ax",@progbits
 521               	.global	send_keyboard_report
 523               	send_keyboard_report:
 524               	.LFB1:
  55:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 525               		.loc 1 55 33 is_stmt 1 view -0
 526               		.cfi_startproc
 527               	/* prologue: function */
 528               	/* frame size = 0 */
 529               	/* stack size = 0 */
 530               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 531               		.loc 1 56 5 view .LVU122
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 532               		.loc 1 56 20 is_stmt 0 view .LVU123
 533 0000 E091 0000 		lds r30,keyboard_report
 534 0004 F091 0000 		lds r31,keyboard_report+1
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 535               		.loc 1 56 28 view .LVU124
 536 0008 8091 0000 		lds r24,real_mods
 537 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 538               		.loc 1 57 5 is_stmt 1 view .LVU125
  57:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 539               		.loc 1 57 27 is_stmt 0 view .LVU126
 540 000e E091 0000 		lds r30,keyboard_report
 541 0012 F091 0000 		lds r31,keyboard_report+1
 542 0016 8081      		ld r24,Z
 543 0018 9091 0000 		lds r25,weak_mods
 544 001c 892B      		or r24,r25
 545 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 546               		.loc 1 59 5 is_stmt 1 view .LVU127
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 547               		.loc 1 59 9 is_stmt 0 view .LVU128
 548 0020 9091 0000 		lds r25,oneshot_mods
  59:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 549               		.loc 1 59 8 view .LVU129
 550 0024 9923      		tst r25
 551 0026 01F0      		breq .L37
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 552               		.loc 1 66 9 is_stmt 1 view .LVU130
  66:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 553               		.loc 1 66 31 is_stmt 0 view .LVU131
 554 0028 E091 0000 		lds r30,keyboard_report
 555 002c F091 0000 		lds r31,keyboard_report+1
 556 0030 8081      		ld r24,Z
 557 0032 892B      		or r24,r25
 558 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 559               		.loc 1 67 9 is_stmt 1 view .LVU132
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 560               		.loc 1 67 13 is_stmt 0 view .LVU133
 561 0036 0E94 0000 		call has_anykey
 562               	.LVL26:
  67:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 563               		.loc 1 67 12 view .LVU134
 564 003a 8111      		cpse r24,__zero_reg__
  68:../../tmk_core/common/action_util.c ****         }
 565               		.loc 1 68 13 is_stmt 1 view .LVU135
 566               	.LBB20:
 567               	.LBI20:
 130:../../tmk_core/common/action_util.c **** {
 568               		.loc 1 130 6 view .LVU136
 569               	.LBB21:
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 570               		.loc 1 132 5 view .LVU137
 132:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 571               		.loc 1 132 18 is_stmt 0 view .LVU138
 572 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 573               	.L37:
 574               	.LBE21:
 575               	.LBE20:
  72:../../tmk_core/common/action_util.c **** }
 576               		.loc 1 72 5 is_stmt 1 view .LVU139
 577 0040 8091 0000 		lds r24,keyboard_report
 578 0044 9091 0000 		lds r25,keyboard_report+1
 579 0048 0C94 0000 		jmp host_keyboard_send
 580               	.LVL27:
 581               		.cfi_endproc
 582               	.LFE1:
 584               		.section	.text.has_anymod,"ax",@progbits
 585               	.global	has_anymod
 587               	has_anymod:
 588               	.LFB18:
 156:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 589               		.loc 1 156 1 view -0
 590               		.cfi_startproc
 591               	/* prologue: function */
 592               	/* frame size = 0 */
 593               	/* stack size = 0 */
 594               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c **** }
 595               		.loc 1 157 5 view .LVU141
 157:../../tmk_core/common/action_util.c **** }
 596               		.loc 1 157 12 is_stmt 0 view .LVU142
 597 0000 8091 0000 		lds r24,real_mods
 598 0004 0C94 0000 		jmp bitpop
 599               	.LVL28:
 600               		.cfi_endproc
 601               	.LFE18:
 603               		.section	.text.get_first_key,"ax",@progbits
 604               	.global	get_first_key
 606               	get_first_key:
 607               	.LFB19:
 161:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 608               		.loc 1 161 1 is_stmt 1 view -0
 609               		.cfi_startproc
 610               	/* prologue: function */
 611               	/* frame size = 0 */
 612               	/* stack size = 0 */
 613               	.L__stack_usage = 0
 180:../../tmk_core/common/action_util.c **** #endif
 614               		.loc 1 180 5 view .LVU144
 180:../../tmk_core/common/action_util.c **** #endif
 615               		.loc 1 180 33 is_stmt 0 view .LVU145
 616 0000 E091 0000 		lds r30,keyboard_report
 617 0004 F091 0000 		lds r31,keyboard_report+1
 182:../../tmk_core/common/action_util.c **** 
 618               		.loc 1 182 1 view .LVU146
 619 0008 8281      		ldd r24,Z+2
 620               	/* epilogue start */
 621 000a 0895      		ret
 622               		.cfi_endproc
 623               	.LFE19:
 625               		.section	.bss.oneshot_mods,"aw",@nobits
 628               	oneshot_mods:
 629 0000 00        		.zero	1
 630               	.global	keyboard_report
 631               		.section	.data.keyboard_report,"aw"
 634               	keyboard_report:
 635 0000 0000      		.word	__compound_literal.0
 636               		.section	.bss.__compound_literal.0,"aw",@nobits
 639               	__compound_literal.0:
 640 0000 0000 0000 		.zero	8
 640      0000 0000 
 641               		.section	.bss.weak_mods,"aw",@nobits
 644               	weak_mods:
 645 0000 00        		.zero	1
 646               		.section	.bss.real_mods,"aw",@nobits
 649               	real_mods:
 650 0000 00        		.zero	1
 651               		.text
 652               	.Letext0:
 653               		.file 2 "/usr/avr/include/stdint.h"
 654               		.file 3 "../../tmk_core/common/report.h"
 655               		.file 4 "../../tmk_core/common/host.h"
 656               		.file 5 "../../tmk_core/common/avr/xprintf.h"
 657               		.file 6 "../../tmk_core/common/debug.h"
 658               		.file 7 "../../tmk_core/common/action_util.h"
 659               		.file 8 "../../tmk_core/common/timer.h"
 660               		.file 9 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/ccSGh1eC.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccSGh1eC.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccSGh1eC.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccSGh1eC.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccSGh1eC.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccSGh1eC.s:13     .text.add_key:0000000000000000 add_key
     /tmp/ccSGh1eC.s:634    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/ccSGh1eC.s:101    .text.del_key:0000000000000000 del_key
     /tmp/ccSGh1eC.s:160    .text.clear_keys:0000000000000000 clear_keys
     /tmp/ccSGh1eC.s:207    .text.get_mods:0000000000000000 get_mods
     /tmp/ccSGh1eC.s:649    .bss.real_mods:0000000000000000 real_mods
     /tmp/ccSGh1eC.s:226    .text.add_mods:0000000000000000 add_mods
     /tmp/ccSGh1eC.s:249    .text.del_mods:0000000000000000 del_mods
     /tmp/ccSGh1eC.s:276    .text.set_mods:0000000000000000 set_mods
     /tmp/ccSGh1eC.s:297    .text.clear_mods:0000000000000000 clear_mods
     /tmp/ccSGh1eC.s:317    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/ccSGh1eC.s:644    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/ccSGh1eC.s:336    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/ccSGh1eC.s:359    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/ccSGh1eC.s:386    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/ccSGh1eC.s:407    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/ccSGh1eC.s:427    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/ccSGh1eC.s:628    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/ccSGh1eC.s:448    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/ccSGh1eC.s:468    .text.has_anykey:0000000000000000 has_anykey
     /tmp/ccSGh1eC.s:523    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/ccSGh1eC.s:587    .text.has_anymod:0000000000000000 has_anymod
     /tmp/ccSGh1eC.s:606    .text.get_first_key:0000000000000000 get_first_key
     /tmp/ccSGh1eC.s:639    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
host_keyboard_send
bitpop
__do_copy_data
__do_clear_bss
