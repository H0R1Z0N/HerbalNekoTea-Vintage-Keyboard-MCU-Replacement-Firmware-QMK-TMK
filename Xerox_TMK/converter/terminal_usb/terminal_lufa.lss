
terminal_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00003fc8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000268  00800116  00800116  00004072  2**0
                  ALLOC
  3 .noinit       00000004  0080037e  0080037e  00004072  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00004074  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000499f  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000049b0  2**2
                  CONTENTS, READONLY, OCTETS
  8 .debug_aranges 000008f8  00000000  00000000  000049f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001158e  00000000  00000000  000052e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004f36  00000000  00000000  00016876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000f97e  00000000  00000000  0001b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000017a4  00000000  00000000  0002b12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00004124  00000000  00000000  0002c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007fe4  00000000  00000000  000309f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000389d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 03 	jmp	0x678	; 0x678 <__ctors_end>
       4:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
       8:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__vector_2>
       c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      10:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      14:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      18:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      1c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      20:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      24:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      28:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__vector_10>
      2c:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_11>
      30:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__vector_12>
      34:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      38:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      3c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      40:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      44:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      48:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      4c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      50:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      54:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__vector_21>
      58:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      5c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      60:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      64:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      68:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      6c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      70:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      74:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      78:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      7c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      80:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      84:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      88:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      8c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      90:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      94:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      98:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      9c:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      a0:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      a4:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>
      a8:	0c 94 84 03 	jmp	0x708	; 0x708 <__bad_interrupt>

000000ac <keymaps>:
      ac:	00 e7 00 48 47 46 29 3a 68 e3 8c 8b 8a 2b 35 3b     ...HGF):h....+5;
      bc:	69 e0 e1 64 39 14 1e 3c 6a e2 1d 16 04 1a 1f 3d     i..d9..<j......=
      cc:	6b 06 1b 07 08 21 20 3e 6c 2c 19 09 17 15 22 3f     k....! >l,...."?
      dc:	6d 11 05 0b 0a 1c 23 40 6e e6 10 0d 18 24 25 41     m.....#@n....$%A
      ec:	6f 36 0e 0c 12 27 26 42 70 37 38 0f 33 13 2d 43     o6...'&Bp78.3.-C
      fc:	71 87 34 32 2f 2e 44 72 e4 e5 28 30 31 89 45 73     q.42/.Dr..(01.Es
     10c:	51 50 88 52 4c 4d 2a 49 b0 59 4f 5c 5f 4e 4a 4b     QP.RLM*I.YO\_NJK
     11c:	62 63 5a 5d 5e 60 53 54 67 58 5b 85 57 61 55 00     bcZ]^`STgX[.WaU.
     12c:	00 00 00 65 56 00 00 00                             ...eV...

00000134 <fn_keycode>:
     134:	00 00 00 00 00 00 00 00                             ........

0000013c <fn_layer>:
     13c:	00 00 00 00 00 00 00 00                             ........

00000144 <__c.1993>:
     144:	0a 00                                               ..

00000146 <__c.1991>:
     146:	0a 00                                               ..

00000148 <__c.1989>:
     148:	25 30 32 58 00                                      %02X.

0000014d <__c.1987>:
     14d:	75 6e 65 78 70 65 63 74 65 64 20 73 63 61 6e 20     unexpected scan 
     15d:	63 6f 64 65 20 61 74 20 46 30 3a 20 00              code at F0: .

0000016a <__c.1981>:
     16a:	0a 00                                               ..

0000016c <__c.1979>:
     16c:	0a 00                                               ..

0000016e <__c.1977>:
     16e:	25 30 32 58 00                                      %02X.

00000173 <__c.1975>:
     173:	75 6e 65 78 70 65 63 74 65 64 20 73 63 61 6e 20     unexpected scan 
     183:	63 6f 64 65 20 61 74 20 52 45 41 44 59 3a 20 00     code at READY: .

00000193 <__c.1972>:
     193:	20 00                                                .

00000195 <__c.1966>:
     195:	5b 61 63 6b 5d 0a 52 45 41 44 59 0a 00              [ack].READY..

000001a2 <__c.1964>:
     1a2:	77 46 38 20 00                                      wF8 .

000001a7 <__c.1961>:
     1a7:	0a 43 4f 4e 46 49 47 3a 20 00                       .CONFIG: .

000001b1 <__c.1957>:
     1b1:	65 72 72 0a 52 45 53 45 54 3a 20 00                 err.RESET: .

000001bd <__c.1955>:
     1bd:	5b 6f 6b 5d 0a 4b 42 44 5f 49 44 3a 20 00           [ok].KBD_ID: .

000001cb <__c.1951>:
     1cb:	5b 61 63 6b 5d 0a 52 45 53 45 54 5f 52 45 53 50     [ack].RESET_RESP
     1db:	4f 4e 53 45 3a 20 00                                ONSE: .

000001e2 <__c.1949>:
     1e2:	77 46 46 20 00                                      wFF .

000001e7 <__c.1946>:
     1e7:	20 00                                                .

000001e9 <__c.1944>:
     1e9:	25 30 32 58 00                                      %02X.

000001ee <__c.1942>:
     1ee:	72 00                                               r.

000001f0 <__c.5182>:
     1f0:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     200:	0a 00                                               ..

00000202 <__c.5180>:
     202:	0a 55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e     .USB configured.
     212:	0a 00                                               ..

00000214 <__c.5175>:
     214:	0a 0a 54 4d 4b 3a 38 66 38 36 64 31 32 35 2f 4c     ..TMK:8f86d125/L
     224:	55 46 41 0a 0a 00                                   UFA...

0000022a <ProductString>:
     22a:	5e 03 50 00 53 00 2f 00 32 00 28 00 53 00 65 00     ^.P.S./.2.(.S.e.
     23a:	74 00 33 00 29 00 2d 00 55 00 53 00 42 00 20 00     t.3.).-.U.S.B. .
     24a:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
     25a:	20 00 63 00 6f 00 6e 00 76 00 65 00 72 00 74 00      .c.o.n.v.e.r.t.
     26a:	65 00 72 00 28 00 49 00 42 00 4d 00 20 00 31 00     e.r.(.I.B.M. .1.
     27a:	32 00 32 00 6b 00 65 00 79 00 73 00 29 00 00 00     2.2.k.e.y.s.)...

0000028a <ManufacturerString>:
     28a:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

0000029a <LanguageString>:
     29a:	04 03 09 04                                         ....

0000029e <ConfigurationDescriptor>:
     29e:	09 02 42 00 02 01 00 a0 32 09 04 00 00 01 03 01     ..B.....2.......
     2ae:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     2be:	00 0a 09 04 01 00 02 03 00 00 00 09 21 11 01 00     ............!...
     2ce:	01 22 22 00 07 05 82 03 20 00 01 07 05 02 03 20     .""..... ...... 
     2de:	00 01                                               ..

000002e0 <DeviceDescriptor>:
     2e0:	12 01 10 01 00 00 00 08 ed fe 35 65 00 01 01 02     ..........5e....
     2f0:	00 01                                               ..

000002f2 <ConsoleReport>:
     2f2:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     302:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     312:	02 c0                                               ..

00000314 <KeyboardReport>:
     314:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     324:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     334:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     344:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000354 <__c.1830>:
     354:	70 62 75 66 3a 20 66 75 6c 6c 0a 00                 pbuf: full..

00000360 <__c.2083>:
     360:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000370 <__c.2078>:
     370:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

0000037e <__c.2070>:
     37e:	0a 00                                               ..

00000380 <__c.2065>:
     380:	25 30 32 58 20 00                                   %02X .

00000386 <__c.2062>:
     386:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000391 <__c.2412>:
     391:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

0000039c <__c.1742>:
     39c:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

000003aa <__c.1739>:
     3aa:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

000003b8 <__c.2657>:
     3b8:	3f 00                                               ?.

000003ba <__c.2659>:
     3ba:	43 3e 20 00                                         C> .

000003be <__c.2664>:
     3be:	4c 25 64 0a 00                                      L%d..

000003c3 <__c.2646>:
     3c3:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     3d3:	43 2f 71 3a 09 71 75 69 74 0a 00                    C/q:.quit..

000003de <__c.2576>:
     3de:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     3ee:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     3fe:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     40e:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     41e:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     42e:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     43e:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     44e:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     45e:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     46e:	72 0a 00                                            r..

00000471 <__c.2641>:
     471:	3f 00                                               ?.

00000473 <__c.2632>:
     473:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     483:	25 30 34 6c 58 0a 00                                %04lX..

0000048a <__c.2630>:
     48a:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     49a:	58 0a 00                                            X..

0000049d <__c.2628>:
     49d:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     4ad:	6c 3a 20 25 58 0a 00                                l: %X..

000004b4 <__c.2626>:
     4b4:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     4c4:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000004ce <__c.2624>:
     4ce:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000004dc <__c.2621>:
     4dc:	47 43 43 3a 20 39 2e 33 2e 30 20 41 56 52 2d 4c     GCC: 9.3.0 AVR-L
     4ec:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     4fc:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000507 <__c.2619>:
     507:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 43 4f     OPTIONS: LUFA CO
     517:	4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20 34 30     NSOLE COMMAND 40
     527:	39 36 0a 00                                         96..

0000052b <__c.2617>:
     52b:	42 55 49 4c 44 3a 20 38 66 38 36 64 31 32 35 20     BUILD: 8f86d125 
     53b:	28 30 30 3a 34 36 3a 34 35 20 41 70 72 20 20 34     (00:46:45 Apr  4
     54b:	20 32 30 32 30 29 0a 00                              2020)..

00000553 <__c.2615>:
     553:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     563:	6b 2e 29 20 50 49 44 3a 20 30 78 36 35 33 35 28     k.) PID: 0x6535(
     573:	50 53 2f 32 28 53 65 74 33 29 2d 55 53 42 20 4b     PS/2(Set3)-USB K
     583:	65 79 62 6f 61 72 64 20 63 6f 6e 76 65 72 74 65     eyboard converte
     593:	72 28 49 42 4d 20 31 32 32 6b 65 79 73 29 29 20     r(IBM 122keys)) 
     5a3:	56 45 52 3a 20 30 78 30 31 30 30 0a 00              VER: 0x0100..

000005b0 <__c.2613>:
     5b0:	44 45 53 43 3a 20 55 53 42 20 63 6f 6e 76 65 72     DESC: USB conver
     5c0:	74 65 72 20 66 6f 72 20 49 42 4d 20 54 65 72 6d     ter for IBM Term
     5d0:	69 6e 61 6c 20 4b 65 79 62 6f 61 72 64 20 31 32     inal Keyboard 12
     5e0:	32 6b 65 79 73 0a 00                                2keys..

000005e7 <__c.2611>:
     5e7:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000005f6 <__c.2608>:
     5f6:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000603 <__c.2606>:
     603:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

0000060f <__c.2603>:
     60f:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

0000061f <__c.2601>:
     61f:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

0000062e <__c.2598>:
     62e:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

0000063c <__c.2596>:
     63c:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000649 <__c.2593>:
     649:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000655 <__c.2591>:
     655:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000662 <__c.2588>:
     662:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     672:	00                                                  .

00000673 <__c.2585>:
     673:	43 3e 20 00 00                                      C> ..

00000678 <__ctors_end>:
     678:	11 24       	eor	r1, r1
     67a:	1f be       	out	0x3f, r1	; 63
     67c:	cf ef       	ldi	r28, 0xFF	; 255
     67e:	da e0       	ldi	r29, 0x0A	; 10
     680:	de bf       	out	0x3e, r29	; 62
     682:	cd bf       	out	0x3d, r28	; 61

00000684 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     684:	04 b6       	in	r0, 0x34	; 52
     686:	03 fe       	sbrs	r0, 3
     688:	28 c0       	rjmp	.+80     	; 0x6da <__do_copy_data>
     68a:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <reset_key>
     68e:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <reset_key+0x1>
     692:	a0 91 80 03 	lds	r26, 0x0380	; 0x800380 <reset_key+0x2>
     696:	b0 91 81 03 	lds	r27, 0x0381	; 0x800381 <reset_key+0x3>
     69a:	87 30       	cpi	r24, 0x07	; 7
     69c:	90 4b       	sbci	r25, 0xB0	; 176
     69e:	a7 40       	sbci	r26, 0x07	; 7
     6a0:	b0 4b       	sbci	r27, 0xB0	; 176
     6a2:	d9 f4       	brne	.+54     	; 0x6da <__do_copy_data>
        reset_key = 0;
     6a4:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <reset_key>
     6a8:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <reset_key+0x1>
     6ac:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <reset_key+0x2>
     6b0:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <reset_key+0x3>

        // some of bootloaders may need to preseve?
        MCUSR = 0;
     6b4:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	a8 95       	wdr
     6bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     6c0:	88 61       	ori	r24, 0x18	; 24
     6c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     6c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     6ca:	0f be       	out	0x3f, r0	; 63

#ifndef NO_BOOTLOADER_CATERINA_BOOTKEY
        // Clear bootkey of Caterina bootloader for other bootloaders
        // Leonardo and Pro Micro with Arduino default fuse setting don't reach here
        // because bootloader section are executed before application everytime.
        *(volatile uint16_t *)0x0800 = 0;
     6cc:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <_end+0x47f>
     6d0:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <_end+0x47e>
#endif

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))( (uint16_t)(BOOTLOADER_START / 2) ))();
     6d4:	e0 e0       	ldi	r30, 0x00	; 0
     6d6:	f8 e3       	ldi	r31, 0x38	; 56
     6d8:	09 95       	icall

000006da <__do_copy_data>:
     6da:	11 e0       	ldi	r17, 0x01	; 1
     6dc:	a0 e0       	ldi	r26, 0x00	; 0
     6de:	b1 e0       	ldi	r27, 0x01	; 1
     6e0:	e8 ec       	ldi	r30, 0xC8	; 200
     6e2:	ff e3       	ldi	r31, 0x3F	; 63
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__do_copy_data+0x10>
     6e6:	05 90       	lpm	r0, Z+
     6e8:	0d 92       	st	X+, r0
     6ea:	a6 31       	cpi	r26, 0x16	; 22
     6ec:	b1 07       	cpc	r27, r17
     6ee:	d9 f7       	brne	.-10     	; 0x6e6 <__do_copy_data+0xc>

000006f0 <__do_clear_bss>:
     6f0:	23 e0       	ldi	r18, 0x03	; 3
     6f2:	a6 e1       	ldi	r26, 0x16	; 22
     6f4:	b1 e0       	ldi	r27, 0x01	; 1
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <.do_clear_bss_start>

000006f8 <.do_clear_bss_loop>:
     6f8:	1d 92       	st	X+, r1

000006fa <.do_clear_bss_start>:
     6fa:	ae 37       	cpi	r26, 0x7E	; 126
     6fc:	b2 07       	cpc	r27, r18
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <.do_clear_bss_loop>
     700:	0e 94 a4 07 	call	0xf48	; 0xf48 <main>
     704:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <_exit>

00000708 <__bad_interrupt>:
     708:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000070c <xputc>:
     70c:	ff 93       	push	r31
     70e:	ef 93       	push	r30
     710:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__bss_start>
     714:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__bss_start+0x1>
     718:	30 97       	sbiw	r30, 0x00	; 0
     71a:	09 f0       	breq	.+2      	; 0x71e <xputc+0x12>
     71c:	09 95       	icall
     71e:	ef 91       	pop	r30
     720:	ff 91       	pop	r31
     722:	08 95       	ret

00000724 <xputs>:
     724:	fc 01       	movw	r30, r24
     726:	85 91       	lpm	r24, Z+
     728:	80 30       	cpi	r24, 0x00	; 0
     72a:	11 f0       	breq	.+4      	; 0x730 <xputs+0xc>
     72c:	ef df       	rcall	.-34     	; 0x70c <xputc>
     72e:	fb cf       	rjmp	.-10     	; 0x726 <xputs+0x2>
     730:	08 95       	ret

00000732 <xitoa>:
     732:	ff 27       	eor	r31, r31
     734:	e0 e2       	ldi	r30, 0x20	; 32
     736:	30 e2       	ldi	r19, 0x20	; 32
     738:	47 ff       	sbrs	r20, 7
     73a:	0c c0       	rjmp	.+24     	; 0x754 <xitoa+0x22>
     73c:	41 95       	neg	r20
     73e:	97 ff       	sbrs	r25, 7
     740:	09 c0       	rjmp	.+18     	; 0x754 <xitoa+0x22>
     742:	ed e2       	ldi	r30, 0x2D	; 45
     744:	60 95       	com	r22
     746:	70 95       	com	r23
     748:	80 95       	com	r24
     74a:	90 95       	com	r25
     74c:	61 1d       	adc	r22, r1
     74e:	71 1d       	adc	r23, r1
     750:	81 1d       	adc	r24, r1
     752:	91 1d       	adc	r25, r1
     754:	27 ff       	sbrs	r18, 7
     756:	02 c0       	rjmp	.+4      	; 0x75c <xitoa+0x2a>
     758:	21 95       	neg	r18
     75a:	30 e3       	ldi	r19, 0x30	; 48
     75c:	50 e2       	ldi	r21, 0x20	; 32
     75e:	aa 27       	eor	r26, r26
     760:	66 0f       	add	r22, r22
     762:	77 1f       	adc	r23, r23
     764:	88 1f       	adc	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	aa 1f       	adc	r26, r26
     76a:	a4 17       	cp	r26, r20
     76c:	10 f0       	brcs	.+4      	; 0x772 <xitoa+0x40>
     76e:	a4 1b       	sub	r26, r20
     770:	63 95       	inc	r22
     772:	5a 95       	dec	r21
     774:	a9 f7       	brne	.-22     	; 0x760 <xitoa+0x2e>
     776:	aa 30       	cpi	r26, 0x0A	; 10
     778:	08 f0       	brcs	.+2      	; 0x77c <xitoa+0x4a>
     77a:	a9 5f       	subi	r26, 0xF9	; 249
     77c:	a0 5d       	subi	r26, 0xD0	; 208
     77e:	af 93       	push	r26
     780:	f3 95       	inc	r31
     782:	61 15       	cp	r22, r1
     784:	71 05       	cpc	r23, r1
     786:	81 05       	cpc	r24, r1
     788:	91 05       	cpc	r25, r1
     78a:	41 f7       	brne	.-48     	; 0x75c <xitoa+0x2a>
     78c:	ed 32       	cpi	r30, 0x2D	; 45
     78e:	11 f4       	brne	.+4      	; 0x794 <xitoa+0x62>
     790:	ef 93       	push	r30
     792:	f3 95       	inc	r31
     794:	f2 17       	cp	r31, r18
     796:	18 f4       	brcc	.+6      	; 0x79e <xitoa+0x6c>
     798:	3f 93       	push	r19
     79a:	f3 95       	inc	r31
     79c:	fb cf       	rjmp	.-10     	; 0x794 <xitoa+0x62>
     79e:	8f 91       	pop	r24
     7a0:	b5 df       	rcall	.-150    	; 0x70c <xputc>
     7a2:	fa 95       	dec	r31
     7a4:	e1 f7       	brne	.-8      	; 0x79e <xitoa+0x6c>
     7a6:	08 95       	ret

000007a8 <xvprintf>:
     7a8:	e9 91       	ld	r30, Y+
     7aa:	f9 91       	ld	r31, Y+
     7ac:	85 91       	lpm	r24, Z+
     7ae:	80 30       	cpi	r24, 0x00	; 0
     7b0:	21 f0       	breq	.+8      	; 0x7ba <xvprintf+0x12>
     7b2:	85 32       	cpi	r24, 0x25	; 37
     7b4:	19 f0       	breq	.+6      	; 0x7bc <xvprintf+0x14>
     7b6:	aa df       	rcall	.-172    	; 0x70c <xputc>
     7b8:	f9 cf       	rjmp	.-14     	; 0x7ac <xvprintf+0x4>
     7ba:	08 95       	ret
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	e8 94       	clt
     7c0:	55 91       	lpm	r21, Z+
     7c2:	55 32       	cpi	r21, 0x25	; 37
     7c4:	c1 f3       	breq	.-16     	; 0x7b6 <xvprintf+0xe>
     7c6:	50 33       	cpi	r21, 0x30	; 48
     7c8:	11 f4       	brne	.+4      	; 0x7ce <xvprintf+0x26>
     7ca:	68 94       	set
     7cc:	55 91       	lpm	r21, Z+
     7ce:	5a 33       	cpi	r21, 0x3A	; 58
     7d0:	48 f4       	brcc	.+18     	; 0x7e4 <xvprintf+0x3c>
     7d2:	50 53       	subi	r21, 0x30	; 48
     7d4:	90 f3       	brcs	.-28     	; 0x7ba <xvprintf+0x12>
     7d6:	22 0f       	add	r18, r18
     7d8:	02 2e       	mov	r0, r18
     7da:	22 0f       	add	r18, r18
     7dc:	22 0f       	add	r18, r18
     7de:	20 0d       	add	r18, r0
     7e0:	25 0f       	add	r18, r21
     7e2:	f4 cf       	rjmp	.-24     	; 0x7cc <xvprintf+0x24>
     7e4:	0e f4       	brtc	.+2      	; 0x7e8 <xvprintf+0x40>
     7e6:	21 95       	neg	r18
     7e8:	89 91       	ld	r24, Y+
     7ea:	99 91       	ld	r25, Y+
     7ec:	53 36       	cpi	r21, 0x63	; 99
     7ee:	19 f3       	breq	.-58     	; 0x7b6 <xvprintf+0xe>
     7f0:	53 37       	cpi	r21, 0x73	; 115
     7f2:	29 f1       	breq	.+74     	; 0x83e <xvprintf+0x96>
     7f4:	53 35       	cpi	r21, 0x53	; 83
     7f6:	59 f1       	breq	.+86     	; 0x84e <xvprintf+0xa6>
     7f8:	bc 01       	movw	r22, r24
     7fa:	88 27       	eor	r24, r24
     7fc:	99 27       	eor	r25, r25
     7fe:	e8 94       	clt
     800:	5c 36       	cpi	r21, 0x6C	; 108
     802:	21 f4       	brne	.+8      	; 0x80c <xvprintf+0x64>
     804:	89 91       	ld	r24, Y+
     806:	99 91       	ld	r25, Y+
     808:	68 94       	set
     80a:	55 91       	lpm	r21, Z+
     80c:	54 36       	cpi	r21, 0x64	; 100
     80e:	39 f4       	brne	.+14     	; 0x81e <xvprintf+0x76>
     810:	46 ef       	ldi	r20, 0xF6	; 246
     812:	7e f0       	brts	.+30     	; 0x832 <xvprintf+0x8a>
     814:	77 ff       	sbrs	r23, 7
     816:	0d c0       	rjmp	.+26     	; 0x832 <xvprintf+0x8a>
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	9f ef       	ldi	r25, 0xFF	; 255
     81c:	0a c0       	rjmp	.+20     	; 0x832 <xvprintf+0x8a>
     81e:	55 37       	cpi	r21, 0x75	; 117
     820:	4a e0       	ldi	r20, 0x0A	; 10
     822:	39 f0       	breq	.+14     	; 0x832 <xvprintf+0x8a>
     824:	58 35       	cpi	r21, 0x58	; 88
     826:	40 e1       	ldi	r20, 0x10	; 16
     828:	21 f0       	breq	.+8      	; 0x832 <xvprintf+0x8a>
     82a:	52 36       	cpi	r21, 0x62	; 98
     82c:	42 e0       	ldi	r20, 0x02	; 2
     82e:	09 f0       	breq	.+2      	; 0x832 <xvprintf+0x8a>
     830:	08 95       	ret
     832:	ff 93       	push	r31
     834:	ef 93       	push	r30
     836:	7d df       	rcall	.-262    	; 0x732 <xitoa>
     838:	ef 91       	pop	r30
     83a:	ff 91       	pop	r31
     83c:	b7 cf       	rjmp	.-146    	; 0x7ac <xvprintf+0x4>
     83e:	ff 93       	push	r31
     840:	ef 93       	push	r30
     842:	fc 01       	movw	r30, r24
     844:	81 91       	ld	r24, Z+
     846:	80 30       	cpi	r24, 0x00	; 0
     848:	b9 f3       	breq	.-18     	; 0x838 <xvprintf+0x90>
     84a:	60 df       	rcall	.-320    	; 0x70c <xputc>
     84c:	fb cf       	rjmp	.-10     	; 0x844 <xvprintf+0x9c>
     84e:	ff 93       	push	r31
     850:	ef 93       	push	r30
     852:	68 df       	rcall	.-304    	; 0x724 <xputs>
     854:	f1 cf       	rjmp	.-30     	; 0x838 <xvprintf+0x90>

00000856 <__xprintf>:
     856:	df 93       	push	r29
     858:	cf 93       	push	r28
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	25 96       	adiw	r28, 0x05	; 5
     860:	a3 df       	rcall	.-186    	; 0x7a8 <xvprintf>
     862:	cf 91       	pop	r28
     864:	df 91       	pop	r29
     866:	08 95       	ret

00000868 <matrix_init>:
#define COL(code)      (code&0x07)


void matrix_init(void)
{
    debug_enable = true;
     868:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     86c:	81 60       	ori	r24, 0x01	; 1
     86e:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <debug_config>
    //debug_matrix = true;
    //debug_keyboard = true;
    //debug_mouse = false;

    ps2_host_init();
     872:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <ps2_host_init>

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
     876:	e9 e1       	ldi	r30, 0x19	; 25
     878:	f1 e0       	ldi	r31, 0x01	; 1
     87a:	11 92       	st	Z+, r1
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	ea 32       	cpi	r30, 0x2A	; 42
     880:	f8 07       	cpc	r31, r24
     882:	d9 f7       	brne	.-10     	; 0x87a <matrix_init+0x12>

    return;
}
     884:	08 95       	ret

00000886 <matrix_scan>:

uint8_t matrix_scan(void)
{
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
        READY,
        F0,
    } state = RESET;

    uint8_t code;
    if ((code = ps2_host_recv())) {
     88a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ps2_host_recv>
     88e:	c8 2f       	mov	r28, r24
     890:	88 23       	and	r24, r24
     892:	01 f1       	breq	.+64     	; 0x8d4 <matrix_scan+0x4e>
        debug("r"); debug_hex(code); debug(" ");
     894:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     898:	80 ff       	sbrs	r24, 0
     89a:	1c c0       	rjmp	.+56     	; 0x8d4 <matrix_scan+0x4e>
     89c:	8e ee       	ldi	r24, 0xEE	; 238
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
     8a4:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     8a8:	80 ff       	sbrs	r24, 0
     8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <matrix_scan+0x4e>
     8ac:	1f 92       	push	r1
     8ae:	cf 93       	push	r28
     8b0:	89 ee       	ldi	r24, 0xE9	; 233
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	9f 93       	push	r25
     8b6:	8f 93       	push	r24
     8b8:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
     8bc:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	80 ff       	sbrs	r24, 0
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <matrix_scan+0x4e>
     8cc:	87 ee       	ldi	r24, 0xE7	; 231
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
    }

    switch (state) {
     8d4:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <state.1940>
     8d8:	e7 30       	cpi	r30, 0x07	; 7
     8da:	b0 f5       	brcc	.+108    	; 0x948 <matrix_scan+0xc2>
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	e1 56       	subi	r30, 0x61	; 97
     8e0:	f0 4e       	sbci	r31, 0xE0	; 224
     8e2:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <__tablejump2__>
        case RESET:
            debug("wFF ");
     8e6:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     8ea:	80 ff       	sbrs	r24, 0
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <matrix_scan+0x70>
     8ee:	82 ee       	ldi	r24, 0xE2	; 226
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            if (ps2_host_send(0xFF) == 0xFA) {
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ps2_host_send>
     8fc:	8a 3f       	cpi	r24, 0xFA	; 250
     8fe:	21 f5       	brne	.+72     	; 0x948 <matrix_scan+0xc2>
                debug("[ack]\nRESET_RESPONSE: ");
     900:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     904:	80 ff       	sbrs	r24, 0
     906:	04 c0       	rjmp	.+8      	; 0x910 <matrix_scan+0x8a>
     908:	8b ec       	ldi	r24, 0xCB	; 203
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                state = RESET_RESPONSE;
     910:	81 e0       	ldi	r24, 0x01	; 1
            }
            break;
        case KBD_ID1:
            if (code) {
                debug("\nCONFIG: ");
                state = CONFIG;
     912:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state.1940>
     916:	18 c0       	rjmp	.+48     	; 0x948 <matrix_scan+0xc2>
            if (code == 0xAA) {
     918:	ca 3a       	cpi	r28, 0xAA	; 170
     91a:	51 f4       	brne	.+20     	; 0x930 <matrix_scan+0xaa>
                debug("[ok]\nKBD_ID: ");
     91c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     920:	80 ff       	sbrs	r24, 0
     922:	04 c0       	rjmp	.+8      	; 0x92c <matrix_scan+0xa6>
     924:	8d eb       	ldi	r24, 0xBD	; 189
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                state = KBD_ID0;
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	f1 cf       	rjmp	.-30     	; 0x912 <matrix_scan+0x8c>
            } else if (code) {
     930:	cc 23       	and	r28, r28
     932:	51 f0       	breq	.+20     	; 0x948 <matrix_scan+0xc2>
                debug("err\nRESET: ");
     934:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     938:	80 ff       	sbrs	r24, 0
     93a:	04 c0       	rjmp	.+8      	; 0x944 <matrix_scan+0xbe>
     93c:	81 eb       	ldi	r24, 0xB1	; 177
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                state = RESET;
     944:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <state.1940>
                    debug("\n");
            }
            break;
    }
    return 1;
}
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret
                state = KBD_ID1;
     950:	83 e0       	ldi	r24, 0x03	; 3
            if (code) {
     952:	c1 11       	cpse	r28, r1
     954:	de cf       	rjmp	.-68     	; 0x912 <matrix_scan+0x8c>
     956:	f8 cf       	rjmp	.-16     	; 0x948 <matrix_scan+0xc2>
            if (code) {
     958:	cc 23       	and	r28, r28
     95a:	b1 f3       	breq	.-20     	; 0x948 <matrix_scan+0xc2>
                debug("\nCONFIG: ");
     95c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     960:	80 ff       	sbrs	r24, 0
     962:	04 c0       	rjmp	.+8      	; 0x96c <matrix_scan+0xe6>
     964:	87 ea       	ldi	r24, 0xA7	; 167
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                state = CONFIG;
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	d1 cf       	rjmp	.-94     	; 0x912 <matrix_scan+0x8c>
            debug("wF8 ");
     970:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     974:	80 ff       	sbrs	r24, 0
     976:	04 c0       	rjmp	.+8      	; 0x980 <matrix_scan+0xfa>
     978:	82 ea       	ldi	r24, 0xA2	; 162
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            if (ps2_host_send(0xF8) == 0xFA) {
     980:	88 ef       	ldi	r24, 0xF8	; 248
     982:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ps2_host_send>
     986:	8a 3f       	cpi	r24, 0xFA	; 250
     988:	f9 f6       	brne	.-66     	; 0x948 <matrix_scan+0xc2>
                debug("[ack]\nREADY\n");
     98a:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     98e:	80 ff       	sbrs	r24, 0
     990:	04 c0       	rjmp	.+8      	; 0x99a <matrix_scan+0x114>
     992:	85 e9       	ldi	r24, 0x95	; 149
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                state = READY;
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	ba cf       	rjmp	.-140    	; 0x912 <matrix_scan+0x8c>
            switch (code) {
     99e:	cc 23       	and	r28, r28
     9a0:	99 f2       	breq	.-90     	; 0x948 <matrix_scan+0xc2>
     9a2:	c0 3f       	cpi	r28, 0xF0	; 240
     9a4:	61 f4       	brne	.+24     	; 0x9be <matrix_scan+0x138>
                    state = F0;
     9a6:	86 e0       	ldi	r24, 0x06	; 6
     9a8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state.1940>
                    debug(" ");
     9ac:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     9b0:	80 ff       	sbrs	r24, 0
     9b2:	ca cf       	rjmp	.-108    	; 0x948 <matrix_scan+0xc2>
     9b4:	83 e9       	ldi	r24, 0x93	; 147
     9b6:	91 e0       	ldi	r25, 0x01	; 1
                    debug("\n");
     9b8:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
     9bc:	c5 cf       	rjmp	.-118    	; 0x948 <matrix_scan+0xc2>
                    if (code < 0x88) {
     9be:	c8 38       	cpi	r28, 0x88	; 136
     9c0:	10 f5       	brcc	.+68     	; 0xa06 <matrix_scan+0x180>
}

inline
static void matrix_make(uint8_t code)
{
    if (!matrix_is_on(ROW(code), COL(code))) {
     9c2:	dc 2f       	mov	r29, r28
     9c4:	d7 70       	andi	r29, 0x07	; 7
     9c6:	c6 95       	lsr	r28
     9c8:	c6 95       	lsr	r28
     9ca:	c6 95       	lsr	r28
     9cc:	6d 2f       	mov	r22, r29
     9ce:	8c 2f       	mov	r24, r28
     9d0:	0e 94 9c 10 	call	0x2138	; 0x2138 <matrix_is_on>
     9d4:	81 11       	cpse	r24, r1
     9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <matrix_scan+0x16c>
        matrix[ROW(code)] |= 1<<COL(code);
     9d8:	ec 2f       	mov	r30, r28
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	e7 5e       	subi	r30, 0xE7	; 231
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <matrix_scan+0x162>
     9e6:	22 0f       	add	r18, r18
     9e8:	da 95       	dec	r29
     9ea:	ea f7       	brpl	.-6      	; 0x9e6 <matrix_scan+0x160>
     9ec:	80 81       	ld	r24, Z
     9ee:	82 2b       	or	r24, r18
     9f0:	80 83       	st	Z, r24
                    state = READY;
     9f2:	85 e0       	ldi	r24, 0x05	; 5
     9f4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state.1940>
                    debug("\n");
     9f8:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     9fc:	80 ff       	sbrs	r24, 0
     9fe:	a4 cf       	rjmp	.-184    	; 0x948 <matrix_scan+0xc2>
     a00:	8a e6       	ldi	r24, 0x6A	; 106
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	d9 cf       	rjmp	.-78     	; 0x9b8 <matrix_scan+0x132>
                        debug("unexpected scan code at READY: "); debug_hex(code); debug("\n");
     a06:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     a0a:	80 ff       	sbrs	r24, 0
     a0c:	f2 cf       	rjmp	.-28     	; 0x9f2 <matrix_scan+0x16c>
     a0e:	83 e7       	ldi	r24, 0x73	; 115
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
     a16:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     a1a:	80 ff       	sbrs	r24, 0
     a1c:	ea cf       	rjmp	.-44     	; 0x9f2 <matrix_scan+0x16c>
     a1e:	1f 92       	push	r1
     a20:	cf 93       	push	r28
     a22:	8e e6       	ldi	r24, 0x6E	; 110
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
     a2e:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	80 ff       	sbrs	r24, 0
     a3c:	da cf       	rjmp	.-76     	; 0x9f2 <matrix_scan+0x16c>
     a3e:	8c e6       	ldi	r24, 0x6C	; 108
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
     a46:	d5 cf       	rjmp	.-86     	; 0x9f2 <matrix_scan+0x16c>
            switch (code) {
     a48:	cc 23       	and	r28, r28
     a4a:	09 f4       	brne	.+2      	; 0xa4e <matrix_scan+0x1c8>
     a4c:	7d cf       	rjmp	.-262    	; 0x948 <matrix_scan+0xc2>
                    if (code < 0x88) {
     a4e:	c8 38       	cpi	r28, 0x88	; 136
     a50:	18 f5       	brcc	.+70     	; 0xa98 <matrix_scan+0x212>
}

inline
static void matrix_break(uint8_t code)
{
    if (matrix_is_on(ROW(code), COL(code))) {
     a52:	dc 2f       	mov	r29, r28
     a54:	d7 70       	andi	r29, 0x07	; 7
     a56:	c6 95       	lsr	r28
     a58:	c6 95       	lsr	r28
     a5a:	c6 95       	lsr	r28
     a5c:	6d 2f       	mov	r22, r29
     a5e:	8c 2f       	mov	r24, r28
     a60:	0e 94 9c 10 	call	0x2138	; 0x2138 <matrix_is_on>
     a64:	88 23       	and	r24, r24
     a66:	71 f0       	breq	.+28     	; 0xa84 <matrix_scan+0x1fe>
        matrix[ROW(code)] &= ~(1<<COL(code));
     a68:	ec 2f       	mov	r30, r28
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	e7 5e       	subi	r30, 0xE7	; 231
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <matrix_scan+0x1f2>
     a76:	88 0f       	add	r24, r24
     a78:	da 95       	dec	r29
     a7a:	ea f7       	brpl	.-6      	; 0xa76 <matrix_scan+0x1f0>
     a7c:	80 95       	com	r24
     a7e:	90 81       	ld	r25, Z
     a80:	89 23       	and	r24, r25
     a82:	80 83       	st	Z, r24
                    state = READY;
     a84:	85 e0       	ldi	r24, 0x05	; 5
     a86:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state.1940>
                    debug("\n");
     a8a:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     a8e:	80 ff       	sbrs	r24, 0
     a90:	5b cf       	rjmp	.-330    	; 0x948 <matrix_scan+0xc2>
     a92:	84 e4       	ldi	r24, 0x44	; 68
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	90 cf       	rjmp	.-224    	; 0x9b8 <matrix_scan+0x132>
                        debug("unexpected scan code at F0: "); debug_hex(code); debug("\n");
     a98:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     a9c:	80 ff       	sbrs	r24, 0
     a9e:	f2 cf       	rjmp	.-28     	; 0xa84 <matrix_scan+0x1fe>
     aa0:	8d e4       	ldi	r24, 0x4D	; 77
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
     aa8:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     aac:	80 ff       	sbrs	r24, 0
     aae:	ea cf       	rjmp	.-44     	; 0xa84 <matrix_scan+0x1fe>
     ab0:	1f 92       	push	r1
     ab2:	cf 93       	push	r28
     ab4:	88 e4       	ldi	r24, 0x48	; 72
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
     ac0:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	80 ff       	sbrs	r24, 0
     ace:	da cf       	rjmp	.-76     	; 0xa84 <matrix_scan+0x1fe>
     ad0:	86 e4       	ldi	r24, 0x46	; 70
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
     ad8:	d5 cf       	rjmp	.-86     	; 0xa84 <matrix_scan+0x1fe>

00000ada <matrix_get_row>:
    return matrix[row];
     ada:	e8 2f       	mov	r30, r24
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	e7 5e       	subi	r30, 0xE7	; 231
     ae0:	fe 4f       	sbci	r31, 0xFE	; 254
}
     ae2:	80 81       	ld	r24, Z
     ae4:	08 95       	ret

00000ae6 <led_set>:
#include "ps2.h"
#include "led.h"


void led_set(uint8_t usb_led)
{
     ae6:	98 2f       	mov	r25, r24
    uint8_t ps2_led = 0;
    if (usb_led &  (1<<USB_LED_SCROLL_LOCK))
     ae8:	82 fb       	bst	r24, 2
     aea:	88 27       	eor	r24, r24
     aec:	80 f9       	bld	r24, 0
        ps2_led |= (1<<PS2_LED_SCROLL_LOCK);
    if (usb_led &  (1<<USB_LED_NUM_LOCK))
     aee:	90 fd       	sbrc	r25, 0
        ps2_led |= (1<<PS2_LED_NUM_LOCK);
     af0:	82 60       	ori	r24, 0x02	; 2
    if (usb_led &  (1<<USB_LED_CAPS_LOCK))
     af2:	91 fd       	sbrc	r25, 1
        ps2_led |= (1<<PS2_LED_CAPS_LOCK);
     af4:	84 60       	ori	r24, 0x04	; 4
    ps2_host_set_led(ps2_led);
     af6:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <ps2_host_set_led>

00000afa <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     afa:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <keyboard_led_stats>
     afe:	08 95       	ret

00000b00 <send_mouse>:
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();
#endif
}
     b00:	08 95       	ret

00000b02 <send_system>:
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
#endif
}
     b02:	08 95       	ret

00000b04 <send_keyboard>:
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	d8 2f       	mov	r29, r24
     b0a:	c9 2f       	mov	r28, r25
    if (USB_DeviceState != DEVICE_STATE_Configured)
     b0c:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	21 f5       	brne	.+72     	; 0xb5c <send_keyboard+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				#endif
			}
     b1a:	81 e8       	ldi	r24, 0x81	; 129
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
     b1c:	81 50       	subi	r24, 0x01	; 1
     b1e:	21 f0       	breq	.+8      	; 0xb28 <send_keyboard+0x24>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b20:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b24:	95 ff       	sbrs	r25, 5
     b26:	1d c0       	rjmp	.+58     	; 0xb62 <send_keyboard+0x5e>
     b28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
     b2c:	85 ff       	sbrs	r24, 5
     b2e:	16 c0       	rjmp	.+44     	; 0xb5c <send_keyboard+0x58>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	68 e0       	ldi	r22, 0x08	; 8
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	8d 2f       	mov	r24, r29
     b3a:	9c 2f       	mov	r25, r28
     b3c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b44:	8e 77       	andi	r24, 0x7E	; 126
     b46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
     b4a:	88 e0       	ldi	r24, 0x08	; 8
     b4c:	ed 2f       	mov	r30, r29
     b4e:	fc 2f       	mov	r31, r28
     b50:	ae e2       	ldi	r26, 0x2E	; 46
     b52:	b2 e0       	ldi	r27, 0x02	; 2
     b54:	01 90       	ld	r0, Z+
     b56:	0d 92       	st	X+, r0
     b58:	8a 95       	dec	r24
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <send_keyboard+0x50>
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b62:	ef e3       	ldi	r30, 0x3F	; 63
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <send_keyboard+0x62>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <send_keyboard+0x68>
     b6c:	00 00       	nop
	}
	else
		__ticks = (uint8_t)__tmp;
	_delay_loop_1(__ticks);
#endif
}
     b6e:	d6 cf       	rjmp	.-84     	; 0xb1c <send_keyboard+0x18>

00000b70 <console_is_ready>:
{
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	00 d0       	rcall	.+0      	; 0xb76 <console_is_ready+0x6>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <console_is_ready+0x8>
     b78:	0f 92       	push	r0
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
    if (!hid_listen_ready) {
     b7e:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <hid_listen_ready.5067>
     b82:	2d 83       	std	Y+5, r18	; 0x05
     b84:	21 11       	cpse	r18, r1
     b86:	0c c0       	rjmp	.+24     	; 0xba0 <console_is_ready+0x30>
        if (timer_read32() < 2500)
     b88:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <timer_read32>
     b8c:	64 3c       	cpi	r22, 0xC4	; 196
     b8e:	79 40       	sbci	r23, 0x09	; 9
     b90:	81 05       	cpc	r24, r1
     b92:	91 05       	cpc	r25, r1
     b94:	28 f0       	brcs	.+10     	; 0xba0 <console_is_ready+0x30>
        hid_listen_ready = true;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <hid_listen_ready.5067>
    return true;
     b9c:	b1 e0       	ldi	r27, 0x01	; 1
     b9e:	bd 83       	std	Y+5, r27	; 0x05
}
     ba0:	8d 81       	ldd	r24, Y+5	; 0x05
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <sendchar>:

/*******************************************************************************
 * sendchar
 ******************************************************************************/
int8_t sendchar(uint8_t c)
{
     bb2:	ff 92       	push	r15
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	d8 2f       	mov	r29, r24
    if (!(SREG & (1<<SREG_I)))
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	07 fe       	sbrs	r0, 7
     bc2:	48 c0       	rjmp	.+144    	; 0xc54 <sendchar+0xa2>
    if (USB_DeviceState != DEVICE_STATE_Configured && !ringbuf_is_full(&sendbuf))
     bc4:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
     bc8:	84 30       	cpi	r24, 0x04	; 4
     bca:	71 f0       	breq	.+28     	; 0xbe8 <sendchar+0x36>
{
    return (buf->head == buf->tail);
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
     bcc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <sendbuf+0x4>
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	82 23       	and	r24, r18
     bdc:	93 23       	and	r25, r19
     bde:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <sendbuf+0x3>
     be2:	28 17       	cp	r18, r24
     be4:	19 06       	cpc	r1, r25
     be6:	b1 f5       	brne	.+108    	; 0xc54 <sendchar+0xa2>
    if (!console_is_ready() && !ringbuf_is_full(&sendbuf))
     be8:	0e 94 b8 05 	call	0xb70	; 0xb70 <console_is_ready>
     bec:	81 11       	cpse	r24, r1
     bee:	0f c0       	rjmp	.+30     	; 0xc0e <sendchar+0x5c>
     bf0:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	2f 5f       	subi	r18, 0xFF	; 255
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <sendbuf+0x4>
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	28 23       	and	r18, r24
     c02:	39 23       	and	r19, r25
     c04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sendbuf+0x3>
     c08:	82 17       	cp	r24, r18
     c0a:	13 06       	cpc	r1, r19
     c0c:	19 f5       	brne	.+70     	; 0xc54 <sendchar+0xa2>
    uint16_t prev = timer_read();
     c0e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <timer_read>
     c12:	8c 01       	movw	r16, r24
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c14:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     c18:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c1a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c1e:	89 2f       	mov	r24, r25
     c20:	81 70       	andi	r24, 0x01	; 1
     c22:	90 fd       	sbrc	r25, 0
     c24:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c26:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
     c2e:	85 e0       	ldi	r24, 0x05	; 5
     c30:	f8 2e       	mov	r15, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c32:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (Endpoint_IsStalled() || !Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     c36:	85 fd       	sbrc	r24, 5
     c38:	0a c0       	rjmp	.+20     	; 0xc4e <sendchar+0x9c>
				return ((UECONX & (1 << EPEN)) ? true : false);
     c3a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     c3e:	89 2f       	mov	r24, r25
     c40:	81 70       	andi	r24, 0x01	; 1
     c42:	90 ff       	sbrs	r25, 0
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <sendchar+0x9c>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     c46:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     c4a:	97 fd       	sbrc	r25, 7
     c4c:	43 c0       	rjmp	.+134    	; 0xcd4 <sendchar+0x122>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c4e:	cf 70       	andi	r28, 0x0F	; 15
     c50:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     c54:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	9c 01       	movw	r18, r24
     c5c:	2f 5f       	subi	r18, 0xFF	; 255
     c5e:	3f 4f       	sbci	r19, 0xFF	; 255
     c60:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	24 23       	and	r18, r20
     c68:	35 23       	and	r19, r21
     c6a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <sendbuf+0x3>
    if (ringbuf_is_full(buf)) {
     c6e:	42 17       	cp	r20, r18
     c70:	13 06       	cpc	r1, r19
     c72:	09 f4       	brne	.+2      	; 0xc76 <sendchar+0xc4>
     c74:	7c c0       	rjmp	.+248    	; 0xd6e <sendchar+0x1bc>
    buf->buffer[buf->head] = data;
     c76:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <sendbuf>
     c7a:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <sendbuf+0x1>
     c7e:	82 0f       	add	r24, r18
     c80:	93 1f       	adc	r25, r19
     c82:	fc 01       	movw	r30, r24
     c84:	d0 83       	st	Z, r29
    buf->head++;
     c86:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <sendbuf+0x2>
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
     c8c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <sendbuf+0x4>
     c90:	89 23       	and	r24, r25
     c92:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <sendbuf+0x2>

    #ifdef CONSOLE_ENABLE
    console_putc(c);
    #endif

    return 0;
     c96:	6b c0       	rjmp	.+214    	; 0xd6e <sendchar+0x1bc>
    uint8_t data = buf->buffer[buf->tail];
     c98:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
     c9c:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
     ca0:	e9 0f       	add	r30, r25
     ca2:	f1 1d       	adc	r31, r1
     ca4:	20 81       	ld	r18, Z
    buf->tail++;
     ca6:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
     ca8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <sendbuf+0x4>
     cac:	93 23       	and	r25, r19
     cae:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cb2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cb6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
     cba:	95 fd       	sbrc	r25, 5
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <sendchar+0x122>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cbe:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cc2:	90 ff       	sbrs	r25, 0
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <sendchar+0x122>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cc6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cca:	9e 77       	andi	r25, 0x7E	; 126
     ccc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
     cd0:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5073>
    return (buf->head == buf->tail);
     cd4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
     cd8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cdc:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ce0:	29 17       	cp	r18, r25
     ce2:	31 f1       	breq	.+76     	; 0xd30 <sendchar+0x17e>
     ce4:	35 fd       	sbrc	r19, 5
     ce6:	d8 cf       	rjmp	.-80     	; 0xc98 <sendchar+0xe6>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	26 c0       	rjmp	.+76     	; 0xd38 <sendchar+0x186>
				UEDATX = Data;
     cec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			}
     cf0:	2e c0       	rjmp	.+92     	; 0xd4e <sendchar+0x19c>
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <sendbuf+0x4>
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	24 23       	and	r18, r20
     d00:	35 23       	and	r19, r21
    if (ringbuf_is_full(&sendbuf) && timeout) {
     d02:	92 17       	cp	r25, r18
     d04:	13 06       	cpc	r1, r19
     d06:	09 f0       	breq	.+2      	; 0xd0a <sendchar+0x158>
     d08:	a2 cf       	rjmp	.-188    	; 0xc4e <sendchar+0x9c>
     d0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <timeout.5073>
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <sendchar+0x162>
     d12:	9d cf       	rjmp	.-198    	; 0xc4e <sendchar+0x9c>
        uint16_t curr = timer_read();
     d14:	0e 94 de 1c 	call	0x39bc	; 0x39bc <timer_read>
     d18:	9c 01       	movw	r18, r24
        if (curr != prev) {
     d1a:	80 17       	cp	r24, r16
     d1c:	91 07       	cpc	r25, r17
     d1e:	09 f4       	brne	.+2      	; 0xd22 <sendchar+0x170>
     d20:	88 cf       	rjmp	.-240    	; 0xc32 <sendchar+0x80>
            timeout--;
     d22:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <timeout.5073>
     d26:	81 50       	subi	r24, 0x01	; 1
     d28:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <timeout.5073>
        uint16_t curr = timer_read();
     d2c:	89 01       	movw	r16, r18
     d2e:	81 cf       	rjmp	.-254    	; 0xc32 <sendchar+0x80>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
     d30:	35 ff       	sbrs	r19, 5
     d32:	da cf       	rjmp	.-76     	; 0xce8 <sendchar+0x136>
				UEDATX = Data;
     d34:	d0 93 f1 00 	sts	0x00F1, r29	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     d38:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     d3c:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     d40:	53 2f       	mov	r21, r19
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
     d42:	45 2b       	or	r20, r21
     d44:	79 f0       	breq	.+30     	; 0xd64 <sendchar+0x1b2>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d46:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d4a:	30 ff       	sbrs	r19, 0
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <sendchar+0x1b2>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     d4e:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
     d52:	35 fd       	sbrc	r19, 5
     d54:	cb cf       	rjmp	.-106    	; 0xcec <sendchar+0x13a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d56:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d5a:	3e 77       	andi	r19, 0x7E	; 126
     d5c:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
     d60:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <timeout.5073>
    if (done) {
     d64:	88 23       	and	r24, r24
     d66:	29 f2       	breq	.-118    	; 0xcf2 <sendchar+0x140>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d68:	cf 70       	andi	r28, 0x0F	; 15
     d6a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	08 95       	ret

00000d7c <send_consumer>:
     d7c:	08 95       	ret

00000d7e <EVENT_USB_Device_Connect>:
    if (!USB_IsInitialized) {
     d7e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <USB_IsInitialized>
     d82:	81 11       	cpse	r24, r1
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <EVENT_USB_Device_Connect+0x10>
        USB_Disable();
     d86:	0e 94 a7 0b 	call	0x174e	; 0x174e <USB_Disable>
        USB_Init();
     d8a:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <USB_Init>
}
     d8e:	08 95       	ret

00000d90 <EVENT_USB_Device_Disconnect>:
    USB_IsInitialized = false;
     d90:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <USB_IsInitialized>
}
     d94:	08 95       	ret

00000d96 <EVENT_USB_Device_Reset>:
}
     d96:	08 95       	ret

00000d98 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
     d98:	42 e0       	ldi	r20, 0x02	; 2
     d9a:	61 ec       	ldi	r22, 0xC1	; 193
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	0e 94 cd 08 	call	0x119a	; 0x119a <Endpoint_ConfigureEndpoint_Prv>
     da2:	42 e2       	ldi	r20, 0x22	; 34
     da4:	61 ec       	ldi	r22, 0xC1	; 193
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0c 94 cd 08 	jmp	0x119a	; 0x119a <Endpoint_ConfigureEndpoint_Prv>

00000dac <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
     dac:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <USB_ControlRequest+0x1>
     db0:	89 30       	cpi	r24, 0x09	; 9
     db2:	81 f1       	breq	.+96     	; 0xe14 <EVENT_USB_Device_ControlRequest+0x68>
     db4:	48 f4       	brcc	.+18     	; 0xdc8 <EVENT_USB_Device_ControlRequest+0x1c>
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	09 f4       	brne	.+2      	; 0xdbc <EVENT_USB_Device_ControlRequest+0x10>
     dba:	91 c0       	rjmp	.+290    	; 0xede <EVENT_USB_Device_ControlRequest+0x132>
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <EVENT_USB_Device_ControlRequest+0x16>
     dc0:	4c c0       	rjmp	.+152    	; 0xe5a <EVENT_USB_Device_ControlRequest+0xae>
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	41 f0       	breq	.+16     	; 0xdd6 <EVENT_USB_Device_ControlRequest+0x2a>
     dc6:	08 95       	ret
     dc8:	8a 30       	cpi	r24, 0x0A	; 10
     dca:	09 f4       	brne	.+2      	; 0xdce <EVENT_USB_Device_ControlRequest+0x22>
     dcc:	78 c0       	rjmp	.+240    	; 0xebe <EVENT_USB_Device_ControlRequest+0x112>
     dce:	8b 30       	cpi	r24, 0x0B	; 11
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <EVENT_USB_Device_ControlRequest+0x28>
     dd2:	5e c0       	rjmp	.+188    	; 0xe90 <EVENT_USB_Device_ControlRequest+0xe4>
     dd4:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dd6:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>
     dda:	81 3a       	cpi	r24, 0xA1	; 161
     ddc:	e9 f5       	brne	.+122    	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
     dde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     de2:	87 7f       	andi	r24, 0xF7	; 247
     de4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
     de8:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x4>
     dec:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <USB_ControlRequest+0x5>
     df0:	89 2b       	or	r24, r25
     df2:	61 f4       	brne	.+24     	; 0xe0c <EVENT_USB_Device_ControlRequest+0x60>
                    ReportSize = sizeof(keyboard_report_sent);
     df4:	68 e0       	ldi	r22, 0x08	; 8
                    ReportData = (uint8_t*)&keyboard_report_sent;
     df6:	8e e2       	ldi	r24, 0x2E	; 46
     df8:	92 e0       	ldi	r25, 0x02	; 2
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	0e 94 a0 09 	call	0x1340	; 0x1340 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e04:	8b 77       	andi	r24, 0x7B	; 123
     e06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
     e0a:	08 95       	ret
    uint8_t  ReportSize = 0;
     e0c:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	f3 cf       	rjmp	.-26     	; 0xdfa <EVENT_USB_Device_ControlRequest+0x4e>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e14:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>
     e18:	81 32       	cpi	r24, 0x21	; 33
     e1a:	f1 f4       	brne	.+60     	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
                switch (USB_ControlRequest.wIndex) {
     e1c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x4>
     e20:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <USB_ControlRequest+0x5>
     e24:	89 2b       	or	r24, r25
     e26:	c1 f4       	brne	.+48     	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
     e28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
     e36:	82 ff       	sbrs	r24, 2
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <EVENT_USB_Device_ControlRequest+0xa4>
				return UEDATX;
     e3a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
     e3e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e46:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
     e4c:	0c 94 01 09 	jmp	0x1202	; 0x1202 <Endpoint_ClearStatusStage>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
     e50:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
     e54:	81 11       	cpse	r24, r1
     e56:	ed cf       	rjmp	.-38     	; 0xe32 <EVENT_USB_Device_ControlRequest+0x86>
}
     e58:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e5a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>
     e5e:	81 3a       	cpi	r24, 0xA1	; 161
     e60:	d9 f7       	brne	.-10     	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     e62:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x4>
     e66:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <USB_ControlRequest+0x5>
     e6a:	89 2b       	or	r24, r25
     e6c:	a9 f7       	brne	.-22     	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
     e6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e72:	87 7f       	andi	r24, 0xF7	; 247
     e74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <EVENT_USB_Device_ControlRequest+0xcc>
                    Endpoint_Write_8(keyboard_protocol);
     e80:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
				UEDATX = Data;
     e84:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e8c:	8e 77       	andi	r24, 0x7E	; 126
     e8e:	dc cf       	rjmp	.-72     	; 0xe48 <EVENT_USB_Device_ControlRequest+0x9c>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e90:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>
     e94:	81 32       	cpi	r24, 0x21	; 33
     e96:	01 f7       	brne	.-64     	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     e98:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x4>
     e9c:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <USB_ControlRequest+0x5>
     ea0:	89 2b       	or	r24, r25
     ea2:	d1 f6       	brne	.-76     	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
				UEINTX &= ~(1 << RXSTPI);
     ea4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ea8:	87 7f       	andi	r24, 0xF7	; 247
     eaa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
     eae:	0e 94 01 09 	call	0x1202	; 0x1202 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
     eb2:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest+0x2>
     eb6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <keyboard_protocol>
                    clear_keyboard();
     eba:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ebe:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>
     ec2:	81 32       	cpi	r24, 0x21	; 33
     ec4:	49 f6       	brne	.-110    	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
     ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
     ed0:	0e 94 01 09 	call	0x1202	; 0x1202 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
     ed4:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <USB_ControlRequest+0x3>
     ed8:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <keyboard_idle>
     edc:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ede:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>
     ee2:	81 3a       	cpi	r24, 0xA1	; 161
     ee4:	09 f0       	breq	.+2      	; 0xee8 <EVENT_USB_Device_ControlRequest+0x13c>
     ee6:	b8 cf       	rjmp	.-144    	; 0xe58 <EVENT_USB_Device_ControlRequest+0xac>
     ee8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eec:	87 7f       	andi	r24, 0xF7	; 247
     eee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ef2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
     ef6:	80 ff       	sbrs	r24, 0
     ef8:	fc cf       	rjmp	.-8      	; 0xef2 <EVENT_USB_Device_ControlRequest+0x146>
                Endpoint_Write_8(keyboard_idle);
     efa:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <keyboard_idle>
     efe:	c2 cf       	rjmp	.-124    	; 0xe84 <EVENT_USB_Device_ControlRequest+0xd8>

00000f00 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
     f00:	08 95       	ret

00000f02 <hook_late_init>:
     f02:	08 95       	ret

00000f04 <hook_usb_suspend_entry>:
 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    // Turn off LED to save power and keep its status to resotre it later.
    // LED status will be updated by keyboard_task() in main loop hopefully.
    _led_stats = keyboard_led_stats;
     f04:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <keyboard_led_stats>
     f08:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_led_stats>
    keyboard_led_stats = 0;
     f0c:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <keyboard_led_stats>

    // Calling long task here can prevent USB state transition

    matrix_clear();
     f10:	0e 94 9a 10 	call	0x2134	; 0x2134 <matrix_clear>
    clear_keyboard();
     f14:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <clear_keyboard>

00000f18 <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
     f18:	0c 94 82 07 	jmp	0xf04	; 0xf04 <hook_usb_suspend_entry>

00000f1c <hook_usb_suspend_loop>:
__attribute__((weak))
void hook_usb_suspend_loop(void)
{
#ifndef TMK_LUFA_DEBUG_UART
    // This corrupts debug print when suspend
    suspend_power_down();
     f1c:	0e 94 6d 1c 	call	0x38da	; 0x38da <suspend_power_down>
#endif
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
     f20:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <USB_Device_RemoteWakeupEnabled>
     f24:	88 23       	and	r24, r24
     f26:	29 f0       	breq	.+10     	; 0xf32 <hook_usb_suspend_loop+0x16>
     f28:	0e 94 96 1c 	call	0x392c	; 0x392c <suspend_wakeup_condition>
     f2c:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
     f2e:	0c 94 b7 08 	jmp	0x116e	; 0x116e <USB_Device_SendRemoteWakeup>
    }
}
     f32:	08 95       	ret

00000f34 <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
     f34:	0e 94 aa 1c 	call	0x3954	; 0x3954 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
#endif

    // Restore LED status and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
     f38:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_led_stats>
     f3c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <keyboard_led_stats>

    // Calling long task here can prevent USB state transition
}
     f40:	08 95       	ret

00000f42 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
     f42:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <hook_usb_wakeup>

00000f46 <hook_usb_startup_wait_loop>:
     f46:	08 95       	ret

00000f48 <main>:
    MCUSR &= ~(1 << WDRF);
     f48:	84 b7       	in	r24, 0x34	; 52
     f4a:	87 7f       	andi	r24, 0xF7	; 247
     f4c:	84 bf       	out	0x34, r24	; 52
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	a8 95       	wdr
     f54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f58:	88 61       	ori	r24, 0x18	; 24
     f5a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f5e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f62:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     f64:	80 e8       	ldi	r24, 0x80	; 128
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     f70:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     f74:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
     f76:	89 ed       	ldi	r24, 0xD9	; 217
     f78:	95 e0       	ldi	r25, 0x05	; 5
     f7a:	0e 94 3e 1c 	call	0x387c	; 0x387c <print_set_sendchar>
    host_set_driver(&lufa_driver);
     f7e:	86 e0       	ldi	r24, 0x06	; 6
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <host_set_driver>
    print("\n\nTMK:" STR(TMK_VERSION) "/LUFA\n\n");
     f86:	84 e1       	ldi	r24, 0x14	; 20
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
    hook_early_init();
     f8e:	0e 94 80 07 	call	0xf00	; 0xf00 <hook_early_init>
    keyboard_setup();
     f92:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <keyboard_setup>
    USB_Disable();
     f96:	0e 94 a7 0b 	call	0x174e	; 0x174e <USB_Disable>
    USB_Init();
     f9a:	0e 94 04 0c 	call	0x1808	; 0x1808 <USB_Init>
    sei();
     f9e:	78 94       	sei
    keyboard_init();
     fa0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <keyboard_init>
    while (USB_DeviceState != DEVICE_STATE_Configured) {
     fa4:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
     fa8:	84 30       	cpi	r24, 0x04	; 4
     faa:	09 f0       	breq	.+2      	; 0xfae <main+0x66>
     fac:	44 c0       	rjmp	.+136    	; 0x1036 <main+0xee>
    print("\nUSB configured.\n");
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
    hook_late_init();
     fb6:	0e 94 81 07 	call	0xf02	; 0xf02 <hook_late_init>
    print("\nKeyboard start.\n");
     fba:	80 ef       	ldi	r24, 0xF0	; 240
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc2:	c2 e0       	ldi	r28, 0x02	; 2
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
     fc4:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	c1 f1       	breq	.+112    	; 0x103c <main+0xf4>
        keyboard_task();
     fcc:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     fd0:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     fd4:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    if (fn == USB_Device_GetFrameNumber()) {
     fd8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <fn.5099>
     fdc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <fn.5099+0x1>
     fe0:	28 17       	cp	r18, r24
     fe2:	39 07       	cpc	r19, r25
     fe4:	79 f3       	breq	.-34     	; 0xfc4 <main+0x7c>
     fe6:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     fea:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    fn = USB_Device_GetFrameNumber();
     fee:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <fn.5099+0x1>
     ff2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <fn.5099>
    if (!console_is_ready())
     ff6:	0e 94 b8 05 	call	0xb70	; 0xb70 <console_is_ready>
     ffa:	88 23       	and	r24, r24
     ffc:	19 f3       	breq	.-58     	; 0xfc4 <main+0x7c>
    if (USB_DeviceState != DEVICE_STATE_Configured)
     ffe:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	f9 f6       	brne	.-66     	; 0xfc4 <main+0x7c>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1006:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    100a:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    100c:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1010:	82 2f       	mov	r24, r18
    1012:	81 70       	andi	r24, 0x01	; 1
    1014:	20 fd       	sbrc	r18, 0
    1016:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1018:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    101a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    101e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1022:	90 ff       	sbrs	r25, 0
    1024:	04 c0       	rjmp	.+8      	; 0x102e <main+0xe6>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1026:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    102a:	97 fd       	sbrc	r25, 7
    102c:	26 c0       	rjmp	.+76     	; 0x107a <main+0x132>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    102e:	8f 70       	andi	r24, 0x0F	; 15
    1030:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
    1034:	c7 cf       	rjmp	.-114    	; 0xfc4 <main+0x7c>
        hook_usb_startup_wait_loop();
    1036:	0e 94 a3 07 	call	0xf46	; 0xf46 <hook_usb_startup_wait_loop>
    103a:	b4 cf       	rjmp	.-152    	; 0xfa4 <main+0x5c>
            hook_usb_suspend_loop();
    103c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <hook_usb_suspend_loop>
    1040:	c1 cf       	rjmp	.-126    	; 0xfc4 <main+0x7c>
    uint8_t data = buf->buffer[buf->tail];
    1042:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <sendbuf>
    1046:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <sendbuf+0x1>
    104a:	e9 0f       	add	r30, r25
    104c:	f1 1d       	adc	r31, r1
    104e:	20 81       	ld	r18, Z
    buf->tail++;
    1050:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    1052:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <sendbuf+0x4>
    1056:	93 23       	and	r25, r19
    1058:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <sendbuf+0x3>
				UEDATX = Data;
    105c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1060:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    1064:	95 fd       	sbrc	r25, 5
    1066:	09 c0       	rjmp	.+18     	; 0x107a <main+0x132>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1068:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    106c:	90 ff       	sbrs	r25, 0
    106e:	05 c0       	rjmp	.+10     	; 0x107a <main+0x132>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1070:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1074:	9e 77       	andi	r25, 0x7E	; 126
    1076:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    return (buf->head == buf->tail);
    107a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    107e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <sendbuf+0x2>
    1082:	29 17       	cp	r18, r25
    1084:	21 f0       	breq	.+8      	; 0x108e <main+0x146>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1086:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108a:	25 fd       	sbrc	r18, 5
    108c:	da cf       	rjmp	.-76     	; 0x1042 <main+0xfa>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    108e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1092:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1096:	39 2f       	mov	r19, r25
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    1098:	23 2b       	or	r18, r19
    109a:	49 f2       	breq	.-110    	; 0x102e <main+0xe6>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    109c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10a0:	90 ff       	sbrs	r25, 0
    10a2:	c5 cf       	rjmp	.-118    	; 0x102e <main+0xe6>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10a4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    10a8:	95 fd       	sbrc	r25, 5
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <main+0x170>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ac:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10b0:	9e 77       	andi	r25, 0x7E	; 126
    10b2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    10b6:	bb cf       	rjmp	.-138    	; 0x102e <main+0xe6>
				UEDATX = Data;
    10b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			}
    10bc:	f3 cf       	rjmp	.-26     	; 0x10a4 <main+0x15c>

000010be <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    10be:	fc 01       	movw	r30, r24
    10c0:	da 01       	movw	r26, r20
    const uint8_t  DescriptorType   = (wValue >> 8);
    10c2:	8f 2f       	mov	r24, r31
    10c4:	99 27       	eor	r25, r25
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	c9 f0       	breq	.+50     	; 0x10fe <CALLBACK_USB_GetDescriptor+0x40>
    10cc:	68 f4       	brcc	.+26     	; 0x10e8 <CALLBACK_USB_GetDescriptor+0x2a>
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <CALLBACK_USB_GetDescriptor+0x18>
    10d4:	3d c0       	rjmp	.+122    	; 0x1150 <CALLBACK_USB_GetDescriptor+0x92>
    10d6:	02 97       	sbiw	r24, 0x02	; 2
    10d8:	69 f4       	brne	.+26     	; 0x10f4 <CALLBACK_USB_GetDescriptor+0x36>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    10da:	82 e4       	ldi	r24, 0x42	; 66
    10dc:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    10de:	2e e9       	ldi	r18, 0x9E	; 158
    10e0:	32 e0       	ldi	r19, 0x02	; 2
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    10e2:	2d 93       	st	X+, r18
    10e4:	3c 93       	st	X, r19
    return Size;
}
    10e6:	08 95       	ret
    switch (DescriptorType)
    10e8:	81 32       	cpi	r24, 0x21	; 33
    10ea:	91 05       	cpc	r25, r1
    10ec:	e9 f0       	breq	.+58     	; 0x1128 <CALLBACK_USB_GetDescriptor+0x6a>
    10ee:	82 32       	cpi	r24, 0x22	; 34
    10f0:	91 05       	cpc	r25, r1
    10f2:	29 f1       	breq	.+74     	; 0x113e <CALLBACK_USB_GetDescriptor+0x80>
    uint16_t    Size    = NO_DESCRIPTOR;
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    const void* Address = NULL;
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	f2 cf       	rjmp	.-28     	; 0x10e2 <CALLBACK_USB_GetDescriptor+0x24>
            switch (DescriptorIndex )
    10fe:	cf 01       	movw	r24, r30
    1100:	99 27       	eor	r25, r25
    1102:	e1 30       	cpi	r30, 0x01	; 1
    1104:	59 f0       	breq	.+22     	; 0x111c <CALLBACK_USB_GetDescriptor+0x5e>
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	91 05       	cpc	r25, r1
    110a:	59 f0       	breq	.+22     	; 0x1122 <CALLBACK_USB_GetDescriptor+0x64>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    110c:	ea e9       	ldi	r30, 0x9A	; 154
    110e:	f2 e0       	ldi	r31, 0x02	; 2
    1110:	89 2b       	or	r24, r25
    1112:	81 f7       	brne	.-32     	; 0x10f4 <CALLBACK_USB_GetDescriptor+0x36>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1114:	84 91       	lpm	r24, Z
    1116:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    1118:	9f 01       	movw	r18, r30
                    break;
    111a:	e3 cf       	rjmp	.-58     	; 0x10e2 <CALLBACK_USB_GetDescriptor+0x24>
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    111c:	ea e8       	ldi	r30, 0x8A	; 138
    111e:	f2 e0       	ldi	r31, 0x02	; 2
    1120:	f9 cf       	rjmp	.-14     	; 0x1114 <CALLBACK_USB_GetDescriptor+0x56>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1122:	ea e2       	ldi	r30, 0x2A	; 42
    1124:	f2 e0       	ldi	r31, 0x02	; 2
    1126:	f6 cf       	rjmp	.-20     	; 0x1114 <CALLBACK_USB_GetDescriptor+0x56>
            switch (wIndex) {
    1128:	61 15       	cp	r22, r1
    112a:	71 05       	cpc	r23, r1
    112c:	b1 f0       	breq	.+44     	; 0x115a <CALLBACK_USB_GetDescriptor+0x9c>
    112e:	61 30       	cpi	r22, 0x01	; 1
    1130:	71 05       	cpc	r23, r1
    1132:	01 f7       	brne	.-64     	; 0x10f4 <CALLBACK_USB_GetDescriptor+0x36>
                Size    = sizeof(USB_HID_Descriptor_HID_t);
    1134:	89 e0       	ldi	r24, 0x09	; 9
    1136:	90 e0       	ldi	r25, 0x00	; 0
                Address = &ConfigurationDescriptor.Console_HID;
    1138:	29 ec       	ldi	r18, 0xC9	; 201
    113a:	32 e0       	ldi	r19, 0x02	; 2
    113c:	d2 cf       	rjmp	.-92     	; 0x10e2 <CALLBACK_USB_GetDescriptor+0x24>
            switch (wIndex) {
    113e:	61 15       	cp	r22, r1
    1140:	71 05       	cpc	r23, r1
    1142:	81 f0       	breq	.+32     	; 0x1164 <CALLBACK_USB_GetDescriptor+0xa6>
    1144:	61 30       	cpi	r22, 0x01	; 1
    1146:	71 05       	cpc	r23, r1
    1148:	a9 f6       	brne	.-86     	; 0x10f4 <CALLBACK_USB_GetDescriptor+0x36>
                Address = &ConsoleReport;
    114a:	22 ef       	ldi	r18, 0xF2	; 242
    114c:	32 e0       	ldi	r19, 0x02	; 2
    114e:	c9 cf       	rjmp	.-110    	; 0x10e2 <CALLBACK_USB_GetDescriptor+0x24>
    switch (DescriptorType)
    1150:	82 e1       	ldi	r24, 0x12	; 18
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	20 ee       	ldi	r18, 0xE0	; 224
    1156:	32 e0       	ldi	r19, 0x02	; 2
    1158:	c4 cf       	rjmp	.-120    	; 0x10e2 <CALLBACK_USB_GetDescriptor+0x24>
    115a:	89 e0       	ldi	r24, 0x09	; 9
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	20 eb       	ldi	r18, 0xB0	; 176
    1160:	32 e0       	ldi	r19, 0x02	; 2
    1162:	bf cf       	rjmp	.-130    	; 0x10e2 <CALLBACK_USB_GetDescriptor+0x24>
    1164:	80 e4       	ldi	r24, 0x40	; 64
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	24 e1       	ldi	r18, 0x14	; 20
    116a:	33 e0       	ldi	r19, 0x03	; 3
    116c:	ba cf       	rjmp	.-140    	; 0x10e2 <CALLBACK_USB_GetDescriptor+0x24>

0000116e <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    116e:	80 e1       	ldi	r24, 0x10	; 16
    1170:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1172:	82 e1       	ldi	r24, 0x12	; 18
    1174:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1176:	09 b4       	in	r0, 0x29	; 41
    1178:	00 fe       	sbrs	r0, 0
    117a:	fd cf       	rjmp	.-6      	; 0x1176 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    117c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1180:	8f 7d       	andi	r24, 0xDF	; 223
    1182:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1186:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    118a:	82 60       	ori	r24, 0x02	; 2
    118c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    1190:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1194:	81 fd       	sbrc	r24, 1
    1196:	fc cf       	rjmp	.-8      	; 0x1190 <USB_Device_SendRemoteWakeup+0x22>
}
    1198:	08 95       	ret

0000119a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    119a:	98 2f       	mov	r25, r24
    119c:	97 30       	cpi	r25, 0x07	; 7
    119e:	28 f0       	brcs	.+10     	; 0x11aa <Endpoint_ConfigureEndpoint_Prv+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11a0:	8f 70       	andi	r24, 0x0F	; 15
    11a2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	08 95       	ret
    11aa:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
    11ae:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    11b0:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    11b2:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    11b4:	98 17       	cp	r25, r24
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    11b8:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
    11bc:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
    11c0:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    11c4:	21 fd       	sbrc	r18, 1
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    11c8:	9f 5f       	subi	r25, 0xFF	; 255
    11ca:	e8 cf       	rjmp	.-48     	; 0x119c <Endpoint_ConfigureEndpoint_Prv+0x2>
				UECONX &= ~(1 << EPEN);
    11cc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11d0:	3e 7f       	andi	r19, 0xFE	; 254
    11d2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
    11d6:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11da:	3d 7f       	andi	r19, 0xFD	; 253
    11dc:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
    11e0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11e4:	31 60       	ori	r19, 0x01	; 1
    11e6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
    11ea:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
    11ee:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
    11f2:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11f6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
    11fa:	27 fd       	sbrc	r18, 7
    11fc:	e5 cf       	rjmp	.-54     	; 0x11c8 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    11fe:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    1200:	08 95       	ret

00001202 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1202:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>
    1206:	87 ff       	sbrs	r24, 7
    1208:	13 c0       	rjmp	.+38     	; 0x1230 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    120a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    120e:	82 ff       	sbrs	r24, 2
    1210:	06 c0       	rjmp	.+12     	; 0x121e <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1212:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1216:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1218:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    121e:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
    1222:	81 11       	cpse	r24, r1
    1224:	f2 cf       	rjmp	.-28     	; 0x120a <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    1226:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1228:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
    122c:	88 23       	and	r24, r24
    122e:	d9 f3       	breq	.-10     	; 0x1226 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1230:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1234:	80 ff       	sbrs	r24, 0
    1236:	f8 cf       	rjmp	.-16     	; 0x1228 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1238:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    123c:	8e 77       	andi	r24, 0x7E	; 126
    123e:	ec cf       	rjmp	.-40     	; 0x1218 <Endpoint_ClearStatusStage+0x16>

00001240 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1240:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1244:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1248:	95 e6       	ldi	r25, 0x65	; 101
    124a:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    124c:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1250:	82 2f       	mov	r24, r18
    1252:	81 70       	andi	r24, 0x01	; 1
    1254:	20 ff       	sbrs	r18, 0
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1258:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    125c:	80 ff       	sbrs	r24, 0
    125e:	06 c0       	rjmp	.+12     	; 0x126c <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1264:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1268:	22 fd       	sbrc	r18, 2
    126a:	1a c0       	rjmp	.+52     	; 0x12a0 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    126c:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1270:	88 23       	and	r24, r24
    1272:	89 f0       	breq	.+34     	; 0x1296 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1274:	85 30       	cpi	r24, 0x05	; 5
    1276:	89 f0       	breq	.+34     	; 0x129a <Endpoint_WaitUntilReady+0x5a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1278:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    127c:	85 fd       	sbrc	r24, 5
    127e:	0f c0       	rjmp	.+30     	; 0x129e <Endpoint_WaitUntilReady+0x5e>
    1280:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1284:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1288:	42 17       	cp	r20, r18
    128a:	53 07       	cpc	r21, r19
    128c:	f9 f2       	breq	.-66     	; 0x124c <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    128e:	91 50       	subi	r25, 0x01	; 1
    1290:	e1 f6       	brne	.-72     	; 0x124a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1292:	84 e0       	ldi	r24, 0x04	; 4
    1294:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    129e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    12a0:	08 95       	ret

000012a2 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	6c 01       	movw	r12, r24
    12b6:	eb 01       	movw	r28, r22
    12b8:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    12ba:	0e 94 20 09 	call	0x1240	; 0x1240 <Endpoint_WaitUntilReady>
    12be:	f8 2e       	mov	r15, r24
    12c0:	81 11       	cpse	r24, r1
    12c2:	23 c0       	rjmp	.+70     	; 0x130a <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    12c4:	01 15       	cp	r16, r1
    12c6:	11 05       	cpc	r17, r1
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    12ca:	f8 01       	movw	r30, r16
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	c8 1b       	sub	r28, r24
    12d2:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    12d4:	c8 0e       	add	r12, r24
    12d6:	d9 1e       	adc	r13, r25
{
    12d8:	b1 2c       	mov	r11, r1
    12da:	a1 2c       	mov	r10, r1
	}

	while (Length)
    12dc:	20 97       	sbiw	r28, 0x00	; 0
    12de:	a9 f0       	breq	.+42     	; 0x130a <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    12e4:	85 fd       	sbrc	r24, 5
    12e6:	22 c0       	rjmp	.+68     	; 0x132c <Endpoint_Write_Stream_LE+0x8a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ec:	8e 77       	andi	r24, 0x7E	; 126
    12ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    12f2:	01 15       	cp	r16, r1
    12f4:	11 05       	cpc	r17, r1
    12f6:	a1 f0       	breq	.+40     	; 0x1320 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
    12f8:	f8 01       	movw	r30, r16
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	a8 0e       	add	r10, r24
    1300:	b9 1e       	adc	r11, r25
    1302:	b1 82       	std	Z+1, r11	; 0x01
    1304:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1306:	85 e0       	ldi	r24, 0x05	; 5
    1308:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    130a:	8f 2d       	mov	r24, r15
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	bf 90       	pop	r11
    131c:	af 90       	pop	r10
    131e:	08 95       	ret
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1320:	0e 94 20 09 	call	0x1240	; 0x1240 <Endpoint_WaitUntilReady>
    1324:	88 23       	and	r24, r24
    1326:	d1 f2       	breq	.-76     	; 0x12dc <Endpoint_Write_Stream_LE+0x3a>
    1328:	f8 2e       	mov	r15, r24
    132a:	ef cf       	rjmp	.-34     	; 0x130a <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    132c:	f6 01       	movw	r30, r12
    132e:	81 91       	ld	r24, Z+
    1330:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1332:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
    1336:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1338:	ff ef       	ldi	r31, 0xFF	; 255
    133a:	af 1a       	sub	r10, r31
    133c:	bf 0a       	sbc	r11, r31
    133e:	ce cf       	rjmp	.-100    	; 0x12dc <Endpoint_Write_Stream_LE+0x3a>

00001340 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1340:	fc 01       	movw	r30, r24
    1342:	cb 01       	movw	r24, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1344:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <USB_ControlRequest+0x6>
    1348:	30 91 7d 03 	lds	r19, 0x037D	; 0x80037d <USB_ControlRequest+0x7>
    134c:	26 17       	cp	r18, r22
    134e:	37 07       	cpc	r19, r23
    1350:	90 f0       	brcs	.+36     	; 0x1376 <Endpoint_Write_Control_Stream_LE+0x36>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	29 f4       	brne	.+10     	; 0x1360 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1356:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    135a:	2e 77       	andi	r18, 0x7E	; 126
    135c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1360:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	51 f4       	brne	.+20     	; 0x137a <Endpoint_Write_Control_Stream_LE+0x3a>
    1366:	41 11       	cpse	r20, r1
    1368:	08 c0       	rjmp	.+16     	; 0x137a <Endpoint_Write_Control_Stream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    136a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    136e:	82 ff       	sbrs	r24, 2
    1370:	31 c0       	rjmp	.+98     	; 0x13d4 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	08 95       	ret
    1376:	c9 01       	movw	r24, r18
    1378:	f3 cf       	rjmp	.-26     	; 0x1360 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    137a:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    137e:	22 23       	and	r18, r18
    1380:	a9 f1       	breq	.+106    	; 0x13ec <Endpoint_Write_Control_Stream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1382:	25 30       	cpi	r18, 0x05	; 5
    1384:	a9 f1       	breq	.+106    	; 0x13f0 <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1386:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    138a:	23 fd       	sbrc	r18, 3
    138c:	2d c0       	rjmp	.+90     	; 0x13e8 <Endpoint_Write_Control_Stream_LE+0xa8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    138e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1392:	22 fd       	sbrc	r18, 2
    1394:	ea cf       	rjmp	.-44     	; 0x136a <Endpoint_Write_Control_Stream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1396:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    139a:	20 ff       	sbrs	r18, 0
    139c:	e2 cf       	rjmp	.-60     	; 0x1362 <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    139e:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    13a2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	19 f0       	breq	.+6      	; 0x13b0 <Endpoint_Write_Control_Stream_LE+0x70>
    13aa:	28 30       	cpi	r18, 0x08	; 8
    13ac:	31 05       	cpc	r19, r1
    13ae:	58 f0       	brcs	.+22     	; 0x13c6 <Endpoint_Write_Control_Stream_LE+0x86>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	28 30       	cpi	r18, 0x08	; 8
    13b4:	31 05       	cpc	r19, r1
    13b6:	09 f0       	breq	.+2      	; 0x13ba <Endpoint_Write_Control_Stream_LE+0x7a>
    13b8:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13be:	2e 77       	andi	r18, 0x7E	; 126
    13c0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    13c4:	ce cf       	rjmp	.-100    	; 0x1362 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    13c6:	41 91       	ld	r20, Z+
				UEDATX = Data;
    13c8:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    13cc:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    13ce:	2f 5f       	subi	r18, 0xFF	; 255
    13d0:	3f 4f       	sbci	r19, 0xFF	; 255
    13d2:	e9 cf       	rjmp	.-46     	; 0x13a6 <Endpoint_Write_Control_Stream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    13d4:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    13d8:	88 23       	and	r24, r24
    13da:	41 f0       	breq	.+16     	; 0x13ec <Endpoint_Write_Control_Stream_LE+0xac>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    13dc:	85 30       	cpi	r24, 0x05	; 5
    13de:	41 f0       	breq	.+16     	; 0x13f0 <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    13e4:	83 ff       	sbrs	r24, 3
    13e6:	c1 cf       	rjmp	.-126    	; 0x136a <Endpoint_Write_Control_Stream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
}
    13ea:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	08 95       	ret

000013f4 <Endpoint_Write_Control_PStream_LE>:
{
    13f4:	fc 01       	movw	r30, r24
    13f6:	cb 01       	movw	r24, r22
	if (Length > USB_ControlRequest.wLength)
    13f8:	20 91 7c 03 	lds	r18, 0x037C	; 0x80037c <USB_ControlRequest+0x6>
    13fc:	30 91 7d 03 	lds	r19, 0x037D	; 0x80037d <USB_ControlRequest+0x7>
    1400:	26 17       	cp	r18, r22
    1402:	37 07       	cpc	r19, r23
    1404:	90 f0       	brcs	.+36     	; 0x142a <Endpoint_Write_Control_PStream_LE+0x36>
	else if (!(Length))
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	29 f4       	brne	.+10     	; 0x1414 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    140a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    140e:	2e 77       	andi	r18, 0x7E	; 126
    1410:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1414:	40 e0       	ldi	r20, 0x00	; 0
	while (Length || LastPacketFull)
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	51 f4       	brne	.+20     	; 0x142e <Endpoint_Write_Control_PStream_LE+0x3a>
    141a:	41 11       	cpse	r20, r1
    141c:	08 c0       	rjmp	.+16     	; 0x142e <Endpoint_Write_Control_PStream_LE+0x3a>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    141e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
    1422:	82 ff       	sbrs	r24, 2
    1424:	32 c0       	rjmp	.+100    	; 0x148a <Endpoint_Write_Control_PStream_LE+0x96>
	return ENDPOINT_RWCSTREAM_NoError;
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	08 95       	ret
    142a:	c9 01       	movw	r24, r18
    142c:	f3 cf       	rjmp	.-26     	; 0x1414 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    142e:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1432:	22 23       	and	r18, r18
    1434:	b1 f1       	breq	.+108    	; 0x14a2 <Endpoint_Write_Control_PStream_LE+0xae>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1436:	25 30       	cpi	r18, 0x05	; 5
    1438:	b1 f1       	breq	.+108    	; 0x14a6 <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    143a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    143e:	23 fd       	sbrc	r18, 3
    1440:	2e c0       	rjmp	.+92     	; 0x149e <Endpoint_Write_Control_PStream_LE+0xaa>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1442:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1446:	22 fd       	sbrc	r18, 2
    1448:	ea cf       	rjmp	.-44     	; 0x141e <Endpoint_Write_Control_PStream_LE+0x2a>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    144a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    144e:	20 ff       	sbrs	r18, 0
    1450:	e2 cf       	rjmp	.-60     	; 0x1416 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1452:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1456:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	19 f0       	breq	.+6      	; 0x1464 <Endpoint_Write_Control_PStream_LE+0x70>
    145e:	28 30       	cpi	r18, 0x08	; 8
    1460:	31 05       	cpc	r19, r1
    1462:	58 f0       	brcs	.+22     	; 0x147a <Endpoint_Write_Control_PStream_LE+0x86>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	28 30       	cpi	r18, 0x08	; 8
    1468:	31 05       	cpc	r19, r1
    146a:	09 f0       	breq	.+2      	; 0x146e <Endpoint_Write_Control_PStream_LE+0x7a>
    146c:	40 e0       	ldi	r20, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    146e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1472:	2e 77       	andi	r18, 0x7E	; 126
    1474:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			}
    1478:	ce cf       	rjmp	.-100    	; 0x1416 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    147a:	44 91       	lpm	r20, Z
				UEDATX = Data;
    147c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1480:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1482:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	e8 cf       	rjmp	.-48     	; 0x145a <Endpoint_Write_Control_PStream_LE+0x66>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    148a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    148e:	88 23       	and	r24, r24
    1490:	41 f0       	breq	.+16     	; 0x14a2 <Endpoint_Write_Control_PStream_LE+0xae>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1492:	85 30       	cpi	r24, 0x05	; 5
    1494:	41 f0       	breq	.+16     	; 0x14a6 <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1496:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    149a:	83 ff       	sbrs	r24, 3
    149c:	c0 cf       	rjmp	.-128    	; 0x141e <Endpoint_Write_Control_PStream_LE+0x2a>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    149e:	81 e0       	ldi	r24, 0x01	; 1
}
    14a0:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	08 95       	ret

000014aa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	aa 97       	sbiw	r28, 0x2a	; 42
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    14c0:	86 e7       	ldi	r24, 0x76	; 118
    14c2:	93 e0       	ldi	r25, 0x03	; 3

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    14c4:	fc 01       	movw	r30, r24
    14c6:	01 96       	adiw	r24, 0x01	; 1
				return UEDATX;
    14c8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    14cc:	20 83       	st	Z, r18
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    14ce:	23 e0       	ldi	r18, 0x03	; 3
    14d0:	8e 37       	cpi	r24, 0x7E	; 126
    14d2:	92 07       	cpc	r25, r18
    14d4:	b9 f7       	brne	.-18     	; 0x14c4 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    14d6:	0e 94 d6 06 	call	0xdac	; 0xdac <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    14de:	83 ff       	sbrs	r24, 3
    14e0:	1e c1       	rjmp	.+572    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    14e2:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    14e6:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <USB_ControlRequest+0x1>
    14ea:	9a 30       	cpi	r25, 0x0A	; 10
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <USB_Device_ProcessControlRequest+0x46>
    14ee:	17 c1       	rjmp	.+558    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
    14f0:	e9 2f       	mov	r30, r25
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	ea 55       	subi	r30, 0x5A	; 90
    14f6:	f0 4e       	sbci	r31, 0xE0	; 224
    14f8:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14fc:	80 38       	cpi	r24, 0x80	; 128
    14fe:	99 f0       	breq	.+38     	; 0x1526 <USB_Device_ProcessControlRequest+0x7c>
    1500:	82 38       	cpi	r24, 0x82	; 130
    1502:	09 f0       	breq	.+2      	; 0x1506 <USB_Device_ProcessControlRequest+0x5c>
    1504:	0c c1       	rjmp	.+536    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1506:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x4>
    150a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    150c:	87 30       	cpi	r24, 0x07	; 7
    150e:	08 f0       	brcs	.+2      	; 0x1512 <USB_Device_ProcessControlRequest+0x68>
    1510:	06 c1       	rjmp	.+524    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1512:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1516:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    151a:	85 fb       	bst	r24, 5
    151c:	88 27       	eor	r24, r24
    151e:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1520:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <USB_Device_ProcessControlRequest+0x88>
	uint8_t CurrentStatus = 0;
    1526:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    152a:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <USB_Device_RemoteWakeupEnabled>
    152e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1530:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1532:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1536:	97 7f       	andi	r25, 0xF7	; 247
    1538:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    153c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1540:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1544:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1548:	8e 77       	andi	r24, 0x7E	; 126
    154a:	e5 c0       	rjmp	.+458    	; 0x1716 <USB_Device_ProcessControlRequest+0x26c>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    154c:	88 23       	and	r24, r24
    154e:	09 f4       	brne	.+2      	; 0x1552 <USB_Device_ProcessControlRequest+0xa8>
    1550:	d3 c0       	rjmp	.+422    	; 0x16f8 <USB_Device_ProcessControlRequest+0x24e>
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	09 f0       	breq	.+2      	; 0x1558 <USB_Device_ProcessControlRequest+0xae>
    1556:	e3 c0       	rjmp	.+454    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1558:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest+0x2>
    155c:	81 11       	cpse	r24, r1
    155e:	d6 c0       	rjmp	.+428    	; 0x170c <USB_Device_ProcessControlRequest+0x262>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1560:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <USB_ControlRequest+0x4>
    1564:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1566:	2f ef       	ldi	r18, 0xFF	; 255
    1568:	28 0f       	add	r18, r24
    156a:	26 30       	cpi	r18, 0x06	; 6
    156c:	08 f0       	brcs	.+2      	; 0x1570 <USB_Device_ProcessControlRequest+0xc6>
    156e:	d7 c0       	rjmp	.+430    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1570:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1574:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1578:	20 ff       	sbrs	r18, 0
    157a:	c8 c0       	rjmp	.+400    	; 0x170c <USB_Device_ProcessControlRequest+0x262>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    157c:	93 30       	cpi	r25, 0x03	; 3
    157e:	31 f4       	brne	.+12     	; 0x158c <USB_Device_ProcessControlRequest+0xe2>
				UECONX |= (1 << STALLRQ);
    1580:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1584:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1586:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			}
    158a:	c0 c0       	rjmp	.+384    	; 0x170c <USB_Device_ProcessControlRequest+0x262>
				UECONX |= (1 << STALLRQC);
    158c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1590:	90 61       	ori	r25, 0x10	; 16
    1592:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1596:	21 e0       	ldi	r18, 0x01	; 1
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	01 c0       	rjmp	.+2      	; 0x159e <USB_Device_ProcessControlRequest+0xf4>
    159c:	22 0f       	add	r18, r18
    159e:	8a 95       	dec	r24
    15a0:	ea f7       	brpl	.-6      	; 0x159c <USB_Device_ProcessControlRequest+0xf2>
    15a2:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    15a6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    15aa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15ae:	88 60       	ori	r24, 0x08	; 8
    15b0:	ea cf       	rjmp	.-44     	; 0x1586 <USB_Device_ProcessControlRequest+0xdc>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15b2:	81 11       	cpse	r24, r1
    15b4:	b4 c0       	rjmp	.+360    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    15b6:	10 91 78 03 	lds	r17, 0x0378	; 0x800378 <USB_ControlRequest+0x2>
    15ba:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    15bc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    15c0:	80 78       	andi	r24, 0x80	; 128
    15c2:	81 2b       	or	r24, r17
    15c4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    15c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15cc:	87 7f       	andi	r24, 0xF7	; 247
    15ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    15d2:	0e 94 01 09 	call	0x1202	; 0x1202 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    15da:	80 ff       	sbrs	r24, 0
    15dc:	fc cf       	rjmp	.-8      	; 0x15d6 <USB_Device_ProcessControlRequest+0x12c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    15de:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    15e2:	80 68       	ori	r24, 0x80	; 128
    15e4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	11 11       	cpse	r17, r1
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_DeviceState>
}
    15f2:	95 c0       	rjmp	.+298    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15f4:	80 58       	subi	r24, 0x80	; 128
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <USB_Device_ProcessControlRequest+0x152>
    15fa:	91 c0       	rjmp	.+290    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    15fc:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest+0x2>
    1600:	90 91 79 03 	lds	r25, 0x0379	; 0x800379 <USB_ControlRequest+0x3>
    1604:	8c 3d       	cpi	r24, 0xDC	; 220
    1606:	23 e0       	ldi	r18, 0x03	; 3
    1608:	92 07       	cpc	r25, r18
    160a:	a1 f5       	brne	.+104    	; 0x1674 <USB_Device_ProcessControlRequest+0x1ca>
	SignatureDescriptor.Header.Type = DTYPE_String;
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1610:	8a e2       	ldi	r24, 0x2A	; 42
    1612:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1614:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1616:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1618:	de 01       	movw	r26, r28
    161a:	13 96       	adiw	r26, 0x03	; 3
    161c:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    161e:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1620:	51 e2       	ldi	r21, 0x21	; 33
    1622:	e3 2f       	mov	r30, r19
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    162a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    162c:	20 ff       	sbrs	r18, 0
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <USB_Device_ProcessControlRequest+0x18c>
					{
						SerialByte >>= 4;
    1630:	e2 95       	swap	r30
    1632:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1634:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1636:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1638:	8e 2f       	mov	r24, r30
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	ea 30       	cpi	r30, 0x0A	; 10
    163e:	c0 f0       	brcs	.+48     	; 0x1670 <USB_Device_ProcessControlRequest+0x1c6>
    1640:	c7 96       	adiw	r24, 0x37	; 55
    1642:	8d 93       	st	X+, r24
    1644:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1646:	2f 5f       	subi	r18, 0xFF	; 255
    1648:	24 31       	cpi	r18, 0x14	; 20
    164a:	59 f7       	brne	.-42     	; 0x1622 <USB_Device_ProcessControlRequest+0x178>
				SREG = GlobalIntState;
    164c:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    164e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1652:	87 7f       	andi	r24, 0xF7	; 247
    1654:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1658:	6a e2       	ldi	r22, 0x2A	; 42
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	ce 01       	movw	r24, r28
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	0e 94 a0 09 	call	0x1340	; 0x1340 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1664:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1668:	8b 77       	andi	r24, 0x7B	; 123
    166a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    166e:	57 c0       	rjmp	.+174    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1670:	c0 96       	adiw	r24, 0x30	; 48
    1672:	e7 cf       	rjmp	.-50     	; 0x1642 <USB_Device_ProcessControlRequest+0x198>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1674:	60 91 7a 03 	lds	r22, 0x037A	; 0x80037a <USB_ControlRequest+0x4>
    1678:	70 91 7b 03 	lds	r23, 0x037B	; 0x80037b <USB_ControlRequest+0x5>
    167c:	ae 01       	movw	r20, r28
    167e:	4f 5f       	subi	r20, 0xFF	; 255
    1680:	5f 4f       	sbci	r21, 0xFF	; 255
    1682:	0e 94 5f 08 	call	0x10be	; 0x10be <CALLBACK_USB_GetDescriptor>
    1686:	bc 01       	movw	r22, r24
    1688:	89 2b       	or	r24, r25
    168a:	09 f4       	brne	.+2      	; 0x168e <USB_Device_ProcessControlRequest+0x1e4>
    168c:	48 c0       	rjmp	.+144    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    168e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1692:	87 7f       	andi	r24, 0xF7	; 247
    1694:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
    169c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Endpoint_Write_Control_PStream_LE>
    16a0:	e1 cf       	rjmp	.-62     	; 0x1664 <USB_Device_ProcessControlRequest+0x1ba>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    16a2:	80 38       	cpi	r24, 0x80	; 128
    16a4:	e1 f5       	brne	.+120    	; 0x171e <USB_Device_ProcessControlRequest+0x274>
    16a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16aa:	87 7f       	andi	r24, 0xF7	; 247
    16ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    16b0:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    16b4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    16b8:	45 cf       	rjmp	.-374    	; 0x1544 <USB_Device_ProcessControlRequest+0x9a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16ba:	81 11       	cpse	r24, r1
    16bc:	30 c0       	rjmp	.+96     	; 0x171e <USB_Device_ProcessControlRequest+0x274>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    16be:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <USB_ControlRequest+0x2>
    16c2:	92 30       	cpi	r25, 0x02	; 2
    16c4:	60 f5       	brcc	.+88     	; 0x171e <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    16c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ca:	87 7f       	andi	r24, 0xF7	; 247
    16cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    16d0:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    16d4:	0e 94 01 09 	call	0x1202	; 0x1202 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    16d8:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <USB_Device_ConfigurationNumber>
    16dc:	88 23       	and	r24, r24
    16de:	11 f0       	breq	.+4      	; 0x16e4 <USB_Device_ProcessControlRequest+0x23a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    16e0:	84 e0       	ldi	r24, 0x04	; 4
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <USB_Device_ProcessControlRequest+0x244>
				return (UDADDR & (1 << ADDEN));
    16e4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    16e8:	87 fd       	sbrc	r24, 7
    16ea:	fa cf       	rjmp	.-12     	; 0x16e0 <USB_Device_ProcessControlRequest+0x236>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    16f2:	0e 94 cc 06 	call	0xd98	; 0xd98 <EVENT_USB_Device_ConfigurationChanged>
    16f6:	13 c0       	rjmp	.+38     	; 0x171e <USB_Device_ProcessControlRequest+0x274>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    16f8:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <USB_ControlRequest+0x2>
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	79 f4       	brne	.+30     	; 0x171e <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	93 30       	cpi	r25, 0x03	; 3
    1704:	09 f0       	breq	.+2      	; 0x1708 <USB_Device_ProcessControlRequest+0x25e>
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    170c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1710:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1714:	87 7f       	andi	r24, 0xF7	; 247
    1716:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    171a:	0e 94 01 09 	call	0x1202	; 0x1202 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    171e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1722:	83 ff       	sbrs	r24, 3
    1724:	0a c0       	rjmp	.+20     	; 0x173a <USB_Device_ProcessControlRequest+0x290>
				UEINTX &= ~(1 << RXSTPI);
    1726:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    172a:	87 7f       	andi	r24, 0xF7	; 247
    172c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1730:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1734:	80 62       	ori	r24, 0x20	; 32
    1736:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    173a:	aa 96       	adiw	r28, 0x2a	; 42
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	08 95       	ret

0000174e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    174e:	0e 94 15 0c 	call	0x182a	; 0x182a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1752:	0e 94 1d 0c 	call	0x183a	; 0x183a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1756:	e0 ee       	ldi	r30, 0xE0	; 224
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	81 60       	ori	r24, 0x01	; 1
    175e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1760:	e8 ed       	ldi	r30, 0xD8	; 216
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8f 77       	andi	r24, 0x7F	; 127
    1768:	80 83       	st	Z, r24
				PLLCSR = 0;
    176a:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    176c:	a7 ed       	ldi	r26, 0xD7	; 215
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	8c 91       	ld	r24, X
    1772:	8e 7f       	andi	r24, 0xFE	; 254
    1774:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    1776:	80 81       	ld	r24, Z
    1778:	8f 7e       	andi	r24, 0xEF	; 239
    177a:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    177c:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <USB_IsInitialized>
}
    1780:	08 95       	ret

00001782 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    178a:	0e 94 15 0c 	call	0x182a	; 0x182a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    178e:	0e 94 1d 0c 	call	0x183a	; 0x183a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1792:	c8 ed       	ldi	r28, 0xD8	; 216
    1794:	d0 e0       	ldi	r29, 0x00	; 0
    1796:	88 81       	ld	r24, Y
    1798:	8f 77       	andi	r24, 0x7F	; 127
    179a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    179c:	88 81       	ld	r24, Y
    179e:	80 68       	ori	r24, 0x80	; 128
    17a0:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    17a2:	88 81       	ld	r24, Y
    17a4:	8f 7d       	andi	r24, 0xDF	; 223
    17a6:	88 83       	st	Y, r24
				PLLCSR = 0;
    17a8:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    17aa:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    17ae:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    17b2:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    17b6:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    17ba:	00 ee       	ldi	r16, 0xE0	; 224
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	f8 01       	movw	r30, r16
    17c0:	80 81       	ld	r24, Z
    17c2:	8b 7f       	andi	r24, 0xFB	; 251
    17c4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    17c6:	88 81       	ld	r24, Y
    17c8:	81 60       	ori	r24, 0x01	; 1
    17ca:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    17cc:	42 e0       	ldi	r20, 0x02	; 2
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	0e 94 cd 08 	call	0x119a	; 0x119a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    17d6:	e1 ee       	ldi	r30, 0xE1	; 225
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8e 7f       	andi	r24, 0xFE	; 254
    17de:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    17e0:	e2 ee       	ldi	r30, 0xE2	; 226
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	81 60       	ori	r24, 0x01	; 1
    17e8:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    17ea:	80 81       	ld	r24, Z
    17ec:	88 60       	ori	r24, 0x08	; 8
    17ee:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    17f0:	f8 01       	movw	r30, r16
    17f2:	80 81       	ld	r24, Z
    17f4:	8e 7f       	andi	r24, 0xFE	; 254
    17f6:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    17f8:	88 81       	ld	r24, Y
    17fa:	80 61       	ori	r24, 0x10	; 16
    17fc:	88 83       	st	Y, r24
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1808:	e8 ed       	ldi	r30, 0xD8	; 216
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8f 7e       	andi	r24, 0xEF	; 239
    1810:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1812:	e7 ed       	ldi	r30, 0xD7	; 215
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    181c:	84 e0       	ldi	r24, 0x04	; 4
    181e:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <USB_IsInitialized>
	USB_ResetInterface();
    1826:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <USB_ResetInterface>

0000182a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    182a:	e8 ed       	ldi	r30, 0xD8	; 216
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8e 7f       	andi	r24, 0xFE	; 254
    1832:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1834:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    1838:	08 95       	ret

0000183a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    183a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    183e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    1842:	08 95       	ret

00001844 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1844:	1f 92       	push	r1
    1846:	0f 92       	push	r0
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	0f 92       	push	r0
    184c:	11 24       	eor	r1, r1
    184e:	2f 93       	push	r18
    1850:	3f 93       	push	r19
    1852:	4f 93       	push	r20
    1854:	5f 93       	push	r21
    1856:	6f 93       	push	r22
    1858:	7f 93       	push	r23
    185a:	8f 93       	push	r24
    185c:	9f 93       	push	r25
    185e:	af 93       	push	r26
    1860:	bf 93       	push	r27
    1862:	ef 93       	push	r30
    1864:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1866:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    186a:	82 ff       	sbrs	r24, 2
    186c:	0b c0       	rjmp	.+22     	; 0x1884 <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    186e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1872:	82 ff       	sbrs	r24, 2
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1876:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    187a:	8b 7f       	andi	r24, 0xFB	; 251
    187c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1880:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1884:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1888:	80 ff       	sbrs	r24, 0
    188a:	19 c0       	rjmp	.+50     	; 0x18be <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    188c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1890:	80 ff       	sbrs	r24, 0
    1892:	15 c0       	rjmp	.+42     	; 0x18be <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1894:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1898:	8e 7f       	andi	r24, 0xFE	; 254
    189a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    189e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    18a2:	80 ff       	sbrs	r24, 0
    18a4:	94 c0       	rjmp	.+296    	; 0x19ce <__vector_10+0x18a>
				PLLCSR = USB_PLL_PSC;
    18a6:	80 e1       	ldi	r24, 0x10	; 16
    18a8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    18aa:	82 e1       	ldi	r24, 0x12	; 18
    18ac:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    18ae:	09 b4       	in	r0, 0x29	; 41
    18b0:	00 fe       	sbrs	r0, 0
    18b2:	fd cf       	rjmp	.-6      	; 0x18ae <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    18ba:	0e 94 bf 06 	call	0xd7e	; 0xd7e <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    18be:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    18c2:	80 ff       	sbrs	r24, 0
    18c4:	19 c0       	rjmp	.+50     	; 0x18f8 <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    18c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    18ca:	80 ff       	sbrs	r24, 0
    18cc:	15 c0       	rjmp	.+42     	; 0x18f8 <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    18ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    18d2:	8e 7f       	andi	r24, 0xFE	; 254
    18d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    18d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    18dc:	80 61       	ori	r24, 0x10	; 16
    18de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    18e2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    18e6:	80 62       	ori	r24, 0x20	; 32
    18e8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    18ec:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    18ee:	85 e0       	ldi	r24, 0x05	; 5
    18f0:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    18f4:	0e 94 8c 07 	call	0xf18	; 0xf18 <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    18f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    18fc:	84 ff       	sbrs	r24, 4
    18fe:	29 c0       	rjmp	.+82     	; 0x1952 <__vector_10+0x10e>
						return (UDIEN  & (1 << WAKEUPE));
    1900:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1904:	84 ff       	sbrs	r24, 4
    1906:	25 c0       	rjmp	.+74     	; 0x1952 <__vector_10+0x10e>
				PLLCSR = USB_PLL_PSC;
    1908:	80 e1       	ldi	r24, 0x10	; 16
    190a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    190c:	82 e1       	ldi	r24, 0x12	; 18
    190e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1910:	09 b4       	in	r0, 0x29	; 41
    1912:	00 fe       	sbrs	r0, 0
    1914:	fd cf       	rjmp	.-6      	; 0x1910 <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1916:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    191a:	8f 7d       	andi	r24, 0xDF	; 223
    191c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1920:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1924:	8f 7e       	andi	r24, 0xEF	; 239
    1926:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    192a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    192e:	8f 7e       	andi	r24, 0xEF	; 239
    1930:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1934:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1938:	81 60       	ori	r24, 0x01	; 1
    193a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    193e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <USB_Device_ConfigurationNumber>
    1942:	88 23       	and	r24, r24
    1944:	09 f4       	brne	.+2      	; 0x1948 <__vector_10+0x104>
    1946:	49 c0       	rjmp	.+146    	; 0x19da <__vector_10+0x196>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1948:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    194a:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    194e:	0e 94 a1 07 	call	0xf42	; 0xf42 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1952:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1956:	83 ff       	sbrs	r24, 3
    1958:	29 c0       	rjmp	.+82     	; 0x19ac <__vector_10+0x168>
						return (UDIEN  & (1 << EORSTE));
    195a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    195e:	83 ff       	sbrs	r24, 3
    1960:	25 c0       	rjmp	.+74     	; 0x19ac <__vector_10+0x168>
						UDINT  &= ~(1 << EORSTI);
    1962:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1966:	87 7f       	andi	r24, 0xF7	; 247
    1968:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1972:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1976:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    197a:	8e 7f       	andi	r24, 0xFE	; 254
    197c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1980:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1984:	8e 7f       	andi	r24, 0xFE	; 254
    1986:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    198a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    198e:	80 61       	ori	r24, 0x10	; 16
    1990:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1994:	42 e0       	ldi	r20, 0x02	; 2
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	0e 94 cd 08 	call	0x119a	; 0x119a <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    199e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    19a2:	88 60       	ori	r24, 0x08	; 8
    19a4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    19a8:	0e 94 cb 06 	call	0xd96	; 0xd96 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	0f 90       	pop	r0
    19ca:	1f 90       	pop	r1
    19cc:	18 95       	reti
				PLLCSR = 0;
    19ce:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    19d0:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    19d4:	0e 94 c8 06 	call	0xd90	; 0xd90 <EVENT_USB_Device_Disconnect>
    19d8:	72 cf       	rjmp	.-284    	; 0x18be <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    19da:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    19de:	87 fd       	sbrc	r24, 7
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <__vector_10+0x1a2>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	b2 cf       	rjmp	.-156    	; 0x194a <__vector_10+0x106>
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	b0 cf       	rjmp	.-160    	; 0x194a <__vector_10+0x106>

000019ea <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	ef 93       	push	r30
    1a0e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a10:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a14:	df 70       	andi	r29, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a16:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1a1a:	c8 2f       	mov	r28, r24
    1a1c:	c1 70       	andi	r28, 0x01	; 1
    1a1e:	80 fd       	sbrc	r24, 0
    1a20:	c0 e8       	ldi	r28, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a22:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1a26:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1a2a:	87 7f       	andi	r24, 0xF7	; 247
    1a2c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1a30:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1a32:	0e 94 55 0a 	call	0x14aa	; 0x14aa <USB_Device_ProcessControlRequest>
    1a36:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1a3a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1a3e:	88 60       	ori	r24, 0x08	; 8
    1a40:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a44:	cd 2b       	or	r28, r29
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a46:	cf 70       	andi	r28, 0x0F	; 15
    1a48:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1a4c:	ff 91       	pop	r31
    1a4e:	ef 91       	pop	r30
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1a72:	08 95       	ret

00001a74 <pbuf_dequeue>:
}
static inline uint16_t pbuf_dequeue(void)
{
    uint16_t val = 0;

    uint8_t sreg = SREG;
    1a74:	4f b7       	in	r20, 0x3f	; 63
    cli();
    1a76:	f8 94       	cli
    if (pbuf_head != pbuf_tail) {
    1a78:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <pbuf_tail>
    1a7c:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <pbuf_tail+0x1>
    1a80:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <pbuf_head>
    1a84:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <pbuf_head+0x1>
    1a88:	82 17       	cp	r24, r18
    1a8a:	93 07       	cpc	r25, r19
    1a8c:	89 f0       	breq	.+34     	; 0x1ab0 <pbuf_dequeue+0x3c>
        val = pbuf[pbuf_tail];
    1a8e:	f9 01       	movw	r30, r18
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	e1 5c       	subi	r30, 0xC1	; 193
    1a96:	fd 4f       	sbci	r31, 0xFD	; 253
    1a98:	80 81       	ld	r24, Z
    1a9a:	91 81       	ldd	r25, Z+1	; 0x01
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
    1a9c:	2f 5f       	subi	r18, 0xFF	; 255
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	2f 71       	andi	r18, 0x1F	; 31
    1aa2:	33 27       	eor	r19, r19
    1aa4:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <pbuf_tail+0x1>
    1aa8:	20 93 3b 02 	sts	0x023B, r18	; 0x80023b <pbuf_tail>
    }
    SREG = sreg;
    1aac:	4f bf       	out	0x3f, r20	; 63

    return val;
}
    1aae:	08 95       	ret
    uint16_t val = 0;
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	fb cf       	rjmp	.-10     	; 0x1aac <pbuf_dequeue+0x38>

00001ab6 <wait_clock_lo>:

/*--------------------------------------------------------------------
 * static functions
 *------------------------------------------------------------------*/
static inline uint16_t wait_clock_lo(uint16_t us)
{
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	ec 01       	movw	r28, r24
    while (clock_in()  && us) { asm(""); wait_us(1); us--; }
    1abc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <clock_in>
    1ac0:	88 23       	and	r24, r24
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <wait_clock_lo+0x12>
    1ac4:	20 97       	sbiw	r28, 0x00	; 0
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <wait_clock_lo+0x1a>
    return us;
}
    1ac8:	ce 01       	movw	r24, r28
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret
	__builtin_avr_delay_cycles(__ticks_dc);
    1ad0:	85 e0       	ldi	r24, 0x05	; 5
    1ad2:	8a 95       	dec	r24
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <wait_clock_lo+0x1c>
    1ad6:	00 00       	nop
    while (clock_in()  && us) { asm(""); wait_us(1); us--; }
    1ad8:	21 97       	sbiw	r28, 0x01	; 1
    1ada:	f0 cf       	rjmp	.-32     	; 0x1abc <wait_clock_lo+0x6>

00001adc <wait_clock_hi.constprop.0>:
static inline uint16_t wait_clock_hi(uint16_t us)
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	c2 e3       	ldi	r28, 0x32	; 50
    1ae2:	d0 e0       	ldi	r29, 0x00	; 0
{
    while (!clock_in() && us) { asm(""); wait_us(1); us--; }
    1ae4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <clock_in>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <wait_clock_hi.constprop.0+0x14>
    1aec:	20 97       	sbiw	r28, 0x00	; 0
    1aee:	21 f4       	brne	.+8      	; 0x1af8 <wait_clock_hi.constprop.0+0x1c>
    return us;
}
    1af0:	ce 01       	movw	r24, r28
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret
    1af8:	85 e0       	ldi	r24, 0x05	; 5
    1afa:	8a 95       	dec	r24
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <wait_clock_hi.constprop.0+0x1e>
    1afe:	00 00       	nop
    while (!clock_in() && us) { asm(""); wait_us(1); us--; }
    1b00:	21 97       	sbiw	r28, 0x01	; 1
    1b02:	f0 cf       	rjmp	.-32     	; 0x1ae4 <wait_clock_hi.constprop.0+0x8>

00001b04 <ps2_host_init>:
}

/* idle state that device can send */
static inline void idle(void)
{
    clock_hi();
    1b04:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <clock_hi>
    data_hi();
    1b08:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <data_hi>
uint8_t ps2_error = PS2_ERR_NONE;

void ps2_host_init(void)
{
    idle();
    PS2_INT_INIT();
    1b0c:	e9 e6       	ldi	r30, 0x69	; 105
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	88 60       	ori	r24, 0x08	; 8
    1b14:	80 83       	st	Z, r24
    PS2_INT_ON();
    1b16:	e9 9a       	sbi	0x1d, 1	; 29
    // POR(150-2000ms) plus BAT(300-500ms) may take 2.5sec([3]p.20)
    //_delay_ms(2500);
}
    1b18:	08 95       	ret

00001b1a <ps2_host_recv_response>:

uint8_t ps2_host_recv_response(void)
{
    // Command may take 25ms/20ms at most([5]p.46, [3]p.21)
    uint8_t retry = 25;
    while (retry-- && !pbuf_has_data()) {
    1b1a:	8a e1       	ldi	r24, 0x1A	; 26
    1b1c:	81 50       	subi	r24, 0x01	; 1
    1b1e:	19 f4       	brne	.+6      	; 0x1b26 <ps2_host_recv_response+0xc>
        _delay_ms(1);
    }
    return pbuf_dequeue();
    1b20:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <pbuf_dequeue>
}
    1b24:	08 95       	ret
static inline bool pbuf_has_data(void)
{
    uint8_t sreg = SREG;
    1b26:	9f b7       	in	r25, 0x3f	; 63
    cli();
    1b28:	f8 94       	cli
    bool has_data = (pbuf_head != pbuf_tail);
    1b2a:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <pbuf_head>
    1b2e:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <pbuf_head+0x1>
    1b32:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <pbuf_tail>
    1b36:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <pbuf_tail+0x1>
    SREG = sreg;
    1b3a:	9f bf       	out	0x3f, r25	; 63
    while (retry-- && !pbuf_has_data()) {
    1b3c:	42 17       	cp	r20, r18
    1b3e:	53 07       	cpc	r21, r19
    1b40:	79 f7       	brne	.-34     	; 0x1b20 <ps2_host_recv_response+0x6>
	__builtin_avr_delay_cycles(__ticks_dc);
    1b42:	ef e9       	ldi	r30, 0x9F	; 159
    1b44:	ff e0       	ldi	r31, 0x0F	; 15
    1b46:	31 97       	sbiw	r30, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <ps2_host_recv_response+0x2c>
    1b4a:	00 c0       	rjmp	.+0      	; 0x1b4c <ps2_host_recv_response+0x32>
    1b4c:	00 00       	nop
}
    1b4e:	e6 cf       	rjmp	.-52     	; 0x1b1c <ps2_host_recv_response+0x2>

00001b50 <ps2_host_send>:
{
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	c8 2f       	mov	r28, r24
    ps2_error = PS2_ERR_NONE;
    1b5e:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <ps2_error>
    PS2_INT_OFF();
    1b62:	e9 98       	cbi	0x1d, 1	; 29
}

/* inhibit device to send */
static inline void inhibit(void)
{
    clock_lo();
    1b64:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <clock_lo>
    data_hi();
    1b68:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <data_hi>
	__builtin_avr_delay_cycles(__ticks_dc);
    1b6c:	8f e8       	ldi	r24, 0x8F	; 143
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <ps2_host_send+0x20>
    1b74:	00 c0       	rjmp	.+0      	; 0x1b76 <ps2_host_send+0x26>
    1b76:	00 00       	nop
    data_lo();
    1b78:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <data_lo>
    clock_hi();
    1b7c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <clock_hi>
    WAIT(clock_lo, 10000, 10);   // 10ms [5]p.50
    1b80:	80 e1       	ldi	r24, 0x10	; 16
    1b82:	97 e2       	ldi	r25, 0x27	; 39
    1b84:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <wait_clock_lo>
    1b88:	89 2b       	or	r24, r25
    1b8a:	81 f4       	brne	.+32     	; 0x1bac <ps2_host_send+0x5c>
    1b8c:	8a e0       	ldi	r24, 0x0A	; 10
    WAIT(data_hi, 50, 9);
    1b8e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <ps2_error>
    clock_hi();
    1b92:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <clock_hi>
    data_hi();
    1b96:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <data_hi>
    PS2_INT_ON();
    1b9a:	e9 9a       	sbi	0x1d, 1	; 29
}
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	08 95       	ret
    1bac:	f1 2c       	mov	r15, r1
    1bae:	e1 2c       	mov	r14, r1
    bool parity = true;
    1bb0:	11 e0       	ldi	r17, 0x01	; 1
        if (data&(1<<i)) {
    1bb2:	d0 e0       	ldi	r29, 0x00	; 0
            parity = !parity;
    1bb4:	01 e0       	ldi	r16, 0x01	; 1
    1bb6:	90 e5       	ldi	r25, 0x50	; 80
    1bb8:	9a 95       	dec	r25
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <ps2_host_send+0x68>
        if (data&(1<<i)) {
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	0e 2c       	mov	r0, r14
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <ps2_host_send+0x76>
    1bc2:	95 95       	asr	r25
    1bc4:	87 95       	ror	r24
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <ps2_host_send+0x72>
    1bca:	80 ff       	sbrs	r24, 0
    1bcc:	09 c0       	rjmp	.+18     	; 0x1be0 <ps2_host_send+0x90>
            parity = !parity;
    1bce:	10 27       	eor	r17, r16
            data_hi();
    1bd0:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <data_hi>
        WAIT(clock_hi, 50, 2);
    1bd4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <wait_clock_hi.constprop.0>
    1bd8:	89 2b       	or	r24, r25
    1bda:	29 f4       	brne	.+10     	; 0x1be6 <ps2_host_send+0x96>
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	d7 cf       	rjmp	.-82     	; 0x1b8e <ps2_host_send+0x3e>
            data_lo();
    1be0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <data_lo>
    1be4:	f7 cf       	rjmp	.-18     	; 0x1bd4 <ps2_host_send+0x84>
        WAIT(clock_lo, 50, 3);
    1be6:	82 e3       	ldi	r24, 0x32	; 50
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <wait_clock_lo>
    1bee:	89 2b       	or	r24, r25
    1bf0:	11 f4       	brne	.+4      	; 0x1bf6 <ps2_host_send+0xa6>
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	cc cf       	rjmp	.-104    	; 0x1b8e <ps2_host_send+0x3e>
    for (uint8_t i = 0; i < 8; i++) {
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	e8 1a       	sub	r14, r24
    1bfa:	f8 0a       	sbc	r15, r24
    1bfc:	98 e0       	ldi	r25, 0x08	; 8
    1bfe:	e9 16       	cp	r14, r25
    1c00:	f1 04       	cpc	r15, r1
    1c02:	c9 f6       	brne	.-78     	; 0x1bb6 <ps2_host_send+0x66>
    1c04:	80 e5       	ldi	r24, 0x50	; 80
    1c06:	8a 95       	dec	r24
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <ps2_host_send+0xb6>
    if (parity) { data_hi(); } else { data_lo(); }
    1c0a:	11 23       	and	r17, r17
    1c0c:	41 f0       	breq	.+16     	; 0x1c1e <ps2_host_send+0xce>
    1c0e:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <data_hi>
    WAIT(clock_hi, 50, 4);
    1c12:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <wait_clock_hi.constprop.0>
    1c16:	89 2b       	or	r24, r25
    1c18:	29 f4       	brne	.+10     	; 0x1c24 <ps2_host_send+0xd4>
    1c1a:	84 e0       	ldi	r24, 0x04	; 4
    1c1c:	b8 cf       	rjmp	.-144    	; 0x1b8e <ps2_host_send+0x3e>
    if (parity) { data_hi(); } else { data_lo(); }
    1c1e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <data_lo>
    1c22:	f7 cf       	rjmp	.-18     	; 0x1c12 <ps2_host_send+0xc2>
    WAIT(clock_lo, 50, 5);
    1c24:	82 e3       	ldi	r24, 0x32	; 50
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <wait_clock_lo>
    1c2c:	89 2b       	or	r24, r25
    1c2e:	11 f4       	brne	.+4      	; 0x1c34 <ps2_host_send+0xe4>
    1c30:	85 e0       	ldi	r24, 0x05	; 5
    1c32:	ad cf       	rjmp	.-166    	; 0x1b8e <ps2_host_send+0x3e>
    1c34:	90 e5       	ldi	r25, 0x50	; 80
    1c36:	9a 95       	dec	r25
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <ps2_host_send+0xe6>
    data_hi();
    1c3a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <data_hi>
    1c3e:	c2 e3       	ldi	r28, 0x32	; 50
    1c40:	d0 e0       	ldi	r29, 0x00	; 0
    while (data_in() && us)  { asm(""); wait_us(1); us--; }
    1c42:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <data_in>
    1c46:	88 23       	and	r24, r24
    1c48:	51 f0       	breq	.+20     	; 0x1c5e <ps2_host_send+0x10e>
    1c4a:	20 97       	sbiw	r28, 0x00	; 0
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <ps2_host_send+0x102>
    WAIT(data_lo, 50, 6);
    1c4e:	86 e0       	ldi	r24, 0x06	; 6
    1c50:	9e cf       	rjmp	.-196    	; 0x1b8e <ps2_host_send+0x3e>
    1c52:	85 e0       	ldi	r24, 0x05	; 5
    1c54:	8a 95       	dec	r24
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <ps2_host_send+0x104>
    1c58:	00 00       	nop
    1c5a:	21 97       	sbiw	r28, 0x01	; 1
    1c5c:	f2 cf       	rjmp	.-28     	; 0x1c42 <ps2_host_send+0xf2>
    1c5e:	cd 2b       	or	r28, r29
    1c60:	b1 f3       	breq	.-20     	; 0x1c4e <ps2_host_send+0xfe>
    WAIT(clock_lo, 50, 7);
    1c62:	82 e3       	ldi	r24, 0x32	; 50
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <wait_clock_lo>
    1c6a:	89 2b       	or	r24, r25
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <ps2_host_send+0x122>
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	8e cf       	rjmp	.-228    	; 0x1b8e <ps2_host_send+0x3e>
    WAIT(clock_hi, 50, 8);
    1c72:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <wait_clock_hi.constprop.0>
    1c76:	89 2b       	or	r24, r25
    1c78:	79 f4       	brne	.+30     	; 0x1c98 <ps2_host_send+0x148>
    1c7a:	88 e0       	ldi	r24, 0x08	; 8
    1c7c:	88 cf       	rjmp	.-240    	; 0x1b8e <ps2_host_send+0x3e>
    1c7e:	95 e0       	ldi	r25, 0x05	; 5
    1c80:	9a 95       	dec	r25
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <ps2_host_send+0x130>
    1c84:	00 00       	nop
    while (!data_in() && us)  { asm(""); wait_us(1); us--; }
    1c86:	21 97       	sbiw	r28, 0x01	; 1
    1c88:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <data_in>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <ps2_host_send+0x14e>
    1c90:	20 97       	sbiw	r28, 0x00	; 0
    1c92:	a9 f7       	brne	.-22     	; 0x1c7e <ps2_host_send+0x12e>
    WAIT(data_hi, 50, 9);
    1c94:	89 e0       	ldi	r24, 0x09	; 9
    1c96:	7b cf       	rjmp	.-266    	; 0x1b8e <ps2_host_send+0x3e>
    1c98:	c2 e3       	ldi	r28, 0x32	; 50
    1c9a:	d0 e0       	ldi	r29, 0x00	; 0
    1c9c:	f5 cf       	rjmp	.-22     	; 0x1c88 <ps2_host_send+0x138>
    1c9e:	cd 2b       	or	r28, r29
    1ca0:	c9 f3       	breq	.-14     	; 0x1c94 <ps2_host_send+0x144>
    clock_hi();
    1ca2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <clock_hi>
    data_hi();
    1ca6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <data_hi>
    PS2_INT_ON();
    1caa:	e9 9a       	sbi	0x1d, 1	; 29
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    return ps2_host_recv_response();
    1cb8:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <ps2_host_recv_response>

00001cbc <ps2_host_recv>:
    uint8_t sreg = SREG;
    1cbc:	4f b7       	in	r20, 0x3f	; 63
    cli();
    1cbe:	f8 94       	cli
    bool has_data = (pbuf_head != pbuf_tail);
    1cc0:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <pbuf_head>
    1cc4:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <pbuf_head+0x1>
    1cc8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pbuf_tail>
    1ccc:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pbuf_tail+0x1>
    SREG = sreg;
    1cd0:	4f bf       	out	0x3f, r20	; 63

/* get data received by interrupt */
uint8_t ps2_host_recv(void)
{
    if (pbuf_has_data()) {
    1cd2:	28 17       	cp	r18, r24
    1cd4:	39 07       	cpc	r19, r25
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <ps2_host_recv+0x26>
        ps2_error = PS2_ERR_NONE;
    1cd8:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <ps2_error>
        return pbuf_dequeue();
    1cdc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <pbuf_dequeue>
    1ce0:	08 95       	ret
    } else {
        ps2_error = PS2_ERR_NODATA;
    1ce2:	80 e2       	ldi	r24, 0x20	; 32
    1ce4:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <ps2_error>
        return 0;
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1cea:	08 95       	ret

00001cec <__vector_2>:

ISR(PS2_INT_VECT)
{
    1cec:	1f 92       	push	r1
    1cee:	0f 92       	push	r0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	0f 92       	push	r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	2f 93       	push	r18
    1cf8:	3f 93       	push	r19
    1cfa:	4f 93       	push	r20
    1cfc:	5f 93       	push	r21
    1cfe:	6f 93       	push	r22
    1d00:	7f 93       	push	r23
    1d02:	8f 93       	push	r24
    1d04:	9f 93       	push	r25
    1d06:	af 93       	push	r26
    1d08:	bf 93       	push	r27
    1d0a:	cf 93       	push	r28
    1d0c:	ef 93       	push	r30
    1d0e:	ff 93       	push	r31
    static uint8_t parity = 1;

    // TODO: abort if elapse 100us from previous interrupt

    // return unless falling edge
    if (clock_in()) {
    1d10:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <clock_in>
    1d14:	81 11       	cpse	r24, r1
    1d16:	47 c0       	rjmp	.+142    	; 0x1da6 <__vector_2+0xba>
        goto RETURN;
    }

    state++;
    1d18:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <state.1944>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 0f       	add	r24, r25
    1d20:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <state.1944>
    switch (state) {
    1d24:	8a 30       	cpi	r24, 0x0A	; 10
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <__vector_2+0x3e>
    1d28:	64 c0       	rjmp	.+200    	; 0x1df2 <__vector_2+0x106>
    1d2a:	58 f4       	brcc	.+22     	; 0x1d42 <__vector_2+0x56>
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	b9 f1       	breq	.+110    	; 0x1d9e <__vector_2+0xb2>
    1d30:	91 50       	subi	r25, 0x01	; 1
    1d32:	98 30       	cpi	r25, 0x08	; 8
    1d34:	08 f4       	brcc	.+2      	; 0x1d38 <__vector_2+0x4c>
    1d36:	49 c0       	rjmp	.+146    	; 0x1dca <__vector_2+0xde>
        default:
            goto ERROR;
    }
    goto RETURN;
ERROR:
    ps2_error = state;
    1d38:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <state.1944>
    1d3c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <ps2_error>
    1d40:	28 c0       	rjmp	.+80     	; 0x1d92 <__vector_2+0xa6>
    switch (state) {
    1d42:	8b 30       	cpi	r24, 0x0B	; 11
    1d44:	c9 f7       	brne	.-14     	; 0x1d38 <__vector_2+0x4c>
            if (!data_in())
    1d46:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <data_in>
    1d4a:	88 23       	and	r24, r24
    1d4c:	a9 f3       	breq	.-22     	; 0x1d38 <__vector_2+0x4c>
            pbuf_enqueue(data);
    1d4e:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <data.1945>
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    uint8_t sreg = SREG;
    1d54:	cf b7       	in	r28, 0x3f	; 63
    cli();
    1d56:	f8 94       	cli
    uint16_t next = (pbuf_head + 1) % PBUF_SIZE;
    1d58:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <pbuf_head>
    1d5c:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <pbuf_head+0x1>
    1d60:	9c 01       	movw	r18, r24
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	2f 71       	andi	r18, 0x1F	; 31
    1d68:	33 27       	eor	r19, r19
    if (next != pbuf_tail) {
    1d6a:	60 91 3b 02 	lds	r22, 0x023B	; 0x80023b <pbuf_tail>
    1d6e:	70 91 3c 02 	lds	r23, 0x023C	; 0x80023c <pbuf_tail+0x1>
    1d72:	26 17       	cp	r18, r22
    1d74:	37 07       	cpc	r19, r23
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <__vector_2+0x8e>
    1d78:	48 c0       	rjmp	.+144    	; 0x1e0a <__vector_2+0x11e>
        pbuf[pbuf_head] = data;
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e1 5c       	subi	r30, 0xC1	; 193
    1d82:	fd 4f       	sbci	r31, 0xFD	; 253
    1d84:	51 83       	std	Z+1, r21	; 0x01
    1d86:	40 83       	st	Z, r20
        pbuf_head = next;
    1d88:	30 93 3e 02 	sts	0x023E, r19	; 0x80023e <pbuf_head+0x1>
    1d8c:	20 93 3d 02 	sts	0x023D, r18	; 0x80023d <pbuf_head>
    SREG = sreg;
    1d90:	cf bf       	out	0x3f, r28	; 63
DONE:
    state = INIT;
    1d92:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <state.1944>
    data = 0;
    1d96:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <data.1945>
    parity = 1;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	27 c0       	rjmp	.+78     	; 0x1dec <__vector_2+0x100>
            if (data_in())
    1d9e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <data_in>
    1da2:	81 11       	cpse	r24, r1
    1da4:	c9 cf       	rjmp	.-110    	; 0x1d38 <__vector_2+0x4c>
RETURN:
    return;
}
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	cf 91       	pop	r28
    1dac:	bf 91       	pop	r27
    1dae:	af 91       	pop	r26
    1db0:	9f 91       	pop	r25
    1db2:	8f 91       	pop	r24
    1db4:	7f 91       	pop	r23
    1db6:	6f 91       	pop	r22
    1db8:	5f 91       	pop	r21
    1dba:	4f 91       	pop	r20
    1dbc:	3f 91       	pop	r19
    1dbe:	2f 91       	pop	r18
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti
            data >>= 1;
    1dca:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <data.1945>
    1dce:	86 95       	lsr	r24
    1dd0:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <data.1945>
            if (data_in()) {
    1dd4:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <data_in>
    1dd8:	88 23       	and	r24, r24
    1dda:	29 f3       	breq	.-54     	; 0x1da6 <__vector_2+0xba>
                data |= 0x80;
    1ddc:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <data.1945>
    1de0:	80 68       	ori	r24, 0x80	; 128
    1de2:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <data.1945>
                parity++;
    1de6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <parity.1946>
    1dea:	8f 5f       	subi	r24, 0xFF	; 255
    parity = 1;
    1dec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <parity.1946>
    return;
    1df0:	da cf       	rjmp	.-76     	; 0x1da6 <__vector_2+0xba>
            if (data_in()) {
    1df2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <data_in>
    1df6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <parity.1946>
    1dfa:	88 23       	and	r24, r24
    1dfc:	19 f0       	breq	.+6      	; 0x1e04 <__vector_2+0x118>
                if (!(parity & 0x01))
    1dfe:	90 ff       	sbrs	r25, 0
    1e00:	9b cf       	rjmp	.-202    	; 0x1d38 <__vector_2+0x4c>
    1e02:	d1 cf       	rjmp	.-94     	; 0x1da6 <__vector_2+0xba>
                if (parity & 0x01)
    1e04:	90 fd       	sbrc	r25, 0
    1e06:	98 cf       	rjmp	.-208    	; 0x1d38 <__vector_2+0x4c>
    1e08:	ce cf       	rjmp	.-100    	; 0x1da6 <__vector_2+0xba>
        print("pbuf: full\n");
    1e0a:	84 e5       	ldi	r24, 0x54	; 84
    1e0c:	93 e0       	ldi	r25, 0x03	; 3
    1e0e:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
    1e12:	be cf       	rjmp	.-132    	; 0x1d90 <__vector_2+0xa4>

00001e14 <ps2_host_set_led>:

/* send LED state to keyboard */
void ps2_host_set_led(uint8_t led)
{
    1e14:	cf 93       	push	r28
    1e16:	c8 2f       	mov	r28, r24
    ps2_host_send(0xED);
    1e18:	8d ee       	ldi	r24, 0xED	; 237
    1e1a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ps2_host_send>
    ps2_host_send(led);
    1e1e:	8c 2f       	mov	r24, r28
}
    1e20:	cf 91       	pop	r28
    ps2_host_send(led);
    1e22:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <ps2_host_send>

00001e26 <clock_lo>:
{
}

void clock_lo(void)
{
    PS2_CLOCK_PORT &= ~(1<<PS2_CLOCK_BIT);
    1e26:	59 98       	cbi	0x0b, 1	; 11
    PS2_CLOCK_DDR  |=  (1<<PS2_CLOCK_BIT);
    1e28:	51 9a       	sbi	0x0a, 1	; 10
}
    1e2a:	08 95       	ret

00001e2c <clock_hi>:

void clock_hi(void)
{
    /* input with pull up */
    PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
    1e2c:	51 98       	cbi	0x0a, 1	; 10
    PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
    1e2e:	59 9a       	sbi	0x0b, 1	; 11
}
    1e30:	08 95       	ret

00001e32 <clock_in>:

bool clock_in(void)
{
    PS2_CLOCK_DDR  &= ~(1<<PS2_CLOCK_BIT);
    1e32:	51 98       	cbi	0x0a, 1	; 10
    PS2_CLOCK_PORT |=  (1<<PS2_CLOCK_BIT);
    1e34:	59 9a       	sbi	0x0b, 1	; 11
    1e36:	85 e0       	ldi	r24, 0x05	; 5
    1e38:	8a 95       	dec	r24
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <clock_in+0x6>
    1e3c:	00 00       	nop
    _delay_us(1);
    return PS2_CLOCK_PIN&(1<<PS2_CLOCK_BIT);
    1e3e:	89 b1       	in	r24, 0x09	; 9
}
    1e40:	86 95       	lsr	r24
    1e42:	81 70       	andi	r24, 0x01	; 1
    1e44:	08 95       	ret

00001e46 <data_lo>:
{
}

void data_lo(void)
{
    PS2_DATA_PORT &= ~(1<<PS2_DATA_BIT);
    1e46:	58 98       	cbi	0x0b, 0	; 11
    PS2_DATA_DDR  |=  (1<<PS2_DATA_BIT);
    1e48:	50 9a       	sbi	0x0a, 0	; 10
}
    1e4a:	08 95       	ret

00001e4c <data_hi>:

void data_hi(void)
{
    /* input with pull up */
    PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
    1e4c:	50 98       	cbi	0x0a, 0	; 10
    PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
    1e4e:	58 9a       	sbi	0x0b, 0	; 11
}
    1e50:	08 95       	ret

00001e52 <data_in>:

bool data_in(void)
{
    PS2_DATA_DDR  &= ~(1<<PS2_DATA_BIT);
    1e52:	50 98       	cbi	0x0a, 0	; 10
    PS2_DATA_PORT |=  (1<<PS2_DATA_BIT);
    1e54:	58 9a       	sbi	0x0b, 0	; 11
    1e56:	85 e0       	ldi	r24, 0x05	; 5
    1e58:	8a 95       	dec	r24
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <data_in+0x6>
    1e5c:	00 00       	nop
    _delay_us(1);
    return PS2_DATA_PIN&(1<<PS2_DATA_BIT);
    1e5e:	89 b1       	in	r24, 0x09	; 9
}
    1e60:	81 70       	andi	r24, 0x01	; 1
    1e62:	08 95       	ret

00001e64 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1e64:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <driver+0x1>
    1e68:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <driver>
}
    1e6c:	08 95       	ret

00001e6e <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1e6e:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <driver>
    1e72:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <driver+0x1>
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	21 f0       	breq	.+8      	; 0x1e82 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	f0 81       	ld	r31, Z
    1e7e:	e0 2d       	mov	r30, r0
    1e80:	09 94       	ijmp
}
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	08 95       	ret

00001e86 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	8c 01       	movw	r16, r24
    if (!driver) return;
    1e94:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <driver>
    1e98:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <driver+0x1>
    1e9c:	30 97       	sbiw	r30, 0x00	; 0
    1e9e:	c1 f1       	breq	.+112    	; 0x1f10 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    1ea0:	02 80       	ldd	r0, Z+2	; 0x02
    1ea2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ea4:	e0 2d       	mov	r30, r0
    1ea6:	09 95       	icall

    if (debug_keyboard) {
    1ea8:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    1eac:	82 ff       	sbrs	r24, 2
    1eae:	30 c0       	rjmp	.+96     	; 0x1f10 <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    1eb0:	80 ff       	sbrs	r24, 0
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <host_keyboard_send+0x36>
    1eb4:	86 e8       	ldi	r24, 0x86	; 134
    1eb6:	93 e0       	ldi	r25, 0x03	; 3
    1eb8:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
{
    1ebc:	d0 e0       	ldi	r29, 0x00	; 0
    1ebe:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1ec0:	80 e8       	ldi	r24, 0x80	; 128
    1ec2:	e8 2e       	mov	r14, r24
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	f8 2e       	mov	r15, r24
    1ec8:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    1ecc:	80 ff       	sbrs	r24, 0
    1ece:	0e c0       	rjmp	.+28     	; 0x1eec <host_keyboard_send+0x66>
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	ec 0f       	add	r30, r28
    1ed4:	fd 1f       	adc	r31, r29
    1ed6:	80 81       	ld	r24, Z
    1ed8:	1f 92       	push	r1
    1eda:	8f 93       	push	r24
    1edc:	ff 92       	push	r15
    1ede:	ef 92       	push	r14
    1ee0:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1eec:	21 96       	adiw	r28, 0x01	; 1
    1eee:	c8 30       	cpi	r28, 0x08	; 8
    1ef0:	d1 05       	cpc	r29, r1
    1ef2:	51 f7       	brne	.-44     	; 0x1ec8 <host_keyboard_send+0x42>
        }
        dprint("\n");
    1ef4:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    1ef8:	80 ff       	sbrs	r24, 0
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <host_keyboard_send+0x8a>
    1efc:	8e e7       	ldi	r24, 0x7E	; 126
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
        dprint("\n");
    1f0c:	0c 94 92 03 	jmp	0x724	; 0x724 <xputs>
}
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	08 95       	ret

00001f1e <host_system_send>:
    if (!driver) return;
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    1f24:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <last_system_report>
    1f28:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <last_system_report+0x1>
    1f2c:	8c 17       	cp	r24, r28
    1f2e:	9d 07       	cpc	r25, r29
    1f30:	01 f1       	breq	.+64     	; 0x1f72 <host_system_send+0x54>
    last_system_report = report;
    1f32:	d0 93 82 02 	sts	0x0282, r29	; 0x800282 <last_system_report+0x1>
    1f36:	c0 93 81 02 	sts	0x0281, r28	; 0x800281 <last_system_report>

    if (!driver) return;
    1f3a:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <driver>
    1f3e:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <driver+0x1>
    1f42:	30 97       	sbiw	r30, 0x00	; 0
    1f44:	b1 f0       	breq	.+44     	; 0x1f72 <host_system_send+0x54>
    (*driver->send_system)(report);
    1f46:	06 80       	ldd	r0, Z+6	; 0x06
    1f48:	f7 81       	ldd	r31, Z+7	; 0x07
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    1f50:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    1f54:	85 70       	andi	r24, 0x05	; 5
    1f56:	85 30       	cpi	r24, 0x05	; 5
    1f58:	61 f4       	brne	.+24     	; 0x1f72 <host_system_send+0x54>
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	80 e7       	ldi	r24, 0x70	; 112
    1f60:	93 e0       	ldi	r25, 0x03	; 3
    1f62:	9f 93       	push	r25
    1f64:	8f 93       	push	r24
    1f66:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    }
}
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	08 95       	ret

00001f78 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    1f7e:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <last_consumer_report>
    1f82:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <last_consumer_report+0x1>
    1f86:	8c 17       	cp	r24, r28
    1f88:	9d 07       	cpc	r25, r29
    1f8a:	01 f1       	breq	.+64     	; 0x1fcc <host_consumer_send+0x54>
    last_consumer_report = report;
    1f8c:	d0 93 80 02 	sts	0x0280, r29	; 0x800280 <last_consumer_report+0x1>
    1f90:	c0 93 7f 02 	sts	0x027F, r28	; 0x80027f <last_consumer_report>

    if (!driver) return;
    1f94:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <driver>
    1f98:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <driver+0x1>
    1f9c:	30 97       	sbiw	r30, 0x00	; 0
    1f9e:	b1 f0       	breq	.+44     	; 0x1fcc <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    1fa0:	00 84       	ldd	r0, Z+8	; 0x08
    1fa2:	f1 85       	ldd	r31, Z+9	; 0x09
    1fa4:	e0 2d       	mov	r30, r0
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    1faa:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    1fae:	85 70       	andi	r24, 0x05	; 5
    1fb0:	85 30       	cpi	r24, 0x05	; 5
    1fb2:	61 f4       	brne	.+24     	; 0x1fcc <host_consumer_send+0x54>
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	80 e6       	ldi	r24, 0x60	; 96
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	9f 93       	push	r25
    1fbe:	8f 93       	push	r24
    1fc0:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    }
}
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	08 95       	ret

00001fd2 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    1fd2:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <matrix_setup>

00001fd6 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1fd6:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <timer_init>
    matrix_init();
    1fda:	0c 94 34 04 	jmp	0x868	; 0x868 <matrix_init>

00001fde <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1fde:	8f 92       	push	r8
    1fe0:	9f 92       	push	r9
    1fe2:	af 92       	push	r10
    1fe4:	bf 92       	push	r11
    1fe6:	df 92       	push	r13
    1fe8:	ef 92       	push	r14
    1fea:	ff 92       	push	r15
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <keyboard_task+0x18>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <keyboard_task+0x1a>
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1ffe:	0e 94 43 04 	call	0x886	; 0x886 <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2002:	86 e8       	ldi	r24, 0x86	; 134
    2004:	a8 2e       	mov	r10, r24
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	b8 2e       	mov	r11, r24
    200a:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row = matrix_get_row(r);
    200c:	81 2f       	mov	r24, r17
    200e:	0e 94 6d 05 	call	0xada	; 0xada <matrix_get_row>
    2012:	f8 2e       	mov	r15, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2014:	f5 01       	movw	r30, r10
    2016:	d1 90       	ld	r13, Z+
    2018:	5f 01       	movw	r10, r30
        if (matrix_change) {
    201a:	d8 16       	cp	r13, r24
    201c:	99 f1       	breq	.+102    	; 0x2084 <keyboard_task+0xa6>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    201e:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    2022:	81 fd       	sbrc	r24, 1
    2024:	0e 94 b0 10 	call	0x2160	; 0x2160 <matrix_print>
        matrix_change = matrix_row ^ matrix_prev[r];
    2028:	df 24       	eor	r13, r15
    202a:	e1 2c       	mov	r14, r1
    202c:	01 e0       	ldi	r16, 0x01	; 1
    202e:	45 01       	movw	r8, r10
    2030:	f1 e0       	ldi	r31, 0x01	; 1
    2032:	8f 1a       	sub	r8, r31
    2034:	91 08       	sbc	r9, r1
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    2036:	8d 2d       	mov	r24, r13
    2038:	80 23       	and	r24, r16
    203a:	f9 f0       	breq	.+62     	; 0x207a <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
    203c:	e9 82       	std	Y+1, r14	; 0x01
    203e:	1a 83       	std	Y+2, r17	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	8f 2d       	mov	r24, r15
    2044:	80 23       	and	r24, r16
    2046:	09 f4       	brne	.+2      	; 0x204a <keyboard_task+0x6c>
    2048:	90 e0       	ldi	r25, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    204a:	9b 83       	std	Y+3, r25	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    204c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <timer_read>
    2050:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    2052:	78 2f       	mov	r23, r24
    2054:	9d 83       	std	Y+5, r25	; 0x05
    2056:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2058:	49 81       	ldd	r20, Y+1	; 0x01
    205a:	5a 81       	ldd	r21, Y+2	; 0x02
    205c:	6b 81       	ldd	r22, Y+3	; 0x03
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	0e 94 e6 10 	call	0x21cc	; 0x21cc <action_exec>
                    hook_matrix_change(e);
    2064:	49 81       	ldd	r20, Y+1	; 0x01
    2066:	5a 81       	ldd	r21, Y+2	; 0x02
    2068:	6b 81       	ldd	r22, Y+3	; 0x03
    206a:	7c 81       	ldd	r23, Y+4	; 0x04
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    2072:	f4 01       	movw	r30, r8
    2074:	80 81       	ld	r24, Z
    2076:	80 27       	eor	r24, r16
    2078:	80 83       	st	Z, r24
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    207a:	e3 94       	inc	r14
    207c:	00 0f       	add	r16, r16
    207e:	f8 e0       	ldi	r31, 0x08	; 8
    2080:	ef 12       	cpse	r14, r31
    2082:	d9 cf       	rjmp	.-78     	; 0x2036 <keyboard_task+0x58>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2084:	1f 5f       	subi	r17, 0xFF	; 255
    2086:	11 31       	cpi	r17, 0x11	; 17
    2088:	09 f0       	breq	.+2      	; 0x208c <keyboard_task+0xae>
    208a:	c0 cf       	rjmp	.-128    	; 0x200c <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	1b 82       	std	Y+3, r1	; 0x03
    2094:	0e 94 de 1c 	call	0x39bc	; 0x39bc <timer_read>
    2098:	81 60       	ori	r24, 0x01	; 1
    209a:	78 2f       	mov	r23, r24
    209c:	9d 83       	std	Y+5, r25	; 0x05
    209e:	8c 83       	std	Y+4, r24	; 0x04
    20a0:	49 81       	ldd	r20, Y+1	; 0x01
    20a2:	5a 81       	ldd	r21, Y+2	; 0x02
    20a4:	6b 81       	ldd	r22, Y+3	; 0x03
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    20ac:	0e 94 57 1c 	call	0x38ae	; 0x38ae <hook_keyboard_loop>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    20b0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <host_keyboard_leds>
    20b4:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <led_status.2395>
    20b8:	89 17       	cp	r24, r25
    20ba:	49 f1       	breq	.+82     	; 0x210e <keyboard_task+0x130>
        led_status = host_keyboard_leds();
    20bc:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <host_keyboard_leds>
    20c0:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <led_status.2395>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    20c4:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <debug_config>
    20c8:	95 70       	andi	r25, 0x05	; 5
    20ca:	95 30       	cpi	r25, 0x05	; 5
    20cc:	61 f4       	brne	.+24     	; 0x20e6 <keyboard_task+0x108>
    20ce:	1f 92       	push	r1
    20d0:	8f 93       	push	r24
    20d2:	81 e9       	ldi	r24, 0x91	; 145
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	9f 93       	push	r25
    20d8:	8f 93       	push	r24
    20da:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    20e6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <led_status.2395>
    }
}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	9f 90       	pop	r9
    2108:	8f 90       	pop	r8
        hook_keyboard_leds_change(led_status);
    210a:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <hook_keyboard_leds_change>
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	ff 90       	pop	r15
    2122:	ef 90       	pop	r14
    2124:	df 90       	pop	r13
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	8f 90       	pop	r8
    212e:	08 95       	ret

00002130 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    2130:	0c 94 73 05 	jmp	0xae6	; 0xae6 <led_set>

00002134 <matrix_clear>:
    2134:	08 95       	ret

00002136 <matrix_setup>:
void matrix_clear(void)
{
}

__attribute__ ((weak))
void matrix_setup(void) {}
    2136:	08 95       	ret

00002138 <matrix_is_on>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    2138:	cf 93       	push	r28
    213a:	c6 2f       	mov	r28, r22
    return (matrix_get_row(row) & (1<<col));
    213c:	0e 94 6d 05 	call	0xada	; 0xada <matrix_get_row>
    2140:	21 e0       	ldi	r18, 0x01	; 1
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	02 c0       	rjmp	.+4      	; 0x214a <matrix_is_on+0x12>
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	ca 95       	dec	r28
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <matrix_is_on+0xe>
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	28 23       	and	r18, r24
    2152:	39 23       	and	r19, r25
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	23 2b       	or	r18, r19
    2158:	09 f4       	brne	.+2      	; 0x215c <matrix_is_on+0x24>
    215a:	80 e0       	ldi	r24, 0x00	; 0
}
    215c:	cf 91       	pop	r28
    215e:	08 95       	ret

00002160 <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    216c:	8a ea       	ldi	r24, 0xAA	; 170
    216e:	93 e0       	ldi	r25, 0x03	; 3
    2170:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
    2174:	d0 e0       	ldi	r29, 0x00	; 0
    2176:	c0 e0       	ldi	r28, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2178:	84 e1       	ldi	r24, 0x14	; 20
    217a:	e8 2e       	mov	r14, r24
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	f8 2e       	mov	r15, r24
    2180:	0c e9       	ldi	r16, 0x9C	; 156
    2182:	13 e0       	ldi	r17, 0x03	; 3
    2184:	8c 2f       	mov	r24, r28
    2186:	0e 94 6d 05 	call	0xada	; 0xada <matrix_get_row>
    218a:	0e 94 43 1c 	call	0x3886	; 0x3886 <bitrev>
    218e:	ff 92       	push	r15
    2190:	ef 92       	push	r14
    2192:	1f 92       	push	r1
    2194:	8f 93       	push	r24
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	1f 93       	push	r17
    219c:	0f 93       	push	r16
    219e:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    21a2:	21 96       	adiw	r28, 0x01	; 1
    21a4:	8d b7       	in	r24, 0x3d	; 61
    21a6:	9e b7       	in	r25, 0x3e	; 62
    21a8:	08 96       	adiw	r24, 0x08	; 8
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	9e bf       	out	0x3e, r25	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	8d bf       	out	0x3d, r24	; 61
    21b4:	c1 31       	cpi	r28, 0x11	; 17
    21b6:	d1 05       	cpc	r29, r1
    21b8:	29 f7       	brne	.-54     	; 0x2184 <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	08 95       	ret

000021c8 <matrix_power_up>:
    21c8:	08 95       	ret

000021ca <matrix_power_down>:
    21ca:	08 95       	ret

000021cc <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	2b 97       	sbiw	r28, 0x0b	; 11
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	4f 83       	std	Y+7, r20	; 0x07
    21e2:	58 87       	std	Y+8, r21	; 0x08
    21e4:	69 87       	std	Y+9, r22	; 0x09
    21e6:	7a 87       	std	Y+10, r23	; 0x0a
    21e8:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    21ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ee:	89 2b       	or	r24, r25
    21f0:	21 f0       	breq	.+8      	; 0x21fa <action_exec+0x2e>
    21f2:	84 2f       	mov	r24, r20
    21f4:	85 23       	and	r24, r21
    21f6:	8f 3f       	cpi	r24, 0xFF	; 255
    21f8:	d1 f4       	brne	.+52     	; 0x222e <action_exec+0x62>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    21fa:	1e 82       	std	Y+6, r1	; 0x06
    21fc:	85 e0       	ldi	r24, 0x05	; 5
    21fe:	fe 01       	movw	r30, r28
    2200:	37 96       	adiw	r30, 0x07	; 7
    2202:	de 01       	movw	r26, r28
    2204:	11 96       	adiw	r26, 0x01	; 1
    2206:	01 90       	ld	r0, Z+
    2208:	0d 92       	st	X+, r0
    220a:	8a 95       	dec	r24
    220c:	e1 f7       	brne	.-8      	; 0x2206 <action_exec+0x3a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    220e:	49 81       	ldd	r20, Y+1	; 0x01
    2210:	5a 81       	ldd	r21, Y+2	; 0x02
    2212:	6b 81       	ldd	r22, Y+3	; 0x03
    2214:	7c 81       	ldd	r23, Y+4	; 0x04
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    221a:	2b 96       	adiw	r28, 0x0b	; 11
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    action_tapping_process(record);
    222a:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <action_tapping_process>
        hook_matrix_change(event);
    222e:	69 85       	ldd	r22, Y+9	; 0x09
    2230:	7a 85       	ldd	r23, Y+10	; 0x0a
    2232:	8b 85       	ldd	r24, Y+11	; 0x0b
    2234:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <hook_matrix_change>
    2238:	e0 cf       	rjmp	.-64     	; 0x21fa <action_exec+0x2e>

0000223a <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    223a:	cf 93       	push	r28
    223c:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    223e:	88 23       	and	r24, r24
    2240:	09 f4       	brne	.+2      	; 0x2244 <register_code+0xa>
    2242:	90 c0       	rjmp	.+288    	; 0x2364 <register_code+0x12a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2244:	8c ef       	ldi	r24, 0xFC	; 252
    2246:	8c 0f       	add	r24, r28
    2248:	81 3a       	cpi	r24, 0xA1	; 161
    224a:	58 f4       	brcc	.+22     	; 0x2262 <register_code+0x28>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    224c:	8c 2f       	mov	r24, r28
    224e:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <command_proc>
    2252:	81 11       	cpse	r24, r1
    2254:	87 c0       	rjmp	.+270    	; 0x2364 <register_code+0x12a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2256:	8c 2f       	mov	r24, r28
    2258:	0e 94 9d 1b 	call	0x373a	; 0x373a <add_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    225c:	cf 91       	pop	r28
        send_keyboard_report();
    225e:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <send_keyboard_report>
    else if IS_MOD(code) {
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	8c 0f       	add	r24, r28
    2266:	88 30       	cpi	r24, 0x08	; 8
    2268:	48 f4       	brcc	.+18     	; 0x227c <register_code+0x42>
        add_mods(MOD_BIT(code));
    226a:	c7 70       	andi	r28, 0x07	; 7
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <register_code+0x38>
    2270:	88 0f       	add	r24, r24
    2272:	ca 95       	dec	r28
    2274:	ea f7       	brpl	.-6      	; 0x2270 <register_code+0x36>
    2276:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <add_mods>
    227a:	f0 cf       	rjmp	.-32     	; 0x225c <register_code+0x22>
    else if IS_SYSTEM(code) {
    227c:	8b e5       	ldi	r24, 0x5B	; 91
    227e:	8c 0f       	add	r24, r28
    2280:	83 30       	cpi	r24, 0x03	; 3
    2282:	68 f4       	brcc	.+26     	; 0x229e <register_code+0x64>
        host_system_send(KEYCODE2SYSTEM(code));
    2284:	81 e8       	ldi	r24, 0x81	; 129
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	c5 3a       	cpi	r28, 0xA5	; 165
    228a:	31 f0       	breq	.+12     	; 0x2298 <register_code+0x5e>
    228c:	83 e8       	ldi	r24, 0x83	; 131
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	c6 3a       	cpi	r28, 0xA6	; 166
    2292:	11 f4       	brne	.+4      	; 0x2298 <register_code+0x5e>
    2294:	82 e8       	ldi	r24, 0x82	; 130
    2296:	90 e0       	ldi	r25, 0x00	; 0
}
    2298:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    229a:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <host_system_send>
    else if IS_CONSUMER(code) {
    229e:	88 e5       	ldi	r24, 0x58	; 88
    22a0:	8c 0f       	add	r24, r28
    22a2:	85 31       	cpi	r24, 0x15	; 21
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <register_code+0x6e>
    22a6:	5e c0       	rjmp	.+188    	; 0x2364 <register_code+0x12a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    22a8:	82 ee       	ldi	r24, 0xE2	; 226
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	c8 3a       	cpi	r28, 0xA8	; 168
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <register_code+0x78>
    22b0:	56 c0       	rjmp	.+172    	; 0x235e <register_code+0x124>
    22b2:	89 ee       	ldi	r24, 0xE9	; 233
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	c9 3a       	cpi	r28, 0xA9	; 169
    22b8:	09 f4       	brne	.+2      	; 0x22bc <register_code+0x82>
    22ba:	51 c0       	rjmp	.+162    	; 0x235e <register_code+0x124>
    22bc:	8a ee       	ldi	r24, 0xEA	; 234
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	ca 3a       	cpi	r28, 0xAA	; 170
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <register_code+0x8c>
    22c4:	4c c0       	rjmp	.+152    	; 0x235e <register_code+0x124>
    22c6:	85 eb       	ldi	r24, 0xB5	; 181
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	cb 3a       	cpi	r28, 0xAB	; 171
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <register_code+0x96>
    22ce:	47 c0       	rjmp	.+142    	; 0x235e <register_code+0x124>
    22d0:	86 eb       	ldi	r24, 0xB6	; 182
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	cc 3a       	cpi	r28, 0xAC	; 172
    22d6:	09 f4       	brne	.+2      	; 0x22da <register_code+0xa0>
    22d8:	42 c0       	rjmp	.+132    	; 0x235e <register_code+0x124>
    22da:	83 eb       	ldi	r24, 0xB3	; 179
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	cd 3a       	cpi	r28, 0xAD	; 173
    22e0:	f1 f1       	breq	.+124    	; 0x235e <register_code+0x124>
    22e2:	84 eb       	ldi	r24, 0xB4	; 180
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	ce 3a       	cpi	r28, 0xAE	; 174
    22e8:	d1 f1       	breq	.+116    	; 0x235e <register_code+0x124>
    22ea:	87 eb       	ldi	r24, 0xB7	; 183
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	cf 3a       	cpi	r28, 0xAF	; 175
    22f0:	b1 f1       	breq	.+108    	; 0x235e <register_code+0x124>
    22f2:	8c ec       	ldi	r24, 0xCC	; 204
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	c1 3b       	cpi	r28, 0xB1	; 177
    22f8:	91 f1       	breq	.+100    	; 0x235e <register_code+0x124>
    22fa:	8d ec       	ldi	r24, 0xCD	; 205
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	c0 3b       	cpi	r28, 0xB0	; 176
    2300:	71 f1       	breq	.+92     	; 0x235e <register_code+0x124>
    2302:	83 e8       	ldi	r24, 0x83	; 131
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	c2 3b       	cpi	r28, 0xB2	; 178
    2308:	51 f1       	breq	.+84     	; 0x235e <register_code+0x124>
    230a:	8a e8       	ldi	r24, 0x8A	; 138
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	c3 3b       	cpi	r28, 0xB3	; 179
    2310:	31 f1       	breq	.+76     	; 0x235e <register_code+0x124>
    2312:	82 e9       	ldi	r24, 0x92	; 146
    2314:	91 e0       	ldi	r25, 0x01	; 1
    2316:	c4 3b       	cpi	r28, 0xB4	; 180
    2318:	11 f1       	breq	.+68     	; 0x235e <register_code+0x124>
    231a:	84 e9       	ldi	r24, 0x94	; 148
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	c5 3b       	cpi	r28, 0xB5	; 181
    2320:	f1 f0       	breq	.+60     	; 0x235e <register_code+0x124>
    2322:	81 e2       	ldi	r24, 0x21	; 33
    2324:	92 e0       	ldi	r25, 0x02	; 2
    2326:	c6 3b       	cpi	r28, 0xB6	; 182
    2328:	d1 f0       	breq	.+52     	; 0x235e <register_code+0x124>
    232a:	83 e2       	ldi	r24, 0x23	; 35
    232c:	92 e0       	ldi	r25, 0x02	; 2
    232e:	c7 3b       	cpi	r28, 0xB7	; 183
    2330:	b1 f0       	breq	.+44     	; 0x235e <register_code+0x124>
    2332:	84 e2       	ldi	r24, 0x24	; 36
    2334:	92 e0       	ldi	r25, 0x02	; 2
    2336:	c8 3b       	cpi	r28, 0xB8	; 184
    2338:	91 f0       	breq	.+36     	; 0x235e <register_code+0x124>
    233a:	85 e2       	ldi	r24, 0x25	; 37
    233c:	92 e0       	ldi	r25, 0x02	; 2
    233e:	c9 3b       	cpi	r28, 0xB9	; 185
    2340:	71 f0       	breq	.+28     	; 0x235e <register_code+0x124>
    2342:	86 e2       	ldi	r24, 0x26	; 38
    2344:	92 e0       	ldi	r25, 0x02	; 2
    2346:	ca 3b       	cpi	r28, 0xBA	; 186
    2348:	51 f0       	breq	.+20     	; 0x235e <register_code+0x124>
    234a:	87 e2       	ldi	r24, 0x27	; 39
    234c:	92 e0       	ldi	r25, 0x02	; 2
    234e:	cb 3b       	cpi	r28, 0xBB	; 187
    2350:	31 f0       	breq	.+12     	; 0x235e <register_code+0x124>
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	cc 3b       	cpi	r28, 0xBC	; 188
    2358:	11 f4       	brne	.+4      	; 0x235e <register_code+0x124>
    235a:	8a e2       	ldi	r24, 0x2A	; 42
    235c:	92 e0       	ldi	r25, 0x02	; 2
}
    235e:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    2360:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <host_consumer_send>
}
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2368:	88 23       	and	r24, r24
    236a:	29 f1       	breq	.+74     	; 0x23b6 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    236c:	9c ef       	ldi	r25, 0xFC	; 252
    236e:	98 0f       	add	r25, r24
    2370:	91 3a       	cpi	r25, 0xA1	; 161
    2372:	20 f4       	brcc	.+8      	; 0x237c <unregister_code+0x14>
        del_key(code);
    2374:	0e 94 ba 1b 	call	0x3774	; 0x3774 <del_key>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    2378:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <send_keyboard_report>
    else if IS_MOD(code) {
    237c:	90 e2       	ldi	r25, 0x20	; 32
    237e:	98 0f       	add	r25, r24
    2380:	98 30       	cpi	r25, 0x08	; 8
    2382:	50 f4       	brcc	.+20     	; 0x2398 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    2384:	87 70       	andi	r24, 0x07	; 7
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	01 c0       	rjmp	.+2      	; 0x238c <unregister_code+0x24>
    238a:	99 0f       	add	r25, r25
    238c:	8a 95       	dec	r24
    238e:	ea f7       	brpl	.-6      	; 0x238a <unregister_code+0x22>
    2390:	89 2f       	mov	r24, r25
    2392:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <del_mods>
    2396:	f0 cf       	rjmp	.-32     	; 0x2378 <unregister_code+0x10>
    }
    else if IS_SYSTEM(code) {
    2398:	9b e5       	ldi	r25, 0x5B	; 91
    239a:	98 0f       	add	r25, r24
    239c:	93 30       	cpi	r25, 0x03	; 3
    239e:	20 f4       	brcc	.+8      	; 0x23a8 <unregister_code+0x40>
        host_system_send(0);
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    23a8:	88 5a       	subi	r24, 0xA8	; 168
    23aa:	85 31       	cpi	r24, 0x15	; 21
    23ac:	20 f4       	brcc	.+8      	; 0x23b6 <unregister_code+0x4e>
        host_consumer_send(0);
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <host_consumer_send>
    }
}
    23b6:	08 95       	ret

000023b8 <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    23b8:	88 23       	and	r24, r24
    23ba:	21 f0       	breq	.+8      	; 0x23c4 <register_mods+0xc>
        add_mods(mods);
    23bc:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <add_mods>
        send_keyboard_report();
    23c0:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <send_keyboard_report>
    }
}
    23c4:	08 95       	ret

000023c6 <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    23c6:	88 23       	and	r24, r24
    23c8:	21 f0       	breq	.+8      	; 0x23d2 <unregister_mods+0xc>
        del_mods(mods);
    23ca:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <del_mods>
        send_keyboard_report();
    23ce:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <send_keyboard_report>
    }
}
    23d2:	08 95       	ret

000023d4 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    23d4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <clear_weak_mods>
    clear_keys();
    23d8:	0e 94 cc 1b 	call	0x3798	; 0x3798 <clear_keys>
    send_keyboard_report();
    23dc:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <send_keyboard_report>

000023e0 <clear_keyboard>:
    clear_mods();
    23e0:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <clear_mods>
    clear_keyboard_but_mods();
    23e4:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <clear_keyboard_but_mods>

000023e8 <process_action>:
{
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	cf 92       	push	r12
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	29 97       	sbiw	r28, 0x09	; 9
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	5c 01       	movw	r10, r24
    if (hook_process_action(record)) return;
    240e:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <hook_process_action>
    2412:	81 11       	cpse	r24, r1
    2414:	14 c0       	rjmp	.+40     	; 0x243e <process_action+0x56>
    keyevent_t event = record->event;
    2416:	85 e0       	ldi	r24, 0x05	; 5
    2418:	f5 01       	movw	r30, r10
    241a:	de 01       	movw	r26, r28
    241c:	11 96       	adiw	r26, 0x01	; 1
    241e:	01 90       	ld	r0, Z+
    2420:	0d 92       	st	X+, r0
    2422:	8a 95       	dec	r24
    2424:	e1 f7       	brne	.-8      	; 0x241e <process_action+0x36>
    2426:	f5 01       	movw	r30, r10
    2428:	83 81       	ldd	r24, Z+3	; 0x03
    242a:	94 81       	ldd	r25, Z+4	; 0x04
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	39 f0       	breq	.+14     	; 0x243e <process_action+0x56>
    2430:	40 81       	ld	r20, Z
    2432:	51 81       	ldd	r21, Z+1	; 0x01
    2434:	24 2f       	mov	r18, r20
    2436:	25 23       	and	r18, r21
    2438:	2f 3f       	cpi	r18, 0xFF	; 255
    243a:	09 f0       	breq	.+2      	; 0x243e <process_action+0x56>
    243c:	f4 c2       	rjmp	.+1512   	; 0x2a26 <process_action+0x63e>
}
    243e:	29 96       	adiw	r28, 0x09	; 9
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	f8 94       	cli
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	0f be       	out	0x3f, r0	; 63
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	08 95       	ret
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2460:	f1 2f       	mov	r31, r17
    2462:	ff 70       	andi	r31, 0x0F	; 15
    2464:	ef 2e       	mov	r14, r31
    2466:	10 7f       	andi	r17, 0xF0	; 240
    2468:	19 f0       	breq	.+6      	; 0x2470 <process_action+0x88>
    246a:	e2 94       	swap	r14
    246c:	40 ef       	ldi	r20, 0xF0	; 240
    246e:	e4 22       	and	r14, r20
                if (event.pressed) {
    2470:	ff 20       	and	r15, r15
    2472:	d1 f0       	breq	.+52     	; 0x24a8 <process_action+0xc0>
                    if (mods) {
    2474:	ee 20       	and	r14, r14
    2476:	29 f0       	breq	.+10     	; 0x2482 <process_action+0x9a>
                        add_weak_mods(mods);
    2478:	8e 2d       	mov	r24, r14
    247a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <add_weak_mods>
                        send_keyboard_report();
    247e:	0e 94 18 1c 	call	0x3830	; 0x3830 <send_keyboard_report>
                            register_code(action.layer_tap.code);
    2482:	80 2f       	mov	r24, r16
}
    2484:	29 96       	adiw	r28, 0x09	; 9
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	ff 90       	pop	r15
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	bf 90       	pop	r11
    24a2:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    24a4:	0c 94 1d 11 	jmp	0x223a	; 0x223a <register_code>
                    unregister_code(action.key.code);
    24a8:	80 2f       	mov	r24, r16
    24aa:	0e 94 b4 11 	call	0x2368	; 0x2368 <unregister_code>
                    if (mods) {
    24ae:	ee 20       	and	r14, r14
    24b0:	31 f2       	breq	.-116    	; 0x243e <process_action+0x56>
                        del_weak_mods(mods);
    24b2:	8e 2d       	mov	r24, r14
    24b4:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <del_weak_mods>
}
    24b8:	29 96       	adiw	r28, 0x09	; 9
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
                        send_keyboard_report();
    24d8:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    24dc:	21 2f       	mov	r18, r17
    24de:	2f 70       	andi	r18, 0x0F	; 15
    24e0:	d2 2e       	mov	r13, r18
    24e2:	10 7f       	andi	r17, 0xF0	; 240
    24e4:	10 32       	cpi	r17, 0x20	; 32
    24e6:	19 f0       	breq	.+6      	; 0x24ee <process_action+0x106>
    24e8:	d2 94       	swap	r13
    24ea:	30 ef       	ldi	r19, 0xF0	; 240
    24ec:	d3 22       	and	r13, r19
                switch (action.key.code) {
    24ee:	00 23       	and	r16, r16
    24f0:	79 f0       	breq	.+30     	; 0x2510 <process_action+0x128>
    24f2:	01 30       	cpi	r16, 0x01	; 1
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <process_action+0x110>
    24f6:	55 c0       	rjmp	.+170    	; 0x25a2 <process_action+0x1ba>
                        if (event.pressed) {
    24f8:	ff 20       	and	r15, r15
    24fa:	09 f4       	brne	.+2      	; 0x24fe <process_action+0x116>
    24fc:	63 c0       	rjmp	.+198    	; 0x25c4 <process_action+0x1dc>
                            if (tap_count > 0) {
    24fe:	ee 20       	and	r14, r14
    2500:	59 f0       	breq	.+22     	; 0x2518 <process_action+0x130>
                                if (record->tap.interrupted) {
    2502:	f5 01       	movw	r30, r10
    2504:	85 81       	ldd	r24, Z+5	; 0x05
    2506:	80 ff       	sbrs	r24, 0
    2508:	bc cf       	rjmp	.-136    	; 0x2482 <process_action+0x9a>
                                    record->tap.count = 0;
    250a:	8f 70       	andi	r24, 0x0F	; 15
    250c:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <process_action+0x130>
                        if (event.pressed) {
    2510:	ff 20       	and	r15, r15
    2512:	59 f1       	breq	.+86     	; 0x256a <process_action+0x182>
                            if (tap_count == 0) {
    2514:	e1 10       	cpse	r14, r1
    2516:	13 c0       	rjmp	.+38     	; 0x253e <process_action+0x156>
                                    register_mods(mods);
    2518:	8d 2d       	mov	r24, r13
}
    251a:	29 96       	adiw	r28, 0x09	; 9
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	ff 90       	pop	r15
    2530:	ef 90       	pop	r14
    2532:	df 90       	pop	r13
    2534:	cf 90       	pop	r12
    2536:	bf 90       	pop	r11
    2538:	af 90       	pop	r10
                                    register_mods(mods);
    253a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <register_mods>
                            else if (tap_count == 1) {
    253e:	31 e0       	ldi	r19, 0x01	; 1
                                set_oneshot_mods(mods);
    2540:	8d 2d       	mov	r24, r13
                            else if (tap_count == 1) {
    2542:	e3 12       	cpse	r14, r19
    2544:	ea cf       	rjmp	.-44     	; 0x251a <process_action+0x132>
}
    2546:	29 96       	adiw	r28, 0x09	; 9
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	df 90       	pop	r13
    2560:	cf 90       	pop	r12
    2562:	bf 90       	pop	r11
    2564:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    2566:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <set_oneshot_mods>
                            if (tap_count == 0) {
    256a:	e1 10       	cpse	r14, r1
    256c:	15 c0       	rjmp	.+42     	; 0x2598 <process_action+0x1b0>
                                clear_oneshot_mods();
    256e:	0e 94 05 1c 	call	0x380a	; 0x380a <clear_oneshot_mods>
                                unregister_mods(mods);
    2572:	8d 2d       	mov	r24, r13
}
    2574:	29 96       	adiw	r28, 0x09	; 9
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2594:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <unregister_mods>
                            else if (tap_count == 1) {
    2598:	41 e0       	ldi	r20, 0x01	; 1
    259a:	e4 16       	cp	r14, r20
    259c:	09 f4       	brne	.+2      	; 0x25a0 <process_action+0x1b8>
    259e:	4f cf       	rjmp	.-354    	; 0x243e <process_action+0x56>
    25a0:	e6 cf       	rjmp	.-52     	; 0x256e <process_action+0x186>
                        if (event.pressed) {
    25a2:	ff 20       	and	r15, r15
    25a4:	51 f0       	breq	.+20     	; 0x25ba <process_action+0x1d2>
                            if (tap_count <= TAPPING_TOGGLE) {
    25a6:	55 e0       	ldi	r21, 0x05	; 5
    25a8:	5e 15       	cp	r21, r14
    25aa:	08 f4       	brcc	.+2      	; 0x25ae <process_action+0x1c6>
    25ac:	48 cf       	rjmp	.-368    	; 0x243e <process_action+0x56>
                                if (mods & get_mods()) {
    25ae:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <get_mods>
    25b2:	8d 21       	and	r24, r13
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <process_action+0x1d0>
    25b6:	b0 cf       	rjmp	.-160    	; 0x2518 <process_action+0x130>
    25b8:	dc cf       	rjmp	.-72     	; 0x2572 <process_action+0x18a>
                            if (tap_count < TAPPING_TOGGLE) {
    25ba:	84 e0       	ldi	r24, 0x04	; 4
    25bc:	8e 15       	cp	r24, r14
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <process_action+0x1da>
    25c0:	3e cf       	rjmp	.-388    	; 0x243e <process_action+0x56>
    25c2:	d7 cf       	rjmp	.-82     	; 0x2572 <process_action+0x18a>
                            if (tap_count > 0) {
    25c4:	ee 20       	and	r14, r14
    25c6:	a9 f2       	breq	.-86     	; 0x2572 <process_action+0x18a>
                            unregister_code(action.layer_tap.code);
    25c8:	80 2f       	mov	r24, r16
}
    25ca:	29 96       	adiw	r28, 0x09	; 9
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	ff 90       	pop	r15
    25e0:	ef 90       	pop	r14
    25e2:	df 90       	pop	r13
    25e4:	cf 90       	pop	r12
    25e6:	bf 90       	pop	r11
    25e8:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    25ea:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <unregister_code>
            if (action.layer_bitop.on == 0) {
    25ee:	81 2f       	mov	r24, r17
    25f0:	83 70       	andi	r24, 0x03	; 3
    25f2:	09 f0       	breq	.+2      	; 0x25f6 <process_action+0x20e>
    25f4:	8c c0       	rjmp	.+280    	; 0x270e <process_action+0x326>
                if (!event.pressed) {
    25f6:	f1 10       	cpse	r15, r1
    25f8:	22 cf       	rjmp	.-444    	; 0x243e <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    25fa:	20 2f       	mov	r18, r16
    25fc:	22 95       	swap	r18
    25fe:	26 95       	lsr	r18
    2600:	27 70       	andi	r18, 0x07	; 7
    2602:	22 0f       	add	r18, r18
    2604:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2606:	80 2f       	mov	r24, r16
    2608:	8f 70       	andi	r24, 0x0F	; 15
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	a0 e0       	ldi	r26, 0x00	; 0
    2610:	6c 01       	movw	r12, r24
    2612:	7d 01       	movw	r14, r26
    2614:	02 2e       	mov	r0, r18
    2616:	04 c0       	rjmp	.+8      	; 0x2620 <process_action+0x238>
    2618:	cc 0c       	add	r12, r12
    261a:	dd 1c       	adc	r13, r13
    261c:	ee 1c       	adc	r14, r14
    261e:	ff 1c       	adc	r15, r15
    2620:	0a 94       	dec	r0
    2622:	d2 f7       	brpl	.-12     	; 0x2618 <process_action+0x230>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	cb 01       	movw	r24, r22
    262a:	04 ff       	sbrs	r16, 4
    262c:	0f c0       	rjmp	.+30     	; 0x264c <process_action+0x264>
    262e:	6f e0       	ldi	r22, 0x0F	; 15
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <process_action+0x258>
    2638:	66 0f       	add	r22, r22
    263a:	77 1f       	adc	r23, r23
    263c:	88 1f       	adc	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	2a 95       	dec	r18
    2642:	d2 f7       	brpl	.-12     	; 0x2638 <process_action+0x250>
    2644:	60 95       	com	r22
    2646:	70 95       	com	r23
    2648:	80 95       	com	r24
    264a:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    264c:	16 95       	lsr	r17
    264e:	16 95       	lsr	r17
    2650:	13 70       	andi	r17, 0x03	; 3
    2652:	12 30       	cpi	r17, 0x02	; 2
    2654:	c9 f1       	breq	.+114    	; 0x26c8 <process_action+0x2e0>
    2656:	13 30       	cpi	r17, 0x03	; 3
    2658:	09 f4       	brne	.+2      	; 0x265c <process_action+0x274>
    265a:	54 c0       	rjmp	.+168    	; 0x2704 <process_action+0x31c>
    265c:	9b 01       	movw	r18, r22
    265e:	ac 01       	movw	r20, r24
    2660:	2c 29       	or	r18, r12
    2662:	3d 29       	or	r19, r13
    2664:	4e 29       	or	r20, r14
    2666:	5f 29       	or	r21, r15
    2668:	2e 83       	std	Y+6, r18	; 0x06
    266a:	3f 83       	std	Y+7, r19	; 0x07
    266c:	48 87       	std	Y+8, r20	; 0x08
    266e:	59 87       	std	Y+9, r21	; 0x09
    2670:	11 30       	cpi	r17, 0x01	; 1
    2672:	a1 f0       	breq	.+40     	; 0x269c <process_action+0x2b4>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2674:	ca 01       	movw	r24, r20
    2676:	b9 01       	movw	r22, r18
}
    2678:	29 96       	adiw	r28, 0x09	; 9
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	1f 91       	pop	r17
    268a:	0f 91       	pop	r16
    268c:	ff 90       	pop	r15
    268e:	ef 90       	pop	r14
    2690:	df 90       	pop	r13
    2692:	cf 90       	pop	r12
    2694:	bf 90       	pop	r11
    2696:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2698:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    269c:	6e 81       	ldd	r22, Y+6	; 0x06
    269e:	7f 81       	ldd	r23, Y+7	; 0x07
    26a0:	88 85       	ldd	r24, Y+8	; 0x08
    26a2:	99 85       	ldd	r25, Y+9	; 0x09
}
    26a4:	29 96       	adiw	r28, 0x09	; 9
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	ff 90       	pop	r15
    26ba:	ef 90       	pop	r14
    26bc:	df 90       	pop	r13
    26be:	cf 90       	pop	r12
    26c0:	bf 90       	pop	r11
    26c2:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    26c4:	0c 94 31 19 	jmp	0x3262	; 0x3262 <default_layer_or>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	2c 29       	or	r18, r12
    26ce:	3d 29       	or	r19, r13
    26d0:	4e 29       	or	r20, r14
    26d2:	5f 29       	or	r21, r15
    26d4:	2e 83       	std	Y+6, r18	; 0x06
    26d6:	3f 83       	std	Y+7, r19	; 0x07
    26d8:	48 87       	std	Y+8, r20	; 0x08
    26da:	59 87       	std	Y+9, r21	; 0x09
    26dc:	ca 01       	movw	r24, r20
    26de:	b9 01       	movw	r22, r18
}
    26e0:	29 96       	adiw	r28, 0x09	; 9
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2700:	0c 94 91 19 	jmp	0x3322	; 0x3322 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2704:	0e 94 61 19 	call	0x32c2	; 0x32c2 <default_layer_and>
    2708:	c7 01       	movw	r24, r14
    270a:	b6 01       	movw	r22, r12
    270c:	cb cf       	rjmp	.-106    	; 0x26a4 <process_action+0x2bc>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    270e:	86 95       	lsr	r24
    2710:	ff 20       	and	r15, r15
    2712:	11 f0       	breq	.+4      	; 0x2718 <process_action+0x330>
    2714:	81 2f       	mov	r24, r17
    2716:	81 70       	andi	r24, 0x01	; 1
    2718:	88 23       	and	r24, r24
    271a:	09 f4       	brne	.+2      	; 0x271e <process_action+0x336>
    271c:	90 ce       	rjmp	.-736    	; 0x243e <process_action+0x56>
                    uint8_t shift = action.layer_bitop.part*4;
    271e:	20 2f       	mov	r18, r16
    2720:	22 95       	swap	r18
    2722:	26 95       	lsr	r18
    2724:	27 70       	andi	r18, 0x07	; 7
    2726:	22 0f       	add	r18, r18
    2728:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    272a:	80 2f       	mov	r24, r16
    272c:	8f 70       	andi	r24, 0x0F	; 15
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	a0 e0       	ldi	r26, 0x00	; 0
    2734:	6c 01       	movw	r12, r24
    2736:	7d 01       	movw	r14, r26
    2738:	02 2e       	mov	r0, r18
    273a:	04 c0       	rjmp	.+8      	; 0x2744 <process_action+0x35c>
    273c:	cc 0c       	add	r12, r12
    273e:	dd 1c       	adc	r13, r13
    2740:	ee 1c       	adc	r14, r14
    2742:	ff 1c       	adc	r15, r15
    2744:	0a 94       	dec	r0
    2746:	d2 f7       	brpl	.-12     	; 0x273c <process_action+0x354>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	cb 01       	movw	r24, r22
    274e:	04 ff       	sbrs	r16, 4
    2750:	0f c0       	rjmp	.+30     	; 0x2770 <process_action+0x388>
    2752:	6f e0       	ldi	r22, 0x0F	; 15
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	04 c0       	rjmp	.+8      	; 0x2764 <process_action+0x37c>
    275c:	66 0f       	add	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	88 1f       	adc	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	2a 95       	dec	r18
    2766:	d2 f7       	brpl	.-12     	; 0x275c <process_action+0x374>
    2768:	60 95       	com	r22
    276a:	70 95       	com	r23
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2770:	16 95       	lsr	r17
    2772:	16 95       	lsr	r17
    2774:	13 70       	andi	r17, 0x03	; 3
    2776:	12 30       	cpi	r17, 0x02	; 2
    2778:	c9 f1       	breq	.+114    	; 0x27ec <process_action+0x404>
    277a:	13 30       	cpi	r17, 0x03	; 3
    277c:	09 f4       	brne	.+2      	; 0x2780 <process_action+0x398>
    277e:	54 c0       	rjmp	.+168    	; 0x2828 <process_action+0x440>
    2780:	9b 01       	movw	r18, r22
    2782:	ac 01       	movw	r20, r24
    2784:	2c 29       	or	r18, r12
    2786:	3d 29       	or	r19, r13
    2788:	4e 29       	or	r20, r14
    278a:	5f 29       	or	r21, r15
    278c:	2e 83       	std	Y+6, r18	; 0x06
    278e:	3f 83       	std	Y+7, r19	; 0x07
    2790:	48 87       	std	Y+8, r20	; 0x08
    2792:	59 87       	std	Y+9, r21	; 0x09
    2794:	11 30       	cpi	r17, 0x01	; 1
    2796:	a1 f0       	breq	.+40     	; 0x27c0 <process_action+0x3d8>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2798:	ca 01       	movw	r24, r20
    279a:	b9 01       	movw	r22, r18
}
    279c:	29 96       	adiw	r28, 0x09	; 9
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	df 90       	pop	r13
    27b6:	cf 90       	pop	r12
    27b8:	bf 90       	pop	r11
    27ba:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    27bc:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    27c0:	6e 81       	ldd	r22, Y+6	; 0x06
    27c2:	7f 81       	ldd	r23, Y+7	; 0x07
    27c4:	88 85       	ldd	r24, Y+8	; 0x08
    27c6:	99 85       	ldd	r25, Y+9	; 0x09
}
    27c8:	29 96       	adiw	r28, 0x09	; 9
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	bf 90       	pop	r11
    27e6:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    27e8:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <layer_or>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    27ec:	9b 01       	movw	r18, r22
    27ee:	ac 01       	movw	r20, r24
    27f0:	2c 29       	or	r18, r12
    27f2:	3d 29       	or	r19, r13
    27f4:	4e 29       	or	r20, r14
    27f6:	5f 29       	or	r21, r15
    27f8:	2e 83       	std	Y+6, r18	; 0x06
    27fa:	3f 83       	std	Y+7, r19	; 0x07
    27fc:	48 87       	std	Y+8, r20	; 0x08
    27fe:	59 87       	std	Y+9, r21	; 0x09
    2800:	ca 01       	movw	r24, r20
    2802:	b9 01       	movw	r22, r18
}
    2804:	29 96       	adiw	r28, 0x09	; 9
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	bf 90       	pop	r11
    2822:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2824:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2828:	0e 94 aa 1a 	call	0x3554	; 0x3554 <layer_and>
    282c:	c7 01       	movw	r24, r14
    282e:	b6 01       	movw	r22, r12
    2830:	cb cf       	rjmp	.-106    	; 0x27c8 <process_action+0x3e0>
            switch (action.layer_tap.code) {
    2832:	01 3f       	cpi	r16, 0xF1	; 241
    2834:	09 f4       	brne	.+2      	; 0x2838 <process_action+0x450>
    2836:	64 c0       	rjmp	.+200    	; 0x2900 <process_action+0x518>
    2838:	f0 f4       	brcc	.+60     	; 0x2876 <process_action+0x48e>
    283a:	00 3e       	cpi	r16, 0xE0	; 224
    283c:	90 f4       	brcc	.+36     	; 0x2862 <process_action+0x47a>
    283e:	00 3c       	cpi	r16, 0xC0	; 192
    2840:	90 f0       	brcs	.+36     	; 0x2866 <process_action+0x47e>
                    if (event.pressed) {
    2842:	81 2f       	mov	r24, r17
    2844:	8f 71       	andi	r24, 0x1F	; 31
    2846:	10 2f       	mov	r17, r16
    2848:	10 71       	andi	r17, 0x10	; 16
    284a:	ff 20       	and	r15, r15
    284c:	81 f1       	breq	.+96     	; 0x28ae <process_action+0x4c6>
                        layer_on(action.layer_tap.val);
    284e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2852:	80 2f       	mov	r24, r16
    2854:	82 95       	swap	r24
    2856:	80 7f       	andi	r24, 0xF0	; 240
    2858:	11 11       	cpse	r17, r1
    285a:	5f ce       	rjmp	.-834    	; 0x251a <process_action+0x132>
    285c:	80 2f       	mov	r24, r16
    285e:	8f 70       	andi	r24, 0x0F	; 15
    2860:	5c ce       	rjmp	.-840    	; 0x251a <process_action+0x132>
    2862:	00 3f       	cpi	r16, 0xF0	; 240
    2864:	71 f1       	breq	.+92     	; 0x28c2 <process_action+0x4da>
                    if (event.pressed) {
    2866:	ff 20       	and	r15, r15
    2868:	09 f4       	brne	.+2      	; 0x286c <process_action+0x484>
    286a:	88 c0       	rjmp	.+272    	; 0x297c <process_action+0x594>
                        if (tap_count > 0) {
    286c:	e1 10       	cpse	r14, r1
    286e:	09 ce       	rjmp	.-1006   	; 0x2482 <process_action+0x9a>
                            layer_on(action.layer_tap.val);
    2870:	81 2f       	mov	r24, r17
    2872:	8f 71       	andi	r24, 0x1F	; 31
    2874:	49 c0       	rjmp	.+146    	; 0x2908 <process_action+0x520>
    2876:	02 3f       	cpi	r16, 0xF2	; 242
    2878:	09 f4       	brne	.+2      	; 0x287c <process_action+0x494>
    287a:	58 c0       	rjmp	.+176    	; 0x292c <process_action+0x544>
    287c:	03 3f       	cpi	r16, 0xF3	; 243
    287e:	99 f7       	brne	.-26     	; 0x2866 <process_action+0x47e>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2880:	ff 20       	and	r15, r15
    2882:	09 f4       	brne	.+2      	; 0x2886 <process_action+0x49e>
    2884:	69 c0       	rjmp	.+210    	; 0x2958 <process_action+0x570>
    2886:	81 2f       	mov	r24, r17
    2888:	8f 71       	andi	r24, 0x1F	; 31
}
    288a:	29 96       	adiw	r28, 0x09	; 9
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	ff 90       	pop	r15
    28a0:	ef 90       	pop	r14
    28a2:	df 90       	pop	r13
    28a4:	cf 90       	pop	r12
    28a6:	bf 90       	pop	r11
    28a8:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    28aa:	0c 94 c6 19 	jmp	0x338c	; 0x338c <layer_move>
                        layer_off(action.layer_tap.val);
    28ae:	0e 94 1c 1a 	call	0x3438	; 0x3438 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    28b2:	80 2f       	mov	r24, r16
    28b4:	82 95       	swap	r24
    28b6:	80 7f       	andi	r24, 0xF0	; 240
    28b8:	11 11       	cpse	r17, r1
    28ba:	5c ce       	rjmp	.-840    	; 0x2574 <process_action+0x18c>
    28bc:	80 2f       	mov	r24, r16
    28be:	8f 70       	andi	r24, 0x0F	; 15
    28c0:	59 ce       	rjmp	.-846    	; 0x2574 <process_action+0x18c>
                    if (event.pressed) {
    28c2:	ff 20       	and	r15, r15
    28c4:	c1 f0       	breq	.+48     	; 0x28f6 <process_action+0x50e>
                        if (tap_count < TAPPING_TOGGLE) {
    28c6:	34 e0       	ldi	r19, 0x04	; 4
    28c8:	3e 15       	cp	r19, r14
    28ca:	08 f4       	brcc	.+2      	; 0x28ce <process_action+0x4e6>
    28cc:	b8 cd       	rjmp	.-1168   	; 0x243e <process_action+0x56>
                            layer_invert(action.layer_tap.val);
    28ce:	81 2f       	mov	r24, r17
    28d0:	8f 71       	andi	r24, 0x1F	; 31
}
    28d2:	29 96       	adiw	r28, 0x09	; 9
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	df 90       	pop	r13
    28ec:	cf 90       	pop	r12
    28ee:	bf 90       	pop	r11
    28f0:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    28f2:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    28f6:	45 e0       	ldi	r20, 0x05	; 5
    28f8:	4e 15       	cp	r20, r14
    28fa:	08 f4       	brcc	.+2      	; 0x28fe <process_action+0x516>
    28fc:	a0 cd       	rjmp	.-1216   	; 0x243e <process_action+0x56>
    28fe:	e7 cf       	rjmp	.-50     	; 0x28ce <process_action+0x4e6>
                    event.pressed ? layer_on(action.layer_tap.val) :
    2900:	81 2f       	mov	r24, r17
    2902:	8f 71       	andi	r24, 0x1F	; 31
    2904:	ff 20       	and	r15, r15
    2906:	b1 f0       	breq	.+44     	; 0x2934 <process_action+0x54c>
}
    2908:	29 96       	adiw	r28, 0x09	; 9
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	ef 90       	pop	r14
    2920:	df 90       	pop	r13
    2922:	cf 90       	pop	r12
    2924:	bf 90       	pop	r11
    2926:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    2928:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    292c:	81 2f       	mov	r24, r17
    292e:	8f 71       	andi	r24, 0x1F	; 31
    2930:	ff 20       	and	r15, r15
    2932:	51 f3       	breq	.-44     	; 0x2908 <process_action+0x520>
}
    2934:	29 96       	adiw	r28, 0x09	; 9
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	ff 90       	pop	r15
    294a:	ef 90       	pop	r14
    294c:	df 90       	pop	r13
    294e:	cf 90       	pop	r12
    2950:	bf 90       	pop	r11
    2952:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    2954:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <layer_off>
}
    2958:	29 96       	adiw	r28, 0x09	; 9
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	df 90       	pop	r13
    2972:	cf 90       	pop	r12
    2974:	bf 90       	pop	r11
    2976:	af 90       	pop	r10
                                    layer_clear();
    2978:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <layer_clear>
                        if (tap_count > 0) {
    297c:	e1 10       	cpse	r14, r1
    297e:	24 ce       	rjmp	.-952    	; 0x25c8 <process_action+0x1e0>
                            layer_off(action.layer_tap.val);
    2980:	81 2f       	mov	r24, r17
    2982:	8f 71       	andi	r24, 0x1F	; 31
    2984:	d7 cf       	rjmp	.-82     	; 0x2934 <process_action+0x54c>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2986:	41 2f       	mov	r20, r17
    2988:	4f 70       	andi	r20, 0x0F	; 15
    298a:	60 2f       	mov	r22, r16
    298c:	c5 01       	movw	r24, r10
    298e:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <action_get_macro>
}
    2992:	29 96       	adiw	r28, 0x09	; 9
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
    29ae:	bf 90       	pop	r11
    29b0:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    29b2:	0c 94 83 18 	jmp	0x3106	; 0x3106 <action_macro_play>
            switch (action.command.id) {
    29b6:	01 11       	cpse	r16, r1
    29b8:	42 cd       	rjmp	.-1404   	; 0x243e <process_action+0x56>
                    if (event.pressed) {
    29ba:	ff 20       	and	r15, r15
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <process_action+0x5d8>
    29be:	3f cd       	rjmp	.-1410   	; 0x243e <process_action+0x56>
                        clear_keyboard();
    29c0:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <clear_keyboard>
	__builtin_avr_delay_cycles(__ticks_dc);
    29c4:	5f ef       	ldi	r21, 0xFF	; 255
    29c6:	80 e7       	ldi	r24, 0x70	; 112
    29c8:	92 e0       	ldi	r25, 0x02	; 2
    29ca:	51 50       	subi	r21, 0x01	; 1
    29cc:	80 40       	sbci	r24, 0x00	; 0
    29ce:	90 40       	sbci	r25, 0x00	; 0
    29d0:	e1 f7       	brne	.-8      	; 0x29ca <process_action+0x5e2>
    29d2:	00 c0       	rjmp	.+0      	; 0x29d4 <process_action+0x5ec>
    29d4:	00 00       	nop
}
    29d6:	29 96       	adiw	r28, 0x09	; 9
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	bf 90       	pop	r11
    29f4:	af 90       	pop	r10
                        bootloader_jump();
    29f6:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <bootloader_jump>
            action_function(record, action.func.id, action.func.opt);
    29fa:	41 2f       	mov	r20, r17
    29fc:	4f 70       	andi	r20, 0x0F	; 15
    29fe:	60 2f       	mov	r22, r16
    2a00:	c5 01       	movw	r24, r10
}
    2a02:	29 96       	adiw	r28, 0x09	; 9
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	df 90       	pop	r13
    2a1c:	cf 90       	pop	r12
    2a1e:	bf 90       	pop	r11
    2a20:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2a22:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <action_function>
    keyevent_t event = record->event;
    2a26:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2a28:	e5 80       	ldd	r14, Z+5	; 0x05
    2a2a:	e2 94       	swap	r14
    2a2c:	2f e0       	ldi	r18, 0x0F	; 15
    2a2e:	e2 22       	and	r14, r18
    action_t action = layer_switch_get_action(event);
    2a30:	49 83       	std	Y+1, r20	; 0x01
    2a32:	5a 83       	std	Y+2, r21	; 0x02
    2a34:	fb 82       	std	Y+3, r15	; 0x03
    2a36:	78 2f       	mov	r23, r24
    2a38:	9d 83       	std	Y+5, r25	; 0x05
    2a3a:	8c 83       	std	Y+4, r24	; 0x04
    2a3c:	6f 2d       	mov	r22, r15
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <layer_switch_get_action>
    2a44:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    2a46:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2a4a:	0e 94 26 19 	call	0x324c	; 0x324c <default_layer_debug>
    switch (action.kind.id) {
    2a4e:	e1 2f       	mov	r30, r17
    2a50:	e2 95       	swap	r30
    2a52:	ef 70       	andi	r30, 0x0F	; 15
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	e0 55       	subi	r30, 0x50	; 80
    2a58:	f0 4e       	sbci	r31, 0xE0	; 224
    2a5a:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <__tablejump2__>

00002a5e <is_tap_key>:
    host_consumer_send(0);
#endif
}

bool is_tap_key(keyevent_t event)
{
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <is_tap_key+0x6>
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <is_tap_key+0x8>
    2a66:	0f 92       	push	r0
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	6b 83       	std	Y+3, r22	; 0x03
    2a6e:	7c 83       	std	Y+4, r23	; 0x04
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	8c 81       	ldd	r24, Y+4	; 0x04
    2a74:	9d 81       	ldd	r25, Y+5	; 0x05
    2a76:	89 2b       	or	r24, r25
    2a78:	21 f0       	breq	.+8      	; 0x2a82 <is_tap_key+0x24>
    2a7a:	84 2f       	mov	r24, r20
    2a7c:	85 23       	and	r24, r21
    2a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a80:	d1 f4       	brne	.+52     	; 0x2ab6 <is_tap_key+0x58>
    if (IS_NOEVENT(event)) { return false; }

    action_t action = layer_switch_get_action(event);

    switch (action.kind.id) {
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	0c c0       	rjmp	.+24     	; 0x2a9e <is_tap_key+0x40>
    2a86:	80 e2       	ldi	r24, 0x20	; 32
    2a88:	82 0f       	add	r24, r18
    2a8a:	88 30       	cpi	r24, 0x08	; 8
    2a8c:	58 f1       	brcs	.+86     	; 0x2ae4 <is_tap_key+0x86>
                case KC_LCTRL ... KC_RGUI:              // tap key
                    return true;
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2a8e:	28 3e       	cpi	r18, 0xE8	; 232
    2a90:	70 f4       	brcc	.+28     	; 0x2aae <is_tap_key+0x50>
    2a92:	20 3e       	cpi	r18, 0xE0	; 224
    2a94:	38 f5       	brcc	.+78     	; 0x2ae4 <is_tap_key+0x86>
    2a96:	24 50       	subi	r18, 0x04	; 4
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	21 3a       	cpi	r18, 0xA1	; 161
    2a9c:	90 f7       	brcc	.-28     	; 0x2a82 <is_tap_key+0x24>
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	08 95       	ret
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	20 3f       	cpi	r18, 0xF0	; 240
    2ab2:	39 f7       	brne	.-50     	; 0x2a82 <is_tap_key+0x24>
    2ab4:	f4 cf       	rjmp	.-24     	; 0x2a9e <is_tap_key+0x40>
    action_t action = layer_switch_get_action(event);
    2ab6:	6b 81       	ldd	r22, Y+3	; 0x03
    2ab8:	7c 81       	ldd	r23, Y+4	; 0x04
    2aba:	8d 81       	ldd	r24, Y+5	; 0x05
    2abc:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <layer_switch_get_action>
    2ac0:	28 2f       	mov	r18, r24
    switch (action.kind.id) {
    2ac2:	89 2f       	mov	r24, r25
    2ac4:	82 95       	swap	r24
    2ac6:	8f 70       	andi	r24, 0x0F	; 15
    2ac8:	90 3c       	cpi	r25, 0xC0	; 192
    2aca:	70 f4       	brcc	.+28     	; 0x2ae8 <is_tap_key+0x8a>
    2acc:	8a 30       	cpi	r24, 0x0A	; 10
    2ace:	f8 f6       	brcc	.-66     	; 0x2a8e <is_tap_key+0x30>
    2ad0:	82 5f       	subi	r24, 0xF2	; 242
    2ad2:	8f 70       	andi	r24, 0x0F	; 15
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	a8 f6       	brcc	.-86     	; 0x2a82 <is_tap_key+0x24>
            switch (action.key.code) {
    2ad8:	25 3a       	cpi	r18, 0xA5	; 165
    2ada:	a8 f6       	brcc	.-86     	; 0x2a86 <is_tap_key+0x28>
    2adc:	8e ef       	ldi	r24, 0xFE	; 254
    2ade:	82 0f       	add	r24, r18
    2ae0:	82 30       	cpi	r24, 0x02	; 2
    2ae2:	c8 f2       	brcs	.-78     	; 0x2a96 <is_tap_key+0x38>
                    return true;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	db cf       	rjmp	.-74     	; 0x2a9e <is_tap_key+0x40>
    switch (action.kind.id) {
    2ae8:	8c 30       	cpi	r24, 0x0C	; 12
    2aea:	11 f0       	breq	.+4      	; 0x2af0 <is_tap_key+0x92>
    2aec:	8f 30       	cpi	r24, 0x0F	; 15
    2aee:	49 f6       	brne	.-110    	; 0x2a82 <is_tap_key+0x24>
            if (action.func.opt & FUNC_TAP) { return true; }
    2af0:	93 fb       	bst	r25, 3
    2af2:	88 27       	eor	r24, r24
    2af4:	80 f9       	bld	r24, 0
    2af6:	d3 cf       	rjmp	.-90     	; 0x2a9e <is_tap_key+0x40>

00002af8 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <debug_event+0x6>
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <debug_event+0x8>
    2b00:	0f 92       	push	r0
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	08 95       	ret

00002b16 <debug_record>:

void debug_record(keyrecord_t record)
{
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <debug_record+0x6>
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <debug_record+0x8>
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <debug_record+0xa>
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2b24:	26 96       	adiw	r28, 0x06	; 6
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	08 95       	ret

00002b36 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2b36:	1f 93       	push	r17
    2b38:	cf 93       	push	r28
    2b3a:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b3c:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2b40:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b42:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <waiting_buffer_head>
    2b46:	8e 13       	cpse	r24, r30
    2b48:	04 c0       	rjmp	.+8      	; 0x2b52 <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	1f 91       	pop	r17
    2b50:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2b52:	ce 2f       	mov	r28, r30
    2b54:	d0 e0       	ldi	r29, 0x00	; 0
    2b56:	1e 9f       	mul	r17, r30
    2b58:	f0 01       	movw	r30, r0
    2b5a:	11 24       	eor	r1, r1
    2b5c:	e7 56       	subi	r30, 0x67	; 103
    2b5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b60:	40 81       	ld	r20, Z
    2b62:	51 81       	ldd	r21, Z+1	; 0x01
    2b64:	62 81       	ldd	r22, Z+2	; 0x02
    2b66:	73 81       	ldd	r23, Z+3	; 0x03
    2b68:	84 81       	ldd	r24, Z+4	; 0x04
    2b6a:	95 81       	ldd	r25, Z+5	; 0x05
    2b6c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b70:	fe 01       	movw	r30, r28
    2b72:	31 96       	adiw	r30, 0x01	; 1
    2b74:	e7 70       	andi	r30, 0x07	; 7
    2b76:	e5 cf       	rjmp	.-54     	; 0x2b42 <debug_waiting_buffer+0xc>

00002b78 <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2b78:	40 91 c9 02 	lds	r20, 0x02C9	; 0x8002c9 <tapping_key>
    2b7c:	50 91 ca 02 	lds	r21, 0x02CA	; 0x8002ca <tapping_key+0x1>
    2b80:	60 91 cb 02 	lds	r22, 0x02CB	; 0x8002cb <tapping_key+0x2>
    2b84:	70 91 cc 02 	lds	r23, 0x02CC	; 0x8002cc <tapping_key+0x3>
    2b88:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <tapping_key+0x4>
    2b8c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2b90:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <debug_record>

00002b94 <waiting_buffer_scan_tap>:
{
    2b94:	1f 93       	push	r17
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2b9a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2b9e:	80 7f       	andi	r24, 0xF0	; 240
    2ba0:	c1 f4       	brne	.+48     	; 0x2bd2 <waiting_buffer_scan_tap+0x3e>
    if (!tapping_key.event.pressed) return;
    2ba2:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tapping_key+0x2>
    2ba6:	88 23       	and	r24, r24
    2ba8:	a1 f0       	breq	.+40     	; 0x2bd2 <waiting_buffer_scan_tap+0x3e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2baa:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    2bae:	c0 91 98 02 	lds	r28, 0x0298	; 0x800298 <waiting_buffer_head>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2bb2:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <tapping_key>
    2bb6:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <tapping_key+0x1>
    2bba:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <tapping_key+0x3>
    2bbe:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <tapping_key+0x4>
    2bc2:	d6 2f       	mov	r29, r22
    2bc4:	d7 23       	and	r29, r23
    2bc6:	da 01       	movw	r26, r20
    2bc8:	a0 95       	com	r26
    2bca:	b0 95       	com	r27
    2bcc:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2bce:	c8 13       	cpse	r28, r24
    2bd0:	04 c0       	rjmp	.+8      	; 0x2bda <waiting_buffer_scan_tap+0x46>
}
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	1f 91       	pop	r17
    2bd8:	08 95       	ret
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	41 15       	cp	r20, r1
    2bde:	51 05       	cpc	r21, r1
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <waiting_buffer_scan_tap+0x52>
    2be2:	df 3f       	cpi	r29, 0xFF	; 255
    2be4:	31 f4       	brne	.+12     	; 0x2bf2 <waiting_buffer_scan_tap+0x5e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	87 70       	andi	r24, 0x07	; 7
    2bea:	f1 cf       	rjmp	.-30     	; 0x2bce <waiting_buffer_scan_tap+0x3a>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2bec:	2a 0f       	add	r18, r26
    2bee:	3b 1f       	adc	r19, r27
    2bf0:	17 c0       	rjmp	.+46     	; 0x2c20 <waiting_buffer_scan_tap+0x8c>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2bf2:	18 9f       	mul	r17, r24
    2bf4:	f0 01       	movw	r30, r0
    2bf6:	19 9f       	mul	r17, r25
    2bf8:	f0 0d       	add	r31, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	e7 56       	subi	r30, 0x67	; 103
    2bfe:	fd 4f       	sbci	r31, 0xFD	; 253
    2c00:	21 81       	ldd	r18, Z+1	; 0x01
    2c02:	27 13       	cpse	r18, r23
    2c04:	f0 cf       	rjmp	.-32     	; 0x2be6 <waiting_buffer_scan_tap+0x52>
    2c06:	20 81       	ld	r18, Z
    2c08:	26 13       	cpse	r18, r22
    2c0a:	ed cf       	rjmp	.-38     	; 0x2be6 <waiting_buffer_scan_tap+0x52>
    2c0c:	22 81       	ldd	r18, Z+2	; 0x02
    2c0e:	21 11       	cpse	r18, r1
    2c10:	ea cf       	rjmp	.-44     	; 0x2be6 <waiting_buffer_scan_tap+0x52>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2c12:	23 81       	ldd	r18, Z+3	; 0x03
    2c14:	34 81       	ldd	r19, Z+4	; 0x04
    2c16:	24 17       	cp	r18, r20
    2c18:	35 07       	cpc	r19, r21
    2c1a:	40 f3       	brcs	.-48     	; 0x2bec <waiting_buffer_scan_tap+0x58>
    2c1c:	24 1b       	sub	r18, r20
    2c1e:	35 0b       	sbc	r19, r21
    2c20:	28 3c       	cpi	r18, 0xC8	; 200
    2c22:	31 05       	cpc	r19, r1
    2c24:	00 f7       	brcc	.-64     	; 0x2be6 <waiting_buffer_scan_tap+0x52>
            tapping_key.tap.count = 1;
    2c26:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2c2a:	2f 70       	andi	r18, 0x0F	; 15
    2c2c:	20 61       	ori	r18, 0x10	; 16
    2c2e:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2c32:	26 e0       	ldi	r18, 0x06	; 6
    2c34:	28 9f       	mul	r18, r24
    2c36:	f0 01       	movw	r30, r0
    2c38:	29 9f       	mul	r18, r25
    2c3a:	f0 0d       	add	r31, r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	e2 56       	subi	r30, 0x62	; 98
    2c40:	fd 4f       	sbci	r31, 0xFD	; 253
    2c42:	80 81       	ld	r24, Z
    2c44:	8f 70       	andi	r24, 0x0F	; 15
    2c46:	80 61       	ori	r24, 0x10	; 16
    2c48:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2c4a:	89 ec       	ldi	r24, 0xC9	; 201
    2c4c:	92 e0       	ldi	r25, 0x02	; 2
    2c4e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
}
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	1f 91       	pop	r17
            debug_waiting_buffer();
    2c58:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <debug_waiting_buffer>

00002c5c <process_tapping>:
{
    2c5c:	9f 92       	push	r9
    2c5e:	af 92       	push	r10
    2c60:	bf 92       	push	r11
    2c62:	cf 92       	push	r12
    2c64:	df 92       	push	r13
    2c66:	ef 92       	push	r14
    2c68:	ff 92       	push	r15
    2c6a:	0f 93       	push	r16
    2c6c:	1f 93       	push	r17
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	2b 97       	sbiw	r28, 0x0b	; 11
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    2c84:	85 e0       	ldi	r24, 0x05	; 5
    2c86:	f7 01       	movw	r30, r14
    2c88:	de 01       	movw	r26, r28
    2c8a:	17 96       	adiw	r26, 0x07	; 7
    2c8c:	01 90       	ld	r0, Z+
    2c8e:	0d 92       	st	X+, r0
    2c90:	8a 95       	dec	r24
    2c92:	e1 f7       	brne	.-8      	; 0x2c8c <process_tapping+0x30>
    2c94:	d7 01       	movw	r26, r14
    2c96:	4c 91       	ld	r20, X
    2c98:	11 96       	adiw	r26, 0x01	; 1
    2c9a:	5c 91       	ld	r21, X
    2c9c:	11 97       	sbiw	r26, 0x01	; 1
    2c9e:	12 96       	adiw	r26, 0x02	; 2
    2ca0:	dc 90       	ld	r13, X
    2ca2:	12 97       	sbiw	r26, 0x02	; 2
    2ca4:	13 96       	adiw	r26, 0x03	; 3
    2ca6:	0d 91       	ld	r16, X+
    2ca8:	1c 91       	ld	r17, X
    if (IS_TAPPING_PRESSED()) {
    2caa:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <tapping_key+0x3>
    2cae:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <tapping_key+0x4>
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <process_tapping+0x5c>
    2cb6:	72 c1       	rjmp	.+740    	; 0x2f9c <process_tapping+0x340>
    2cb8:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    2cbc:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    2cc0:	63 2f       	mov	r22, r19
    2cc2:	62 23       	and	r22, r18
    2cc4:	6f 3f       	cpi	r22, 0xFF	; 255
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <process_tapping+0x6e>
    2cc8:	69 c1       	rjmp	.+722    	; 0x2f9c <process_tapping+0x340>
    2cca:	90 90 cb 02 	lds	r9, 0x02CB	; 0x8002cb <tapping_key+0x2>
    2cce:	99 20       	and	r9, r9
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <process_tapping+0x78>
    2cd2:	fe c0       	rjmp	.+508    	; 0x2ed0 <process_tapping+0x274>
        if (WITHIN_TAPPING_TERM(event)) {
    2cd4:	08 17       	cp	r16, r24
    2cd6:	19 07       	cpc	r17, r25
    2cd8:	08 f4       	brcc	.+2      	; 0x2cdc <process_tapping+0x80>
    2cda:	3f c0       	rjmp	.+126    	; 0x2d5a <process_tapping+0xfe>
    2cdc:	f8 01       	movw	r30, r16
    2cde:	e8 1b       	sub	r30, r24
    2ce0:	f9 0b       	sbc	r31, r25
    2ce2:	cf 01       	movw	r24, r30
    2ce4:	cc 24       	eor	r12, r12
    2ce6:	c3 94       	inc	r12
    2ce8:	88 3c       	cpi	r24, 0xC8	; 200
    2cea:	91 05       	cpc	r25, r1
    2cec:	08 f0       	brcs	.+2      	; 0x2cf0 <process_tapping+0x94>
    2cee:	c1 2c       	mov	r12, r1
    2cf0:	89 ec       	ldi	r24, 0xC9	; 201
    2cf2:	a8 2e       	mov	r10, r24
    2cf4:	82 e0       	ldi	r24, 0x02	; 2
    2cf6:	b8 2e       	mov	r11, r24
    2cf8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2cfc:	98 2f       	mov	r25, r24
    2cfe:	90 7f       	andi	r25, 0xF0	; 240
    2d00:	cc 20       	and	r12, r12
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <process_tapping+0xaa>
    2d04:	bd c0       	rjmp	.+378    	; 0x2e80 <process_tapping+0x224>
            if (tapping_key.tap.count == 0) {
    2d06:	91 11       	cpse	r25, r1
    2d08:	82 c0       	rjmp	.+260    	; 0x2e0e <process_tapping+0x1b2>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d0a:	cd 2c       	mov	r12, r13
    2d0c:	35 13       	cpse	r19, r21
    2d0e:	2a c0       	rjmp	.+84     	; 0x2d64 <process_tapping+0x108>
    2d10:	24 13       	cpse	r18, r20
    2d12:	28 c0       	rjmp	.+80     	; 0x2d64 <process_tapping+0x108>
    2d14:	d1 10       	cpse	r13, r1
    2d16:	26 c0       	rjmp	.+76     	; 0x2d64 <process_tapping+0x108>
                    tapping_key.tap.count = 1;
    2d18:	8f 70       	andi	r24, 0x0F	; 15
    2d1a:	80 61       	ori	r24, 0x10	; 16
    2d1c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    debug_tapping_key();
    2d20:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <debug_tapping_key>
                    process_action(&tapping_key);
    2d24:	c5 01       	movw	r24, r10
    2d26:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
                    keyp->tap = tapping_key.tap;
    2d2a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2d2e:	d7 01       	movw	r26, r14
    2d30:	15 96       	adiw	r26, 0x05	; 5
    2d32:	8c 93       	st	X, r24
}
    2d34:	8c 2d       	mov	r24, r12
    2d36:	2b 96       	adiw	r28, 0x0b	; 11
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	ff 90       	pop	r15
    2d4c:	ef 90       	pop	r14
    2d4e:	df 90       	pop	r13
    2d50:	cf 90       	pop	r12
    2d52:	bf 90       	pop	r11
    2d54:	af 90       	pop	r10
    2d56:	9f 90       	pop	r9
    2d58:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    2d5a:	80 95       	com	r24
    2d5c:	90 95       	com	r25
    2d5e:	80 0f       	add	r24, r16
    2d60:	91 1f       	adc	r25, r17
    2d62:	c0 cf       	rjmp	.-128    	; 0x2ce4 <process_tapping+0x88>
    2d64:	01 15       	cp	r16, r1
    2d66:	11 05       	cpc	r17, r1
    2d68:	29 f0       	breq	.+10     	; 0x2d74 <process_tapping+0x118>
    2d6a:	84 2f       	mov	r24, r20
    2d6c:	85 23       	and	r24, r21
    2d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <process_tapping+0x118>
    2d72:	26 c1       	rjmp	.+588    	; 0x2fc0 <process_tapping+0x364>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2d74:	80 e0       	ldi	r24, 0x00	; 0
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2d76:	b8 2f       	mov	r27, r24
    2d78:	b1 70       	andi	r27, 0x01	; 1
    2d7a:	bb 2e       	mov	r11, r27
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d7c:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
    2d80:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2d84:	36 e0       	ldi	r19, 0x06	; 6
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2d86:	80 fd       	sbrc	r24, 0
    2d88:	1c c0       	rjmp	.+56     	; 0x2dc2 <process_tapping+0x166>
                    if (event.pressed) {
    2d8a:	dd 20       	and	r13, r13
    2d8c:	99 f2       	breq	.-90     	; 0x2d34 <process_tapping+0xd8>
                        tapping_key.tap.interrupted = true;
    2d8e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2d92:	81 60       	ori	r24, 0x01	; 1
    2d94:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    return false;
    2d98:	c1 2c       	mov	r12, r1
    2d9a:	cc cf       	rjmp	.-104    	; 0x2d34 <process_tapping+0xd8>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2d9c:	8e 2f       	mov	r24, r30
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	3e 9f       	mul	r19, r30
    2da2:	f0 01       	movw	r30, r0
    2da4:	11 24       	eor	r1, r1
    2da6:	e7 56       	subi	r30, 0x67	; 103
    2da8:	fd 4f       	sbci	r31, 0xFD	; 253
    2daa:	61 81       	ldd	r22, Z+1	; 0x01
    2dac:	65 13       	cpse	r22, r21
    2dae:	06 c0       	rjmp	.+12     	; 0x2dbc <process_tapping+0x160>
    2db0:	60 81       	ld	r22, Z
    2db2:	64 13       	cpse	r22, r20
    2db4:	03 c0       	rjmp	.+6      	; 0x2dbc <process_tapping+0x160>
    2db6:	62 81       	ldd	r22, Z+2	; 0x02
    2db8:	6d 11       	cpse	r22, r13
    2dba:	e7 cf       	rjmp	.-50     	; 0x2d8a <process_tapping+0x12e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	31 96       	adiw	r30, 0x01	; 1
    2dc0:	e7 70       	andi	r30, 0x07	; 7
    2dc2:	e2 13       	cpse	r30, r18
    2dc4:	eb cf       	rjmp	.-42     	; 0x2d9c <process_tapping+0x140>
                    action_t action = layer_switch_get_action(event);
    2dc6:	70 2f       	mov	r23, r16
    2dc8:	1b 87       	std	Y+11, r17	; 0x0b
    2dca:	0a 87       	std	Y+10, r16	; 0x0a
    2dcc:	6d 2d       	mov	r22, r13
    2dce:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dd0:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <layer_switch_get_action>
                    switch (action.kind.id) {
    2dd4:	29 2f       	mov	r18, r25
    2dd6:	22 95       	swap	r18
    2dd8:	2f 70       	andi	r18, 0x0F	; 15
    2dda:	90 32       	cpi	r25, 0x20	; 32
    2ddc:	60 f0       	brcs	.+24     	; 0x2df6 <process_tapping+0x19a>
    2dde:	22 5f       	subi	r18, 0xF2	; 242
    2de0:	2f 70       	andi	r18, 0x0F	; 15
    2de2:	22 30       	cpi	r18, 0x02	; 2
    2de4:	78 f4       	brcc	.+30     	; 0x2e04 <process_tapping+0x1a8>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2de6:	9f 70       	andi	r25, 0x0F	; 15
    2de8:	51 f0       	breq	.+20     	; 0x2dfe <process_tapping+0x1a2>
    2dea:	f7 01       	movw	r30, r14
    2dec:	95 81       	ldd	r25, Z+5	; 0x05
    2dee:	90 7f       	andi	r25, 0xF0	; 240
    2df0:	31 f4       	brne	.+12     	; 0x2dfe <process_tapping+0x1a2>
                            if (action.key.mods && !action.key.code) return false;
    2df2:	b1 2c       	mov	r11, r1
    2df4:	0a c0       	rjmp	.+20     	; 0x2e0a <process_tapping+0x1ae>
    2df6:	9f 70       	andi	r25, 0x0F	; 15
    2df8:	11 f0       	breq	.+4      	; 0x2dfe <process_tapping+0x1a2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	d1 f3       	breq	.-12     	; 0x2df2 <process_tapping+0x196>
                            if (IS_MOD(action.key.code)) return false;
    2dfe:	80 5e       	subi	r24, 0xE0	; 224
    2e00:	88 30       	cpi	r24, 0x08	; 8
    2e02:	b8 f3       	brcs	.-18     	; 0x2df2 <process_tapping+0x196>
                    process_action(keyp);
    2e04:	c7 01       	movw	r24, r14
    2e06:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
                    return true;
    2e0a:	cb 2c       	mov	r12, r11
    2e0c:	93 cf       	rjmp	.-218    	; 0x2d34 <process_tapping+0xd8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e0e:	35 13       	cpse	r19, r21
    2e10:	06 c0       	rjmp	.+12     	; 0x2e1e <process_tapping+0x1c2>
    2e12:	24 13       	cpse	r18, r20
    2e14:	04 c0       	rjmp	.+8      	; 0x2e1e <process_tapping+0x1c2>
                    keyp->tap = tapping_key.tap;
    2e16:	d7 01       	movw	r26, r14
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e18:	dd 20       	and	r13, r13
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <process_tapping+0x1c2>
    2e1c:	7f c0       	rjmp	.+254    	; 0x2f1c <process_tapping+0x2c0>
                else if (is_tap_key(event) && event.pressed) {
    2e1e:	4f 83       	std	Y+7, r20	; 0x07
    2e20:	58 87       	std	Y+8, r21	; 0x08
    2e22:	d9 86       	std	Y+9, r13	; 0x09
    2e24:	70 2f       	mov	r23, r16
    2e26:	1b 87       	std	Y+11, r17	; 0x0b
    2e28:	0a 87       	std	Y+10, r16	; 0x0a
    2e2a:	6d 2d       	mov	r22, r13
    2e2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e2e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <is_tap_key>
    2e32:	88 23       	and	r24, r24
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <process_tapping+0x1dc>
    2e36:	c0 c0       	rjmp	.+384    	; 0x2fb8 <process_tapping+0x35c>
    2e38:	dd 20       	and	r13, r13
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <process_tapping+0x1e2>
    2e3c:	bd c0       	rjmp	.+378    	; 0x2fb8 <process_tapping+0x35c>
                    if (tapping_key.tap.count > 1) {
    2e3e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2e42:	80 32       	cpi	r24, 0x20	; 32
    2e44:	70 f0       	brcs	.+28     	; 0x2e62 <process_tapping+0x206>
                        process_action(&(keyrecord_t){
    2e46:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <tapping_key>
    2e4a:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <tapping_key+0x1>
    2e4e:	3a 83       	std	Y+2, r19	; 0x02
    2e50:	29 83       	std	Y+1, r18	; 0x01
    2e52:	1b 82       	std	Y+3, r1	; 0x03
    2e54:	1d 83       	std	Y+5, r17	; 0x05
    2e56:	0c 83       	std	Y+4, r16	; 0x04
    2e58:	8e 83       	std	Y+6, r24	; 0x06
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
                    tapping_key = *keyp;
    2e62:	86 e0       	ldi	r24, 0x06	; 6
    2e64:	f7 01       	movw	r30, r14
    2e66:	a9 ec       	ldi	r26, 0xC9	; 201
    2e68:	b2 e0       	ldi	r27, 0x02	; 2
    2e6a:	01 90       	ld	r0, Z+
    2e6c:	0d 92       	st	X+, r0
    2e6e:	8a 95       	dec	r24
    2e70:	e1 f7       	brne	.-8      	; 0x2e6a <process_tapping+0x20e>
                    waiting_buffer_scan_tap();
    2e72:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2e76:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <debug_tapping_key>
                    return true;
    2e7a:	cc 24       	eor	r12, r12
    2e7c:	c3 94       	inc	r12
    2e7e:	5a cf       	rjmp	.-332    	; 0x2d34 <process_tapping+0xd8>
            if (tapping_key.tap.count == 0) {
    2e80:	91 11       	cpse	r25, r1
    2e82:	13 c0       	rjmp	.+38     	; 0x2eaa <process_tapping+0x24e>
                debug_event(event); debug("\n");
    2e84:	70 2f       	mov	r23, r16
    2e86:	1b 87       	std	Y+11, r17	; 0x0b
    2e88:	0a 87       	std	Y+10, r16	; 0x0a
    2e8a:	6d 2d       	mov	r22, r13
    2e8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e8e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <debug_event>
                process_action(&tapping_key);
    2e92:	89 ec       	ldi	r24, 0xC9	; 201
    2e94:	92 e0       	ldi	r25, 0x02	; 2
    2e96:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
                tapping_key = (keyrecord_t){};
    2e9a:	86 e0       	ldi	r24, 0x06	; 6
    2e9c:	f5 01       	movw	r30, r10
    2e9e:	11 92       	st	Z+, r1
    2ea0:	8a 95       	dec	r24
    2ea2:	e9 f7       	brne	.-6      	; 0x2e9e <process_tapping+0x242>
                debug_tapping_key();
    2ea4:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <debug_tapping_key>
                return false;
    2ea8:	45 cf       	rjmp	.-374    	; 0x2d34 <process_tapping+0xd8>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2eaa:	35 13       	cpse	r19, r21
    2eac:	b8 cf       	rjmp	.-144    	; 0x2e1e <process_tapping+0x1c2>
    2eae:	24 13       	cpse	r18, r20
    2eb0:	b6 cf       	rjmp	.-148    	; 0x2e1e <process_tapping+0x1c2>
    2eb2:	d1 10       	cpse	r13, r1
    2eb4:	b4 cf       	rjmp	.-152    	; 0x2e1e <process_tapping+0x1c2>
                    keyp->tap = tapping_key.tap;
    2eb6:	d7 01       	movw	r26, r14
    2eb8:	15 96       	adiw	r26, 0x05	; 5
    2eba:	8c 93       	st	X, r24
                    process_action(keyp);
    2ebc:	c7 01       	movw	r24, r14
    2ebe:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
                    tapping_key = (keyrecord_t){};
    2ec2:	86 e0       	ldi	r24, 0x06	; 6
    2ec4:	f5 01       	movw	r30, r10
    2ec6:	11 92       	st	Z+, r1
    2ec8:	8a 95       	dec	r24
    2eca:	e9 f7       	brne	.-6      	; 0x2ec6 <process_tapping+0x26a>
                    return true;
    2ecc:	c9 2c       	mov	r12, r9
    2ece:	32 cf       	rjmp	.-412    	; 0x2d34 <process_tapping+0xd8>
        if (WITHIN_TAPPING_TERM(event)) {
    2ed0:	08 17       	cp	r16, r24
    2ed2:	19 07       	cpc	r17, r25
    2ed4:	88 f1       	brcs	.+98     	; 0x2f38 <process_tapping+0x2dc>
    2ed6:	b8 01       	movw	r22, r16
    2ed8:	68 1b       	sub	r22, r24
    2eda:	79 0b       	sbc	r23, r25
    2edc:	cb 01       	movw	r24, r22
    2ede:	c1 2c       	mov	r12, r1
    2ee0:	88 3c       	cpi	r24, 0xC8	; 200
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <process_tapping+0x28c>
    2ee6:	4b c0       	rjmp	.+150    	; 0x2f7e <process_tapping+0x322>
            if (event.pressed) {
    2ee8:	cd 2c       	mov	r12, r13
    2eea:	dd 20       	and	r13, r13
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <process_tapping+0x294>
    2eee:	64 c0       	rjmp	.+200    	; 0x2fb8 <process_tapping+0x35c>
                if (IS_TAPPING_KEY(event.key)) {
    2ef0:	35 13       	cpse	r19, r21
    2ef2:	30 c0       	rjmp	.+96     	; 0x2f54 <process_tapping+0x2f8>
    2ef4:	24 13       	cpse	r18, r20
    2ef6:	2e c0       	rjmp	.+92     	; 0x2f54 <process_tapping+0x2f8>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2ef8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2efc:	80 fd       	sbrc	r24, 0
    2efe:	21 c0       	rjmp	.+66     	; 0x2f42 <process_tapping+0x2e6>
    2f00:	98 2f       	mov	r25, r24
    2f02:	90 7f       	andi	r25, 0xF0	; 240
    2f04:	f1 f0       	breq	.+60     	; 0x2f42 <process_tapping+0x2e6>
                        keyp->tap = tapping_key.tap;
    2f06:	d7 01       	movw	r26, r14
    2f08:	15 96       	adiw	r26, 0x05	; 5
    2f0a:	8c 93       	st	X, r24
    2f0c:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2f0e:	90 3f       	cpi	r25, 0xF0	; 240
    2f10:	39 f0       	breq	.+14     	; 0x2f20 <process_tapping+0x2c4>
    2f12:	98 2f       	mov	r25, r24
    2f14:	90 7f       	andi	r25, 0xF0	; 240
    2f16:	90 5f       	subi	r25, 0xF0	; 240
    2f18:	8f 70       	andi	r24, 0x0F	; 15
    2f1a:	89 2b       	or	r24, r25
    2f1c:	15 96       	adiw	r26, 0x05	; 5
    2f1e:	8c 93       	st	X, r24
                        process_action(keyp);
    2f20:	c7 01       	movw	r24, r14
    2f22:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
                        tapping_key = *keyp;
    2f26:	86 e0       	ldi	r24, 0x06	; 6
    2f28:	f7 01       	movw	r30, r14
    2f2a:	a9 ec       	ldi	r26, 0xC9	; 201
    2f2c:	b2 e0       	ldi	r27, 0x02	; 2
    2f2e:	01 90       	ld	r0, Z+
    2f30:	0d 92       	st	X+, r0
    2f32:	8a 95       	dec	r24
    2f34:	e1 f7       	brne	.-8      	; 0x2f2e <process_tapping+0x2d2>
                        debug_tapping_key();
    2f36:	b6 cf       	rjmp	.-148    	; 0x2ea4 <process_tapping+0x248>
        if (WITHIN_TAPPING_TERM(event)) {
    2f38:	80 95       	com	r24
    2f3a:	90 95       	com	r25
    2f3c:	80 0f       	add	r24, r16
    2f3e:	91 1f       	adc	r25, r17
    2f40:	ce cf       	rjmp	.-100    	; 0x2ede <process_tapping+0x282>
                        tapping_key = *keyp;
    2f42:	86 e0       	ldi	r24, 0x06	; 6
    2f44:	f7 01       	movw	r30, r14
    2f46:	a9 ec       	ldi	r26, 0xC9	; 201
    2f48:	b2 e0       	ldi	r27, 0x02	; 2
    2f4a:	01 90       	ld	r0, Z+
    2f4c:	0d 92       	st	X+, r0
    2f4e:	8a 95       	dec	r24
    2f50:	e1 f7       	brne	.-8      	; 0x2f4a <process_tapping+0x2ee>
                        return true;
    2f52:	f0 ce       	rjmp	.-544    	; 0x2d34 <process_tapping+0xd8>
                } else if (is_tap_key(event)) {
    2f54:	4f 83       	std	Y+7, r20	; 0x07
    2f56:	58 87       	std	Y+8, r21	; 0x08
    2f58:	d9 86       	std	Y+9, r13	; 0x09
    2f5a:	70 2f       	mov	r23, r16
    2f5c:	1b 87       	std	Y+11, r17	; 0x0b
    2f5e:	0a 87       	std	Y+10, r16	; 0x0a
    2f60:	6d 2d       	mov	r22, r13
    2f62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f64:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <is_tap_key>
    2f68:	81 11       	cpse	r24, r1
    2f6a:	7b cf       	rjmp	.-266    	; 0x2e62 <process_tapping+0x206>
                    tapping_key.tap.interrupted = true;
    2f6c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tapping_key+0x5>
    2f70:	81 60       	ori	r24, 0x01	; 1
    2f72:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tapping_key+0x5>
                    process_action(keyp);
    2f76:	c7 01       	movw	r24, r14
    2f78:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
                    return true;
    2f7c:	db ce       	rjmp	.-586    	; 0x2d34 <process_tapping+0xd8>
            debug_event(event); debug("\n");
    2f7e:	70 2f       	mov	r23, r16
    2f80:	1b 87       	std	Y+11, r17	; 0x0b
    2f82:	0a 87       	std	Y+10, r16	; 0x0a
    2f84:	6d 2d       	mov	r22, r13
    2f86:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f88:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <debug_event>
            tapping_key = (keyrecord_t){};
    2f8c:	86 e0       	ldi	r24, 0x06	; 6
    2f8e:	e9 ec       	ldi	r30, 0xC9	; 201
    2f90:	f2 e0       	ldi	r31, 0x02	; 2
    2f92:	df 01       	movw	r26, r30
    2f94:	1d 92       	st	X+, r1
    2f96:	8a 95       	dec	r24
    2f98:	e9 f7       	brne	.-6      	; 0x2f94 <process_tapping+0x338>
            debug_tapping_key();
    2f9a:	84 cf       	rjmp	.-248    	; 0x2ea4 <process_tapping+0x248>
        if (event.pressed && is_tap_key(event)) {
    2f9c:	dd 20       	and	r13, r13
    2f9e:	61 f0       	breq	.+24     	; 0x2fb8 <process_tapping+0x35c>
    2fa0:	4f 83       	std	Y+7, r20	; 0x07
    2fa2:	58 87       	std	Y+8, r21	; 0x08
    2fa4:	d9 86       	std	Y+9, r13	; 0x09
    2fa6:	70 2f       	mov	r23, r16
    2fa8:	1b 87       	std	Y+11, r17	; 0x0b
    2faa:	0a 87       	std	Y+10, r16	; 0x0a
    2fac:	6d 2d       	mov	r22, r13
    2fae:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fb0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <is_tap_key>
    2fb4:	81 11       	cpse	r24, r1
    2fb6:	55 cf       	rjmp	.-342    	; 0x2e62 <process_tapping+0x206>
                    process_action(keyp);
    2fb8:	c7 01       	movw	r24, r14
    2fba:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <process_action>
    2fbe:	5d cf       	rjmp	.-326    	; 0x2e7a <process_tapping+0x21e>
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	8d 25       	eor	r24, r13
    2fc4:	d8 ce       	rjmp	.-592    	; 0x2d76 <process_tapping+0x11a>

00002fc6 <action_tapping_process>:
{
    2fc6:	1f 93       	push	r17
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	2c 97       	sbiw	r28, 0x0c	; 12
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	4f 83       	std	Y+7, r20	; 0x07
    2fde:	58 87       	std	Y+8, r21	; 0x08
    2fe0:	69 87       	std	Y+9, r22	; 0x09
    2fe2:	7a 87       	std	Y+10, r23	; 0x0a
    2fe4:	8b 87       	std	Y+11, r24	; 0x0b
    2fe6:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2fe8:	ce 01       	movw	r24, r28
    2fea:	07 96       	adiw	r24, 0x07	; 7
    2fec:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <process_tapping>
    2ff0:	88 23       	and	r24, r24
    2ff2:	69 f0       	breq	.+26     	; 0x300e <action_tapping_process+0x48>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff8:	89 2b       	or	r24, r25
    2ffa:	39 f0       	breq	.+14     	; 0x300a <action_tapping_process+0x44>
    2ffc:	4f 81       	ldd	r20, Y+7	; 0x07
    2ffe:	58 85       	ldd	r21, Y+8	; 0x08
    3000:	84 2f       	mov	r24, r20
    3002:	85 23       	and	r24, r21
    3004:	8f 3f       	cpi	r24, 0xFF	; 255
    3006:	09 f0       	breq	.+2      	; 0x300a <action_tapping_process+0x44>
    3008:	77 c0       	rjmp	.+238    	; 0x30f8 <action_tapping_process+0x132>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    300a:	16 e0       	ldi	r17, 0x06	; 6
    300c:	65 c0       	rjmp	.+202    	; 0x30d8 <action_tapping_process+0x112>
        if (!waiting_buffer_enq(record)) {
    300e:	86 e0       	ldi	r24, 0x06	; 6
    3010:	fe 01       	movw	r30, r28
    3012:	37 96       	adiw	r30, 0x07	; 7
    3014:	de 01       	movw	r26, r28
    3016:	11 96       	adiw	r26, 0x01	; 1
    3018:	01 90       	ld	r0, Z+
    301a:	0d 92       	st	X+, r0
    301c:	8a 95       	dec	r24
    301e:	e1 f7       	brne	.-8      	; 0x3018 <action_tapping_process+0x52>
    3020:	6a 85       	ldd	r22, Y+10	; 0x0a
    3022:	7b 85       	ldd	r23, Y+11	; 0x0b
    3024:	61 15       	cp	r22, r1
    3026:	71 05       	cpc	r23, r1
    3028:	81 f3       	breq	.-32     	; 0x300a <action_tapping_process+0x44>
    302a:	5f 81       	ldd	r21, Y+7	; 0x07
    302c:	48 85       	ldd	r20, Y+8	; 0x08
    302e:	84 2f       	mov	r24, r20
    3030:	85 23       	and	r24, r21
    3032:	8f 3f       	cpi	r24, 0xFF	; 255
    3034:	51 f3       	breq	.-44     	; 0x300a <action_tapping_process+0x44>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3036:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <waiting_buffer_head>
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	c9 01       	movw	r24, r18
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	87 70       	andi	r24, 0x07	; 7
    3042:	99 27       	eor	r25, r25
    3044:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
    3048:	e8 17       	cp	r30, r24
    304a:	19 06       	cpc	r1, r25
    304c:	71 f4       	brne	.+28     	; 0x306a <action_tapping_process+0xa4>
            clear_keyboard();
    304e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <clear_keyboard>
    waiting_buffer_head = 0;
    3052:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <waiting_buffer_head>
    waiting_buffer_tail = 0;
    3056:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    305a:	86 e0       	ldi	r24, 0x06	; 6
    305c:	e9 ec       	ldi	r30, 0xC9	; 201
    305e:	f2 e0       	ldi	r31, 0x02	; 2
    3060:	df 01       	movw	r26, r30
    3062:	1d 92       	st	X+, r1
    3064:	8a 95       	dec	r24
    3066:	e9 f7       	brne	.-6      	; 0x3062 <action_tapping_process+0x9c>
    3068:	d0 cf       	rjmp	.-96     	; 0x300a <action_tapping_process+0x44>
    waiting_buffer[waiting_buffer_head] = record;
    306a:	59 83       	std	Y+1, r21	; 0x01
    306c:	4a 83       	std	Y+2, r20	; 0x02
    306e:	7d 83       	std	Y+5, r23	; 0x05
    3070:	6c 83       	std	Y+4, r22	; 0x04
    3072:	96 e0       	ldi	r25, 0x06	; 6
    3074:	92 9f       	mul	r25, r18
    3076:	d0 01       	movw	r26, r0
    3078:	93 9f       	mul	r25, r19
    307a:	b0 0d       	add	r27, r0
    307c:	11 24       	eor	r1, r1
    307e:	a7 56       	subi	r26, 0x67	; 103
    3080:	bd 4f       	sbci	r27, 0xFD	; 253
    3082:	fe 01       	movw	r30, r28
    3084:	31 96       	adiw	r30, 0x01	; 1
    3086:	01 90       	ld	r0, Z+
    3088:	0d 92       	st	X+, r0
    308a:	9a 95       	dec	r25
    308c:	e1 f7       	brne	.-8      	; 0x3086 <action_tapping_process+0xc0>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    308e:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3092:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <debug_waiting_buffer>
    return true;
    3096:	b9 cf       	rjmp	.-142    	; 0x300a <action_tapping_process+0x44>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3098:	81 9f       	mul	r24, r17
    309a:	c0 01       	movw	r24, r0
    309c:	11 24       	eor	r1, r1
    309e:	87 56       	subi	r24, 0x67	; 103
    30a0:	9d 4f       	sbci	r25, 0xFD	; 253
    30a2:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <process_tapping>
    30a6:	88 23       	and	r24, r24
    30a8:	e9 f0       	breq	.+58     	; 0x30e4 <action_tapping_process+0x11e>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    30aa:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <waiting_buffer_tail>
    30ae:	1e 9f       	mul	r17, r30
    30b0:	f0 01       	movw	r30, r0
    30b2:	11 24       	eor	r1, r1
    30b4:	e7 56       	subi	r30, 0x67	; 103
    30b6:	fd 4f       	sbci	r31, 0xFD	; 253
    30b8:	40 81       	ld	r20, Z
    30ba:	51 81       	ldd	r21, Z+1	; 0x01
    30bc:	62 81       	ldd	r22, Z+2	; 0x02
    30be:	73 81       	ldd	r23, Z+3	; 0x03
    30c0:	84 81       	ldd	r24, Z+4	; 0x04
    30c2:	95 81       	ldd	r25, Z+5	; 0x05
    30c4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    30c8:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	87 70       	andi	r24, 0x07	; 7
    30d2:	99 27       	eor	r25, r25
    30d4:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <waiting_buffer_tail>
    30d8:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <waiting_buffer_tail>
    30dc:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <waiting_buffer_head>
    30e0:	89 13       	cpse	r24, r25
    30e2:	da cf       	rjmp	.-76     	; 0x3098 <action_tapping_process+0xd2>
}
    30e4:	2c 96       	adiw	r28, 0x0c	; 12
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	1f 91       	pop	r17
    30f6:	08 95       	ret
            debug("processed: "); debug_record(record); debug("\n");
    30f8:	69 85       	ldd	r22, Y+9	; 0x09
    30fa:	7a 85       	ldd	r23, Y+10	; 0x0a
    30fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    30fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    3100:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <debug_record>
    3104:	82 cf       	rjmp	.-252    	; 0x300a <action_tapping_process+0x44>

00003106 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3106:	df 92       	push	r13
    3108:	ef 92       	push	r14
    310a:	ff 92       	push	r15
    310c:	0f 93       	push	r16
    310e:	1f 93       	push	r17
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3116:	89 2b       	or	r24, r25
    3118:	b9 f0       	breq	.+46     	; 0x3148 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    311a:	f1 2c       	mov	r15, r1
    uint8_t interval = 0;
    311c:	e1 2c       	mov	r14, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    311e:	dd 24       	eor	r13, r13
    3120:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    3122:	e9 01       	movw	r28, r18
    3124:	21 96       	adiw	r28, 0x01	; 1
    3126:	f9 01       	movw	r30, r18
    3128:	84 91       	lpm	r24, Z
    312a:	85 37       	cpi	r24, 0x75	; 117
    312c:	09 f4       	brne	.+2      	; 0x3130 <action_macro_play+0x2a>
    312e:	6e c0       	rjmp	.+220    	; 0x320c <action_macro_play+0x106>
    3130:	98 f4       	brcc	.+38     	; 0x3158 <action_macro_play+0x52>
    3132:	84 37       	cpi	r24, 0x74	; 116
    3134:	09 f4       	brne	.+2      	; 0x3138 <action_macro_play+0x32>
    3136:	5b c0       	rjmp	.+182    	; 0x31ee <action_macro_play+0xe8>
    3138:	84 30       	cpi	r24, 0x04	; 4
    313a:	08 f0       	brcs	.+2      	; 0x313e <action_macro_play+0x38>
    313c:	73 c0       	rjmp	.+230    	; 0x3224 <action_macro_play+0x11e>
    313e:	81 30       	cpi	r24, 0x01	; 1
    3140:	11 f1       	breq	.+68     	; 0x3186 <action_macro_play+0x80>
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	09 f4       	brne	.+2      	; 0x3148 <action_macro_play+0x42>
    3146:	3d c0       	rjmp	.+122    	; 0x31c2 <action_macro_play+0xbc>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	1f 91       	pop	r17
    314e:	0f 91       	pop	r16
    3150:	ff 90       	pop	r15
    3152:	ef 90       	pop	r14
    3154:	df 90       	pop	r13
    3156:	08 95       	ret
        switch (MACRO_READ()) {
    3158:	88 37       	cpi	r24, 0x78	; 120
    315a:	09 f4       	brne	.+2      	; 0x315e <action_macro_play+0x58>
    315c:	60 c0       	rjmp	.+192    	; 0x321e <action_macro_play+0x118>
    315e:	58 f4       	brcc	.+22     	; 0x3176 <action_macro_play+0x70>
    3160:	86 37       	cpi	r24, 0x76	; 118
    3162:	09 f4       	brne	.+2      	; 0x3166 <action_macro_play+0x60>
    3164:	58 c0       	rjmp	.+176    	; 0x3216 <action_macro_play+0x110>
    3166:	87 37       	cpi	r24, 0x77	; 119
    3168:	79 f7       	brne	.-34     	; 0x3148 <action_macro_play+0x42>
                set_mods(mod_storage);
    316a:	8f 2d       	mov	r24, r15
    316c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <set_mods>
                send_keyboard_report();
    3170:	0e 94 18 1c 	call	0x3830	; 0x3830 <send_keyboard_report>
                break;
    3174:	20 c0       	rjmp	.+64     	; 0x31b6 <action_macro_play+0xb0>
        switch (MACRO_READ()) {
    3176:	9c e7       	ldi	r25, 0x7C	; 124
    3178:	98 0f       	add	r25, r24
    317a:	90 37       	cpi	r25, 0x70	; 112
    317c:	28 f7       	brcc	.-54     	; 0x3148 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    317e:	8f 77       	andi	r24, 0x7F	; 127
    3180:	0e 94 b4 11 	call	0x2368	; 0x2368 <unregister_code>
                break;
    3184:	18 c0       	rjmp	.+48     	; 0x31b6 <action_macro_play+0xb0>
                MACRO_READ();
    3186:	89 01       	movw	r16, r18
    3188:	0e 5f       	subi	r16, 0xFE	; 254
    318a:	1f 4f       	sbci	r17, 0xFF	; 255
    318c:	fe 01       	movw	r30, r28
    318e:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3190:	90 e2       	ldi	r25, 0x20	; 32
    3192:	98 0f       	add	r25, r24
    3194:	98 30       	cpi	r25, 0x08	; 8
    3196:	60 f4       	brcc	.+24     	; 0x31b0 <action_macro_play+0xaa>
                    add_weak_mods(MOD_BIT(macro));
    3198:	87 70       	andi	r24, 0x07	; 7
    319a:	fd 2d       	mov	r31, r13
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <action_macro_play+0x9a>
    319e:	ff 0f       	add	r31, r31
    31a0:	8a 95       	dec	r24
    31a2:	ea f7       	brpl	.-6      	; 0x319e <action_macro_play+0x98>
    31a4:	8f 2f       	mov	r24, r31
    31a6:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <add_weak_mods>
                    send_keyboard_report();
    31aa:	0e 94 18 1c 	call	0x3830	; 0x3830 <send_keyboard_report>
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <action_macro_play+0xae>
                    register_code(macro);
    31b0:	0e 94 1d 11 	call	0x223a	; 0x223a <register_code>
                MACRO_READ();
    31b4:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    31b6:	8e 2d       	mov	r24, r14
    31b8:	81 50       	subi	r24, 0x01	; 1
    31ba:	08 f0       	brcs	.+2      	; 0x31be <action_macro_play+0xb8>
    31bc:	36 c0       	rjmp	.+108    	; 0x322a <action_macro_play+0x124>
    31be:	9e 01       	movw	r18, r28
    31c0:	b0 cf       	rjmp	.-160    	; 0x3122 <action_macro_play+0x1c>
                MACRO_READ();
    31c2:	89 01       	movw	r16, r18
    31c4:	0e 5f       	subi	r16, 0xFE	; 254
    31c6:	1f 4f       	sbci	r17, 0xFF	; 255
    31c8:	fe 01       	movw	r30, r28
    31ca:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    31cc:	90 e2       	ldi	r25, 0x20	; 32
    31ce:	98 0f       	add	r25, r24
    31d0:	98 30       	cpi	r25, 0x08	; 8
    31d2:	50 f4       	brcc	.+20     	; 0x31e8 <action_macro_play+0xe2>
                    del_weak_mods(MOD_BIT(macro));
    31d4:	87 70       	andi	r24, 0x07	; 7
    31d6:	fd 2d       	mov	r31, r13
    31d8:	01 c0       	rjmp	.+2      	; 0x31dc <action_macro_play+0xd6>
    31da:	ff 0f       	add	r31, r31
    31dc:	8a 95       	dec	r24
    31de:	ea f7       	brpl	.-6      	; 0x31da <action_macro_play+0xd4>
    31e0:	8f 2f       	mov	r24, r31
    31e2:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <del_weak_mods>
    31e6:	e1 cf       	rjmp	.-62     	; 0x31aa <action_macro_play+0xa4>
                    unregister_code(macro);
    31e8:	0e 94 b4 11 	call	0x2368	; 0x2368 <unregister_code>
    31ec:	e3 cf       	rjmp	.-58     	; 0x31b4 <action_macro_play+0xae>
                MACRO_READ();
    31ee:	2e 5f       	subi	r18, 0xFE	; 254
    31f0:	3f 4f       	sbci	r19, 0xFF	; 255
    31f2:	fe 01       	movw	r30, r28
    31f4:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    31f6:	c1 50       	subi	r28, 0x01	; 1
    31f8:	10 f4       	brcc	.+4      	; 0x31fe <action_macro_play+0xf8>
                interval = MACRO_READ();
    31fa:	e9 01       	movw	r28, r18
                break;
    31fc:	dc cf       	rjmp	.-72     	; 0x31b6 <action_macro_play+0xb0>
    31fe:	8f e9       	ldi	r24, 0x9F	; 159
    3200:	9f e0       	ldi	r25, 0x0F	; 15
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <action_macro_play+0xfc>
    3206:	00 c0       	rjmp	.+0      	; 0x3208 <action_macro_play+0x102>
    3208:	00 00       	nop
}
    320a:	f5 cf       	rjmp	.-22     	; 0x31f6 <action_macro_play+0xf0>
                interval = MACRO_READ();
    320c:	2e 5f       	subi	r18, 0xFE	; 254
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	fe 01       	movw	r30, r28
    3212:	e4 90       	lpm	r14, Z
    3214:	f2 cf       	rjmp	.-28     	; 0x31fa <action_macro_play+0xf4>
                mod_storage = get_mods();
    3216:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <get_mods>
    321a:	f8 2e       	mov	r15, r24
                break;
    321c:	cc cf       	rjmp	.-104    	; 0x31b6 <action_macro_play+0xb0>
                clear_mods();
    321e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <clear_mods>
    3222:	a6 cf       	rjmp	.-180    	; 0x3170 <action_macro_play+0x6a>
                register_code(macro);
    3224:	0e 94 1d 11 	call	0x223a	; 0x223a <register_code>
                break;
    3228:	c6 cf       	rjmp	.-116    	; 0x31b6 <action_macro_play+0xb0>
	__builtin_avr_delay_cycles(__ticks_dc);
    322a:	ef e9       	ldi	r30, 0x9F	; 159
    322c:	ff e0       	ldi	r31, 0x0F	; 15
    322e:	31 97       	sbiw	r30, 0x01	; 1
    3230:	f1 f7       	brne	.-4      	; 0x322e <action_macro_play+0x128>
    3232:	00 c0       	rjmp	.+0      	; 0x3234 <action_macro_play+0x12e>
    3234:	00 00       	nop
}
    3236:	c0 cf       	rjmp	.-128    	; 0x31b8 <action_macro_play+0xb2>

00003238 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3238:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <layer_state>
    323c:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <layer_state+0x1>
    3240:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <layer_state+0x2>
    3244:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <layer_state+0x3>
    hook_layer_change(layer_state);
    3248:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <hook_layer_change>

0000324c <default_layer_debug>:
}
    324c:	08 95       	ret

0000324e <default_layer_set>:
    default_layer_state = state;
    324e:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <default_layer_state>
    3252:	70 93 5c 03 	sts	0x035C, r23	; 0x80035c <default_layer_state+0x1>
    3256:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <default_layer_state+0x2>
    325a:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    325e:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <hook_default_layer_change>

00003262 <default_layer_or>:
{
    3262:	cf 93       	push	r28
    3264:	df 93       	push	r29
    3266:	00 d0       	rcall	.+0      	; 0x3268 <default_layer_or+0x6>
    3268:	00 d0       	rcall	.+0      	; 0x326a <default_layer_or+0x8>
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	69 83       	std	Y+1, r22	; 0x01
    3270:	7a 83       	std	Y+2, r23	; 0x02
    3272:	8b 83       	std	Y+3, r24	; 0x03
    3274:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state | state);
    3276:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <default_layer_state>
    327a:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <default_layer_state+0x1>
    327e:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <default_layer_state+0x2>
    3282:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <default_layer_state+0x3>
    3286:	29 81       	ldd	r18, Y+1	; 0x01
    3288:	3a 81       	ldd	r19, Y+2	; 0x02
    328a:	4b 81       	ldd	r20, Y+3	; 0x03
    328c:	5c 81       	ldd	r21, Y+4	; 0x04
    328e:	28 2b       	or	r18, r24
    3290:	39 2b       	or	r19, r25
    3292:	4a 2b       	or	r20, r26
    3294:	5b 2b       	or	r21, r27
    3296:	29 83       	std	Y+1, r18	; 0x01
    3298:	3a 83       	std	Y+2, r19	; 0x02
    329a:	4b 83       	std	Y+3, r20	; 0x03
    329c:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    329e:	20 93 5b 03 	sts	0x035B, r18	; 0x80035b <default_layer_state>
    32a2:	30 93 5c 03 	sts	0x035C, r19	; 0x80035c <default_layer_state+0x1>
    32a6:	40 93 5d 03 	sts	0x035D, r20	; 0x80035d <default_layer_state+0x2>
    32aa:	50 93 5e 03 	sts	0x035E, r21	; 0x80035e <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    32ae:	ca 01       	movw	r24, r20
    32b0:	b9 01       	movw	r22, r18
}
    32b2:	0f 90       	pop	r0
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    32be:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <hook_default_layer_change>

000032c2 <default_layer_and>:
{
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <default_layer_and+0x6>
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <default_layer_and+0x8>
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	69 83       	std	Y+1, r22	; 0x01
    32d0:	7a 83       	std	Y+2, r23	; 0x02
    32d2:	8b 83       	std	Y+3, r24	; 0x03
    32d4:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state & state);
    32d6:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <default_layer_state>
    32da:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <default_layer_state+0x1>
    32de:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <default_layer_state+0x2>
    32e2:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <default_layer_state+0x3>
    32e6:	29 81       	ldd	r18, Y+1	; 0x01
    32e8:	3a 81       	ldd	r19, Y+2	; 0x02
    32ea:	4b 81       	ldd	r20, Y+3	; 0x03
    32ec:	5c 81       	ldd	r21, Y+4	; 0x04
    32ee:	28 23       	and	r18, r24
    32f0:	39 23       	and	r19, r25
    32f2:	4a 23       	and	r20, r26
    32f4:	5b 23       	and	r21, r27
    32f6:	29 83       	std	Y+1, r18	; 0x01
    32f8:	3a 83       	std	Y+2, r19	; 0x02
    32fa:	4b 83       	std	Y+3, r20	; 0x03
    32fc:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    32fe:	20 93 5b 03 	sts	0x035B, r18	; 0x80035b <default_layer_state>
    3302:	30 93 5c 03 	sts	0x035C, r19	; 0x80035c <default_layer_state+0x1>
    3306:	40 93 5d 03 	sts	0x035D, r20	; 0x80035d <default_layer_state+0x2>
    330a:	50 93 5e 03 	sts	0x035E, r21	; 0x80035e <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    330e:	ca 01       	movw	r24, r20
    3310:	b9 01       	movw	r22, r18
}
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    331e:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <hook_default_layer_change>

00003322 <default_layer_xor>:
{
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	00 d0       	rcall	.+0      	; 0x3328 <default_layer_xor+0x6>
    3328:	00 d0       	rcall	.+0      	; 0x332a <default_layer_xor+0x8>
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	69 83       	std	Y+1, r22	; 0x01
    3330:	7a 83       	std	Y+2, r23	; 0x02
    3332:	8b 83       	std	Y+3, r24	; 0x03
    3334:	9c 83       	std	Y+4, r25	; 0x04
    default_layer_state_set(default_layer_state ^ state);
    3336:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <default_layer_state>
    333a:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <default_layer_state+0x1>
    333e:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <default_layer_state+0x2>
    3342:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <default_layer_state+0x3>
    3346:	29 81       	ldd	r18, Y+1	; 0x01
    3348:	3a 81       	ldd	r19, Y+2	; 0x02
    334a:	4b 81       	ldd	r20, Y+3	; 0x03
    334c:	5c 81       	ldd	r21, Y+4	; 0x04
    334e:	28 27       	eor	r18, r24
    3350:	39 27       	eor	r19, r25
    3352:	4a 27       	eor	r20, r26
    3354:	5b 27       	eor	r21, r27
    3356:	29 83       	std	Y+1, r18	; 0x01
    3358:	3a 83       	std	Y+2, r19	; 0x02
    335a:	4b 83       	std	Y+3, r20	; 0x03
    335c:	5c 83       	std	Y+4, r21	; 0x04
    default_layer_state = state;
    335e:	20 93 5b 03 	sts	0x035B, r18	; 0x80035b <default_layer_state>
    3362:	30 93 5c 03 	sts	0x035C, r19	; 0x80035c <default_layer_state+0x1>
    3366:	40 93 5d 03 	sts	0x035D, r20	; 0x80035d <default_layer_state+0x2>
    336a:	50 93 5e 03 	sts	0x035E, r21	; 0x80035e <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    336e:	ca 01       	movw	r24, r20
    3370:	b9 01       	movw	r22, r18
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    hook_default_layer_change(default_layer_state);
    337e:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <hook_default_layer_change>

00003382 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	70 e0       	ldi	r23, 0x00	; 0
    3386:	cb 01       	movw	r24, r22
    3388:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

0000338c <layer_move>:
}

void layer_move(uint8_t layer)
{
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	00 d0       	rcall	.+0      	; 0x3396 <layer_move+0xa>
    3396:	00 d0       	rcall	.+0      	; 0x3398 <layer_move+0xc>
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(1UL<<layer);
    339c:	41 e0       	ldi	r20, 0x01	; 1
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	8a 01       	movw	r16, r20
    33a6:	9b 01       	movw	r18, r22
    33a8:	04 c0       	rjmp	.+8      	; 0x33b2 <layer_move+0x26>
    33aa:	00 0f       	add	r16, r16
    33ac:	11 1f       	adc	r17, r17
    33ae:	22 1f       	adc	r18, r18
    33b0:	33 1f       	adc	r19, r19
    33b2:	8a 95       	dec	r24
    33b4:	d2 f7       	brpl	.-12     	; 0x33aa <layer_move+0x1e>
    33b6:	09 83       	std	Y+1, r16	; 0x01
    33b8:	1a 83       	std	Y+2, r17	; 0x02
    33ba:	2b 83       	std	Y+3, r18	; 0x03
    33bc:	3c 83       	std	Y+4, r19	; 0x04
    33be:	c9 01       	movw	r24, r18
    33c0:	b8 01       	movw	r22, r16
}
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	1f 91       	pop	r17
    33d0:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    33d2:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

000033d6 <layer_on>:

void layer_on(uint8_t layer)
{
    33d6:	0f 93       	push	r16
    33d8:	1f 93       	push	r17
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <layer_on+0xa>
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <layer_on+0xc>
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state | (1UL<<layer));
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	60 e0       	ldi	r22, 0x00	; 0
    33ec:	70 e0       	ldi	r23, 0x00	; 0
    33ee:	04 c0       	rjmp	.+8      	; 0x33f8 <layer_on+0x22>
    33f0:	44 0f       	add	r20, r20
    33f2:	55 1f       	adc	r21, r21
    33f4:	66 1f       	adc	r22, r22
    33f6:	77 1f       	adc	r23, r23
    33f8:	8a 95       	dec	r24
    33fa:	d2 f7       	brpl	.-12     	; 0x33f0 <layer_on+0x1a>
    33fc:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <layer_state>
    3400:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <layer_state+0x1>
    3404:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <layer_state+0x2>
    3408:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <layer_state+0x3>
    340c:	8a 01       	movw	r16, r20
    340e:	9b 01       	movw	r18, r22
    3410:	08 2b       	or	r16, r24
    3412:	19 2b       	or	r17, r25
    3414:	2a 2b       	or	r18, r26
    3416:	3b 2b       	or	r19, r27
    3418:	09 83       	std	Y+1, r16	; 0x01
    341a:	1a 83       	std	Y+2, r17	; 0x02
    341c:	2b 83       	std	Y+3, r18	; 0x03
    341e:	3c 83       	std	Y+4, r19	; 0x04
    3420:	c9 01       	movw	r24, r18
    3422:	b8 01       	movw	r22, r16
}
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	df 91       	pop	r29
    342e:	cf 91       	pop	r28
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    3434:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

00003438 <layer_off>:

void layer_off(uint8_t layer)
{
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	cf 93       	push	r28
    343e:	df 93       	push	r29
    3440:	00 d0       	rcall	.+0      	; 0x3442 <layer_off+0xa>
    3442:	00 d0       	rcall	.+0      	; 0x3444 <layer_off+0xc>
    3444:	cd b7       	in	r28, 0x3d	; 61
    3446:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state & ~(1UL<<layer));
    3448:	41 e0       	ldi	r20, 0x01	; 1
    344a:	50 e0       	ldi	r21, 0x00	; 0
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	04 c0       	rjmp	.+8      	; 0x345a <layer_off+0x22>
    3452:	44 0f       	add	r20, r20
    3454:	55 1f       	adc	r21, r21
    3456:	66 1f       	adc	r22, r22
    3458:	77 1f       	adc	r23, r23
    345a:	8a 95       	dec	r24
    345c:	d2 f7       	brpl	.-12     	; 0x3452 <layer_off+0x1a>
    345e:	40 95       	com	r20
    3460:	50 95       	com	r21
    3462:	60 95       	com	r22
    3464:	70 95       	com	r23
    3466:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <layer_state>
    346a:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <layer_state+0x1>
    346e:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <layer_state+0x2>
    3472:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <layer_state+0x3>
    3476:	8a 01       	movw	r16, r20
    3478:	9b 01       	movw	r18, r22
    347a:	08 23       	and	r16, r24
    347c:	19 23       	and	r17, r25
    347e:	2a 23       	and	r18, r26
    3480:	3b 23       	and	r19, r27
    3482:	09 83       	std	Y+1, r16	; 0x01
    3484:	1a 83       	std	Y+2, r17	; 0x02
    3486:	2b 83       	std	Y+3, r18	; 0x03
    3488:	3c 83       	std	Y+4, r19	; 0x04
    348a:	c9 01       	movw	r24, r18
    348c:	b8 01       	movw	r22, r16
}
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    349e:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

000034a2 <layer_invert>:

void layer_invert(uint8_t layer)
{
    34a2:	0f 93       	push	r16
    34a4:	1f 93       	push	r17
    34a6:	cf 93       	push	r28
    34a8:	df 93       	push	r29
    34aa:	00 d0       	rcall	.+0      	; 0x34ac <layer_invert+0xa>
    34ac:	00 d0       	rcall	.+0      	; 0x34ae <layer_invert+0xc>
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    layer_state_set(layer_state ^ (1UL<<layer));
    34b2:	41 e0       	ldi	r20, 0x01	; 1
    34b4:	50 e0       	ldi	r21, 0x00	; 0
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	04 c0       	rjmp	.+8      	; 0x34c4 <layer_invert+0x22>
    34bc:	44 0f       	add	r20, r20
    34be:	55 1f       	adc	r21, r21
    34c0:	66 1f       	adc	r22, r22
    34c2:	77 1f       	adc	r23, r23
    34c4:	8a 95       	dec	r24
    34c6:	d2 f7       	brpl	.-12     	; 0x34bc <layer_invert+0x1a>
    34c8:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <layer_state>
    34cc:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <layer_state+0x1>
    34d0:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <layer_state+0x2>
    34d4:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <layer_state+0x3>
    34d8:	8a 01       	movw	r16, r20
    34da:	9b 01       	movw	r18, r22
    34dc:	08 27       	eor	r16, r24
    34de:	19 27       	eor	r17, r25
    34e0:	2a 27       	eor	r18, r26
    34e2:	3b 27       	eor	r19, r27
    34e4:	09 83       	std	Y+1, r16	; 0x01
    34e6:	1a 83       	std	Y+2, r17	; 0x02
    34e8:	2b 83       	std	Y+3, r18	; 0x03
    34ea:	3c 83       	std	Y+4, r19	; 0x04
    34ec:	c9 01       	movw	r24, r18
    34ee:	b8 01       	movw	r22, r16
}
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	0f 90       	pop	r0
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    3500:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

00003504 <layer_or>:

void layer_or(uint32_t state)
{
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	00 d0       	rcall	.+0      	; 0x350a <layer_or+0x6>
    350a:	00 d0       	rcall	.+0      	; 0x350c <layer_or+0x8>
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	69 83       	std	Y+1, r22	; 0x01
    3512:	7a 83       	std	Y+2, r23	; 0x02
    3514:	8b 83       	std	Y+3, r24	; 0x03
    3516:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state | state);
    3518:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <layer_state>
    351c:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <layer_state+0x1>
    3520:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <layer_state+0x2>
    3524:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <layer_state+0x3>
    3528:	29 81       	ldd	r18, Y+1	; 0x01
    352a:	3a 81       	ldd	r19, Y+2	; 0x02
    352c:	4b 81       	ldd	r20, Y+3	; 0x03
    352e:	5c 81       	ldd	r21, Y+4	; 0x04
    3530:	28 2b       	or	r18, r24
    3532:	39 2b       	or	r19, r25
    3534:	4a 2b       	or	r20, r26
    3536:	5b 2b       	or	r21, r27
    3538:	29 83       	std	Y+1, r18	; 0x01
    353a:	3a 83       	std	Y+2, r19	; 0x02
    353c:	4b 83       	std	Y+3, r20	; 0x03
    353e:	5c 83       	std	Y+4, r21	; 0x04
    3540:	ca 01       	movw	r24, r20
    3542:	b9 01       	movw	r22, r18
}
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    layer_state_set(layer_state | state);
    3550:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

00003554 <layer_and>:
void layer_and(uint32_t state)
{
    3554:	cf 93       	push	r28
    3556:	df 93       	push	r29
    3558:	00 d0       	rcall	.+0      	; 0x355a <layer_and+0x6>
    355a:	00 d0       	rcall	.+0      	; 0x355c <layer_and+0x8>
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	69 83       	std	Y+1, r22	; 0x01
    3562:	7a 83       	std	Y+2, r23	; 0x02
    3564:	8b 83       	std	Y+3, r24	; 0x03
    3566:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state & state);
    3568:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <layer_state>
    356c:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <layer_state+0x1>
    3570:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <layer_state+0x2>
    3574:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <layer_state+0x3>
    3578:	29 81       	ldd	r18, Y+1	; 0x01
    357a:	3a 81       	ldd	r19, Y+2	; 0x02
    357c:	4b 81       	ldd	r20, Y+3	; 0x03
    357e:	5c 81       	ldd	r21, Y+4	; 0x04
    3580:	28 23       	and	r18, r24
    3582:	39 23       	and	r19, r25
    3584:	4a 23       	and	r20, r26
    3586:	5b 23       	and	r21, r27
    3588:	29 83       	std	Y+1, r18	; 0x01
    358a:	3a 83       	std	Y+2, r19	; 0x02
    358c:	4b 83       	std	Y+3, r20	; 0x03
    358e:	5c 83       	std	Y+4, r21	; 0x04
    3590:	ca 01       	movw	r24, r20
    3592:	b9 01       	movw	r22, r18
}
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	df 91       	pop	r29
    359e:	cf 91       	pop	r28
    layer_state_set(layer_state & state);
    35a0:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

000035a4 <layer_xor>:
void layer_xor(uint32_t state)
{
    35a4:	cf 93       	push	r28
    35a6:	df 93       	push	r29
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <layer_xor+0x6>
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <layer_xor+0x8>
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	69 83       	std	Y+1, r22	; 0x01
    35b2:	7a 83       	std	Y+2, r23	; 0x02
    35b4:	8b 83       	std	Y+3, r24	; 0x03
    35b6:	9c 83       	std	Y+4, r25	; 0x04
    layer_state_set(layer_state ^ state);
    35b8:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <layer_state>
    35bc:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <layer_state+0x1>
    35c0:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <layer_state+0x2>
    35c4:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <layer_state+0x3>
    35c8:	29 81       	ldd	r18, Y+1	; 0x01
    35ca:	3a 81       	ldd	r19, Y+2	; 0x02
    35cc:	4b 81       	ldd	r20, Y+3	; 0x03
    35ce:	5c 81       	ldd	r21, Y+4	; 0x04
    35d0:	28 27       	eor	r18, r24
    35d2:	39 27       	eor	r19, r25
    35d4:	4a 27       	eor	r20, r26
    35d6:	5b 27       	eor	r21, r27
    35d8:	29 83       	std	Y+1, r18	; 0x01
    35da:	3a 83       	std	Y+2, r19	; 0x02
    35dc:	4b 83       	std	Y+3, r20	; 0x03
    35de:	5c 83       	std	Y+4, r21	; 0x04
    35e0:	ca 01       	movw	r24, r20
    35e2:	b9 01       	movw	r22, r18
}
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	df 91       	pop	r29
    35ee:	cf 91       	pop	r28
    layer_state_set(layer_state ^ state);
    35f0:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_state_set>

000035f4 <layer_debug>:
    35f4:	08 95       	ret

000035f6 <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    35f6:	4f 92       	push	r4
    35f8:	5f 92       	push	r5
    35fa:	6f 92       	push	r6
    35fc:	7f 92       	push	r7
    35fe:	9f 92       	push	r9
    3600:	af 92       	push	r10
    3602:	bf 92       	push	r11
    3604:	cf 92       	push	r12
    3606:	df 92       	push	r13
    3608:	ef 92       	push	r14
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	00 d0       	rcall	.+0      	; 0x3616 <layer_switch_get_action+0x20>
    3616:	00 d0       	rcall	.+0      	; 0x3618 <layer_switch_get_action+0x22>
    3618:	0f 92       	push	r0
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	49 83       	std	Y+1, r20	; 0x01
    3620:	5a 83       	std	Y+2, r21	; 0x02
    3622:	6b 83       	std	Y+3, r22	; 0x03
    3624:	7c 83       	std	Y+4, r23	; 0x04
    3626:	8d 83       	std	Y+5, r24	; 0x05
    3628:	8c 81       	ldd	r24, Y+4	; 0x04
    362a:	9d 81       	ldd	r25, Y+5	; 0x05
    362c:	89 2b       	or	r24, r25
    362e:	31 f0       	breq	.+12     	; 0x363c <layer_switch_get_action+0x46>
    3630:	a4 2e       	mov	r10, r20
    3632:	95 2e       	mov	r9, r21
    3634:	84 2f       	mov	r24, r20
    3636:	85 23       	and	r24, r21
    3638:	8f 3f       	cpi	r24, 0xFF	; 255
    363a:	59 f5       	brne	.+86     	; 0x3692 <layer_switch_get_action+0x9c>
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
}
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	df 91       	pop	r29
    364c:	cf 91       	pop	r28
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	ef 90       	pop	r14
    3656:	df 90       	pop	r13
    3658:	cf 90       	pop	r12
    365a:	bf 90       	pop	r11
    365c:	af 90       	pop	r10
    365e:	9f 90       	pop	r9
    3660:	7f 90       	pop	r7
    3662:	6f 90       	pop	r6
    3664:	5f 90       	pop	r5
    3666:	4f 90       	pop	r4
    3668:	08 95       	ret
            action = action_for_key(i, key);
    366a:	6a 2d       	mov	r22, r10
    366c:	79 2d       	mov	r23, r9
    366e:	8c 2d       	mov	r24, r12
    3670:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	c1 f1       	breq	.+112    	; 0x36e8 <layer_switch_get_action+0xf2>
    3678:	3c c0       	rjmp	.+120    	; 0x36f2 <layer_switch_get_action+0xfc>
        layer = layer_pressed[event.key.row][event.key.col];
    367a:	f8 01       	movw	r30, r16
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	ee 0f       	add	r30, r30
    3680:	ff 1f       	adc	r31, r31
    3682:	8a 95       	dec	r24
    3684:	e1 f7       	brne	.-8      	; 0x367e <layer_switch_get_action+0x88>
    3686:	e1 53       	subi	r30, 0x31	; 49
    3688:	fd 4f       	sbci	r31, 0xFD	; 253
    368a:	ee 0d       	add	r30, r14
    368c:	ff 1d       	adc	r31, r15
    368e:	b0 80       	ld	r11, Z
    3690:	3b c0       	rjmp	.+118    	; 0x3708 <layer_switch_get_action+0x112>
    if (event.pressed) {
    3692:	05 2f       	mov	r16, r21
    3694:	10 e0       	ldi	r17, 0x00	; 0
    3696:	e4 2e       	mov	r14, r20
    3698:	f1 2c       	mov	r15, r1
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	88 23       	and	r24, r24
    369e:	69 f3       	breq	.-38     	; 0x367a <layer_switch_get_action+0x84>
    uint32_t layers = layer_state | default_layer_state;
    36a0:	40 90 57 03 	lds	r4, 0x0357	; 0x800357 <layer_state>
    36a4:	50 90 58 03 	lds	r5, 0x0358	; 0x800358 <layer_state+0x1>
    36a8:	60 90 59 03 	lds	r6, 0x0359	; 0x800359 <layer_state+0x2>
    36ac:	70 90 5a 03 	lds	r7, 0x035A	; 0x80035a <layer_state+0x3>
    36b0:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <default_layer_state>
    36b4:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <default_layer_state+0x1>
    36b8:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <default_layer_state+0x2>
    36bc:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <default_layer_state+0x3>
    36c0:	48 2a       	or	r4, r24
    36c2:	59 2a       	or	r5, r25
    36c4:	6a 2a       	or	r6, r26
    36c6:	7b 2a       	or	r7, r27
    36c8:	2f e1       	ldi	r18, 0x1F	; 31
    36ca:	c2 2e       	mov	r12, r18
    36cc:	d1 2c       	mov	r13, r1
        if (layers & (1UL<<i)) {
    36ce:	bc 2c       	mov	r11, r12
    36d0:	d3 01       	movw	r26, r6
    36d2:	c2 01       	movw	r24, r4
    36d4:	0c 2c       	mov	r0, r12
    36d6:	04 c0       	rjmp	.+8      	; 0x36e0 <layer_switch_get_action+0xea>
    36d8:	b6 95       	lsr	r27
    36da:	a7 95       	ror	r26
    36dc:	97 95       	ror	r25
    36de:	87 95       	ror	r24
    36e0:	0a 94       	dec	r0
    36e2:	d2 f7       	brpl	.-12     	; 0x36d8 <layer_switch_get_action+0xe2>
    36e4:	80 fd       	sbrc	r24, 0
    36e6:	c1 cf       	rjmp	.-126    	; 0x366a <layer_switch_get_action+0x74>
    for (int8_t i = 31; i >= 0; i--) {
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	c8 1a       	sub	r12, r24
    36ec:	d1 08       	sbc	r13, r1
    36ee:	78 f7       	brcc	.-34     	; 0x36ce <layer_switch_get_action+0xd8>
    return 0;
    36f0:	b1 2c       	mov	r11, r1
        layer_pressed[event.key.row][event.key.col] = layer;
    36f2:	f8 01       	movw	r30, r16
    36f4:	93 e0       	ldi	r25, 0x03	; 3
    36f6:	ee 0f       	add	r30, r30
    36f8:	ff 1f       	adc	r31, r31
    36fa:	9a 95       	dec	r25
    36fc:	e1 f7       	brne	.-8      	; 0x36f6 <layer_switch_get_action+0x100>
    36fe:	e1 53       	subi	r30, 0x31	; 49
    3700:	fd 4f       	sbci	r31, 0xFD	; 253
    3702:	ee 0d       	add	r30, r14
    3704:	ff 1d       	adc	r31, r15
    3706:	b0 82       	st	Z, r11
    return action_for_key(layer, event.key);
    3708:	69 81       	ldd	r22, Y+1	; 0x01
    370a:	7a 81       	ldd	r23, Y+2	; 0x02
    370c:	8b 2d       	mov	r24, r11
}
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	bf 90       	pop	r11
    372a:	af 90       	pop	r10
    372c:	9f 90       	pop	r9
    372e:	7f 90       	pop	r7
    3730:	6f 90       	pop	r6
    3732:	5f 90       	pop	r5
    3734:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    3736:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <action_for_key>

0000373a <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    373a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    373e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    3742:	f9 01       	movw	r30, r18
    3744:	32 96       	adiw	r30, 0x02	; 2
    int8_t empty = -1;
    3746:	9f ef       	ldi	r25, 0xFF	; 255
    int8_t i = 0;
    3748:	40 e0       	ldi	r20, 0x00	; 0
        if (keyboard_report->keys[i] == code) {
    374a:	51 91       	ld	r21, Z+
    374c:	85 17       	cp	r24, r21
    374e:	51 f0       	breq	.+20     	; 0x3764 <add_key+0x2a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3750:	9f 3f       	cpi	r25, 0xFF	; 255
    3752:	19 f4       	brne	.+6      	; 0x375a <add_key+0x20>
    3754:	51 11       	cpse	r21, r1
    3756:	01 c0       	rjmp	.+2      	; 0x375a <add_key+0x20>
    3758:	94 2f       	mov	r25, r20
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    375a:	4f 5f       	subi	r20, 0xFF	; 255
    375c:	46 30       	cpi	r20, 0x06	; 6
    375e:	a9 f7       	brne	.-22     	; 0x374a <add_key+0x10>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3760:	9f 3f       	cpi	r25, 0xFF	; 255
    3762:	09 f4       	brne	.+2      	; 0x3766 <add_key+0x2c>
}
    3764:	08 95       	ret
            keyboard_report->keys[empty] = code;
    3766:	29 0f       	add	r18, r25
    3768:	31 1d       	adc	r19, r1
    376a:	97 fd       	sbrc	r25, 7
    376c:	3a 95       	dec	r19
    376e:	f9 01       	movw	r30, r18
    3770:	82 83       	std	Z+2, r24	; 0x02
}
    3772:	08 95       	ret

00003774 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3774:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    3778:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    377c:	f9 01       	movw	r30, r18
    377e:	32 96       	adiw	r30, 0x02	; 2
    3780:	28 5f       	subi	r18, 0xF8	; 248
    3782:	3f 4f       	sbci	r19, 0xFF	; 255
    3784:	91 91       	ld	r25, Z+
    3786:	89 13       	cpse	r24, r25
    3788:	03 c0       	rjmp	.+6      	; 0x3790 <del_key+0x1c>
            keyboard_report->keys[i] = 0;
    378a:	df 01       	movw	r26, r30
    378c:	11 97       	sbiw	r26, 0x01	; 1
    378e:	1c 92       	st	X, r1
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3790:	e2 17       	cp	r30, r18
    3792:	f3 07       	cpc	r31, r19
    3794:	b9 f7       	brne	.-18     	; 0x3784 <del_key+0x10>
}
    3796:	08 95       	ret

00003798 <clear_keys>:
{
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	90 e0       	ldi	r25, 0x00	; 0
        keyboard_report->raw[i] = 0;
    379c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    37a0:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    37a4:	e8 0f       	add	r30, r24
    37a6:	f9 1f       	adc	r31, r25
    37a8:	10 82       	st	Z, r1
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    37aa:	01 96       	adiw	r24, 0x01	; 1
    37ac:	88 30       	cpi	r24, 0x08	; 8
    37ae:	91 05       	cpc	r25, r1
    37b0:	a9 f7       	brne	.-22     	; 0x379c <clear_keys+0x4>
}
    37b2:	08 95       	ret

000037b4 <get_mods>:
uint8_t get_mods(void) { return real_mods; }
    37b4:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <real_mods>
    37b8:	08 95       	ret

000037ba <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    37ba:	90 91 69 03 	lds	r25, 0x0369	; 0x800369 <real_mods>
    37be:	98 2b       	or	r25, r24
    37c0:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <real_mods>
    37c4:	08 95       	ret

000037c6 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    37c6:	98 2f       	mov	r25, r24
    37c8:	90 95       	com	r25
    37ca:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <real_mods>
    37ce:	89 23       	and	r24, r25
    37d0:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <real_mods>
    37d4:	08 95       	ret

000037d6 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    37d6:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <real_mods>
    37da:	08 95       	ret

000037dc <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    37dc:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <real_mods>
    37e0:	08 95       	ret

000037e2 <add_weak_mods>:
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    37e2:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <weak_mods>
    37e6:	98 2b       	or	r25, r24
    37e8:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <weak_mods>
    37ec:	08 95       	ret

000037ee <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    37ee:	98 2f       	mov	r25, r24
    37f0:	90 95       	com	r25
    37f2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <weak_mods>
    37f6:	89 23       	and	r24, r25
    37f8:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <weak_mods>
    37fc:	08 95       	ret

000037fe <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    37fe:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <weak_mods>
    3802:	08 95       	ret

00003804 <set_oneshot_mods>:
    oneshot_mods = mods;
    3804:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <oneshot_mods>
}
    3808:	08 95       	ret

0000380a <clear_oneshot_mods>:
    oneshot_mods = 0;
    380a:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <oneshot_mods>
}
    380e:	08 95       	ret

00003810 <has_anykey>:
        if (keyboard_report->raw[i])
    3810:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <keyboard_report>
    3814:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <keyboard_report+0x1>
    3818:	f9 01       	movw	r30, r18
    381a:	31 96       	adiw	r30, 0x01	; 1
    381c:	28 5f       	subi	r18, 0xF8	; 248
    381e:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    3820:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    3822:	91 91       	ld	r25, Z+
    3824:	91 11       	cpse	r25, r1
            cnt++;
    3826:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3828:	e2 17       	cp	r30, r18
    382a:	f3 07       	cpc	r31, r19
    382c:	d1 f7       	brne	.-12     	; 0x3822 <has_anykey+0x12>
}
    382e:	08 95       	ret

00003830 <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    3830:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3834:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3838:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <real_mods>
    383c:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    383e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3842:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3846:	80 81       	ld	r24, Z
    3848:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <weak_mods>
    384c:	89 2b       	or	r24, r25
    384e:	80 83       	st	Z, r24
    if (oneshot_mods) {
    3850:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <oneshot_mods>
    3854:	99 23       	and	r25, r25
    3856:	61 f0       	breq	.+24     	; 0x3870 <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    3858:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    385c:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3860:	80 81       	ld	r24, Z
    3862:	89 2b       	or	r24, r25
    3864:	80 83       	st	Z, r24
        if (has_anykey()) {
    3866:	0e 94 08 1c 	call	0x3810	; 0x3810 <has_anykey>
    386a:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    386c:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <oneshot_mods>
    host_keyboard_send(keyboard_report);
    3870:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <keyboard_report>
    3874:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <keyboard_report+0x1>
    3878:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <host_keyboard_send>

0000387c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    387c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__bss_start+0x1>
    3880:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__bss_start>
}
    3884:	08 95       	ret

00003886 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3886:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3888:	94 e0       	ldi	r25, 0x04	; 4
    388a:	89 9f       	mul	r24, r25
    388c:	90 01       	movw	r18, r0
    388e:	11 24       	eor	r1, r1
    3890:	2c 7c       	andi	r18, 0xCC	; 204
    3892:	86 95       	lsr	r24
    3894:	86 95       	lsr	r24
    3896:	83 73       	andi	r24, 0x33	; 51
    3898:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	c9 01       	movw	r24, r18
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	8a 7a       	andi	r24, 0xAA	; 170
    38a4:	35 95       	asr	r19
    38a6:	27 95       	ror	r18
    38a8:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    38aa:	82 2b       	or	r24, r18
    38ac:	08 95       	ret

000038ae <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    38ae:	08 95       	ret

000038b0 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    38b0:	cf 93       	push	r28
    38b2:	df 93       	push	r29
    38b4:	00 d0       	rcall	.+0      	; 0x38b6 <hook_matrix_change+0x6>
    38b6:	00 d0       	rcall	.+0      	; 0x38b8 <hook_matrix_change+0x8>
    38b8:	0f 92       	push	r0
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	08 95       	ret

000038ce <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    38ce:	08 95       	ret

000038d0 <hook_layer_change>:
    38d0:	08 95       	ret

000038d2 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    38d2:	0c 94 98 10 	jmp	0x2130	; 0x2130 <keyboard_set_leds>

000038d6 <hook_process_action>:
void hook_bootmagic(void) {}

__attribute__((weak))
bool hook_process_action(keyrecord_t *record) {
    return false;
}
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	08 95       	ret

000038da <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    38da:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <USB_DeviceState>
    38de:	84 30       	cpi	r24, 0x04	; 4
    38e0:	21 f1       	breq	.+72     	; 0x392a <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    38e2:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    38e6:	88 e1       	ldi	r24, 0x18	; 24
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	20 e4       	ldi	r18, 0x40	; 64
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	a8 95       	wdr
    38f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    38fc:	83 b7       	in	r24, 0x33	; 51
    38fe:	81 7f       	andi	r24, 0xF1	; 241
    3900:	84 60       	ori	r24, 0x04	; 4
    3902:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3904:	83 b7       	in	r24, 0x33	; 51
    3906:	81 60       	ori	r24, 0x01	; 1
    3908:	83 bf       	out	0x33, r24	; 51
    sei();
    390a:	78 94       	sei
    sleep_cpu();
    390c:	88 95       	sleep
    sleep_disable();
    390e:	83 b7       	in	r24, 0x33	; 51
    3910:	8e 7f       	andi	r24, 0xFE	; 254
    3912:	83 bf       	out	0x33, r24	; 51
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	a8 95       	wdr
    391a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    391e:	88 61       	ori	r24, 0x18	; 24
    3920:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3924:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3928:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    392a:	08 95       	ret

0000392c <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    392c:	cf 93       	push	r28
    matrix_power_up();
    392e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <matrix_power_up>
    matrix_scan();
    3932:	0e 94 43 04 	call	0x886	; 0x886 <matrix_scan>
    matrix_power_down();
    3936:	0e 94 e5 10 	call	0x21ca	; 0x21ca <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    393a:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    393c:	8c 2f       	mov	r24, r28
    393e:	0e 94 6d 05 	call	0xada	; 0xada <matrix_get_row>
    3942:	81 11       	cpse	r24, r1
    3944:	05 c0       	rjmp	.+10     	; 0x3950 <suspend_wakeup_condition+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3946:	cf 5f       	subi	r28, 0xFF	; 255
    3948:	c1 31       	cpi	r28, 0x11	; 17
    394a:	c1 f7       	brne	.-16     	; 0x393c <suspend_wakeup_condition+0x10>
    }
    return false;
}
    394c:	cf 91       	pop	r28
    394e:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	fc cf       	rjmp	.-8      	; 0x394c <suspend_wakeup_condition+0x20>

00003954 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3954:	0e 94 9a 10 	call	0x2134	; 0x2134 <matrix_clear>
    clear_keyboard();
    3958:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <clear_keyboard>

0000395c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    395c:	1f 92       	push	r1
    395e:	1f b6       	in	r1, 0x3f	; 63
    3960:	1f 92       	push	r1
    3962:	11 24       	eor	r1, r1
    3964:	8f 93       	push	r24
    3966:	9f 93       	push	r25
    3968:	af 93       	push	r26
    396a:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    396c:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <wdt_timeout>
    3970:	81 11       	cpse	r24, r1
    3972:	13 c0       	rjmp	.+38     	; 0x399a <__vector_12+0x3e>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3974:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <timer_count>
    3978:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <timer_count+0x1>
    397c:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <timer_count+0x2>
    3980:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <timer_count+0x3>
    3984:	41 96       	adiw	r24, 0x11	; 17
    3986:	a1 1d       	adc	r26, r1
    3988:	b1 1d       	adc	r27, r1
    398a:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <timer_count>
    398e:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <timer_count+0x1>
    3992:	a0 93 6e 03 	sts	0x036E, r26	; 0x80036e <timer_count+0x2>
    3996:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <timer_count+0x3>
            break;
        default:
            ;
    }
}
    399a:	bf 91       	pop	r27
    399c:	af 91       	pop	r26
    399e:	9f 91       	pop	r25
    39a0:	8f 91       	pop	r24
    39a2:	1f 90       	pop	r1
    39a4:	1f be       	out	0x3f, r1	; 63
    39a6:	1f 90       	pop	r1
    39a8:	18 95       	reti

000039aa <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    39aa:	82 e0       	ldi	r24, 0x02	; 2
    39ac:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    39ae:	93 e0       	ldi	r25, 0x03	; 3
    39b0:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    39b2:	9a ef       	ldi	r25, 0xFA	; 250
    39b4:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    39b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
#else
    TIMSK = (1<<OCIE0A);
#endif
}
    39ba:	08 95       	ret

000039bc <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    39bc:	2f b7       	in	r18, 0x3f	; 63
    cli();
    39be:	f8 94       	cli
    t = timer_count;
    39c0:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <timer_count>
    39c4:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <timer_count+0x1>
    39c8:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <timer_count+0x2>
    39cc:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <timer_count+0x3>
    SREG = sreg;
    39d0:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    39d2:	08 95       	ret

000039d4 <timer_read32>:

inline
uint32_t timer_read32(void)
{
    39d4:	cf 93       	push	r28
    39d6:	df 93       	push	r29
    39d8:	00 d0       	rcall	.+0      	; 0x39da <timer_read32+0x6>
    39da:	00 d0       	rcall	.+0      	; 0x39dc <timer_read32+0x8>
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    uint32_t t;

    uint8_t sreg = SREG;
    39e0:	8f b7       	in	r24, 0x3f	; 63
    cli();
    39e2:	f8 94       	cli
    t = timer_count;
    39e4:	20 91 6c 03 	lds	r18, 0x036C	; 0x80036c <timer_count>
    39e8:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <timer_count+0x1>
    39ec:	40 91 6e 03 	lds	r20, 0x036E	; 0x80036e <timer_count+0x2>
    39f0:	50 91 6f 03 	lds	r21, 0x036F	; 0x80036f <timer_count+0x3>
    39f4:	29 83       	std	Y+1, r18	; 0x01
    39f6:	3a 83       	std	Y+2, r19	; 0x02
    39f8:	4b 83       	std	Y+3, r20	; 0x03
    39fa:	5c 83       	std	Y+4, r21	; 0x04
    SREG = sreg;
    39fc:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    39fe:	69 81       	ldd	r22, Y+1	; 0x01
    3a00:	7a 81       	ldd	r23, Y+2	; 0x02
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	9c 81       	ldd	r25, Y+4	; 0x04
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	0f 90       	pop	r0
    3a0c:	0f 90       	pop	r0
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	08 95       	ret

00003a14 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3a14:	1f 92       	push	r1
    3a16:	1f b6       	in	r1, 0x3f	; 63
    3a18:	1f 92       	push	r1
    3a1a:	11 24       	eor	r1, r1
    3a1c:	8f 93       	push	r24
    3a1e:	9f 93       	push	r25
    3a20:	af 93       	push	r26
    3a22:	bf 93       	push	r27
    timer_count++;
    3a24:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <timer_count>
    3a28:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <timer_count+0x1>
    3a2c:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <timer_count+0x2>
    3a30:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <timer_count+0x3>
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	a1 1d       	adc	r26, r1
    3a38:	b1 1d       	adc	r27, r1
    3a3a:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <timer_count>
    3a3e:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <timer_count+0x1>
    3a42:	a0 93 6e 03 	sts	0x036E, r26	; 0x80036e <timer_count+0x2>
    3a46:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <timer_count+0x3>
}
    3a4a:	bf 91       	pop	r27
    3a4c:	af 91       	pop	r26
    3a4e:	9f 91       	pop	r25
    3a50:	8f 91       	pop	r24
    3a52:	1f 90       	pop	r1
    3a54:	1f be       	out	0x3f, r1	; 63
    3a56:	1f 90       	pop	r1
    3a58:	18 95       	reti

00003a5a <bootloader_jump>:
    USB_Disable();
    3a5a:	0e 94 a7 0b 	call	0x174e	; 0x174e <USB_Disable>
    cli();
    3a5e:	f8 94       	cli
    *(volatile uint16_t *)0x0800 = 0x7777;
    3a60:	87 e7       	ldi	r24, 0x77	; 119
    3a62:	97 e7       	ldi	r25, 0x77	; 119
    3a64:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x47f>
    3a68:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x47e>
    reset_key = BOOTLOADER_RESET_KEY;
    3a6c:	87 e0       	ldi	r24, 0x07	; 7
    3a6e:	90 eb       	ldi	r25, 0xB0	; 176
    3a70:	dc 01       	movw	r26, r24
    3a72:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <reset_key>
    3a76:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <reset_key+0x1>
    3a7a:	a0 93 80 03 	sts	0x0380, r26	; 0x800380 <reset_key+0x2>
    3a7e:	b0 93 81 03 	sts	0x0381, r27	; 0x800381 <reset_key+0x3>
		__asm__ __volatile__ (
    3a82:	88 e1       	ldi	r24, 0x18	; 24
    3a84:	9c e0       	ldi	r25, 0x0C	; 12
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	a8 95       	wdr
    3a8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    for (;;);
    3a96:	ff cf       	rjmp	.-2      	; 0x3a96 <bootloader_jump+0x3c>

00003a98 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	08 95       	ret

00003a9e <action_function>:
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    (void)record;
    (void)id;
    (void)opt;
}
    3a9e:	08 95       	ret

00003aa0 <keymap_get_keycode>:
extern const uint8_t fn_keycode[];

__attribute__ ((weak))
uint8_t keymap_get_keycode(uint8_t layer, uint8_t row, uint8_t col)
{
    return pgm_read_byte(&keymaps[(layer)][(row)][(col)]);
    3aa0:	e6 2f       	mov	r30, r22
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	91 e1       	ldi	r25, 0x11	; 17
    3aa6:	89 9f       	mul	r24, r25
    3aa8:	e0 0d       	add	r30, r0
    3aaa:	f1 1d       	adc	r31, r1
    3aac:	11 24       	eor	r1, r1
    3aae:	83 e0       	ldi	r24, 0x03	; 3
    3ab0:	ee 0f       	add	r30, r30
    3ab2:	ff 1f       	adc	r31, r31
    3ab4:	8a 95       	dec	r24
    3ab6:	e1 f7       	brne	.-8      	; 0x3ab0 <keymap_get_keycode+0x10>
    3ab8:	e4 0f       	add	r30, r20
    3aba:	f1 1d       	adc	r31, r1
    3abc:	e4 55       	subi	r30, 0x54	; 84
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	84 91       	lpm	r24, Z
}
    3ac2:	08 95       	ret

00003ac4 <keymap_fn_layer>:

__attribute__ ((weak))
uint8_t keymap_fn_layer(uint8_t index)
{
    return pgm_read_byte(&fn_layer[index]);
    3ac4:	e8 2f       	mov	r30, r24
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	e4 5c       	subi	r30, 0xC4	; 196
    3aca:	fe 4f       	sbci	r31, 0xFE	; 254
    3acc:	84 91       	lpm	r24, Z
}
    3ace:	08 95       	ret

00003ad0 <keymap_fn_keycode>:

__attribute__ ((weak))
uint8_t keymap_fn_keycode(uint8_t index)
{
    return pgm_read_byte(&fn_keycode[index]);
    3ad0:	e8 2f       	mov	r30, r24
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	ec 5c       	subi	r30, 0xCC	; 204
    3ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad8:	84 91       	lpm	r24, Z
}
    3ada:	08 95       	ret

00003adc <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    3adc:	46 2f       	mov	r20, r22
    3ade:	67 2f       	mov	r22, r23
    return keymap_get_keycode(layer, key.row, key.col);
    3ae0:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <keymap_get_keycode>

00003ae4 <keymap_fn_to_action>:


/* Legacy keymap support */
__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	d8 2f       	mov	r29, r24
    switch (keycode) {
    3aea:	28 2f       	mov	r18, r24
    3aec:	20 5c       	subi	r18, 0xC0	; 192
    3aee:	33 0b       	sbc	r19, r19
    3af0:	20 32       	cpi	r18, 0x20	; 32
    3af2:	31 05       	cpc	r19, r1
    3af4:	a8 f4       	brcc	.+42     	; 0x3b20 <keymap_fn_to_action+0x3c>
        case KC_FN0 ... KC_FN31:
            {
                uint8_t layer = keymap_fn_layer(FN_INDEX(keycode));
    3af6:	d0 5c       	subi	r29, 0xC0	; 192
    3af8:	8d 2f       	mov	r24, r29
    3afa:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <keymap_fn_layer>
    3afe:	c8 2f       	mov	r28, r24
                uint8_t key = keymap_fn_keycode(FN_INDEX(keycode));
    3b00:	8d 2f       	mov	r24, r29
    3b02:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <keymap_fn_keycode>
                if (key) {
    3b06:	d0 e0       	ldi	r29, 0x00	; 0
    3b08:	88 23       	and	r24, r24
    3b0a:	29 f0       	breq	.+10     	; 0x3b16 <keymap_fn_to_action+0x32>
                    return (action_t)ACTION_LAYER_TAP_KEY(layer, key);
    3b0c:	9c 2f       	mov	r25, r28
    3b0e:	90 6a       	ori	r25, 0xA0	; 160
            }
            return (action_t)ACTION_NO;
        default:
            return (action_t)ACTION_NO;
    }
}
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	08 95       	ret
                    return (action_t)ACTION_LAYER_MOMENTARY(layer);
    3b16:	9c 2f       	mov	r25, r28
    3b18:	88 27       	eor	r24, r24
    3b1a:	81 6f       	ori	r24, 0xF1	; 241
    3b1c:	90 6a       	ori	r25, 0xA0	; 160
    3b1e:	f8 cf       	rjmp	.-16     	; 0x3b10 <keymap_fn_to_action+0x2c>
            return (action_t)ACTION_NO;
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	f5 cf       	rjmp	.-22     	; 0x3b10 <keymap_fn_to_action+0x2c>

00003b26 <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3b26:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <keymap_key_to_keycode>
    switch (keycode) {
    3b2a:	28 2f       	mov	r18, r24
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	a9 01       	movw	r20, r18
    3b30:	40 5c       	subi	r20, 0xC0	; 192
    3b32:	51 09       	sbc	r21, r1
    3b34:	40 32       	cpi	r20, 0x20	; 32
    3b36:	51 05       	cpc	r21, r1
    3b38:	10 f4       	brcc	.+4      	; 0x3b3e <action_for_key+0x18>
            return keymap_fn_to_action(keycode);
    3b3a:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <keymap_fn_to_action>
    switch (keycode) {
    3b3e:	8d 3b       	cpi	r24, 0xBD	; 189
    3b40:	d0 f4       	brcc	.+52     	; 0x3b76 <action_for_key+0x50>
    3b42:	88 3a       	cpi	r24, 0xA8	; 168
    3b44:	38 f5       	brcc	.+78     	; 0x3b94 <action_for_key+0x6e>
    3b46:	85 3a       	cpi	r24, 0xA5	; 165
    3b48:	58 f4       	brcc	.+22     	; 0x3b60 <action_for_key+0x3a>
    3b4a:	84 30       	cpi	r24, 0x04	; 4
    3b4c:	38 f4       	brcc	.+14     	; 0x3b5c <action_for_key+0x36>
    3b4e:	41 e0       	ldi	r20, 0x01	; 1
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <action_for_key+0x32>
    3b56:	40 e0       	ldi	r20, 0x00	; 0
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3b58:	24 2f       	mov	r18, r20
    3b5a:	39 2f       	mov	r19, r25
}
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	08 95       	ret
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3b60:	21 e8       	ldi	r18, 0x81	; 129
    3b62:	30 e4       	ldi	r19, 0x40	; 64
    3b64:	85 3a       	cpi	r24, 0xA5	; 165
    3b66:	d1 f3       	breq	.-12     	; 0x3b5c <action_for_key+0x36>
    3b68:	22 e8       	ldi	r18, 0x82	; 130
    3b6a:	30 e4       	ldi	r19, 0x40	; 64
    3b6c:	86 3a       	cpi	r24, 0xA6	; 166
    3b6e:	b1 f3       	breq	.-20     	; 0x3b5c <action_for_key+0x36>
    3b70:	23 e8       	ldi	r18, 0x83	; 131
    3b72:	30 e4       	ldi	r19, 0x40	; 64
    3b74:	f3 cf       	rjmp	.-26     	; 0x3b5c <action_for_key+0x36>
    switch (keycode) {
    3b76:	88 3e       	cpi	r24, 0xE8	; 232
    3b78:	48 f4       	brcc	.+18     	; 0x3b8c <action_for_key+0x66>
    3b7a:	80 3e       	cpi	r24, 0xE0	; 224
    3b7c:	78 f7       	brcc	.-34     	; 0x3b5c <action_for_key+0x36>
            return (action_t)ACTION_COMMAND(COMMAND_BOOTLOADER, 0);
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 ee       	ldi	r19, 0xE0	; 224
    switch (keycode) {
    3b82:	8f 3b       	cpi	r24, 0xBF	; 191
    3b84:	59 f3       	breq	.-42     	; 0x3b5c <action_for_key+0x36>
            return (action_t)ACTION_NO;
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	e8 cf       	rjmp	.-48     	; 0x3b5c <action_for_key+0x36>
            return (action_t)ACTION_MOUSEKEY(keycode);
    3b8c:	30 65       	ori	r19, 0x50	; 80
    switch (keycode) {
    3b8e:	80 3f       	cpi	r24, 0xF0	; 240
    3b90:	28 f7       	brcc	.-54     	; 0x3b5c <action_for_key+0x36>
    3b92:	f9 cf       	rjmp	.-14     	; 0x3b86 <action_for_key+0x60>
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3b94:	22 ee       	ldi	r18, 0xE2	; 226
    3b96:	34 e4       	ldi	r19, 0x44	; 68
    3b98:	88 3a       	cpi	r24, 0xA8	; 168
    3b9a:	01 f3       	breq	.-64     	; 0x3b5c <action_for_key+0x36>
    3b9c:	29 ee       	ldi	r18, 0xE9	; 233
    3b9e:	34 e4       	ldi	r19, 0x44	; 68
    3ba0:	89 3a       	cpi	r24, 0xA9	; 169
    3ba2:	e1 f2       	breq	.-72     	; 0x3b5c <action_for_key+0x36>
    3ba4:	2a ee       	ldi	r18, 0xEA	; 234
    3ba6:	34 e4       	ldi	r19, 0x44	; 68
    3ba8:	8a 3a       	cpi	r24, 0xAA	; 170
    3baa:	c1 f2       	breq	.-80     	; 0x3b5c <action_for_key+0x36>
    3bac:	25 eb       	ldi	r18, 0xB5	; 181
    3bae:	34 e4       	ldi	r19, 0x44	; 68
    3bb0:	8b 3a       	cpi	r24, 0xAB	; 171
    3bb2:	a1 f2       	breq	.-88     	; 0x3b5c <action_for_key+0x36>
    3bb4:	26 eb       	ldi	r18, 0xB6	; 182
    3bb6:	34 e4       	ldi	r19, 0x44	; 68
    3bb8:	8c 3a       	cpi	r24, 0xAC	; 172
    3bba:	81 f2       	breq	.-96     	; 0x3b5c <action_for_key+0x36>
    3bbc:	23 eb       	ldi	r18, 0xB3	; 179
    3bbe:	34 e4       	ldi	r19, 0x44	; 68
    3bc0:	8d 3a       	cpi	r24, 0xAD	; 173
    3bc2:	61 f2       	breq	.-104    	; 0x3b5c <action_for_key+0x36>
    3bc4:	24 eb       	ldi	r18, 0xB4	; 180
    3bc6:	34 e4       	ldi	r19, 0x44	; 68
    3bc8:	8e 3a       	cpi	r24, 0xAE	; 174
    3bca:	41 f2       	breq	.-112    	; 0x3b5c <action_for_key+0x36>
    3bcc:	27 eb       	ldi	r18, 0xB7	; 183
    3bce:	34 e4       	ldi	r19, 0x44	; 68
    3bd0:	8f 3a       	cpi	r24, 0xAF	; 175
    3bd2:	21 f2       	breq	.-120    	; 0x3b5c <action_for_key+0x36>
    3bd4:	2c ec       	ldi	r18, 0xCC	; 204
    3bd6:	34 e4       	ldi	r19, 0x44	; 68
    3bd8:	81 3b       	cpi	r24, 0xB1	; 177
    3bda:	09 f4       	brne	.+2      	; 0x3bde <action_for_key+0xb8>
    3bdc:	bf cf       	rjmp	.-130    	; 0x3b5c <action_for_key+0x36>
    3bde:	2d ec       	ldi	r18, 0xCD	; 205
    3be0:	34 e4       	ldi	r19, 0x44	; 68
    3be2:	80 3b       	cpi	r24, 0xB0	; 176
    3be4:	09 f4       	brne	.+2      	; 0x3be8 <action_for_key+0xc2>
    3be6:	ba cf       	rjmp	.-140    	; 0x3b5c <action_for_key+0x36>
    3be8:	23 e8       	ldi	r18, 0x83	; 131
    3bea:	35 e4       	ldi	r19, 0x45	; 69
    3bec:	82 3b       	cpi	r24, 0xB2	; 178
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <action_for_key+0xcc>
    3bf0:	b5 cf       	rjmp	.-150    	; 0x3b5c <action_for_key+0x36>
    3bf2:	2a e8       	ldi	r18, 0x8A	; 138
    3bf4:	35 e4       	ldi	r19, 0x45	; 69
    3bf6:	83 3b       	cpi	r24, 0xB3	; 179
    3bf8:	09 f4       	brne	.+2      	; 0x3bfc <action_for_key+0xd6>
    3bfa:	b0 cf       	rjmp	.-160    	; 0x3b5c <action_for_key+0x36>
    3bfc:	22 e9       	ldi	r18, 0x92	; 146
    3bfe:	35 e4       	ldi	r19, 0x45	; 69
    3c00:	84 3b       	cpi	r24, 0xB4	; 180
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <action_for_key+0xe0>
    3c04:	ab cf       	rjmp	.-170    	; 0x3b5c <action_for_key+0x36>
    3c06:	24 e9       	ldi	r18, 0x94	; 148
    3c08:	35 e4       	ldi	r19, 0x45	; 69
    3c0a:	85 3b       	cpi	r24, 0xB5	; 181
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <action_for_key+0xea>
    3c0e:	a6 cf       	rjmp	.-180    	; 0x3b5c <action_for_key+0x36>
    3c10:	21 e2       	ldi	r18, 0x21	; 33
    3c12:	36 e4       	ldi	r19, 0x46	; 70
    3c14:	86 3b       	cpi	r24, 0xB6	; 182
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <action_for_key+0xf4>
    3c18:	a1 cf       	rjmp	.-190    	; 0x3b5c <action_for_key+0x36>
    3c1a:	23 e2       	ldi	r18, 0x23	; 35
    3c1c:	36 e4       	ldi	r19, 0x46	; 70
    3c1e:	87 3b       	cpi	r24, 0xB7	; 183
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <action_for_key+0xfe>
    3c22:	9c cf       	rjmp	.-200    	; 0x3b5c <action_for_key+0x36>
    3c24:	24 e2       	ldi	r18, 0x24	; 36
    3c26:	36 e4       	ldi	r19, 0x46	; 70
    3c28:	88 3b       	cpi	r24, 0xB8	; 184
    3c2a:	09 f4       	brne	.+2      	; 0x3c2e <action_for_key+0x108>
    3c2c:	97 cf       	rjmp	.-210    	; 0x3b5c <action_for_key+0x36>
    3c2e:	25 e2       	ldi	r18, 0x25	; 37
    3c30:	36 e4       	ldi	r19, 0x46	; 70
    3c32:	89 3b       	cpi	r24, 0xB9	; 185
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <action_for_key+0x112>
    3c36:	92 cf       	rjmp	.-220    	; 0x3b5c <action_for_key+0x36>
    3c38:	26 e2       	ldi	r18, 0x26	; 38
    3c3a:	36 e4       	ldi	r19, 0x46	; 70
    3c3c:	8a 3b       	cpi	r24, 0xBA	; 186
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <action_for_key+0x11c>
    3c40:	8d cf       	rjmp	.-230    	; 0x3b5c <action_for_key+0x36>
    3c42:	27 e2       	ldi	r18, 0x27	; 39
    3c44:	36 e4       	ldi	r19, 0x46	; 70
    3c46:	8b 3b       	cpi	r24, 0xBB	; 187
    3c48:	09 f4       	brne	.+2      	; 0x3c4c <action_for_key+0x126>
    3c4a:	88 cf       	rjmp	.-240    	; 0x3b5c <action_for_key+0x36>
    3c4c:	2a e2       	ldi	r18, 0x2A	; 42
    3c4e:	36 e4       	ldi	r19, 0x46	; 70
    3c50:	8c 3b       	cpi	r24, 0xBC	; 188
    3c52:	09 f4       	brne	.+2      	; 0x3c56 <action_for_key+0x130>
    3c54:	83 cf       	rjmp	.-250    	; 0x3b5c <action_for_key+0x36>
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	34 e4       	ldi	r19, 0x44	; 68
    3c5a:	80 cf       	rjmp	.-256    	; 0x3b5c <action_for_key+0x36>

00003c5c <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <switch_default_layer+0x6>
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <switch_default_layer+0x8>
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	89 83       	std	Y+1, r24	; 0x01
    xprintf("L%d\n", layer);
    3c6a:	1f 92       	push	r1
    3c6c:	8f 93       	push	r24
    3c6e:	8e eb       	ldi	r24, 0xBE	; 190
    3c70:	93 e0       	ldi	r25, 0x03	; 3
    3c72:	9f 93       	push	r25
    3c74:	8f 93       	push	r24
    3c76:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
    default_layer_set(1UL<<layer);
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	a0 e0       	ldi	r26, 0x00	; 0
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	9c 01       	movw	r18, r24
    3c84:	ad 01       	movw	r20, r26
    3c86:	09 80       	ldd	r0, Y+1	; 0x01
    3c88:	04 c0       	rjmp	.+8      	; 0x3c92 <switch_default_layer+0x36>
    3c8a:	22 0f       	add	r18, r18
    3c8c:	33 1f       	adc	r19, r19
    3c8e:	44 1f       	adc	r20, r20
    3c90:	55 1f       	adc	r21, r21
    3c92:	0a 94       	dec	r0
    3c94:	d2 f7       	brpl	.-12     	; 0x3c8a <switch_default_layer+0x2e>
    3c96:	29 83       	std	Y+1, r18	; 0x01
    3c98:	3a 83       	std	Y+2, r19	; 0x02
    3c9a:	4b 83       	std	Y+3, r20	; 0x03
    3c9c:	5c 83       	std	Y+4, r21	; 0x04
    3c9e:	ca 01       	movw	r24, r20
    3ca0:	b9 01       	movw	r22, r18
    3ca2:	0e 94 27 19 	call	0x324e	; 0x324e <default_layer_set>
    clear_keyboard();
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
}
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    clear_keyboard();
    3cba:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <clear_keyboard>

00003cbe <command_common>:
    switch (code) {
    3cbe:	8a 32       	cpi	r24, 0x2A	; 42
    3cc0:	58 f4       	brcc	.+22     	; 0x3cd8 <command_common+0x1a>
    3cc2:	86 30       	cpi	r24, 0x06	; 6
    3cc4:	98 f0       	brcs	.+38     	; 0x3cec <command_common+0x2e>
    3cc6:	ea ef       	ldi	r30, 0xFA	; 250
    3cc8:	e8 0f       	add	r30, r24
    3cca:	e4 32       	cpi	r30, 0x24	; 36
    3ccc:	78 f4       	brcc	.+30     	; 0x3cec <command_common+0x2e>
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	e0 54       	subi	r30, 0x40	; 64
    3cd2:	f0 4e       	sbci	r31, 0xE0	; 224
    3cd4:	0c 94 97 1f 	jmp	0x3f2e	; 0x3f2e <__tablejump2__>
    3cd8:	83 34       	cpi	r24, 0x43	; 67
    3cda:	70 f4       	brcc	.+28     	; 0x3cf8 <command_common+0x3a>
    3cdc:	8a 33       	cpi	r24, 0x3A	; 58
    3cde:	08 f0       	brcs	.+2      	; 0x3ce2 <command_common+0x24>
    3ce0:	d3 c0       	rjmp	.+422    	; 0x3e88 <command_common+0x1ca>
    3ce2:	85 33       	cpi	r24, 0x35	; 53
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <command_common+0x2a>
    3ce6:	ca c0       	rjmp	.+404    	; 0x3e7c <command_common+0x1be>
    3ce8:	88 33       	cpi	r24, 0x38	; 56
    3cea:	f1 f0       	breq	.+60     	; 0x3d28 <command_common+0x6a>
            print("?");
    3cec:	81 e7       	ldi	r24, 0x71	; 113
    3cee:	94 e0       	ldi	r25, 0x04	; 4
    3cf0:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            return false;
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
}
    3cf6:	08 95       	ret
    switch (code) {
    3cf8:	83 34       	cpi	r24, 0x43	; 67
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <command_common+0x40>
    3cfc:	bf c0       	rjmp	.+382    	; 0x3e7c <command_common+0x1be>
    3cfe:	88 34       	cpi	r24, 0x48	; 72
    3d00:	a9 f7       	brne	.-22     	; 0x3cec <command_common+0x2e>
            clear_keyboard();
    3d02:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <clear_keyboard>
            print("\n\nbootloader... ");
    3d06:	82 e6       	ldi	r24, 0x62	; 98
    3d08:	96 e0       	ldi	r25, 0x06	; 6
    3d0a:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
	__builtin_avr_delay_cycles(__ticks_dc);
    3d0e:	2f ef       	ldi	r18, 0xFF	; 255
    3d10:	83 ed       	ldi	r24, 0xD3	; 211
    3d12:	90 e3       	ldi	r25, 0x30	; 48
    3d14:	21 50       	subi	r18, 0x01	; 1
    3d16:	80 40       	sbci	r24, 0x00	; 0
    3d18:	90 40       	sbci	r25, 0x00	; 0
    3d1a:	e1 f7       	brne	.-8      	; 0x3d14 <command_common+0x56>
    3d1c:	00 c0       	rjmp	.+0      	; 0x3d1e <command_common+0x60>
    3d1e:	00 00       	nop
            bootloader_jump(); // not return
    3d20:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <bootloader_jump>
    return true;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
            break;
    3d26:	08 95       	ret
    print("\n\t- Magic -\n"
    3d28:	8e ed       	ldi	r24, 0xDE	; 222
    3d2a:	93 e0       	ldi	r25, 0x03	; 3
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    3d2c:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            break;
    3d30:	f9 cf       	rjmp	.-14     	; 0x3d24 <command_common+0x66>
            debug_enable   = false;
    3d32:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    3d36:	80 7f       	andi	r24, 0xF0	; 240
    3d38:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <debug_config>
    print("\n\t- Console -\n"
    3d3c:	83 ec       	ldi	r24, 0xC3	; 195
    3d3e:	93 e0       	ldi	r25, 0x03	; 3
    3d40:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            print("C> ");
    3d44:	83 e7       	ldi	r24, 0x73	; 115
    3d46:	96 e0       	ldi	r25, 0x06	; 6
    3d48:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            command_state = CONSOLE;
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <command_state>
            break;
    3d52:	08 95       	ret
            if (debug_enable) {
    3d54:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    3d58:	80 ff       	sbrs	r24, 0
    3d5a:	0a c0       	rjmp	.+20     	; 0x3d70 <command_common+0xb2>
                print("\ndebug: off\n");
    3d5c:	85 e5       	ldi	r24, 0x55	; 85
    3d5e:	96 e0       	ldi	r25, 0x06	; 6
    3d60:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                debug_enable   = false;
    3d64:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    3d68:	80 7f       	andi	r24, 0xF0	; 240
                debug_enable = true;
    3d6a:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <debug_config>
    3d6e:	da cf       	rjmp	.-76     	; 0x3d24 <command_common+0x66>
                print("\ndebug: on\n");
    3d70:	89 e4       	ldi	r24, 0x49	; 73
    3d72:	96 e0       	ldi	r25, 0x06	; 6
                print("\nmouse: on\n");
    3d74:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                debug_enable = true;
    3d78:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <debug_config>
    3d7c:	81 60       	ori	r24, 0x01	; 1
    3d7e:	f5 cf       	rjmp	.-22     	; 0x3d6a <command_common+0xac>
            debug_matrix = !debug_matrix;
    3d80:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <debug_config>
    3d84:	89 2f       	mov	r24, r25
    3d86:	8d 7f       	andi	r24, 0xFD	; 253
    3d88:	91 ff       	sbrs	r25, 1
    3d8a:	82 60       	ori	r24, 0x02	; 2
    3d8c:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <debug_config>
            if (debug_matrix) {
    3d90:	81 ff       	sbrs	r24, 1
    3d92:	03 c0       	rjmp	.+6      	; 0x3d9a <command_common+0xdc>
                print("\nmatrix: on\n");
    3d94:	8c e3       	ldi	r24, 0x3C	; 60
    3d96:	96 e0       	ldi	r25, 0x06	; 6
    3d98:	ed cf       	rjmp	.-38     	; 0x3d74 <command_common+0xb6>
                print("\nmatrix: off\n");
    3d9a:	8e e2       	ldi	r24, 0x2E	; 46
    3d9c:	96 e0       	ldi	r25, 0x06	; 6
    3d9e:	c6 cf       	rjmp	.-116    	; 0x3d2c <command_common+0x6e>
            debug_keyboard = !debug_keyboard;
    3da0:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <debug_config>
    3da4:	89 2f       	mov	r24, r25
    3da6:	8b 7f       	andi	r24, 0xFB	; 251
    3da8:	92 ff       	sbrs	r25, 2
    3daa:	84 60       	ori	r24, 0x04	; 4
    3dac:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <debug_config>
            if (debug_keyboard) {
    3db0:	82 ff       	sbrs	r24, 2
    3db2:	03 c0       	rjmp	.+6      	; 0x3dba <command_common+0xfc>
                print("\nkeyboard: on\n");
    3db4:	8f e1       	ldi	r24, 0x1F	; 31
    3db6:	96 e0       	ldi	r25, 0x06	; 6
    3db8:	dd cf       	rjmp	.-70     	; 0x3d74 <command_common+0xb6>
                print("\nkeyboard: off\n");
    3dba:	8f e0       	ldi	r24, 0x0F	; 15
    3dbc:	96 e0       	ldi	r25, 0x06	; 6
    3dbe:	b6 cf       	rjmp	.-148    	; 0x3d2c <command_common+0x6e>
            debug_mouse = !debug_mouse;
    3dc0:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <debug_config>
    3dc4:	89 2f       	mov	r24, r25
    3dc6:	87 7f       	andi	r24, 0xF7	; 247
    3dc8:	93 ff       	sbrs	r25, 3
    3dca:	88 60       	ori	r24, 0x08	; 8
    3dcc:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <debug_config>
            if (debug_mouse) {
    3dd0:	83 ff       	sbrs	r24, 3
    3dd2:	03 c0       	rjmp	.+6      	; 0x3dda <command_common+0x11c>
                print("\nmouse: on\n");
    3dd4:	83 e0       	ldi	r24, 0x03	; 3
    3dd6:	96 e0       	ldi	r25, 0x06	; 6
    3dd8:	cd cf       	rjmp	.-102    	; 0x3d74 <command_common+0xb6>
                print("\nmouse: off\n");
    3dda:	86 ef       	ldi	r24, 0xF6	; 246
    3ddc:	95 e0       	ldi	r25, 0x05	; 5
    3dde:	a6 cf       	rjmp	.-180    	; 0x3d2c <command_common+0x6e>
            print("\n\t- Version -\n");
    3de0:	87 ee       	ldi	r24, 0xE7	; 231
    3de2:	95 e0       	ldi	r25, 0x05	; 5
    3de4:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    3de8:	80 eb       	ldi	r24, 0xB0	; 176
    3dea:	95 e0       	ldi	r25, 0x05	; 5
    3dec:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    3df0:	83 e5       	ldi	r24, 0x53	; 83
    3df2:	95 e0       	ldi	r25, 0x05	; 5
    3df4:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            print("BUILD: " STR(TMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
    3df8:	8b e2       	ldi	r24, 0x2B	; 43
    3dfa:	95 e0       	ldi	r25, 0x05	; 5
    3dfc:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            print("OPTIONS:"
    3e00:	87 e0       	ldi	r24, 0x07	; 7
    3e02:	95 e0       	ldi	r25, 0x05	; 5
    3e04:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    3e08:	8c ed       	ldi	r24, 0xDC	; 220
    3e0a:	94 e0       	ldi	r25, 0x04	; 4
    3e0c:	8f cf       	rjmp	.-226    	; 0x3d2c <command_common+0x6e>
            print("\n\t- Status -\n");
    3e0e:	8e ec       	ldi	r24, 0xCE	; 206
    3e10:	94 e0       	ldi	r25, 0x04	; 4
    3e12:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
            print_val_hex8(host_keyboard_leds());
    3e16:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <host_keyboard_leds>
    3e1a:	1f 92       	push	r1
    3e1c:	8f 93       	push	r24
    3e1e:	84 eb       	ldi	r24, 0xB4	; 180
    3e20:	94 e0       	ldi	r25, 0x04	; 4
    3e22:	9f 93       	push	r25
    3e24:	8f 93       	push	r24
    3e26:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
            print_val_hex8(keyboard_protocol);
    3e2a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <keyboard_protocol>
    3e2e:	1f 92       	push	r1
    3e30:	8f 93       	push	r24
    3e32:	8d e9       	ldi	r24, 0x9D	; 157
    3e34:	94 e0       	ldi	r25, 0x04	; 4
    3e36:	9f 93       	push	r25
    3e38:	8f 93       	push	r24
    3e3a:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
            print_val_hex8(keyboard_idle);
    3e3e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <keyboard_idle>
    3e42:	1f 92       	push	r1
    3e44:	8f 93       	push	r24
    3e46:	8a e8       	ldi	r24, 0x8A	; 138
    3e48:	94 e0       	ldi	r25, 0x04	; 4
    3e4a:	9f 93       	push	r25
    3e4c:	8f 93       	push	r24
    3e4e:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
            print_val_hex32(timer_read32());
    3e52:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <timer_read32>
    3e56:	9f 93       	push	r25
    3e58:	8f 93       	push	r24
    3e5a:	7f 93       	push	r23
    3e5c:	6f 93       	push	r22
    3e5e:	83 e7       	ldi	r24, 0x73	; 115
    3e60:	94 e0       	ldi	r25, 0x04	; 4
    3e62:	9f 93       	push	r25
    3e64:	8f 93       	push	r24
    3e66:	0e 94 2b 04 	call	0x856	; 0x856 <__xprintf>
            break;
    3e6a:	8d b7       	in	r24, 0x3d	; 61
    3e6c:	9e b7       	in	r25, 0x3e	; 62
    3e6e:	42 96       	adiw	r24, 0x12	; 18
    3e70:	0f b6       	in	r0, 0x3f	; 63
    3e72:	f8 94       	cli
    3e74:	9e bf       	out	0x3e, r25	; 62
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	8d bf       	out	0x3d, r24	; 61
    3e7a:	54 cf       	rjmp	.-344    	; 0x3d24 <command_common+0x66>
            switch_default_layer(0);
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    3e7e:	0e 94 2e 1e 	call	0x3c5c	; 0x3c5c <switch_default_layer>
            break;
    3e82:	50 cf       	rjmp	.-352    	; 0x3d24 <command_common+0x66>
            switch_default_layer((code - KC_1) + 1);
    3e84:	8d 51       	subi	r24, 0x1D	; 29
    3e86:	fb cf       	rjmp	.-10     	; 0x3e7e <command_common+0x1c0>
            switch_default_layer((code - KC_F1) + 1);
    3e88:	89 53       	subi	r24, 0x39	; 57
    3e8a:	f9 cf       	rjmp	.-14     	; 0x3e7e <command_common+0x1c0>

00003e8c <command_extra>:
}
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	08 95       	ret

00003e90 <command_console_extra>:
    3e90:	0c 94 46 1f 	jmp	0x3e8c	; 0x3e8c <command_extra>

00003e94 <command_proc>:
{
    3e94:	cf 93       	push	r28
    3e96:	c8 2f       	mov	r28, r24
    switch (command_state) {
    3e98:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <command_state>
    3e9c:	88 23       	and	r24, r24
    3e9e:	31 f0       	breq	.+12     	; 0x3eac <command_proc+0x18>
    3ea0:	81 30       	cpi	r24, 0x01	; 1
    3ea2:	c1 f0       	breq	.+48     	; 0x3ed4 <command_proc+0x40>
            command_state = ONESHOT;
    3ea4:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <command_state>
                return false;
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	12 c0       	rjmp	.+36     	; 0x3ed0 <command_proc+0x3c>
            if (!IS_COMMAND())
    3eac:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3eb0:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3eb4:	80 81       	ld	r24, Z
    3eb6:	82 32       	cpi	r24, 0x22	; 34
    3eb8:	11 f0       	breq	.+4      	; 0x3ebe <command_proc+0x2a>
    3eba:	80 35       	cpi	r24, 0x50	; 80
    3ebc:	a9 f7       	brne	.-22     	; 0x3ea8 <command_proc+0x14>
                return (command_extra(code) || command_common(code));
    3ebe:	8c 2f       	mov	r24, r28
    3ec0:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <command_extra>
    3ec4:	81 11       	cpse	r24, r1
    3ec6:	20 c0       	rjmp	.+64     	; 0x3f08 <command_proc+0x74>
    3ec8:	8c 2f       	mov	r24, r28
    3eca:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <command_common>
                return (command_console_extra(code) || command_console(code));
    3ece:	81 70       	andi	r24, 0x01	; 1
}
    3ed0:	cf 91       	pop	r28
    3ed2:	08 95       	ret
            if (IS_COMMAND())
    3ed4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <keyboard_report>
    3ed8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <keyboard_report+0x1>
    3edc:	80 81       	ld	r24, Z
    3ede:	82 32       	cpi	r24, 0x22	; 34
    3ee0:	71 f3       	breq	.-36     	; 0x3ebe <command_proc+0x2a>
    3ee2:	80 35       	cpi	r24, 0x50	; 80
    3ee4:	61 f3       	breq	.-40     	; 0x3ebe <command_proc+0x2a>
                return (command_console_extra(code) || command_console(code));
    3ee6:	8c 2f       	mov	r24, r28
    3ee8:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <command_console_extra>
    3eec:	81 11       	cpse	r24, r1
    3eee:	19 c0       	rjmp	.+50     	; 0x3f22 <command_proc+0x8e>
    switch (code) {
    3ef0:	c9 32       	cpi	r28, 0x29	; 41
    3ef2:	c9 f0       	breq	.+50     	; 0x3f26 <command_proc+0x92>
    3ef4:	60 f4       	brcc	.+24     	; 0x3f0e <command_proc+0x7a>
    3ef6:	cb 30       	cpi	r28, 0x0B	; 11
    3ef8:	61 f0       	breq	.+24     	; 0x3f12 <command_proc+0x7e>
    3efa:	c4 31       	cpi	r28, 0x14	; 20
    3efc:	a1 f0       	breq	.+40     	; 0x3f26 <command_proc+0x92>
            print("?");
    3efe:	88 eb       	ldi	r24, 0xB8	; 184
    3f00:	93 e0       	ldi	r25, 0x03	; 3
    3f02:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
    3f06:	11 c0       	rjmp	.+34     	; 0x3f2a <command_proc+0x96>
                return (command_extra(code) || command_common(code));
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	e0 cf       	rjmp	.-64     	; 0x3ece <command_proc+0x3a>
    switch (code) {
    3f0e:	c8 33       	cpi	r28, 0x38	; 56
    3f10:	b1 f7       	brne	.-20     	; 0x3efe <command_proc+0x6a>
    print("\n\t- Console -\n"
    3f12:	83 ec       	ldi	r24, 0xC3	; 195
    3f14:	93 e0       	ldi	r25, 0x03	; 3
    3f16:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
    print("C> ");
    3f1a:	8a eb       	ldi	r24, 0xBA	; 186
    3f1c:	93 e0       	ldi	r25, 0x03	; 3
    3f1e:	0e 94 92 03 	call	0x724	; 0x724 <xputs>
                return (command_console_extra(code) || command_console(code));
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	d4 cf       	rjmp	.-88     	; 0x3ece <command_proc+0x3a>
            command_state = ONESHOT;
    3f26:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <command_state>
                return (command_console_extra(code) || command_console(code));
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	d0 cf       	rjmp	.-96     	; 0x3ece <command_proc+0x3a>

00003f2e <__tablejump2__>:
    3f2e:	ee 0f       	add	r30, r30
    3f30:	ff 1f       	adc	r31, r31
    3f32:	05 90       	lpm	r0, Z+
    3f34:	f4 91       	lpm	r31, Z
    3f36:	e0 2d       	mov	r30, r0
    3f38:	09 94       	ijmp

00003f3a <_exit>:
    3f3a:	f8 94       	cli

00003f3c <__stop_program>:
    3f3c:	ff cf       	rjmp	.-2      	; 0x3f3c <__stop_program>
    3f3e:	73 04       	cpc	r7, r3
    3f40:	8c 04       	cpc	r8, r12
    3f42:	a8 04       	cpc	r10, r8
    3f44:	ac 04       	cpc	r10, r12
    3f46:	b8 04       	cpc	r11, r8
    3f48:	cf 04       	cpc	r12, r15
    3f4a:	24 05       	cpc	r18, r4
    3f4c:	7e 0a       	sbc	r7, r30
    3f4e:	a6 0a       	sbc	r10, r22
    3f50:	8f 0b       	sbc	r24, r31
    3f52:	a6 0a       	sbc	r10, r22
    3f54:	8f 0b       	sbc	r24, r31
    3f56:	d9 0a       	sbc	r13, r25
    3f58:	fa 0a       	sbc	r15, r26
    3f5a:	8f 0b       	sbc	r24, r31
    3f5c:	51 0b       	sbc	r21, r17
    3f5e:	5d 0b       	sbc	r21, r29
    3f60:	30 12       	cpse	r3, r16
    3f62:	30 12       	cpse	r3, r16
    3f64:	6e 12       	cpse	r6, r30
    3f66:	6e 12       	cpse	r6, r30
    3f68:	1f 12       	cpse	r1, r31
    3f6a:	1f 12       	cpse	r1, r31
    3f6c:	1f 12       	cpse	r1, r31
    3f6e:	1f 12       	cpse	r1, r31
    3f70:	f7 12       	cpse	r15, r23
    3f72:	1f 12       	cpse	r1, r31
    3f74:	19 14       	cp	r1, r9
    3f76:	19 14       	cp	r1, r9
    3f78:	c3 14       	cp	r12, r3
    3f7a:	1f 12       	cpse	r1, r31
    3f7c:	db 14       	cp	r13, r11
    3f7e:	fd 14       	cp	r15, r13
    3f80:	99 1e       	adc	r9, r25
    3f82:	aa 1e       	adc	r10, r26
    3f84:	76 1e       	adc	r7, r22
    3f86:	76 1e       	adc	r7, r22
    3f88:	76 1e       	adc	r7, r22
    3f8a:	94 1e       	adc	r9, r20
    3f8c:	76 1e       	adc	r7, r22
    3f8e:	76 1e       	adc	r7, r22
    3f90:	d0 1e       	adc	r13, r16
    3f92:	76 1e       	adc	r7, r22
    3f94:	e0 1e       	adc	r14, r16
    3f96:	76 1e       	adc	r7, r22
    3f98:	76 1e       	adc	r7, r22
    3f9a:	76 1e       	adc	r7, r22
    3f9c:	76 1e       	adc	r7, r22
    3f9e:	76 1e       	adc	r7, r22
    3fa0:	07 1f       	adc	r16, r23
    3fa2:	76 1e       	adc	r7, r22
    3fa4:	76 1e       	adc	r7, r22
    3fa6:	f0 1e       	adc	r15, r16
    3fa8:	76 1e       	adc	r7, r22
    3faa:	c0 1e       	adc	r12, r16
    3fac:	76 1e       	adc	r7, r22
    3fae:	76 1e       	adc	r7, r22
    3fb0:	42 1f       	adc	r20, r18
    3fb2:	42 1f       	adc	r20, r18
    3fb4:	42 1f       	adc	r20, r18
    3fb6:	42 1f       	adc	r20, r18
    3fb8:	42 1f       	adc	r20, r18
    3fba:	42 1f       	adc	r20, r18
    3fbc:	42 1f       	adc	r20, r18
    3fbe:	42 1f       	adc	r20, r18
    3fc0:	42 1f       	adc	r20, r18
    3fc2:	3e 1f       	adc	r19, r30
    3fc4:	76 1e       	adc	r7, r22
    3fc6:	3e 1f       	adc	r19, r30
