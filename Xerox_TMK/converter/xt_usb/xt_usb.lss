
xt_usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00004d32  00004dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000263  0080018c  0080018c  00004e52  2**0
                  ALLOC
  3 .noinit       00000004  008003ef  008003ef  00004e52  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00004e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000577f  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005790  2**2
                  CONTENTS, READONLY, OCTETS
  8 .debug_aranges 000008e8  00000000  00000000  000057d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001340a  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000053a8  00000000  00000000  000194c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000111fb  00000000  00000000  0001e86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001854  00000000  00000000  0002fa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000041d0  00000000  00000000  000312bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a553  00000000  00000000  0003548c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003f9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__ctors_end>
       4:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
       8:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_2>
       c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      10:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      14:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      18:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      1c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      20:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      24:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      28:	0c 94 ea 0e 	jmp	0x1dd4	; 0x1dd4 <__vector_10>
      2c:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__vector_11>
      30:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__vector_12>
      34:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      38:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      3c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      40:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      44:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      48:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      4c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      50:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      54:	0c 94 b9 1d 	jmp	0x3b72	; 0x3b72 <__vector_21>
      58:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      5c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      60:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      64:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      68:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      6c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      70:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      74:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      78:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      7c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      80:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      84:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      88:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      8c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      90:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      94:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      98:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      9c:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      a0:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      a4:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>
      a8:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__bad_interrupt>

000000ac <keymaps>:
      ac:	00 29 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a 2b     .).. !"#$%&'-.*+
      bc:	14 1a 08 15 17 1c 18 0c 12 13 2f 30 28 e0 04 16     ........../0(...
      cc:	07 09 0a 0b 0d 0e 0f 33 34 35 e1 31 1d 1b 06 19     .......345.1....
      dc:	05 11 10 36 37 38 e5 55 e2 2c 39 3a 3b 3c 3d 3e     ...678.U.,9:;<=>
      ec:	3f 40 41 42 43 53 47 5f 60 61 56 5c 5d 5e 57 59     ?@ABCSG_`aV\]^WY
      fc:	5a 5b 62 63 00 00 00 00 00 00 00 00 00 00 00 00     Z[bc............
     10c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     11c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000012c <__c.1957>:
     12c:	46 75 6c 6c 00                                      Full.

00000131 <__c.2327>:
     131:	25 30 32 58 20 00                                   %02X .

00000137 <__c.5265>:
     137:	0a 4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e     .Keyboard start.
     147:	0a 00                                               ..

00000149 <__c.5263>:
     149:	0a 55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e     .USB configured.
     159:	0a 00                                               ..

0000015b <__c.5258>:
     15b:	0a 0a 54 4d 4b 3a 38 66 38 36 64 31 32 35 2f 4c     ..TMK:8f86d125/L
     16b:	55 46 41 0a 0a 00                                   UFA...

00000171 <ProductString>:
     171:	2c 03 58 00 54 00 20 00 6b 00 65 00 79 00 62 00     ,.X.T. .k.e.y.b.
     181:	6f 00 61 00 72 00 64 00 20 00 63 00 6f 00 6e 00     o.a.r.d. .c.o.n.
     191:	76 00 65 00 72 00 74 00 65 00 72 00 00 00           v.e.r.t.e.r...

0000019f <ManufacturerString>:
     19f:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

000001af <LanguageString>:
     1af:	04 03 09 04                                         ....

000001b3 <ConfigurationDescriptor>:
     1b3:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     1c3:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     1d3:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1e3:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     1f3:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     203:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     213:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     223:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     233:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

00000240 <DeviceDescriptor>:
     240:	12 01 10 01 00 00 00 08 ed fe 12 65 01 00 01 02     ...........e....
     250:	00 01                                               ..

00000252 <NKROReport>:
     252:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     262:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     272:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     282:	25 01 95 f8 75 01 81 02 c0                          %...u....

0000028b <ConsoleReport>:
     28b:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     29b:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     2ab:	02 c0                                               ..

000002ad <ExtrakeyReport>:
     2ad:	05 01 09 80 a1 01 85 02 16 01 00 26 37 00 1a 81     ...........&7...
     2bd:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     2cd:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2dd:	10 95 01 81 00 c0                                   ......

000002e3 <MouseReport>:
     2e3:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2f3:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     303:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     313:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     323:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000330 <KeyboardReport>:
     330:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     340:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     350:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     360:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000370 <__c.4790>:
     370:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000380 <__c.4785>:
     380:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

0000038e <__c.4777>:
     38e:	0a 00                                               ..

00000390 <__c.4772>:
     390:	25 30 32 58 20 00                                   %02X .

00000396 <__c.4769>:
     396:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000003a1 <__c.5126>:
     3a1:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000003ac <__c.1793>:
     3ac:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

000003ba <__c.1790>:
     3ba:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

000003c8 <__c.4917>:
     3c8:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     3d8:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003e6 <__c.4912>:
     3e6:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     3f6:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000404 <__c.4849>:
     404:	29 0a 00                                            )..

00000407 <__c.4847>:
     407:	25 75 00                                            %u.

0000040a <__c.4845>:
     40a:	2f 00                                               /.

0000040c <__c.4843>:
     40c:	25 75 00                                            %u.

0000040f <__c.4841>:
     40f:	5d 28 00                                            ](.

00000412 <__c.4839>:
     412:	25 64 00                                            %d.

00000415 <__c.4837>:
     415:	20 00                                                .

00000417 <__c.4835>:
     417:	25 64 00                                            %d.

0000041a <__c.4833>:
     41a:	20 00                                                .

0000041c <__c.4831>:
     41c:	25 64 00                                            %d.

0000041f <__c.4829>:
     41f:	20 00                                                .

00000421 <__c.4827>:
     421:	25 64 00                                            %d.

00000424 <__c.4825>:
     424:	7c 00                                               |.

00000426 <__c.4823>:
     426:	25 30 32 58 00                                      %02X.

0000042b <__c.4821>:
     42b:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     43b:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     44b:	20 5b 00                                             [.

0000044e <__c.5351>:
     44e:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     45e:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000469 <__c.5348>:
     469:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     479:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000482 <__c.5345>:
     482:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     492:	20 25 64 0a 00                                       %d..

00000497 <__c.5342>:
     497:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     4a7:	64 0a 00                                            d..

000004aa <__c.5339>:
     4aa:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     4ba:	0a 00                                               ..

000004bc <__c.5335>:
     4bc:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004cb <__c.5328>:
     4cb:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4db:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004e6 <__c.5325>:
     4e6:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4f6:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004ff <__c.5322>:
     4ff:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     50f:	20 25 64 0a 00                                       %d..

00000514 <__c.5319>:
     514:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     524:	64 0a 00                                            d..

00000527 <__c.5316>:
     527:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     537:	0a 00                                               ..

00000539 <__c.5312>:
     539:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000548 <__c.5305>:
     548:	0a 00                                               ..

0000054a <__c.5303>:
     54a:	25 75 00                                            %u.

0000054d <__c.5301>:
     54d:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     55d:	5f 6d 61 78 3a 20 00                                _max: .

00000564 <__c.5299>:
     564:	0a 00                                               ..

00000566 <__c.5297>:
     566:	25 75 00                                            %u.

00000569 <__c.5295>:
     569:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     579:	65 64 3a 20 00                                      ed: .

0000057e <__c.5293>:
     57e:	0a 00                                               ..

00000580 <__c.5291>:
     580:	25 75 00                                            %u.

00000583 <__c.5289>:
     583:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     593:	00                                                  .

00000594 <__c.5287>:
     594:	0a 00                                               ..

00000596 <__c.5285>:
     596:	25 75 00                                            %u.

00000599 <__c.5283>:
     599:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000005a8 <__c.5281>:
     5a8:	0a 00                                               ..

000005aa <__c.5279>:
     5aa:	25 75 00                                            %u.

000005ad <__c.5277>:
     5ad:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     5bd:	20 00                                                .

000005bf <__c.5275>:
     5bf:	0a 00                                               ..

000005c1 <__c.5273>:
     5c1:	25 75 00                                            %u.

000005c4 <__c.5271>:
     5c4:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     5d4:	20 00                                                .

000005d6 <__c.5269>:
     5d6:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005e4 <__c.5389>:
     5e4:	4d 3e 00                                            M>.

000005e7 <__c.5387>:
     5e7:	4d 25 64 3e 20 00                                   M%d> .

000005ed <__c.5385>:
     5ed:	3f 00                                               ?.

000005ef <__c.5382>:
     5ef:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005fc <__c.5368>:
     5fc:	43 3e 20 00                                         C> .

00000600 <__c.5358>:
     600:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     610:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     620:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     630:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     640:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

0000064e <__c.5356>:
     64e:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     65e:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     66e:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     67e:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     68e:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     69e:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     6ae:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     6be:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     6ce:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     6de:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6ee:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6fe:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     70e:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     71e:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     72e:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     73e:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000749 <__c.5261>:
     749:	3f 00                                               ?.

0000074b <__c.5258>:
     74b:	4d 3e 20 00                                         M> .

0000074f <__c.5263>:
     74f:	43 3e 20 00                                         C> .

00000753 <__c.5407>:
     753:	4c 25 64 0a 00                                      L%d..

00000758 <__c.5247>:
     758:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     768:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     778:	73 65 6b 65 79 0a 00                                sekey..

0000077f <__c.5170>:
     77f:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     78f:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     79f:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     7af:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     7bf:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     7cf:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7df:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7ef:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7ff:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     80f:	72 0a 6e 3a 09 4e 4b 52 4f 0a 00                    r.n:.NKRO..

0000081a <__c.5242>:
     81a:	3f 00                                               ?.

0000081c <__c.5233>:
     81c:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000827 <__c.5231>:
     827:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

00000831 <__c.5228>:
     831:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     841:	25 30 34 6c 58 0a 00                                %04lX..

00000848 <__c.5226>:
     848:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     858:	58 0a 00                                            X..

0000085b <__c.5224>:
     85b:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     86b:	58 0a 00                                            X..

0000086e <__c.5222>:
     86e:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     87e:	6c 3a 20 25 58 0a 00                                l: %X..

00000885 <__c.5220>:
     885:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     895:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

0000089f <__c.5218>:
     89f:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000008ad <__c.5215>:
     8ad:	47 43 43 3a 20 38 2e 33 2e 30 20 41 56 52 2d 4c     GCC: 8.3.0 AVR-L
     8bd:	49 42 43 3a 20 32 2e 30 2e 30 20 41 56 52 5f 41     IBC: 2.0.0 AVR_A
     8cd:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000008d8 <__c.5213>:
     8d8:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     8e8:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     8f8:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     908:	4e 4b 52 4f 20 34 30 39 36 0a 00                    NKRO 4096..

00000913 <__c.5211>:
     913:	42 55 49 4c 44 3a 20 38 66 38 36 64 31 32 35 20     BUILD: 8f86d125 
     923:	28 30 30 3a 33 35 3a 34 39 20 44 65 63 20 32 32     (00:35:49 Dec 22
     933:	20 32 30 32 30 29 0a 00                              2020)..

0000093b <__c.5209>:
     93b:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     94b:	6b 2e 29 20 50 49 44 3a 20 30 78 36 35 31 32 28     k.) PID: 0x6512(
     95b:	58 54 20 6b 65 79 62 6f 61 72 64 20 63 6f 6e 76     XT keyboard conv
     96b:	65 72 74 65 72 29 20 56 45 52 3a 20 30 78 30 30     erter) VER: 0x00
     97b:	30 31 0a 00                                         01..

0000097f <__c.5207>:
     97f:	44 45 53 43 3a 20 63 6f 6e 76 65 72 74 20 58 54     DESC: convert XT
     98f:	20 6b 65 79 62 6f 61 72 64 20 74 6f 20 55 53 42      keyboard to USB
     99f:	0a 00                                               ..

000009a1 <__c.5205>:
     9a1:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000009b0 <__c.5202>:
     9b0:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000009bd <__c.5200>:
     9bd:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000009c9 <__c.5197>:
     9c9:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000009d9 <__c.5195>:
     9d9:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000009e8 <__c.5192>:
     9e8:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

000009f6 <__c.5190>:
     9f6:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000a03 <__c.5187>:
     a03:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000a0f <__c.5185>:
     a0f:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000a1c <__c.5182>:
     a1c:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     a2c:	00                                                  .

00000a2d <__c.5179>:
     a2d:	43 3e 20 00 00                                      C> ..

00000a32 <__ctors_end>:
     a32:	11 24       	eor	r1, r1
     a34:	1f be       	out	0x3f, r1	; 63
     a36:	cf ef       	ldi	r28, 0xFF	; 255
     a38:	da e0       	ldi	r29, 0x0A	; 10
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	cd bf       	out	0x3d, r28	; 61

00000a3e <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     a3e:	04 b6       	in	r0, 0x34	; 52
     a40:	03 fe       	sbrs	r0, 3
     a42:	28 c0       	rjmp	.+80     	; 0xa94 <__do_copy_data>
     a44:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <reset_key>
     a48:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <reset_key+0x1>
     a4c:	a0 91 f1 03 	lds	r26, 0x03F1	; 0x8003f1 <reset_key+0x2>
     a50:	b0 91 f2 03 	lds	r27, 0x03F2	; 0x8003f2 <reset_key+0x3>
     a54:	87 30       	cpi	r24, 0x07	; 7
     a56:	90 4b       	sbci	r25, 0xB0	; 176
     a58:	a7 40       	sbci	r26, 0x07	; 7
     a5a:	b0 4b       	sbci	r27, 0xB0	; 176
     a5c:	d9 f4       	brne	.+54     	; 0xa94 <__do_copy_data>
        reset_key = 0;
     a5e:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <reset_key>
     a62:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <reset_key+0x1>
     a66:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <reset_key+0x2>
     a6a:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <reset_key+0x3>

        // some of bootloaders may need to preseve?
        MCUSR = 0;
     a6e:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	a8 95       	wdr
     a76:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a7a:	88 61       	ori	r24, 0x18	; 24
     a7c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a80:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a84:	0f be       	out	0x3f, r0	; 63

#ifndef NO_BOOTLOADER_CATERINA_BOOTKEY
        // Clear bootkey of Caterina bootloader for other bootloaders
        // Leonardo and Pro Micro with Arduino default fuse setting don't reach here
        // because bootloader section are executed before application everytime.
        *(volatile uint16_t *)0x0800 = 0;
     a86:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <_end+0x40e>
     a8a:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <_end+0x40d>
#endif

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))( (uint16_t)(BOOTLOADER_START / 2) ))();
     a8e:	e0 e0       	ldi	r30, 0x00	; 0
     a90:	f8 e3       	ldi	r31, 0x38	; 56
     a92:	09 95       	icall

00000a94 <__do_copy_data>:
     a94:	11 e0       	ldi	r17, 0x01	; 1
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b1 e0       	ldi	r27, 0x01	; 1
     a9a:	e2 e3       	ldi	r30, 0x32	; 50
     a9c:	fd e4       	ldi	r31, 0x4D	; 77
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <__do_copy_data+0x10>
     aa0:	05 90       	lpm	r0, Z+
     aa2:	0d 92       	st	X+, r0
     aa4:	ac 38       	cpi	r26, 0x8C	; 140
     aa6:	b1 07       	cpc	r27, r17
     aa8:	d9 f7       	brne	.-10     	; 0xaa0 <__do_copy_data+0xc>

00000aaa <__do_clear_bss>:
     aaa:	23 e0       	ldi	r18, 0x03	; 3
     aac:	ac e8       	ldi	r26, 0x8C	; 140
     aae:	b1 e0       	ldi	r27, 0x01	; 1
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <.do_clear_bss_start>

00000ab2 <.do_clear_bss_loop>:
     ab2:	1d 92       	st	X+, r1

00000ab4 <.do_clear_bss_start>:
     ab4:	af 3e       	cpi	r26, 0xEF	; 239
     ab6:	b2 07       	cpc	r27, r18
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <.do_clear_bss_loop>
     aba:	0e 94 65 0a 	call	0x14ca	; 0x14ca <main>
     abe:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <_exit>

00000ac2 <__bad_interrupt>:
     ac2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ac6 <xputc>:
     ac6:	ff 93       	push	r31
     ac8:	ef 93       	push	r30
     aca:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__bss_start>
     ace:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__bss_start+0x1>
     ad2:	30 97       	sbiw	r30, 0x00	; 0
     ad4:	09 f0       	breq	.+2      	; 0xad8 <xputc+0x12>
     ad6:	09 95       	icall
     ad8:	ef 91       	pop	r30
     ada:	ff 91       	pop	r31
     adc:	08 95       	ret

00000ade <xputs>:
     ade:	fc 01       	movw	r30, r24
     ae0:	85 91       	lpm	r24, Z+
     ae2:	80 30       	cpi	r24, 0x00	; 0
     ae4:	11 f0       	breq	.+4      	; 0xaea <xputs+0xc>
     ae6:	ef df       	rcall	.-34     	; 0xac6 <xputc>
     ae8:	fb cf       	rjmp	.-10     	; 0xae0 <xputs+0x2>
     aea:	08 95       	ret

00000aec <xitoa>:
     aec:	ff 27       	eor	r31, r31
     aee:	e0 e2       	ldi	r30, 0x20	; 32
     af0:	30 e2       	ldi	r19, 0x20	; 32
     af2:	47 ff       	sbrs	r20, 7
     af4:	0c c0       	rjmp	.+24     	; 0xb0e <__stack+0xf>
     af6:	41 95       	neg	r20
     af8:	97 ff       	sbrs	r25, 7
     afa:	09 c0       	rjmp	.+18     	; 0xb0e <__stack+0xf>
     afc:	ed e2       	ldi	r30, 0x2D	; 45
     afe:	60 95       	com	r22
     b00:	70 95       	com	r23
     b02:	80 95       	com	r24
     b04:	90 95       	com	r25
     b06:	61 1d       	adc	r22, r1
     b08:	71 1d       	adc	r23, r1
     b0a:	81 1d       	adc	r24, r1
     b0c:	91 1d       	adc	r25, r1
     b0e:	27 ff       	sbrs	r18, 7
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <__stack+0x17>
     b12:	21 95       	neg	r18
     b14:	30 e3       	ldi	r19, 0x30	; 48
     b16:	50 e2       	ldi	r21, 0x20	; 32
     b18:	aa 27       	eor	r26, r26
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	aa 1f       	adc	r26, r26
     b24:	a4 17       	cp	r26, r20
     b26:	10 f0       	brcs	.+4      	; 0xb2c <__stack+0x2d>
     b28:	a4 1b       	sub	r26, r20
     b2a:	63 95       	inc	r22
     b2c:	5a 95       	dec	r21
     b2e:	a9 f7       	brne	.-22     	; 0xb1a <__stack+0x1b>
     b30:	aa 30       	cpi	r26, 0x0A	; 10
     b32:	08 f0       	brcs	.+2      	; 0xb36 <__stack+0x37>
     b34:	a9 5f       	subi	r26, 0xF9	; 249
     b36:	a0 5d       	subi	r26, 0xD0	; 208
     b38:	af 93       	push	r26
     b3a:	f3 95       	inc	r31
     b3c:	61 15       	cp	r22, r1
     b3e:	71 05       	cpc	r23, r1
     b40:	81 05       	cpc	r24, r1
     b42:	91 05       	cpc	r25, r1
     b44:	41 f7       	brne	.-48     	; 0xb16 <__stack+0x17>
     b46:	ed 32       	cpi	r30, 0x2D	; 45
     b48:	11 f4       	brne	.+4      	; 0xb4e <__stack+0x4f>
     b4a:	ef 93       	push	r30
     b4c:	f3 95       	inc	r31
     b4e:	f2 17       	cp	r31, r18
     b50:	18 f4       	brcc	.+6      	; 0xb58 <__stack+0x59>
     b52:	3f 93       	push	r19
     b54:	f3 95       	inc	r31
     b56:	fb cf       	rjmp	.-10     	; 0xb4e <__stack+0x4f>
     b58:	8f 91       	pop	r24
     b5a:	b5 df       	rcall	.-150    	; 0xac6 <xputc>
     b5c:	fa 95       	dec	r31
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <__stack+0x59>
     b60:	08 95       	ret

00000b62 <xvprintf>:
     b62:	e9 91       	ld	r30, Y+
     b64:	f9 91       	ld	r31, Y+
     b66:	85 91       	lpm	r24, Z+
     b68:	80 30       	cpi	r24, 0x00	; 0
     b6a:	21 f0       	breq	.+8      	; 0xb74 <xvprintf+0x12>
     b6c:	85 32       	cpi	r24, 0x25	; 37
     b6e:	19 f0       	breq	.+6      	; 0xb76 <xvprintf+0x14>
     b70:	aa df       	rcall	.-172    	; 0xac6 <xputc>
     b72:	f9 cf       	rjmp	.-14     	; 0xb66 <xvprintf+0x4>
     b74:	08 95       	ret
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	e8 94       	clt
     b7a:	55 91       	lpm	r21, Z+
     b7c:	55 32       	cpi	r21, 0x25	; 37
     b7e:	c1 f3       	breq	.-16     	; 0xb70 <xvprintf+0xe>
     b80:	50 33       	cpi	r21, 0x30	; 48
     b82:	11 f4       	brne	.+4      	; 0xb88 <xvprintf+0x26>
     b84:	68 94       	set
     b86:	55 91       	lpm	r21, Z+
     b88:	5a 33       	cpi	r21, 0x3A	; 58
     b8a:	48 f4       	brcc	.+18     	; 0xb9e <xvprintf+0x3c>
     b8c:	50 53       	subi	r21, 0x30	; 48
     b8e:	90 f3       	brcs	.-28     	; 0xb74 <xvprintf+0x12>
     b90:	22 0f       	add	r18, r18
     b92:	02 2e       	mov	r0, r18
     b94:	22 0f       	add	r18, r18
     b96:	22 0f       	add	r18, r18
     b98:	20 0d       	add	r18, r0
     b9a:	25 0f       	add	r18, r21
     b9c:	f4 cf       	rjmp	.-24     	; 0xb86 <xvprintf+0x24>
     b9e:	0e f4       	brtc	.+2      	; 0xba2 <xvprintf+0x40>
     ba0:	21 95       	neg	r18
     ba2:	89 91       	ld	r24, Y+
     ba4:	99 91       	ld	r25, Y+
     ba6:	53 36       	cpi	r21, 0x63	; 99
     ba8:	19 f3       	breq	.-58     	; 0xb70 <xvprintf+0xe>
     baa:	53 37       	cpi	r21, 0x73	; 115
     bac:	29 f1       	breq	.+74     	; 0xbf8 <xvprintf+0x96>
     bae:	53 35       	cpi	r21, 0x53	; 83
     bb0:	59 f1       	breq	.+86     	; 0xc08 <xvprintf+0xa6>
     bb2:	bc 01       	movw	r22, r24
     bb4:	88 27       	eor	r24, r24
     bb6:	99 27       	eor	r25, r25
     bb8:	e8 94       	clt
     bba:	5c 36       	cpi	r21, 0x6C	; 108
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <xvprintf+0x64>
     bbe:	89 91       	ld	r24, Y+
     bc0:	99 91       	ld	r25, Y+
     bc2:	68 94       	set
     bc4:	55 91       	lpm	r21, Z+
     bc6:	54 36       	cpi	r21, 0x64	; 100
     bc8:	39 f4       	brne	.+14     	; 0xbd8 <xvprintf+0x76>
     bca:	46 ef       	ldi	r20, 0xF6	; 246
     bcc:	7e f0       	brts	.+30     	; 0xbec <xvprintf+0x8a>
     bce:	77 ff       	sbrs	r23, 7
     bd0:	0d c0       	rjmp	.+26     	; 0xbec <xvprintf+0x8a>
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	9f ef       	ldi	r25, 0xFF	; 255
     bd6:	0a c0       	rjmp	.+20     	; 0xbec <xvprintf+0x8a>
     bd8:	55 37       	cpi	r21, 0x75	; 117
     bda:	4a e0       	ldi	r20, 0x0A	; 10
     bdc:	39 f0       	breq	.+14     	; 0xbec <xvprintf+0x8a>
     bde:	58 35       	cpi	r21, 0x58	; 88
     be0:	40 e1       	ldi	r20, 0x10	; 16
     be2:	21 f0       	breq	.+8      	; 0xbec <xvprintf+0x8a>
     be4:	52 36       	cpi	r21, 0x62	; 98
     be6:	42 e0       	ldi	r20, 0x02	; 2
     be8:	09 f0       	breq	.+2      	; 0xbec <xvprintf+0x8a>
     bea:	08 95       	ret
     bec:	ff 93       	push	r31
     bee:	ef 93       	push	r30
     bf0:	7d df       	rcall	.-262    	; 0xaec <xitoa>
     bf2:	ef 91       	pop	r30
     bf4:	ff 91       	pop	r31
     bf6:	b7 cf       	rjmp	.-146    	; 0xb66 <xvprintf+0x4>
     bf8:	ff 93       	push	r31
     bfa:	ef 93       	push	r30
     bfc:	fc 01       	movw	r30, r24
     bfe:	81 91       	ld	r24, Z+
     c00:	80 30       	cpi	r24, 0x00	; 0
     c02:	b9 f3       	breq	.-18     	; 0xbf2 <xvprintf+0x90>
     c04:	60 df       	rcall	.-320    	; 0xac6 <xputc>
     c06:	fb cf       	rjmp	.-10     	; 0xbfe <xvprintf+0x9c>
     c08:	ff 93       	push	r31
     c0a:	ef 93       	push	r30
     c0c:	68 df       	rcall	.-304    	; 0xade <xputs>
     c0e:	f1 cf       	rjmp	.-30     	; 0xbf2 <xvprintf+0x90>

00000c10 <__xprintf>:
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	25 96       	adiw	r28, 0x05	; 5
     c1a:	a3 df       	rcall	.-186    	; 0xb62 <xvprintf>
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <xt_host_init>:
    .size_mask = BUF_SIZE - 1
};

void xt_host_init(void)
{
    XT_INT_INIT();
     c22:	e9 e6       	ldi	r30, 0x69	; 105
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	88 60       	ori	r24, 0x08	; 8
     c2a:	80 83       	st	Z, r24
    XT_INT_OFF();
     c2c:	e9 98       	cbi	0x1d, 1	; 29

    /* hard reset */
#ifdef XT_RESET
    XT_RESET();
     c2e:	2f 98       	cbi	0x05, 7	; 5
     c30:	27 9a       	sbi	0x04, 7	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	89 e6       	ldi	r24, 0x69	; 105
     c36:	98 e1       	ldi	r25, 0x18	; 24
     c38:	21 50       	subi	r18, 0x01	; 1
     c3a:	80 40       	sbci	r24, 0x00	; 0
     c3c:	90 40       	sbci	r25, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <xt_host_init+0x16>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <xt_host_init+0x20>
     c42:	00 00       	nop
     c44:	27 98       	cbi	0x04, 7	; 4
#endif

    /* soft reset: pull clock line down for 20ms */
    XT_DATA_LO();
     c46:	58 98       	cbi	0x0b, 0	; 11
     c48:	50 9a       	sbi	0x0a, 0	; 10
    XT_CLOCK_LO();
     c4a:	59 98       	cbi	0x0b, 1	; 11
     c4c:	51 9a       	sbi	0x0a, 1	; 10
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	89 ef       	ldi	r24, 0xF9	; 249
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	80 40       	sbci	r24, 0x00	; 0
     c58:	90 40       	sbci	r25, 0x00	; 0
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <xt_host_init+0x32>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <xt_host_init+0x3c>
     c5e:	00 00       	nop
    _delay_ms(20);

    /* input mode with pullup */
    XT_CLOCK_IN();
     c60:	51 98       	cbi	0x0a, 1	; 10
     c62:	59 9a       	sbi	0x0b, 1	; 11
    XT_DATA_IN();
     c64:	50 98       	cbi	0x0a, 0	; 10
     c66:	58 9a       	sbi	0x0b, 0	; 11

    XT_INT_ON();
     c68:	e1 9a       	sbi	0x1c, 1	; 28
     c6a:	e9 9a       	sbi	0x1d, 1	; 29
}
     c6c:	08 95       	ret

00000c6e <xt_host_recv>:
        buf->tail &= buf->size_mask;
    }
}
static inline bool ringbuf_is_empty(ringbuf_t *buf)
{
    return (buf->head == buf->tail);
     c6e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rb+0x3>

/* get data received by interrupt */
uint8_t xt_host_recv(void)
{
    if (ringbuf_is_empty(&rb)) {
     c72:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rb+0x2>
     c76:	89 17       	cp	r24, r25
     c78:	81 f0       	breq	.+32     	; 0xc9a <xt_host_recv+0x2c>
    uint8_t data = buf->buffer[buf->tail];
     c7a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <rb>
     c7e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <rb+0x1>
     c82:	e9 0f       	add	r30, r25
     c84:	f1 1d       	adc	r31, r1
     c86:	80 81       	ld	r24, Z
    buf->tail++;
     c88:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
     c8a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <rb+0x4>
     c8e:	92 23       	and	r25, r18
     c90:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <rb+0x3>
        return 0;
    } else {
        int16_t d = ringbuf_get(&rb);
        XT_DATA_IN();  // ready to receive from keyboard
     c94:	50 98       	cbi	0x0a, 0	; 10
     c96:	58 9a       	sbi	0x0b, 0	; 11
        return d;
     c98:	08 95       	ret
        return 0;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     c9c:	08 95       	ret

00000c9e <__vector_2>:

ISR(XT_INT_VECT)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
    static enum {
        START, BIT0, BIT1, BIT2, BIT3, BIT4, BIT5, BIT6, BIT7
    } state = START;
    static uint8_t data = 0;

    uint8_t dbit = XT_DATA_READ();
     cc0:	29 b1       	in	r18, 0x09	; 9
     cc2:	21 70       	andi	r18, 0x01	; 1

    // This is needed if using PCINT which can be called on both falling and rising edge
    //if (XT_CLOCK_READ()) return;

    switch (state) {
     cc4:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <state.1951>
     cc8:	99 23       	and	r25, r25
     cca:	51 f1       	breq	.+84     	; 0xd20 <__vector_2+0x82>
     ccc:	99 30       	cpi	r25, 0x09	; 9
     cce:	38 f4       	brcc	.+14     	; 0xcde <__vector_2+0x40>
        case START:
            // ignore start(0) bit
            if (!dbit) return;
            break;
        case BIT0 ... BIT7:
            data >>= 1;
     cd0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <data.1952>
     cd4:	86 95       	lsr	r24
            if (dbit)
     cd6:	21 11       	cpse	r18, r1
     cd8:	36 c0       	rjmp	.+108    	; 0xd46 <__vector_2+0xa8>
                data |= 0x80;
     cda:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <data.1952>
            break;
    }
    if (state++ == BIT7) {
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 0f       	add	r24, r25
     ce2:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <state.1951>
     ce6:	98 30       	cpi	r25, 0x08	; 8
     ce8:	e9 f4       	brne	.+58     	; 0xd24 <__vector_2+0x86>
}
static inline bool ringbuf_is_full(ringbuf_t *buf)
{
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
     cea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rb+0x2>
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9c 01       	movw	r18, r24
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <rb+0x4>
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	24 23       	and	r18, r20
     cfe:	35 23       	and	r19, r21
     d00:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <rb+0x3>
    if (ringbuf_is_full(buf)) {
     d04:	42 17       	cp	r20, r18
     d06:	13 06       	cpc	r1, r19
     d08:	01 f5       	brne	.+64     	; 0xd4a <__vector_2+0xac>
        ringbuf_put(&rb, data);
        if (ringbuf_is_full(&rb)) {
            XT_DATA_LO();  // inhibit keyboard sending
     d0a:	58 98       	cbi	0x0b, 0	; 11
     d0c:	50 9a       	sbi	0x0a, 0	; 10
            print("Full");
     d0e:	8c e2       	ldi	r24, 0x2C	; 44
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
        }
        state = START;
     d16:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <state.1951>
        data = 0;
     d1a:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <data.1952>
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <__vector_2+0x86>
            if (!dbit) return;
     d20:	21 11       	cpse	r18, r1
     d22:	dd cf       	rjmp	.-70     	; 0xcde <__vector_2+0x40>
    }
    return;
}
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti
                data |= 0x80;
     d46:	80 68       	ori	r24, 0x80	; 128
     d48:	c8 cf       	rjmp	.-112    	; 0xcda <__vector_2+0x3c>
    buf->buffer[buf->head] = data;
     d4a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <rb>
     d4e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <rb+0x1>
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <data.1952>
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18
    buf->head &= buf->size_mask;
     d5e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <rb+0x4>
    buf->head++;
     d62:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <rb+0x2>
     d66:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
     d68:	82 23       	and	r24, r18
     d6a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <rb+0x2>
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	82 23       	and	r24, r18
     d76:	93 23       	and	r25, r19
     d78:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <rb+0x3>
        if (ringbuf_is_full(&rb)) {
     d7c:	28 17       	cp	r18, r24
     d7e:	19 06       	cpc	r1, r25
     d80:	51 f6       	brne	.-108    	; 0xd16 <__vector_2+0x78>
     d82:	c3 cf       	rjmp	.-122    	; 0xd0a <__vector_2+0x6c>

00000d84 <matrix_make>:
    return matrix[row];
}

inline
static void matrix_make(uint8_t code)
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
    if (!matrix_is_on(ROW(code), COL(code))) {
     d88:	d8 2f       	mov	r29, r24
     d8a:	d7 70       	andi	r29, 0x07	; 7
     d8c:	c8 2f       	mov	r28, r24
     d8e:	c6 95       	lsr	r28
     d90:	c6 95       	lsr	r28
     d92:	c6 95       	lsr	r28
     d94:	6d 2f       	mov	r22, r29
     d96:	8c 2f       	mov	r24, r28
     d98:	0e 94 79 11 	call	0x22f2	; 0x22f2 <matrix_is_on>
     d9c:	81 11       	cpse	r24, r1
     d9e:	0d c0       	rjmp	.+26     	; 0xdba <matrix_make+0x36>
        matrix[ROW(code)] |= 1<<COL(code);
     da0:	ec 2f       	mov	r30, r28
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	ef 55       	subi	r30, 0x5F	; 95
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <matrix_make+0x2c>
     dae:	22 0f       	add	r18, r18
     db0:	da 95       	dec	r29
     db2:	ea f7       	brpl	.-6      	; 0xdae <matrix_make+0x2a>
     db4:	80 81       	ld	r24, Z
     db6:	82 2b       	or	r24, r18
     db8:	80 83       	st	Z, r24
    }
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <matrix_break>:

inline
static void matrix_break(uint8_t code)
{
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
    if (matrix_is_on(ROW(code), COL(code))) {
     dc4:	d8 2f       	mov	r29, r24
     dc6:	d7 70       	andi	r29, 0x07	; 7
     dc8:	c8 2f       	mov	r28, r24
     dca:	c6 95       	lsr	r28
     dcc:	c6 95       	lsr	r28
     dce:	c6 95       	lsr	r28
     dd0:	6d 2f       	mov	r22, r29
     dd2:	8c 2f       	mov	r24, r28
     dd4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <matrix_is_on>
     dd8:	88 23       	and	r24, r24
     dda:	71 f0       	breq	.+28     	; 0xdf8 <matrix_break+0x38>
        matrix[ROW(code)] &= ~(1<<COL(code));
     ddc:	ec 2f       	mov	r30, r28
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	ef 55       	subi	r30, 0x5F	; 95
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	01 c0       	rjmp	.+2      	; 0xdec <matrix_break+0x2c>
     dea:	88 0f       	add	r24, r24
     dec:	da 95       	dec	r29
     dee:	ea f7       	brpl	.-6      	; 0xdea <matrix_break+0x2a>
     df0:	80 95       	com	r24
     df2:	90 81       	ld	r25, Z
     df4:	89 23       	and	r24, r25
     df6:	80 83       	st	Z, r24
    }
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <matrix_init>:
    debug_enable = true;
     dfe:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
     e02:	81 60       	ori	r24, 0x01	; 1
     e04:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <debug_config>
    xt_host_init();
     e08:	0e 94 11 06 	call	0xc22	; 0xc22 <xt_host_init>
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
     e0c:	e1 ea       	ldi	r30, 0xA1	; 161
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	11 92       	st	Z+, r1
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	e1 3b       	cpi	r30, 0xB1	; 177
     e16:	f8 07       	cpc	r31, r24
     e18:	d9 f7       	brne	.-10     	; 0xe10 <matrix_init+0x12>
}
     e1a:	08 95       	ret

00000e1c <matrix_scan>:
{
     e1c:	cf 93       	push	r28
    uint8_t code = xt_host_recv();
     e1e:	0e 94 37 06 	call	0xc6e	; 0xc6e <xt_host_recv>
     e22:	c8 2f       	mov	r28, r24
    if (!code) return 0;
     e24:	88 23       	and	r24, r24
     e26:	e9 f0       	breq	.+58     	; 0xe62 <matrix_scan+0x46>
    dprintf("%02X ", code);
     e28:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
     e2c:	80 ff       	sbrs	r24, 0
     e2e:	0c c0       	rjmp	.+24     	; 0xe48 <matrix_scan+0x2c>
     e30:	1f 92       	push	r1
     e32:	cf 93       	push	r28
     e34:	81 e3       	ldi	r24, 0x31	; 49
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
    switch (state) {
     e48:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <state.2325>
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	09 f4       	brne	.+2      	; 0xe52 <matrix_scan+0x36>
     e50:	4d c0       	rjmp	.+154    	; 0xeec <matrix_scan+0xd0>
     e52:	50 f4       	brcc	.+20     	; 0xe68 <matrix_scan+0x4c>
     e54:	88 23       	and	r24, r24
     e56:	89 f0       	breq	.+34     	; 0xe7a <matrix_scan+0x5e>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	19 f1       	breq	.+70     	; 0xea2 <matrix_scan+0x86>
                    state = INIT;
     e5c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <state.2325>
    return 1;
     e60:	c1 e0       	ldi	r28, 0x01	; 1
}
     e62:	8c 2f       	mov	r24, r28
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret
    switch (state) {
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	09 f4       	brne	.+2      	; 0xe6e <matrix_scan+0x52>
     e6c:	48 c0       	rjmp	.+144    	; 0xefe <matrix_scan+0xe2>
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	a9 f7       	brne	.-22     	; 0xe5c <matrix_scan+0x40>
            switch (code) {
     e72:	c5 34       	cpi	r28, 0x45	; 69
     e74:	99 f7       	brne	.-26     	; 0xe5c <matrix_scan+0x40>
                    matrix_break(0x55);
     e76:	85 e5       	ldi	r24, 0x55	; 85
     e78:	11 c0       	rjmp	.+34     	; 0xe9c <matrix_scan+0x80>
            switch (code) {
     e7a:	c0 3e       	cpi	r28, 0xE0	; 224
     e7c:	41 f0       	breq	.+16     	; 0xe8e <matrix_scan+0x72>
     e7e:	c1 3e       	cpi	r28, 0xE1	; 225
     e80:	51 f0       	breq	.+20     	; 0xe96 <matrix_scan+0x7a>
                        matrix_make(code);
     e82:	8c 2f       	mov	r24, r28
                    if (code < 0x80)
     e84:	c7 fd       	sbrc	r28, 7
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <matrix_scan+0x7e>
                    matrix_make(0x55);
     e88:	0e 94 c2 06 	call	0xd84	; 0xd84 <matrix_make>
                    break;
     e8c:	e9 cf       	rjmp	.-46     	; 0xe60 <matrix_scan+0x44>
                    state = E0;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
                    state = E1_9D;
     e90:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <state.2325>
                    break;
     e94:	e5 cf       	rjmp	.-54     	; 0xe60 <matrix_scan+0x44>
                    state = E1;
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	fb cf       	rjmp	.-10     	; 0xe90 <matrix_scan+0x74>
                        matrix_break(code & 0x7F);
     e9a:	8f 77       	andi	r24, 0x7F	; 127
                    matrix_break(0x55);
     e9c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <matrix_break>
     ea0:	df cf       	rjmp	.-66     	; 0xe60 <matrix_scan+0x44>
            switch (code) {
     ea2:	c6 33       	cpi	r28, 0x36	; 54
     ea4:	d9 f2       	breq	.-74     	; 0xe5c <matrix_scan+0x40>
     ea6:	80 f4       	brcc	.+32     	; 0xec8 <matrix_scan+0xac>
     ea8:	ca 32       	cpi	r28, 0x2A	; 42
     eaa:	c1 f2       	breq	.-80     	; 0xe5c <matrix_scan+0x40>
                    if (code < 0x80)
     eac:	c7 fd       	sbrc	r28, 7
     eae:	11 c0       	rjmp	.+34     	; 0xed2 <matrix_scan+0xb6>
    switch(code) {
     eb0:	cc 51       	subi	r28, 0x1C	; 28
                    if (code < 0x80)
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	c8 34       	cpi	r28, 0x48	; 72
     eb6:	28 f4       	brcc	.+10     	; 0xec2 <matrix_scan+0xa6>
     eb8:	ec 2f       	mov	r30, r28
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	e1 5e       	subi	r30, 0xE1	; 225
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	80 81       	ld	r24, Z
                        matrix_make(move_e0code(code));
     ec2:	0e 94 c2 06 	call	0xd84	; 0xd84 <matrix_make>
     ec6:	ca cf       	rjmp	.-108    	; 0xe5c <matrix_scan+0x40>
     ec8:	ca 3a       	cpi	r28, 0xAA	; 170
     eca:	41 f2       	breq	.-112    	; 0xe5c <matrix_scan+0x40>
     ecc:	c6 3b       	cpi	r28, 0xB6	; 182
     ece:	71 f7       	brne	.-36     	; 0xeac <matrix_scan+0x90>
     ed0:	c5 cf       	rjmp	.-118    	; 0xe5c <matrix_scan+0x40>
                        matrix_break(move_e0code(code & 0x7F));
     ed2:	ec 2f       	mov	r30, r28
     ed4:	ef 77       	andi	r30, 0x7F	; 127
     ed6:	ec 51       	subi	r30, 0x1C	; 28
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	e8 34       	cpi	r30, 0x48	; 72
     edc:	20 f4       	brcc	.+8      	; 0xee6 <matrix_scan+0xca>
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	e1 5e       	subi	r30, 0xE1	; 225
     ee2:	fe 4f       	sbci	r31, 0xFE	; 254
     ee4:	80 81       	ld	r24, Z
     ee6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <matrix_break>
     eea:	b8 cf       	rjmp	.-144    	; 0xe5c <matrix_scan+0x40>
            switch (code) {
     eec:	cd 31       	cpi	r28, 0x1D	; 29
     eee:	29 f0       	breq	.+10     	; 0xefa <matrix_scan+0xde>
     ef0:	cd 39       	cpi	r28, 0x9D	; 157
     ef2:	09 f0       	breq	.+2      	; 0xef6 <matrix_scan+0xda>
     ef4:	b3 cf       	rjmp	.-154    	; 0xe5c <matrix_scan+0x40>
                    state = E1_9D;
     ef6:	84 e0       	ldi	r24, 0x04	; 4
     ef8:	cb cf       	rjmp	.-106    	; 0xe90 <matrix_scan+0x74>
                    state = E1_1D;
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	c9 cf       	rjmp	.-110    	; 0xe90 <matrix_scan+0x74>
            switch (code) {
     efe:	c5 34       	cpi	r28, 0x45	; 69
     f00:	09 f0       	breq	.+2      	; 0xf04 <matrix_scan+0xe8>
     f02:	ac cf       	rjmp	.-168    	; 0xe5c <matrix_scan+0x40>
                    matrix_make(0x55);
     f04:	85 e5       	ldi	r24, 0x55	; 85
     f06:	c0 cf       	rjmp	.-128    	; 0xe88 <matrix_scan+0x6c>

00000f08 <matrix_get_row>:
    return matrix[row];
     f08:	e8 2f       	mov	r30, r24
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	ef 55       	subi	r30, 0x5F	; 95
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
}
     f10:	80 81       	ld	r24, Z
     f12:	08 95       	ret

00000f14 <matrix_clear>:

void matrix_clear(void)
{
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
     f14:	e1 ea       	ldi	r30, 0xA1	; 161
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	11 92       	st	Z+, r1
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	e1 3b       	cpi	r30, 0xB1	; 177
     f1e:	f8 07       	cpc	r31, r24
     f20:	d9 f7       	brne	.-10     	; 0xf18 <matrix_clear+0x4>
}
     f22:	08 95       	ret

00000f24 <led_set>:
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

void led_set(uint8_t usb_led) {
  //XT Keyboards do not have LEDs, nothing to do.
}
     f24:	08 95       	ret

00000f26 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     f26:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <keyboard_led_stats>
     f2a:	08 95       	ret

00000f2c <send_consumer>:
    Endpoint_ClearIN();
#endif
}

static void send_consumer(uint16_t data)
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	00 d0       	rcall	.+0      	; 0xf32 <send_consumer+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	9c 01       	movw	r18, r24
#ifdef EXTRAKEY_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f3a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
     f3e:	84 30       	cpi	r24, 0x04	; 4
     f40:	19 f5       	brne	.+70     	; 0xf88 <send_consumer+0x5c>
        return;

    report_extra_t r = {
     f42:	93 e0       	ldi	r25, 0x03	; 3
     f44:	99 83       	std	Y+1, r25	; 0x01
     f46:	3b 83       	std	Y+3, r19	; 0x03
     f48:	2a 83       	std	Y+2, r18	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f4a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f50:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f54:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     f56:	95 fd       	sbrc	r25, 5
     f58:	06 c0       	rjmp	.+12     	; 0xf66 <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f5a:	95 ed       	ldi	r25, 0xD5	; 213
     f5c:	9a 95       	dec	r25
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <send_consumer+0x30>
     f60:	00 00       	nop
     f62:	81 11       	cpse	r24, r1
     f64:	f5 cf       	rjmp	.-22     	; 0xf50 <send_consumer+0x24>
     f66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     f6a:	85 ff       	sbrs	r24, 5
     f6c:	0d c0       	rjmp	.+26     	; 0xf88 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	63 e0       	ldi	r22, 0x03	; 3
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 11 0c 	call	0x1822	; 0x1822 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f82:	8e 77       	andi	r24, 0x7E	; 126
     f84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    Endpoint_ClearIN();
#endif
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <send_system>:
{
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	00 d0       	rcall	.+0      	; 0xf9a <send_system+0x6>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
    if (USB_DeviceState != DEVICE_STATE_Configured)
     fa0:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <USB_DeviceState>
     fa4:	24 30       	cpi	r18, 0x04	; 4
     fa6:	31 f5       	brne	.+76     	; 0xff4 <send_system+0x60>
    report_extra_t r = {
     fa8:	22 e0       	ldi	r18, 0x02	; 2
     faa:	29 83       	std	Y+1, r18	; 0x01
        .usage = data - SYSTEM_POWER_DOWN + 1
     fac:	80 58       	subi	r24, 0x80	; 128
     fae:	91 09       	sbc	r25, r1
    report_extra_t r = {
     fb0:	9b 83       	std	Y+3, r25	; 0x03
     fb2:	8a 83       	std	Y+2, r24	; 0x02
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     fba:	8f ef       	ldi	r24, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fbc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fc0:	81 50       	subi	r24, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     fc2:	95 fd       	sbrc	r25, 5
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <send_system+0x3e>
     fc6:	95 ed       	ldi	r25, 0xD5	; 213
     fc8:	9a 95       	dec	r25
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <send_system+0x34>
     fcc:	00 00       	nop
     fce:	81 11       	cpse	r24, r1
     fd0:	f5 cf       	rjmp	.-22     	; 0xfbc <send_system+0x28>
     fd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
     fd6:	85 ff       	sbrs	r24, 5
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <send_system+0x60>
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	63 e0       	ldi	r22, 0x03	; 3
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	ce 01       	movw	r24, r28
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	0e 94 11 0c 	call	0x1822	; 0x1822 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fee:	8e 77       	andi	r24, 0x7E	; 126
     ff0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <send_mouse>:
{
    1000:	9c 01       	movw	r18, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1002:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    1006:	84 30       	cpi	r24, 0x04	; 4
    1008:	f9 f4       	brne	.+62     	; 0x1048 <send_mouse+0x48>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1010:	9f ef       	ldi	r25, 0xFF	; 255
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1012:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1016:	91 50       	subi	r25, 0x01	; 1
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1018:	85 fd       	sbrc	r24, 5
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <send_mouse+0x28>
    101c:	85 ed       	ldi	r24, 0xD5	; 213
    101e:	8a 95       	dec	r24
    1020:	f1 f7       	brne	.-4      	; 0x101e <send_mouse+0x1e>
    1022:	00 00       	nop
    1024:	91 11       	cpse	r25, r1
    1026:	f5 cf       	rjmp	.-22     	; 0x1012 <send_mouse+0x12>
    1028:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    if (!Endpoint_IsReadWriteAllowed()) return;
    102c:	85 ff       	sbrs	r24, 5
    102e:	0c c0       	rjmp	.+24     	; 0x1048 <send_mouse+0x48>
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	65 e0       	ldi	r22, 0x05	; 5
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	c9 01       	movw	r24, r18
    103a:	0e 94 11 0c 	call	0x1822	; 0x1822 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    103e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1042:	8e 77       	andi	r24, 0x7E	; 126
    1044:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    1048:	08 95       	ret

0000104a <send_keyboard>:
{
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1050:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	d1 f4       	brne	.+52     	; 0x108c <send_keyboard+0x42>
    if (keyboard_protocol && keyboard_nkro) {
    1058:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <keyboard_protocol>
    105c:	88 23       	and	r24, r24
    105e:	f1 f0       	breq	.+60     	; 0x109c <send_keyboard+0x52>
    1060:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <keyboard_nkro>
    1064:	88 23       	and	r24, r24
    1066:	d1 f0       	breq	.+52     	; 0x109c <send_keyboard+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1068:	85 e0       	ldi	r24, 0x05	; 5
    106a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    106e:	81 e8       	ldi	r24, 0x81	; 129
    1070:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(8);
    1072:	21 f0       	breq	.+8      	; 0x107c <send_keyboard+0x32>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1074:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1078:	95 ff       	sbrs	r25, 5
    107a:	0b c0       	rjmp	.+22     	; 0x1092 <send_keyboard+0x48>
    107c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	60 e2       	ldi	r22, 0x20	; 32
    1086:	70 e0       	ldi	r23, 0x00	; 0
        if (!Endpoint_IsReadWriteAllowed()) return;
    1088:	85 fd       	sbrc	r24, 5
    108a:	1a c0       	rjmp	.+52     	; 0x10c0 <send_keyboard+0x76>
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret
    1092:	9a e2       	ldi	r25, 0x2A	; 42
    1094:	9a 95       	dec	r25
    1096:	f1 f7       	brne	.-4      	; 0x1094 <send_keyboard+0x4a>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <send_keyboard+0x50>
    109a:	ea cf       	rjmp	.-44     	; 0x1070 <send_keyboard+0x26>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10a2:	81 e8       	ldi	r24, 0x81	; 129
    10a4:	81 50       	subi	r24, 0x01	; 1
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(80);
    10a6:	21 f0       	breq	.+8      	; 0x10b0 <send_keyboard+0x66>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10a8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ac:	95 ff       	sbrs	r25, 5
    10ae:	19 c0       	rjmp	.+50     	; 0x10e2 <send_keyboard+0x98>
    10b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed()) return;
    10b4:	85 ff       	sbrs	r24, 5
    10b6:	ea cf       	rjmp	.-44     	; 0x108c <send_keyboard+0x42>
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	68 e0       	ldi	r22, 0x08	; 8
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 11 0c 	call	0x1822	; 0x1822 <Endpoint_Write_Stream_LE>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ca:	8e 77       	andi	r24, 0x7E	; 126
    10cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    keyboard_report_sent = *report;
    10d0:	80 e2       	ldi	r24, 0x20	; 32
    10d2:	fe 01       	movw	r30, r28
    10d4:	a5 eb       	ldi	r26, 0xB5	; 181
    10d6:	b2 e0       	ldi	r27, 0x02	; 2
    10d8:	01 90       	ld	r0, Z+
    10da:	0d 92       	st	X+, r0
    10dc:	8a 95       	dec	r24
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <send_keyboard+0x8e>
    10e0:	d5 cf       	rjmp	.-86     	; 0x108c <send_keyboard+0x42>
    10e2:	ef e3       	ldi	r30, 0x3F	; 63
    10e4:	f1 e0       	ldi	r31, 0x01	; 1
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <send_keyboard+0x9c>
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <send_keyboard+0xa2>
    10ec:	00 00       	nop
    10ee:	da cf       	rjmp	.-76     	; 0x10a4 <send_keyboard+0x5a>

000010f0 <console_is_ready>:
{
    10f0:	cf 93       	push	r28
    if (!hid_listen_ready) {
    10f2:	c0 91 b3 01 	lds	r28, 0x01B3	; 0x8001b3 <hid_listen_ready.5132>
    10f6:	c1 11       	cpse	r28, r1
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <console_is_ready+0x20>
        if (timer_read32() < 2500)
    10fa:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <timer_read32>
    10fe:	64 3c       	cpi	r22, 0xC4	; 196
    1100:	79 40       	sbci	r23, 0x09	; 9
    1102:	81 05       	cpc	r24, r1
    1104:	91 05       	cpc	r25, r1
    1106:	20 f0       	brcs	.+8      	; 0x1110 <console_is_ready+0x20>
        hid_listen_ready = true;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <hid_listen_ready.5132>
    return true;
    110e:	c1 e0       	ldi	r28, 0x01	; 1
}
    1110:	8c 2f       	mov	r24, r28
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <sendchar>:

/*******************************************************************************
 * sendchar
 ******************************************************************************/
int8_t sendchar(uint8_t c)
{
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	d8 2f       	mov	r29, r24
    if (!(SREG & (1<<SREG_I)))
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	07 fe       	sbrs	r0, 7
    1126:	45 c0       	rjmp	.+138    	; 0x11b2 <sendchar+0x9c>
    if (USB_DeviceState != DEVICE_STATE_Configured && !ringbuf_is_full(&sendbuf))
    1128:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	71 f0       	breq	.+28     	; 0x114c <sendchar+0x36>
    1130:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sendbuf+0x2>
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <sendbuf+0x4>
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	82 23       	and	r24, r18
    1140:	93 23       	and	r25, r19
    1142:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <sendbuf+0x3>
    1146:	28 17       	cp	r18, r24
    1148:	19 06       	cpc	r1, r25
    114a:	99 f5       	brne	.+102    	; 0x11b2 <sendchar+0x9c>
    if (!console_is_ready() && !ringbuf_is_full(&sendbuf))
    114c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <console_is_ready>
    1150:	81 11       	cpse	r24, r1
    1152:	0e c0       	rjmp	.+28     	; 0x1170 <sendchar+0x5a>
    1154:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sendbuf+0x2>
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <sendbuf+0x4>
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	82 23       	and	r24, r18
    1164:	93 23       	and	r25, r19
    1166:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <sendbuf+0x3>
    116a:	28 17       	cp	r18, r24
    116c:	19 06       	cpc	r1, r25
    116e:	09 f5       	brne	.+66     	; 0x11b2 <sendchar+0x9c>
    uint16_t prev = timer_read();
    1170:	0e 94 77 1d 	call	0x3aee	; 0x3aee <timer_read>
    1174:	8c 01       	movw	r16, r24
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1176:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    117a:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    117c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1180:	89 2f       	mov	r24, r25
    1182:	81 70       	andi	r24, 0x01	; 1
    1184:	90 fd       	sbrc	r25, 0
    1186:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1188:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    118a:	84 e0       	ldi	r24, 0x04	; 4
    118c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    1190:	85 e0       	ldi	r24, 0x05	; 5
    1192:	f8 2e       	mov	r15, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1194:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (Endpoint_IsStalled() || !Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1198:	85 fd       	sbrc	r24, 5
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <sendchar+0x96>
				return ((UECONX & (1 << EPEN)) ? true : false);
    119c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11a0:	80 ff       	sbrs	r24, 0
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <sendchar+0x96>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11a4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    11a8:	87 fd       	sbrc	r24, 7
    11aa:	43 c0       	rjmp	.+134    	; 0x1232 <sendchar+0x11c>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ac:	cf 70       	andi	r28, 0x0F	; 15
    11ae:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sendbuf+0x2>
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9c 01       	movw	r18, r24
    11ba:	2f 5f       	subi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <sendbuf+0x4>
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	24 23       	and	r18, r20
    11c6:	35 23       	and	r19, r21
    11c8:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <sendbuf+0x3>
    if (ringbuf_is_full(buf)) {
    11cc:	42 17       	cp	r20, r18
    11ce:	13 06       	cpc	r1, r19
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <sendchar+0xbe>
    11d2:	7d c0       	rjmp	.+250    	; 0x12ce <sendchar+0x1b8>
    buf->buffer[buf->head] = data;
    11d4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <sendbuf>
    11d8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <sendbuf+0x1>
    11dc:	82 0f       	add	r24, r18
    11de:	93 1f       	adc	r25, r19
    11e0:	fc 01       	movw	r30, r24
    11e2:	d0 83       	st	Z, r29
    buf->head++;
    11e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <sendbuf+0x2>
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    buf->head &= buf->size_mask;
    11ea:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <sendbuf+0x4>
    11ee:	89 23       	and	r24, r25
    11f0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sendbuf+0x2>

    #ifdef CONSOLE_ENABLE
    console_putc(c);
    #endif

    return 0;
    11f4:	6c c0       	rjmp	.+216    	; 0x12ce <sendchar+0x1b8>
    uint8_t data = buf->buffer[buf->tail];
    11f6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <sendbuf>
    11fa:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <sendbuf+0x1>
    11fe:	e8 0f       	add	r30, r24
    1200:	f1 1d       	adc	r31, r1
    1202:	90 81       	ld	r25, Z
    buf->tail++;
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    buf->tail &= buf->size_mask;
    1206:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <sendbuf+0x4>
    120a:	82 23       	and	r24, r18
    120c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <sendbuf+0x3>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1210:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1214:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    1218:	85 fd       	sbrc	r24, 5
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <sendchar+0x11c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    121c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1220:	80 ff       	sbrs	r24, 0
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <sendchar+0x11c>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1224:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1228:	8e 77       	andi	r24, 0x7E	; 126
    122a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
            timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    122e:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <timeout.5138>
    return (buf->head == buf->tail);
    1232:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1236:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <sendbuf+0x2>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    123a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    123e:	28 17       	cp	r18, r24
    1240:	31 f1       	breq	.+76     	; 0x128e <sendchar+0x178>
    1242:	95 fd       	sbrc	r25, 5
    1244:	d8 cf       	rjmp	.-80     	; 0x11f6 <sendchar+0xe0>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	27 c0       	rjmp	.+78     	; 0x1298 <sendchar+0x182>
				UEDATX = Data;
    124a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    124e:	2f c0       	rjmp	.+94     	; 0x12ae <sendchar+0x198>
    return (((buf->head + 1) & buf->size_mask) == buf->tail);
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	2f 5f       	subi	r18, 0xFF	; 255
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <sendbuf+0x4>
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	24 23       	and	r18, r20
    125e:	35 23       	and	r19, r21
    if (ringbuf_is_full(&sendbuf) && timeout) {
    1260:	82 17       	cp	r24, r18
    1262:	13 06       	cpc	r1, r19
    1264:	09 f0       	breq	.+2      	; 0x1268 <sendchar+0x152>
    1266:	a2 cf       	rjmp	.-188    	; 0x11ac <sendchar+0x96>
    1268:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timeout.5138>
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <sendchar+0x15c>
    1270:	9d cf       	rjmp	.-198    	; 0x11ac <sendchar+0x96>
        uint16_t curr = timer_read();
    1272:	0e 94 77 1d 	call	0x3aee	; 0x3aee <timer_read>
    1276:	9c 01       	movw	r18, r24
        if (curr != prev) {
    1278:	80 17       	cp	r24, r16
    127a:	91 07       	cpc	r25, r17
    127c:	09 f4       	brne	.+2      	; 0x1280 <sendchar+0x16a>
    127e:	8a cf       	rjmp	.-236    	; 0x1194 <sendchar+0x7e>
            timeout--;
    1280:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeout.5138>
    1284:	91 50       	subi	r25, 0x01	; 1
    1286:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeout.5138>
        uint16_t curr = timer_read();
    128a:	89 01       	movw	r16, r18
    128c:	83 cf       	rjmp	.-250    	; 0x1194 <sendchar+0x7e>
    if (ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    128e:	95 ff       	sbrs	r25, 5
    1290:	da cf       	rjmp	.-76     	; 0x1246 <sendchar+0x130>
    1292:	d0 93 f1 00 	sts	0x00F1, r29	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
        done = true;
    1296:	91 e0       	ldi	r25, 0x01	; 1
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1298:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    129c:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    12a0:	53 2f       	mov	r21, r19
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    12a2:	45 2b       	or	r20, r21
    12a4:	79 f0       	breq	.+30     	; 0x12c4 <sendchar+0x1ae>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12a6:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12aa:	30 ff       	sbrs	r19, 0
    12ac:	0b c0       	rjmp	.+22     	; 0x12c4 <sendchar+0x1ae>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12ae:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    12b2:	35 fd       	sbrc	r19, 5
    12b4:	ca cf       	rjmp	.-108    	; 0x124a <sendchar+0x134>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b6:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ba:	3e 77       	andi	r19, 0x7E	; 126
    12bc:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        timeout = CONSOLE_TIMOUT; // re-enable retry only when host can receive
    12c0:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <timeout.5138>
    if (done) {
    12c4:	99 23       	and	r25, r25
    12c6:	21 f2       	breq	.-120    	; 0x1250 <sendchar+0x13a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12c8:	cf 70       	andi	r28, 0x0F	; 15
    12ca:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	08 95       	ret

000012dc <EVENT_USB_Device_Connect>:
    if (!USB_IsInitialized) {
    12dc:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <USB_IsInitialized>
    12e0:	81 11       	cpse	r24, r1
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <EVENT_USB_Device_Connect+0x10>
        USB_Disable();
    12e4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <USB_Disable>
        USB_Init();
    12e8:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <USB_Init>
}
    12ec:	08 95       	ret

000012ee <EVENT_USB_Device_Disconnect>:
    USB_IsInitialized = false;
    12ee:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <USB_IsInitialized>
}
    12f2:	08 95       	ret

000012f4 <EVENT_USB_Device_Reset>:
}
    12f4:	08 95       	ret

000012f6 <EVENT_USB_Device_ConfigurationChanged>:
				return Endpoint_ConfigureEndpoint_Prv(Number,
    12f6:	42 e0       	ldi	r20, 0x02	; 2
    12f8:	61 ec       	ldi	r22, 0xC1	; 193
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	0e 94 8d 0b 	call	0x171a	; 0x171a <Endpoint_ConfigureEndpoint_Prv>
    1300:	42 e0       	ldi	r20, 0x02	; 2
    1302:	61 ec       	ldi	r22, 0xC1	; 193
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	0e 94 8d 0b 	call	0x171a	; 0x171a <Endpoint_ConfigureEndpoint_Prv>
    130a:	42 e0       	ldi	r20, 0x02	; 2
    130c:	61 ec       	ldi	r22, 0xC1	; 193
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	0e 94 8d 0b 	call	0x171a	; 0x171a <Endpoint_ConfigureEndpoint_Prv>
    1314:	42 e2       	ldi	r20, 0x22	; 34
    1316:	61 ec       	ldi	r22, 0xC1	; 193
    1318:	84 e0       	ldi	r24, 0x04	; 4
    131a:	0e 94 8d 0b 	call	0x171a	; 0x171a <Endpoint_ConfigureEndpoint_Prv>
    131e:	42 e2       	ldi	r20, 0x22	; 34
    1320:	61 ec       	ldi	r22, 0xC1	; 193
    1322:	85 e0       	ldi	r24, 0x05	; 5
    1324:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <Endpoint_ConfigureEndpoint_Prv>

00001328 <EVENT_USB_Device_ControlRequest>:
    switch (USB_ControlRequest.bRequest)
    1328:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <USB_ControlRequest+0x1>
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	09 f4       	brne	.+2      	; 0x1332 <EVENT_USB_Device_ControlRequest+0xa>
    1330:	55 c0       	rjmp	.+170    	; 0x13dc <EVENT_USB_Device_ControlRequest+0xb4>
    1332:	30 f4       	brcc	.+12     	; 0x1340 <EVENT_USB_Device_ControlRequest+0x18>
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	71 f1       	breq	.+92     	; 0x1394 <EVENT_USB_Device_ControlRequest+0x6c>
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	09 f4       	brne	.+2      	; 0x133e <EVENT_USB_Device_ControlRequest+0x16>
    133c:	91 c0       	rjmp	.+290    	; 0x1460 <EVENT_USB_Device_ControlRequest+0x138>
    133e:	08 95       	ret
    1340:	8a 30       	cpi	r24, 0x0A	; 10
    1342:	09 f4       	brne	.+2      	; 0x1346 <EVENT_USB_Device_ControlRequest+0x1e>
    1344:	7d c0       	rjmp	.+250    	; 0x1440 <EVENT_USB_Device_ControlRequest+0x118>
    1346:	8b 30       	cpi	r24, 0x0B	; 11
    1348:	09 f4       	brne	.+2      	; 0x134c <EVENT_USB_Device_ControlRequest+0x24>
    134a:	63 c0       	rjmp	.+198    	; 0x1412 <EVENT_USB_Device_ControlRequest+0xea>
    134c:	89 30       	cpi	r24, 0x09	; 9
    134e:	09 f0       	breq	.+2      	; 0x1352 <EVENT_USB_Device_ControlRequest+0x2a>
    1350:	44 c0       	rjmp	.+136    	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1352:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>
    1356:	81 32       	cpi	r24, 0x21	; 33
    1358:	09 f0       	breq	.+2      	; 0x135c <EVENT_USB_Device_ControlRequest+0x34>
    135a:	3f c0       	rjmp	.+126    	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
                switch (USB_ControlRequest.wIndex) {
    135c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <USB_ControlRequest+0x4>
    1360:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <USB_ControlRequest+0x5>
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	11 f0       	breq	.+4      	; 0x136c <EVENT_USB_Device_ControlRequest+0x44>
    1368:	04 97       	sbiw	r24, 0x04	; 4
    136a:	b9 f5       	brne	.+110    	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    136c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1370:	87 7f       	andi	r24, 0xF7	; 247
    1372:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1376:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsOUTReceived())) {
    137a:	82 ff       	sbrs	r24, 2
    137c:	2a c0       	rjmp	.+84     	; 0x13d2 <EVENT_USB_Device_ControlRequest+0xaa>
				return UEDATX;
    137e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                    keyboard_led_stats = Endpoint_Read_8();
    1382:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <keyboard_led_stats>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1386:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    138a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    138c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1390:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <Endpoint_ClearStatusStage>
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1394:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>
    1398:	81 3a       	cpi	r24, 0xA1	; 161
    139a:	f9 f4       	brne	.+62     	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    139c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13a0:	87 7f       	andi	r24, 0xF7	; 247
    13a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                switch (USB_ControlRequest.wIndex) {
    13a6:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <USB_ControlRequest+0x4>
    13aa:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <USB_ControlRequest+0x5>
    13ae:	89 2b       	or	r24, r25
    13b0:	61 f4       	brne	.+24     	; 0x13ca <EVENT_USB_Device_ControlRequest+0xa2>
                    ReportSize = sizeof(keyboard_report_sent);
    13b2:	60 e2       	ldi	r22, 0x20	; 32
                    ReportData = (uint8_t*)&keyboard_report_sent;
    13b4:	85 eb       	ldi	r24, 0xB5	; 181
    13b6:	92 e0       	ldi	r25, 0x02	; 2
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13c2:	8b 77       	andi	r24, 0x7B	; 123
    13c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13c8:	08 95       	ret
    uint8_t  ReportSize = 0;
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* ReportData = NULL;
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	f3 cf       	rjmp	.-26     	; 0x13b8 <EVENT_USB_Device_ControlRequest+0x90>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    13d2:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    13d6:	81 11       	cpse	r24, r1
    13d8:	ce cf       	rjmp	.-100    	; 0x1376 <EVENT_USB_Device_ControlRequest+0x4e>
}
    13da:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13dc:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>
    13e0:	81 3a       	cpi	r24, 0xA1	; 161
    13e2:	d9 f7       	brne	.-10     	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    13e4:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <USB_ControlRequest+0x4>
    13e8:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <USB_ControlRequest+0x5>
    13ec:	89 2b       	or	r24, r25
    13ee:	a9 f7       	brne	.-22     	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    13f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13f4:	87 7f       	andi	r24, 0xF7	; 247
    13f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    while (!(Endpoint_IsINReady()));
    13fe:	80 ff       	sbrs	r24, 0
    1400:	fc cf       	rjmp	.-8      	; 0x13fa <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1402:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <keyboard_protocol>
				UEDATX = Data;
    1406:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    140a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    140e:	8e 77       	andi	r24, 0x7E	; 126
    1410:	bd cf       	rjmp	.-134    	; 0x138c <EVENT_USB_Device_ControlRequest+0x64>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1412:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>
    1416:	81 32       	cpi	r24, 0x21	; 33
    1418:	01 f7       	brne	.-64     	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    141a:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <USB_ControlRequest+0x4>
    141e:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <USB_ControlRequest+0x5>
    1422:	89 2b       	or	r24, r25
    1424:	d1 f6       	brne	.-76     	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
				UEINTX &= ~(1 << RXSTPI);
    1426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    142a:	87 7f       	andi	r24, 0xF7	; 247
    142c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                    Endpoint_ClearStatusStage();
    1430:	0e 94 c1 0b 	call	0x1782	; 0x1782 <Endpoint_ClearStatusStage>
                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1434:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <USB_ControlRequest+0x2>
    1438:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <keyboard_protocol>
                    clear_keyboard();
    143c:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <clear_keyboard>
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1440:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>
    1444:	81 32       	cpi	r24, 0x21	; 33
    1446:	49 f6       	brne	.-110    	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
    1448:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    144c:	87 7f       	andi	r24, 0xF7	; 247
    144e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                Endpoint_ClearStatusStage();
    1452:	0e 94 c1 0b 	call	0x1782	; 0x1782 <Endpoint_ClearStatusStage>
                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1456:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <USB_ControlRequest+0x3>
    145a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <keyboard_idle>
    145e:	08 95       	ret
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1460:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>
    1464:	81 3a       	cpi	r24, 0xA1	; 161
    1466:	09 f0       	breq	.+2      	; 0x146a <EVENT_USB_Device_ControlRequest+0x142>
    1468:	b8 cf       	rjmp	.-144    	; 0x13da <EVENT_USB_Device_ControlRequest+0xb2>
    146a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    146e:	87 7f       	andi	r24, 0xF7	; 247
    1470:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1474:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                while (!(Endpoint_IsINReady()));
    1478:	80 ff       	sbrs	r24, 0
    147a:	fc cf       	rjmp	.-8      	; 0x1474 <EVENT_USB_Device_ControlRequest+0x14c>
                Endpoint_Write_8(keyboard_idle);
    147c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <keyboard_idle>
    1480:	c2 cf       	rjmp	.-124    	; 0x1406 <EVENT_USB_Device_ControlRequest+0xde>

00001482 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1482:	08 95       	ret

00001484 <hook_late_init>:
    1484:	08 95       	ret

00001486 <hook_usb_suspend_entry>:
 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    // Turn off LED to save power and keep its status to resotre it later.
    // LED status will be updated by keyboard_task() in main loop hopefully.
    _led_stats = keyboard_led_stats;
    1486:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <keyboard_led_stats>
    148a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <_led_stats>
    keyboard_led_stats = 0;
    148e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <keyboard_led_stats>

    // Calling long task here can prevent USB state transition

    matrix_clear();
    1492:	0e 94 8a 07 	call	0xf14	; 0xf14 <matrix_clear>
    clear_keyboard();
    1496:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <clear_keyboard>

0000149a <EVENT_USB_Device_Suspend>:
    hook_usb_suspend_entry();
    149a:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <hook_usb_suspend_entry>

0000149e <hook_usb_suspend_loop>:
__attribute__((weak))
void hook_usb_suspend_loop(void)
{
#ifndef TMK_LUFA_DEBUG_UART
    // This corrupts debug print when suspend
    suspend_power_down();
    149e:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <suspend_power_down>
#endif
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    14a2:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <USB_Device_RemoteWakeupEnabled>
    14a6:	88 23       	and	r24, r24
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <hook_usb_suspend_loop+0x16>
    14aa:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <suspend_wakeup_condition>
    14ae:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    14b0:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <USB_Device_SendRemoteWakeup>
    }
}
    14b4:	08 95       	ret

000014b6 <hook_usb_wakeup>:

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    14b6:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
#endif

    // Restore LED status and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    14ba:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_led_stats>
    14be:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <keyboard_led_stats>

    // Calling long task here can prevent USB state transition
}
    14c2:	08 95       	ret

000014c4 <EVENT_USB_Device_WakeUp>:
    hook_usb_wakeup();
    14c4:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <hook_usb_wakeup>

000014c8 <hook_usb_startup_wait_loop>:
    14c8:	08 95       	ret

000014ca <main>:
    MCUSR &= ~(1 << WDRF);
    14ca:	84 b7       	in	r24, 0x34	; 52
    14cc:	87 7f       	andi	r24, 0xF7	; 247
    14ce:	84 bf       	out	0x34, r24	; 52
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	a8 95       	wdr
    14d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14da:	88 61       	ori	r24, 0x18	; 24
    14dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    14e4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14f2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    14f6:	0f be       	out	0x3f, r0	; 63
    print_set_sendchar(sendchar);
    14f8:	8b e8       	ldi	r24, 0x8B	; 139
    14fa:	98 e0       	ldi	r25, 0x08	; 8
    14fc:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <print_set_sendchar>
    host_set_driver(&lufa_driver);
    1500:	8b e0       	ldi	r24, 0x0B	; 11
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 03 10 	call	0x2006	; 0x2006 <host_set_driver>
    print("\n\nTMK:" STR(TMK_VERSION) "/LUFA\n\n");
    1508:	8b e5       	ldi	r24, 0x5B	; 91
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    hook_early_init();
    1510:	0e 94 41 0a 	call	0x1482	; 0x1482 <hook_early_init>
    keyboard_setup();
    1514:	0e 94 c5 10 	call	0x218a	; 0x218a <keyboard_setup>
    USB_Disable();
    1518:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <USB_Disable>
    USB_Init();
    151c:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <USB_Init>
    sei();
    1520:	78 94       	sei
    keyboard_init();
    1522:	0e 94 c7 10 	call	0x218e	; 0x218e <keyboard_init>
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1526:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	09 f0       	breq	.+2      	; 0x1530 <main+0x66>
    152e:	44 c0       	rjmp	.+136    	; 0x15b8 <main+0xee>
    print("\nUSB configured.\n");
    1530:	89 e4       	ldi	r24, 0x49	; 73
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    hook_late_init();
    1538:	0e 94 42 0a 	call	0x1484	; 0x1484 <hook_late_init>
    print("\nKeyboard start.\n");
    153c:	87 e3       	ldi	r24, 0x37	; 55
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1544:	c4 e0       	ldi	r28, 0x04	; 4
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1546:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    154a:	85 30       	cpi	r24, 0x05	; 5
    154c:	c1 f1       	breq	.+112    	; 0x15be <main+0xf4>
        keyboard_task();
    154e:	0e 94 cb 10 	call	0x2196	; 0x2196 <keyboard_task>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1552:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1556:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    if (fn == USB_Device_GetFrameNumber()) {
    155a:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <fn.5164>
    155e:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <fn.5164+0x1>
    1562:	28 17       	cp	r18, r24
    1564:	39 07       	cpc	r19, r25
    1566:	79 f3       	breq	.-34     	; 0x1546 <main+0x7c>
    1568:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    156c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    fn = USB_Device_GetFrameNumber();
    1570:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <fn.5164+0x1>
    1574:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <fn.5164>
    if (!console_is_ready())
    1578:	0e 94 78 08 	call	0x10f0	; 0x10f0 <console_is_ready>
    157c:	88 23       	and	r24, r24
    157e:	19 f3       	breq	.-58     	; 0x1546 <main+0x7c>
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1580:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	f9 f6       	brne	.-66     	; 0x1546 <main+0x7c>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1588:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    158c:	9f 70       	andi	r25, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    158e:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1592:	82 2f       	mov	r24, r18
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	20 fd       	sbrc	r18, 0
    1598:	80 e8       	ldi	r24, 0x80	; 128
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    159a:	89 2b       	or	r24, r25
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    159c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    15a0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    15a4:	90 ff       	sbrs	r25, 0
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <main+0xe6>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    15a8:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    15ac:	97 fd       	sbrc	r25, 7
    15ae:	26 c0       	rjmp	.+76     	; 0x15fc <main+0x132>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15b0:	8f 70       	andi	r24, 0x0F	; 15
    15b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    15b6:	c7 cf       	rjmp	.-114    	; 0x1546 <main+0x7c>
        hook_usb_startup_wait_loop();
    15b8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <hook_usb_startup_wait_loop>
    15bc:	b4 cf       	rjmp	.-152    	; 0x1526 <main+0x5c>
            hook_usb_suspend_loop();
    15be:	0e 94 4f 0a 	call	0x149e	; 0x149e <hook_usb_suspend_loop>
    15c2:	c1 cf       	rjmp	.-126    	; 0x1546 <main+0x7c>
    uint8_t data = buf->buffer[buf->tail];
    15c4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <sendbuf>
    15c8:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <sendbuf+0x1>
    15cc:	e9 0f       	add	r30, r25
    15ce:	f1 1d       	adc	r31, r1
    15d0:	20 81       	ld	r18, Z
    buf->tail++;
    15d2:	9f 5f       	subi	r25, 0xFF	; 255
    buf->tail &= buf->size_mask;
    15d4:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <sendbuf+0x4>
    15d8:	93 23       	and	r25, r19
    15da:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sendbuf+0x3>
				UEDATX = Data;
    15de:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15e2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (!Endpoint_IsReadWriteAllowed() && Endpoint_IsINReady()) {
    15e6:	95 fd       	sbrc	r25, 5
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <main+0x132>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15ea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15ee:	90 ff       	sbrs	r25, 0
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <main+0x132>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15f2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15f6:	9e 77       	andi	r25, 0x7E	; 126
    15f8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    return (buf->head == buf->tail);
    15fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <sendbuf+0x3>
    while (!ringbuf_is_empty(&sendbuf) && Endpoint_IsReadWriteAllowed()) {
    1600:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <sendbuf+0x2>
    1604:	29 17       	cp	r18, r25
    1606:	21 f0       	breq	.+8      	; 0x1610 <main+0x146>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1608:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    160c:	25 fd       	sbrc	r18, 5
    160e:	da cf       	rjmp	.-76     	; 0x15c4 <main+0xfa>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1610:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1614:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1618:	39 2f       	mov	r19, r25
    if (Endpoint_BytesInEndpoint() && Endpoint_IsINReady()) {
    161a:	23 2b       	or	r18, r19
    161c:	49 f2       	breq	.-110    	; 0x15b0 <main+0xe6>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    161e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1622:	90 ff       	sbrs	r25, 0
    1624:	c5 cf       	rjmp	.-118    	; 0x15b0 <main+0xe6>
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1626:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        while (Endpoint_IsReadWriteAllowed()) {
    162a:	95 fd       	sbrc	r25, 5
    162c:	06 c0       	rjmp	.+12     	; 0x163a <main+0x170>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    162e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1632:	9e 77       	andi	r25, 0x7E	; 126
    1634:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1638:	bb cf       	rjmp	.-138    	; 0x15b0 <main+0xe6>
				UEDATX = Data;
    163a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    163e:	f3 cf       	rjmp	.-26     	; 0x1626 <main+0x15c>

00001640 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1640:	29 2f       	mov	r18, r25
    1642:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1644:	23 30       	cpi	r18, 0x03	; 3
    1646:	31 05       	cpc	r19, r1
    1648:	21 f1       	breq	.+72     	; 0x1692 <CALLBACK_USB_GetDescriptor+0x52>
    164a:	68 f4       	brcc	.+26     	; 0x1666 <CALLBACK_USB_GetDescriptor+0x26>
    164c:	21 30       	cpi	r18, 0x01	; 1
    164e:	31 05       	cpc	r19, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <CALLBACK_USB_GetDescriptor+0x14>
    1652:	43 c0       	rjmp	.+134    	; 0x16da <CALLBACK_USB_GetDescriptor+0x9a>
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <CALLBACK_USB_GetDescriptor+0x1c>
    165a:	44 c0       	rjmp	.+136    	; 0x16e4 <CALLBACK_USB_GetDescriptor+0xa4>
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	26 c0       	rjmp	.+76     	; 0x16b2 <CALLBACK_USB_GetDescriptor+0x72>
    1666:	21 32       	cpi	r18, 0x21	; 33
    1668:	31 05       	cpc	r19, r1
    166a:	51 f1       	breq	.+84     	; 0x16c0 <CALLBACK_USB_GetDescriptor+0x80>
    166c:	22 32       	cpi	r18, 0x22	; 34
    166e:	31 05       	cpc	r19, r1
    1670:	a9 f7       	brne	.-22     	; 0x165c <CALLBACK_USB_GetDescriptor+0x1c>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    1672:	65 30       	cpi	r22, 0x05	; 5
    1674:	71 05       	cpc	r23, r1
    1676:	90 f7       	brcc	.-28     	; 0x165c <CALLBACK_USB_GetDescriptor+0x1c>
    1678:	fb 01       	movw	r30, r22
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	e4 59       	subi	r30, 0x94	; 148
    1680:	fe 4f       	sbci	r31, 0xFE	; 254
    1682:	20 81       	ld	r18, Z
    1684:	31 81       	ldd	r19, Z+1	; 0x01
    1686:	69 59       	subi	r22, 0x99	; 153
    1688:	7e 4f       	sbci	r23, 0xFE	; 254
    168a:	fb 01       	movw	r30, r22
    168c:	80 81       	ld	r24, Z
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	10 c0       	rjmp	.+32     	; 0x16b2 <CALLBACK_USB_GetDescriptor+0x72>
            switch (DescriptorIndex )
    1692:	99 27       	eor	r25, r25
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	91 05       	cpc	r25, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <CALLBACK_USB_GetDescriptor+0x7a>
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	29 f0       	breq	.+10     	; 0x16a8 <CALLBACK_USB_GetDescriptor+0x68>
    169e:	02 97       	sbiw	r24, 0x02	; 2
    16a0:	e9 f6       	brne	.-70     	; 0x165c <CALLBACK_USB_GetDescriptor+0x1c>
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    16a2:	e1 e7       	ldi	r30, 0x71	; 113
    16a4:	f1 e0       	ldi	r31, 0x01	; 1
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <CALLBACK_USB_GetDescriptor+0x6c>
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    16a8:	ef ea       	ldi	r30, 0xAF	; 175
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    16ac:	84 91       	lpm	r24, Z
    16ae:	90 e0       	ldi	r25, 0x00	; 0
                    Address = &ProductString;
    16b0:	9f 01       	movw	r18, r30
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    16b2:	fa 01       	movw	r30, r20
    16b4:	31 83       	std	Z+1, r19	; 0x01
    16b6:	20 83       	st	Z, r18
    return Size;
}
    16b8:	08 95       	ret
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    16ba:	ef e9       	ldi	r30, 0x9F	; 159
    16bc:	f1 e0       	ldi	r31, 0x01	; 1
    16be:	f6 cf       	rjmp	.-20     	; 0x16ac <CALLBACK_USB_GetDescriptor+0x6c>
            switch (wIndex) {
    16c0:	65 30       	cpi	r22, 0x05	; 5
    16c2:	71 05       	cpc	r23, r1
    16c4:	58 f6       	brcc	.-106    	; 0x165c <CALLBACK_USB_GetDescriptor+0x1c>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	fb 01       	movw	r30, r22
    16cc:	ea 58       	subi	r30, 0x8A	; 138
    16ce:	fe 4f       	sbci	r31, 0xFE	; 254
    16d0:	20 81       	ld	r18, Z
    16d2:	31 81       	ldd	r19, Z+1	; 0x01
    switch (DescriptorType)
    16d4:	89 e0       	ldi	r24, 0x09	; 9
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	ec cf       	rjmp	.-40     	; 0x16b2 <CALLBACK_USB_GetDescriptor+0x72>
            Size    = sizeof(USB_Descriptor_Device_t);
    16da:	82 e1       	ldi	r24, 0x12	; 18
    16dc:	90 e0       	ldi	r25, 0x00	; 0
            Address = &DeviceDescriptor;
    16de:	20 e4       	ldi	r18, 0x40	; 64
    16e0:	32 e0       	ldi	r19, 0x02	; 2
    16e2:	e7 cf       	rjmp	.-50     	; 0x16b2 <CALLBACK_USB_GetDescriptor+0x72>
            Size    = sizeof(USB_Descriptor_Configuration_t);
    16e4:	8d e8       	ldi	r24, 0x8D	; 141
    16e6:	90 e0       	ldi	r25, 0x00	; 0
            Address = &ConfigurationDescriptor;
    16e8:	23 eb       	ldi	r18, 0xB3	; 179
    16ea:	31 e0       	ldi	r19, 0x01	; 1
    16ec:	e2 cf       	rjmp	.-60     	; 0x16b2 <CALLBACK_USB_GetDescriptor+0x72>

000016ee <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    16ee:	80 e1       	ldi	r24, 0x10	; 16
    16f0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    16f2:	82 e1       	ldi	r24, 0x12	; 18
    16f4:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    16f6:	09 b4       	in	r0, 0x29	; 41
    16f8:	00 fe       	sbrs	r0, 0
    16fa:	fd cf       	rjmp	.-6      	; 0x16f6 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    16fc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1700:	8f 7d       	andi	r24, 0xDF	; 223
    1702:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1706:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    170a:	82 60       	ori	r24, 0x02	; 2
    170c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	while (UDCON & (1 << RMWKUP));
    1710:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1714:	81 fd       	sbrc	r24, 1
    1716:	fc cf       	rjmp	.-8      	; 0x1710 <USB_Device_SendRemoteWakeup+0x22>
}
    1718:	08 95       	ret

0000171a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    171a:	98 2f       	mov	r25, r24
    171c:	97 30       	cpi	r25, 0x07	; 7
    171e:	28 f0       	brcs	.+10     	; 0x172a <Endpoint_ConfigureEndpoint_Prv+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1720:	8f 70       	andi	r24, 0x0F	; 15
    1722:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	08 95       	ret
    172a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
    172e:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
    1730:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
    1732:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
    1734:	98 17       	cp	r25, r24
    1736:	31 f0       	breq	.+12     	; 0x1744 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
    1738:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
    173c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
    1740:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
    1744:	21 fd       	sbrc	r18, 1
    1746:	02 c0       	rjmp	.+4      	; 0x174c <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1748:	9f 5f       	subi	r25, 0xFF	; 255
    174a:	e8 cf       	rjmp	.-48     	; 0x171c <Endpoint_ConfigureEndpoint_Prv+0x2>
				UECONX &= ~(1 << EPEN);
    174c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1750:	3e 7f       	andi	r19, 0xFE	; 254
    1752:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
    1756:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    175a:	3d 7f       	andi	r19, 0xFD	; 253
    175c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
    1760:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1764:	31 60       	ori	r19, 0x01	; 1
    1766:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
    176a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
    176e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
    1772:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1776:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
    177a:	27 fd       	sbrc	r18, 7
    177c:	e5 cf       	rjmp	.-54     	; 0x1748 <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
    177e:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    1780:	08 95       	ret

00001782 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1782:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>
    1786:	87 ff       	sbrs	r24, 7
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <Endpoint_ClearStatusStage+0x2e>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    178a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    178e:	82 ff       	sbrs	r24, 2
    1790:	06 c0       	rjmp	.+12     	; 0x179e <Endpoint_ClearStatusStage+0x1c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1792:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1796:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1798:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    179e:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    17a2:	81 11       	cpse	r24, r1
    17a4:	f2 cf       	rjmp	.-28     	; 0x178a <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
    17a6:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    17a8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    17ac:	88 23       	and	r24, r24
    17ae:	d9 f3       	breq	.-10     	; 0x17a6 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    17b4:	80 ff       	sbrs	r24, 0
    17b6:	f8 cf       	rjmp	.-16     	; 0x17a8 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17bc:	8e 77       	andi	r24, 0x7E	; 126
    17be:	ec cf       	rjmp	.-40     	; 0x1798 <Endpoint_ClearStatusStage+0x16>

000017c0 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    17c0:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    17c4:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    17c8:	95 e6       	ldi	r25, 0x65	; 101
    17ca:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17cc:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    17d0:	82 2f       	mov	r24, r18
    17d2:	81 70       	andi	r24, 0x01	; 1
    17d4:	20 ff       	sbrs	r18, 0
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <Endpoint_WaitUntilReady+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    17dc:	80 ff       	sbrs	r24, 0
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <Endpoint_WaitUntilReady+0x2c>
			  return ENDPOINT_READYWAIT_NoError;
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17e4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    17e8:	22 fd       	sbrc	r18, 2
    17ea:	1a c0       	rjmp	.+52     	; 0x1820 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17ec:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17f0:	88 23       	and	r24, r24
    17f2:	89 f0       	breq	.+34     	; 0x1816 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17f4:	85 30       	cpi	r24, 0x05	; 5
    17f6:	89 f0       	breq	.+34     	; 0x181a <Endpoint_WaitUntilReady+0x5a>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    17fc:	85 fd       	sbrc	r24, 5
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <Endpoint_WaitUntilReady+0x5e>
    1800:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1804:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1808:	42 17       	cp	r20, r18
    180a:	53 07       	cpc	r21, r19
    180c:	f9 f2       	breq	.-66     	; 0x17cc <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    180e:	91 50       	subi	r25, 0x01	; 1
    1810:	e1 f6       	brne	.-72     	; 0x17ca <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1812:	84 e0       	ldi	r24, 0x04	; 4
    1814:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    181e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
    1820:	08 95       	ret

00001822 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	6c 01       	movw	r12, r24
    1836:	eb 01       	movw	r28, r22
    1838:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    183a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Endpoint_WaitUntilReady>
    183e:	f8 2e       	mov	r15, r24
    1840:	81 11       	cpse	r24, r1
    1842:	23 c0       	rjmp	.+70     	; 0x188a <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1844:	01 15       	cp	r16, r1
    1846:	11 05       	cpc	r17, r1
    1848:	39 f0       	breq	.+14     	; 0x1858 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    184a:	f8 01       	movw	r30, r16
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	c8 1b       	sub	r28, r24
    1852:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1854:	c8 0e       	add	r12, r24
    1856:	d9 1e       	adc	r13, r25
{
    1858:	b1 2c       	mov	r11, r1
    185a:	a1 2c       	mov	r10, r1
	}

	while (Length)
    185c:	20 97       	sbiw	r28, 0x00	; 0
    185e:	a9 f0       	breq	.+42     	; 0x188a <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1864:	85 fd       	sbrc	r24, 5
    1866:	22 c0       	rjmp	.+68     	; 0x18ac <Endpoint_Write_Stream_LE+0x8a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1868:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    186c:	8e 77       	andi	r24, 0x7E	; 126
    186e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1872:	01 15       	cp	r16, r1
    1874:	11 05       	cpc	r17, r1
    1876:	a1 f0       	breq	.+40     	; 0x18a0 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
    1878:	f8 01       	movw	r30, r16
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	a8 0e       	add	r10, r24
    1880:	b9 1e       	adc	r11, r25
    1882:	b1 82       	std	Z+1, r11	; 0x01
    1884:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1886:	85 e0       	ldi	r24, 0x05	; 5
    1888:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    188a:	8f 2d       	mov	r24, r15
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	df 90       	pop	r13
    1898:	cf 90       	pop	r12
    189a:	bf 90       	pop	r11
    189c:	af 90       	pop	r10
    189e:	08 95       	ret
			if ((ErrorCode = Endpoint_WaitUntilReady()))
    18a0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Endpoint_WaitUntilReady>
    18a4:	88 23       	and	r24, r24
    18a6:	d1 f2       	breq	.-76     	; 0x185c <Endpoint_Write_Stream_LE+0x3a>
    18a8:	f8 2e       	mov	r15, r24
    18aa:	ef cf       	rjmp	.-34     	; 0x188a <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
    18ac:	f6 01       	movw	r30, r12
    18ae:	81 91       	ld	r24, Z+
    18b0:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
    18b6:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    18b8:	ff ef       	ldi	r31, 0xFF	; 255
    18ba:	af 1a       	sub	r10, r31
    18bc:	bf 0a       	sbc	r11, r31
    18be:	ce cf       	rjmp	.-100    	; 0x185c <Endpoint_Write_Stream_LE+0x3a>

000018c0 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    18c0:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    18c2:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <USB_ControlRequest+0x6>
    18c6:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <USB_ControlRequest+0x7>
    18ca:	86 17       	cp	r24, r22
    18cc:	97 07       	cpc	r25, r23
    18ce:	a0 f0       	brcs	.+40     	; 0x18f8 <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18d0:	61 15       	cp	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	29 f4       	brne	.+10     	; 0x18e0 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18d6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18da:	9e 77       	andi	r25, 0x7E	; 126
    18dc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18e0:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18e2:	61 15       	cp	r22, r1
    18e4:	71 05       	cpc	r23, r1
    18e6:	51 f4       	brne	.+20     	; 0x18fc <Endpoint_Write_Control_Stream_LE+0x3c>
    18e8:	91 11       	cpse	r25, r1
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    18f0:	82 ff       	sbrs	r24, 2
    18f2:	34 c0       	rjmp	.+104    	; 0x195c <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	08 95       	ret
    18f8:	bc 01       	movw	r22, r24
    18fa:	f2 cf       	rjmp	.-28     	; 0x18e0 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18fc:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1900:	88 23       	and	r24, r24
    1902:	c1 f1       	breq	.+112    	; 0x1974 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1904:	85 30       	cpi	r24, 0x05	; 5
    1906:	c1 f1       	breq	.+112    	; 0x1978 <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1908:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    190c:	83 fd       	sbrc	r24, 3
    190e:	30 c0       	rjmp	.+96     	; 0x1970 <Endpoint_Write_Control_Stream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1910:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1914:	82 fd       	sbrc	r24, 2
    1916:	ea cf       	rjmp	.-44     	; 0x18ec <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1918:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    191c:	80 ff       	sbrs	r24, 0
    191e:	e1 cf       	rjmp	.-62     	; 0x18e2 <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1920:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1924:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1928:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    192a:	61 15       	cp	r22, r1
    192c:	71 05       	cpc	r23, r1
    192e:	19 f0       	breq	.+6      	; 0x1936 <Endpoint_Write_Control_Stream_LE+0x76>
    1930:	28 30       	cpi	r18, 0x08	; 8
    1932:	31 05       	cpc	r19, r1
    1934:	58 f0       	brcs	.+22     	; 0x194c <Endpoint_Write_Control_Stream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	28 30       	cpi	r18, 0x08	; 8
    193a:	31 05       	cpc	r19, r1
    193c:	09 f0       	breq	.+2      	; 0x1940 <Endpoint_Write_Control_Stream_LE+0x80>
    193e:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1940:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1944:	2e 77       	andi	r18, 0x7E	; 126
    1946:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    194a:	cb cf       	rjmp	.-106    	; 0x18e2 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    194c:	81 91       	ld	r24, Z+
				UEDATX = Data;
    194e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
    1952:	61 50       	subi	r22, 0x01	; 1
    1954:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	e7 cf       	rjmp	.-50     	; 0x192a <Endpoint_Write_Control_Stream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    195c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1960:	88 23       	and	r24, r24
    1962:	41 f0       	breq	.+16     	; 0x1974 <Endpoint_Write_Control_Stream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1964:	85 30       	cpi	r24, 0x05	; 5
    1966:	41 f0       	breq	.+16     	; 0x1978 <Endpoint_Write_Control_Stream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1968:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    196c:	83 ff       	sbrs	r24, 3
    196e:	be cf       	rjmp	.-132    	; 0x18ec <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1970:	81 e0       	ldi	r24, 0x01	; 1
}
    1972:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	08 95       	ret

0000197c <Endpoint_Write_Control_PStream_LE>:
{
    197c:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
    197e:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <USB_ControlRequest+0x6>
    1982:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <USB_ControlRequest+0x7>
    1986:	86 17       	cp	r24, r22
    1988:	97 07       	cpc	r25, r23
    198a:	a0 f0       	brcs	.+40     	; 0x19b4 <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
    198c:	61 15       	cp	r22, r1
    198e:	71 05       	cpc	r23, r1
    1990:	29 f4       	brne	.+10     	; 0x199c <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1992:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1996:	8e 77       	andi	r24, 0x7E	; 126
    1998:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    199c:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
    199e:	61 15       	cp	r22, r1
    19a0:	71 05       	cpc	r23, r1
    19a2:	51 f4       	brne	.+20     	; 0x19b8 <Endpoint_Write_Control_PStream_LE+0x3c>
    19a4:	91 11       	cpse	r25, r1
    19a6:	08 c0       	rjmp	.+16     	; 0x19b8 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
    19ac:	82 ff       	sbrs	r24, 2
    19ae:	35 c0       	rjmp	.+106    	; 0x1a1a <Endpoint_Write_Control_PStream_LE+0x9e>
	return ENDPOINT_RWCSTREAM_NoError;
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	08 95       	ret
    19b4:	bc 01       	movw	r22, r24
    19b6:	f2 cf       	rjmp	.-28     	; 0x199c <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19b8:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19bc:	88 23       	and	r24, r24
    19be:	c9 f1       	breq	.+114    	; 0x1a32 <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19c0:	85 30       	cpi	r24, 0x05	; 5
    19c2:	c9 f1       	breq	.+114    	; 0x1a36 <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    19c8:	83 fd       	sbrc	r24, 3
    19ca:	31 c0       	rjmp	.+98     	; 0x1a2e <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    19d0:	82 fd       	sbrc	r24, 2
    19d2:	ea cf       	rjmp	.-44     	; 0x19a8 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    19d8:	80 ff       	sbrs	r24, 0
    19da:	e1 cf       	rjmp	.-62     	; 0x199e <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19dc:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    19e0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    19e4:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19e6:	61 15       	cp	r22, r1
    19e8:	71 05       	cpc	r23, r1
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <Endpoint_Write_Control_PStream_LE+0x76>
    19ec:	28 30       	cpi	r18, 0x08	; 8
    19ee:	31 05       	cpc	r19, r1
    19f0:	58 f0       	brcs	.+22     	; 0x1a08 <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	28 30       	cpi	r18, 0x08	; 8
    19f6:	31 05       	cpc	r19, r1
    19f8:	09 f0       	breq	.+2      	; 0x19fc <Endpoint_Write_Control_PStream_LE+0x80>
    19fa:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a00:	8e 77       	andi	r24, 0x7E	; 126
    1a02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a06:	cb cf       	rjmp	.-106    	; 0x199e <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a08:	84 91       	lpm	r24, Z
				UEDATX = Data;
    1a0a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a0e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a10:	61 50       	subi	r22, 0x01	; 1
    1a12:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1a14:	2f 5f       	subi	r18, 0xFF	; 255
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	e6 cf       	rjmp	.-52     	; 0x19e6 <Endpoint_Write_Control_PStream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a1a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a1e:	88 23       	and	r24, r24
    1a20:	41 f0       	breq	.+16     	; 0x1a32 <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	41 f0       	breq	.+16     	; 0x1a36 <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1a2a:	83 ff       	sbrs	r24, 3
    1a2c:	bd cf       	rjmp	.-134    	; 0x19a8 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
}
    1a30:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a36:	83 e0       	ldi	r24, 0x03	; 3
    1a38:	08 95       	ret

00001a3a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	aa 97       	sbiw	r28, 0x2a	; 42
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1a50:	87 ee       	ldi	r24, 0xE7	; 231
    1a52:	93 e0       	ldi	r25, 0x03	; 3
				return UEDATX;
    1a54:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a58:	fc 01       	movw	r30, r24
    1a5a:	21 93       	st	Z+, r18
    1a5c:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a5e:	f3 e0       	ldi	r31, 0x03	; 3
    1a60:	8f 3e       	cpi	r24, 0xEF	; 239
    1a62:	9f 07       	cpc	r25, r31
    1a64:	b9 f7       	brne	.-18     	; 0x1a54 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1a66:	0e 94 94 09 	call	0x1328	; 0x1328 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1a6e:	83 ff       	sbrs	r24, 3
    1a70:	1e c1       	rjmp	.+572    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1a72:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1a76:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <USB_ControlRequest+0x1>
    1a7a:	9a 30       	cpi	r25, 0x0A	; 10
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <USB_Device_ProcessControlRequest+0x46>
    1a7e:	17 c1       	rjmp	.+558    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
    1a80:	e9 2f       	mov	r30, r25
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	e1 58       	subi	r30, 0x81	; 129
    1a86:	f9 4d       	sbci	r31, 0xD9	; 217
    1a88:	0c 94 63 26 	jmp	0x4cc6	; 0x4cc6 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a8c:	80 38       	cpi	r24, 0x80	; 128
    1a8e:	99 f0       	breq	.+38     	; 0x1ab6 <USB_Device_ProcessControlRequest+0x7c>
    1a90:	82 38       	cpi	r24, 0x82	; 130
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <USB_Device_ProcessControlRequest+0x5c>
    1a94:	0c c1       	rjmp	.+536    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1a96:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <USB_ControlRequest+0x4>
    1a9a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1a9c:	87 30       	cpi	r24, 0x07	; 7
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <USB_Device_ProcessControlRequest+0x68>
    1aa0:	06 c1       	rjmp	.+524    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aa2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1aa6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1aaa:	85 fb       	bst	r24, 5
    1aac:	88 27       	eor	r24, r24
    1aae:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ab0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1ab4:	06 c0       	rjmp	.+12     	; 0x1ac2 <USB_Device_ProcessControlRequest+0x88>
	uint8_t CurrentStatus = 0;
    1ab6:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1aba:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <USB_Device_RemoteWakeupEnabled>
    1abe:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1ac0:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1ac2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ac6:	97 7f       	andi	r25, 0xF7	; 247
    1ac8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1acc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1ad0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ad4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ad8:	8e 77       	andi	r24, 0x7E	; 126
    1ada:	e5 c0       	rjmp	.+458    	; 0x1ca6 <USB_Device_ProcessControlRequest+0x26c>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1adc:	88 23       	and	r24, r24
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <USB_Device_ProcessControlRequest+0xa8>
    1ae0:	d3 c0       	rjmp	.+422    	; 0x1c88 <USB_Device_ProcessControlRequest+0x24e>
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <USB_Device_ProcessControlRequest+0xae>
    1ae6:	e3 c0       	rjmp	.+454    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ae8:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <USB_ControlRequest+0x2>
    1aec:	81 11       	cpse	r24, r1
    1aee:	d6 c0       	rjmp	.+428    	; 0x1c9c <USB_Device_ProcessControlRequest+0x262>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1af0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <USB_ControlRequest+0x4>
    1af4:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1af6:	2f ef       	ldi	r18, 0xFF	; 255
    1af8:	28 0f       	add	r18, r24
    1afa:	26 30       	cpi	r18, 0x06	; 6
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <USB_Device_ProcessControlRequest+0xc6>
    1afe:	d7 c0       	rjmp	.+430    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b00:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1b04:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1b08:	20 ff       	sbrs	r18, 0
    1b0a:	c8 c0       	rjmp	.+400    	; 0x1c9c <USB_Device_ProcessControlRequest+0x262>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b0c:	93 30       	cpi	r25, 0x03	; 3
    1b0e:	31 f4       	brne	.+12     	; 0x1b1c <USB_Device_ProcessControlRequest+0xe2>
				UECONX |= (1 << STALLRQ);
    1b10:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b14:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1b16:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b1a:	c0 c0       	rjmp	.+384    	; 0x1c9c <USB_Device_ProcessControlRequest+0x262>
				UECONX |= (1 << STALLRQC);
    1b1c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b20:	90 61       	ori	r25, 0x10	; 16
    1b22:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <USB_Device_ProcessControlRequest+0xf4>
    1b2c:	22 0f       	add	r18, r18
    1b2e:	8a 95       	dec	r24
    1b30:	ea f7       	brpl	.-6      	; 0x1b2c <USB_Device_ProcessControlRequest+0xf2>
    1b32:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1b36:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1b3a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1b3e:	88 60       	ori	r24, 0x08	; 8
    1b40:	ea cf       	rjmp	.-44     	; 0x1b16 <USB_Device_ProcessControlRequest+0xdc>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b42:	81 11       	cpse	r24, r1
    1b44:	b4 c0       	rjmp	.+360    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1b46:	10 91 e9 03 	lds	r17, 0x03E9	; 0x8003e9 <USB_ControlRequest+0x2>
    1b4a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1b4c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1b50:	80 78       	andi	r24, 0x80	; 128
    1b52:	81 2b       	or	r24, r17
    1b54:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1b58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b5c:	87 7f       	andi	r24, 0xF7	; 247
    1b5e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1b62:	0e 94 c1 0b 	call	0x1782	; 0x1782 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1b6a:	80 ff       	sbrs	r24, 0
    1b6c:	fc cf       	rjmp	.-8      	; 0x1b66 <USB_Device_ProcessControlRequest+0x12c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1b6e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1b72:	80 68       	ori	r24, 0x80	; 128
    1b74:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	11 11       	cpse	r17, r1
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <USB_DeviceState>
    1b82:	95 c0       	rjmp	.+298    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b84:	80 58       	subi	r24, 0x80	; 128
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <USB_Device_ProcessControlRequest+0x152>
    1b8a:	91 c0       	rjmp	.+290    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1b8c:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <USB_ControlRequest+0x2>
    1b90:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <USB_ControlRequest+0x3>
    1b94:	8c 3d       	cpi	r24, 0xDC	; 220
    1b96:	23 e0       	ldi	r18, 0x03	; 3
    1b98:	92 07       	cpc	r25, r18
    1b9a:	a1 f5       	brne	.+104    	; 0x1c04 <USB_Device_ProcessControlRequest+0x1ca>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ba0:	8a e2       	ldi	r24, 0x2A	; 42
    1ba2:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1ba4:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1ba6:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ba8:	de 01       	movw	r26, r28
    1baa:	13 96       	adiw	r26, 0x03	; 3
    1bac:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1bae:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1bb0:	51 e2       	ldi	r21, 0x21	; 33
    1bb2:	e3 2f       	mov	r30, r19
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1bba:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1bbc:	20 ff       	sbrs	r18, 0
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <USB_Device_ProcessControlRequest+0x18c>
					{
						SerialByte >>= 4;
    1bc0:	e2 95       	swap	r30
    1bc2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1bc4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1bc6:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1bc8:	8e 2f       	mov	r24, r30
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	ea 30       	cpi	r30, 0x0A	; 10
    1bce:	c0 f0       	brcs	.+48     	; 0x1c00 <USB_Device_ProcessControlRequest+0x1c6>
    1bd0:	c7 96       	adiw	r24, 0x37	; 55
    1bd2:	8d 93       	st	X+, r24
    1bd4:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bd6:	2f 5f       	subi	r18, 0xFF	; 255
    1bd8:	24 31       	cpi	r18, 0x14	; 20
    1bda:	59 f7       	brne	.-42     	; 0x1bb2 <USB_Device_ProcessControlRequest+0x178>
				SREG = GlobalIntState;
    1bdc:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1bde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be2:	87 7f       	andi	r24, 0xF7	; 247
    1be4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1be8:	6a e2       	ldi	r22, 0x2A	; 42
    1bea:	70 e0       	ldi	r23, 0x00	; 0
    1bec:	ce 01       	movw	r24, r28
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1bf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bf8:	8b 77       	andi	r24, 0x7B	; 123
    1bfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bfe:	57 c0       	rjmp	.+174    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c00:	c0 96       	adiw	r24, 0x30	; 48
    1c02:	e7 cf       	rjmp	.-50     	; 0x1bd2 <USB_Device_ProcessControlRequest+0x198>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1c04:	60 91 eb 03 	lds	r22, 0x03EB	; 0x8003eb <USB_ControlRequest+0x4>
    1c08:	70 91 ec 03 	lds	r23, 0x03EC	; 0x8003ec <USB_ControlRequest+0x5>
    1c0c:	ae 01       	movw	r20, r28
    1c0e:	4f 5f       	subi	r20, 0xFF	; 255
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255
    1c12:	0e 94 20 0b 	call	0x1640	; 0x1640 <CALLBACK_USB_GetDescriptor>
    1c16:	bc 01       	movw	r22, r24
    1c18:	89 2b       	or	r24, r25
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <USB_Device_ProcessControlRequest+0x1e4>
    1c1c:	48 c0       	rjmp	.+144    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    1c1e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c22:	97 7f       	andi	r25, 0xF7	; 247
    1c24:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	0e 94 be 0c 	call	0x197c	; 0x197c <Endpoint_Write_Control_PStream_LE>
    1c30:	e1 cf       	rjmp	.-62     	; 0x1bf4 <USB_Device_ProcessControlRequest+0x1ba>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c32:	80 38       	cpi	r24, 0x80	; 128
    1c34:	e1 f5       	brne	.+120    	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
    1c36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c3a:	87 7f       	andi	r24, 0xF7	; 247
    1c3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c40:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1c44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1c48:	45 cf       	rjmp	.-374    	; 0x1ad4 <USB_Device_ProcessControlRequest+0x9a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	30 c0       	rjmp	.+96     	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1c4e:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <USB_ControlRequest+0x2>
    1c52:	92 30       	cpi	r25, 0x02	; 2
    1c54:	60 f5       	brcc	.+88     	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
				UEINTX &= ~(1 << RXSTPI);
    1c56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c5a:	87 7f       	andi	r24, 0xF7	; 247
    1c5c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1c60:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    1c64:	0e 94 c1 0b 	call	0x1782	; 0x1782 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    1c68:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <USB_Device_ConfigurationNumber>
    1c6c:	88 23       	and	r24, r24
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <USB_Device_ProcessControlRequest+0x23a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1c70:	84 e0       	ldi	r24, 0x04	; 4
    1c72:	05 c0       	rjmp	.+10     	; 0x1c7e <USB_Device_ProcessControlRequest+0x244>
				return (UDADDR & (1 << ADDEN));
    1c74:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1c78:	87 fd       	sbrc	r24, 7
    1c7a:	fa cf       	rjmp	.-12     	; 0x1c70 <USB_Device_ProcessControlRequest+0x236>
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1c82:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <EVENT_USB_Device_ConfigurationChanged>
    1c86:	13 c0       	rjmp	.+38     	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1c88:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <USB_ControlRequest+0x2>
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	79 f4       	brne	.+30     	; 0x1cae <USB_Device_ProcessControlRequest+0x274>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	93 30       	cpi	r25, 0x03	; 3
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <USB_Device_ProcessControlRequest+0x25e>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c9c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1ca0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ca4:	87 7f       	andi	r24, 0xF7	; 247
    1ca6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1caa:	0e 94 c1 0b 	call	0x1782	; 0x1782 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (Endpoint_IsSETUPReceived())
    1cb2:	83 ff       	sbrs	r24, 3
    1cb4:	0a c0       	rjmp	.+20     	; 0x1cca <USB_Device_ProcessControlRequest+0x290>
				UEINTX &= ~(1 << RXSTPI);
    1cb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cba:	87 7f       	andi	r24, 0xF7	; 247
    1cbc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1cc0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1cc4:	80 62       	ori	r24, 0x20	; 32
    1cc6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1cca:	aa 96       	adiw	r28, 0x2a	; 42
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	08 95       	ret

00001cde <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1cde:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ce2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1ce6:	e0 ee       	ldi	r30, 0xE0	; 224
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	81 60       	ori	r24, 0x01	; 1
    1cee:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1cf0:	e8 ed       	ldi	r30, 0xD8	; 216
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 77       	andi	r24, 0x7F	; 127
    1cf8:	80 83       	st	Z, r24
				PLLCSR = 0;
    1cfa:	19 bc       	out	0x29, r1	; 41
				UHWCON &= ~(1 << UVREGE);
    1cfc:	a7 ed       	ldi	r26, 0xD7	; 215
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	8c 91       	ld	r24, X
    1d02:	8e 7f       	andi	r24, 0xFE	; 254
    1d04:	8c 93       	st	X, r24
				USBCON &= ~(1 << OTGPADE);
    1d06:	80 81       	ld	r24, Z
    1d08:	8f 7e       	andi	r24, 0xEF	; 239
    1d0a:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1d0c:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <USB_IsInitialized>
}
    1d10:	08 95       	ret

00001d12 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1d1a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1d1e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1d22:	c8 ed       	ldi	r28, 0xD8	; 216
    1d24:	d0 e0       	ldi	r29, 0x00	; 0
    1d26:	88 81       	ld	r24, Y
    1d28:	8f 77       	andi	r24, 0x7F	; 127
    1d2a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1d2c:	88 81       	ld	r24, Y
    1d2e:	80 68       	ori	r24, 0x80	; 128
    1d30:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    1d32:	88 81       	ld	r24, Y
    1d34:	8f 7d       	andi	r24, 0xDF	; 223
    1d36:	88 83       	st	Y, r24
				PLLCSR = 0;
    1d38:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1d3a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1d3e:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1d42:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1d46:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1d4a:	00 ee       	ldi	r16, 0xE0	; 224
    1d4c:	10 e0       	ldi	r17, 0x00	; 0
    1d4e:	f8 01       	movw	r30, r16
    1d50:	80 81       	ld	r24, Z
    1d52:	8b 7f       	andi	r24, 0xFB	; 251
    1d54:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1d56:	88 81       	ld	r24, Y
    1d58:	81 60       	ori	r24, 0x01	; 1
    1d5a:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d5c:	42 e0       	ldi	r20, 0x02	; 2
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	0e 94 8d 0b 	call	0x171a	; 0x171a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d66:	e1 ee       	ldi	r30, 0xE1	; 225
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8e 7f       	andi	r24, 0xFE	; 254
    1d6e:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    1d70:	e2 ee       	ldi	r30, 0xE2	; 226
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	81 60       	ori	r24, 0x01	; 1
    1d78:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 60       	ori	r24, 0x08	; 8
    1d7e:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1d80:	f8 01       	movw	r30, r16
    1d82:	80 81       	ld	r24, Z
    1d84:	8e 7f       	andi	r24, 0xFE	; 254
    1d86:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1d88:	88 81       	ld	r24, Y
    1d8a:	80 61       	ori	r24, 0x10	; 16
    1d8c:	88 83       	st	Y, r24
}
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1d98:	e8 ed       	ldi	r30, 0xD8	; 216
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 7e       	andi	r24, 0xEF	; 239
    1da0:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1da2:	e7 ed       	ldi	r30, 0xD7	; 215
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	81 60       	ori	r24, 0x01	; 1
    1daa:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1dac:	84 e0       	ldi	r24, 0x04	; 4
    1dae:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <USB_IsInitialized>
	USB_ResetInterface();
    1db6:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <USB_ResetInterface>

00001dba <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1dba:	e8 ed       	ldi	r30, 0xD8	; 216
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8e 7f       	andi	r24, 0xFE	; 254
    1dc2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1dc4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
    1dc8:	08 95       	ret

00001dca <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1dca:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1dce:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
    1dd2:	08 95       	ret

00001dd4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1dd4:	1f 92       	push	r1
    1dd6:	0f 92       	push	r0
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	0f 92       	push	r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	2f 93       	push	r18
    1de0:	3f 93       	push	r19
    1de2:	4f 93       	push	r20
    1de4:	5f 93       	push	r21
    1de6:	6f 93       	push	r22
    1de8:	7f 93       	push	r23
    1dea:	8f 93       	push	r24
    1dec:	9f 93       	push	r25
    1dee:	af 93       	push	r26
    1df0:	bf 93       	push	r27
    1df2:	ef 93       	push	r30
    1df4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1df6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1dfa:	82 ff       	sbrs	r24, 2
    1dfc:	0b c0       	rjmp	.+22     	; 0x1e14 <__vector_10+0x40>
						return (UDIEN  & (1 << SOFE));
    1dfe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e02:	82 ff       	sbrs	r24, 2
    1e04:	07 c0       	rjmp	.+14     	; 0x1e14 <__vector_10+0x40>
						UDINT  &= ~(1 << SOFI);
    1e06:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1e0a:	8b 7f       	andi	r24, 0xFB	; 251
    1e0c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1e10:	0e 94 02 10 	call	0x2004	; 0x2004 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1e14:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1e18:	80 ff       	sbrs	r24, 0
    1e1a:	19 c0       	rjmp	.+50     	; 0x1e4e <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    1e1c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e20:	80 ff       	sbrs	r24, 0
    1e22:	15 c0       	rjmp	.+42     	; 0x1e4e <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1e24:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1e28:	8e 7f       	andi	r24, 0xFE	; 254
    1e2a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1e2e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1e32:	80 ff       	sbrs	r24, 0
    1e34:	96 c0       	rjmp	.+300    	; 0x1f62 <__vector_10+0x18e>
				PLLCSR = USB_PLL_PSC;
    1e36:	80 e1       	ldi	r24, 0x10	; 16
    1e38:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e3a:	82 e1       	ldi	r24, 0x12	; 18
    1e3c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1e3e:	09 b4       	in	r0, 0x29	; 41
    1e40:	00 fe       	sbrs	r0, 0
    1e42:	fd cf       	rjmp	.-6      	; 0x1e3e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1e4a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1e4e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e52:	80 ff       	sbrs	r24, 0
    1e54:	19 c0       	rjmp	.+50     	; 0x1e88 <__vector_10+0xb4>
						return (UDIEN  & (1 << SUSPE));
    1e56:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e5a:	80 ff       	sbrs	r24, 0
    1e5c:	15 c0       	rjmp	.+42     	; 0x1e88 <__vector_10+0xb4>
						UDIEN  &= ~(1 << SUSPE);
    1e5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e62:	8e 7f       	andi	r24, 0xFE	; 254
    1e64:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1e68:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e6c:	80 61       	ori	r24, 0x10	; 16
    1e6e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				USBCON |=  (1 << FRZCLK);
    1e72:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e76:	80 62       	ori	r24, 0x20	; 32
    1e78:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1e7c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e7e:	85 e0       	ldi	r24, 0x05	; 5
    1e80:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1e84:	0e 94 4d 0a 	call	0x149a	; 0x149a <EVENT_USB_Device_Suspend>
						return (UDINT  & (1 << WAKEUPI));
    1e88:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e8c:	84 ff       	sbrs	r24, 4
    1e8e:	2b c0       	rjmp	.+86     	; 0x1ee6 <__vector_10+0x112>
						return (UDIEN  & (1 << WAKEUPE));
    1e90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1e94:	84 ff       	sbrs	r24, 4
    1e96:	27 c0       	rjmp	.+78     	; 0x1ee6 <__vector_10+0x112>
				PLLCSR = USB_PLL_PSC;
    1e98:	80 e1       	ldi	r24, 0x10	; 16
    1e9a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e9c:	82 e1       	ldi	r24, 0x12	; 18
    1e9e:	89 bd       	out	0x29, r24	; 41
				return ((PLLCSR & (1 << PLOCK)) ? true : false);
    1ea0:	89 b5       	in	r24, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	91 70       	andi	r25, 0x01	; 1
    1ea6:	80 ff       	sbrs	r24, 0
    1ea8:	fb cf       	rjmp	.-10     	; 0x1ea0 <__vector_10+0xcc>
				USBCON &= ~(1 << FRZCLK);
    1eaa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1eae:	8f 7d       	andi	r24, 0xDF	; 223
    1eb0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1eb4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1eb8:	8f 7e       	andi	r24, 0xEF	; 239
    1eba:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1ebe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ec2:	8f 7e       	andi	r24, 0xEF	; 239
    1ec4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1ec8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ecc:	81 60       	ori	r24, 0x01	; 1
    1ece:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1ed2:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <USB_Device_ConfigurationNumber>
    1ed6:	88 23       	and	r24, r24
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <__vector_10+0x108>
    1eda:	49 c0       	rjmp	.+146    	; 0x1f6e <__vector_10+0x19a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1edc:	84 e0       	ldi	r24, 0x04	; 4
    1ede:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <USB_DeviceState>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ee2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <EVENT_USB_Device_WakeUp>
						return (UDINT  & (1 << EORSTI));
    1ee6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1eea:	83 ff       	sbrs	r24, 3
    1eec:	29 c0       	rjmp	.+82     	; 0x1f40 <__vector_10+0x16c>
						return (UDIEN  & (1 << EORSTE));
    1eee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1ef2:	83 ff       	sbrs	r24, 3
    1ef4:	25 c0       	rjmp	.+74     	; 0x1f40 <__vector_10+0x16c>
						UDINT  &= ~(1 << EORSTI);
    1ef6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1efa:	87 7f       	andi	r24, 0xF7	; 247
    1efc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1f06:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1f0a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1f0e:	8e 7f       	andi	r24, 0xFE	; 254
    1f10:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1f14:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f18:	8e 7f       	andi	r24, 0xFE	; 254
    1f1a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1f1e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1f22:	80 61       	ori	r24, 0x10	; 16
    1f24:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1f28:	42 e0       	ldi	r20, 0x02	; 2
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	0e 94 8d 0b 	call	0x171a	; 0x171a <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1f32:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1f36:	88 60       	ori	r24, 0x08	; 8
    1f38:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1f3c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti
				PLLCSR = 0;
    1f62:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    1f64:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1f68:	0e 94 77 09 	call	0x12ee	; 0x12ee <EVENT_USB_Device_Disconnect>
    1f6c:	70 cf       	rjmp	.-288    	; 0x1e4e <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f6e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1f72:	87 fd       	sbrc	r24, 7
    1f74:	93 e0       	ldi	r25, 0x03	; 3
    1f76:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <USB_DeviceState>
    1f7a:	b3 cf       	rjmp	.-154    	; 0x1ee2 <__vector_10+0x10e>

00001f7c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f7c:	1f 92       	push	r1
    1f7e:	0f 92       	push	r0
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	0f 92       	push	r0
    1f84:	11 24       	eor	r1, r1
    1f86:	2f 93       	push	r18
    1f88:	3f 93       	push	r19
    1f8a:	4f 93       	push	r20
    1f8c:	5f 93       	push	r21
    1f8e:	6f 93       	push	r22
    1f90:	7f 93       	push	r23
    1f92:	8f 93       	push	r24
    1f94:	9f 93       	push	r25
    1f96:	af 93       	push	r26
    1f98:	bf 93       	push	r27
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	ef 93       	push	r30
    1fa0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fa2:	d0 91 e9 00 	lds	r29, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1fa6:	df 70       	andi	r29, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1fa8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1fac:	c8 2f       	mov	r28, r24
    1fae:	c1 70       	andi	r28, 0x01	; 1
    1fb0:	80 fd       	sbrc	r24, 0
    1fb2:	c0 e8       	ldi	r28, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fb4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1fb8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1fbc:	87 7f       	andi	r24, 0xF7	; 247
    1fbe:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1fc2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1fc4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <USB_Device_ProcessControlRequest>
    1fc8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1fcc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1fd0:	88 60       	ori	r24, 0x08	; 8
    1fd2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fd6:	cd 2b       	or	r28, r29
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fd8:	cf 70       	andi	r28, 0x0F	; 15
    1fda:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1fde:	ff 91       	pop	r31
    1fe0:	ef 91       	pop	r30
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	bf 91       	pop	r27
    1fe8:	af 91       	pop	r26
    1fea:	9f 91       	pop	r25
    1fec:	8f 91       	pop	r24
    1fee:	7f 91       	pop	r23
    1ff0:	6f 91       	pop	r22
    1ff2:	5f 91       	pop	r21
    1ff4:	4f 91       	pop	r20
    1ff6:	3f 91       	pop	r19
    1ff8:	2f 91       	pop	r18
    1ffa:	0f 90       	pop	r0
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	0f 90       	pop	r0
    2000:	1f 90       	pop	r1
    2002:	18 95       	reti

00002004 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    2004:	08 95       	ret

00002006 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2006:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <driver+0x1>
    200a:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <driver>
}
    200e:	08 95       	ret

00002010 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2010:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <driver>
    2014:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <driver+0x1>
    2018:	30 97       	sbiw	r30, 0x00	; 0
    201a:	21 f0       	breq	.+8      	; 0x2024 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    201c:	01 90       	ld	r0, Z+
    201e:	f0 81       	ld	r31, Z
    2020:	e0 2d       	mov	r30, r0
    2022:	09 94       	ijmp
}
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	08 95       	ret

00002028 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2028:	ef 92       	push	r14
    202a:	ff 92       	push	r15
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	8c 01       	movw	r16, r24
    if (!driver) return;
    2036:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <driver>
    203a:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <driver+0x1>
    203e:	30 97       	sbiw	r30, 0x00	; 0
    2040:	c1 f1       	breq	.+112    	; 0x20b2 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    2042:	02 80       	ldd	r0, Z+2	; 0x02
    2044:	f3 81       	ldd	r31, Z+3	; 0x03
    2046:	e0 2d       	mov	r30, r0
    2048:	09 95       	icall

    if (debug_keyboard) {
    204a:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    204e:	82 ff       	sbrs	r24, 2
    2050:	30 c0       	rjmp	.+96     	; 0x20b2 <host_keyboard_send+0x8a>
        dprint("keyboard: ");
    2052:	80 ff       	sbrs	r24, 0
    2054:	04 c0       	rjmp	.+8      	; 0x205e <host_keyboard_send+0x36>
    2056:	86 e9       	ldi	r24, 0x96	; 150
    2058:	93 e0       	ldi	r25, 0x03	; 3
    205a:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
{
    205e:	d0 e0       	ldi	r29, 0x00	; 0
    2060:	c0 e0       	ldi	r28, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2062:	80 e9       	ldi	r24, 0x90	; 144
    2064:	e8 2e       	mov	r14, r24
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	f8 2e       	mov	r15, r24
    206a:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    206e:	80 ff       	sbrs	r24, 0
    2070:	0e c0       	rjmp	.+28     	; 0x208e <host_keyboard_send+0x66>
    2072:	f8 01       	movw	r30, r16
    2074:	ec 0f       	add	r30, r28
    2076:	fd 1f       	adc	r31, r29
    2078:	80 81       	ld	r24, Z
    207a:	1f 92       	push	r1
    207c:	8f 93       	push	r24
    207e:	ff 92       	push	r15
    2080:	ef 92       	push	r14
    2082:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	21 96       	adiw	r28, 0x01	; 1
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2090:	c0 32       	cpi	r28, 0x20	; 32
    2092:	d1 05       	cpc	r29, r1
    2094:	51 f7       	brne	.-44     	; 0x206a <host_keyboard_send+0x42>
        }
        dprint("\n");
    2096:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    209a:	80 ff       	sbrs	r24, 0
    209c:	0a c0       	rjmp	.+20     	; 0x20b2 <host_keyboard_send+0x8a>
    209e:	8e e8       	ldi	r24, 0x8E	; 142
    20a0:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	ef 90       	pop	r14
        dprint("\n");
    20ae:	0c 94 6f 05 	jmp	0xade	; 0xade <xputs>
}
    20b2:	df 91       	pop	r29
    20b4:	cf 91       	pop	r28
    20b6:	1f 91       	pop	r17
    20b8:	0f 91       	pop	r16
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	08 95       	ret

000020c0 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    20c0:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <driver>
    20c4:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <driver+0x1>
    20c8:	30 97       	sbiw	r30, 0x00	; 0
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    20cc:	04 80       	ldd	r0, Z+4	; 0x04
    20ce:	f5 81       	ldd	r31, Z+5	; 0x05
    20d0:	e0 2d       	mov	r30, r0
    20d2:	09 94       	ijmp
}
    20d4:	08 95       	ret

000020d6 <host_system_send>:

void host_system_send(uint16_t report)
{
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    20dc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <last_system_report>
    20e0:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <last_system_report+0x1>
    20e4:	8c 17       	cp	r24, r28
    20e6:	9d 07       	cpc	r25, r29
    20e8:	01 f1       	breq	.+64     	; 0x212a <host_system_send+0x54>
    last_system_report = report;
    20ea:	d0 93 da 02 	sts	0x02DA, r29	; 0x8002da <last_system_report+0x1>
    20ee:	c0 93 d9 02 	sts	0x02D9, r28	; 0x8002d9 <last_system_report>

    if (!driver) return;
    20f2:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <driver>
    20f6:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <driver+0x1>
    20fa:	30 97       	sbiw	r30, 0x00	; 0
    20fc:	b1 f0       	breq	.+44     	; 0x212a <host_system_send+0x54>
    (*driver->send_system)(report);
    20fe:	06 80       	ldd	r0, Z+6	; 0x06
    2100:	f7 81       	ldd	r31, Z+7	; 0x07
    2102:	e0 2d       	mov	r30, r0
    2104:	ce 01       	movw	r24, r28
    2106:	09 95       	icall

    if (debug_keyboard) {
        dprintf("system: %04X\n", report);
    2108:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    210c:	85 70       	andi	r24, 0x05	; 5
    210e:	85 30       	cpi	r24, 0x05	; 5
    2110:	61 f4       	brne	.+24     	; 0x212a <host_system_send+0x54>
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	80 e8       	ldi	r24, 0x80	; 128
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	9f 93       	push	r25
    211c:	8f 93       	push	r24
    211e:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    }
}
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	08 95       	ret

00002130 <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    2136:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <last_consumer_report>
    213a:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <last_consumer_report+0x1>
    213e:	8c 17       	cp	r24, r28
    2140:	9d 07       	cpc	r25, r29
    2142:	01 f1       	breq	.+64     	; 0x2184 <host_consumer_send+0x54>
    last_consumer_report = report;
    2144:	d0 93 d8 02 	sts	0x02D8, r29	; 0x8002d8 <last_consumer_report+0x1>
    2148:	c0 93 d7 02 	sts	0x02D7, r28	; 0x8002d7 <last_consumer_report>

    if (!driver) return;
    214c:	e0 91 db 02 	lds	r30, 0x02DB	; 0x8002db <driver>
    2150:	f0 91 dc 02 	lds	r31, 0x02DC	; 0x8002dc <driver+0x1>
    2154:	30 97       	sbiw	r30, 0x00	; 0
    2156:	b1 f0       	breq	.+44     	; 0x2184 <host_consumer_send+0x54>
    (*driver->send_consumer)(report);
    2158:	00 84       	ldd	r0, Z+8	; 0x08
    215a:	f1 85       	ldd	r31, Z+9	; 0x09
    215c:	e0 2d       	mov	r30, r0
    215e:	ce 01       	movw	r24, r28
    2160:	09 95       	icall

    if (debug_keyboard) {
        dprintf("consumer: %04X\n", report);
    2162:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    2166:	85 70       	andi	r24, 0x05	; 5
    2168:	85 30       	cpi	r24, 0x05	; 5
    216a:	61 f4       	brne	.+24     	; 0x2184 <host_consumer_send+0x54>
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	80 e7       	ldi	r24, 0x70	; 112
    2172:	93 e0       	ldi	r25, 0x03	; 3
    2174:	9f 93       	push	r25
    2176:	8f 93       	push	r24
    2178:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    }
}
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    218a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <matrix_setup>

0000218e <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    218e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <timer_init>
    matrix_init();
    2192:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <matrix_init>

00002196 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan matrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2196:	9f 92       	push	r9
    2198:	af 92       	push	r10
    219a:	bf 92       	push	r11
    219c:	cf 92       	push	r12
    219e:	df 92       	push	r13
    21a0:	ef 92       	push	r14
    21a2:	ff 92       	push	r15
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <keyboard_task+0x18>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <keyboard_task+0x1a>
    21b0:	0f 92       	push	r0
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    21b6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <matrix_scan>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21ba:	8e ed       	ldi	r24, 0xDE	; 222
    21bc:	c8 2e       	mov	r12, r24
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	d8 2e       	mov	r13, r24
    21c2:	10 e0       	ldi	r17, 0x00	; 0
        matrix_row = matrix_get_row(r);
    21c4:	81 2f       	mov	r24, r17
    21c6:	0e 94 84 07 	call	0xf08	; 0xf08 <matrix_get_row>
    21ca:	98 2e       	mov	r9, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    21cc:	f6 01       	movw	r30, r12
    21ce:	e1 90       	ld	r14, Z+
    21d0:	6f 01       	movw	r12, r30
        if (matrix_change) {
    21d2:	e8 16       	cp	r14, r24
    21d4:	99 f1       	breq	.+102    	; 0x223c <keyboard_task+0xa6>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    21d6:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    21da:	81 fd       	sbrc	r24, 1
    21dc:	0e 94 8d 11 	call	0x231a	; 0x231a <matrix_print>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    21e0:	f1 2c       	mov	r15, r1
    21e2:	01 e0       	ldi	r16, 0x01	; 1
        matrix_change = matrix_row ^ matrix_prev[r];
    21e4:	e9 24       	eor	r14, r9
    21e6:	56 01       	movw	r10, r12
    21e8:	f1 e0       	ldi	r31, 0x01	; 1
    21ea:	af 1a       	sub	r10, r31
    21ec:	b1 08       	sbc	r11, r1
            matrix_row_t col_mask = 1;
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
                if (matrix_change & col_mask) {
    21ee:	8e 2d       	mov	r24, r14
    21f0:	80 23       	and	r24, r16
    21f2:	f9 f0       	breq	.+62     	; 0x2232 <keyboard_task+0x9c>
                    keyevent_t e = (keyevent_t){
    21f4:	f9 82       	std	Y+1, r15	; 0x01
    21f6:	1a 83       	std	Y+2, r17	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & col_mask),
    21f8:	91 e0       	ldi	r25, 0x01	; 1
    21fa:	89 2d       	mov	r24, r9
    21fc:	80 23       	and	r24, r16
    21fe:	09 f4       	brne	.+2      	; 0x2202 <keyboard_task+0x6c>
    2200:	90 e0       	ldi	r25, 0x00	; 0
                    keyevent_t e = (keyevent_t){
    2202:	9b 83       	std	Y+3, r25	; 0x03
                        .time = (timer_read() | 1) /* time should not be 0 */
    2204:	0e 94 77 1d 	call	0x3aee	; 0x3aee <timer_read>
    2208:	81 60       	ori	r24, 0x01	; 1
                    keyevent_t e = (keyevent_t){
    220a:	78 2f       	mov	r23, r24
    220c:	9d 83       	std	Y+5, r25	; 0x05
    220e:	8c 83       	std	Y+4, r24	; 0x04
                    };
                    action_exec(e);
    2210:	49 81       	ldd	r20, Y+1	; 0x01
    2212:	5a 81       	ldd	r21, Y+2	; 0x02
    2214:	6b 81       	ldd	r22, Y+3	; 0x03
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	0e 94 c3 11 	call	0x2386	; 0x2386 <action_exec>
                    hook_matrix_change(e);
    221c:	49 81       	ldd	r20, Y+1	; 0x01
    221e:	5a 81       	ldd	r21, Y+2	; 0x02
    2220:	6b 81       	ldd	r22, Y+3	; 0x03
    2222:	7c 81       	ldd	r23, Y+4	; 0x04
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= col_mask;
    222a:	f5 01       	movw	r30, r10
    222c:	80 81       	ld	r24, Z
    222e:	80 27       	eor	r24, r16
    2230:	80 83       	st	Z, r24
            for (uint8_t c = 0; c < MATRIX_COLS; c++, col_mask <<= 1) {
    2232:	f3 94       	inc	r15
    2234:	00 0f       	add	r16, r16
    2236:	f8 e0       	ldi	r31, 0x08	; 8
    2238:	ff 12       	cpse	r15, r31
    223a:	d9 cf       	rjmp	.-78     	; 0x21ee <keyboard_task+0x58>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    223c:	1f 5f       	subi	r17, 0xFF	; 255
    223e:	10 31       	cpi	r17, 0x10	; 16
    2240:	09 f0       	breq	.+2      	; 0x2244 <keyboard_task+0xae>
    2242:	c0 cf       	rjmp	.-128    	; 0x21c4 <keyboard_task+0x2e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2244:	8f ef       	ldi	r24, 0xFF	; 255
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	8a 83       	std	Y+2, r24	; 0x02
    224a:	1b 82       	std	Y+3, r1	; 0x03
    224c:	0e 94 77 1d 	call	0x3aee	; 0x3aee <timer_read>
    2250:	81 60       	ori	r24, 0x01	; 1
    2252:	78 2f       	mov	r23, r24
    2254:	9d 83       	std	Y+5, r25	; 0x05
    2256:	8c 83       	std	Y+4, r24	; 0x04
    2258:	49 81       	ldd	r20, Y+1	; 0x01
    225a:	5a 81       	ldd	r21, Y+2	; 0x02
    225c:	6b 81       	ldd	r22, Y+3	; 0x03
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	0e 94 c3 11 	call	0x2386	; 0x2386 <action_exec>

//MATRIX_LOOP_END:

    hook_keyboard_loop();
    2264:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2268:	0e 94 a8 20 	call	0x4150	; 0x4150 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    226c:	0e 94 08 10 	call	0x2010	; 0x2010 <host_keyboard_leds>
    2270:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <led_status.5109>
    2274:	89 17       	cp	r24, r25
    2276:	49 f1       	breq	.+82     	; 0x22ca <keyboard_task+0x134>
        led_status = host_keyboard_leds();
    2278:	0e 94 08 10 	call	0x2010	; 0x2010 <host_keyboard_leds>
    227c:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <led_status.5109>
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2280:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <debug_config>
    2284:	95 70       	andi	r25, 0x05	; 5
    2286:	95 30       	cpi	r25, 0x05	; 5
    2288:	61 f4       	brne	.+24     	; 0x22a2 <keyboard_task+0x10c>
    228a:	1f 92       	push	r1
    228c:	8f 93       	push	r24
    228e:	81 ea       	ldi	r24, 0xA1	; 161
    2290:	93 e0       	ldi	r25, 0x03	; 3
    2292:	9f 93       	push	r25
    2294:	8f 93       	push	r24
    2296:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    22a2:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <led_status.5109>
    }
}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	ef 90       	pop	r14
    22bc:	df 90       	pop	r13
    22be:	cf 90       	pop	r12
    22c0:	bf 90       	pop	r11
    22c2:	af 90       	pop	r10
    22c4:	9f 90       	pop	r9
        hook_keyboard_leds_change(led_status);
    22c6:	0c 94 02 1d 	jmp	0x3a04	; 0x3a04 <hook_keyboard_leds_change>
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	df 90       	pop	r13
    22e2:	cf 90       	pop	r12
    22e4:	bf 90       	pop	r11
    22e6:	af 90       	pop	r10
    22e8:	9f 90       	pop	r9
    22ea:	08 95       	ret

000022ec <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    22ec:	0c 94 92 07 	jmp	0xf24	; 0xf24 <led_set>

000022f0 <matrix_setup>:
void matrix_clear(void)
{
}

__attribute__ ((weak))
void matrix_setup(void) {}
    22f0:	08 95       	ret

000022f2 <matrix_is_on>:

__attribute__ ((weak))
bool matrix_is_on(uint8_t row, uint8_t col)
{
    22f2:	cf 93       	push	r28
    22f4:	c6 2f       	mov	r28, r22
    return (matrix_get_row(row) & (1<<col));
    22f6:	0e 94 84 07 	call	0xf08	; 0xf08 <matrix_get_row>
    22fa:	21 e0       	ldi	r18, 0x01	; 1
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <matrix_is_on+0x12>
    2300:	22 0f       	add	r18, r18
    2302:	33 1f       	adc	r19, r19
    2304:	ca 95       	dec	r28
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <matrix_is_on+0xe>
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	28 23       	and	r18, r24
    230c:	39 23       	and	r19, r25
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	23 2b       	or	r18, r19
    2312:	09 f4       	brne	.+2      	; 0x2316 <matrix_is_on+0x24>
    2314:	80 e0       	ldi	r24, 0x00	; 0
}
    2316:	cf 91       	pop	r28
    2318:	08 95       	ret

0000231a <matrix_print>:

__attribute__ ((weak))
void matrix_print(void)
{
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    2326:	8a eb       	ldi	r24, 0xBA	; 186
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    232e:	d0 e0       	ldi	r29, 0x00	; 0
    2330:	c0 e0       	ldi	r28, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    2332:	80 e8       	ldi	r24, 0x80	; 128
    2334:	e8 2e       	mov	r14, r24
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	f8 2e       	mov	r15, r24
    233a:	0c ea       	ldi	r16, 0xAC	; 172
    233c:	13 e0       	ldi	r17, 0x03	; 3
    233e:	8c 2f       	mov	r24, r28
    2340:	0e 94 84 07 	call	0xf08	; 0xf08 <matrix_get_row>
    2344:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <bitrev>
    2348:	ff 92       	push	r15
    234a:	ef 92       	push	r14
    234c:	1f 92       	push	r1
    234e:	8f 93       	push	r24
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	1f 93       	push	r17
    2356:	0f 93       	push	r16
    2358:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    235c:	21 96       	adiw	r28, 0x01	; 1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    235e:	8d b7       	in	r24, 0x3d	; 61
    2360:	9e b7       	in	r25, 0x3e	; 62
    2362:	08 96       	adiw	r24, 0x08	; 8
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	9e bf       	out	0x3e, r25	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	8d bf       	out	0x3d, r24	; 61
    236e:	c0 31       	cpi	r28, 0x10	; 16
    2370:	d1 05       	cpc	r29, r1
    2372:	29 f7       	brne	.-54     	; 0x233e <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	08 95       	ret

00002382 <matrix_power_up>:
    2382:	08 95       	ret

00002384 <matrix_power_down>:
    2384:	08 95       	ret

00002386 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	2b 97       	sbiw	r28, 0x0b	; 11
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	4f 83       	std	Y+7, r20	; 0x07
    239c:	58 87       	std	Y+8, r21	; 0x08
    239e:	69 87       	std	Y+9, r22	; 0x09
    23a0:	7a 87       	std	Y+10, r23	; 0x0a
    23a2:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    23a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a8:	89 2b       	or	r24, r25
    23aa:	21 f0       	breq	.+8      	; 0x23b4 <action_exec+0x2e>
    23ac:	85 2f       	mov	r24, r21
    23ae:	84 23       	and	r24, r20
    23b0:	8f 3f       	cpi	r24, 0xFF	; 255
    23b2:	d9 f4       	brne	.+54     	; 0x23ea <action_exec+0x64>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    23b4:	1e 82       	std	Y+6, r1	; 0x06
    23b6:	1d 82       	std	Y+5, r1	; 0x05
    23b8:	85 e0       	ldi	r24, 0x05	; 5
    23ba:	fe 01       	movw	r30, r28
    23bc:	37 96       	adiw	r30, 0x07	; 7
    23be:	de 01       	movw	r26, r28
    23c0:	11 96       	adiw	r26, 0x01	; 1
    23c2:	01 90       	ld	r0, Z+
    23c4:	0d 92       	st	X+, r0
    23c6:	8a 95       	dec	r24
    23c8:	e1 f7       	brne	.-8      	; 0x23c2 <action_exec+0x3c>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    23ca:	49 81       	ldd	r20, Y+1	; 0x01
    23cc:	5a 81       	ldd	r21, Y+2	; 0x02
    23ce:	6b 81       	ldd	r22, Y+3	; 0x03
    23d0:	7c 81       	ldd	r23, Y+4	; 0x04
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    23d6:	2b 96       	adiw	r28, 0x0b	; 11
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    action_tapping_process(record);
    23e6:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <action_tapping_process>
        hook_matrix_change(event);
    23ea:	69 85       	ldd	r22, Y+9	; 0x09
    23ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    23ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    23f0:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <hook_matrix_change>
    23f4:	df cf       	rjmp	.-66     	; 0x23b4 <action_exec+0x2e>

000023f6 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    23f6:	cf 93       	push	r28
    23f8:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    23fa:	88 23       	and	r24, r24
    23fc:	09 f4       	brne	.+2      	; 0x2400 <register_code+0xa>
    23fe:	90 c0       	rjmp	.+288    	; 0x2520 <register_code+0x12a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2400:	8c ef       	ldi	r24, 0xFC	; 252
    2402:	8c 0f       	add	r24, r28
    2404:	81 3a       	cpi	r24, 0xA1	; 161
    2406:	58 f4       	brcc	.+22     	; 0x241e <register_code+0x28>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2408:	8c 2f       	mov	r24, r28
    240a:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <command_proc>
    240e:	81 11       	cpse	r24, r1
    2410:	87 c0       	rjmp	.+270    	; 0x2520 <register_code+0x12a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2412:	8c 2f       	mov	r24, r28
    2414:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <add_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2418:	cf 91       	pop	r28
        send_keyboard_report();
    241a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <send_keyboard_report>
    else if IS_MOD(code) {
    241e:	80 e2       	ldi	r24, 0x20	; 32
    2420:	8c 0f       	add	r24, r28
    2422:	88 30       	cpi	r24, 0x08	; 8
    2424:	48 f4       	brcc	.+18     	; 0x2438 <register_code+0x42>
        add_mods(MOD_BIT(code));
    2426:	c7 70       	andi	r28, 0x07	; 7
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	01 c0       	rjmp	.+2      	; 0x242e <register_code+0x38>
    242c:	88 0f       	add	r24, r24
    242e:	ca 95       	dec	r28
    2430:	ea f7       	brpl	.-6      	; 0x242c <register_code+0x36>
    2432:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <add_mods>
    2436:	f0 cf       	rjmp	.-32     	; 0x2418 <register_code+0x22>
    else if IS_SYSTEM(code) {
    2438:	8b e5       	ldi	r24, 0x5B	; 91
    243a:	8c 0f       	add	r24, r28
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	68 f4       	brcc	.+26     	; 0x245a <register_code+0x64>
        host_system_send(KEYCODE2SYSTEM(code));
    2440:	81 e8       	ldi	r24, 0x81	; 129
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	c5 3a       	cpi	r28, 0xA5	; 165
    2446:	31 f0       	breq	.+12     	; 0x2454 <register_code+0x5e>
    2448:	83 e8       	ldi	r24, 0x83	; 131
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	c6 3a       	cpi	r28, 0xA6	; 166
    244e:	11 f4       	brne	.+4      	; 0x2454 <register_code+0x5e>
    2450:	82 e8       	ldi	r24, 0x82	; 130
    2452:	90 e0       	ldi	r25, 0x00	; 0
}
    2454:	cf 91       	pop	r28
        host_system_send(KEYCODE2SYSTEM(code));
    2456:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <host_system_send>
    else if IS_CONSUMER(code) {
    245a:	88 e5       	ldi	r24, 0x58	; 88
    245c:	8c 0f       	add	r24, r28
    245e:	85 31       	cpi	r24, 0x15	; 21
    2460:	08 f0       	brcs	.+2      	; 0x2464 <register_code+0x6e>
    2462:	5e c0       	rjmp	.+188    	; 0x2520 <register_code+0x12a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2464:	82 ee       	ldi	r24, 0xE2	; 226
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	c8 3a       	cpi	r28, 0xA8	; 168
    246a:	09 f4       	brne	.+2      	; 0x246e <register_code+0x78>
    246c:	56 c0       	rjmp	.+172    	; 0x251a <register_code+0x124>
    246e:	89 ee       	ldi	r24, 0xE9	; 233
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	c9 3a       	cpi	r28, 0xA9	; 169
    2474:	09 f4       	brne	.+2      	; 0x2478 <register_code+0x82>
    2476:	51 c0       	rjmp	.+162    	; 0x251a <register_code+0x124>
    2478:	8a ee       	ldi	r24, 0xEA	; 234
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	ca 3a       	cpi	r28, 0xAA	; 170
    247e:	09 f4       	brne	.+2      	; 0x2482 <register_code+0x8c>
    2480:	4c c0       	rjmp	.+152    	; 0x251a <register_code+0x124>
    2482:	85 eb       	ldi	r24, 0xB5	; 181
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	cb 3a       	cpi	r28, 0xAB	; 171
    2488:	09 f4       	brne	.+2      	; 0x248c <register_code+0x96>
    248a:	47 c0       	rjmp	.+142    	; 0x251a <register_code+0x124>
    248c:	86 eb       	ldi	r24, 0xB6	; 182
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	cc 3a       	cpi	r28, 0xAC	; 172
    2492:	09 f4       	brne	.+2      	; 0x2496 <register_code+0xa0>
    2494:	42 c0       	rjmp	.+132    	; 0x251a <register_code+0x124>
    2496:	83 eb       	ldi	r24, 0xB3	; 179
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	cd 3a       	cpi	r28, 0xAD	; 173
    249c:	f1 f1       	breq	.+124    	; 0x251a <register_code+0x124>
    249e:	84 eb       	ldi	r24, 0xB4	; 180
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	ce 3a       	cpi	r28, 0xAE	; 174
    24a4:	d1 f1       	breq	.+116    	; 0x251a <register_code+0x124>
    24a6:	87 eb       	ldi	r24, 0xB7	; 183
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	cf 3a       	cpi	r28, 0xAF	; 175
    24ac:	b1 f1       	breq	.+108    	; 0x251a <register_code+0x124>
    24ae:	8c ec       	ldi	r24, 0xCC	; 204
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	c1 3b       	cpi	r28, 0xB1	; 177
    24b4:	91 f1       	breq	.+100    	; 0x251a <register_code+0x124>
    24b6:	8d ec       	ldi	r24, 0xCD	; 205
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	c0 3b       	cpi	r28, 0xB0	; 176
    24bc:	71 f1       	breq	.+92     	; 0x251a <register_code+0x124>
    24be:	83 e8       	ldi	r24, 0x83	; 131
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	c2 3b       	cpi	r28, 0xB2	; 178
    24c4:	51 f1       	breq	.+84     	; 0x251a <register_code+0x124>
    24c6:	8a e8       	ldi	r24, 0x8A	; 138
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	c3 3b       	cpi	r28, 0xB3	; 179
    24cc:	31 f1       	breq	.+76     	; 0x251a <register_code+0x124>
    24ce:	82 e9       	ldi	r24, 0x92	; 146
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	c4 3b       	cpi	r28, 0xB4	; 180
    24d4:	11 f1       	breq	.+68     	; 0x251a <register_code+0x124>
    24d6:	84 e9       	ldi	r24, 0x94	; 148
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	c5 3b       	cpi	r28, 0xB5	; 181
    24dc:	f1 f0       	breq	.+60     	; 0x251a <register_code+0x124>
    24de:	81 e2       	ldi	r24, 0x21	; 33
    24e0:	92 e0       	ldi	r25, 0x02	; 2
    24e2:	c6 3b       	cpi	r28, 0xB6	; 182
    24e4:	d1 f0       	breq	.+52     	; 0x251a <register_code+0x124>
    24e6:	83 e2       	ldi	r24, 0x23	; 35
    24e8:	92 e0       	ldi	r25, 0x02	; 2
    24ea:	c7 3b       	cpi	r28, 0xB7	; 183
    24ec:	b1 f0       	breq	.+44     	; 0x251a <register_code+0x124>
    24ee:	84 e2       	ldi	r24, 0x24	; 36
    24f0:	92 e0       	ldi	r25, 0x02	; 2
    24f2:	c8 3b       	cpi	r28, 0xB8	; 184
    24f4:	91 f0       	breq	.+36     	; 0x251a <register_code+0x124>
    24f6:	85 e2       	ldi	r24, 0x25	; 37
    24f8:	92 e0       	ldi	r25, 0x02	; 2
    24fa:	c9 3b       	cpi	r28, 0xB9	; 185
    24fc:	71 f0       	breq	.+28     	; 0x251a <register_code+0x124>
    24fe:	86 e2       	ldi	r24, 0x26	; 38
    2500:	92 e0       	ldi	r25, 0x02	; 2
    2502:	ca 3b       	cpi	r28, 0xBA	; 186
    2504:	51 f0       	breq	.+20     	; 0x251a <register_code+0x124>
    2506:	87 e2       	ldi	r24, 0x27	; 39
    2508:	92 e0       	ldi	r25, 0x02	; 2
    250a:	cb 3b       	cpi	r28, 0xBB	; 187
    250c:	31 f0       	breq	.+12     	; 0x251a <register_code+0x124>
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	cc 3b       	cpi	r28, 0xBC	; 188
    2514:	11 f4       	brne	.+4      	; 0x251a <register_code+0x124>
    2516:	8a e2       	ldi	r24, 0x2A	; 42
    2518:	92 e0       	ldi	r25, 0x02	; 2
}
    251a:	cf 91       	pop	r28
        host_consumer_send(KEYCODE2CONSUMER(code));
    251c:	0c 94 98 10 	jmp	0x2130	; 0x2130 <host_consumer_send>
}
    2520:	cf 91       	pop	r28
    2522:	08 95       	ret

00002524 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2524:	88 23       	and	r24, r24
    2526:	29 f1       	breq	.+74     	; 0x2572 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2528:	9c ef       	ldi	r25, 0xFC	; 252
    252a:	98 0f       	add	r25, r24
    252c:	91 3a       	cpi	r25, 0xA1	; 161
    252e:	20 f4       	brcc	.+8      	; 0x2538 <unregister_code+0x14>
        del_key(code);
    2530:	0e 94 1e 1c 	call	0x383c	; 0x383c <del_key>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
        del_mods(MOD_BIT(code));
        send_keyboard_report();
    2534:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <send_keyboard_report>
    else if IS_MOD(code) {
    2538:	90 e2       	ldi	r25, 0x20	; 32
    253a:	98 0f       	add	r25, r24
    253c:	98 30       	cpi	r25, 0x08	; 8
    253e:	50 f4       	brcc	.+20     	; 0x2554 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    2540:	87 70       	andi	r24, 0x07	; 7
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <unregister_code+0x24>
    2546:	99 0f       	add	r25, r25
    2548:	8a 95       	dec	r24
    254a:	ea f7       	brpl	.-6      	; 0x2546 <unregister_code+0x22>
    254c:	89 2f       	mov	r24, r25
    254e:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <del_mods>
    2552:	f0 cf       	rjmp	.-32     	; 0x2534 <unregister_code+0x10>
    }
    else if IS_SYSTEM(code) {
    2554:	9b e5       	ldi	r25, 0x5B	; 91
    2556:	98 0f       	add	r25, r24
    2558:	93 30       	cpi	r25, 0x03	; 3
    255a:	20 f4       	brcc	.+8      	; 0x2564 <unregister_code+0x40>
        host_system_send(0);
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2564:	88 5a       	subi	r24, 0xA8	; 168
    2566:	85 31       	cpi	r24, 0x15	; 21
    2568:	20 f4       	brcc	.+8      	; 0x2572 <unregister_code+0x4e>
        host_consumer_send(0);
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	0c 94 98 10 	jmp	0x2130	; 0x2130 <host_consumer_send>
    }
}
    2572:	08 95       	ret

00002574 <register_mods>:
    unregister_code(code);
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2574:	88 23       	and	r24, r24
    2576:	21 f0       	breq	.+8      	; 0x2580 <register_mods+0xc>
        add_mods(mods);
    2578:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <add_mods>
        send_keyboard_report();
    257c:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <send_keyboard_report>
    }
}
    2580:	08 95       	ret

00002582 <unregister_mods>:

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2582:	88 23       	and	r24, r24
    2584:	21 f0       	breq	.+8      	; 0x258e <unregister_mods+0xc>
        del_mods(mods);
    2586:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <del_mods>
        send_keyboard_report();
    258a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <send_keyboard_report>
    }
}
    258e:	08 95       	ret

00002590 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2590:	0e 94 94 1c 	call	0x3928	; 0x3928 <clear_weak_mods>
    clear_keys();
    2594:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <clear_keys>
    send_keyboard_report();
    2598:	0e 94 ad 1c 	call	0x395a	; 0x395a <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    259c:	0e 94 49 21 	call	0x4292	; 0x4292 <mousekey_clear>
    mousekey_send();
    25a0:	0e 94 1b 20 	call	0x4036	; 0x4036 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <host_system_send>
    host_consumer_send(0);
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	0c 94 98 10 	jmp	0x2130	; 0x2130 <host_consumer_send>

000025b4 <clear_keyboard>:
    clear_mods();
    25b4:	0e 94 84 1c 	call	0x3908	; 0x3908 <clear_mods>
    clear_keyboard_but_mods();
    25b8:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <clear_keyboard_but_mods>

000025bc <process_action>:
{
    25bc:	af 92       	push	r10
    25be:	bf 92       	push	r11
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <process_action+0x16>
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <process_action+0x18>
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	5c 01       	movw	r10, r24
    if (hook_process_action(record)) return;
    25dc:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <hook_process_action>
    25e0:	81 11       	cpse	r24, r1
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <process_action+0x50>
    keyevent_t event = record->event;
    25e4:	85 e0       	ldi	r24, 0x05	; 5
    25e6:	f5 01       	movw	r30, r10
    25e8:	de 01       	movw	r26, r28
    25ea:	11 96       	adiw	r26, 0x01	; 1
    25ec:	01 90       	ld	r0, Z+
    25ee:	0d 92       	st	X+, r0
    25f0:	8a 95       	dec	r24
    25f2:	e1 f7       	brne	.-8      	; 0x25ec <process_action+0x30>
    25f4:	f5 01       	movw	r30, r10
    25f6:	83 81       	ldd	r24, Z+3	; 0x03
    25f8:	94 81       	ldd	r25, Z+4	; 0x04
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	39 f0       	breq	.+14     	; 0x260c <process_action+0x50>
    25fe:	40 81       	ld	r20, Z
    2600:	51 81       	ldd	r21, Z+1	; 0x01
    2602:	24 2f       	mov	r18, r20
    2604:	25 23       	and	r18, r21
    2606:	2f 3f       	cpi	r18, 0xFF	; 255
    2608:	09 f0       	breq	.+2      	; 0x260c <process_action+0x50>
    260a:	fe c2       	rjmp	.+1532   	; 0x2c08 <process_action+0x64c>
}
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	df 90       	pop	r13
    2624:	cf 90       	pop	r12
    2626:	bf 90       	pop	r11
    2628:	af 90       	pop	r10
    262a:	08 95       	ret
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    262c:	f1 2f       	mov	r31, r17
    262e:	ff 70       	andi	r31, 0x0F	; 15
    2630:	ef 2e       	mov	r14, r31
    2632:	10 7f       	andi	r17, 0xF0	; 240
    2634:	19 f0       	breq	.+6      	; 0x263c <process_action+0x80>
    2636:	e2 94       	swap	r14
    2638:	40 ef       	ldi	r20, 0xF0	; 240
    263a:	e4 22       	and	r14, r20
                if (event.pressed) {
    263c:	ff 20       	and	r15, r15
    263e:	c9 f0       	breq	.+50     	; 0x2672 <process_action+0xb6>
                    if (mods) {
    2640:	ee 20       	and	r14, r14
    2642:	29 f0       	breq	.+10     	; 0x264e <process_action+0x92>
                        add_weak_mods(mods);
    2644:	8e 2d       	mov	r24, r14
    2646:	0e 94 87 1c 	call	0x390e	; 0x390e <add_weak_mods>
                        send_keyboard_report();
    264a:	0e 94 ad 1c 	call	0x395a	; 0x395a <send_keyboard_report>
                            register_code(action.layer_tap.code);
    264e:	80 2f       	mov	r24, r16
}
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
                            register_code(action.layer_tap.code);
    266e:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <register_code>
                    unregister_code(action.key.code);
    2672:	80 2f       	mov	r24, r16
    2674:	0e 94 92 12 	call	0x2524	; 0x2524 <unregister_code>
                    if (mods) {
    2678:	ee 20       	and	r14, r14
    267a:	41 f2       	breq	.-112    	; 0x260c <process_action+0x50>
                        del_weak_mods(mods);
    267c:	8e 2d       	mov	r24, r14
    267e:	0e 94 8d 1c 	call	0x391a	; 0x391a <del_weak_mods>
}
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	df 90       	pop	r13
    269a:	cf 90       	pop	r12
    269c:	bf 90       	pop	r11
    269e:	af 90       	pop	r10
                        send_keyboard_report();
    26a0:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <send_keyboard_report>
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    26a4:	21 2f       	mov	r18, r17
    26a6:	2f 70       	andi	r18, 0x0F	; 15
    26a8:	d2 2e       	mov	r13, r18
    26aa:	10 7f       	andi	r17, 0xF0	; 240
    26ac:	10 32       	cpi	r17, 0x20	; 32
    26ae:	19 f0       	breq	.+6      	; 0x26b6 <process_action+0xfa>
    26b0:	d2 94       	swap	r13
    26b2:	30 ef       	ldi	r19, 0xF0	; 240
    26b4:	d3 22       	and	r13, r19
                switch (action.key.code) {
    26b6:	00 23       	and	r16, r16
    26b8:	79 f0       	breq	.+30     	; 0x26d8 <process_action+0x11c>
    26ba:	01 30       	cpi	r16, 0x01	; 1
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <process_action+0x104>
    26be:	52 c0       	rjmp	.+164    	; 0x2764 <process_action+0x1a8>
                        if (event.pressed) {
    26c0:	ff 20       	and	r15, r15
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <process_action+0x10a>
    26c4:	60 c0       	rjmp	.+192    	; 0x2786 <process_action+0x1ca>
                            if (tap_count > 0) {
    26c6:	ee 20       	and	r14, r14
    26c8:	59 f0       	breq	.+22     	; 0x26e0 <process_action+0x124>
                                if (record->tap.interrupted) {
    26ca:	f5 01       	movw	r30, r10
    26cc:	85 81       	ldd	r24, Z+5	; 0x05
    26ce:	80 ff       	sbrs	r24, 0
    26d0:	be cf       	rjmp	.-132    	; 0x264e <process_action+0x92>
                                    record->tap.count = 0;
    26d2:	8f 70       	andi	r24, 0x0F	; 15
    26d4:	85 83       	std	Z+5, r24	; 0x05
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <process_action+0x124>
                        if (event.pressed) {
    26d8:	ff 20       	and	r15, r15
    26da:	49 f1       	breq	.+82     	; 0x272e <process_action+0x172>
                            if (tap_count == 0) {
    26dc:	e1 10       	cpse	r14, r1
    26de:	12 c0       	rjmp	.+36     	; 0x2704 <process_action+0x148>
                                    register_mods(mods);
    26e0:	8d 2d       	mov	r24, r13
}
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
                                    register_mods(mods);
    2700:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <register_mods>
                            else if (tap_count == 1) {
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	e8 12       	cpse	r14, r24
    2708:	eb cf       	rjmp	.-42     	; 0x26e0 <process_action+0x124>
                                set_oneshot_mods(mods);
    270a:	8d 2d       	mov	r24, r13
}
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	ff 90       	pop	r15
    2720:	ef 90       	pop	r14
    2722:	df 90       	pop	r13
    2724:	cf 90       	pop	r12
    2726:	bf 90       	pop	r11
    2728:	af 90       	pop	r10
                                set_oneshot_mods(mods);
    272a:	0c 94 97 1c 	jmp	0x392e	; 0x392e <set_oneshot_mods>
                            if (tap_count == 0) {
    272e:	e1 10       	cpse	r14, r1
    2730:	14 c0       	rjmp	.+40     	; 0x275a <process_action+0x19e>
                                clear_oneshot_mods();
    2732:	0e 94 9a 1c 	call	0x3934	; 0x3934 <clear_oneshot_mods>
                                unregister_mods(mods);
    2736:	8d 2d       	mov	r24, r13
}
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	bf 90       	pop	r11
    2754:	af 90       	pop	r10
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2756:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <unregister_mods>
                            else if (tap_count == 1) {
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	e9 16       	cp	r14, r25
    275e:	09 f4       	brne	.+2      	; 0x2762 <process_action+0x1a6>
    2760:	55 cf       	rjmp	.-342    	; 0x260c <process_action+0x50>
    2762:	e7 cf       	rjmp	.-50     	; 0x2732 <process_action+0x176>
                        if (event.pressed) {
    2764:	ff 20       	and	r15, r15
    2766:	51 f0       	breq	.+20     	; 0x277c <process_action+0x1c0>
                            if (tap_count <= TAPPING_TOGGLE) {
    2768:	e5 e0       	ldi	r30, 0x05	; 5
    276a:	ee 15       	cp	r30, r14
    276c:	08 f4       	brcc	.+2      	; 0x2770 <process_action+0x1b4>
    276e:	4e cf       	rjmp	.-356    	; 0x260c <process_action+0x50>
                                if (mods & get_mods()) {
    2770:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <get_mods>
    2774:	8d 21       	and	r24, r13
    2776:	09 f4       	brne	.+2      	; 0x277a <process_action+0x1be>
    2778:	b3 cf       	rjmp	.-154    	; 0x26e0 <process_action+0x124>
    277a:	dd cf       	rjmp	.-70     	; 0x2736 <process_action+0x17a>
                            if (tap_count < TAPPING_TOGGLE) {
    277c:	f4 e0       	ldi	r31, 0x04	; 4
    277e:	fe 15       	cp	r31, r14
    2780:	08 f4       	brcc	.+2      	; 0x2784 <process_action+0x1c8>
    2782:	44 cf       	rjmp	.-376    	; 0x260c <process_action+0x50>
    2784:	d8 cf       	rjmp	.-80     	; 0x2736 <process_action+0x17a>
                            if (tap_count > 0) {
    2786:	ee 20       	and	r14, r14
    2788:	b1 f2       	breq	.-84     	; 0x2736 <process_action+0x17a>
                            unregister_code(action.layer_tap.code);
    278a:	80 2f       	mov	r24, r16
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	ef 90       	pop	r14
    27a2:	df 90       	pop	r13
    27a4:	cf 90       	pop	r12
    27a6:	bf 90       	pop	r11
    27a8:	af 90       	pop	r10
                            unregister_code(action.layer_tap.code);
    27aa:	0c 94 92 12 	jmp	0x2524	; 0x2524 <unregister_code>
            switch (action.usage.page) {
    27ae:	81 2f       	mov	r24, r17
    27b0:	86 95       	lsr	r24
    27b2:	86 95       	lsr	r24
    27b4:	83 70       	andi	r24, 0x03	; 3
    27b6:	d1 f0       	breq	.+52     	; 0x27ec <process_action+0x230>
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	09 f0       	breq	.+2      	; 0x27be <process_action+0x202>
    27bc:	27 cf       	rjmp	.-434    	; 0x260c <process_action+0x50>
                        host_consumer_send(action.usage.code);
    27be:	c8 01       	movw	r24, r16
    27c0:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    27c2:	f1 10       	cpse	r15, r1
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <process_action+0x20e>
                        host_consumer_send(0);
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	80 e0       	ldi	r24, 0x00	; 0
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	bf 90       	pop	r11
    27e6:	af 90       	pop	r10
                        host_consumer_send(0);
    27e8:	0c 94 98 10 	jmp	0x2130	; 0x2130 <host_consumer_send>
                        host_system_send(action.usage.code);
    27ec:	c8 01       	movw	r24, r16
    27ee:	93 70       	andi	r25, 0x03	; 3
                    if (event.pressed) {
    27f0:	f1 10       	cpse	r15, r1
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <process_action+0x23c>
                        host_system_send(0);
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	80 e0       	ldi	r24, 0x00	; 0
}
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	df 90       	pop	r13
    2810:	cf 90       	pop	r12
    2812:	bf 90       	pop	r11
    2814:	af 90       	pop	r10
                        host_system_send(0);
    2816:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <host_system_send>
                mousekey_on(action.key.code);
    281a:	80 2f       	mov	r24, r16
            if (event.pressed) {
    281c:	ff 20       	and	r15, r15
    281e:	99 f0       	breq	.+38     	; 0x2846 <process_action+0x28a>
                mousekey_on(action.key.code);
    2820:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <mousekey_on>
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	ff 90       	pop	r15
    2838:	ef 90       	pop	r14
    283a:	df 90       	pop	r13
    283c:	cf 90       	pop	r12
    283e:	bf 90       	pop	r11
    2840:	af 90       	pop	r10
                mousekey_send();
    2842:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <mousekey_send>
                mousekey_off(action.key.code);
    2846:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <mousekey_off>
    284a:	ec cf       	rjmp	.-40     	; 0x2824 <process_action+0x268>
            if (action.layer_bitop.on == 0) {
    284c:	81 2f       	mov	r24, r17
    284e:	83 70       	andi	r24, 0x03	; 3
    2850:	09 f0       	breq	.+2      	; 0x2854 <process_action+0x298>
    2852:	71 c0       	rjmp	.+226    	; 0x2936 <process_action+0x37a>
                if (!event.pressed) {
    2854:	f1 10       	cpse	r15, r1
    2856:	da ce       	rjmp	.-588    	; 0x260c <process_action+0x50>
                    uint8_t shift = action.layer_bitop.part*4;
    2858:	20 2f       	mov	r18, r16
    285a:	22 95       	swap	r18
    285c:	26 95       	lsr	r18
    285e:	27 70       	andi	r18, 0x07	; 7
    2860:	22 0f       	add	r18, r18
    2862:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2864:	60 2f       	mov	r22, r16
    2866:	6f 70       	andi	r22, 0x0F	; 15
    2868:	c6 2e       	mov	r12, r22
    286a:	d1 2c       	mov	r13, r1
    286c:	f1 2c       	mov	r15, r1
    286e:	e1 2c       	mov	r14, r1
    2870:	02 2e       	mov	r0, r18
    2872:	04 c0       	rjmp	.+8      	; 0x287c <process_action+0x2c0>
    2874:	cc 0c       	add	r12, r12
    2876:	dd 1c       	adc	r13, r13
    2878:	ee 1c       	adc	r14, r14
    287a:	ff 1c       	adc	r15, r15
    287c:	0a 94       	dec	r0
    287e:	d2 f7       	brpl	.-12     	; 0x2874 <process_action+0x2b8>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	cb 01       	movw	r24, r22
    2886:	04 ff       	sbrs	r16, 4
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <process_action+0x2ec>
    288a:	6f e0       	ldi	r22, 0x0F	; 15
    288c:	70 e0       	ldi	r23, 0x00	; 0
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	04 c0       	rjmp	.+8      	; 0x289c <process_action+0x2e0>
    2894:	66 0f       	add	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	88 1f       	adc	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	2a 95       	dec	r18
    289e:	d2 f7       	brpl	.-12     	; 0x2894 <process_action+0x2d8>
    28a0:	60 95       	com	r22
    28a2:	70 95       	com	r23
    28a4:	80 95       	com	r24
    28a6:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    28a8:	16 95       	lsr	r17
    28aa:	16 95       	lsr	r17
    28ac:	13 70       	andi	r17, 0x03	; 3
    28ae:	12 30       	cpi	r17, 0x02	; 2
    28b0:	c1 f0       	breq	.+48     	; 0x28e2 <process_action+0x326>
    28b2:	60 f5       	brcc	.+88     	; 0x290c <process_action+0x350>
    28b4:	6c 29       	or	r22, r12
    28b6:	7d 29       	or	r23, r13
    28b8:	8e 29       	or	r24, r14
    28ba:	9f 29       	or	r25, r15
    28bc:	11 30       	cpi	r17, 0x01	; 1
    28be:	51 f1       	breq	.+84     	; 0x2914 <process_action+0x358>
}
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	ff 90       	pop	r15
    28d4:	ef 90       	pop	r14
    28d6:	df 90       	pop	r13
    28d8:	cf 90       	pop	r12
    28da:	bf 90       	pop	r11
    28dc:	af 90       	pop	r10
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    28de:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <default_layer_and>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    28e2:	6c 29       	or	r22, r12
    28e4:	7d 29       	or	r23, r13
    28e6:	8e 29       	or	r24, r14
    28e8:	9f 29       	or	r25, r15
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2908:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    290c:	0e 94 44 1a 	call	0x3488	; 0x3488 <default_layer_and>
    2910:	c7 01       	movw	r24, r14
    2912:	b6 01       	movw	r22, r12
}
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	ef 90       	pop	r14
    292a:	df 90       	pop	r13
    292c:	cf 90       	pop	r12
    292e:	bf 90       	pop	r11
    2930:	af 90       	pop	r10
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2932:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <default_layer_or>
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2936:	86 95       	lsr	r24
    2938:	ff 20       	and	r15, r15
    293a:	11 f0       	breq	.+4      	; 0x2940 <process_action+0x384>
    293c:	81 2f       	mov	r24, r17
    293e:	81 70       	andi	r24, 0x01	; 1
    2940:	88 23       	and	r24, r24
    2942:	09 f4       	brne	.+2      	; 0x2946 <process_action+0x38a>
    2944:	63 ce       	rjmp	.-826    	; 0x260c <process_action+0x50>
                    uint8_t shift = action.layer_bitop.part*4;
    2946:	20 2f       	mov	r18, r16
    2948:	22 95       	swap	r18
    294a:	26 95       	lsr	r18
    294c:	27 70       	andi	r18, 0x07	; 7
    294e:	22 0f       	add	r18, r18
    2950:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2952:	60 2f       	mov	r22, r16
    2954:	6f 70       	andi	r22, 0x0F	; 15
    2956:	c6 2e       	mov	r12, r22
    2958:	d1 2c       	mov	r13, r1
    295a:	f1 2c       	mov	r15, r1
    295c:	e1 2c       	mov	r14, r1
    295e:	02 2e       	mov	r0, r18
    2960:	04 c0       	rjmp	.+8      	; 0x296a <process_action+0x3ae>
    2962:	cc 0c       	add	r12, r12
    2964:	dd 1c       	adc	r13, r13
    2966:	ee 1c       	adc	r14, r14
    2968:	ff 1c       	adc	r15, r15
    296a:	0a 94       	dec	r0
    296c:	d2 f7       	brpl	.-12     	; 0x2962 <process_action+0x3a6>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	cb 01       	movw	r24, r22
    2974:	04 ff       	sbrs	r16, 4
    2976:	0f c0       	rjmp	.+30     	; 0x2996 <process_action+0x3da>
    2978:	6f e0       	ldi	r22, 0x0F	; 15
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	04 c0       	rjmp	.+8      	; 0x298a <process_action+0x3ce>
    2982:	66 0f       	add	r22, r22
    2984:	77 1f       	adc	r23, r23
    2986:	88 1f       	adc	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	2a 95       	dec	r18
    298c:	d2 f7       	brpl	.-12     	; 0x2982 <process_action+0x3c6>
    298e:	60 95       	com	r22
    2990:	70 95       	com	r23
    2992:	80 95       	com	r24
    2994:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2996:	16 95       	lsr	r17
    2998:	16 95       	lsr	r17
    299a:	13 70       	andi	r17, 0x03	; 3
    299c:	12 30       	cpi	r17, 0x02	; 2
    299e:	c1 f0       	breq	.+48     	; 0x29d0 <process_action+0x414>
    29a0:	60 f5       	brcc	.+88     	; 0x29fa <process_action+0x43e>
    29a2:	6c 29       	or	r22, r12
    29a4:	7d 29       	or	r23, r13
    29a6:	8e 29       	or	r24, r14
    29a8:	9f 29       	or	r25, r15
    29aa:	11 30       	cpi	r17, 0x01	; 1
    29ac:	51 f1       	breq	.+84     	; 0x2a02 <process_action+0x446>
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
    29c8:	bf 90       	pop	r11
    29ca:	af 90       	pop	r10
                        case OP_BIT_AND: layer_and(bits | mask); break;
    29cc:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <layer_and>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29d0:	6c 29       	or	r22, r12
    29d2:	7d 29       	or	r23, r13
    29d4:	8e 29       	or	r24, r14
    29d6:	9f 29       	or	r25, r15
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	bf 90       	pop	r11
    29f4:	af 90       	pop	r10
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29f6:	0c 94 1b 1b 	jmp	0x3636	; 0x3636 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    29fa:	0e 94 09 1b 	call	0x3612	; 0x3612 <layer_and>
    29fe:	c7 01       	movw	r24, r14
    2a00:	b6 01       	movw	r22, r12
}
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	bf 90       	pop	r11
    2a1e:	af 90       	pop	r10
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2a20:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <layer_or>
            switch (action.layer_tap.code) {
    2a24:	00 3f       	cpi	r16, 0xF0	; 240
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <process_action+0x46e>
    2a28:	44 c0       	rjmp	.+136    	; 0x2ab2 <process_action+0x4f6>
    2a2a:	60 f4       	brcc	.+24     	; 0x2a44 <process_action+0x488>
    2a2c:	80 e4       	ldi	r24, 0x40	; 64
    2a2e:	80 0f       	add	r24, r16
    2a30:	80 32       	cpi	r24, 0x20	; 32
    2a32:	28 f1       	brcs	.+74     	; 0x2a7e <process_action+0x4c2>
                    if (event.pressed) {
    2a34:	ff 20       	and	r15, r15
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <process_action+0x47e>
    2a38:	95 c0       	rjmp	.+298    	; 0x2b64 <process_action+0x5a8>
                        if (tap_count > 0) {
    2a3a:	e1 10       	cpse	r14, r1
    2a3c:	08 ce       	rjmp	.-1008   	; 0x264e <process_action+0x92>
                            layer_on(action.layer_tap.val);
    2a3e:	81 2f       	mov	r24, r17
    2a40:	8f 71       	andi	r24, 0x1F	; 31
    2a42:	59 c0       	rjmp	.+178    	; 0x2af6 <process_action+0x53a>
    2a44:	02 3f       	cpi	r16, 0xF2	; 242
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <process_action+0x48e>
    2a48:	67 c0       	rjmp	.+206    	; 0x2b18 <process_action+0x55c>
    2a4a:	08 f4       	brcc	.+2      	; 0x2a4e <process_action+0x492>
    2a4c:	50 c0       	rjmp	.+160    	; 0x2aee <process_action+0x532>
    2a4e:	03 3f       	cpi	r16, 0xF3	; 243
    2a50:	89 f7       	brne	.-30     	; 0x2a34 <process_action+0x478>
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a52:	ff 20       	and	r15, r15
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <process_action+0x49c>
    2a56:	75 c0       	rjmp	.+234    	; 0x2b42 <process_action+0x586>
    2a58:	81 2f       	mov	r24, r17
    2a5a:	8f 71       	andi	r24, 0x1F	; 31
}
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	df 90       	pop	r13
    2a74:	cf 90       	pop	r12
    2a76:	bf 90       	pop	r11
    2a78:	af 90       	pop	r10
                    event.pressed ? layer_move(action.layer_tap.val) :
    2a7a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <layer_move>
                    if (event.pressed) {
    2a7e:	81 2f       	mov	r24, r17
    2a80:	8f 71       	andi	r24, 0x1F	; 31
    2a82:	10 2f       	mov	r17, r16
    2a84:	10 71       	andi	r17, 0x10	; 16
    2a86:	ff 20       	and	r15, r15
    2a88:	51 f0       	breq	.+20     	; 0x2a9e <process_action+0x4e2>
                        layer_on(action.layer_tap.val);
    2a8a:	0e 94 92 1a 	call	0x3524	; 0x3524 <layer_on>
                        register_mods((action.layer_tap.code & 0x10) ?
    2a8e:	80 2f       	mov	r24, r16
    2a90:	82 95       	swap	r24
    2a92:	80 7f       	andi	r24, 0xF0	; 240
    2a94:	11 11       	cpse	r17, r1
    2a96:	25 ce       	rjmp	.-950    	; 0x26e2 <process_action+0x126>
    2a98:	80 2f       	mov	r24, r16
    2a9a:	8f 70       	andi	r24, 0x0F	; 15
    2a9c:	22 ce       	rjmp	.-956    	; 0x26e2 <process_action+0x126>
                        layer_off(action.layer_tap.val);
    2a9e:	0e 94 b3 1a 	call	0x3566	; 0x3566 <layer_off>
                        unregister_mods((action.layer_tap.code & 0x10) ?
    2aa2:	80 2f       	mov	r24, r16
    2aa4:	82 95       	swap	r24
    2aa6:	80 7f       	andi	r24, 0xF0	; 240
    2aa8:	11 11       	cpse	r17, r1
    2aaa:	46 ce       	rjmp	.-884    	; 0x2738 <process_action+0x17c>
    2aac:	80 2f       	mov	r24, r16
    2aae:	8f 70       	andi	r24, 0x0F	; 15
    2ab0:	43 ce       	rjmp	.-890    	; 0x2738 <process_action+0x17c>
                    if (event.pressed) {
    2ab2:	ff 20       	and	r15, r15
    2ab4:	b9 f0       	breq	.+46     	; 0x2ae4 <process_action+0x528>
                        if (tap_count < TAPPING_TOGGLE) {
    2ab6:	f4 e0       	ldi	r31, 0x04	; 4
    2ab8:	fe 15       	cp	r31, r14
    2aba:	08 f4       	brcc	.+2      	; 0x2abe <process_action+0x502>
    2abc:	a7 cd       	rjmp	.-1202   	; 0x260c <process_action+0x50>
                            layer_invert(action.layer_tap.val);
    2abe:	81 2f       	mov	r24, r17
    2ac0:	8f 71       	andi	r24, 0x1F	; 31
}
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	ff 90       	pop	r15
    2ad6:	ef 90       	pop	r14
    2ad8:	df 90       	pop	r13
    2ada:	cf 90       	pop	r12
    2adc:	bf 90       	pop	r11
    2ade:	af 90       	pop	r10
                            layer_invert(action.layer_tap.val);
    2ae0:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <layer_invert>
                        if (tap_count <= TAPPING_TOGGLE) {
    2ae4:	25 e0       	ldi	r18, 0x05	; 5
    2ae6:	2e 15       	cp	r18, r14
    2ae8:	08 f4       	brcc	.+2      	; 0x2aec <process_action+0x530>
    2aea:	90 cd       	rjmp	.-1248   	; 0x260c <process_action+0x50>
    2aec:	e8 cf       	rjmp	.-48     	; 0x2abe <process_action+0x502>
                    event.pressed ? layer_on(action.layer_tap.val) :
    2aee:	81 2f       	mov	r24, r17
    2af0:	8f 71       	andi	r24, 0x1F	; 31
    2af2:	ff 20       	and	r15, r15
    2af4:	a9 f0       	breq	.+42     	; 0x2b20 <process_action+0x564>
}
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
    2b10:	bf 90       	pop	r11
    2b12:	af 90       	pop	r10
                            layer_on(action.layer_tap.val);
    2b14:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <layer_on>
                    event.pressed ? layer_off(action.layer_tap.val) :
    2b18:	81 2f       	mov	r24, r17
    2b1a:	8f 71       	andi	r24, 0x1F	; 31
    2b1c:	ff 20       	and	r15, r15
    2b1e:	59 f3       	breq	.-42     	; 0x2af6 <process_action+0x53a>
}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	ff 90       	pop	r15
    2b34:	ef 90       	pop	r14
    2b36:	df 90       	pop	r13
    2b38:	cf 90       	pop	r12
    2b3a:	bf 90       	pop	r11
    2b3c:	af 90       	pop	r10
                            layer_off(action.layer_tap.val);
    2b3e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <layer_off>
}
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	df 90       	pop	r13
    2b5a:	cf 90       	pop	r12
    2b5c:	bf 90       	pop	r11
    2b5e:	af 90       	pop	r10
                                    layer_clear();
    2b60:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <layer_clear>
                        if (tap_count > 0) {
    2b64:	e1 10       	cpse	r14, r1
    2b66:	11 ce       	rjmp	.-990    	; 0x278a <process_action+0x1ce>
                            layer_off(action.layer_tap.val);
    2b68:	81 2f       	mov	r24, r17
    2b6a:	8f 71       	andi	r24, 0x1F	; 31
    2b6c:	d9 cf       	rjmp	.-78     	; 0x2b20 <process_action+0x564>
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b6e:	41 2f       	mov	r20, r17
    2b70:	4f 70       	andi	r20, 0x0F	; 15
    2b72:	60 2f       	mov	r22, r16
    2b74:	c5 01       	movw	r24, r10
    2b76:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <action_get_macro>
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
    2b94:	bf 90       	pop	r11
    2b96:	af 90       	pop	r10
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b98:	0c 94 80 19 	jmp	0x3300	; 0x3300 <action_macro_play>
            switch (action.command.id) {
    2b9c:	01 11       	cpse	r16, r1
    2b9e:	36 cd       	rjmp	.-1428   	; 0x260c <process_action+0x50>
                    if (event.pressed) {
    2ba0:	ff 20       	and	r15, r15
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <process_action+0x5ea>
    2ba4:	33 cd       	rjmp	.-1434   	; 0x260c <process_action+0x50>
                        clear_keyboard();
    2ba6:	0e 94 da 12 	call	0x25b4	; 0x25b4 <clear_keyboard>
	__builtin_avr_delay_cycles(__ticks_dc);
    2baa:	8f ef       	ldi	r24, 0xFF	; 255
    2bac:	90 e7       	ldi	r25, 0x70	; 112
    2bae:	e2 e0       	ldi	r30, 0x02	; 2
    2bb0:	81 50       	subi	r24, 0x01	; 1
    2bb2:	90 40       	sbci	r25, 0x00	; 0
    2bb4:	e0 40       	sbci	r30, 0x00	; 0
    2bb6:	e1 f7       	brne	.-8      	; 0x2bb0 <process_action+0x5f4>
    2bb8:	00 c0       	rjmp	.+0      	; 0x2bba <process_action+0x5fe>
    2bba:	00 00       	nop
}
    2bbc:	0f 90       	pop	r0
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	bf 90       	pop	r11
    2bd8:	af 90       	pop	r10
                        bootloader_jump();
    2bda:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <bootloader_jump>
            action_function(record, action.func.id, action.func.opt);
    2bde:	41 2f       	mov	r20, r17
    2be0:	4f 70       	andi	r20, 0x0F	; 15
    2be2:	60 2f       	mov	r22, r16
    2be4:	c5 01       	movw	r24, r10
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	1f 91       	pop	r17
    2bf6:	0f 91       	pop	r16
    2bf8:	ff 90       	pop	r15
    2bfa:	ef 90       	pop	r14
    2bfc:	df 90       	pop	r13
    2bfe:	cf 90       	pop	r12
    2c00:	bf 90       	pop	r11
    2c02:	af 90       	pop	r10
            action_function(record, action.func.id, action.func.opt);
    2c04:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <action_function>
    keyevent_t event = record->event;
    2c08:	f2 80       	ldd	r15, Z+2	; 0x02
    uint8_t tap_count = record->tap.count;
    2c0a:	e5 80       	ldd	r14, Z+5	; 0x05
    2c0c:	e2 94       	swap	r14
    2c0e:	2f e0       	ldi	r18, 0x0F	; 15
    2c10:	e2 22       	and	r14, r18
    action_t action = layer_switch_get_action(event);
    2c12:	49 83       	std	Y+1, r20	; 0x01
    2c14:	5a 83       	std	Y+2, r21	; 0x02
    2c16:	fb 82       	std	Y+3, r15	; 0x03
    2c18:	78 2f       	mov	r23, r24
    2c1a:	9d 83       	std	Y+5, r25	; 0x05
    2c1c:	8c 83       	std	Y+4, r24	; 0x04
    2c1e:	6f 2d       	mov	r22, r15
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	0e 94 2e 1b 	call	0x365c	; 0x365c <layer_switch_get_action>
    2c26:	8c 01       	movw	r16, r24
    dprint(" layer_state: "); layer_debug();
    2c28:	0e 94 2d 1b 	call	0x365a	; 0x365a <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2c2c:	0e 94 1f 1a 	call	0x343e	; 0x343e <default_layer_debug>
    switch (action.kind.id) {
    2c30:	e1 2f       	mov	r30, r17
    2c32:	e2 95       	swap	r30
    2c34:	ef 70       	andi	r30, 0x0F	; 15
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	e7 57       	subi	r30, 0x77	; 119
    2c3a:	f9 4d       	sbci	r31, 0xD9	; 217
    2c3c:	0c 94 63 26 	jmp	0x4cc6	; 0x4cc6 <__tablejump2__>

00002c40 <is_tap_key>:
#endif
}

bool is_tap_key(keyevent_t event)
{
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <is_tap_key+0x6>
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <is_tap_key+0x8>
    2c48:	0f 92       	push	r0
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	6b 83       	std	Y+3, r22	; 0x03
    2c50:	7c 83       	std	Y+4, r23	; 0x04
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	8c 81       	ldd	r24, Y+4	; 0x04
    2c56:	9d 81       	ldd	r25, Y+5	; 0x05
    2c58:	89 2b       	or	r24, r25
    2c5a:	21 f0       	breq	.+8      	; 0x2c64 <is_tap_key+0x24>
    2c5c:	84 2f       	mov	r24, r20
    2c5e:	85 23       	and	r24, r21
    2c60:	8f 3f       	cpi	r24, 0xFF	; 255
    2c62:	89 f4       	brne	.+34     	; 0x2c86 <is_tap_key+0x46>
            }
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0xc0 ... 0xdf:         // with modifiers
                    return false;
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	2e c0       	rjmp	.+92     	; 0x2cc4 <is_tap_key+0x84>
    2c68:	90 e2       	ldi	r25, 0x20	; 32
    2c6a:	98 0f       	add	r25, r24
    2c6c:	98 30       	cpi	r25, 0x08	; 8
    2c6e:	08 f1       	brcs	.+66     	; 0x2cb2 <is_tap_key+0x72>
            switch (action.layer_tap.code) {
    2c70:	88 3e       	cpi	r24, 0xE8	; 232
    2c72:	30 f4       	brcc	.+12     	; 0x2c80 <is_tap_key+0x40>
    2c74:	80 3e       	cpi	r24, 0xE0	; 224
    2c76:	e8 f4       	brcc	.+58     	; 0x2cb2 <is_tap_key+0x72>
    2c78:	84 50       	subi	r24, 0x04	; 4
    2c7a:	81 3a       	cpi	r24, 0xA1	; 161
    2c7c:	98 f7       	brcc	.-26     	; 0x2c64 <is_tap_key+0x24>
    2c7e:	19 c0       	rjmp	.+50     	; 0x2cb2 <is_tap_key+0x72>
    2c80:	80 3f       	cpi	r24, 0xF0	; 240
    2c82:	81 f7       	brne	.-32     	; 0x2c64 <is_tap_key+0x24>
    2c84:	16 c0       	rjmp	.+44     	; 0x2cb2 <is_tap_key+0x72>
    action_t action = layer_switch_get_action(event);
    2c86:	6b 81       	ldd	r22, Y+3	; 0x03
    2c88:	7c 81       	ldd	r23, Y+4	; 0x04
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	0e 94 2e 1b 	call	0x365c	; 0x365c <layer_switch_get_action>
    switch (action.kind.id) {
    2c90:	29 2f       	mov	r18, r25
    2c92:	22 95       	swap	r18
    2c94:	2f 70       	andi	r18, 0x0F	; 15
    2c96:	2c 30       	cpi	r18, 0x0C	; 12
    2c98:	70 f4       	brcc	.+28     	; 0x2cb6 <is_tap_key+0x76>
    2c9a:	2a 30       	cpi	r18, 0x0A	; 10
    2c9c:	48 f7       	brcc	.-46     	; 0x2c70 <is_tap_key+0x30>
    2c9e:	22 5f       	subi	r18, 0xF2	; 242
    2ca0:	2f 70       	andi	r18, 0x0F	; 15
    2ca2:	22 30       	cpi	r18, 0x02	; 2
    2ca4:	f8 f6       	brcc	.-66     	; 0x2c64 <is_tap_key+0x24>
            switch (action.key.code) {
    2ca6:	85 3a       	cpi	r24, 0xA5	; 165
    2ca8:	f8 f6       	brcc	.-66     	; 0x2c68 <is_tap_key+0x28>
    2caa:	84 30       	cpi	r24, 0x04	; 4
    2cac:	10 f4       	brcc	.+4      	; 0x2cb2 <is_tap_key+0x72>
    2cae:	82 30       	cpi	r24, 0x02	; 2
    2cb0:	f8 f6       	brcc	.-66     	; 0x2c70 <is_tap_key+0x30>
                case KC_A ... KC_EXSEL:     // tap key
                case KC_LCTRL ... KC_RGUI:  // tap key
                case OP_TAP_TOGGLE:
                    return true;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	07 c0       	rjmp	.+14     	; 0x2cc4 <is_tap_key+0x84>
    switch (action.kind.id) {
    2cb6:	2c 30       	cpi	r18, 0x0C	; 12
    2cb8:	11 f0       	breq	.+4      	; 0x2cbe <is_tap_key+0x7e>
    2cba:	2f 30       	cpi	r18, 0x0F	; 15
    2cbc:	99 f6       	brne	.-90     	; 0x2c64 <is_tap_key+0x24>
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2cbe:	93 fb       	bst	r25, 3
    2cc0:	88 27       	eor	r24, r24
    2cc2:	80 f9       	bld	r24, 0
            return false;
    }
    return false;
}
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	00 d0       	rcall	.+0      	; 0x2cda <debug_event+0x6>
    2cda:	00 d0       	rcall	.+0      	; 0x2cdc <debug_event+0x8>
    2cdc:	0f 92       	push	r0
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	08 95       	ret

00002cf2 <debug_record>:

void debug_record(keyrecord_t record)
{
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <debug_record+0x6>
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <debug_record+0x8>
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <debug_record+0xa>
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2d00:	26 96       	adiw	r28, 0x06	; 6
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	08 95       	ret

00002d12 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2d12:	1f 93       	push	r17
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d18:	c0 91 ee 02 	lds	r28, 0x02EE	; 0x8002ee <waiting_buffer_tail>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d1c:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d1e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <waiting_buffer_head>
    2d22:	8c 13       	cpse	r24, r28
    2d24:	04 c0       	rjmp	.+8      	; 0x2d2e <debug_waiting_buffer+0x1c>
    }
    debug("}\n");
}
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	08 95       	ret
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d2e:	d0 e0       	ldi	r29, 0x00	; 0
    2d30:	1c 9f       	mul	r17, r28
    2d32:	f0 01       	movw	r30, r0
    2d34:	1d 9f       	mul	r17, r29
    2d36:	f0 0d       	add	r31, r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	e0 51       	subi	r30, 0x10	; 16
    2d3c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3e:	40 81       	ld	r20, Z
    2d40:	51 81       	ldd	r21, Z+1	; 0x01
    2d42:	62 81       	ldd	r22, Z+2	; 0x02
    2d44:	73 81       	ldd	r23, Z+3	; 0x03
    2d46:	84 81       	ldd	r24, Z+4	; 0x04
    2d48:	95 81       	ldd	r25, Z+5	; 0x05
    2d4a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <debug_record>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d4e:	21 96       	adiw	r28, 0x01	; 1
    2d50:	c7 70       	andi	r28, 0x07	; 7
    2d52:	e5 cf       	rjmp	.-54     	; 0x2d1e <debug_waiting_buffer+0xc>

00002d54 <debug_tapping_key>:
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2d54:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <tapping_key>
    2d58:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <tapping_key+0x1>
    2d5c:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <tapping_key+0x2>
    2d60:	70 91 23 03 	lds	r23, 0x0323	; 0x800323 <tapping_key+0x3>
    2d64:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <tapping_key+0x4>
    2d68:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <tapping_key+0x5>
    2d6c:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <debug_record>

00002d70 <waiting_buffer_scan_tap>:
{
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    if (tapping_key.tap.count > 0) return;
    2d76:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    2d7a:	80 7f       	andi	r24, 0xF0	; 240
    2d7c:	c1 f4       	brne	.+48     	; 0x2dae <waiting_buffer_scan_tap+0x3e>
    if (!tapping_key.event.pressed) return;
    2d7e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <tapping_key+0x2>
    2d82:	88 23       	and	r24, r24
    2d84:	a1 f0       	breq	.+40     	; 0x2dae <waiting_buffer_scan_tap+0x3e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d86:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <waiting_buffer_tail>
    2d8a:	c0 91 ef 02 	lds	r28, 0x02EF	; 0x8002ef <waiting_buffer_head>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2d8e:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <tapping_key>
    2d92:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <tapping_key+0x1>
    2d96:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <tapping_key+0x3>
    2d9a:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <tapping_key+0x4>
    2d9e:	d6 2f       	mov	r29, r22
    2da0:	d7 23       	and	r29, r23
    2da2:	da 01       	movw	r26, r20
    2da4:	a0 95       	com	r26
    2da6:	b0 95       	com	r27
    2da8:	16 e0       	ldi	r17, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2daa:	c8 13       	cpse	r28, r24
    2dac:	04 c0       	rjmp	.+8      	; 0x2db6 <waiting_buffer_scan_tap+0x46>
}
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	1f 91       	pop	r17
    2db4:	08 95       	ret
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	41 15       	cp	r20, r1
    2dba:	51 05       	cpc	r21, r1
    2dbc:	11 f0       	breq	.+4      	; 0x2dc2 <waiting_buffer_scan_tap+0x52>
    2dbe:	df 3f       	cpi	r29, 0xFF	; 255
    2dc0:	31 f4       	brne	.+12     	; 0x2dce <waiting_buffer_scan_tap+0x5e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dc2:	01 96       	adiw	r24, 0x01	; 1
    2dc4:	87 70       	andi	r24, 0x07	; 7
    2dc6:	f1 cf       	rjmp	.-30     	; 0x2daa <waiting_buffer_scan_tap+0x3a>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2dc8:	2a 0f       	add	r18, r26
    2dca:	3b 1f       	adc	r19, r27
    2dcc:	17 c0       	rjmp	.+46     	; 0x2dfc <waiting_buffer_scan_tap+0x8c>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2dce:	18 9f       	mul	r17, r24
    2dd0:	f0 01       	movw	r30, r0
    2dd2:	19 9f       	mul	r17, r25
    2dd4:	f0 0d       	add	r31, r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	e0 51       	subi	r30, 0x10	; 16
    2dda:	fd 4f       	sbci	r31, 0xFD	; 253
    2ddc:	21 81       	ldd	r18, Z+1	; 0x01
    2dde:	27 13       	cpse	r18, r23
    2de0:	f0 cf       	rjmp	.-32     	; 0x2dc2 <waiting_buffer_scan_tap+0x52>
    2de2:	20 81       	ld	r18, Z
    2de4:	26 13       	cpse	r18, r22
    2de6:	ed cf       	rjmp	.-38     	; 0x2dc2 <waiting_buffer_scan_tap+0x52>
    2de8:	22 81       	ldd	r18, Z+2	; 0x02
    2dea:	21 11       	cpse	r18, r1
    2dec:	ea cf       	rjmp	.-44     	; 0x2dc2 <waiting_buffer_scan_tap+0x52>
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2dee:	23 81       	ldd	r18, Z+3	; 0x03
    2df0:	34 81       	ldd	r19, Z+4	; 0x04
    2df2:	24 17       	cp	r18, r20
    2df4:	35 07       	cpc	r19, r21
    2df6:	40 f3       	brcs	.-48     	; 0x2dc8 <waiting_buffer_scan_tap+0x58>
    2df8:	24 1b       	sub	r18, r20
    2dfa:	35 0b       	sbc	r19, r21
    2dfc:	28 3c       	cpi	r18, 0xC8	; 200
    2dfe:	31 05       	cpc	r19, r1
    2e00:	00 f7       	brcc	.-64     	; 0x2dc2 <waiting_buffer_scan_tap+0x52>
            tapping_key.tap.count = 1;
    2e02:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <tapping_key+0x5>
    2e06:	2f 70       	andi	r18, 0x0F	; 15
    2e08:	20 61       	ori	r18, 0x10	; 16
    2e0a:	20 93 25 03 	sts	0x0325, r18	; 0x800325 <tapping_key+0x5>
            waiting_buffer[i].tap.count = 1;
    2e0e:	26 e0       	ldi	r18, 0x06	; 6
    2e10:	28 9f       	mul	r18, r24
    2e12:	f0 01       	movw	r30, r0
    2e14:	29 9f       	mul	r18, r25
    2e16:	f0 0d       	add	r31, r0
    2e18:	11 24       	eor	r1, r1
    2e1a:	eb 50       	subi	r30, 0x0B	; 11
    2e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e1e:	80 81       	ld	r24, Z
    2e20:	8f 70       	andi	r24, 0x0F	; 15
    2e22:	80 61       	ori	r24, 0x10	; 16
    2e24:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2e26:	80 e2       	ldi	r24, 0x20	; 32
    2e28:	93 e0       	ldi	r25, 0x03	; 3
    2e2a:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
}
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
            debug_waiting_buffer();
    2e34:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <debug_waiting_buffer>

00002e38 <process_tapping>:
{
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	61 97       	sbiw	r28, 0x11	; 17
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	6c 01       	movw	r12, r24
    keyevent_t event = keyp->event;
    2e5c:	85 e0       	ldi	r24, 0x05	; 5
    2e5e:	f6 01       	movw	r30, r12
    2e60:	de 01       	movw	r26, r28
    2e62:	1d 96       	adiw	r26, 0x0d	; 13
    2e64:	01 90       	ld	r0, Z+
    2e66:	0d 92       	st	X+, r0
    2e68:	8a 95       	dec	r24
    2e6a:	e1 f7       	brne	.-8      	; 0x2e64 <process_tapping+0x2c>
    2e6c:	d6 01       	movw	r26, r12
    2e6e:	4c 91       	ld	r20, X
    2e70:	11 96       	adiw	r26, 0x01	; 1
    2e72:	5c 91       	ld	r21, X
    2e74:	11 97       	sbiw	r26, 0x01	; 1
    2e76:	12 96       	adiw	r26, 0x02	; 2
    2e78:	fc 90       	ld	r15, X
    2e7a:	12 97       	sbiw	r26, 0x02	; 2
    2e7c:	13 96       	adiw	r26, 0x03	; 3
    2e7e:	0d 91       	ld	r16, X+
    2e80:	1c 91       	ld	r17, X
    if (IS_TAPPING_PRESSED()) {
    2e82:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <tapping_key+0x3>
    2e86:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <tapping_key+0x4>
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <process_tapping+0x58>
    2e8e:	89 c1       	rjmp	.+786    	; 0x31a2 <process_tapping+0x36a>
    2e90:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <tapping_key>
    2e94:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <tapping_key+0x1>
    2e98:	62 2f       	mov	r22, r18
    2e9a:	63 23       	and	r22, r19
    2e9c:	6f 3f       	cpi	r22, 0xFF	; 255
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <process_tapping+0x6a>
    2ea0:	80 c1       	rjmp	.+768    	; 0x31a2 <process_tapping+0x36a>
    2ea2:	b0 90 22 03 	lds	r11, 0x0322	; 0x800322 <tapping_key+0x2>
    2ea6:	bb 20       	and	r11, r11
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <process_tapping+0x74>
    2eaa:	1a c1       	rjmp	.+564    	; 0x30e0 <process_tapping+0x2a8>
        if (WITHIN_TAPPING_TERM(event)) {
    2eac:	08 17       	cp	r16, r24
    2eae:	19 07       	cpc	r17, r25
    2eb0:	d0 f1       	brcs	.+116    	; 0x2f26 <process_tapping+0xee>
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	e8 1b       	sub	r30, r24
    2eb6:	f9 0b       	sbc	r31, r25
    2eb8:	cf 01       	movw	r24, r30
    2eba:	ee 24       	eor	r14, r14
    2ebc:	e3 94       	inc	r14
    2ebe:	88 3c       	cpi	r24, 0xC8	; 200
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	08 f0       	brcs	.+2      	; 0x2ec6 <process_tapping+0x8e>
    2ec4:	e1 2c       	mov	r14, r1
    2ec6:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    2eca:	98 2f       	mov	r25, r24
    2ecc:	90 7f       	andi	r25, 0xF0	; 240
    2ece:	ee 20       	and	r14, r14
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <process_tapping+0x9c>
    2ed2:	bc c0       	rjmp	.+376    	; 0x304c <process_tapping+0x214>
            if (tapping_key.tap.count == 0) {
    2ed4:	91 11       	cpse	r25, r1
    2ed6:	81 c0       	rjmp	.+258    	; 0x2fda <process_tapping+0x1a2>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2ed8:	ef 2c       	mov	r14, r15
    2eda:	35 13       	cpse	r19, r21
    2edc:	29 c0       	rjmp	.+82     	; 0x2f30 <process_tapping+0xf8>
    2ede:	24 13       	cpse	r18, r20
    2ee0:	27 c0       	rjmp	.+78     	; 0x2f30 <process_tapping+0xf8>
    2ee2:	f1 10       	cpse	r15, r1
    2ee4:	25 c0       	rjmp	.+74     	; 0x2f30 <process_tapping+0xf8>
                    tapping_key.tap.count = 1;
    2ee6:	8f 70       	andi	r24, 0x0F	; 15
    2ee8:	80 61       	ori	r24, 0x10	; 16
    2eea:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <tapping_key+0x5>
                    debug_tapping_key();
    2eee:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <debug_tapping_key>
                    process_action(&tapping_key);
    2ef2:	80 e2       	ldi	r24, 0x20	; 32
    2ef4:	93 e0       	ldi	r25, 0x03	; 3
    2ef6:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
                    keyp->tap = tapping_key.tap;
    2efa:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    2efe:	d6 01       	movw	r26, r12
    2f00:	15 96       	adiw	r26, 0x05	; 5
    2f02:	8c 93       	st	X, r24
}
    2f04:	8e 2d       	mov	r24, r14
    2f06:	61 96       	adiw	r28, 0x11	; 17
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	f8 94       	cli
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	cd bf       	out	0x3d, r28	; 61
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	1f 91       	pop	r17
    2f18:	0f 91       	pop	r16
    2f1a:	ff 90       	pop	r15
    2f1c:	ef 90       	pop	r14
    2f1e:	df 90       	pop	r13
    2f20:	cf 90       	pop	r12
    2f22:	bf 90       	pop	r11
    2f24:	08 95       	ret
        if (WITHIN_TAPPING_TERM(event)) {
    2f26:	80 95       	com	r24
    2f28:	90 95       	com	r25
    2f2a:	80 0f       	add	r24, r16
    2f2c:	91 1f       	adc	r25, r17
    2f2e:	c5 cf       	rjmp	.-118    	; 0x2eba <process_tapping+0x82>
    2f30:	01 15       	cp	r16, r1
    2f32:	11 05       	cpc	r17, r1
    2f34:	29 f0       	breq	.+10     	; 0x2f40 <process_tapping+0x108>
    2f36:	85 2f       	mov	r24, r21
    2f38:	84 23       	and	r24, r20
    2f3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <process_tapping+0x108>
    2f3e:	43 c1       	rjmp	.+646    	; 0x31c6 <process_tapping+0x38e>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2f40:	80 e0       	ldi	r24, 0x00	; 0
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2f42:	b8 2f       	mov	r27, r24
    2f44:	b1 70       	andi	r27, 0x01	; 1
    2f46:	bb 2e       	mov	r11, r27
    2f48:	80 ff       	sbrs	r24, 0
    2f4a:	3d c0       	rjmp	.+122    	; 0x2fc6 <process_tapping+0x18e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f4c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <waiting_buffer_tail>
    2f50:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <waiting_buffer_head>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f54:	36 e0       	ldi	r19, 0x06	; 6
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f56:	82 13       	cpse	r24, r18
    2f58:	16 c0       	rjmp	.+44     	; 0x2f86 <process_tapping+0x14e>
                    action_t action = layer_switch_get_action(event);
    2f5a:	70 2f       	mov	r23, r16
    2f5c:	19 8b       	std	Y+17, r17	; 0x11
    2f5e:	08 8b       	std	Y+16, r16	; 0x10
    2f60:	6f 2d       	mov	r22, r15
    2f62:	89 89       	ldd	r24, Y+17	; 0x11
    2f64:	0e 94 2e 1b 	call	0x365c	; 0x365c <layer_switch_get_action>
                    switch (action.kind.id) {
    2f68:	29 2f       	mov	r18, r25
    2f6a:	22 95       	swap	r18
    2f6c:	2f 70       	andi	r18, 0x0F	; 15
    2f6e:	22 30       	cpi	r18, 0x02	; 2
    2f70:	f0 f0       	brcs	.+60     	; 0x2fae <process_tapping+0x176>
    2f72:	24 30       	cpi	r18, 0x04	; 4
    2f74:	18 f5       	brcc	.+70     	; 0x2fbc <process_tapping+0x184>
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2f76:	9f 70       	andi	r25, 0x0F	; 15
    2f78:	f1 f0       	breq	.+60     	; 0x2fb6 <process_tapping+0x17e>
    2f7a:	f6 01       	movw	r30, r12
    2f7c:	95 81       	ldd	r25, Z+5	; 0x05
    2f7e:	90 7f       	andi	r25, 0xF0	; 240
    2f80:	d1 f4       	brne	.+52     	; 0x2fb6 <process_tapping+0x17e>
                            if (action.key.mods && !action.key.code) return false;
    2f82:	b1 2c       	mov	r11, r1
    2f84:	1e c0       	rjmp	.+60     	; 0x2fc2 <process_tapping+0x18a>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	38 9f       	mul	r19, r24
    2f8a:	f0 01       	movw	r30, r0
    2f8c:	39 9f       	mul	r19, r25
    2f8e:	f0 0d       	add	r31, r0
    2f90:	11 24       	eor	r1, r1
    2f92:	e0 51       	subi	r30, 0x10	; 16
    2f94:	fd 4f       	sbci	r31, 0xFD	; 253
    2f96:	61 81       	ldd	r22, Z+1	; 0x01
    2f98:	65 13       	cpse	r22, r21
    2f9a:	06 c0       	rjmp	.+12     	; 0x2fa8 <process_tapping+0x170>
    2f9c:	60 81       	ld	r22, Z
    2f9e:	64 13       	cpse	r22, r20
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <process_tapping+0x170>
    2fa2:	62 81       	ldd	r22, Z+2	; 0x02
    2fa4:	f6 12       	cpse	r15, r22
    2fa6:	0f c0       	rjmp	.+30     	; 0x2fc6 <process_tapping+0x18e>
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fa8:	01 96       	adiw	r24, 0x01	; 1
    2faa:	87 70       	andi	r24, 0x07	; 7
    2fac:	d4 cf       	rjmp	.-88     	; 0x2f56 <process_tapping+0x11e>
                            if (action.key.mods && !action.key.code) return false;
    2fae:	9f 70       	andi	r25, 0x0F	; 15
    2fb0:	11 f0       	breq	.+4      	; 0x2fb6 <process_tapping+0x17e>
    2fb2:	88 23       	and	r24, r24
    2fb4:	31 f3       	breq	.-52     	; 0x2f82 <process_tapping+0x14a>
                            if (IS_MOD(action.key.code)) return false;
    2fb6:	80 5e       	subi	r24, 0xE0	; 224
    2fb8:	88 30       	cpi	r24, 0x08	; 8
    2fba:	18 f3       	brcs	.-58     	; 0x2f82 <process_tapping+0x14a>
                    process_action(keyp);
    2fbc:	c6 01       	movw	r24, r12
    2fbe:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
                    return true;
    2fc2:	eb 2c       	mov	r14, r11
    2fc4:	9f cf       	rjmp	.-194    	; 0x2f04 <process_tapping+0xcc>
                    if (event.pressed) {
    2fc6:	ff 20       	and	r15, r15
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <process_tapping+0x194>
    2fca:	9c cf       	rjmp	.-200    	; 0x2f04 <process_tapping+0xcc>
                        tapping_key.tap.interrupted = true;
    2fcc:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    2fd0:	81 60       	ori	r24, 0x01	; 1
    2fd2:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <tapping_key+0x5>
                    return false;
    2fd6:	e1 2c       	mov	r14, r1
    2fd8:	95 cf       	rjmp	.-214    	; 0x2f04 <process_tapping+0xcc>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fda:	35 13       	cpse	r19, r21
    2fdc:	06 c0       	rjmp	.+12     	; 0x2fea <process_tapping+0x1b2>
    2fde:	24 13       	cpse	r18, r20
    2fe0:	04 c0       	rjmp	.+8      	; 0x2fea <process_tapping+0x1b2>
                    keyp->tap = tapping_key.tap;
    2fe2:	d6 01       	movw	r26, r12
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fe4:	ff 20       	and	r15, r15
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <process_tapping+0x1b2>
    2fe8:	a1 c0       	rjmp	.+322    	; 0x312c <process_tapping+0x2f4>
                else if (is_tap_key(event) && event.pressed) {
    2fea:	4d 87       	std	Y+13, r20	; 0x0d
    2fec:	5e 87       	std	Y+14, r21	; 0x0e
    2fee:	ff 86       	std	Y+15, r15	; 0x0f
    2ff0:	70 2f       	mov	r23, r16
    2ff2:	19 8b       	std	Y+17, r17	; 0x11
    2ff4:	08 8b       	std	Y+16, r16	; 0x10
    2ff6:	6f 2d       	mov	r22, r15
    2ff8:	89 89       	ldd	r24, Y+17	; 0x11
    2ffa:	0e 94 20 16 	call	0x2c40	; 0x2c40 <is_tap_key>
    2ffe:	88 23       	and	r24, r24
    3000:	09 f4       	brne	.+2      	; 0x3004 <process_tapping+0x1cc>
    3002:	dd c0       	rjmp	.+442    	; 0x31be <process_tapping+0x386>
    3004:	ff 20       	and	r15, r15
    3006:	09 f4       	brne	.+2      	; 0x300a <process_tapping+0x1d2>
    3008:	da c0       	rjmp	.+436    	; 0x31be <process_tapping+0x386>
                    if (tapping_key.tap.count > 1) {
    300a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    300e:	80 32       	cpi	r24, 0x20	; 32
    3010:	70 f0       	brcs	.+28     	; 0x302e <process_tapping+0x1f6>
                        process_action(&(keyrecord_t){
    3012:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <tapping_key>
    3016:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <tapping_key+0x1>
    301a:	38 87       	std	Y+8, r19	; 0x08
    301c:	2f 83       	std	Y+7, r18	; 0x07
    301e:	19 86       	std	Y+9, r1	; 0x09
    3020:	1b 87       	std	Y+11, r17	; 0x0b
    3022:	0a 87       	std	Y+10, r16	; 0x0a
    3024:	8c 87       	std	Y+12, r24	; 0x0c
    3026:	ce 01       	movw	r24, r28
    3028:	07 96       	adiw	r24, 0x07	; 7
    302a:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
                    tapping_key = *keyp;
    302e:	86 e0       	ldi	r24, 0x06	; 6
    3030:	f6 01       	movw	r30, r12
    3032:	a0 e2       	ldi	r26, 0x20	; 32
    3034:	b3 e0       	ldi	r27, 0x03	; 3
    3036:	01 90       	ld	r0, Z+
    3038:	0d 92       	st	X+, r0
    303a:	8a 95       	dec	r24
    303c:	e1 f7       	brne	.-8      	; 0x3036 <process_tapping+0x1fe>
                    waiting_buffer_scan_tap();
    303e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3042:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <debug_tapping_key>
                    return true;
    3046:	ee 24       	eor	r14, r14
    3048:	e3 94       	inc	r14
    304a:	5c cf       	rjmp	.-328    	; 0x2f04 <process_tapping+0xcc>
            if (tapping_key.tap.count == 0) {
    304c:	91 11       	cpse	r25, r1
    304e:	13 c0       	rjmp	.+38     	; 0x3076 <process_tapping+0x23e>
                debug_event(event); debug("\n");
    3050:	70 2f       	mov	r23, r16
    3052:	19 8b       	std	Y+17, r17	; 0x11
    3054:	08 8b       	std	Y+16, r16	; 0x10
    3056:	6f 2d       	mov	r22, r15
    3058:	89 89       	ldd	r24, Y+17	; 0x11
    305a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <debug_event>
                process_action(&tapping_key);
    305e:	80 e2       	ldi	r24, 0x20	; 32
    3060:	93 e0       	ldi	r25, 0x03	; 3
    3062:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
            tapping_key = (keyrecord_t){};
    3066:	86 e0       	ldi	r24, 0x06	; 6
    3068:	e0 e2       	ldi	r30, 0x20	; 32
    306a:	f3 e0       	ldi	r31, 0x03	; 3
    306c:	df 01       	movw	r26, r30
    306e:	1d 92       	st	X+, r1
    3070:	8a 95       	dec	r24
    3072:	e9 f7       	brne	.-6      	; 0x306e <process_tapping+0x236>
    3074:	68 c0       	rjmp	.+208    	; 0x3146 <process_tapping+0x30e>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3076:	35 13       	cpse	r19, r21
    3078:	11 c0       	rjmp	.+34     	; 0x309c <process_tapping+0x264>
    307a:	24 13       	cpse	r18, r20
    307c:	0f c0       	rjmp	.+30     	; 0x309c <process_tapping+0x264>
    307e:	f1 10       	cpse	r15, r1
    3080:	0d c0       	rjmp	.+26     	; 0x309c <process_tapping+0x264>
                    keyp->tap = tapping_key.tap;
    3082:	f6 01       	movw	r30, r12
    3084:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3086:	c6 01       	movw	r24, r12
    3088:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
                    tapping_key = (keyrecord_t){};
    308c:	e0 e2       	ldi	r30, 0x20	; 32
    308e:	f3 e0       	ldi	r31, 0x03	; 3
    3090:	86 e0       	ldi	r24, 0x06	; 6
    3092:	df 01       	movw	r26, r30
    3094:	1d 92       	st	X+, r1
    3096:	8a 95       	dec	r24
    3098:	e9 f7       	brne	.-6      	; 0x3094 <process_tapping+0x25c>
    309a:	93 cf       	rjmp	.-218    	; 0x2fc2 <process_tapping+0x18a>
                else if (is_tap_key(event) && event.pressed) {
    309c:	4d 87       	std	Y+13, r20	; 0x0d
    309e:	5e 87       	std	Y+14, r21	; 0x0e
    30a0:	ff 86       	std	Y+15, r15	; 0x0f
    30a2:	70 2f       	mov	r23, r16
    30a4:	19 8b       	std	Y+17, r17	; 0x11
    30a6:	08 8b       	std	Y+16, r16	; 0x10
    30a8:	6f 2d       	mov	r22, r15
    30aa:	89 89       	ldd	r24, Y+17	; 0x11
    30ac:	0e 94 20 16 	call	0x2c40	; 0x2c40 <is_tap_key>
    30b0:	88 23       	and	r24, r24
    30b2:	09 f4       	brne	.+2      	; 0x30b6 <process_tapping+0x27e>
    30b4:	84 c0       	rjmp	.+264    	; 0x31be <process_tapping+0x386>
    30b6:	ff 20       	and	r15, r15
    30b8:	09 f4       	brne	.+2      	; 0x30bc <process_tapping+0x284>
    30ba:	81 c0       	rjmp	.+258    	; 0x31be <process_tapping+0x386>
                    if (tapping_key.tap.count > 1) {
    30bc:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    30c0:	80 32       	cpi	r24, 0x20	; 32
    30c2:	08 f4       	brcc	.+2      	; 0x30c6 <process_tapping+0x28e>
    30c4:	b4 cf       	rjmp	.-152    	; 0x302e <process_tapping+0x1f6>
                        process_action(&(keyrecord_t){
    30c6:	20 91 20 03 	lds	r18, 0x0320	; 0x800320 <tapping_key>
    30ca:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <tapping_key+0x1>
    30ce:	3a 83       	std	Y+2, r19	; 0x02
    30d0:	29 83       	std	Y+1, r18	; 0x01
    30d2:	1b 82       	std	Y+3, r1	; 0x03
    30d4:	1d 83       	std	Y+5, r17	; 0x05
    30d6:	0c 83       	std	Y+4, r16	; 0x04
    30d8:	8e 83       	std	Y+6, r24	; 0x06
    30da:	ce 01       	movw	r24, r28
    30dc:	01 96       	adiw	r24, 0x01	; 1
    30de:	a5 cf       	rjmp	.-182    	; 0x302a <process_tapping+0x1f2>
        if (WITHIN_TAPPING_TERM(event)) {
    30e0:	08 17       	cp	r16, r24
    30e2:	19 07       	cpc	r17, r25
    30e4:	98 f1       	brcs	.+102    	; 0x314c <process_tapping+0x314>
    30e6:	f8 01       	movw	r30, r16
    30e8:	e8 1b       	sub	r30, r24
    30ea:	f9 0b       	sbc	r31, r25
    30ec:	cf 01       	movw	r24, r30
    30ee:	e1 2c       	mov	r14, r1
    30f0:	88 3c       	cpi	r24, 0xC8	; 200
    30f2:	91 05       	cpc	r25, r1
    30f4:	08 f0       	brcs	.+2      	; 0x30f8 <process_tapping+0x2c0>
    30f6:	4d c0       	rjmp	.+154    	; 0x3192 <process_tapping+0x35a>
            if (event.pressed) {
    30f8:	ef 2c       	mov	r14, r15
    30fa:	ff 20       	and	r15, r15
    30fc:	09 f4       	brne	.+2      	; 0x3100 <process_tapping+0x2c8>
    30fe:	5f c0       	rjmp	.+190    	; 0x31be <process_tapping+0x386>
                if (IS_TAPPING_KEY(event.key)) {
    3100:	35 13       	cpse	r19, r21
    3102:	32 c0       	rjmp	.+100    	; 0x3168 <process_tapping+0x330>
    3104:	24 13       	cpse	r18, r20
    3106:	30 c0       	rjmp	.+96     	; 0x3168 <process_tapping+0x330>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3108:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    310c:	80 fd       	sbrc	r24, 0
    310e:	23 c0       	rjmp	.+70     	; 0x3156 <process_tapping+0x31e>
    3110:	98 2f       	mov	r25, r24
    3112:	90 7f       	andi	r25, 0xF0	; 240
    3114:	01 f1       	breq	.+64     	; 0x3156 <process_tapping+0x31e>
                        keyp->tap = tapping_key.tap;
    3116:	d6 01       	movw	r26, r12
    3118:	15 96       	adiw	r26, 0x05	; 5
    311a:	8c 93       	st	X, r24
    311c:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    311e:	90 3f       	cpi	r25, 0xF0	; 240
    3120:	39 f0       	breq	.+14     	; 0x3130 <process_tapping+0x2f8>
    3122:	98 2f       	mov	r25, r24
    3124:	90 7f       	andi	r25, 0xF0	; 240
    3126:	90 5f       	subi	r25, 0xF0	; 240
    3128:	8f 70       	andi	r24, 0x0F	; 15
    312a:	89 2b       	or	r24, r25
    312c:	15 96       	adiw	r26, 0x05	; 5
    312e:	8c 93       	st	X, r24
                        process_action(keyp);
    3130:	c6 01       	movw	r24, r12
    3132:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
                        tapping_key = *keyp;
    3136:	86 e0       	ldi	r24, 0x06	; 6
    3138:	f6 01       	movw	r30, r12
    313a:	a0 e2       	ldi	r26, 0x20	; 32
    313c:	b3 e0       	ldi	r27, 0x03	; 3
    313e:	01 90       	ld	r0, Z+
    3140:	0d 92       	st	X+, r0
    3142:	8a 95       	dec	r24
    3144:	e1 f7       	brne	.-8      	; 0x313e <process_tapping+0x306>
            debug_tapping_key();
    3146:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <debug_tapping_key>
            return false;
    314a:	dc ce       	rjmp	.-584    	; 0x2f04 <process_tapping+0xcc>
        if (WITHIN_TAPPING_TERM(event)) {
    314c:	80 95       	com	r24
    314e:	90 95       	com	r25
    3150:	80 0f       	add	r24, r16
    3152:	91 1f       	adc	r25, r17
    3154:	cc cf       	rjmp	.-104    	; 0x30ee <process_tapping+0x2b6>
                        tapping_key = *keyp;
    3156:	86 e0       	ldi	r24, 0x06	; 6
    3158:	f6 01       	movw	r30, r12
    315a:	a0 e2       	ldi	r26, 0x20	; 32
    315c:	b3 e0       	ldi	r27, 0x03	; 3
    315e:	01 90       	ld	r0, Z+
    3160:	0d 92       	st	X+, r0
    3162:	8a 95       	dec	r24
    3164:	e1 f7       	brne	.-8      	; 0x315e <process_tapping+0x326>
                        return true;
    3166:	ce ce       	rjmp	.-612    	; 0x2f04 <process_tapping+0xcc>
                } else if (is_tap_key(event)) {
    3168:	4d 87       	std	Y+13, r20	; 0x0d
    316a:	5e 87       	std	Y+14, r21	; 0x0e
    316c:	ff 86       	std	Y+15, r15	; 0x0f
    316e:	70 2f       	mov	r23, r16
    3170:	19 8b       	std	Y+17, r17	; 0x11
    3172:	08 8b       	std	Y+16, r16	; 0x10
    3174:	6f 2d       	mov	r22, r15
    3176:	89 89       	ldd	r24, Y+17	; 0x11
    3178:	0e 94 20 16 	call	0x2c40	; 0x2c40 <is_tap_key>
    317c:	81 11       	cpse	r24, r1
    317e:	57 cf       	rjmp	.-338    	; 0x302e <process_tapping+0x1f6>
                    tapping_key.tap.interrupted = true;
    3180:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <tapping_key+0x5>
    3184:	81 60       	ori	r24, 0x01	; 1
    3186:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <tapping_key+0x5>
                    process_action(keyp);
    318a:	c6 01       	movw	r24, r12
    318c:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
                    return true;
    3190:	b9 ce       	rjmp	.-654    	; 0x2f04 <process_tapping+0xcc>
            debug_event(event); debug("\n");
    3192:	70 2f       	mov	r23, r16
    3194:	19 8b       	std	Y+17, r17	; 0x11
    3196:	08 8b       	std	Y+16, r16	; 0x10
    3198:	6f 2d       	mov	r22, r15
    319a:	89 89       	ldd	r24, Y+17	; 0x11
    319c:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <debug_event>
    31a0:	62 cf       	rjmp	.-316    	; 0x3066 <process_tapping+0x22e>
        if (event.pressed && is_tap_key(event)) {
    31a2:	ff 20       	and	r15, r15
    31a4:	61 f0       	breq	.+24     	; 0x31be <process_tapping+0x386>
    31a6:	4d 87       	std	Y+13, r20	; 0x0d
    31a8:	5e 87       	std	Y+14, r21	; 0x0e
    31aa:	ff 86       	std	Y+15, r15	; 0x0f
    31ac:	70 2f       	mov	r23, r16
    31ae:	19 8b       	std	Y+17, r17	; 0x11
    31b0:	08 8b       	std	Y+16, r16	; 0x10
    31b2:	6f 2d       	mov	r22, r15
    31b4:	89 89       	ldd	r24, Y+17	; 0x11
    31b6:	0e 94 20 16 	call	0x2c40	; 0x2c40 <is_tap_key>
    31ba:	81 11       	cpse	r24, r1
    31bc:	38 cf       	rjmp	.-400    	; 0x302e <process_tapping+0x1f6>
                    process_action(keyp);
    31be:	c6 01       	movw	r24, r12
    31c0:	0e 94 de 12 	call	0x25bc	; 0x25bc <process_action>
    31c4:	40 cf       	rjmp	.-384    	; 0x3046 <process_tapping+0x20e>
    31c6:	81 e0       	ldi	r24, 0x01	; 1
    31c8:	8f 25       	eor	r24, r15
    31ca:	bb ce       	rjmp	.-650    	; 0x2f42 <process_tapping+0x10a>

000031cc <action_tapping_process>:
{
    31cc:	1f 93       	push	r17
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	2c 97       	sbiw	r28, 0x0c	; 12
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	4f 83       	std	Y+7, r20	; 0x07
    31e4:	58 87       	std	Y+8, r21	; 0x08
    31e6:	69 87       	std	Y+9, r22	; 0x09
    31e8:	7a 87       	std	Y+10, r23	; 0x0a
    31ea:	8b 87       	std	Y+11, r24	; 0x0b
    31ec:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    31ee:	ce 01       	movw	r24, r28
    31f0:	07 96       	adiw	r24, 0x07	; 7
    31f2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <process_tapping>
    31f6:	88 23       	and	r24, r24
    31f8:	69 f0       	breq	.+26     	; 0x3214 <action_tapping_process+0x48>
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    31fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    31fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    31fe:	89 2b       	or	r24, r25
    3200:	39 f0       	breq	.+14     	; 0x3210 <action_tapping_process+0x44>
    3202:	4f 81       	ldd	r20, Y+7	; 0x07
    3204:	58 85       	ldd	r21, Y+8	; 0x08
    3206:	84 2f       	mov	r24, r20
    3208:	85 23       	and	r24, r21
    320a:	8f 3f       	cpi	r24, 0xFF	; 255
    320c:	09 f0       	breq	.+2      	; 0x3210 <action_tapping_process+0x44>
    320e:	71 c0       	rjmp	.+226    	; 0x32f2 <action_tapping_process+0x126>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3210:	16 e0       	ldi	r17, 0x06	; 6
    3212:	5f c0       	rjmp	.+190    	; 0x32d2 <action_tapping_process+0x106>
        if (!waiting_buffer_enq(record)) {
    3214:	86 e0       	ldi	r24, 0x06	; 6
    3216:	fe 01       	movw	r30, r28
    3218:	37 96       	adiw	r30, 0x07	; 7
    321a:	de 01       	movw	r26, r28
    321c:	11 96       	adiw	r26, 0x01	; 1
    321e:	01 90       	ld	r0, Z+
    3220:	0d 92       	st	X+, r0
    3222:	8a 95       	dec	r24
    3224:	e1 f7       	brne	.-8      	; 0x321e <action_tapping_process+0x52>
    3226:	8a 85       	ldd	r24, Y+10	; 0x0a
    3228:	9b 85       	ldd	r25, Y+11	; 0x0b
    322a:	89 2b       	or	r24, r25
    322c:	89 f3       	breq	.-30     	; 0x3210 <action_tapping_process+0x44>
    322e:	88 85       	ldd	r24, Y+8	; 0x08
    3230:	9f 81       	ldd	r25, Y+7	; 0x07
    3232:	89 23       	and	r24, r25
    3234:	8f 3f       	cpi	r24, 0xFF	; 255
    3236:	61 f3       	breq	.-40     	; 0x3210 <action_tapping_process+0x44>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3238:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <waiting_buffer_head>
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	c9 01       	movw	r24, r18
    3240:	01 96       	adiw	r24, 0x01	; 1
    3242:	87 70       	andi	r24, 0x07	; 7
    3244:	99 27       	eor	r25, r25
    3246:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <waiting_buffer_tail>
    324a:	48 17       	cp	r20, r24
    324c:	19 06       	cpc	r1, r25
    324e:	71 f4       	brne	.+28     	; 0x326c <action_tapping_process+0xa0>
            clear_keyboard();
    3250:	0e 94 da 12 	call	0x25b4	; 0x25b4 <clear_keyboard>
    waiting_buffer_head = 0;
    3254:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <waiting_buffer_head>
    waiting_buffer_tail = 0;
    3258:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <waiting_buffer_tail>
            tapping_key = (keyrecord_t){};
    325c:	86 e0       	ldi	r24, 0x06	; 6
    325e:	e0 e2       	ldi	r30, 0x20	; 32
    3260:	f3 e0       	ldi	r31, 0x03	; 3
    3262:	df 01       	movw	r26, r30
    3264:	1d 92       	st	X+, r1
    3266:	8a 95       	dec	r24
    3268:	e9 f7       	brne	.-6      	; 0x3264 <action_tapping_process+0x98>
    326a:	d2 cf       	rjmp	.-92     	; 0x3210 <action_tapping_process+0x44>
    waiting_buffer[waiting_buffer_head] = record;
    326c:	96 e0       	ldi	r25, 0x06	; 6
    326e:	92 9f       	mul	r25, r18
    3270:	d0 01       	movw	r26, r0
    3272:	93 9f       	mul	r25, r19
    3274:	b0 0d       	add	r27, r0
    3276:	11 24       	eor	r1, r1
    3278:	a0 51       	subi	r26, 0x10	; 16
    327a:	bd 4f       	sbci	r27, 0xFD	; 253
    327c:	fe 01       	movw	r30, r28
    327e:	31 96       	adiw	r30, 0x01	; 1
    3280:	01 90       	ld	r0, Z+
    3282:	0d 92       	st	X+, r0
    3284:	9a 95       	dec	r25
    3286:	e1 f7       	brne	.-8      	; 0x3280 <action_tapping_process+0xb4>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3288:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <waiting_buffer_head>
    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    328c:	0e 94 89 16 	call	0x2d12	; 0x2d12 <debug_waiting_buffer>
    return true;
    3290:	bf cf       	rjmp	.-130    	; 0x3210 <action_tapping_process+0x44>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3292:	81 9f       	mul	r24, r17
    3294:	c0 01       	movw	r24, r0
    3296:	11 24       	eor	r1, r1
    3298:	80 51       	subi	r24, 0x10	; 16
    329a:	9d 4f       	sbci	r25, 0xFD	; 253
    329c:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <process_tapping>
    32a0:	88 23       	and	r24, r24
    32a2:	e9 f0       	breq	.+58     	; 0x32de <action_tapping_process+0x112>
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    32a4:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <waiting_buffer_tail>
    32a8:	1e 9f       	mul	r17, r30
    32aa:	f0 01       	movw	r30, r0
    32ac:	11 24       	eor	r1, r1
    32ae:	e0 51       	subi	r30, 0x10	; 16
    32b0:	fd 4f       	sbci	r31, 0xFD	; 253
    32b2:	40 81       	ld	r20, Z
    32b4:	51 81       	ldd	r21, Z+1	; 0x01
    32b6:	62 81       	ldd	r22, Z+2	; 0x02
    32b8:	73 81       	ldd	r23, Z+3	; 0x03
    32ba:	84 81       	ldd	r24, Z+4	; 0x04
    32bc:	95 81       	ldd	r25, Z+5	; 0x05
    32be:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <debug_record>
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    32c2:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <waiting_buffer_tail>
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	87 70       	andi	r24, 0x07	; 7
    32cc:	99 27       	eor	r25, r25
    32ce:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <waiting_buffer_tail>
    32d2:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <waiting_buffer_tail>
    32d6:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <waiting_buffer_head>
    32da:	89 13       	cpse	r24, r25
    32dc:	da cf       	rjmp	.-76     	; 0x3292 <action_tapping_process+0xc6>
}
    32de:	2c 96       	adiw	r28, 0x0c	; 12
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	1f 91       	pop	r17
    32f0:	08 95       	ret
            debug("processed: "); debug_record(record); debug("\n");
    32f2:	69 85       	ldd	r22, Y+9	; 0x09
    32f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    32f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    32f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    32fa:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <debug_record>
    32fe:	88 cf       	rjmp	.-240    	; 0x3210 <action_tapping_process+0x44>

00003300 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	8c 01       	movw	r16, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3310:	89 2b       	or	r24, r25
    3312:	b9 f0       	breq	.+46     	; 0x3342 <action_macro_play+0x42>
    uint8_t mod_storage = 0;
    3314:	e1 2c       	mov	r14, r1
    uint8_t interval = 0;
    3316:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3318:	dd 24       	eor	r13, r13
    331a:	d3 94       	inc	r13
        switch (MACRO_READ()) {
    331c:	e8 01       	movw	r28, r16
    331e:	21 96       	adiw	r28, 0x01	; 1
    3320:	f8 01       	movw	r30, r16
    3322:	84 91       	lpm	r24, Z
    3324:	85 37       	cpi	r24, 0x75	; 117
    3326:	09 f4       	brne	.+2      	; 0x332a <action_macro_play+0x2a>
    3328:	6a c0       	rjmp	.+212    	; 0x33fe <action_macro_play+0xfe>
    332a:	98 f4       	brcc	.+38     	; 0x3352 <action_macro_play+0x52>
    332c:	84 37       	cpi	r24, 0x74	; 116
    332e:	08 f0       	brcs	.+2      	; 0x3332 <action_macro_play+0x32>
    3330:	59 c0       	rjmp	.+178    	; 0x33e4 <action_macro_play+0xe4>
    3332:	84 30       	cpi	r24, 0x04	; 4
    3334:	08 f0       	brcs	.+2      	; 0x3338 <action_macro_play+0x38>
    3336:	6f c0       	rjmp	.+222    	; 0x3416 <action_macro_play+0x116>
    3338:	81 30       	cpi	r24, 0x01	; 1
    333a:	11 f1       	breq	.+68     	; 0x3380 <action_macro_play+0x80>
    333c:	82 30       	cpi	r24, 0x02	; 2
    333e:	09 f4       	brne	.+2      	; 0x3342 <action_macro_play+0x42>
    3340:	3c c0       	rjmp	.+120    	; 0x33ba <action_macro_play+0xba>
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    }
}
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	1f 91       	pop	r17
    3348:	0f 91       	pop	r16
    334a:	ff 90       	pop	r15
    334c:	ef 90       	pop	r14
    334e:	df 90       	pop	r13
    3350:	08 95       	ret
        switch (MACRO_READ()) {
    3352:	88 37       	cpi	r24, 0x78	; 120
    3354:	09 f4       	brne	.+2      	; 0x3358 <action_macro_play+0x58>
    3356:	5c c0       	rjmp	.+184    	; 0x3410 <action_macro_play+0x110>
    3358:	58 f4       	brcc	.+22     	; 0x3370 <action_macro_play+0x70>
    335a:	86 37       	cpi	r24, 0x76	; 118
    335c:	09 f4       	brne	.+2      	; 0x3360 <action_macro_play+0x60>
    335e:	54 c0       	rjmp	.+168    	; 0x3408 <action_macro_play+0x108>
    3360:	87 37       	cpi	r24, 0x77	; 119
    3362:	79 f7       	brne	.-34     	; 0x3342 <action_macro_play+0x42>
                set_mods(mod_storage);
    3364:	8e 2d       	mov	r24, r14
    3366:	0e 94 81 1c 	call	0x3902	; 0x3902 <set_mods>
                send_keyboard_report();
    336a:	0e 94 ad 1c 	call	0x395a	; 0x395a <send_keyboard_report>
                break;
    336e:	1f c0       	rjmp	.+62     	; 0x33ae <action_macro_play+0xae>
        switch (MACRO_READ()) {
    3370:	9c e7       	ldi	r25, 0x7C	; 124
    3372:	98 0f       	add	r25, r24
    3374:	90 37       	cpi	r25, 0x70	; 112
    3376:	28 f7       	brcc	.-54     	; 0x3342 <action_macro_play+0x42>
                unregister_code(macro&0x7F);
    3378:	8f 77       	andi	r24, 0x7F	; 127
    337a:	0e 94 92 12 	call	0x2524	; 0x2524 <unregister_code>
                break;
    337e:	17 c0       	rjmp	.+46     	; 0x33ae <action_macro_play+0xae>
                MACRO_READ();
    3380:	0e 5f       	subi	r16, 0xFE	; 254
    3382:	1f 4f       	sbci	r17, 0xFF	; 255
    3384:	fe 01       	movw	r30, r28
    3386:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    3388:	90 e2       	ldi	r25, 0x20	; 32
    338a:	98 0f       	add	r25, r24
    338c:	98 30       	cpi	r25, 0x08	; 8
    338e:	60 f4       	brcc	.+24     	; 0x33a8 <action_macro_play+0xa8>
                    add_weak_mods(MOD_BIT(macro));
    3390:	87 70       	andi	r24, 0x07	; 7
    3392:	fd 2d       	mov	r31, r13
    3394:	01 c0       	rjmp	.+2      	; 0x3398 <action_macro_play+0x98>
    3396:	ff 0f       	add	r31, r31
    3398:	8a 95       	dec	r24
    339a:	ea f7       	brpl	.-6      	; 0x3396 <action_macro_play+0x96>
    339c:	8f 2f       	mov	r24, r31
    339e:	0e 94 87 1c 	call	0x390e	; 0x390e <add_weak_mods>
                    send_keyboard_report();
    33a2:	0e 94 ad 1c 	call	0x395a	; 0x395a <send_keyboard_report>
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <action_macro_play+0xac>
                    register_code(macro);
    33a8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <register_code>
                MACRO_READ();
    33ac:	e8 01       	movw	r28, r16
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    33ae:	8f 2d       	mov	r24, r15
    33b0:	81 50       	subi	r24, 0x01	; 1
    33b2:	08 f0       	brcs	.+2      	; 0x33b6 <action_macro_play+0xb6>
    33b4:	33 c0       	rjmp	.+102    	; 0x341c <action_macro_play+0x11c>
    33b6:	8e 01       	movw	r16, r28
    33b8:	b1 cf       	rjmp	.-158    	; 0x331c <action_macro_play+0x1c>
                MACRO_READ();
    33ba:	0e 5f       	subi	r16, 0xFE	; 254
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	fe 01       	movw	r30, r28
    33c0:	84 91       	lpm	r24, Z
                if (IS_MOD(macro)) {
    33c2:	90 e2       	ldi	r25, 0x20	; 32
    33c4:	98 0f       	add	r25, r24
    33c6:	98 30       	cpi	r25, 0x08	; 8
    33c8:	50 f4       	brcc	.+20     	; 0x33de <action_macro_play+0xde>
                    del_weak_mods(MOD_BIT(macro));
    33ca:	87 70       	andi	r24, 0x07	; 7
    33cc:	fd 2d       	mov	r31, r13
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <action_macro_play+0xd2>
    33d0:	ff 0f       	add	r31, r31
    33d2:	8a 95       	dec	r24
    33d4:	ea f7       	brpl	.-6      	; 0x33d0 <action_macro_play+0xd0>
    33d6:	8f 2f       	mov	r24, r31
    33d8:	0e 94 8d 1c 	call	0x391a	; 0x391a <del_weak_mods>
    33dc:	e2 cf       	rjmp	.-60     	; 0x33a2 <action_macro_play+0xa2>
                    unregister_code(macro);
    33de:	0e 94 92 12 	call	0x2524	; 0x2524 <unregister_code>
    33e2:	e4 cf       	rjmp	.-56     	; 0x33ac <action_macro_play+0xac>
                MACRO_READ();
    33e4:	0e 5f       	subi	r16, 0xFE	; 254
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	fe 01       	movw	r30, r28
    33ea:	c4 91       	lpm	r28, Z
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    33ec:	c1 50       	subi	r28, 0x01	; 1
    33ee:	f0 f2       	brcs	.-68     	; 0x33ac <action_macro_play+0xac>
    33f0:	8f e9       	ldi	r24, 0x9F	; 159
    33f2:	9f e0       	ldi	r25, 0x0F	; 15
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <action_macro_play+0xf4>
    33f8:	00 c0       	rjmp	.+0      	; 0x33fa <action_macro_play+0xfa>
    33fa:	00 00       	nop
    33fc:	f7 cf       	rjmp	.-18     	; 0x33ec <action_macro_play+0xec>
                interval = MACRO_READ();
    33fe:	0e 5f       	subi	r16, 0xFE	; 254
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	fe 01       	movw	r30, r28
    3404:	f4 90       	lpm	r15, Z
                break;
    3406:	d2 cf       	rjmp	.-92     	; 0x33ac <action_macro_play+0xac>
                mod_storage = get_mods();
    3408:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <get_mods>
    340c:	e8 2e       	mov	r14, r24
                break;
    340e:	cf cf       	rjmp	.-98     	; 0x33ae <action_macro_play+0xae>
                clear_mods();
    3410:	0e 94 84 1c 	call	0x3908	; 0x3908 <clear_mods>
    3414:	aa cf       	rjmp	.-172    	; 0x336a <action_macro_play+0x6a>
                register_code(macro);
    3416:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <register_code>
                break;
    341a:	c9 cf       	rjmp	.-110    	; 0x33ae <action_macro_play+0xae>
    341c:	ef e9       	ldi	r30, 0x9F	; 159
    341e:	ff e0       	ldi	r31, 0x0F	; 15
    3420:	31 97       	sbiw	r30, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <action_macro_play+0x120>
    3424:	00 c0       	rjmp	.+0      	; 0x3426 <action_macro_play+0x126>
    3426:	00 00       	nop
    3428:	c3 cf       	rjmp	.-122    	; 0x33b0 <action_macro_play+0xb0>

0000342a <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    342a:	60 93 a6 03 	sts	0x03A6, r22	; 0x8003a6 <layer_state>
    342e:	70 93 a7 03 	sts	0x03A7, r23	; 0x8003a7 <layer_state+0x1>
    3432:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <layer_state+0x2>
    3436:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <layer_state+0x3>
    hook_layer_change(layer_state);
    343a:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <hook_layer_change>

0000343e <default_layer_debug>:
}
    343e:	08 95       	ret

00003440 <default_layer_set>:
    default_layer_state = state;
    3440:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <default_layer_state>
    3444:	70 93 ab 03 	sts	0x03AB, r23	; 0x8003ab <default_layer_state+0x1>
    3448:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <default_layer_state+0x2>
    344c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <default_layer_state+0x3>
    hook_default_layer_change(default_layer_state);
    3450:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <hook_default_layer_change>

00003454 <default_layer_or>:
{
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3458:	00 91 aa 03 	lds	r16, 0x03AA	; 0x8003aa <default_layer_state>
    345c:	10 91 ab 03 	lds	r17, 0x03AB	; 0x8003ab <default_layer_state+0x1>
    3460:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <default_layer_state+0x2>
    3464:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <default_layer_state+0x3>
    3468:	60 2b       	or	r22, r16
    346a:	71 2b       	or	r23, r17
    346c:	82 2b       	or	r24, r18
    346e:	93 2b       	or	r25, r19
    default_layer_state = state;
    3470:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <default_layer_state>
    3474:	70 93 ab 03 	sts	0x03AB, r23	; 0x8003ab <default_layer_state+0x1>
    3478:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <default_layer_state+0x2>
    347c:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <default_layer_state+0x3>
}
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    3484:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <hook_default_layer_change>

00003488 <default_layer_and>:
{
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    348c:	00 91 aa 03 	lds	r16, 0x03AA	; 0x8003aa <default_layer_state>
    3490:	10 91 ab 03 	lds	r17, 0x03AB	; 0x8003ab <default_layer_state+0x1>
    3494:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <default_layer_state+0x2>
    3498:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <default_layer_state+0x3>
    349c:	60 23       	and	r22, r16
    349e:	71 23       	and	r23, r17
    34a0:	82 23       	and	r24, r18
    34a2:	93 23       	and	r25, r19
    default_layer_state = state;
    34a4:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <default_layer_state>
    34a8:	70 93 ab 03 	sts	0x03AB, r23	; 0x8003ab <default_layer_state+0x1>
    34ac:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <default_layer_state+0x2>
    34b0:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <default_layer_state+0x3>
}
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    34b8:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <hook_default_layer_change>

000034bc <default_layer_xor>:
{
    34bc:	0f 93       	push	r16
    34be:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    34c0:	00 91 aa 03 	lds	r16, 0x03AA	; 0x8003aa <default_layer_state>
    34c4:	10 91 ab 03 	lds	r17, 0x03AB	; 0x8003ab <default_layer_state+0x1>
    34c8:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <default_layer_state+0x2>
    34cc:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <default_layer_state+0x3>
    34d0:	60 27       	eor	r22, r16
    34d2:	71 27       	eor	r23, r17
    34d4:	82 27       	eor	r24, r18
    34d6:	93 27       	eor	r25, r19
    default_layer_state = state;
    34d8:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <default_layer_state>
    34dc:	70 93 ab 03 	sts	0x03AB, r23	; 0x8003ab <default_layer_state+0x1>
    34e0:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <default_layer_state+0x2>
    34e4:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <default_layer_state+0x3>
}
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
    hook_default_layer_change(default_layer_state);
    34ec:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <hook_default_layer_change>

000034f0 <layer_clear>:
#endif
}

void layer_clear(void)
{
    layer_state_set(0);
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	70 e0       	ldi	r23, 0x00	; 0
    34f4:	cb 01       	movw	r24, r22
    34f6:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

000034fa <layer_move>:
}

void layer_move(uint8_t layer)
{
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    34fe:	41 e0       	ldi	r20, 0x01	; 1
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	70 e0       	ldi	r23, 0x00	; 0
    3506:	8a 01       	movw	r16, r20
    3508:	9b 01       	movw	r18, r22
    350a:	04 c0       	rjmp	.+8      	; 0x3514 <layer_move+0x1a>
    350c:	00 0f       	add	r16, r16
    350e:	11 1f       	adc	r17, r17
    3510:	22 1f       	adc	r18, r18
    3512:	33 1f       	adc	r19, r19
    3514:	8a 95       	dec	r24
    3516:	d2 f7       	brpl	.-12     	; 0x350c <layer_move+0x12>
    3518:	c9 01       	movw	r24, r18
    351a:	b8 01       	movw	r22, r16
}
    351c:	1f 91       	pop	r17
    351e:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
    3520:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

00003524 <layer_on>:

void layer_on(uint8_t layer)
{
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3528:	41 e0       	ldi	r20, 0x01	; 1
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	70 e0       	ldi	r23, 0x00	; 0
    3530:	04 c0       	rjmp	.+8      	; 0x353a <layer_on+0x16>
    3532:	44 0f       	add	r20, r20
    3534:	55 1f       	adc	r21, r21
    3536:	66 1f       	adc	r22, r22
    3538:	77 1f       	adc	r23, r23
    353a:	8a 95       	dec	r24
    353c:	d2 f7       	brpl	.-12     	; 0x3532 <layer_on+0xe>
    353e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <layer_state>
    3542:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <layer_state+0x1>
    3546:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <layer_state+0x2>
    354a:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <layer_state+0x3>
    354e:	8a 01       	movw	r16, r20
    3550:	9b 01       	movw	r18, r22
    3552:	08 2b       	or	r16, r24
    3554:	19 2b       	or	r17, r25
    3556:	2a 2b       	or	r18, r26
    3558:	3b 2b       	or	r19, r27
    355a:	c9 01       	movw	r24, r18
    355c:	b8 01       	movw	r22, r16
}
    355e:	1f 91       	pop	r17
    3560:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
    3562:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

00003566 <layer_off>:

void layer_off(uint8_t layer)
{
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    356a:	41 e0       	ldi	r20, 0x01	; 1
    356c:	50 e0       	ldi	r21, 0x00	; 0
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	70 e0       	ldi	r23, 0x00	; 0
    3572:	04 c0       	rjmp	.+8      	; 0x357c <layer_off+0x16>
    3574:	44 0f       	add	r20, r20
    3576:	55 1f       	adc	r21, r21
    3578:	66 1f       	adc	r22, r22
    357a:	77 1f       	adc	r23, r23
    357c:	8a 95       	dec	r24
    357e:	d2 f7       	brpl	.-12     	; 0x3574 <layer_off+0xe>
    3580:	cb 01       	movw	r24, r22
    3582:	ba 01       	movw	r22, r20
    3584:	60 95       	com	r22
    3586:	70 95       	com	r23
    3588:	80 95       	com	r24
    358a:	90 95       	com	r25
    358c:	00 91 a6 03 	lds	r16, 0x03A6	; 0x8003a6 <layer_state>
    3590:	10 91 a7 03 	lds	r17, 0x03A7	; 0x8003a7 <layer_state+0x1>
    3594:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <layer_state+0x2>
    3598:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <layer_state+0x3>
    359c:	60 23       	and	r22, r16
    359e:	71 23       	and	r23, r17
    35a0:	82 23       	and	r24, r18
    35a2:	93 23       	and	r25, r19
}
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
    35a8:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

000035ac <layer_invert>:

void layer_invert(uint8_t layer)
{
    35ac:	0f 93       	push	r16
    35ae:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    35b0:	41 e0       	ldi	r20, 0x01	; 1
    35b2:	50 e0       	ldi	r21, 0x00	; 0
    35b4:	60 e0       	ldi	r22, 0x00	; 0
    35b6:	70 e0       	ldi	r23, 0x00	; 0
    35b8:	04 c0       	rjmp	.+8      	; 0x35c2 <layer_invert+0x16>
    35ba:	44 0f       	add	r20, r20
    35bc:	55 1f       	adc	r21, r21
    35be:	66 1f       	adc	r22, r22
    35c0:	77 1f       	adc	r23, r23
    35c2:	8a 95       	dec	r24
    35c4:	d2 f7       	brpl	.-12     	; 0x35ba <layer_invert+0xe>
    35c6:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <layer_state>
    35ca:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <layer_state+0x1>
    35ce:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <layer_state+0x2>
    35d2:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <layer_state+0x3>
    35d6:	8a 01       	movw	r16, r20
    35d8:	9b 01       	movw	r18, r22
    35da:	08 27       	eor	r16, r24
    35dc:	19 27       	eor	r17, r25
    35de:	2a 27       	eor	r18, r26
    35e0:	3b 27       	eor	r19, r27
    35e2:	c9 01       	movw	r24, r18
    35e4:	b8 01       	movw	r22, r16
}
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
    35ea:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

000035ee <layer_or>:

void layer_or(uint32_t state)
{
    35ee:	0f 93       	push	r16
    35f0:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    35f2:	00 91 a6 03 	lds	r16, 0x03A6	; 0x8003a6 <layer_state>
    35f6:	10 91 a7 03 	lds	r17, 0x03A7	; 0x8003a7 <layer_state+0x1>
    35fa:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <layer_state+0x2>
    35fe:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <layer_state+0x3>
    3602:	60 2b       	or	r22, r16
    3604:	71 2b       	or	r23, r17
    3606:	82 2b       	or	r24, r18
    3608:	93 2b       	or	r25, r19
}
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    layer_state_set(layer_state | state);
    360e:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

00003612 <layer_and>:
void layer_and(uint32_t state)
{
    3612:	0f 93       	push	r16
    3614:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3616:	00 91 a6 03 	lds	r16, 0x03A6	; 0x8003a6 <layer_state>
    361a:	10 91 a7 03 	lds	r17, 0x03A7	; 0x8003a7 <layer_state+0x1>
    361e:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <layer_state+0x2>
    3622:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <layer_state+0x3>
    3626:	60 23       	and	r22, r16
    3628:	71 23       	and	r23, r17
    362a:	82 23       	and	r24, r18
    362c:	93 23       	and	r25, r19
}
    362e:	1f 91       	pop	r17
    3630:	0f 91       	pop	r16
    layer_state_set(layer_state & state);
    3632:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

00003636 <layer_xor>:
void layer_xor(uint32_t state)
{
    3636:	0f 93       	push	r16
    3638:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    363a:	00 91 a6 03 	lds	r16, 0x03A6	; 0x8003a6 <layer_state>
    363e:	10 91 a7 03 	lds	r17, 0x03A7	; 0x8003a7 <layer_state+0x1>
    3642:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <layer_state+0x2>
    3646:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <layer_state+0x3>
    364a:	60 27       	eor	r22, r16
    364c:	71 27       	eor	r23, r17
    364e:	82 27       	eor	r24, r18
    3650:	93 27       	eor	r25, r19
}
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    layer_state_set(layer_state ^ state);
    3656:	0c 94 15 1a 	jmp	0x342a	; 0x342a <layer_state_set>

0000365a <layer_debug>:
    365a:	08 95       	ret

0000365c <layer_switch_get_action>:
#ifndef NO_TRACK_KEY_PRESS
/* record layer on where key is pressed */
static uint8_t layer_pressed[MATRIX_ROWS][MATRIX_COLS] = {};
#endif
action_t layer_switch_get_action(keyevent_t event)
{
    365c:	4f 92       	push	r4
    365e:	5f 92       	push	r5
    3660:	6f 92       	push	r6
    3662:	7f 92       	push	r7
    3664:	9f 92       	push	r9
    3666:	af 92       	push	r10
    3668:	bf 92       	push	r11
    366a:	cf 92       	push	r12
    366c:	df 92       	push	r13
    366e:	ef 92       	push	r14
    3670:	ff 92       	push	r15
    3672:	0f 93       	push	r16
    3674:	1f 93       	push	r17
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	00 d0       	rcall	.+0      	; 0x367c <layer_switch_get_action+0x20>
    367c:	00 d0       	rcall	.+0      	; 0x367e <layer_switch_get_action+0x22>
    367e:	0f 92       	push	r0
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	49 83       	std	Y+1, r20	; 0x01
    3686:	5a 83       	std	Y+2, r21	; 0x02
    3688:	6b 83       	std	Y+3, r22	; 0x03
    368a:	7c 83       	std	Y+4, r23	; 0x04
    368c:	8d 83       	std	Y+5, r24	; 0x05
    368e:	8c 81       	ldd	r24, Y+4	; 0x04
    3690:	9d 81       	ldd	r25, Y+5	; 0x05
    3692:	89 2b       	or	r24, r25
    3694:	29 f0       	breq	.+10     	; 0x36a0 <layer_switch_get_action+0x44>
    3696:	7a 01       	movw	r14, r20
    3698:	8f 2d       	mov	r24, r15
    369a:	84 23       	and	r24, r20
    369c:	8f 3f       	cpi	r24, 0xFF	; 255
    369e:	51 f5       	brne	.+84     	; 0x36f4 <layer_switch_get_action+0x98>
    }
#else
    layer = current_layer_for_key(event.key);
#endif
    return action_for_key(layer, event.key);
}
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	df 90       	pop	r13
    36bc:	cf 90       	pop	r12
    36be:	bf 90       	pop	r11
    36c0:	af 90       	pop	r10
    36c2:	9f 90       	pop	r9
    36c4:	7f 90       	pop	r7
    36c6:	6f 90       	pop	r6
    36c8:	5f 90       	pop	r5
    36ca:	4f 90       	pop	r4
    36cc:	08 95       	ret
            action = action_for_key(i, key);
    36ce:	b7 01       	movw	r22, r14
    36d0:	8a 2d       	mov	r24, r10
    36d2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	c1 f1       	breq	.+112    	; 0x374a <layer_switch_get_action+0xee>
    36da:	3c c0       	rjmp	.+120    	; 0x3754 <layer_switch_get_action+0xf8>
        layer = layer_pressed[event.key.row][event.key.col];
    36dc:	f8 01       	movw	r30, r16
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	ee 0f       	add	r30, r30
    36e2:	ff 1f       	adc	r31, r31
    36e4:	8a 95       	dec	r24
    36e6:	e1 f7       	brne	.-8      	; 0x36e0 <layer_switch_get_action+0x84>
    36e8:	ea 5d       	subi	r30, 0xDA	; 218
    36ea:	fc 4f       	sbci	r31, 0xFC	; 252
    36ec:	ec 0d       	add	r30, r12
    36ee:	fd 1d       	adc	r31, r13
    36f0:	90 80       	ld	r9, Z
    36f2:	3b c0       	rjmp	.+118    	; 0x376a <layer_switch_get_action+0x10e>
    if (event.pressed) {
    36f4:	0f 2d       	mov	r16, r15
    36f6:	10 e0       	ldi	r17, 0x00	; 0
    36f8:	c4 2e       	mov	r12, r20
    36fa:	d1 2c       	mov	r13, r1
    36fc:	8b 81       	ldd	r24, Y+3	; 0x03
    36fe:	88 23       	and	r24, r24
    3700:	69 f3       	breq	.-38     	; 0x36dc <layer_switch_get_action+0x80>
    uint32_t layers = layer_state | default_layer_state;
    3702:	40 90 a6 03 	lds	r4, 0x03A6	; 0x8003a6 <layer_state>
    3706:	50 90 a7 03 	lds	r5, 0x03A7	; 0x8003a7 <layer_state+0x1>
    370a:	60 90 a8 03 	lds	r6, 0x03A8	; 0x8003a8 <layer_state+0x2>
    370e:	70 90 a9 03 	lds	r7, 0x03A9	; 0x8003a9 <layer_state+0x3>
    3712:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <default_layer_state>
    3716:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <default_layer_state+0x1>
    371a:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <default_layer_state+0x2>
    371e:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <default_layer_state+0x3>
    3722:	48 2a       	or	r4, r24
    3724:	59 2a       	or	r5, r25
    3726:	6a 2a       	or	r6, r26
    3728:	7b 2a       	or	r7, r27
    372a:	2f e1       	ldi	r18, 0x1F	; 31
    372c:	a2 2e       	mov	r10, r18
    372e:	b1 2c       	mov	r11, r1
        if (layers & (1UL<<i)) {
    3730:	9a 2c       	mov	r9, r10
    3732:	d3 01       	movw	r26, r6
    3734:	c2 01       	movw	r24, r4
    3736:	0a 2c       	mov	r0, r10
    3738:	04 c0       	rjmp	.+8      	; 0x3742 <layer_switch_get_action+0xe6>
    373a:	b6 95       	lsr	r27
    373c:	a7 95       	ror	r26
    373e:	97 95       	ror	r25
    3740:	87 95       	ror	r24
    3742:	0a 94       	dec	r0
    3744:	d2 f7       	brpl	.-12     	; 0x373a <layer_switch_get_action+0xde>
    3746:	80 fd       	sbrc	r24, 0
    3748:	c2 cf       	rjmp	.-124    	; 0x36ce <layer_switch_get_action+0x72>
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	a8 1a       	sub	r10, r24
    374e:	b1 08       	sbc	r11, r1
    3750:	78 f7       	brcc	.-34     	; 0x3730 <layer_switch_get_action+0xd4>
    return 0;
    3752:	91 2c       	mov	r9, r1
        layer_pressed[event.key.row][event.key.col] = layer;
    3754:	f8 01       	movw	r30, r16
    3756:	93 e0       	ldi	r25, 0x03	; 3
    3758:	ee 0f       	add	r30, r30
    375a:	ff 1f       	adc	r31, r31
    375c:	9a 95       	dec	r25
    375e:	e1 f7       	brne	.-8      	; 0x3758 <layer_switch_get_action+0xfc>
    3760:	ea 5d       	subi	r30, 0xDA	; 218
    3762:	fc 4f       	sbci	r31, 0xFC	; 252
    3764:	ec 0d       	add	r30, r12
    3766:	fd 1d       	adc	r31, r13
    3768:	90 82       	st	Z, r9
    return action_for_key(layer, event.key);
    376a:	e9 82       	std	Y+1, r14	; 0x01
    376c:	fa 82       	std	Y+2, r15	; 0x02
    376e:	69 81       	ldd	r22, Y+1	; 0x01
    3770:	7a 81       	ldd	r23, Y+2	; 0x02
    3772:	89 2d       	mov	r24, r9
}
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	ff 90       	pop	r15
    3788:	ef 90       	pop	r14
    378a:	df 90       	pop	r13
    378c:	cf 90       	pop	r12
    378e:	bf 90       	pop	r11
    3790:	af 90       	pop	r10
    3792:	9f 90       	pop	r9
    3794:	7f 90       	pop	r7
    3796:	6f 90       	pop	r6
    3798:	5f 90       	pop	r5
    379a:	4f 90       	pop	r4
    return action_for_key(layer, event.key);
    379c:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <action_for_key>

000037a0 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    37a0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <keyboard_protocol>
    37a4:	99 23       	and	r25, r25
    37a6:	69 f1       	breq	.+90     	; 0x3802 <add_key+0x62>
    37a8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <keyboard_nkro>
    37ac:	99 23       	and	r25, r25
    37ae:	49 f1       	breq	.+82     	; 0x3802 <add_key+0x62>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    37b0:	e8 2f       	mov	r30, r24
    37b2:	e6 95       	lsr	r30
    37b4:	e6 95       	lsr	r30
    37b6:	e6 95       	lsr	r30
    37b8:	ef 31       	cpi	r30, 0x1F	; 31
    37ba:	91 f0       	breq	.+36     	; 0x37e0 <add_key+0x40>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    37bc:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <keyboard_report>
    37c0:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <keyboard_report+0x1>
    37c4:	e2 0f       	add	r30, r18
    37c6:	f3 2f       	mov	r31, r19
    37c8:	f1 1d       	adc	r31, r1
    37ca:	87 70       	andi	r24, 0x07	; 7
    37cc:	21 e0       	ldi	r18, 0x01	; 1
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	01 c0       	rjmp	.+2      	; 0x37d4 <add_key+0x34>
    37d2:	22 0f       	add	r18, r18
    37d4:	8a 95       	dec	r24
    37d6:	ea f7       	brpl	.-6      	; 0x37d2 <add_key+0x32>
    37d8:	81 81       	ldd	r24, Z+1	; 0x01
    37da:	82 2b       	or	r24, r18
    37dc:	81 83       	std	Z+1, r24	; 0x01
    37de:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    37e0:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <debug_config>
    37e4:	90 ff       	sbrs	r25, 0
    37e6:	22 c0       	rjmp	.+68     	; 0x382c <add_key+0x8c>
    37e8:	1f 92       	push	r1
    37ea:	8f 93       	push	r24
    37ec:	86 ee       	ldi	r24, 0xE6	; 230
    37ee:	93 e0       	ldi	r25, 0x03	; 3
    37f0:	9f 93       	push	r25
    37f2:	8f 93       	push	r24
    37f4:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	08 95       	ret
        if (keyboard_report->keys[i] == code) {
    3802:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <keyboard_report>
    3806:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <keyboard_report+0x1>
    380a:	f9 01       	movw	r30, r18
    380c:	32 96       	adiw	r30, 0x02	; 2
    380e:	9f ef       	ldi	r25, 0xFF	; 255
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	51 91       	ld	r21, Z+
    3814:	85 17       	cp	r24, r21
    3816:	51 f0       	breq	.+20     	; 0x382c <add_key+0x8c>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3818:	9f 3f       	cpi	r25, 0xFF	; 255
    381a:	19 f4       	brne	.+6      	; 0x3822 <add_key+0x82>
    381c:	51 11       	cpse	r21, r1
    381e:	01 c0       	rjmp	.+2      	; 0x3822 <add_key+0x82>
    3820:	94 2f       	mov	r25, r20
    3822:	4f 5f       	subi	r20, 0xFF	; 255
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3824:	4e 31       	cpi	r20, 0x1E	; 30
    3826:	a9 f7       	brne	.-22     	; 0x3812 <add_key+0x72>
        if (empty != -1) {
    3828:	9f 3f       	cpi	r25, 0xFF	; 255
    382a:	09 f4       	brne	.+2      	; 0x382e <add_key+0x8e>
}
    382c:	08 95       	ret
            keyboard_report->keys[empty] = code;
    382e:	29 0f       	add	r18, r25
    3830:	31 1d       	adc	r19, r1
    3832:	97 fd       	sbrc	r25, 7
    3834:	3a 95       	dec	r19
    3836:	f9 01       	movw	r30, r18
    3838:	82 83       	std	Z+2, r24	; 0x02
    383a:	08 95       	ret

0000383c <del_key>:
    if (keyboard_protocol && keyboard_nkro) {
    383c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <keyboard_protocol>
    3840:	99 23       	and	r25, r25
    3842:	79 f1       	breq	.+94     	; 0x38a2 <del_key+0x66>
    3844:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <keyboard_nkro>
    3848:	99 23       	and	r25, r25
    384a:	59 f1       	breq	.+86     	; 0x38a2 <del_key+0x66>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    384c:	e8 2f       	mov	r30, r24
    384e:	e6 95       	lsr	r30
    3850:	e6 95       	lsr	r30
    3852:	e6 95       	lsr	r30
    3854:	ef 31       	cpi	r30, 0x1F	; 31
    3856:	a1 f0       	breq	.+40     	; 0x3880 <del_key+0x44>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3858:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <keyboard_report>
    385c:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <keyboard_report+0x1>
    3860:	e2 0f       	add	r30, r18
    3862:	f3 2f       	mov	r31, r19
    3864:	f1 1d       	adc	r31, r1
    3866:	28 2f       	mov	r18, r24
    3868:	27 70       	andi	r18, 0x07	; 7
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	01 c0       	rjmp	.+2      	; 0x3872 <del_key+0x36>
    3870:	88 0f       	add	r24, r24
    3872:	2a 95       	dec	r18
    3874:	ea f7       	brpl	.-6      	; 0x3870 <del_key+0x34>
    3876:	80 95       	com	r24
    3878:	91 81       	ldd	r25, Z+1	; 0x01
    387a:	89 23       	and	r24, r25
    387c:	81 83       	std	Z+1, r24	; 0x01
    387e:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3880:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <debug_config>
    3884:	90 ff       	sbrs	r25, 0
    3886:	1e c0       	rjmp	.+60     	; 0x38c4 <del_key+0x88>
    3888:	1f 92       	push	r1
    388a:	8f 93       	push	r24
    388c:	88 ec       	ldi	r24, 0xC8	; 200
    388e:	93 e0       	ldi	r25, 0x03	; 3
    3890:	9f 93       	push	r25
    3892:	8f 93       	push	r24
    3894:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	08 95       	ret
        if (keyboard_report->keys[i] == code) {
    38a2:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <keyboard_report>
    38a6:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <keyboard_report+0x1>
    38aa:	f9 01       	movw	r30, r18
    38ac:	32 96       	adiw	r30, 0x02	; 2
    38ae:	20 5e       	subi	r18, 0xE0	; 224
    38b0:	3f 4f       	sbci	r19, 0xFF	; 255
    38b2:	91 91       	ld	r25, Z+
    38b4:	89 13       	cpse	r24, r25
    38b6:	03 c0       	rjmp	.+6      	; 0x38be <del_key+0x82>
            keyboard_report->keys[i] = 0;
    38b8:	df 01       	movw	r26, r30
    38ba:	11 97       	sbiw	r26, 0x01	; 1
    38bc:	1c 92       	st	X, r1
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    38be:	e2 17       	cp	r30, r18
    38c0:	f3 07       	cpc	r31, r19
    38c2:	b9 f7       	brne	.-18     	; 0x38b2 <del_key+0x76>
}
    38c4:	08 95       	ret

000038c6 <clear_keys>:
{
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	90 e0       	ldi	r25, 0x00	; 0
        keyboard_report->raw[i] = 0;
    38ca:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <keyboard_report>
    38ce:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <keyboard_report+0x1>
    38d2:	e8 0f       	add	r30, r24
    38d4:	f9 1f       	adc	r31, r25
    38d6:	10 82       	st	Z, r1
    38d8:	01 96       	adiw	r24, 0x01	; 1
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    38da:	80 32       	cpi	r24, 0x20	; 32
    38dc:	91 05       	cpc	r25, r1
    38de:	a9 f7       	brne	.-22     	; 0x38ca <clear_keys+0x4>
}
    38e0:	08 95       	ret

000038e2 <get_mods>:
uint8_t get_mods(void) { return real_mods; }
    38e2:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <real_mods>
    38e6:	08 95       	ret

000038e8 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    38e8:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <real_mods>
    38ec:	89 2b       	or	r24, r25
    38ee:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <real_mods>
    38f2:	08 95       	ret

000038f4 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    38f4:	80 95       	com	r24
    38f6:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <real_mods>
    38fa:	98 23       	and	r25, r24
    38fc:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <real_mods>
    3900:	08 95       	ret

00003902 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3902:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <real_mods>
    3906:	08 95       	ret

00003908 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3908:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <real_mods>
    390c:	08 95       	ret

0000390e <add_weak_mods>:
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    390e:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <weak_mods>
    3912:	89 2b       	or	r24, r25
    3914:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <weak_mods>
    3918:	08 95       	ret

0000391a <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    391a:	80 95       	com	r24
    391c:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <weak_mods>
    3920:	98 23       	and	r25, r24
    3922:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <weak_mods>
    3926:	08 95       	ret

00003928 <clear_weak_mods>:
void clear_weak_mods(void) { weak_mods = 0; }
    3928:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <weak_mods>
    392c:	08 95       	ret

0000392e <set_oneshot_mods>:
    oneshot_mods = mods;
    392e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <oneshot_mods>
}
    3932:	08 95       	ret

00003934 <clear_oneshot_mods>:
    oneshot_mods = 0;
    3934:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <oneshot_mods>
}
    3938:	08 95       	ret

0000393a <has_anykey>:
        if (keyboard_report->raw[i])
    393a:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <keyboard_report>
    393e:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <keyboard_report+0x1>
    3942:	f9 01       	movw	r30, r18
    3944:	31 96       	adiw	r30, 0x01	; 1
    3946:	20 5e       	subi	r18, 0xE0	; 224
    3948:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t cnt = 0;
    394a:	80 e0       	ldi	r24, 0x00	; 0
        if (keyboard_report->raw[i])
    394c:	91 91       	ld	r25, Z+
    394e:	91 11       	cpse	r25, r1
            cnt++;
    3950:	8f 5f       	subi	r24, 0xFF	; 255
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3952:	e2 17       	cp	r30, r18
    3954:	f3 07       	cpc	r31, r19
    3956:	d1 f7       	brne	.-12     	; 0x394c <has_anykey+0x12>
}
    3958:	08 95       	ret

0000395a <send_keyboard_report>:
    keyboard_report->mods  = real_mods;
    395a:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <keyboard_report>
    395e:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <keyboard_report+0x1>
    3962:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <real_mods>
    3966:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3968:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <keyboard_report>
    396c:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <keyboard_report+0x1>
    3970:	80 81       	ld	r24, Z
    3972:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <weak_mods>
    3976:	89 2b       	or	r24, r25
    3978:	80 83       	st	Z, r24
    if (oneshot_mods) {
    397a:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <oneshot_mods>
    397e:	99 23       	and	r25, r25
    3980:	61 f0       	breq	.+24     	; 0x399a <send_keyboard_report+0x40>
        keyboard_report->mods |= oneshot_mods;
    3982:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <keyboard_report>
    3986:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <keyboard_report+0x1>
    398a:	80 81       	ld	r24, Z
    398c:	89 2b       	or	r24, r25
    398e:	80 83       	st	Z, r24
        if (has_anykey()) {
    3990:	0e 94 9d 1c 	call	0x393a	; 0x393a <has_anykey>
    3994:	81 11       	cpse	r24, r1
    oneshot_mods = 0;
    3996:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <oneshot_mods>
    host_keyboard_send(keyboard_report);
    399a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <keyboard_report>
    399e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <keyboard_report+0x1>
    39a2:	0c 94 14 10 	jmp	0x2028	; 0x2028 <host_keyboard_send>

000039a6 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    39a6:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__bss_start+0x1>
    39aa:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__bss_start>
}
    39ae:	08 95       	ret

000039b0 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    39b0:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	9c 01       	movw	r18, r24
    39b6:	22 0f       	add	r18, r18
    39b8:	33 1f       	adc	r19, r19
    39ba:	22 0f       	add	r18, r18
    39bc:	33 1f       	adc	r19, r19
    39be:	2c 7c       	andi	r18, 0xCC	; 204
    39c0:	95 95       	asr	r25
    39c2:	87 95       	ror	r24
    39c4:	95 95       	asr	r25
    39c6:	87 95       	ror	r24
    39c8:	83 73       	andi	r24, 0x33	; 51
    39ca:	28 2b       	or	r18, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	c9 01       	movw	r24, r18
    39d0:	88 0f       	add	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	8a 7a       	andi	r24, 0xAA	; 170
    39d6:	35 95       	asr	r19
    39d8:	27 95       	ror	r18
    39da:	25 75       	andi	r18, 0x55	; 85
    return bits;
}
    39dc:	82 2b       	or	r24, r18
    39de:	08 95       	ret

000039e0 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    39e0:	08 95       	ret

000039e2 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	00 d0       	rcall	.+0      	; 0x39e8 <hook_matrix_change+0x6>
    39e8:	00 d0       	rcall	.+0      	; 0x39ea <hook_matrix_change+0x8>
    39ea:	0f 92       	push	r0
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	08 95       	ret

00003a00 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    (void)default_layer_state;
}
    3a00:	08 95       	ret

00003a02 <hook_layer_change>:
    3a02:	08 95       	ret

00003a04 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3a04:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <keyboard_set_leds>

00003a08 <hook_process_action>:
void hook_bootmagic(void) {}

__attribute__((weak))
bool hook_process_action(keyrecord_t *record) {
    return false;
}
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	08 95       	ret

00003a0c <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3a0c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <USB_DeviceState>
    3a10:	84 30       	cpi	r24, 0x04	; 4
    3a12:	21 f1       	breq	.+72     	; 0x3a5c <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    3a14:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <wdt_timeout>

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3a18:	88 e1       	ldi	r24, 0x18	; 24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	20 e4       	ldi	r18, 0x40	; 64
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	a8 95       	wdr
    3a24:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3a2e:	83 b7       	in	r24, 0x33	; 51
    3a30:	81 7f       	andi	r24, 0xF1	; 241
    3a32:	84 60       	ori	r24, 0x04	; 4
    3a34:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3a36:	83 b7       	in	r24, 0x33	; 51
    3a38:	81 60       	ori	r24, 0x01	; 1
    3a3a:	83 bf       	out	0x33, r24	; 51
    sei();
    3a3c:	78 94       	sei
    sleep_cpu();
    3a3e:	88 95       	sleep
    sleep_disable();
    3a40:	83 b7       	in	r24, 0x33	; 51
    3a42:	8e 7f       	andi	r24, 0xFE	; 254
    3a44:	83 bf       	out	0x33, r24	; 51
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	a8 95       	wdr
    3a4c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a50:	88 61       	ori	r24, 0x18	; 24
    3a52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a56:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a5a:	0f be       	out	0x3f, r0	; 63
#elif defined(SUSPEND_MODE_IDLE)
    idle();
#else
    power_down(WDTO_15MS);
#endif
}
    3a5c:	08 95       	ret

00003a5e <suspend_wakeup_condition>:

bool suspend_wakeup_condition(void)
{
    3a5e:	cf 93       	push	r28
    matrix_power_up();
    3a60:	0e 94 c1 11 	call	0x2382	; 0x2382 <matrix_power_up>
    matrix_scan();
    3a64:	0e 94 0e 07 	call	0xe1c	; 0xe1c <matrix_scan>
    matrix_power_down();
    3a68:	0e 94 c2 11 	call	0x2384	; 0x2384 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a6c:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3a6e:	8c 2f       	mov	r24, r28
    3a70:	0e 94 84 07 	call	0xf08	; 0xf08 <matrix_get_row>
    3a74:	81 11       	cpse	r24, r1
    3a76:	05 c0       	rjmp	.+10     	; 0x3a82 <suspend_wakeup_condition+0x24>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a78:	cf 5f       	subi	r28, 0xFF	; 255
    3a7a:	c0 31       	cpi	r28, 0x10	; 16
    3a7c:	c1 f7       	brne	.-16     	; 0x3a6e <suspend_wakeup_condition+0x10>
    }
    return false;
}
    3a7e:	cf 91       	pop	r28
    3a80:	08 95       	ret
        if (matrix_get_row(r)) return true;
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	fc cf       	rjmp	.-8      	; 0x3a7e <suspend_wakeup_condition+0x20>

00003a86 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3a86:	0e 94 8a 07 	call	0xf14	; 0xf14 <matrix_clear>
    clear_keyboard();
    3a8a:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <clear_keyboard>

00003a8e <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3a8e:	1f 92       	push	r1
    3a90:	1f b6       	in	r1, 0x3f	; 63
    3a92:	1f 92       	push	r1
    3a94:	11 24       	eor	r1, r1
    3a96:	8f 93       	push	r24
    3a98:	9f 93       	push	r25
    3a9a:	af 93       	push	r26
    3a9c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3a9e:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <wdt_timeout>
    3aa2:	81 11       	cpse	r24, r1
    3aa4:	13 c0       	rjmp	.+38     	; 0x3acc <__vector_12+0x3e>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3aa6:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <timer_count>
    3aaa:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <timer_count+0x1>
    3aae:	a0 91 d5 03 	lds	r26, 0x03D5	; 0x8003d5 <timer_count+0x2>
    3ab2:	b0 91 d6 03 	lds	r27, 0x03D6	; 0x8003d6 <timer_count+0x3>
    3ab6:	41 96       	adiw	r24, 0x11	; 17
    3ab8:	a1 1d       	adc	r26, r1
    3aba:	b1 1d       	adc	r27, r1
    3abc:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <timer_count>
    3ac0:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <timer_count+0x1>
    3ac4:	a0 93 d5 03 	sts	0x03D5, r26	; 0x8003d5 <timer_count+0x2>
    3ac8:	b0 93 d6 03 	sts	0x03D6, r27	; 0x8003d6 <timer_count+0x3>
            break;
        default:
            ;
    }
}
    3acc:	bf 91       	pop	r27
    3ace:	af 91       	pop	r26
    3ad0:	9f 91       	pop	r25
    3ad2:	8f 91       	pop	r24
    3ad4:	1f 90       	pop	r1
    3ad6:	1f be       	out	0x3f, r1	; 63
    3ad8:	1f 90       	pop	r1
    3ada:	18 95       	reti

00003adc <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3ae0:	93 e0       	ldi	r25, 0x03	; 3
    3ae2:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3ae4:	9a ef       	ldi	r25, 0xFA	; 250
    3ae6:	97 bd       	out	0x27, r25	; 39
#ifdef TIMSK0
    TIMSK0 = (1<<OCIE0A);
    3ae8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
#else
    TIMSK = (1<<OCIE0A);
#endif
}
    3aec:	08 95       	ret

00003aee <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3aee:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3af0:	f8 94       	cli
    t = timer_count;
    3af2:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <timer_count>
    3af6:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <timer_count+0x1>
    3afa:	a0 91 d5 03 	lds	r26, 0x03D5	; 0x8003d5 <timer_count+0x2>
    3afe:	b0 91 d6 03 	lds	r27, 0x03D6	; 0x8003d6 <timer_count+0x3>
    SREG = sreg;
    3b02:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3b04:	08 95       	ret

00003b06 <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3b06:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b08:	f8 94       	cli
    t = timer_count;
    3b0a:	60 91 d3 03 	lds	r22, 0x03D3	; 0x8003d3 <timer_count>
    3b0e:	70 91 d4 03 	lds	r23, 0x03D4	; 0x8003d4 <timer_count+0x1>
    3b12:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <timer_count+0x2>
    3b16:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <timer_count+0x3>
    SREG = sreg;
    3b1a:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3b1c:	08 95       	ret

00003b1e <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3b1e:	cf 92       	push	r12
    3b20:	df 92       	push	r13
    3b22:	ef 92       	push	r14
    3b24:	ff 92       	push	r15
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3b2a:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3b2c:	f8 94       	cli
    t = timer_count;
    3b2e:	40 91 d3 03 	lds	r20, 0x03D3	; 0x8003d3 <timer_count>
    3b32:	50 91 d4 03 	lds	r21, 0x03D4	; 0x8003d4 <timer_count+0x1>
    3b36:	60 91 d5 03 	lds	r22, 0x03D5	; 0x8003d5 <timer_count+0x2>
    3b3a:	70 91 d6 03 	lds	r23, 0x03D6	; 0x8003d6 <timer_count+0x3>
    SREG = sreg;
    3b3e:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b40:	6a 01       	movw	r12, r20
    3b42:	7b 01       	movw	r14, r22
    3b44:	ee 24       	eor	r14, r14
    3b46:	ff 24       	eor	r15, r15
    3b48:	8c 01       	movw	r16, r24
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	c0 16       	cp	r12, r16
    3b50:	d1 06       	cpc	r13, r17
    3b52:	e2 06       	cpc	r14, r18
    3b54:	f3 06       	cpc	r15, r19
    3b56:	50 f0       	brcs	.+20     	; 0x3b6c <timer_elapsed+0x4e>
    3b58:	48 1b       	sub	r20, r24
    3b5a:	59 0b       	sbc	r21, r25
}
    3b5c:	ca 01       	movw	r24, r20
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	ff 90       	pop	r15
    3b64:	ef 90       	pop	r14
    3b66:	df 90       	pop	r13
    3b68:	cf 90       	pop	r12
    3b6a:	08 95       	ret
    return TIMER_DIFF_16((t & 0xFFFF), last);
    3b6c:	41 50       	subi	r20, 0x01	; 1
    3b6e:	51 09       	sbc	r21, r1
    3b70:	f3 cf       	rjmp	.-26     	; 0x3b58 <timer_elapsed+0x3a>

00003b72 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3b72:	1f 92       	push	r1
    3b74:	1f b6       	in	r1, 0x3f	; 63
    3b76:	1f 92       	push	r1
    3b78:	11 24       	eor	r1, r1
    3b7a:	8f 93       	push	r24
    3b7c:	9f 93       	push	r25
    3b7e:	af 93       	push	r26
    3b80:	bf 93       	push	r27
    timer_count++;
    3b82:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <timer_count>
    3b86:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <timer_count+0x1>
    3b8a:	a0 91 d5 03 	lds	r26, 0x03D5	; 0x8003d5 <timer_count+0x2>
    3b8e:	b0 91 d6 03 	lds	r27, 0x03D6	; 0x8003d6 <timer_count+0x3>
    3b92:	01 96       	adiw	r24, 0x01	; 1
    3b94:	a1 1d       	adc	r26, r1
    3b96:	b1 1d       	adc	r27, r1
    3b98:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <timer_count>
    3b9c:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <timer_count+0x1>
    3ba0:	a0 93 d5 03 	sts	0x03D5, r26	; 0x8003d5 <timer_count+0x2>
    3ba4:	b0 93 d6 03 	sts	0x03D6, r27	; 0x8003d6 <timer_count+0x3>
}
    3ba8:	bf 91       	pop	r27
    3baa:	af 91       	pop	r26
    3bac:	9f 91       	pop	r25
    3bae:	8f 91       	pop	r24
    3bb0:	1f 90       	pop	r1
    3bb2:	1f be       	out	0x3f, r1	; 63
    3bb4:	1f 90       	pop	r1
    3bb6:	18 95       	reti

00003bb8 <bootloader_jump>:
    USB_Disable();
    3bb8:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <USB_Disable>
    cli();
    3bbc:	f8 94       	cli
    *(volatile uint16_t *)0x0800 = 0x7777;
    3bbe:	87 e7       	ldi	r24, 0x77	; 119
    3bc0:	97 e7       	ldi	r25, 0x77	; 119
    3bc2:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <_end+0x40e>
    3bc6:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <_end+0x40d>
    reset_key = BOOTLOADER_RESET_KEY;
    3bca:	87 e0       	ldi	r24, 0x07	; 7
    3bcc:	90 eb       	ldi	r25, 0xB0	; 176
    3bce:	dc 01       	movw	r26, r24
    3bd0:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <reset_key>
    3bd4:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <reset_key+0x1>
    3bd8:	a0 93 f1 03 	sts	0x03F1, r26	; 0x8003f1 <reset_key+0x2>
    3bdc:	b0 93 f2 03 	sts	0x03F2, r27	; 0x8003f2 <reset_key+0x3>
		__asm__ __volatile__ (
    3be0:	88 e1       	ldi	r24, 0x18	; 24
    3be2:	9c e0       	ldi	r25, 0x0C	; 12
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	f8 94       	cli
    3be8:	a8 95       	wdr
    3bea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    for (;;);
    3bf4:	ff cf       	rjmp	.-2      	; 0x3bf4 <bootloader_jump+0x3c>

00003bf6 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	08 95       	ret

00003bfc <action_function>:
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    (void)record;
    (void)id;
    (void)opt;
}
    3bfc:	08 95       	ret

00003bfe <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3bfe:	20 e1       	ldi	r18, 0x10	; 16
    3c00:	82 9f       	mul	r24, r18
    3c02:	c0 01       	movw	r24, r0
    3c04:	11 24       	eor	r1, r1
    3c06:	fc 01       	movw	r30, r24
    3c08:	e7 0f       	add	r30, r23
    3c0a:	f1 1d       	adc	r31, r1
    3c0c:	83 e0       	ldi	r24, 0x03	; 3
    3c0e:	ee 0f       	add	r30, r30
    3c10:	ff 1f       	adc	r31, r31
    3c12:	8a 95       	dec	r24
    3c14:	e1 f7       	brne	.-8      	; 0x3c0e <keymap_key_to_keycode+0x10>
    3c16:	e6 0f       	add	r30, r22
    3c18:	f1 1d       	adc	r31, r1
    3c1a:	e4 55       	subi	r30, 0x54	; 84
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    3c20:	08 95       	ret

00003c22 <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    3c22:	28 2f       	mov	r18, r24
    3c24:	20 5c       	subi	r18, 0xC0	; 192
    3c26:	33 0b       	sbc	r19, r19
    3c28:	f9 01       	movw	r30, r18
    3c2a:	ee 0f       	add	r30, r30
    3c2c:	ff 1f       	adc	r31, r31
    3c2e:	e4 55       	subi	r30, 0x54	; 84
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	85 91       	lpm	r24, Z+
    3c34:	94 91       	lpm	r25, Z
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3c36:	08 95       	ret

00003c38 <action_for_key>:
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3c38:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <keymap_key_to_keycode>
    switch (keycode) {
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	a9 01       	movw	r20, r18
    3c42:	40 5c       	subi	r20, 0xC0	; 192
    3c44:	51 09       	sbc	r21, r1
    3c46:	40 32       	cpi	r20, 0x20	; 32
    3c48:	51 05       	cpc	r21, r1
    3c4a:	10 f4       	brcc	.+4      	; 0x3c50 <action_for_key+0x18>
            return keymap_fn_to_action(keycode);
    3c4c:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <keymap_fn_to_action>
    switch (keycode) {
    3c50:	8d 3b       	cpi	r24, 0xBD	; 189
    3c52:	68 f4       	brcc	.+26     	; 0x3c6e <action_for_key+0x36>
    3c54:	88 3a       	cpi	r24, 0xA8	; 168
    3c56:	20 f5       	brcc	.+72     	; 0x3ca0 <action_for_key+0x68>
    3c58:	85 3a       	cpi	r24, 0xA5	; 165
    3c5a:	b8 f4       	brcc	.+46     	; 0x3c8a <action_for_key+0x52>
    3c5c:	84 30       	cpi	r24, 0x04	; 4
    3c5e:	78 f4       	brcc	.+30     	; 0x3c7e <action_for_key+0x46>
            return (action_t)ACTION_TRANSPARENT;
    3c60:	21 e0       	ldi	r18, 0x01	; 1
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    switch (keycode) {
    3c64:	81 30       	cpi	r24, 0x01	; 1
    3c66:	59 f0       	breq	.+22     	; 0x3c7e <action_for_key+0x46>
            return (action_t)ACTION_NO;
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	08 c0       	rjmp	.+16     	; 0x3c7e <action_for_key+0x46>
    switch (keycode) {
    3c6e:	88 3e       	cpi	r24, 0xE8	; 232
    3c70:	40 f4       	brcc	.+16     	; 0x3c82 <action_for_key+0x4a>
    3c72:	80 3e       	cpi	r24, 0xE0	; 224
    3c74:	20 f4       	brcc	.+8      	; 0x3c7e <action_for_key+0x46>
            return (action_t)ACTION_COMMAND(COMMAND_BOOTLOADER, 0);
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 ee       	ldi	r19, 0xE0	; 224
    switch (keycode) {
    3c7a:	8f 3b       	cpi	r24, 0xBF	; 191
    3c7c:	a9 f7       	brne	.-22     	; 0x3c68 <action_for_key+0x30>
}
    3c7e:	c9 01       	movw	r24, r18
    3c80:	08 95       	ret
            return (action_t)ACTION_MOUSEKEY(keycode);
    3c82:	30 65       	ori	r19, 0x50	; 80
    switch (keycode) {
    3c84:	80 3f       	cpi	r24, 0xF0	; 240
    3c86:	d8 f7       	brcc	.-10     	; 0x3c7e <action_for_key+0x46>
    3c88:	ef cf       	rjmp	.-34     	; 0x3c68 <action_for_key+0x30>
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c8a:	21 e8       	ldi	r18, 0x81	; 129
    3c8c:	30 e4       	ldi	r19, 0x40	; 64
    3c8e:	85 3a       	cpi	r24, 0xA5	; 165
    3c90:	b1 f3       	breq	.-20     	; 0x3c7e <action_for_key+0x46>
    3c92:	22 e8       	ldi	r18, 0x82	; 130
    3c94:	30 e4       	ldi	r19, 0x40	; 64
    3c96:	86 3a       	cpi	r24, 0xA6	; 166
    3c98:	91 f3       	breq	.-28     	; 0x3c7e <action_for_key+0x46>
    3c9a:	23 e8       	ldi	r18, 0x83	; 131
    3c9c:	30 e4       	ldi	r19, 0x40	; 64
    3c9e:	ef cf       	rjmp	.-34     	; 0x3c7e <action_for_key+0x46>
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3ca0:	22 ee       	ldi	r18, 0xE2	; 226
    3ca2:	34 e4       	ldi	r19, 0x44	; 68
    3ca4:	88 3a       	cpi	r24, 0xA8	; 168
    3ca6:	59 f3       	breq	.-42     	; 0x3c7e <action_for_key+0x46>
    3ca8:	29 ee       	ldi	r18, 0xE9	; 233
    3caa:	34 e4       	ldi	r19, 0x44	; 68
    3cac:	89 3a       	cpi	r24, 0xA9	; 169
    3cae:	39 f3       	breq	.-50     	; 0x3c7e <action_for_key+0x46>
    3cb0:	2a ee       	ldi	r18, 0xEA	; 234
    3cb2:	34 e4       	ldi	r19, 0x44	; 68
    3cb4:	8a 3a       	cpi	r24, 0xAA	; 170
    3cb6:	19 f3       	breq	.-58     	; 0x3c7e <action_for_key+0x46>
    3cb8:	25 eb       	ldi	r18, 0xB5	; 181
    3cba:	34 e4       	ldi	r19, 0x44	; 68
    3cbc:	8b 3a       	cpi	r24, 0xAB	; 171
    3cbe:	f9 f2       	breq	.-66     	; 0x3c7e <action_for_key+0x46>
    3cc0:	26 eb       	ldi	r18, 0xB6	; 182
    3cc2:	34 e4       	ldi	r19, 0x44	; 68
    3cc4:	8c 3a       	cpi	r24, 0xAC	; 172
    3cc6:	d9 f2       	breq	.-74     	; 0x3c7e <action_for_key+0x46>
    3cc8:	23 eb       	ldi	r18, 0xB3	; 179
    3cca:	34 e4       	ldi	r19, 0x44	; 68
    3ccc:	8d 3a       	cpi	r24, 0xAD	; 173
    3cce:	b9 f2       	breq	.-82     	; 0x3c7e <action_for_key+0x46>
    3cd0:	24 eb       	ldi	r18, 0xB4	; 180
    3cd2:	34 e4       	ldi	r19, 0x44	; 68
    3cd4:	8e 3a       	cpi	r24, 0xAE	; 174
    3cd6:	99 f2       	breq	.-90     	; 0x3c7e <action_for_key+0x46>
    3cd8:	27 eb       	ldi	r18, 0xB7	; 183
    3cda:	34 e4       	ldi	r19, 0x44	; 68
    3cdc:	8f 3a       	cpi	r24, 0xAF	; 175
    3cde:	79 f2       	breq	.-98     	; 0x3c7e <action_for_key+0x46>
    3ce0:	2c ec       	ldi	r18, 0xCC	; 204
    3ce2:	34 e4       	ldi	r19, 0x44	; 68
    3ce4:	81 3b       	cpi	r24, 0xB1	; 177
    3ce6:	59 f2       	breq	.-106    	; 0x3c7e <action_for_key+0x46>
    3ce8:	2d ec       	ldi	r18, 0xCD	; 205
    3cea:	34 e4       	ldi	r19, 0x44	; 68
    3cec:	80 3b       	cpi	r24, 0xB0	; 176
    3cee:	39 f2       	breq	.-114    	; 0x3c7e <action_for_key+0x46>
    3cf0:	23 e8       	ldi	r18, 0x83	; 131
    3cf2:	35 e4       	ldi	r19, 0x45	; 69
    3cf4:	82 3b       	cpi	r24, 0xB2	; 178
    3cf6:	19 f2       	breq	.-122    	; 0x3c7e <action_for_key+0x46>
    3cf8:	2a e8       	ldi	r18, 0x8A	; 138
    3cfa:	35 e4       	ldi	r19, 0x45	; 69
    3cfc:	83 3b       	cpi	r24, 0xB3	; 179
    3cfe:	09 f4       	brne	.+2      	; 0x3d02 <action_for_key+0xca>
    3d00:	be cf       	rjmp	.-132    	; 0x3c7e <action_for_key+0x46>
    3d02:	22 e9       	ldi	r18, 0x92	; 146
    3d04:	35 e4       	ldi	r19, 0x45	; 69
    3d06:	84 3b       	cpi	r24, 0xB4	; 180
    3d08:	09 f4       	brne	.+2      	; 0x3d0c <action_for_key+0xd4>
    3d0a:	b9 cf       	rjmp	.-142    	; 0x3c7e <action_for_key+0x46>
    3d0c:	24 e9       	ldi	r18, 0x94	; 148
    3d0e:	35 e4       	ldi	r19, 0x45	; 69
    3d10:	85 3b       	cpi	r24, 0xB5	; 181
    3d12:	09 f4       	brne	.+2      	; 0x3d16 <action_for_key+0xde>
    3d14:	b4 cf       	rjmp	.-152    	; 0x3c7e <action_for_key+0x46>
    3d16:	21 e2       	ldi	r18, 0x21	; 33
    3d18:	36 e4       	ldi	r19, 0x46	; 70
    3d1a:	86 3b       	cpi	r24, 0xB6	; 182
    3d1c:	09 f4       	brne	.+2      	; 0x3d20 <action_for_key+0xe8>
    3d1e:	af cf       	rjmp	.-162    	; 0x3c7e <action_for_key+0x46>
    3d20:	23 e2       	ldi	r18, 0x23	; 35
    3d22:	36 e4       	ldi	r19, 0x46	; 70
    3d24:	87 3b       	cpi	r24, 0xB7	; 183
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <action_for_key+0xf2>
    3d28:	aa cf       	rjmp	.-172    	; 0x3c7e <action_for_key+0x46>
    3d2a:	24 e2       	ldi	r18, 0x24	; 36
    3d2c:	36 e4       	ldi	r19, 0x46	; 70
    3d2e:	88 3b       	cpi	r24, 0xB8	; 184
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <action_for_key+0xfc>
    3d32:	a5 cf       	rjmp	.-182    	; 0x3c7e <action_for_key+0x46>
    3d34:	25 e2       	ldi	r18, 0x25	; 37
    3d36:	36 e4       	ldi	r19, 0x46	; 70
    3d38:	89 3b       	cpi	r24, 0xB9	; 185
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <action_for_key+0x106>
    3d3c:	a0 cf       	rjmp	.-192    	; 0x3c7e <action_for_key+0x46>
    3d3e:	26 e2       	ldi	r18, 0x26	; 38
    3d40:	36 e4       	ldi	r19, 0x46	; 70
    3d42:	8a 3b       	cpi	r24, 0xBA	; 186
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <action_for_key+0x110>
    3d46:	9b cf       	rjmp	.-202    	; 0x3c7e <action_for_key+0x46>
    3d48:	27 e2       	ldi	r18, 0x27	; 39
    3d4a:	36 e4       	ldi	r19, 0x46	; 70
    3d4c:	8b 3b       	cpi	r24, 0xBB	; 187
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <action_for_key+0x11a>
    3d50:	96 cf       	rjmp	.-212    	; 0x3c7e <action_for_key+0x46>
    3d52:	2a e2       	ldi	r18, 0x2A	; 42
    3d54:	36 e4       	ldi	r19, 0x46	; 70
    3d56:	8c 3b       	cpi	r24, 0xBC	; 188
    3d58:	09 f4       	brne	.+2      	; 0x3d5c <action_for_key+0x124>
    3d5a:	91 cf       	rjmp	.-222    	; 0x3c7e <action_for_key+0x46>
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	34 e4       	ldi	r19, 0x44	; 68
    3d60:	8e cf       	rjmp	.-228    	; 0x3c7e <action_for_key+0x46>

00003d62 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3d62:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    3d66:	80 ff       	sbrs	r24, 0
    3d68:	12 c0       	rjmp	.+36     	; 0x3d8e <move_unit+0x2c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    3d6a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <mk_max_speed>
    3d6e:	85 e0       	ldi	r24, 0x05	; 5
    3d70:	68 9f       	mul	r22, r24
    3d72:	b0 01       	movw	r22, r0
    3d74:	11 24       	eor	r1, r1
    3d76:	75 95       	asr	r23
    3d78:	67 95       	ror	r22
    3d7a:	75 95       	asr	r23
    3d7c:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3d7e:	60 38       	cpi	r22, 0x80	; 128
    3d80:	71 05       	cpc	r23, r1
    3d82:	a8 f5       	brcc	.+106    	; 0x3dee <move_unit+0x8c>
    3d84:	61 15       	cp	r22, r1
    3d86:	71 05       	cpc	r23, r1
    3d88:	a1 f1       	breq	.+104    	; 0x3df2 <move_unit+0x90>
    3d8a:	86 2f       	mov	r24, r22
    3d8c:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    3d8e:	81 ff       	sbrs	r24, 1
    3d90:	09 c0       	rjmp	.+18     	; 0x3da4 <move_unit+0x42>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    3d92:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <mk_max_speed>
    3d96:	85 e0       	ldi	r24, 0x05	; 5
    3d98:	68 9f       	mul	r22, r24
    3d9a:	b0 01       	movw	r22, r0
    3d9c:	11 24       	eor	r1, r1
    3d9e:	75 95       	asr	r23
    3da0:	67 95       	ror	r22
    3da2:	ed cf       	rjmp	.-38     	; 0x3d7e <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3da4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <mk_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    3da8:	82 fd       	sbrc	r24, 2
    3daa:	0a c0       	rjmp	.+20     	; 0x3dc0 <move_unit+0x5e>
    } else if (mousekey_repeat == 0) {
    3dac:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <mousekey_repeat>
    3db0:	88 23       	and	r24, r24
    3db2:	d1 f0       	breq	.+52     	; 0x3de8 <move_unit+0x86>
    } else if (mousekey_repeat >= mk_time_to_max) {
    3db4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <mk_time_to_max>
    3db8:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <mk_max_speed>
    3dbc:	89 17       	cp	r24, r25
    3dbe:	28 f0       	brcs	.+10     	; 0x3dca <move_unit+0x68>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    3dc0:	85 e0       	ldi	r24, 0x05	; 5
    3dc2:	68 9f       	mul	r22, r24
    3dc4:	b0 01       	movw	r22, r0
    3dc6:	11 24       	eor	r1, r1
    3dc8:	da cf       	rjmp	.-76     	; 0x3d7e <move_unit+0x1c>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    3dca:	86 9f       	mul	r24, r22
    3dcc:	b0 01       	movw	r22, r0
    3dce:	11 24       	eor	r1, r1
    3dd0:	85 e0       	ldi	r24, 0x05	; 5
    3dd2:	86 9f       	mul	r24, r22
    3dd4:	90 01       	movw	r18, r0
    3dd6:	87 9f       	mul	r24, r23
    3dd8:	30 0d       	add	r19, r0
    3dda:	11 24       	eor	r1, r1
    3ddc:	69 2f       	mov	r22, r25
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	c9 01       	movw	r24, r18
    3de2:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__divmodhi4>
    3de6:	cb cf       	rjmp	.-106    	; 0x3d7e <move_unit+0x1c>
        unit = MOUSEKEY_MOVE_DELTA;
    3de8:	65 e0       	ldi	r22, 0x05	; 5
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	ce cf       	rjmp	.-100    	; 0x3d8a <move_unit+0x28>
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3dee:	8f e7       	ldi	r24, 0x7F	; 127
    3df0:	08 95       	ret
    3df2:	81 e0       	ldi	r24, 0x01	; 1
}
    3df4:	08 95       	ret

00003df6 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3df6:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    3dfa:	80 ff       	sbrs	r24, 0
    3dfc:	0c c0       	rjmp	.+24     	; 0x3e16 <wheel_unit+0x20>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3dfe:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <mk_wheel_max_speed>
    3e02:	70 e0       	ldi	r23, 0x00	; 0
    3e04:	75 95       	asr	r23
    3e06:	67 95       	ror	r22
    3e08:	75 95       	asr	r23
    3e0a:	67 95       	ror	r22
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3e0c:	61 15       	cp	r22, r1
    3e0e:	71 05       	cpc	r23, r1
    3e10:	49 f1       	breq	.+82     	; 0x3e64 <wheel_unit+0x6e>
    3e12:	86 2f       	mov	r24, r22
    3e14:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
    3e16:	81 ff       	sbrs	r24, 1
    3e18:	06 c0       	rjmp	.+12     	; 0x3e26 <wheel_unit+0x30>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3e1a:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <mk_wheel_max_speed>
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	75 95       	asr	r23
    3e22:	67 95       	ror	r22
    3e24:	f3 cf       	rjmp	.-26     	; 0x3e0c <wheel_unit+0x16>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    3e26:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <mk_wheel_max_speed>
    } else if (mousekey_accel & (1<<2)) {
    3e2a:	82 fd       	sbrc	r24, 2
    3e2c:	0b c0       	rjmp	.+22     	; 0x3e44 <wheel_unit+0x4e>
    } else if (mousekey_repeat == 0) {
    3e2e:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <mousekey_repeat>
    3e32:	99 23       	and	r25, r25
    3e34:	a1 f0       	breq	.+40     	; 0x3e5e <wheel_unit+0x68>
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    3e36:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <mk_wheel_time_to_max>
    3e3a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mk_wheel_max_speed>
    3e3e:	96 17       	cp	r25, r22
    3e40:	38 f0       	brcs	.+14     	; 0x3e50 <wheel_unit+0x5a>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    3e42:	68 2f       	mov	r22, r24
    3e44:	70 e0       	ldi	r23, 0x00	; 0
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3e46:	60 38       	cpi	r22, 0x80	; 128
    3e48:	71 05       	cpc	r23, r1
    3e4a:	00 f3       	brcs	.-64     	; 0x3e0c <wheel_unit+0x16>
    3e4c:	8f e7       	ldi	r24, 0x7F	; 127
    3e4e:	08 95       	ret
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    3e50:	89 9f       	mul	r24, r25
    3e52:	c0 01       	movw	r24, r0
    3e54:	11 24       	eor	r1, r1
    3e56:	70 e0       	ldi	r23, 0x00	; 0
    3e58:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__divmodhi4>
    3e5c:	f4 cf       	rjmp	.-24     	; 0x3e46 <wheel_unit+0x50>
        unit = MOUSEKEY_WHEEL_DELTA;
    3e5e:	61 e0       	ldi	r22, 0x01	; 1
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	d7 cf       	rjmp	.-82     	; 0x3e12 <wheel_unit+0x1c>
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3e64:	81 e0       	ldi	r24, 0x01	; 1
}
    3e66:	08 95       	ret

00003e68 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    3e68:	80 3f       	cpi	r24, 0xF0	; 240
    3e6a:	31 f4       	brne	.+12     	; 0x3e78 <mousekey_on+0x10>
    3e6c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    3e70:	81 95       	neg	r24
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    3e72:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <mouse_report+0x2>
    3e76:	08 95       	ret
    3e78:	81 3f       	cpi	r24, 0xF1	; 241
    3e7a:	19 f4       	brne	.+6      	; 0x3e82 <mousekey_on+0x1a>
    3e7c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    3e80:	f8 cf       	rjmp	.-16     	; 0x3e72 <mousekey_on+0xa>
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    3e82:	82 3f       	cpi	r24, 0xF2	; 242
    3e84:	31 f4       	brne	.+12     	; 0x3e92 <mousekey_on+0x2a>
    3e86:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    3e8a:	81 95       	neg	r24
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    3e8c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mouse_report+0x1>
    3e90:	08 95       	ret
    3e92:	83 3f       	cpi	r24, 0xF3	; 243
    3e94:	19 f4       	brne	.+6      	; 0x3e9c <mousekey_on+0x34>
    3e96:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    3e9a:	f8 cf       	rjmp	.-16     	; 0x3e8c <mousekey_on+0x24>
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    3e9c:	89 3f       	cpi	r24, 0xF9	; 249
    3e9e:	29 f4       	brne	.+10     	; 0x3eaa <mousekey_on+0x42>
    3ea0:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    3ea4:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <mouse_report+0x3>
    3ea8:	08 95       	ret
    3eaa:	8a 3f       	cpi	r24, 0xFA	; 250
    3eac:	21 f4       	brne	.+8      	; 0x3eb6 <mousekey_on+0x4e>
    3eae:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    3eb2:	81 95       	neg	r24
    3eb4:	f7 cf       	rjmp	.-18     	; 0x3ea4 <mousekey_on+0x3c>
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    3eb6:	8b 3f       	cpi	r24, 0xFB	; 251
    3eb8:	31 f4       	brne	.+12     	; 0x3ec6 <mousekey_on+0x5e>
    3eba:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    3ebe:	81 95       	neg	r24
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    3ec0:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <mouse_report+0x4>
    3ec4:	08 95       	ret
    3ec6:	8c 3f       	cpi	r24, 0xFC	; 252
    3ec8:	19 f4       	brne	.+6      	; 0x3ed0 <mousekey_on+0x68>
    3eca:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    3ece:	f8 cf       	rjmp	.-16     	; 0x3ec0 <mousekey_on+0x58>
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    3ed0:	84 3f       	cpi	r24, 0xF4	; 244
    3ed2:	31 f4       	brne	.+12     	; 0x3ee0 <mousekey_on+0x78>
    3ed4:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3ed8:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    3eda:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <mouse_report>
    3ede:	08 95       	ret
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    3ee0:	85 3f       	cpi	r24, 0xF5	; 245
    3ee2:	21 f4       	brne	.+8      	; 0x3eec <mousekey_on+0x84>
    3ee4:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3ee8:	82 60       	ori	r24, 0x02	; 2
    3eea:	f7 cf       	rjmp	.-18     	; 0x3eda <mousekey_on+0x72>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    3eec:	86 3f       	cpi	r24, 0xF6	; 246
    3eee:	21 f4       	brne	.+8      	; 0x3ef8 <mousekey_on+0x90>
    3ef0:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3ef4:	84 60       	ori	r24, 0x04	; 4
    3ef6:	f1 cf       	rjmp	.-30     	; 0x3eda <mousekey_on+0x72>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    3ef8:	87 3f       	cpi	r24, 0xF7	; 247
    3efa:	21 f4       	brne	.+8      	; 0x3f04 <mousekey_on+0x9c>
    3efc:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3f00:	88 60       	ori	r24, 0x08	; 8
    3f02:	eb cf       	rjmp	.-42     	; 0x3eda <mousekey_on+0x72>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    3f04:	88 3f       	cpi	r24, 0xF8	; 248
    3f06:	21 f4       	brne	.+8      	; 0x3f10 <mousekey_on+0xa8>
    3f08:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3f0c:	80 61       	ori	r24, 0x10	; 16
    3f0e:	e5 cf       	rjmp	.-54     	; 0x3eda <mousekey_on+0x72>
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    3f10:	8d 3f       	cpi	r24, 0xFD	; 253
    3f12:	31 f4       	brne	.+12     	; 0x3f20 <mousekey_on+0xb8>
    3f14:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    3f18:	81 60       	ori	r24, 0x01	; 1
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    3f1a:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <mousekey_accel>
}
    3f1e:	08 95       	ret
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    3f20:	8e 3f       	cpi	r24, 0xFE	; 254
    3f22:	21 f4       	brne	.+8      	; 0x3f2c <mousekey_on+0xc4>
    3f24:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    3f28:	82 60       	ori	r24, 0x02	; 2
    3f2a:	f7 cf       	rjmp	.-18     	; 0x3f1a <mousekey_on+0xb2>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    3f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f2e:	b9 f7       	brne	.-18     	; 0x3f1e <mousekey_on+0xb6>
    3f30:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    3f34:	84 60       	ori	r24, 0x04	; 4
    3f36:	f1 cf       	rjmp	.-30     	; 0x3f1a <mousekey_on+0xb2>

00003f38 <mousekey_off>:

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    3f38:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <mouse_report+0x1>
    3f3c:	80 3f       	cpi	r24, 0xF0	; 240
    3f3e:	41 f4       	brne	.+16     	; 0x3f50 <mousekey_off+0x18>
    3f40:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <mouse_report+0x2>
    3f44:	87 fd       	sbrc	r24, 7
    3f46:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <mouse_report+0x2>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3f4a:	99 23       	and	r25, r25
    3f4c:	71 f0       	breq	.+28     	; 0x3f6a <mousekey_off+0x32>
        mousekey_repeat = 0;
}
    3f4e:	08 95       	ret
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    3f50:	81 3f       	cpi	r24, 0xF1	; 241
    3f52:	29 f4       	brne	.+10     	; 0x3f5e <mousekey_off+0x26>
    3f54:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <mouse_report+0x2>
    3f58:	18 16       	cp	r1, r24
    3f5a:	ac f3       	brlt	.-22     	; 0x3f46 <mousekey_off+0xe>
    3f5c:	f6 cf       	rjmp	.-20     	; 0x3f4a <mousekey_off+0x12>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    3f5e:	82 3f       	cpi	r24, 0xF2	; 242
    3f60:	81 f4       	brne	.+32     	; 0x3f82 <mousekey_off+0x4a>
    3f62:	97 ff       	sbrs	r25, 7
    3f64:	f2 cf       	rjmp	.-28     	; 0x3f4a <mousekey_off+0x12>
    3f66:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <mouse_report+0x1>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3f6a:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <mouse_report+0x2>
    3f6e:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <mouse_report+0x3>
    3f72:	89 2b       	or	r24, r25
    3f74:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <mouse_report+0x4>
    3f78:	89 2b       	or	r24, r25
    3f7a:	49 f7       	brne	.-46     	; 0x3f4e <mousekey_off+0x16>
        mousekey_repeat = 0;
    3f7c:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <mousekey_repeat>
}
    3f80:	08 95       	ret
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    3f82:	83 3f       	cpi	r24, 0xF3	; 243
    3f84:	19 f4       	brne	.+6      	; 0x3f8c <mousekey_off+0x54>
    3f86:	19 16       	cp	r1, r25
    3f88:	74 f3       	brlt	.-36     	; 0x3f66 <mousekey_off+0x2e>
    3f8a:	df cf       	rjmp	.-66     	; 0x3f4a <mousekey_off+0x12>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    3f8c:	89 3f       	cpi	r24, 0xF9	; 249
    3f8e:	39 f4       	brne	.+14     	; 0x3f9e <mousekey_off+0x66>
    3f90:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <mouse_report+0x3>
    3f94:	18 16       	cp	r1, r24
    3f96:	cc f6       	brge	.-78     	; 0x3f4a <mousekey_off+0x12>
    3f98:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <mouse_report+0x3>
    3f9c:	d6 cf       	rjmp	.-84     	; 0x3f4a <mousekey_off+0x12>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    3f9e:	8a 3f       	cpi	r24, 0xFA	; 250
    3fa0:	29 f4       	brne	.+10     	; 0x3fac <mousekey_off+0x74>
    3fa2:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <mouse_report+0x3>
    3fa6:	87 ff       	sbrs	r24, 7
    3fa8:	d0 cf       	rjmp	.-96     	; 0x3f4a <mousekey_off+0x12>
    3faa:	f6 cf       	rjmp	.-20     	; 0x3f98 <mousekey_off+0x60>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    3fac:	8b 3f       	cpi	r24, 0xFB	; 251
    3fae:	39 f4       	brne	.+14     	; 0x3fbe <mousekey_off+0x86>
    3fb0:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mouse_report+0x4>
    3fb4:	87 ff       	sbrs	r24, 7
    3fb6:	c9 cf       	rjmp	.-110    	; 0x3f4a <mousekey_off+0x12>
    3fb8:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <mouse_report+0x4>
    3fbc:	c6 cf       	rjmp	.-116    	; 0x3f4a <mousekey_off+0x12>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    3fbe:	8c 3f       	cpi	r24, 0xFC	; 252
    3fc0:	29 f4       	brne	.+10     	; 0x3fcc <mousekey_off+0x94>
    3fc2:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mouse_report+0x4>
    3fc6:	18 16       	cp	r1, r24
    3fc8:	bc f3       	brlt	.-18     	; 0x3fb8 <mousekey_off+0x80>
    3fca:	bf cf       	rjmp	.-130    	; 0x3f4a <mousekey_off+0x12>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    3fcc:	84 3f       	cpi	r24, 0xF4	; 244
    3fce:	31 f4       	brne	.+12     	; 0x3fdc <mousekey_off+0xa4>
    3fd0:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3fd4:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    3fd6:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <mouse_report>
    3fda:	b7 cf       	rjmp	.-146    	; 0x3f4a <mousekey_off+0x12>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    3fdc:	85 3f       	cpi	r24, 0xF5	; 245
    3fde:	21 f4       	brne	.+8      	; 0x3fe8 <mousekey_off+0xb0>
    3fe0:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3fe4:	8d 7f       	andi	r24, 0xFD	; 253
    3fe6:	f7 cf       	rjmp	.-18     	; 0x3fd6 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    3fe8:	86 3f       	cpi	r24, 0xF6	; 246
    3fea:	21 f4       	brne	.+8      	; 0x3ff4 <mousekey_off+0xbc>
    3fec:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3ff0:	8b 7f       	andi	r24, 0xFB	; 251
    3ff2:	f1 cf       	rjmp	.-30     	; 0x3fd6 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    3ff4:	87 3f       	cpi	r24, 0xF7	; 247
    3ff6:	21 f4       	brne	.+8      	; 0x4000 <mousekey_off+0xc8>
    3ff8:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    3ffc:	87 7f       	andi	r24, 0xF7	; 247
    3ffe:	eb cf       	rjmp	.-42     	; 0x3fd6 <mousekey_off+0x9e>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4000:	88 3f       	cpi	r24, 0xF8	; 248
    4002:	21 f4       	brne	.+8      	; 0x400c <mousekey_off+0xd4>
    4004:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    4008:	8f 7e       	andi	r24, 0xEF	; 239
    400a:	e5 cf       	rjmp	.-54     	; 0x3fd6 <mousekey_off+0x9e>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    400c:	8d 3f       	cpi	r24, 0xFD	; 253
    400e:	31 f4       	brne	.+12     	; 0x401c <mousekey_off+0xe4>
    4010:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    4014:	8e 7f       	andi	r24, 0xFE	; 254
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4016:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <mousekey_accel>
    401a:	97 cf       	rjmp	.-210    	; 0x3f4a <mousekey_off+0x12>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    401c:	8e 3f       	cpi	r24, 0xFE	; 254
    401e:	21 f4       	brne	.+8      	; 0x4028 <mousekey_off+0xf0>
    4020:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    4024:	8d 7f       	andi	r24, 0xFD	; 253
    4026:	f7 cf       	rjmp	.-18     	; 0x4016 <mousekey_off+0xde>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4028:	8f 3f       	cpi	r24, 0xFF	; 255
    402a:	09 f0       	breq	.+2      	; 0x402e <mousekey_off+0xf6>
    402c:	8e cf       	rjmp	.-228    	; 0x3f4a <mousekey_off+0x12>
    402e:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    4032:	8b 7f       	andi	r24, 0xFB	; 251
    4034:	f0 cf       	rjmp	.-32     	; 0x4016 <mousekey_off+0xde>

00004036 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4036:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    403a:	83 ff       	sbrs	r24, 3
    403c:	7e c0       	rjmp	.+252    	; 0x413a <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    403e:	8b e2       	ldi	r24, 0x2B	; 43
    4040:	94 e0       	ldi	r25, 0x04	; 4
    4042:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    phex(mouse_report.buttons); print("|");
    4046:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <mouse_report>
    404a:	1f 92       	push	r1
    404c:	8f 93       	push	r24
    404e:	86 e2       	ldi	r24, 0x26	; 38
    4050:	94 e0       	ldi	r25, 0x04	; 4
    4052:	9f 93       	push	r25
    4054:	8f 93       	push	r24
    4056:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    405a:	84 e2       	ldi	r24, 0x24	; 36
    405c:	94 e0       	ldi	r25, 0x04	; 4
    405e:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print_decs(mouse_report.x); print(" ");
    4062:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <mouse_report+0x1>
    4066:	28 2f       	mov	r18, r24
    4068:	08 2e       	mov	r0, r24
    406a:	00 0c       	add	r0, r0
    406c:	33 0b       	sbc	r19, r19
    406e:	3f 93       	push	r19
    4070:	8f 93       	push	r24
    4072:	81 e2       	ldi	r24, 0x21	; 33
    4074:	94 e0       	ldi	r25, 0x04	; 4
    4076:	9f 93       	push	r25
    4078:	8f 93       	push	r24
    407a:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    407e:	8f e1       	ldi	r24, 0x1F	; 31
    4080:	94 e0       	ldi	r25, 0x04	; 4
    4082:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print_decs(mouse_report.y); print(" ");
    4086:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <mouse_report+0x2>
    408a:	28 2f       	mov	r18, r24
    408c:	08 2e       	mov	r0, r24
    408e:	00 0c       	add	r0, r0
    4090:	33 0b       	sbc	r19, r19
    4092:	3f 93       	push	r19
    4094:	8f 93       	push	r24
    4096:	8c e1       	ldi	r24, 0x1C	; 28
    4098:	94 e0       	ldi	r25, 0x04	; 4
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    40a2:	8a e1       	ldi	r24, 0x1A	; 26
    40a4:	94 e0       	ldi	r25, 0x04	; 4
    40a6:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print_decs(mouse_report.v); print(" ");
    40aa:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <mouse_report+0x3>
    40ae:	28 2f       	mov	r18, r24
    40b0:	08 2e       	mov	r0, r24
    40b2:	00 0c       	add	r0, r0
    40b4:	33 0b       	sbc	r19, r19
    40b6:	3f 93       	push	r19
    40b8:	8f 93       	push	r24
    40ba:	87 e1       	ldi	r24, 0x17	; 23
    40bc:	94 e0       	ldi	r25, 0x04	; 4
    40be:	9f 93       	push	r25
    40c0:	8f 93       	push	r24
    40c2:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    40c6:	85 e1       	ldi	r24, 0x15	; 21
    40c8:	94 e0       	ldi	r25, 0x04	; 4
    40ca:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print_decs(mouse_report.h); print("](");
    40ce:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mouse_report+0x4>
    40d2:	28 2f       	mov	r18, r24
    40d4:	08 2e       	mov	r0, r24
    40d6:	00 0c       	add	r0, r0
    40d8:	33 0b       	sbc	r19, r19
    40da:	3f 93       	push	r19
    40dc:	8f 93       	push	r24
    40de:	82 e1       	ldi	r24, 0x12	; 18
    40e0:	94 e0       	ldi	r25, 0x04	; 4
    40e2:	9f 93       	push	r25
    40e4:	8f 93       	push	r24
    40e6:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    40ea:	8f e0       	ldi	r24, 0x0F	; 15
    40ec:	94 e0       	ldi	r25, 0x04	; 4
    40ee:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print_dec(mousekey_repeat); print("/");
    40f2:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <mousekey_repeat>
    40f6:	1f 92       	push	r1
    40f8:	8f 93       	push	r24
    40fa:	8c e0       	ldi	r24, 0x0C	; 12
    40fc:	94 e0       	ldi	r25, 0x04	; 4
    40fe:	9f 93       	push	r25
    4100:	8f 93       	push	r24
    4102:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    4106:	8a e0       	ldi	r24, 0x0A	; 10
    4108:	94 e0       	ldi	r25, 0x04	; 4
    410a:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print_dec(mousekey_accel); print(")\n");
    410e:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <mousekey_accel>
    4112:	1f 92       	push	r1
    4114:	8f 93       	push	r24
    4116:	87 e0       	ldi	r24, 0x07	; 7
    4118:	94 e0       	ldi	r25, 0x04	; 4
    411a:	9f 93       	push	r25
    411c:	8f 93       	push	r24
    411e:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    4122:	84 e0       	ldi	r24, 0x04	; 4
    4124:	94 e0       	ldi	r25, 0x04	; 4
    4126:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    412a:	8d b7       	in	r24, 0x3d	; 61
    412c:	9e b7       	in	r25, 0x3e	; 62
    412e:	4c 96       	adiw	r24, 0x1c	; 28
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	f8 94       	cli
    4134:	9e bf       	out	0x3e, r25	; 62
    4136:	0f be       	out	0x3f, r0	; 63
    4138:	8d bf       	out	0x3d, r24	; 61
    host_mouse_send(&mouse_report);
    413a:	8b ed       	ldi	r24, 0xDB	; 219
    413c:	93 e0       	ldi	r25, 0x03	; 3
    413e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <host_mouse_send>
    last_timer = timer_read();
    4142:	0e 94 77 1d 	call	0x3aee	; 0x3aee <timer_read>
    4146:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <last_timer+0x1>
    414a:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <last_timer>
}
    414e:	08 95       	ret

00004150 <mousekey_task>:
{
    4150:	1f 93       	push	r17
    4152:	cf 93       	push	r28
    4154:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4156:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <last_timer>
    415a:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <last_timer+0x1>
    415e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <timer_elapsed>
    4162:	ac 01       	movw	r20, r24
    4164:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <mousekey_repeat>
    4168:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <mk_interval>
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	91 11       	cpse	r25, r1
    4170:	06 c0       	rjmp	.+12     	; 0x417e <mousekey_task+0x2e>
    4172:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <mk_delay>
    4176:	8a e0       	ldi	r24, 0x0A	; 10
    4178:	28 9f       	mul	r18, r24
    417a:	90 01       	movw	r18, r0
    417c:	11 24       	eor	r1, r1
    417e:	42 17       	cp	r20, r18
    4180:	53 07       	cpc	r21, r19
    4182:	78 f0       	brcs	.+30     	; 0x41a2 <mousekey_task+0x52>
    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4184:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <mouse_report+0x1>
    4188:	c0 91 dd 03 	lds	r28, 0x03DD	; 0x8003dd <mouse_report+0x2>
    418c:	d0 91 de 03 	lds	r29, 0x03DE	; 0x8003de <mouse_report+0x3>
    4190:	10 91 df 03 	lds	r17, 0x03DF	; 0x8003df <mouse_report+0x4>
    4194:	21 11       	cpse	r18, r1
    4196:	09 c0       	rjmp	.+18     	; 0x41aa <mousekey_task+0x5a>
    4198:	8c 2f       	mov	r24, r28
    419a:	8d 2b       	or	r24, r29
    419c:	81 2b       	or	r24, r17
    419e:	09 f0       	breq	.+2      	; 0x41a2 <mousekey_task+0x52>
    41a0:	74 c0       	rjmp	.+232    	; 0x428a <mousekey_task+0x13a>
}
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	1f 91       	pop	r17
    41a8:	08 95       	ret
    if (mousekey_repeat != UINT8_MAX)
    41aa:	9f 3f       	cpi	r25, 0xFF	; 255
    41ac:	19 f0       	breq	.+6      	; 0x41b4 <mousekey_task+0x64>
        mousekey_repeat++;
    41ae:	9f 5f       	subi	r25, 0xFF	; 255
    41b0:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <mousekey_repeat>
    if (mouse_report.x > 0) mouse_report.x = move_unit();
    41b4:	12 16       	cp	r1, r18
    41b6:	24 f4       	brge	.+8      	; 0x41c0 <mousekey_task+0x70>
    41b8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    41bc:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mouse_report+0x1>
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    41c0:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <mouse_report+0x1>
    41c4:	87 ff       	sbrs	r24, 7
    41c6:	05 c0       	rjmp	.+10     	; 0x41d2 <mousekey_task+0x82>
    41c8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    41cc:	81 95       	neg	r24
    41ce:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <mouse_report+0x1>
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    41d2:	1c 16       	cp	r1, r28
    41d4:	24 f4       	brge	.+8      	; 0x41de <mousekey_task+0x8e>
    41d6:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    41da:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <mouse_report+0x2>
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    41de:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <mouse_report+0x2>
    41e2:	87 ff       	sbrs	r24, 7
    41e4:	05 c0       	rjmp	.+10     	; 0x41f0 <mousekey_task+0xa0>
    41e6:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <move_unit>
    41ea:	81 95       	neg	r24
    41ec:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <mouse_report+0x2>
    if (mouse_report.x && mouse_report.y) {
    41f0:	60 91 dc 03 	lds	r22, 0x03DC	; 0x8003dc <mouse_report+0x1>
    41f4:	66 23       	and	r22, r22
    41f6:	31 f1       	breq	.+76     	; 0x4244 <mousekey_task+0xf4>
    41f8:	c0 91 dd 03 	lds	r28, 0x03DD	; 0x8003dd <mouse_report+0x2>
    41fc:	cc 23       	and	r28, r28
    41fe:	11 f1       	breq	.+68     	; 0x4244 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4200:	06 2e       	mov	r0, r22
    4202:	00 0c       	add	r0, r0
    4204:	77 0b       	sbc	r23, r23
    4206:	88 0b       	sbc	r24, r24
    4208:	99 0b       	sbc	r25, r25
    420a:	0e 94 56 25 	call	0x4aac	; 0x4aac <__floatsisf>
    420e:	23 e3       	ldi	r18, 0x33	; 51
    4210:	33 e3       	ldi	r19, 0x33	; 51
    4212:	43 e3       	ldi	r20, 0x33	; 51
    4214:	5f e3       	ldi	r21, 0x3F	; 63
    4216:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <__mulsf3>
    421a:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__fixsfsi>
    421e:	60 93 dc 03 	sts	0x03DC, r22	; 0x8003dc <mouse_report+0x1>
        mouse_report.y *= 0.7;
    4222:	6c 2f       	mov	r22, r28
    4224:	cc 0f       	add	r28, r28
    4226:	77 0b       	sbc	r23, r23
    4228:	88 0b       	sbc	r24, r24
    422a:	99 0b       	sbc	r25, r25
    422c:	0e 94 56 25 	call	0x4aac	; 0x4aac <__floatsisf>
    4230:	23 e3       	ldi	r18, 0x33	; 51
    4232:	33 e3       	ldi	r19, 0x33	; 51
    4234:	43 e3       	ldi	r20, 0x33	; 51
    4236:	5f e3       	ldi	r21, 0x3F	; 63
    4238:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <__mulsf3>
    423c:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__fixsfsi>
    4240:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <mouse_report+0x2>
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4244:	1d 16       	cp	r1, r29
    4246:	24 f4       	brge	.+8      	; 0x4250 <mousekey_task+0x100>
    4248:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    424c:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <mouse_report+0x3>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4250:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <mouse_report+0x3>
    4254:	87 ff       	sbrs	r24, 7
    4256:	05 c0       	rjmp	.+10     	; 0x4262 <mousekey_task+0x112>
    4258:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    425c:	81 95       	neg	r24
    425e:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <mouse_report+0x3>
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4262:	11 16       	cp	r1, r17
    4264:	24 f4       	brge	.+8      	; 0x426e <mousekey_task+0x11e>
    4266:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    426a:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <mouse_report+0x4>
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    426e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <mouse_report+0x4>
    4272:	87 ff       	sbrs	r24, 7
    4274:	05 c0       	rjmp	.+10     	; 0x4280 <mousekey_task+0x130>
    4276:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <wheel_unit>
    427a:	81 95       	neg	r24
    427c:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <mouse_report+0x4>
}
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	1f 91       	pop	r17
    mousekey_send();
    4286:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <mousekey_send>
    if (mousekey_repeat != UINT8_MAX)
    428a:	9f 3f       	cpi	r25, 0xFF	; 255
    428c:	09 f0       	breq	.+2      	; 0x4290 <mousekey_task+0x140>
    428e:	8f cf       	rjmp	.-226    	; 0x41ae <mousekey_task+0x5e>
    4290:	a0 cf       	rjmp	.-192    	; 0x41d2 <mousekey_task+0x82>

00004292 <mousekey_clear>:
    mouse_report = (report_mouse_t){};
    4292:	85 e0       	ldi	r24, 0x05	; 5
    4294:	eb ed       	ldi	r30, 0xDB	; 219
    4296:	f3 e0       	ldi	r31, 0x03	; 3
    4298:	df 01       	movw	r26, r30
    429a:	1d 92       	st	X+, r1
    429c:	8a 95       	dec	r24
    429e:	e9 f7       	brne	.-6      	; 0x429a <mousekey_clear+0x8>
    mousekey_repeat = 0;
    42a0:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <mousekey_repeat>
    mousekey_accel = 0;
    42a4:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <mousekey_accel>
}
    42a8:	08 95       	ret

000042aa <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    42aa:	8e e4       	ldi	r24, 0x4E	; 78
    42ac:	96 e0       	ldi	r25, 0x06	; 6
    42ae:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    42b2:	1f 92       	push	r1
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	8f 93       	push	r24
    42b8:	1f 92       	push	r1
    42ba:	85 e0       	ldi	r24, 0x05	; 5
    42bc:	8f 93       	push	r24
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	96 e0       	ldi	r25, 0x06	; 6
    42c2:	9f 93       	push	r25
    42c4:	8f 93       	push	r24
    42c6:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	0f 90       	pop	r0
    42d0:	0f 90       	pop	r0
    42d2:	0f 90       	pop	r0
    42d4:	0f 90       	pop	r0
    42d6:	08 95       	ret

000042d8 <mousekey_param_inc>:
    switch (param) {
    42d8:	83 30       	cpi	r24, 0x03	; 3
    42da:	09 f4       	brne	.+2      	; 0x42de <mousekey_param_inc+0x6>
    42dc:	45 c0       	rjmp	.+138    	; 0x4368 <mousekey_param_inc+0x90>
    42de:	28 f4       	brcc	.+10     	; 0x42ea <mousekey_param_inc+0x12>
    42e0:	81 30       	cpi	r24, 0x01	; 1
    42e2:	61 f0       	breq	.+24     	; 0x42fc <mousekey_param_inc+0x24>
    42e4:	82 30       	cpi	r24, 0x02	; 2
    42e6:	49 f1       	breq	.+82     	; 0x433a <mousekey_param_inc+0x62>
    42e8:	08 95       	ret
    42ea:	85 30       	cpi	r24, 0x05	; 5
    42ec:	09 f4       	brne	.+2      	; 0x42f0 <mousekey_param_inc+0x18>
    42ee:	6a c0       	rjmp	.+212    	; 0x43c4 <mousekey_param_inc+0xec>
    42f0:	08 f4       	brcc	.+2      	; 0x42f4 <mousekey_param_inc+0x1c>
    42f2:	51 c0       	rjmp	.+162    	; 0x4396 <mousekey_param_inc+0xbe>
    42f4:	86 30       	cpi	r24, 0x06	; 6
    42f6:	09 f4       	brne	.+2      	; 0x42fa <mousekey_param_inc+0x22>
    42f8:	7c c0       	rjmp	.+248    	; 0x43f2 <mousekey_param_inc+0x11a>
    42fa:	08 95       	ret
            if (mk_delay + inc < UINT8_MAX)
    42fc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <mk_delay>
    4300:	48 2f       	mov	r20, r24
    4302:	46 0f       	add	r20, r22
    4304:	55 27       	eor	r21, r21
    4306:	55 1f       	adc	r21, r21
    4308:	4f 3f       	cpi	r20, 0xFF	; 255
    430a:	51 05       	cpc	r21, r1
    430c:	94 f4       	brge	.+36     	; 0x4332 <mousekey_param_inc+0x5a>
                mk_delay += inc;
    430e:	68 0f       	add	r22, r24
    4310:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4314:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <mk_delay>
    4318:	1f 92       	push	r1
    431a:	8f 93       	push	r24
    431c:	89 e3       	ldi	r24, 0x39	; 57
    431e:	95 e0       	ldi	r25, 0x05	; 5
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4320:	9f 93       	push	r25
    4322:	8f 93       	push	r24
    4324:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            break;
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
}
    4330:	08 95       	ret
                mk_delay = UINT8_MAX;
    4332:	8f ef       	ldi	r24, 0xFF	; 255
    4334:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <mk_delay>
    4338:	ed cf       	rjmp	.-38     	; 0x4314 <mousekey_param_inc+0x3c>
            if (mk_interval + inc < UINT8_MAX)
    433a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mk_interval>
    433e:	48 2f       	mov	r20, r24
    4340:	46 0f       	add	r20, r22
    4342:	55 27       	eor	r21, r21
    4344:	55 1f       	adc	r21, r21
    4346:	4f 3f       	cpi	r20, 0xFF	; 255
    4348:	51 05       	cpc	r21, r1
    434a:	54 f4       	brge	.+20     	; 0x4360 <mousekey_param_inc+0x88>
                mk_interval += inc;
    434c:	68 0f       	add	r22, r24
    434e:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4352:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mk_interval>
    4356:	1f 92       	push	r1
    4358:	8f 93       	push	r24
    435a:	87 e2       	ldi	r24, 0x27	; 39
    435c:	95 e0       	ldi	r25, 0x05	; 5
    435e:	e0 cf       	rjmp	.-64     	; 0x4320 <mousekey_param_inc+0x48>
                mk_interval = UINT8_MAX;
    4360:	8f ef       	ldi	r24, 0xFF	; 255
    4362:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <mk_interval>
    4366:	f5 cf       	rjmp	.-22     	; 0x4352 <mousekey_param_inc+0x7a>
            if (mk_max_speed + inc < UINT8_MAX)
    4368:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <mk_max_speed>
    436c:	48 2f       	mov	r20, r24
    436e:	46 0f       	add	r20, r22
    4370:	55 27       	eor	r21, r21
    4372:	55 1f       	adc	r21, r21
    4374:	4f 3f       	cpi	r20, 0xFF	; 255
    4376:	51 05       	cpc	r21, r1
    4378:	54 f4       	brge	.+20     	; 0x438e <mousekey_param_inc+0xb6>
                mk_max_speed += inc;
    437a:	68 0f       	add	r22, r24
    437c:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    4380:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <mk_max_speed>
    4384:	1f 92       	push	r1
    4386:	8f 93       	push	r24
    4388:	84 e1       	ldi	r24, 0x14	; 20
    438a:	95 e0       	ldi	r25, 0x05	; 5
    438c:	c9 cf       	rjmp	.-110    	; 0x4320 <mousekey_param_inc+0x48>
                mk_max_speed = UINT8_MAX;
    438e:	8f ef       	ldi	r24, 0xFF	; 255
    4390:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <mk_max_speed>
    4394:	f5 cf       	rjmp	.-22     	; 0x4380 <mousekey_param_inc+0xa8>
            if (mk_time_to_max + inc < UINT8_MAX)
    4396:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <mk_time_to_max>
    439a:	48 2f       	mov	r20, r24
    439c:	46 0f       	add	r20, r22
    439e:	55 27       	eor	r21, r21
    43a0:	55 1f       	adc	r21, r21
    43a2:	4f 3f       	cpi	r20, 0xFF	; 255
    43a4:	51 05       	cpc	r21, r1
    43a6:	54 f4       	brge	.+20     	; 0x43bc <mousekey_param_inc+0xe4>
                mk_time_to_max += inc;
    43a8:	68 0f       	add	r22, r24
    43aa:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    43ae:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <mk_time_to_max>
    43b2:	1f 92       	push	r1
    43b4:	8f 93       	push	r24
    43b6:	8f ef       	ldi	r24, 0xFF	; 255
    43b8:	94 e0       	ldi	r25, 0x04	; 4
    43ba:	b2 cf       	rjmp	.-156    	; 0x4320 <mousekey_param_inc+0x48>
                mk_time_to_max = UINT8_MAX;
    43bc:	8f ef       	ldi	r24, 0xFF	; 255
    43be:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <mk_time_to_max>
    43c2:	f5 cf       	rjmp	.-22     	; 0x43ae <mousekey_param_inc+0xd6>
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    43c4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mk_wheel_max_speed>
    43c8:	48 2f       	mov	r20, r24
    43ca:	46 0f       	add	r20, r22
    43cc:	55 27       	eor	r21, r21
    43ce:	55 1f       	adc	r21, r21
    43d0:	4f 3f       	cpi	r20, 0xFF	; 255
    43d2:	51 05       	cpc	r21, r1
    43d4:	54 f4       	brge	.+20     	; 0x43ea <mousekey_param_inc+0x112>
                mk_wheel_max_speed += inc;
    43d6:	68 0f       	add	r22, r24
    43d8:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    43dc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mk_wheel_max_speed>
    43e0:	1f 92       	push	r1
    43e2:	8f 93       	push	r24
    43e4:	86 ee       	ldi	r24, 0xE6	; 230
    43e6:	94 e0       	ldi	r25, 0x04	; 4
    43e8:	9b cf       	rjmp	.-202    	; 0x4320 <mousekey_param_inc+0x48>
                mk_wheel_max_speed = UINT8_MAX;
    43ea:	8f ef       	ldi	r24, 0xFF	; 255
    43ec:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mk_wheel_max_speed>
    43f0:	f5 cf       	rjmp	.-22     	; 0x43dc <mousekey_param_inc+0x104>
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    43f2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_wheel_time_to_max>
    43f6:	48 2f       	mov	r20, r24
    43f8:	46 0f       	add	r20, r22
    43fa:	55 27       	eor	r21, r21
    43fc:	55 1f       	adc	r21, r21
    43fe:	4f 3f       	cpi	r20, 0xFF	; 255
    4400:	51 05       	cpc	r21, r1
    4402:	54 f4       	brge	.+20     	; 0x4418 <mousekey_param_inc+0x140>
                mk_wheel_time_to_max += inc;
    4404:	68 0f       	add	r22, r24
    4406:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    440a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_wheel_time_to_max>
    440e:	1f 92       	push	r1
    4410:	8f 93       	push	r24
    4412:	8b ec       	ldi	r24, 0xCB	; 203
    4414:	94 e0       	ldi	r25, 0x04	; 4
    4416:	84 cf       	rjmp	.-248    	; 0x4320 <mousekey_param_inc+0x48>
                mk_wheel_time_to_max = UINT8_MAX;
    4418:	8f ef       	ldi	r24, 0xFF	; 255
    441a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_wheel_time_to_max>
    441e:	f5 cf       	rjmp	.-22     	; 0x440a <mousekey_param_inc+0x132>

00004420 <mousekey_param_dec>:
    switch (param) {
    4420:	83 30       	cpi	r24, 0x03	; 3
    4422:	c9 f1       	breq	.+114    	; 0x4496 <mousekey_param_dec+0x76>
    4424:	28 f4       	brcc	.+10     	; 0x4430 <mousekey_param_dec+0x10>
    4426:	81 30       	cpi	r24, 0x01	; 1
    4428:	61 f0       	breq	.+24     	; 0x4442 <mousekey_param_dec+0x22>
    442a:	82 30       	cpi	r24, 0x02	; 2
    442c:	19 f1       	breq	.+70     	; 0x4474 <mousekey_param_dec+0x54>
    442e:	08 95       	ret
    4430:	85 30       	cpi	r24, 0x05	; 5
    4432:	09 f4       	brne	.+2      	; 0x4436 <mousekey_param_dec+0x16>
    4434:	52 c0       	rjmp	.+164    	; 0x44da <mousekey_param_dec+0xba>
    4436:	08 f4       	brcc	.+2      	; 0x443a <mousekey_param_dec+0x1a>
    4438:	3f c0       	rjmp	.+126    	; 0x44b8 <mousekey_param_dec+0x98>
    443a:	86 30       	cpi	r24, 0x06	; 6
    443c:	09 f4       	brne	.+2      	; 0x4440 <mousekey_param_dec+0x20>
    443e:	5e c0       	rjmp	.+188    	; 0x44fc <mousekey_param_dec+0xdc>
    4440:	08 95       	ret
            if (mk_delay > dec)
    4442:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <mk_delay>
    4446:	68 17       	cp	r22, r24
    4448:	90 f4       	brcc	.+36     	; 0x446e <mousekey_param_dec+0x4e>
                mk_delay -= dec;
    444a:	86 1b       	sub	r24, r22
    444c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <mk_delay>
            PRINT_SET_VAL(mk_delay);
    4450:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <mk_delay>
    4454:	1f 92       	push	r1
    4456:	8f 93       	push	r24
    4458:	8c eb       	ldi	r24, 0xBC	; 188
    445a:	94 e0       	ldi	r25, 0x04	; 4
            PRINT_SET_VAL(mk_wheel_time_to_max);
    445c:	9f 93       	push	r25
    445e:	8f 93       	push	r24
    4460:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            break;
    4464:	0f 90       	pop	r0
    4466:	0f 90       	pop	r0
    4468:	0f 90       	pop	r0
    446a:	0f 90       	pop	r0
}
    446c:	08 95       	ret
                mk_delay = 0;
    446e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <mk_delay>
    4472:	ee cf       	rjmp	.-36     	; 0x4450 <mousekey_param_dec+0x30>
            if (mk_interval > dec)
    4474:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mk_interval>
    4478:	68 17       	cp	r22, r24
    447a:	50 f4       	brcc	.+20     	; 0x4490 <mousekey_param_dec+0x70>
                mk_interval -= dec;
    447c:	86 1b       	sub	r24, r22
    447e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <mk_interval>
            PRINT_SET_VAL(mk_interval);
    4482:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mk_interval>
    4486:	1f 92       	push	r1
    4488:	8f 93       	push	r24
    448a:	8a ea       	ldi	r24, 0xAA	; 170
    448c:	94 e0       	ldi	r25, 0x04	; 4
    448e:	e6 cf       	rjmp	.-52     	; 0x445c <mousekey_param_dec+0x3c>
                mk_interval = 0;
    4490:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <mk_interval>
    4494:	f6 cf       	rjmp	.-20     	; 0x4482 <mousekey_param_dec+0x62>
            if (mk_max_speed > dec)
    4496:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <mk_max_speed>
    449a:	68 17       	cp	r22, r24
    449c:	50 f4       	brcc	.+20     	; 0x44b2 <mousekey_param_dec+0x92>
                mk_max_speed -= dec;
    449e:	86 1b       	sub	r24, r22
    44a0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <mk_max_speed>
            PRINT_SET_VAL(mk_max_speed);
    44a4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <mk_max_speed>
    44a8:	1f 92       	push	r1
    44aa:	8f 93       	push	r24
    44ac:	87 e9       	ldi	r24, 0x97	; 151
    44ae:	94 e0       	ldi	r25, 0x04	; 4
    44b0:	d5 cf       	rjmp	.-86     	; 0x445c <mousekey_param_dec+0x3c>
                mk_max_speed = 0;
    44b2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <mk_max_speed>
    44b6:	f6 cf       	rjmp	.-20     	; 0x44a4 <mousekey_param_dec+0x84>
            if (mk_time_to_max > dec)
    44b8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <mk_time_to_max>
    44bc:	68 17       	cp	r22, r24
    44be:	50 f4       	brcc	.+20     	; 0x44d4 <mousekey_param_dec+0xb4>
                mk_time_to_max -= dec;
    44c0:	86 1b       	sub	r24, r22
    44c2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <mk_time_to_max>
            PRINT_SET_VAL(mk_time_to_max);
    44c6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <mk_time_to_max>
    44ca:	1f 92       	push	r1
    44cc:	8f 93       	push	r24
    44ce:	82 e8       	ldi	r24, 0x82	; 130
    44d0:	94 e0       	ldi	r25, 0x04	; 4
    44d2:	c4 cf       	rjmp	.-120    	; 0x445c <mousekey_param_dec+0x3c>
                mk_time_to_max = 0;
    44d4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <mk_time_to_max>
    44d8:	f6 cf       	rjmp	.-20     	; 0x44c6 <mousekey_param_dec+0xa6>
            if (mk_wheel_max_speed > dec)
    44da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mk_wheel_max_speed>
    44de:	68 17       	cp	r22, r24
    44e0:	50 f4       	brcc	.+20     	; 0x44f6 <mousekey_param_dec+0xd6>
                mk_wheel_max_speed -= dec;
    44e2:	86 1b       	sub	r24, r22
    44e4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mk_wheel_max_speed>
            PRINT_SET_VAL(mk_wheel_max_speed);
    44e8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mk_wheel_max_speed>
    44ec:	1f 92       	push	r1
    44ee:	8f 93       	push	r24
    44f0:	89 e6       	ldi	r24, 0x69	; 105
    44f2:	94 e0       	ldi	r25, 0x04	; 4
    44f4:	b3 cf       	rjmp	.-154    	; 0x445c <mousekey_param_dec+0x3c>
                mk_wheel_max_speed = 0;
    44f6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <mk_wheel_max_speed>
    44fa:	f6 cf       	rjmp	.-20     	; 0x44e8 <mousekey_param_dec+0xc8>
            if (mk_wheel_time_to_max > dec)
    44fc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_wheel_time_to_max>
    4500:	68 17       	cp	r22, r24
    4502:	50 f4       	brcc	.+20     	; 0x4518 <mousekey_param_dec+0xf8>
                mk_wheel_time_to_max -= dec;
    4504:	86 1b       	sub	r24, r22
    4506:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_wheel_time_to_max>
            PRINT_SET_VAL(mk_wheel_time_to_max);
    450a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_wheel_time_to_max>
    450e:	1f 92       	push	r1
    4510:	8f 93       	push	r24
    4512:	8e e4       	ldi	r24, 0x4E	; 78
    4514:	94 e0       	ldi	r25, 0x04	; 4
    4516:	a2 cf       	rjmp	.-188    	; 0x445c <mousekey_param_dec+0x3c>
                mk_wheel_time_to_max = 0;
    4518:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <mk_wheel_time_to_max>
    451c:	f6 cf       	rjmp	.-20     	; 0x450a <mousekey_param_dec+0xea>

0000451e <switch_default_layer>:
    return 0;
}
#endif

static void switch_default_layer(uint8_t layer)
{
    451e:	cf 93       	push	r28
    4520:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4522:	1f 92       	push	r1
    4524:	8f 93       	push	r24
    4526:	83 e5       	ldi	r24, 0x53	; 83
    4528:	97 e0       	ldi	r25, 0x07	; 7
    452a:	9f 93       	push	r25
    452c:	8f 93       	push	r24
    452e:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    default_layer_set(1UL<<layer);
    4532:	61 e0       	ldi	r22, 0x01	; 1
    4534:	70 e0       	ldi	r23, 0x00	; 0
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	04 c0       	rjmp	.+8      	; 0x4544 <switch_default_layer+0x26>
    453c:	66 0f       	add	r22, r22
    453e:	77 1f       	adc	r23, r23
    4540:	88 1f       	adc	r24, r24
    4542:	99 1f       	adc	r25, r25
    4544:	ca 95       	dec	r28
    4546:	d2 f7       	brpl	.-12     	; 0x453c <switch_default_layer+0x1e>
    4548:	0e 94 20 1a 	call	0x3440	; 0x3440 <default_layer_set>
    clear_keyboard();
    454c:	0f 90       	pop	r0
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
}
    4554:	cf 91       	pop	r28
    clear_keyboard();
    4556:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <clear_keyboard>

0000455a <command_common>:
{
    455a:	cf 93       	push	r28
    switch (code) {
    455c:	87 32       	cpi	r24, 0x27	; 39
    455e:	08 f0       	brcs	.+2      	; 0x4562 <command_common+0x8>
    4560:	50 c0       	rjmp	.+160    	; 0x4602 <command_common+0xa8>
    4562:	8e 31       	cpi	r24, 0x1E	; 30
    4564:	08 f0       	brcs	.+2      	; 0x4568 <command_common+0xe>
    4566:	16 c1       	rjmp	.+556    	; 0x4794 <command_common+0x23a>
    4568:	80 31       	cpi	r24, 0x10	; 16
    456a:	09 f4       	brne	.+2      	; 0x456e <command_common+0x14>
    456c:	a8 c0       	rjmp	.+336    	; 0x46be <command_common+0x164>
    456e:	f8 f4       	brcc	.+62     	; 0x45ae <command_common+0x54>
    4570:	87 30       	cpi	r24, 0x07	; 7
    4572:	09 f4       	brne	.+2      	; 0x4576 <command_common+0x1c>
    4574:	88 c0       	rjmp	.+272    	; 0x4686 <command_common+0x12c>
    4576:	48 f4       	brcc	.+18     	; 0x458a <command_common+0x30>
    4578:	86 30       	cpi	r24, 0x06	; 6
    457a:	09 f4       	brne	.+2      	; 0x457e <command_common+0x24>
    457c:	72 c0       	rjmp	.+228    	; 0x4662 <command_common+0x108>
            print("?");
    457e:	8a e1       	ldi	r24, 0x1A	; 26
    4580:	98 e0       	ldi	r25, 0x08	; 8
    4582:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            return false;
    4586:	c0 e0       	ldi	r28, 0x00	; 0
    4588:	27 c0       	rjmp	.+78     	; 0x45d8 <command_common+0x7e>
    switch (code) {
    458a:	8b 30       	cpi	r24, 0x0B	; 11
    458c:	09 f4       	brne	.+2      	; 0x4590 <command_common+0x36>
    458e:	64 c0       	rjmp	.+200    	; 0x4658 <command_common+0xfe>
    4590:	8e 30       	cpi	r24, 0x0E	; 14
    4592:	a9 f7       	brne	.-22     	; 0x457e <command_common+0x24>
            debug_keyboard = !debug_keyboard;
    4594:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <debug_config>
    4598:	89 2f       	mov	r24, r25
    459a:	8b 7f       	andi	r24, 0xFB	; 251
    459c:	92 ff       	sbrs	r25, 2
    459e:	84 60       	ori	r24, 0x04	; 4
    45a0:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <debug_config>
            if (debug_keyboard) {
    45a4:	82 ff       	sbrs	r24, 2
    45a6:	88 c0       	rjmp	.+272    	; 0x46b8 <command_common+0x15e>
                print("\nkeyboard: on\n");
    45a8:	89 ed       	ldi	r24, 0xD9	; 217
    45aa:	99 e0       	ldi	r25, 0x09	; 9
    45ac:	7c c0       	rjmp	.+248    	; 0x46a6 <command_common+0x14c>
    switch (code) {
    45ae:	86 31       	cpi	r24, 0x16	; 22
    45b0:	09 f4       	brne	.+2      	; 0x45b4 <command_common+0x5a>
    45b2:	ac c0       	rjmp	.+344    	; 0x470c <command_common+0x1b2>
    45b4:	a0 f4       	brcc	.+40     	; 0x45de <command_common+0x84>
    45b6:	81 31       	cpi	r24, 0x11	; 17
    45b8:	11 f7       	brne	.-60     	; 0x457e <command_common+0x24>
            clear_keyboard(); //Prevents stuck keys.
    45ba:	0e 94 da 12 	call	0x25b4	; 0x25b4 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    45be:	c0 91 16 01 	lds	r28, 0x0116	; 0x800116 <keyboard_nkro>
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	c8 27       	eor	r28, r24
    45c6:	c0 93 16 01 	sts	0x0116, r28	; 0x800116 <keyboard_nkro>
            if (keyboard_nkro) {
    45ca:	cc 23       	and	r28, r28
    45cc:	09 f4       	brne	.+2      	; 0x45d0 <command_common+0x76>
    45ce:	df c0       	rjmp	.+446    	; 0x478e <command_common+0x234>
                print("NKRO: on\n");
    45d0:	87 e2       	ldi	r24, 0x27	; 39
    45d2:	98 e0       	ldi	r25, 0x08	; 8
    45d4:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
}
    45d8:	8c 2f       	mov	r24, r28
    45da:	cf 91       	pop	r28
    45dc:	08 95       	ret
    switch (code) {
    45de:	89 31       	cpi	r24, 0x19	; 25
    45e0:	09 f4       	brne	.+2      	; 0x45e4 <command_common+0x8a>
    45e2:	7d c0       	rjmp	.+250    	; 0x46de <command_common+0x184>
    45e4:	8b 31       	cpi	r24, 0x1B	; 27
    45e6:	59 f6       	brne	.-106    	; 0x457e <command_common+0x24>
            debug_matrix = !debug_matrix;
    45e8:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <debug_config>
    45ec:	89 2f       	mov	r24, r25
    45ee:	8d 7f       	andi	r24, 0xFD	; 253
    45f0:	91 ff       	sbrs	r25, 1
    45f2:	82 60       	ori	r24, 0x02	; 2
    45f4:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <debug_config>
            if (debug_matrix) {
    45f8:	81 ff       	sbrs	r24, 1
    45fa:	5b c0       	rjmp	.+182    	; 0x46b2 <command_common+0x158>
                print("\nmatrix: on\n");
    45fc:	86 ef       	ldi	r24, 0xF6	; 246
    45fe:	99 e0       	ldi	r25, 0x09	; 9
    4600:	52 c0       	rjmp	.+164    	; 0x46a6 <command_common+0x14c>
    switch (code) {
    4602:	88 33       	cpi	r24, 0x38	; 56
    4604:	49 f1       	breq	.+82     	; 0x4658 <command_common+0xfe>
    4606:	58 f4       	brcc	.+22     	; 0x461e <command_common+0xc4>
    4608:	89 32       	cpi	r24, 0x29	; 41
    460a:	29 f0       	breq	.+10     	; 0x4616 <command_common+0xbc>
    460c:	85 33       	cpi	r24, 0x35	; 53
    460e:	19 f0       	breq	.+6      	; 0x4616 <command_common+0xbc>
    4610:	87 32       	cpi	r24, 0x27	; 39
    4612:	09 f0       	breq	.+2      	; 0x4616 <command_common+0xbc>
    4614:	b4 cf       	rjmp	.-152    	; 0x457e <command_common+0x24>
            switch_default_layer(0);
    4616:	80 e0       	ldi	r24, 0x00	; 0
            switch_default_layer((code - KC_F1) + 1);
    4618:	0e 94 8f 22 	call	0x451e	; 0x451e <switch_default_layer>
    461c:	32 c0       	rjmp	.+100    	; 0x4682 <command_common+0x128>
    switch (code) {
    461e:	83 34       	cpi	r24, 0x43	; 67
    4620:	d1 f3       	breq	.-12     	; 0x4616 <command_common+0xbc>
    4622:	28 f4       	brcc	.+10     	; 0x462e <command_common+0xd4>
    4624:	8a 33       	cpi	r24, 0x3A	; 58
    4626:	08 f4       	brcc	.+2      	; 0x462a <command_common+0xd0>
    4628:	aa cf       	rjmp	.-172    	; 0x457e <command_common+0x24>
            switch_default_layer((code - KC_F1) + 1);
    462a:	89 53       	subi	r24, 0x39	; 57
    462c:	f5 cf       	rjmp	.-22     	; 0x4618 <command_common+0xbe>
    switch (code) {
    462e:	88 34       	cpi	r24, 0x48	; 72
    4630:	09 f0       	breq	.+2      	; 0x4634 <command_common+0xda>
    4632:	a5 cf       	rjmp	.-182    	; 0x457e <command_common+0x24>
            clear_keyboard();
    4634:	0e 94 da 12 	call	0x25b4	; 0x25b4 <clear_keyboard>
            print("\n\nbootloader... ");
    4638:	8c e1       	ldi	r24, 0x1C	; 28
    463a:	9a e0       	ldi	r25, 0x0A	; 10
    463c:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    4640:	2f ef       	ldi	r18, 0xFF	; 255
    4642:	83 ed       	ldi	r24, 0xD3	; 211
    4644:	90 e3       	ldi	r25, 0x30	; 48
    4646:	21 50       	subi	r18, 0x01	; 1
    4648:	80 40       	sbci	r24, 0x00	; 0
    464a:	90 40       	sbci	r25, 0x00	; 0
    464c:	e1 f7       	brne	.-8      	; 0x4646 <command_common+0xec>
    464e:	00 c0       	rjmp	.+0      	; 0x4650 <command_common+0xf6>
    4650:	00 00       	nop
            bootloader_jump(); // not return
    4652:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <bootloader_jump>
            break;
    4656:	15 c0       	rjmp	.+42     	; 0x4682 <command_common+0x128>
    print("\n\t- Magic -\n"
    4658:	8f e7       	ldi	r24, 0x7F	; 127
    465a:	97 e0       	ldi	r25, 0x07	; 7
                print("NKRO: off\n");
    465c:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    4660:	10 c0       	rjmp	.+32     	; 0x4682 <command_common+0x128>
            debug_enable   = false;
    4662:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    4666:	80 7f       	andi	r24, 0xF0	; 240
    4668:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <debug_config>
    print("\n\t- Console -\n"
    466c:	88 e5       	ldi	r24, 0x58	; 88
    466e:	97 e0       	ldi	r25, 0x07	; 7
    4670:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            print("C> ");
    4674:	8d e2       	ldi	r24, 0x2D	; 45
    4676:	9a e0       	ldi	r25, 0x0A	; 10
    4678:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            command_state = CONSOLE;
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <command_state>
    return true;
    4682:	c1 e0       	ldi	r28, 0x01	; 1
            break;
    4684:	a9 cf       	rjmp	.-174    	; 0x45d8 <command_common+0x7e>
            if (debug_enable) {
    4686:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    468a:	80 ff       	sbrs	r24, 0
    468c:	0a c0       	rjmp	.+20     	; 0x46a2 <command_common+0x148>
                print("\ndebug: off\n");
    468e:	8f e0       	ldi	r24, 0x0F	; 15
    4690:	9a e0       	ldi	r25, 0x0A	; 10
    4692:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
                debug_enable   = false;
    4696:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    469a:	80 7f       	andi	r24, 0xF0	; 240
                debug_enable = true;
    469c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <debug_config>
    46a0:	f0 cf       	rjmp	.-32     	; 0x4682 <command_common+0x128>
                print("\ndebug: on\n");
    46a2:	83 e0       	ldi	r24, 0x03	; 3
    46a4:	9a e0       	ldi	r25, 0x0A	; 10
                print("\nmouse: on\n");
    46a6:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
                debug_enable = true;
    46aa:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <debug_config>
    46ae:	81 60       	ori	r24, 0x01	; 1
    46b0:	f5 cf       	rjmp	.-22     	; 0x469c <command_common+0x142>
                print("\nmatrix: off\n");
    46b2:	88 ee       	ldi	r24, 0xE8	; 232
    46b4:	99 e0       	ldi	r25, 0x09	; 9
    46b6:	d2 cf       	rjmp	.-92     	; 0x465c <command_common+0x102>
                print("\nkeyboard: off\n");
    46b8:	89 ec       	ldi	r24, 0xC9	; 201
    46ba:	99 e0       	ldi	r25, 0x09	; 9
    46bc:	cf cf       	rjmp	.-98     	; 0x465c <command_common+0x102>
            debug_mouse = !debug_mouse;
    46be:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <debug_config>
    46c2:	89 2f       	mov	r24, r25
    46c4:	87 7f       	andi	r24, 0xF7	; 247
    46c6:	93 ff       	sbrs	r25, 3
    46c8:	88 60       	ori	r24, 0x08	; 8
    46ca:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <debug_config>
            if (debug_mouse) {
    46ce:	83 ff       	sbrs	r24, 3
    46d0:	03 c0       	rjmp	.+6      	; 0x46d8 <command_common+0x17e>
                print("\nmouse: on\n");
    46d2:	8d eb       	ldi	r24, 0xBD	; 189
    46d4:	99 e0       	ldi	r25, 0x09	; 9
    46d6:	e7 cf       	rjmp	.-50     	; 0x46a6 <command_common+0x14c>
                print("\nmouse: off\n");
    46d8:	80 eb       	ldi	r24, 0xB0	; 176
    46da:	99 e0       	ldi	r25, 0x09	; 9
    46dc:	bf cf       	rjmp	.-130    	; 0x465c <command_common+0x102>
            print("\n\t- Version -\n");
    46de:	81 ea       	ldi	r24, 0xA1	; 161
    46e0:	99 e0       	ldi	r25, 0x09	; 9
    46e2:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    46e6:	8f e7       	ldi	r24, 0x7F	; 127
    46e8:	99 e0       	ldi	r25, 0x09	; 9
    46ea:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    46ee:	8b e3       	ldi	r24, 0x3B	; 59
    46f0:	99 e0       	ldi	r25, 0x09	; 9
    46f2:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            print("BUILD: " STR(TMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
    46f6:	83 e1       	ldi	r24, 0x13	; 19
    46f8:	99 e0       	ldi	r25, 0x09	; 9
    46fa:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            print("OPTIONS:"
    46fe:	88 ed       	ldi	r24, 0xD8	; 216
    4700:	98 e0       	ldi	r25, 0x08	; 8
    4702:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4706:	8d ea       	ldi	r24, 0xAD	; 173
    4708:	98 e0       	ldi	r25, 0x08	; 8
    470a:	a8 cf       	rjmp	.-176    	; 0x465c <command_common+0x102>
            print("\n\t- Status -\n");
    470c:	8f e9       	ldi	r24, 0x9F	; 159
    470e:	98 e0       	ldi	r25, 0x08	; 8
    4710:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            print_val_hex8(host_keyboard_leds());
    4714:	0e 94 08 10 	call	0x2010	; 0x2010 <host_keyboard_leds>
    4718:	1f 92       	push	r1
    471a:	8f 93       	push	r24
    471c:	85 e8       	ldi	r24, 0x85	; 133
    471e:	98 e0       	ldi	r25, 0x08	; 8
    4720:	9f 93       	push	r25
    4722:	8f 93       	push	r24
    4724:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4728:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <keyboard_protocol>
    472c:	1f 92       	push	r1
    472e:	8f 93       	push	r24
    4730:	8e e6       	ldi	r24, 0x6E	; 110
    4732:	98 e0       	ldi	r25, 0x08	; 8
    4734:	9f 93       	push	r25
    4736:	8f 93       	push	r24
    4738:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            print_val_hex8(keyboard_idle);
    473c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <keyboard_idle>
    4740:	1f 92       	push	r1
    4742:	8f 93       	push	r24
    4744:	8b e5       	ldi	r24, 0x5B	; 91
    4746:	98 e0       	ldi	r25, 0x08	; 8
    4748:	9f 93       	push	r25
    474a:	8f 93       	push	r24
    474c:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            print_val_hex8(keyboard_nkro);
    4750:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <keyboard_nkro>
    4754:	1f 92       	push	r1
    4756:	8f 93       	push	r24
    4758:	88 e4       	ldi	r24, 0x48	; 72
    475a:	98 e0       	ldi	r25, 0x08	; 8
    475c:	9f 93       	push	r25
    475e:	8f 93       	push	r24
    4760:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            print_val_hex32(timer_read32());
    4764:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <timer_read32>
    4768:	9f 93       	push	r25
    476a:	8f 93       	push	r24
    476c:	7f 93       	push	r23
    476e:	6f 93       	push	r22
    4770:	81 e3       	ldi	r24, 0x31	; 49
    4772:	98 e0       	ldi	r25, 0x08	; 8
    4774:	9f 93       	push	r25
    4776:	8f 93       	push	r24
    4778:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
            break;
    477c:	8d b7       	in	r24, 0x3d	; 61
    477e:	9e b7       	in	r25, 0x3e	; 62
    4780:	46 96       	adiw	r24, 0x16	; 22
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	f8 94       	cli
    4786:	9e bf       	out	0x3e, r25	; 62
    4788:	0f be       	out	0x3f, r0	; 63
    478a:	8d bf       	out	0x3d, r24	; 61
    478c:	7a cf       	rjmp	.-268    	; 0x4682 <command_common+0x128>
                print("NKRO: off\n");
    478e:	8c e1       	ldi	r24, 0x1C	; 28
    4790:	98 e0       	ldi	r25, 0x08	; 8
    4792:	64 cf       	rjmp	.-312    	; 0x465c <command_common+0x102>
            switch_default_layer((code - KC_1) + 1);
    4794:	8d 51       	subi	r24, 0x1D	; 29
    4796:	40 cf       	rjmp	.-384    	; 0x4618 <command_common+0xbe>

00004798 <command_extra>:
}
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	08 95       	ret

0000479c <command_console_extra>:
    479c:	0c 94 cc 23 	jmp	0x4798	; 0x4798 <command_extra>

000047a0 <command_proc>:
{
    47a0:	cf 93       	push	r28
    47a2:	c8 2f       	mov	r28, r24
    switch (command_state) {
    47a4:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <command_state>
    47a8:	81 30       	cpi	r24, 0x01	; 1
    47aa:	e1 f0       	breq	.+56     	; 0x47e4 <command_proc+0x44>
    47ac:	88 23       	and	r24, r24
    47ae:	39 f0       	breq	.+14     	; 0x47be <command_proc+0x1e>
    47b0:	82 30       	cpi	r24, 0x02	; 2
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <command_proc+0x16>
    47b4:	4f c0       	rjmp	.+158    	; 0x4854 <command_proc+0xb4>
            command_state = ONESHOT;
    47b6:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <command_state>
                return false;
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	11 c0       	rjmp	.+34     	; 0x47e0 <command_proc+0x40>
            if (!IS_COMMAND())
    47be:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <keyboard_report>
    47c2:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <keyboard_report+0x1>
    47c6:	80 81       	ld	r24, Z
    47c8:	81 52       	subi	r24, 0x21	; 33
    47ca:	82 30       	cpi	r24, 0x02	; 2
    47cc:	b0 f7       	brcc	.-20     	; 0x47ba <command_proc+0x1a>
                return (command_extra(code) || command_common(code));
    47ce:	8c 2f       	mov	r24, r28
    47d0:	0e 94 cc 23 	call	0x4798	; 0x4798 <command_extra>
    47d4:	81 11       	cpse	r24, r1
    47d6:	1f c0       	rjmp	.+62     	; 0x4816 <command_proc+0x76>
    47d8:	8c 2f       	mov	r24, r28
    47da:	0e 94 ad 22 	call	0x455a	; 0x455a <command_common>
                return (command_console_extra(code) || command_console(code));
    47de:	81 70       	andi	r24, 0x01	; 1
}
    47e0:	cf 91       	pop	r28
    47e2:	08 95       	ret
            if (IS_COMMAND())
    47e4:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <keyboard_report>
    47e8:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <keyboard_report+0x1>
    47ec:	80 81       	ld	r24, Z
    47ee:	81 52       	subi	r24, 0x21	; 33
    47f0:	82 30       	cpi	r24, 0x02	; 2
    47f2:	68 f3       	brcs	.-38     	; 0x47ce <command_proc+0x2e>
                return (command_console_extra(code) || command_console(code));
    47f4:	8c 2f       	mov	r24, r28
    47f6:	0e 94 ce 23 	call	0x479c	; 0x479c <command_console_extra>
    47fa:	81 11       	cpse	r24, r1
    47fc:	1b c0       	rjmp	.+54     	; 0x4834 <command_proc+0x94>
    switch (code) {
    47fe:	c4 31       	cpi	r28, 0x14	; 20
    4800:	d9 f0       	breq	.+54     	; 0x4838 <command_proc+0x98>
    4802:	60 f4       	brcc	.+24     	; 0x481c <command_proc+0x7c>
    4804:	cb 30       	cpi	r28, 0x0B	; 11
    4806:	71 f0       	breq	.+28     	; 0x4824 <command_proc+0x84>
    4808:	c0 31       	cpi	r28, 0x10	; 16
    480a:	d1 f0       	breq	.+52     	; 0x4840 <command_proc+0xa0>
            print("?");
    480c:	89 e4       	ldi	r24, 0x49	; 73
    480e:	97 e0       	ldi	r25, 0x07	; 7
    4810:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    4814:	13 c0       	rjmp	.+38     	; 0x483c <command_proc+0x9c>
                return (command_extra(code) || command_common(code));
    4816:	81 e0       	ldi	r24, 0x01	; 1
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	e1 cf       	rjmp	.-62     	; 0x47de <command_proc+0x3e>
    switch (code) {
    481c:	c9 32       	cpi	r28, 0x29	; 41
    481e:	61 f0       	breq	.+24     	; 0x4838 <command_proc+0x98>
    4820:	c8 33       	cpi	r28, 0x38	; 56
    4822:	a1 f7       	brne	.-24     	; 0x480c <command_proc+0x6c>
    print("\n\t- Console -\n"
    4824:	88 e5       	ldi	r24, 0x58	; 88
    4826:	97 e0       	ldi	r25, 0x07	; 7
    4828:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print("C> ");
    482c:	8f e4       	ldi	r24, 0x4F	; 79
    482e:	97 e0       	ldi	r25, 0x07	; 7
    4830:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
                return (command_console_extra(code) || command_console(code));
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	d3 cf       	rjmp	.-90     	; 0x47de <command_proc+0x3e>
            command_state = ONESHOT;
    4838:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <command_state>
                return (command_console_extra(code) || command_console(code));
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	cf cf       	rjmp	.-98     	; 0x47de <command_proc+0x3e>
            mousekey_console_help();
    4840:	0e 94 55 21 	call	0x42aa	; 0x42aa <mousekey_console_help>
            print("M> ");
    4844:	8b e4       	ldi	r24, 0x4B	; 75
    4846:	97 e0       	ldi	r25, 0x07	; 7
    4848:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            command_state = MOUSEKEY;
    484c:	82 e0       	ldi	r24, 0x02	; 2
    484e:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <command_state>
            return true;
    4852:	f0 cf       	rjmp	.-32     	; 0x4834 <command_proc+0x94>
    switch (code) {
    4854:	c4 32       	cpi	r28, 0x24	; 36
    4856:	c8 f4       	brcc	.+50     	; 0x488a <command_proc+0xea>
    4858:	ce 31       	cpi	r28, 0x1E	; 30
    485a:	08 f0       	brcs	.+2      	; 0x485e <command_proc+0xbe>
    485c:	be c0       	rjmp	.+380    	; 0x49da <command_proc+0x23a>
    485e:	cb 30       	cpi	r28, 0x0B	; 11
    4860:	e1 f0       	breq	.+56     	; 0x489a <command_proc+0xfa>
    4862:	40 f4       	brcc	.+16     	; 0x4874 <command_proc+0xd4>
    4864:	c7 30       	cpi	r28, 0x07	; 7
    4866:	09 f4       	brne	.+2      	; 0x486a <command_proc+0xca>
    4868:	cf c0       	rjmp	.+414    	; 0x4a08 <command_proc+0x268>
            print("?");
    486a:	8d ee       	ldi	r24, 0xED	; 237
    486c:	95 e0       	ldi	r25, 0x05	; 5
        print("M>" );
    486e:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    4872:	26 c0       	rjmp	.+76     	; 0x48c0 <command_proc+0x120>
    switch (code) {
    4874:	c3 31       	cpi	r28, 0x13	; 19
    4876:	c1 f1       	breq	.+112    	; 0x48e8 <command_proc+0x148>
    4878:	c4 31       	cpi	r28, 0x14	; 20
    487a:	b9 f7       	brne	.-18     	; 0x486a <command_proc+0xca>
            if (mousekey_param) {
    487c:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <mousekey_param>
    4880:	88 23       	and	r24, r24
    4882:	51 f1       	breq	.+84     	; 0x48d8 <command_proc+0x138>
                mousekey_param = 0;
    4884:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <mousekey_param>
            break;
    4888:	0a c0       	rjmp	.+20     	; 0x489e <command_proc+0xfe>
    switch (code) {
    488a:	cb 34       	cpi	r28, 0x4B	; 75
    488c:	09 f4       	brne	.+2      	; 0x4890 <command_proc+0xf0>
    488e:	ba c0       	rjmp	.+372    	; 0x4a04 <command_proc+0x264>
    4890:	c8 f4       	brcc	.+50     	; 0x48c4 <command_proc+0x124>
    4892:	c9 32       	cpi	r28, 0x29	; 41
    4894:	99 f3       	breq	.-26     	; 0x487c <command_proc+0xdc>
    4896:	c8 33       	cpi	r28, 0x38	; 56
    4898:	41 f7       	brne	.-48     	; 0x486a <command_proc+0xca>
            mousekey_console_help();
    489a:	0e 94 55 21 	call	0x42aa	; 0x42aa <mousekey_console_help>
    if (mousekey_param) {
    489e:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <mousekey_param>
    48a2:	88 23       	and	r24, r24
    48a4:	09 f4       	brne	.+2      	; 0x48a8 <command_proc+0x108>
    48a6:	c7 c0       	rjmp	.+398    	; 0x4a36 <command_proc+0x296>
        xprintf("M%d> ", mousekey_param);
    48a8:	1f 92       	push	r1
    48aa:	8f 93       	push	r24
    48ac:	87 ee       	ldi	r24, 0xE7	; 231
    48ae:	95 e0       	ldi	r25, 0x05	; 5
    48b0:	9f 93       	push	r25
    48b2:	8f 93       	push	r24
    48b4:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    return true;
    48c0:	81 e0       	ldi	r24, 0x01	; 1
    48c2:	8e cf       	rjmp	.-228    	; 0x47e0 <command_proc+0x40>
    switch (code) {
    48c4:	c1 35       	cpi	r28, 0x51	; 81
    48c6:	09 f4       	brne	.+2      	; 0x48ca <command_proc+0x12a>
    48c8:	97 c0       	rjmp	.+302    	; 0x49f8 <command_proc+0x258>
    48ca:	c2 35       	cpi	r28, 0x52	; 82
    48cc:	09 f4       	brne	.+2      	; 0x48d0 <command_proc+0x130>
    48ce:	8e c0       	rjmp	.+284    	; 0x49ec <command_proc+0x24c>
    48d0:	ce 34       	cpi	r28, 0x4E	; 78
    48d2:	59 f6       	brne	.-106    	; 0x486a <command_proc+0xca>
            mousekey_param_dec(mousekey_param, 10);
    48d4:	6a e0       	ldi	r22, 0x0A	; 10
    48d6:	91 c0       	rjmp	.+290    	; 0x49fa <command_proc+0x25a>
                print("C> ");
    48d8:	8c ef       	ldi	r24, 0xFC	; 252
    48da:	95 e0       	ldi	r25, 0x05	; 5
    48dc:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
                command_state = CONSOLE;
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <command_state>
                return false;
    48e6:	7c cf       	rjmp	.-264    	; 0x47e0 <command_proc+0x40>
    print("\n\t- Values -\n");
    48e8:	86 ed       	ldi	r24, 0xD6	; 214
    48ea:	95 e0       	ldi	r25, 0x05	; 5
    48ec:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    48f0:	84 ec       	ldi	r24, 0xC4	; 196
    48f2:	95 e0       	ldi	r25, 0x05	; 5
    48f4:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    48f8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <mk_delay>
    48fc:	1f 92       	push	r1
    48fe:	8f 93       	push	r24
    4900:	81 ec       	ldi	r24, 0xC1	; 193
    4902:	95 e0       	ldi	r25, 0x05	; 5
    4904:	9f 93       	push	r25
    4906:	8f 93       	push	r24
    4908:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    490c:	8f eb       	ldi	r24, 0xBF	; 191
    490e:	95 e0       	ldi	r25, 0x05	; 5
    4910:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4914:	8d ea       	ldi	r24, 0xAD	; 173
    4916:	95 e0       	ldi	r25, 0x05	; 5
    4918:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    491c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <mk_interval>
    4920:	1f 92       	push	r1
    4922:	8f 93       	push	r24
    4924:	8a ea       	ldi	r24, 0xAA	; 170
    4926:	95 e0       	ldi	r25, 0x05	; 5
    4928:	9f 93       	push	r25
    492a:	8f 93       	push	r24
    492c:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    4930:	88 ea       	ldi	r24, 0xA8	; 168
    4932:	95 e0       	ldi	r25, 0x05	; 5
    4934:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4938:	89 e9       	ldi	r24, 0x99	; 153
    493a:	95 e0       	ldi	r25, 0x05	; 5
    493c:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    4940:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <mk_max_speed>
    4944:	1f 92       	push	r1
    4946:	8f 93       	push	r24
    4948:	86 e9       	ldi	r24, 0x96	; 150
    494a:	95 e0       	ldi	r25, 0x05	; 5
    494c:	9f 93       	push	r25
    494e:	8f 93       	push	r24
    4950:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    4954:	84 e9       	ldi	r24, 0x94	; 148
    4956:	95 e0       	ldi	r25, 0x05	; 5
    4958:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    495c:	83 e8       	ldi	r24, 0x83	; 131
    495e:	95 e0       	ldi	r25, 0x05	; 5
    4960:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    4964:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <mk_time_to_max>
    4968:	1f 92       	push	r1
    496a:	8f 93       	push	r24
    496c:	80 e8       	ldi	r24, 0x80	; 128
    496e:	95 e0       	ldi	r25, 0x05	; 5
    4970:	9f 93       	push	r25
    4972:	8f 93       	push	r24
    4974:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    4978:	8e e7       	ldi	r24, 0x7E	; 126
    497a:	95 e0       	ldi	r25, 0x05	; 5
    497c:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4980:	89 e6       	ldi	r24, 0x69	; 105
    4982:	95 e0       	ldi	r25, 0x05	; 5
    4984:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    4988:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <mk_wheel_max_speed>
    498c:	1f 92       	push	r1
    498e:	8f 93       	push	r24
    4990:	86 e6       	ldi	r24, 0x66	; 102
    4992:	95 e0       	ldi	r25, 0x05	; 5
    4994:	9f 93       	push	r25
    4996:	8f 93       	push	r24
    4998:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    499c:	84 e6       	ldi	r24, 0x64	; 100
    499e:	95 e0       	ldi	r25, 0x05	; 5
    49a0:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    49a4:	8d e4       	ldi	r24, 0x4D	; 77
    49a6:	95 e0       	ldi	r25, 0x05	; 5
    49a8:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    49ac:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <mk_wheel_time_to_max>
    49b0:	1f 92       	push	r1
    49b2:	8f 93       	push	r24
    49b4:	8a e4       	ldi	r24, 0x4A	; 74
    49b6:	95 e0       	ldi	r25, 0x05	; 5
    49b8:	9f 93       	push	r25
    49ba:	8f 93       	push	r24
    49bc:	0e 94 08 06 	call	0xc10	; 0xc10 <__xprintf>
    49c0:	88 e4       	ldi	r24, 0x48	; 72
    49c2:	95 e0       	ldi	r25, 0x05	; 5
    49c4:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
    49c8:	8d b7       	in	r24, 0x3d	; 61
    49ca:	9e b7       	in	r25, 0x3e	; 62
    49cc:	48 96       	adiw	r24, 0x18	; 24
    49ce:	0f b6       	in	r0, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	9e bf       	out	0x3e, r25	; 62
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	8d bf       	out	0x3d, r24	; 61
    49d8:	62 cf       	rjmp	.-316    	; 0x489e <command_proc+0xfe>
            mousekey_param = numkey2num(code);
    49da:	ce 51       	subi	r28, 0x1E	; 30
    49dc:	ec 2f       	mov	r30, r28
    49de:	f0 e0       	ldi	r31, 0x00	; 0
    49e0:	ef 57       	subi	r30, 0x7F	; 127
    49e2:	fe 4f       	sbci	r31, 0xFE	; 254
    49e4:	80 81       	ld	r24, Z
    49e6:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <mousekey_param>
            break;
    49ea:	59 cf       	rjmp	.-334    	; 0x489e <command_proc+0xfe>
            mousekey_param_inc(mousekey_param, 1);
    49ec:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_inc(mousekey_param, 10);
    49ee:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <mousekey_param>
    49f2:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <mousekey_param_inc>
            break;
    49f6:	53 cf       	rjmp	.-346    	; 0x489e <command_proc+0xfe>
            mousekey_param_dec(mousekey_param, 1);
    49f8:	61 e0       	ldi	r22, 0x01	; 1
            mousekey_param_dec(mousekey_param, 10);
    49fa:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <mousekey_param>
    49fe:	0e 94 10 22 	call	0x4420	; 0x4420 <mousekey_param_dec>
            break;
    4a02:	4d cf       	rjmp	.-358    	; 0x489e <command_proc+0xfe>
            mousekey_param_inc(mousekey_param, 10);
    4a04:	6a e0       	ldi	r22, 0x0A	; 10
    4a06:	f3 cf       	rjmp	.-26     	; 0x49ee <command_proc+0x24e>
            mk_delay = MOUSEKEY_DELAY/10;
    4a08:	8e e1       	ldi	r24, 0x1E	; 30
    4a0a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <mk_delay>
            mk_interval = MOUSEKEY_INTERVAL;
    4a0e:	82 e3       	ldi	r24, 0x32	; 50
    4a10:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <mk_interval>
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4a14:	8a e0       	ldi	r24, 0x0A	; 10
    4a16:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <mk_max_speed>
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4a1a:	84 e1       	ldi	r24, 0x14	; 20
    4a1c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <mk_time_to_max>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4a20:	88 e0       	ldi	r24, 0x08	; 8
    4a22:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <mk_wheel_max_speed>
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4a26:	88 e2       	ldi	r24, 0x28	; 40
    4a28:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <mk_wheel_time_to_max>
            print("set default\n");
    4a2c:	8f ee       	ldi	r24, 0xEF	; 239
    4a2e:	95 e0       	ldi	r25, 0x05	; 5
    4a30:	0e 94 6f 05 	call	0xade	; 0xade <xputs>
            break;
    4a34:	34 cf       	rjmp	.-408    	; 0x489e <command_proc+0xfe>
        print("M>" );
    4a36:	84 ee       	ldi	r24, 0xE4	; 228
    4a38:	95 e0       	ldi	r25, 0x05	; 5
    4a3a:	19 cf       	rjmp	.-462    	; 0x486e <command_proc+0xce>

00004a3c <__fixsfsi>:
    4a3c:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <__fixunssfsi>
    4a40:	68 94       	set
    4a42:	b1 11       	cpse	r27, r1
    4a44:	0c 94 b4 25 	jmp	0x4b68	; 0x4b68 <__fp_szero>
    4a48:	08 95       	ret

00004a4a <__fixunssfsi>:
    4a4a:	0e 94 99 25 	call	0x4b32	; 0x4b32 <__fp_splitA>
    4a4e:	88 f0       	brcs	.+34     	; 0x4a72 <__fixunssfsi+0x28>
    4a50:	9f 57       	subi	r25, 0x7F	; 127
    4a52:	98 f0       	brcs	.+38     	; 0x4a7a <__fixunssfsi+0x30>
    4a54:	b9 2f       	mov	r27, r25
    4a56:	99 27       	eor	r25, r25
    4a58:	b7 51       	subi	r27, 0x17	; 23
    4a5a:	b0 f0       	brcs	.+44     	; 0x4a88 <__fixunssfsi+0x3e>
    4a5c:	e1 f0       	breq	.+56     	; 0x4a96 <__fixunssfsi+0x4c>
    4a5e:	66 0f       	add	r22, r22
    4a60:	77 1f       	adc	r23, r23
    4a62:	88 1f       	adc	r24, r24
    4a64:	99 1f       	adc	r25, r25
    4a66:	1a f0       	brmi	.+6      	; 0x4a6e <__fixunssfsi+0x24>
    4a68:	ba 95       	dec	r27
    4a6a:	c9 f7       	brne	.-14     	; 0x4a5e <__fixunssfsi+0x14>
    4a6c:	14 c0       	rjmp	.+40     	; 0x4a96 <__fixunssfsi+0x4c>
    4a6e:	b1 30       	cpi	r27, 0x01	; 1
    4a70:	91 f0       	breq	.+36     	; 0x4a96 <__fixunssfsi+0x4c>
    4a72:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__fp_zero>
    4a76:	b1 e0       	ldi	r27, 0x01	; 1
    4a78:	08 95       	ret
    4a7a:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__fp_zero>
    4a7e:	67 2f       	mov	r22, r23
    4a80:	78 2f       	mov	r23, r24
    4a82:	88 27       	eor	r24, r24
    4a84:	b8 5f       	subi	r27, 0xF8	; 248
    4a86:	39 f0       	breq	.+14     	; 0x4a96 <__fixunssfsi+0x4c>
    4a88:	b9 3f       	cpi	r27, 0xF9	; 249
    4a8a:	cc f3       	brlt	.-14     	; 0x4a7e <__fixunssfsi+0x34>
    4a8c:	86 95       	lsr	r24
    4a8e:	77 95       	ror	r23
    4a90:	67 95       	ror	r22
    4a92:	b3 95       	inc	r27
    4a94:	d9 f7       	brne	.-10     	; 0x4a8c <__fixunssfsi+0x42>
    4a96:	3e f4       	brtc	.+14     	; 0x4aa6 <__fixunssfsi+0x5c>
    4a98:	90 95       	com	r25
    4a9a:	80 95       	com	r24
    4a9c:	70 95       	com	r23
    4a9e:	61 95       	neg	r22
    4aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    4aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa6:	08 95       	ret

00004aa8 <__floatunsisf>:
    4aa8:	e8 94       	clt
    4aaa:	09 c0       	rjmp	.+18     	; 0x4abe <__floatsisf+0x12>

00004aac <__floatsisf>:
    4aac:	97 fb       	bst	r25, 7
    4aae:	3e f4       	brtc	.+14     	; 0x4abe <__floatsisf+0x12>
    4ab0:	90 95       	com	r25
    4ab2:	80 95       	com	r24
    4ab4:	70 95       	com	r23
    4ab6:	61 95       	neg	r22
    4ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aba:	8f 4f       	sbci	r24, 0xFF	; 255
    4abc:	9f 4f       	sbci	r25, 0xFF	; 255
    4abe:	99 23       	and	r25, r25
    4ac0:	a9 f0       	breq	.+42     	; 0x4aec <__floatsisf+0x40>
    4ac2:	f9 2f       	mov	r31, r25
    4ac4:	96 e9       	ldi	r25, 0x96	; 150
    4ac6:	bb 27       	eor	r27, r27
    4ac8:	93 95       	inc	r25
    4aca:	f6 95       	lsr	r31
    4acc:	87 95       	ror	r24
    4ace:	77 95       	ror	r23
    4ad0:	67 95       	ror	r22
    4ad2:	b7 95       	ror	r27
    4ad4:	f1 11       	cpse	r31, r1
    4ad6:	f8 cf       	rjmp	.-16     	; 0x4ac8 <__floatsisf+0x1c>
    4ad8:	fa f4       	brpl	.+62     	; 0x4b18 <__floatsisf+0x6c>
    4ada:	bb 0f       	add	r27, r27
    4adc:	11 f4       	brne	.+4      	; 0x4ae2 <__floatsisf+0x36>
    4ade:	60 ff       	sbrs	r22, 0
    4ae0:	1b c0       	rjmp	.+54     	; 0x4b18 <__floatsisf+0x6c>
    4ae2:	6f 5f       	subi	r22, 0xFF	; 255
    4ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aea:	16 c0       	rjmp	.+44     	; 0x4b18 <__floatsisf+0x6c>
    4aec:	88 23       	and	r24, r24
    4aee:	11 f0       	breq	.+4      	; 0x4af4 <__floatsisf+0x48>
    4af0:	96 e9       	ldi	r25, 0x96	; 150
    4af2:	11 c0       	rjmp	.+34     	; 0x4b16 <__floatsisf+0x6a>
    4af4:	77 23       	and	r23, r23
    4af6:	21 f0       	breq	.+8      	; 0x4b00 <__floatsisf+0x54>
    4af8:	9e e8       	ldi	r25, 0x8E	; 142
    4afa:	87 2f       	mov	r24, r23
    4afc:	76 2f       	mov	r23, r22
    4afe:	05 c0       	rjmp	.+10     	; 0x4b0a <__floatsisf+0x5e>
    4b00:	66 23       	and	r22, r22
    4b02:	71 f0       	breq	.+28     	; 0x4b20 <__floatsisf+0x74>
    4b04:	96 e8       	ldi	r25, 0x86	; 134
    4b06:	86 2f       	mov	r24, r22
    4b08:	70 e0       	ldi	r23, 0x00	; 0
    4b0a:	60 e0       	ldi	r22, 0x00	; 0
    4b0c:	2a f0       	brmi	.+10     	; 0x4b18 <__floatsisf+0x6c>
    4b0e:	9a 95       	dec	r25
    4b10:	66 0f       	add	r22, r22
    4b12:	77 1f       	adc	r23, r23
    4b14:	88 1f       	adc	r24, r24
    4b16:	da f7       	brpl	.-10     	; 0x4b0e <__floatsisf+0x62>
    4b18:	88 0f       	add	r24, r24
    4b1a:	96 95       	lsr	r25
    4b1c:	87 95       	ror	r24
    4b1e:	97 f9       	bld	r25, 7
    4b20:	08 95       	ret

00004b22 <__fp_split3>:
    4b22:	57 fd       	sbrc	r21, 7
    4b24:	90 58       	subi	r25, 0x80	; 128
    4b26:	44 0f       	add	r20, r20
    4b28:	55 1f       	adc	r21, r21
    4b2a:	59 f0       	breq	.+22     	; 0x4b42 <__fp_splitA+0x10>
    4b2c:	5f 3f       	cpi	r21, 0xFF	; 255
    4b2e:	71 f0       	breq	.+28     	; 0x4b4c <__fp_splitA+0x1a>
    4b30:	47 95       	ror	r20

00004b32 <__fp_splitA>:
    4b32:	88 0f       	add	r24, r24
    4b34:	97 fb       	bst	r25, 7
    4b36:	99 1f       	adc	r25, r25
    4b38:	61 f0       	breq	.+24     	; 0x4b52 <__fp_splitA+0x20>
    4b3a:	9f 3f       	cpi	r25, 0xFF	; 255
    4b3c:	79 f0       	breq	.+30     	; 0x4b5c <__fp_splitA+0x2a>
    4b3e:	87 95       	ror	r24
    4b40:	08 95       	ret
    4b42:	12 16       	cp	r1, r18
    4b44:	13 06       	cpc	r1, r19
    4b46:	14 06       	cpc	r1, r20
    4b48:	55 1f       	adc	r21, r21
    4b4a:	f2 cf       	rjmp	.-28     	; 0x4b30 <__fp_split3+0xe>
    4b4c:	46 95       	lsr	r20
    4b4e:	f1 df       	rcall	.-30     	; 0x4b32 <__fp_splitA>
    4b50:	08 c0       	rjmp	.+16     	; 0x4b62 <__fp_splitA+0x30>
    4b52:	16 16       	cp	r1, r22
    4b54:	17 06       	cpc	r1, r23
    4b56:	18 06       	cpc	r1, r24
    4b58:	99 1f       	adc	r25, r25
    4b5a:	f1 cf       	rjmp	.-30     	; 0x4b3e <__fp_splitA+0xc>
    4b5c:	86 95       	lsr	r24
    4b5e:	71 05       	cpc	r23, r1
    4b60:	61 05       	cpc	r22, r1
    4b62:	08 94       	sec
    4b64:	08 95       	ret

00004b66 <__fp_zero>:
    4b66:	e8 94       	clt

00004b68 <__fp_szero>:
    4b68:	bb 27       	eor	r27, r27
    4b6a:	66 27       	eor	r22, r22
    4b6c:	77 27       	eor	r23, r23
    4b6e:	cb 01       	movw	r24, r22
    4b70:	97 f9       	bld	r25, 7
    4b72:	08 95       	ret

00004b74 <__mulsf3>:
    4b74:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <__mulsf3x>
    4b78:	0c 94 3e 26 	jmp	0x4c7c	; 0x4c7c <__fp_round>
    4b7c:	0e 94 30 26 	call	0x4c60	; 0x4c60 <__fp_pscA>
    4b80:	38 f0       	brcs	.+14     	; 0x4b90 <__mulsf3+0x1c>
    4b82:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__fp_pscB>
    4b86:	20 f0       	brcs	.+8      	; 0x4b90 <__mulsf3+0x1c>
    4b88:	95 23       	and	r25, r21
    4b8a:	11 f0       	breq	.+4      	; 0x4b90 <__mulsf3+0x1c>
    4b8c:	0c 94 27 26 	jmp	0x4c4e	; 0x4c4e <__fp_inf>
    4b90:	0c 94 2d 26 	jmp	0x4c5a	; 0x4c5a <__fp_nan>
    4b94:	11 24       	eor	r1, r1
    4b96:	0c 94 b4 25 	jmp	0x4b68	; 0x4b68 <__fp_szero>

00004b9a <__mulsf3x>:
    4b9a:	0e 94 91 25 	call	0x4b22	; 0x4b22 <__fp_split3>
    4b9e:	70 f3       	brcs	.-36     	; 0x4b7c <__mulsf3+0x8>

00004ba0 <__mulsf3_pse>:
    4ba0:	95 9f       	mul	r25, r21
    4ba2:	c1 f3       	breq	.-16     	; 0x4b94 <__mulsf3+0x20>
    4ba4:	95 0f       	add	r25, r21
    4ba6:	50 e0       	ldi	r21, 0x00	; 0
    4ba8:	55 1f       	adc	r21, r21
    4baa:	62 9f       	mul	r22, r18
    4bac:	f0 01       	movw	r30, r0
    4bae:	72 9f       	mul	r23, r18
    4bb0:	bb 27       	eor	r27, r27
    4bb2:	f0 0d       	add	r31, r0
    4bb4:	b1 1d       	adc	r27, r1
    4bb6:	63 9f       	mul	r22, r19
    4bb8:	aa 27       	eor	r26, r26
    4bba:	f0 0d       	add	r31, r0
    4bbc:	b1 1d       	adc	r27, r1
    4bbe:	aa 1f       	adc	r26, r26
    4bc0:	64 9f       	mul	r22, r20
    4bc2:	66 27       	eor	r22, r22
    4bc4:	b0 0d       	add	r27, r0
    4bc6:	a1 1d       	adc	r26, r1
    4bc8:	66 1f       	adc	r22, r22
    4bca:	82 9f       	mul	r24, r18
    4bcc:	22 27       	eor	r18, r18
    4bce:	b0 0d       	add	r27, r0
    4bd0:	a1 1d       	adc	r26, r1
    4bd2:	62 1f       	adc	r22, r18
    4bd4:	73 9f       	mul	r23, r19
    4bd6:	b0 0d       	add	r27, r0
    4bd8:	a1 1d       	adc	r26, r1
    4bda:	62 1f       	adc	r22, r18
    4bdc:	83 9f       	mul	r24, r19
    4bde:	a0 0d       	add	r26, r0
    4be0:	61 1d       	adc	r22, r1
    4be2:	22 1f       	adc	r18, r18
    4be4:	74 9f       	mul	r23, r20
    4be6:	33 27       	eor	r19, r19
    4be8:	a0 0d       	add	r26, r0
    4bea:	61 1d       	adc	r22, r1
    4bec:	23 1f       	adc	r18, r19
    4bee:	84 9f       	mul	r24, r20
    4bf0:	60 0d       	add	r22, r0
    4bf2:	21 1d       	adc	r18, r1
    4bf4:	82 2f       	mov	r24, r18
    4bf6:	76 2f       	mov	r23, r22
    4bf8:	6a 2f       	mov	r22, r26
    4bfa:	11 24       	eor	r1, r1
    4bfc:	9f 57       	subi	r25, 0x7F	; 127
    4bfe:	50 40       	sbci	r21, 0x00	; 0
    4c00:	9a f0       	brmi	.+38     	; 0x4c28 <__mulsf3_pse+0x88>
    4c02:	f1 f0       	breq	.+60     	; 0x4c40 <__mulsf3_pse+0xa0>
    4c04:	88 23       	and	r24, r24
    4c06:	4a f0       	brmi	.+18     	; 0x4c1a <__mulsf3_pse+0x7a>
    4c08:	ee 0f       	add	r30, r30
    4c0a:	ff 1f       	adc	r31, r31
    4c0c:	bb 1f       	adc	r27, r27
    4c0e:	66 1f       	adc	r22, r22
    4c10:	77 1f       	adc	r23, r23
    4c12:	88 1f       	adc	r24, r24
    4c14:	91 50       	subi	r25, 0x01	; 1
    4c16:	50 40       	sbci	r21, 0x00	; 0
    4c18:	a9 f7       	brne	.-22     	; 0x4c04 <__mulsf3_pse+0x64>
    4c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    4c1c:	51 05       	cpc	r21, r1
    4c1e:	80 f0       	brcs	.+32     	; 0x4c40 <__mulsf3_pse+0xa0>
    4c20:	0c 94 27 26 	jmp	0x4c4e	; 0x4c4e <__fp_inf>
    4c24:	0c 94 b4 25 	jmp	0x4b68	; 0x4b68 <__fp_szero>
    4c28:	5f 3f       	cpi	r21, 0xFF	; 255
    4c2a:	e4 f3       	brlt	.-8      	; 0x4c24 <__mulsf3_pse+0x84>
    4c2c:	98 3e       	cpi	r25, 0xE8	; 232
    4c2e:	d4 f3       	brlt	.-12     	; 0x4c24 <__mulsf3_pse+0x84>
    4c30:	86 95       	lsr	r24
    4c32:	77 95       	ror	r23
    4c34:	67 95       	ror	r22
    4c36:	b7 95       	ror	r27
    4c38:	f7 95       	ror	r31
    4c3a:	e7 95       	ror	r30
    4c3c:	9f 5f       	subi	r25, 0xFF	; 255
    4c3e:	c1 f7       	brne	.-16     	; 0x4c30 <__mulsf3_pse+0x90>
    4c40:	fe 2b       	or	r31, r30
    4c42:	88 0f       	add	r24, r24
    4c44:	91 1d       	adc	r25, r1
    4c46:	96 95       	lsr	r25
    4c48:	87 95       	ror	r24
    4c4a:	97 f9       	bld	r25, 7
    4c4c:	08 95       	ret

00004c4e <__fp_inf>:
    4c4e:	97 f9       	bld	r25, 7
    4c50:	9f 67       	ori	r25, 0x7F	; 127
    4c52:	80 e8       	ldi	r24, 0x80	; 128
    4c54:	70 e0       	ldi	r23, 0x00	; 0
    4c56:	60 e0       	ldi	r22, 0x00	; 0
    4c58:	08 95       	ret

00004c5a <__fp_nan>:
    4c5a:	9f ef       	ldi	r25, 0xFF	; 255
    4c5c:	80 ec       	ldi	r24, 0xC0	; 192
    4c5e:	08 95       	ret

00004c60 <__fp_pscA>:
    4c60:	00 24       	eor	r0, r0
    4c62:	0a 94       	dec	r0
    4c64:	16 16       	cp	r1, r22
    4c66:	17 06       	cpc	r1, r23
    4c68:	18 06       	cpc	r1, r24
    4c6a:	09 06       	cpc	r0, r25
    4c6c:	08 95       	ret

00004c6e <__fp_pscB>:
    4c6e:	00 24       	eor	r0, r0
    4c70:	0a 94       	dec	r0
    4c72:	12 16       	cp	r1, r18
    4c74:	13 06       	cpc	r1, r19
    4c76:	14 06       	cpc	r1, r20
    4c78:	05 06       	cpc	r0, r21
    4c7a:	08 95       	ret

00004c7c <__fp_round>:
    4c7c:	09 2e       	mov	r0, r25
    4c7e:	03 94       	inc	r0
    4c80:	00 0c       	add	r0, r0
    4c82:	11 f4       	brne	.+4      	; 0x4c88 <__fp_round+0xc>
    4c84:	88 23       	and	r24, r24
    4c86:	52 f0       	brmi	.+20     	; 0x4c9c <__fp_round+0x20>
    4c88:	bb 0f       	add	r27, r27
    4c8a:	40 f4       	brcc	.+16     	; 0x4c9c <__fp_round+0x20>
    4c8c:	bf 2b       	or	r27, r31
    4c8e:	11 f4       	brne	.+4      	; 0x4c94 <__fp_round+0x18>
    4c90:	60 ff       	sbrs	r22, 0
    4c92:	04 c0       	rjmp	.+8      	; 0x4c9c <__fp_round+0x20>
    4c94:	6f 5f       	subi	r22, 0xFF	; 255
    4c96:	7f 4f       	sbci	r23, 0xFF	; 255
    4c98:	8f 4f       	sbci	r24, 0xFF	; 255
    4c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c9c:	08 95       	ret

00004c9e <__divmodhi4>:
    4c9e:	97 fb       	bst	r25, 7
    4ca0:	07 2e       	mov	r0, r23
    4ca2:	16 f4       	brtc	.+4      	; 0x4ca8 <__divmodhi4+0xa>
    4ca4:	00 94       	com	r0
    4ca6:	07 d0       	rcall	.+14     	; 0x4cb6 <__divmodhi4_neg1>
    4ca8:	77 fd       	sbrc	r23, 7
    4caa:	09 d0       	rcall	.+18     	; 0x4cbe <__divmodhi4_neg2>
    4cac:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__udivmodhi4>
    4cb0:	07 fc       	sbrc	r0, 7
    4cb2:	05 d0       	rcall	.+10     	; 0x4cbe <__divmodhi4_neg2>
    4cb4:	3e f4       	brtc	.+14     	; 0x4cc4 <__divmodhi4_exit>

00004cb6 <__divmodhi4_neg1>:
    4cb6:	90 95       	com	r25
    4cb8:	81 95       	neg	r24
    4cba:	9f 4f       	sbci	r25, 0xFF	; 255
    4cbc:	08 95       	ret

00004cbe <__divmodhi4_neg2>:
    4cbe:	70 95       	com	r23
    4cc0:	61 95       	neg	r22
    4cc2:	7f 4f       	sbci	r23, 0xFF	; 255

00004cc4 <__divmodhi4_exit>:
    4cc4:	08 95       	ret

00004cc6 <__tablejump2__>:
    4cc6:	ee 0f       	add	r30, r30
    4cc8:	ff 1f       	adc	r31, r31
    4cca:	05 90       	lpm	r0, Z+
    4ccc:	f4 91       	lpm	r31, Z
    4cce:	e0 2d       	mov	r30, r0
    4cd0:	09 94       	ijmp

00004cd2 <__udivmodhi4>:
    4cd2:	aa 1b       	sub	r26, r26
    4cd4:	bb 1b       	sub	r27, r27
    4cd6:	51 e1       	ldi	r21, 0x11	; 17
    4cd8:	07 c0       	rjmp	.+14     	; 0x4ce8 <__udivmodhi4_ep>

00004cda <__udivmodhi4_loop>:
    4cda:	aa 1f       	adc	r26, r26
    4cdc:	bb 1f       	adc	r27, r27
    4cde:	a6 17       	cp	r26, r22
    4ce0:	b7 07       	cpc	r27, r23
    4ce2:	10 f0       	brcs	.+4      	; 0x4ce8 <__udivmodhi4_ep>
    4ce4:	a6 1b       	sub	r26, r22
    4ce6:	b7 0b       	sbc	r27, r23

00004ce8 <__udivmodhi4_ep>:
    4ce8:	88 1f       	adc	r24, r24
    4cea:	99 1f       	adc	r25, r25
    4cec:	5a 95       	dec	r21
    4cee:	a9 f7       	brne	.-22     	; 0x4cda <__udivmodhi4_loop>
    4cf0:	80 95       	com	r24
    4cf2:	90 95       	com	r25
    4cf4:	bc 01       	movw	r22, r24
    4cf6:	cd 01       	movw	r24, r26
    4cf8:	08 95       	ret

00004cfa <_exit>:
    4cfa:	f8 94       	cli

00004cfc <__stop_program>:
    4cfc:	ff cf       	rjmp	.-2      	; 0x4cfc <__stop_program>
    4cfe:	46 0d       	add	r20, r6
    4d00:	6e 0d       	add	r22, r14
    4d02:	57 0e       	add	r5, r23
    4d04:	6e 0d       	add	r22, r14
    4d06:	57 0e       	add	r5, r23
    4d08:	a1 0d       	add	r26, r1
    4d0a:	c2 0d       	add	r28, r2
    4d0c:	57 0e       	add	r5, r23
    4d0e:	19 0e       	add	r1, r25
    4d10:	25 0e       	add	r2, r21
    4d12:	16 13       	cpse	r17, r22
    4d14:	16 13       	cpse	r17, r22
    4d16:	52 13       	cpse	r21, r18
    4d18:	52 13       	cpse	r21, r18
    4d1a:	d7 13       	cpse	r29, r23
    4d1c:	0d 14       	cp	r0, r13
    4d1e:	06 13       	cpse	r16, r22
    4d20:	06 13       	cpse	r16, r22
    4d22:	26 14       	cp	r2, r6
    4d24:	06 13       	cpse	r16, r22
    4d26:	12 15       	cp	r17, r2
    4d28:	12 15       	cp	r17, r2
    4d2a:	b7 15       	cp	r27, r7
    4d2c:	06 13       	cpse	r16, r22
    4d2e:	ce 15       	cp	r28, r14
    4d30:	ef 15       	cp	r30, r15
