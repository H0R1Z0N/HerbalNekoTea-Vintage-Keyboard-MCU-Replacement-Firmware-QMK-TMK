   1               	# 1 "../../tmk_core/common/avr/xprintf.S"
   1               	;---------------------------------------------------------------------------;
   0               	
   0               	
   1               	/*
   2               	Copyright 2012 Jun Wako <wakojun@gmail.com>
   3               	
   4               	This program is free software: you can redistribute it and/or modify
   5               	it under the terms of the GNU General Public License as published by
   6               	the Free Software Foundation, either version 2 of the License, or
   7               	(at your option) any later version.
   8               	
   9               	This program is distributed in the hope that it will be useful,
  10               	but WITHOUT ANY WARRANTY; without even the implied warranty of
  11               	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12               	GNU General Public License for more details.
  13               	
  14               	You should have received a copy of the GNU General Public License
  15               	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16               	*/
  17               	
  18               	#ifndef CONFIG_H
  19               	#define CONFIG_H
  20               	
  21               	#include <avr/interrupt.h>
   1               	/* Copyright (c) 2002,2005,2007 Marek Michalkiewicz
   2               	   Copyright (c) 2007, Dean Camera
   3               	
   4               	   All rights reserved.
   5               	
   6               	   Redistribution and use in source and binary forms, with or without
   7               	   modification, are permitted provided that the following conditions are met:
   8               	
   9               	   * Redistributions of source code must retain the above copyright
  10               	     notice, this list of conditions and the following disclaimer.
  11               	
  12               	   * Redistributions in binary form must reproduce the above copyright
  13               	     notice, this list of conditions and the following disclaimer in
  14               	     the documentation and/or other materials provided with the
  15               	     distribution.
  16               	
  17               	   * Neither the name of the copyright holders nor the names of
  18               	     contributors may be used to endorse or promote products derived
  19               	     from this software without specific prior written permission.
  20               	
  21               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31               	  POSSIBILITY OF SUCH DAMAGE. */
  32               	
  33               	/* $Id: interrupt.h 2220 2011-02-22 21:08:58Z arcanum $ */
  34               	
  35               	#ifndef _AVR_INTERRUPT_H_
  36               	#define _AVR_INTERRUPT_H_
  37               	
  38               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h 2499 2016-01-28 14:41:31Z pitchumani $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM161__)
 126               	#  include <avr/io90pwm161.h>
 127               	#elif defined (__AVR_AT90PWM81__)
 128               	#  include <avr/io90pwm81.h>
 129               	#elif defined (__AVR_ATmega8U2__)
 130               	#  include <avr/iom8u2.h>
 131               	#elif defined (__AVR_ATmega16M1__)
 132               	#  include <avr/iom16m1.h>
 133               	#elif defined (__AVR_ATmega16U2__)
 134               	#  include <avr/iom16u2.h>
 135               	#elif defined (__AVR_ATmega16U4__)
 136               	#  include <avr/iom16u4.h>
 137               	#elif defined (__AVR_ATmega32C1__)
 138               	#  include <avr/iom32c1.h>
 139               	#elif defined (__AVR_ATmega32M1__)
 140               	#  include <avr/iom32m1.h>
 141               	#elif defined (__AVR_ATmega32U2__)
 142               	#  include <avr/iom32u2.h>
 143               	#elif defined (__AVR_ATmega32U4__)
 144               	#  include <avr/iom32u4.h>
   1               	/* Copyright (c) 2008 Atmel Corporation
 145               	#elif defined (__AVR_ATmega32U6__)
 146               	#  include <avr/iom32u6.h>
 147               	#elif defined (__AVR_ATmega64C1__)
 148               	#  include <avr/iom64c1.h>
 149               	#elif defined (__AVR_ATmega64M1__)
 150               	#  include <avr/iom64m1.h>
 151               	#elif defined (__AVR_ATmega128__)
 152               	#  include <avr/iom128.h>
 153               	#elif defined (__AVR_ATmega128A__)
 154               	#  include <avr/iom128a.h>
 155               	#elif defined (__AVR_ATmega1280__)
 156               	#  include <avr/iom1280.h>
 157               	#elif defined (__AVR_ATmega1281__)
 158               	#  include <avr/iom1281.h>
 159               	#elif defined (__AVR_ATmega1284__)
 160               	#  include <avr/iom1284.h>
 161               	#elif defined (__AVR_ATmega1284P__)
 162               	#  include <avr/iom1284p.h>
 163               	#elif defined (__AVR_ATmega128RFA1__)
 164               	#  include <avr/iom128rfa1.h>
 165               	#elif defined (__AVR_ATmega1284RFR2__)
 166               	#  include <avr/iom1284rfr2.h>
 167               	#elif defined (__AVR_ATmega128RFR2__)
 168               	#  include <avr/iom128rfr2.h>
 169               	#elif defined (__AVR_ATmega2564RFR2__)
 170               	#  include <avr/iom2564rfr2.h>
 171               	#elif defined (__AVR_ATmega256RFR2__)
 172               	#  include <avr/iom256rfr2.h>
 173               	#elif defined (__AVR_ATmega2560__)
 174               	#  include <avr/iom2560.h>
 175               	#elif defined (__AVR_ATmega2561__)
 176               	#  include <avr/iom2561.h>
 177               	#elif defined (__AVR_AT90CAN32__)
 178               	#  include <avr/iocan32.h>
 179               	#elif defined (__AVR_AT90CAN64__)
 180               	#  include <avr/iocan64.h>
 181               	#elif defined (__AVR_AT90CAN128__)
 182               	#  include <avr/iocan128.h>
 183               	#elif defined (__AVR_AT90USB82__)
 184               	#  include <avr/iousb82.h>
 185               	#elif defined (__AVR_AT90USB162__)
 186               	#  include <avr/iousb162.h>
 187               	#elif defined (__AVR_AT90USB646__)
 188               	#  include <avr/iousb646.h>
 189               	#elif defined (__AVR_AT90USB647__)
 190               	#  include <avr/iousb647.h>
 191               	#elif defined (__AVR_AT90USB1286__)
 192               	#  include <avr/iousb1286.h>
 193               	#elif defined (__AVR_AT90USB1287__)
 194               	#  include <avr/iousb1287.h>
 195               	#elif defined (__AVR_ATmega644RFR2__)
 196               	#  include <avr/iom644rfr2.h>
 197               	#elif defined (__AVR_ATmega64RFR2__)
 198               	#  include <avr/iom64rfr2.h>
 199               	#elif defined (__AVR_ATmega64__)
 200               	#  include <avr/iom64.h>
 201               	#elif defined (__AVR_ATmega64A__)
 202               	#  include <avr/iom64a.h>
 203               	#elif defined (__AVR_ATmega640__)
 204               	#  include <avr/iom640.h>
 205               	#elif defined (__AVR_ATmega644__)
 206               	#  include <avr/iom644.h>
 207               	#elif defined (__AVR_ATmega644A__)
 208               	#  include <avr/iom644a.h>
 209               	#elif defined (__AVR_ATmega644P__)
 210               	#  include <avr/iom644p.h>
 211               	#elif defined (__AVR_ATmega644PA__)
 212               	#  include <avr/iom644pa.h>
 213               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 214               	#  include <avr/iom645.h>
 215               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 216               	#  include <avr/iom6450.h>
 217               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 218               	#  include <avr/iom649.h>
 219               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 220               	#  include <avr/iom6490.h>
 221               	#elif defined (__AVR_ATmega649P__)
 222               	#  include <avr/iom649p.h>
 223               	#elif defined (__AVR_ATmega64HVE__)
 224               	#  include <avr/iom64hve.h>
 225               	#elif defined (__AVR_ATmega64HVE2__)
 226               	#  include <avr/iom64hve2.h>
 227               	#elif defined (__AVR_ATmega103__)
 228               	#  include <avr/iom103.h>
 229               	#elif defined (__AVR_ATmega32__)
 230               	#  include <avr/iom32.h>
 231               	#elif defined (__AVR_ATmega32A__)
 232               	#  include <avr/iom32a.h>
 233               	#elif defined (__AVR_ATmega323__)
 234               	#  include <avr/iom323.h>
 235               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 236               	#  include <avr/iom324.h>
 237               	#elif defined (__AVR_ATmega324PA__)
 238               	#  include <avr/iom324pa.h>
 239               	#elif defined (__AVR_ATmega325__) || defined (__AVR_ATmega325A__)
 240               	#  include <avr/iom325.h>
 241               	#elif defined (__AVR_ATmega325P__)
 242               	#  include <avr/iom325.h>
 243               	#elif defined (__AVR_ATmega325PA__)
 244               	#  include <avr/iom325pa.h>  
 245               	#elif defined (__AVR_ATmega3250__) || defined (__AVR_ATmega3250A__)
 246               	#  include <avr/iom3250.h>
 247               	#elif defined (__AVR_ATmega3250P__)
 248               	#  include <avr/iom3250.h>
 249               	#elif defined (__AVR_ATmega3250PA__)
 250               	#  include <avr/iom3250pa.h>  
 251               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 252               	#  include <avr/iom328p.h>
 253               	#elif defined (__AVR_ATmega329__) || defined (__AVR_ATmega329A__)
 254               	#  include <avr/iom329.h>
 255               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 256               	#  include <avr/iom329.h>
 257               	#elif defined (__AVR_ATmega3290__) || defined (__AVR_ATmega3290A__)
 258               	#  include <avr/iom3290.h>
 259               	#elif defined (__AVR_ATmega3290P__)
 260               	#  include <avr/iom3290.h>
 261               	#elif defined (__AVR_ATmega3290PA__)
 262               	#  include <avr/iom3290pa.h> 
 263               	#elif defined (__AVR_ATmega32HVB__)
 264               	#  include <avr/iom32hvb.h>
 265               	#elif defined (__AVR_ATmega32HVBREVB__)
 266               	#  include <avr/iom32hvbrevb.h>
 267               	#elif defined (__AVR_ATmega406__)
 268               	#  include <avr/iom406.h>
 269               	#elif defined (__AVR_ATmega16__)
 270               	#  include <avr/iom16.h>
 271               	#elif defined (__AVR_ATmega16A__)
 272               	#  include <avr/iom16a.h>
 273               	#elif defined (__AVR_ATmega161__)
 274               	#  include <avr/iom161.h>
 275               	#elif defined (__AVR_ATmega162__)
 276               	#  include <avr/iom162.h>
 277               	#elif defined (__AVR_ATmega163__)
 278               	#  include <avr/iom163.h>
 279               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 280               	#  include <avr/iom164.h>
 281               	#elif defined (__AVR_ATmega164PA__)
 282               	#  include <avr/iom164pa.h>
 283               	#elif defined (__AVR_ATmega165__)
 284               	#  include <avr/iom165.h>
 285               	#elif defined (__AVR_ATmega165A__)
 286               	#  include <avr/iom165a.h>
 287               	#elif defined (__AVR_ATmega165P__)
 288               	#  include <avr/iom165p.h>
 289               	#elif defined (__AVR_ATmega165PA__)
 290               	#  include <avr/iom165pa.h>
 291               	#elif defined (__AVR_ATmega168__)
 292               	#  include <avr/iom168.h>
 293               	#elif defined (__AVR_ATmega168A__)
 294               	#  include <avr/iom168a.h>
 295               	#elif defined (__AVR_ATmega168P__)
 296               	#  include <avr/iom168p.h>
 297               	#elif defined (__AVR_ATmega168PA__)
 298               	#  include <avr/iom168pa.h>
 299               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 300               	#  include <avr/iom169.h>
 301               	#elif defined (__AVR_ATmega169P__)
 302               	#  include <avr/iom169p.h>
 303               	#elif defined (__AVR_ATmega169PA__)
 304               	#  include <avr/iom169pa.h>
 305               	#elif defined (__AVR_ATmega8HVA__)
 306               	#  include <avr/iom8hva.h>
 307               	#elif defined (__AVR_ATmega16HVA__)
 308               	#  include <avr/iom16hva.h>
 309               	#elif defined (__AVR_ATmega16HVA2__)
 310               	#  include <avr/iom16hva2.h>
 311               	#elif defined (__AVR_ATmega16HVB__)
 312               	#  include <avr/iom16hvb.h>
 313               	#elif defined (__AVR_ATmega16HVBREVB__)
 314               	#  include <avr/iom16hvbrevb.h>
 315               	#elif defined (__AVR_ATmega8__)
 316               	#  include <avr/iom8.h>
 317               	#elif defined (__AVR_ATmega8A__)
 318               	#  include <avr/iom8a.h>
 319               	#elif defined (__AVR_ATmega48__)
 320               	#  include <avr/iom48.h>
 321               	#elif defined (__AVR_ATmega48A__)
 322               	#  include <avr/iom48a.h>
 323               	#elif defined (__AVR_ATmega48PA__)
 324               	#  include <avr/iom48pa.h>
 325               	#elif defined (__AVR_ATmega48PB__)
 326               	#  include <avr/iom48pb.h>
 327               	#elif defined (__AVR_ATmega48P__)
 328               	#  include <avr/iom48p.h>
 329               	#elif defined (__AVR_ATmega88__)
 330               	#  include <avr/iom88.h>
 331               	#elif defined (__AVR_ATmega88A__)
 332               	#  include <avr/iom88a.h>
 333               	#elif defined (__AVR_ATmega88P__)
 334               	#  include <avr/iom88p.h>
 335               	#elif defined (__AVR_ATmega88PA__)
 336               	#  include <avr/iom88pa.h>
 337               	#elif defined (__AVR_ATmega88PB__)
 338               	#  include <avr/iom88pb.h>
 339               	#elif defined (__AVR_ATmega8515__)
 340               	#  include <avr/iom8515.h>
 341               	#elif defined (__AVR_ATmega8535__)
 342               	#  include <avr/iom8535.h>
 343               	#elif defined (__AVR_AT90S8535__)
 344               	#  include <avr/io8535.h>
 345               	#elif defined (__AVR_AT90C8534__)
 346               	#  include <avr/io8534.h>
 347               	#elif defined (__AVR_AT90S8515__)
 348               	#  include <avr/io8515.h>
 349               	#elif defined (__AVR_AT90S4434__)
 350               	#  include <avr/io4434.h>
 351               	#elif defined (__AVR_AT90S4433__)
 352               	#  include <avr/io4433.h>
 353               	#elif defined (__AVR_AT90S4414__)
 354               	#  include <avr/io4414.h>
 355               	#elif defined (__AVR_ATtiny22__)
 356               	#  include <avr/iotn22.h>
 357               	#elif defined (__AVR_ATtiny26__)
 358               	#  include <avr/iotn26.h>
 359               	#elif defined (__AVR_AT90S2343__)
 360               	#  include <avr/io2343.h>
 361               	#elif defined (__AVR_AT90S2333__)
 362               	#  include <avr/io2333.h>
 363               	#elif defined (__AVR_AT90S2323__)
 364               	#  include <avr/io2323.h>
 365               	#elif defined (__AVR_AT90S2313__)
 366               	#  include <avr/io2313.h>
 367               	#elif defined (__AVR_ATtiny4__)
 368               	#  include <avr/iotn4.h>
 369               	#elif defined (__AVR_ATtiny5__)
 370               	#  include <avr/iotn5.h>
 371               	#elif defined (__AVR_ATtiny9__)
 372               	#  include <avr/iotn9.h>
 373               	#elif defined (__AVR_ATtiny10__)
 374               	#  include <avr/iotn10.h>
 375               	#elif defined (__AVR_ATtiny20__)
 376               	#  include <avr/iotn20.h>
 377               	#elif defined (__AVR_ATtiny40__)
 378               	#  include <avr/iotn40.h>
 379               	#elif defined (__AVR_ATtiny2313__)
 380               	#  include <avr/iotn2313.h>
 381               	#elif defined (__AVR_ATtiny2313A__)
 382               	#  include <avr/iotn2313a.h>
 383               	#elif defined (__AVR_ATtiny13__)
 384               	#  include <avr/iotn13.h>
 385               	#elif defined (__AVR_ATtiny13A__)
 386               	#  include <avr/iotn13a.h>
 387               	#elif defined (__AVR_ATtiny25__)
 388               	#  include <avr/iotn25.h>
 389               	#elif defined (__AVR_ATtiny4313__)
 390               	#  include <avr/iotn4313.h>
 391               	#elif defined (__AVR_ATtiny45__)
 392               	#  include <avr/iotn45.h>
 393               	#elif defined (__AVR_ATtiny85__)
 394               	#  include <avr/iotn85.h>
 395               	#elif defined (__AVR_ATtiny24__)
 396               	#  include <avr/iotn24.h>
 397               	#elif defined (__AVR_ATtiny24A__)
 398               	#  include <avr/iotn24a.h>
 399               	#elif defined (__AVR_ATtiny44__)
 400               	#  include <avr/iotn44.h>
 401               	#elif defined (__AVR_ATtiny44A__)
 402               	#  include <avr/iotn44a.h>
 403               	#elif defined (__AVR_ATtiny441__)
 404               	#  include <avr/iotn441.h>
 405               	#elif defined (__AVR_ATtiny84__)
 406               	#  include <avr/iotn84.h>
 407               	#elif defined (__AVR_ATtiny84A__)
 408               	#  include <avr/iotn84a.h> 
 409               	#elif defined (__AVR_ATtiny841__)
 410               	#  include <avr/iotn841.h> 
 411               	#elif defined (__AVR_ATtiny261__)
 412               	#  include <avr/iotn261.h>
 413               	#elif defined (__AVR_ATtiny261A__)
 414               	#  include <avr/iotn261a.h>
 415               	#elif defined (__AVR_ATtiny461__)
 416               	#  include <avr/iotn461.h>
 417               	#elif defined (__AVR_ATtiny461A__)
 418               	#  include <avr/iotn461a.h>
 419               	#elif defined (__AVR_ATtiny861__)
 420               	#  include <avr/iotn861.h>
 421               	#elif defined (__AVR_ATtiny861A__)
 422               	#  include <avr/iotn861a.h>
 423               	#elif defined (__AVR_ATtiny43U__)
 424               	#  include <avr/iotn43u.h>
 425               	#elif defined (__AVR_ATtiny48__)
 426               	#  include <avr/iotn48.h>
 427               	#elif defined (__AVR_ATtiny88__)
 428               	#  include <avr/iotn88.h>
 429               	#elif defined (__AVR_ATtiny828__)
 430               	#  include <avr/iotn828.h>
 431               	#elif defined (__AVR_ATtiny87__)
 432               	#  include <avr/iotn87.h>
 433               	#elif defined (__AVR_ATtiny167__)
 434               	#  include <avr/iotn167.h>
 435               	#elif defined (__AVR_ATtiny1634__)
 436               	#  include <avr/iotn1634.h>
 437               	#elif defined (__AVR_AT90SCR100__)
 438               	#  include <avr/io90scr100.h>
 439               	#elif defined (__AVR_ATxmega8E5__)
 440               	#  include <avr/iox8e5.h>
 441               	#elif defined (__AVR_ATxmega16A4__)
 442               	#  include <avr/iox16a4.h>
 443               	#elif defined (__AVR_ATxmega16A4U__)
 444               	#  include <avr/iox16a4u.h>
 445               	#elif defined (__AVR_ATxmega16C4__)
 446               	#  include <avr/iox16c4.h>
 447               	#elif defined (__AVR_ATxmega16D4__)
 448               	#  include <avr/iox16d4.h>
 449               	#elif defined (__AVR_ATxmega32A4__)
 450               	#  include <avr/iox32a4.h>
 451               	#elif defined (__AVR_ATxmega32A4U__)
 452               	#  include <avr/iox32a4u.h>
 453               	#elif defined (__AVR_ATxmega32C3__)
 454               	#  include <avr/iox32c3.h>
 455               	#elif defined (__AVR_ATxmega32C4__)
 456               	#  include <avr/iox32c4.h>
 457               	#elif defined (__AVR_ATxmega32D3__)
 458               	#  include <avr/iox32d3.h>
 459               	#elif defined (__AVR_ATxmega32D4__)
 460               	#  include <avr/iox32d4.h>
 461               	#elif defined (__AVR_ATxmega32E5__)
 462               	#  include <avr/iox32e5.h>
 463               	#elif defined (__AVR_ATxmega64A1__)
 464               	#  include <avr/iox64a1.h>
 465               	#elif defined (__AVR_ATxmega64A1U__)
 466               	#  include <avr/iox64a1u.h>
 467               	#elif defined (__AVR_ATxmega64A3__)
 468               	#  include <avr/iox64a3.h>
 469               	#elif defined (__AVR_ATxmega64A3U__)
 470               	#  include <avr/iox64a3u.h>
 471               	#elif defined (__AVR_ATxmega64A4U__)
 472               	#  include <avr/iox64a4u.h>
 473               	#elif defined (__AVR_ATxmega64B1__)
 474               	#  include <avr/iox64b1.h>
 475               	#elif defined (__AVR_ATxmega64B3__)
 476               	#  include <avr/iox64b3.h>
 477               	#elif defined (__AVR_ATxmega64C3__)
 478               	#  include <avr/iox64c3.h>
 479               	#elif defined (__AVR_ATxmega64D3__)
 480               	#  include <avr/iox64d3.h>
 481               	#elif defined (__AVR_ATxmega64D4__)
 482               	#  include <avr/iox64d4.h>
 483               	#elif defined (__AVR_ATxmega128A1__)
 484               	#  include <avr/iox128a1.h>
 485               	#elif defined (__AVR_ATxmega128A1U__)
 486               	#  include <avr/iox128a1u.h>
 487               	#elif defined (__AVR_ATxmega128A4U__)
 488               	#  include <avr/iox128a4u.h>
 489               	#elif defined (__AVR_ATxmega128A3__)
 490               	#  include <avr/iox128a3.h>
 491               	#elif defined (__AVR_ATxmega128A3U__)
 492               	#  include <avr/iox128a3u.h>
 493               	#elif defined (__AVR_ATxmega128B1__)
 494               	#  include <avr/iox128b1.h>
 495               	#elif defined (__AVR_ATxmega128B3__)
 496               	#  include <avr/iox128b3.h>
 497               	#elif defined (__AVR_ATxmega128C3__)
 498               	#  include <avr/iox128c3.h>
 499               	#elif defined (__AVR_ATxmega128D3__)
 500               	#  include <avr/iox128d3.h>
 501               	#elif defined (__AVR_ATxmega128D4__)
 502               	#  include <avr/iox128d4.h>
 503               	#elif defined (__AVR_ATxmega192A3__)
 504               	#  include <avr/iox192a3.h>
 505               	#elif defined (__AVR_ATxmega192A3U__)
 506               	#  include <avr/iox192a3u.h>
 507               	#elif defined (__AVR_ATxmega192C3__)
 508               	#  include <avr/iox192c3.h>
 509               	#elif defined (__AVR_ATxmega192D3__)
 510               	#  include <avr/iox192d3.h>
 511               	#elif defined (__AVR_ATxmega256A3__)
 512               	#  include <avr/iox256a3.h>
 513               	#elif defined (__AVR_ATxmega256A3U__)
 514               	#  include <avr/iox256a3u.h>
 515               	#elif defined (__AVR_ATxmega256A3B__)
 516               	#  include <avr/iox256a3b.h>
 517               	#elif defined (__AVR_ATxmega256A3BU__)
 518               	#  include <avr/iox256a3bu.h>
 519               	#elif defined (__AVR_ATxmega256C3__)
 520               	#  include <avr/iox256c3.h>
 521               	#elif defined (__AVR_ATxmega256D3__)
 522               	#  include <avr/iox256d3.h>
 523               	#elif defined (__AVR_ATxmega384C3__)
 524               	#  include <avr/iox384c3.h>
 525               	#elif defined (__AVR_ATxmega384D3__)
 526               	#  include <avr/iox384d3.h>
 527               	#elif defined (__AVR_ATA5702M322__)
 528               	#  include <avr/ioa5702m322.h>
 529               	#elif defined (__AVR_ATA5782__)
 530               	#  include <avr/ioa5782.h>
 531               	#elif defined (__AVR_ATA5790__)
 532               	#  include <avr/ioa5790.h>
 533               	#elif defined (__AVR_ATA5790N__)
 534               	#  include <avr/ioa5790n.h>
 535               	#elif defined (__AVR_ATA5831__)
 536               	#  include <avr/ioa5831.h>
 537               	#elif defined (__AVR_ATA5272__)
 538               	#  include <avr/ioa5272.h>
 539               	#elif defined (__AVR_ATA5505__)
 540               	#  include <avr/ioa5505.h>
 541               	#elif defined (__AVR_ATA5795__)
 542               	#  include <avr/ioa5795.h>
 543               	#elif defined (__AVR_ATA6285__)
 544               	#  include <avr/ioa6285.h>
 545               	#elif defined (__AVR_ATA6286__)
 546               	#  include <avr/ioa6286.h>
 547               	#elif defined (__AVR_ATA6289__)
 548               	#  include <avr/ioa6289.h>
 549               	#elif defined (__AVR_ATA6612C__)
 550               	#  include <avr/ioa6612c.h>
 551               	#elif defined (__AVR_ATA6613C__)
 552               	#  include <avr/ioa6613c.h>
 553               	#elif defined (__AVR_ATA6614Q__)
 554               	#  include <avr/ioa6614q.h>
 555               	#elif defined (__AVR_ATA6616C__)
 556               	#  include <avr/ioa6616c.h>
 557               	#elif defined (__AVR_ATA6617C__)
 558               	#  include <avr/ioa6617c.h>
 559               	#elif defined (__AVR_ATA664251__)
 560               	#  include <avr/ioa664251.h>
 561               	/* avr1: the following only supported for assembler programs */
 562               	#elif defined (__AVR_ATtiny28__)
 563               	#  include <avr/iotn28.h>
 564               	#elif defined (__AVR_AT90S1200__)
 565               	#  include <avr/io1200.h>
 566               	#elif defined (__AVR_ATtiny15__)
 567               	#  include <avr/iotn15.h>
 568               	#elif defined (__AVR_ATtiny12__)
 569               	#  include <avr/iotn12.h>
 570               	#elif defined (__AVR_ATtiny11__)
 571               	#  include <avr/iotn11.h>
 572               	#elif defined (__AVR_M3000__)
 573               	#  include <avr/iom3000.h>
 574               	#elif defined (__AVR_DEV_LIB_NAME__)
 575               	#  define __concat__(a,b) a##b
 576               	#  define __header1__(a,b) __concat__(a,b)
 577               	#  define __AVR_DEVICE_HEADER__ <avr/__header1__(io,__AVR_DEV_LIB_NAME__).h>
 578               	#  include __AVR_DEVICE_HEADER__
 579               	#else
 580               	#  if !defined(__COMPILING_AVR_LIBC__)
 581               	#    warning "device type not defined"
 582               	#  endif
 583               	#endif
 584               	
 585               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 586               	
 587               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 588               	
 589               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 590               	
 591               	#if __AVR_ARCH__ >= 100
 592               	#  include <avr/xmega.h>
 593               	#endif
 594               	
 595               	/* Include fuse.h after individual IO header files. */
 596               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 597               	
 598               	/* Include lock.h after individual IO header files. */
 599               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 600               	
  39               	
  22               	
   2               	; Extended itoa, puts, printf and atoi                     (C)ChaN, 2011
   3               	;---------------------------------------------------------------------------;
   4               	
  19               	.list
  20               	
  21               	#ifdef SPM_PAGESIZE	// Recent devices have "lpm Rd,Z+" and "movw".
  22               	.macro	_LPMI	reg
  23               		lpm	\reg, Z+
  24               	.endm
  25               	.macro	_MOVW	dh,dl, sh,sl
  26               		movw	\dl, \sl
  27               	.endm
  28               	#else			// Earlier devices do not have "lpm Rd,Z+" nor "movw".
  29               	.macro	_LPMI	reg
  30               		lpm
  31               		mov	\reg, r0
  32               		adiw	ZL, 1
  33               	.endm
  34               	.macro	_MOVW	dh,dl, sh,sl
  35               		mov	\dl, \sl
  36               		mov	\dh, \sh
  37               	.endm
  38               	#endif
  39               	
  40               	
  41               	
  42               	;---------------------------------------------------------------------------
  43               	; Stub function to forward to user output function
  44               	;
  45               	;Prototype: void xputc (char chr	// a character to be output
  46               	;			);
  47               	;Size: 12/12 words
  48               	
  49               	.section .bss
  50               	.global xfunc_out	; xfunc_out must be initialized before using this module.
  51 0000 0000      	xfunc_out:	.ds.w	1
  52               	.section .text
  53               	
  54               	
  55               	.func xputc
  56               	.global xputc
  57               	xputc:
  58               	#if CR_CRLF
  59:../../tmk_core/common/avr/xprintf.S **** 	cpi	r24, 10		;LF --> CRLF
  60:../../tmk_core/common/avr/xprintf.S **** 	brne	1f		;
  61:../../tmk_core/common/avr/xprintf.S **** 	ldi	r24, 13		;
  62:../../tmk_core/common/avr/xprintf.S **** 	rcall	1f		;
  63:../../tmk_core/common/avr/xprintf.S **** 	ldi	r24, 10		;/
  64:../../tmk_core/common/avr/xprintf.S **** 1:
  65:../../tmk_core/common/avr/xprintf.S **** #endif
  66:../../tmk_core/common/avr/xprintf.S **** 	push	ZH
  67:../../tmk_core/common/avr/xprintf.S **** 	push	ZL
  68:../../tmk_core/common/avr/xprintf.S **** 	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
  69:../../tmk_core/common/avr/xprintf.S **** 	lds	ZH, xfunc_out+1	;/
  70:../../tmk_core/common/avr/xprintf.S **** 	sbiw	ZL, 0		;Skip if null
  71:../../tmk_core/common/avr/xprintf.S **** 	breq	2f		;/
  72:../../tmk_core/common/avr/xprintf.S **** 	icall
  73:../../tmk_core/common/avr/xprintf.S **** 2:	pop	ZL
  74:../../tmk_core/common/avr/xprintf.S **** 	pop	ZH
  75:../../tmk_core/common/avr/xprintf.S **** 	ret
  76               	.endfunc
  77               	
  78               	
  79               	
  80               	;---------------------------------------------------------------------------
  81               	; Direct ROM string output
  82               	;
  83               	;Prototype: void xputs (const char *str_p // rom string to be output
  84               	;			);
  85               	
  86               	.func xputs
  87               	.global xputs
  88               	xputs:
  89:../../tmk_core/common/avr/xprintf.S **** 	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
  90:../../tmk_core/common/avr/xprintf.S **** 1:	_LPMI	r24
  91:../../tmk_core/common/avr/xprintf.S **** 	cpi	r24, 0
  92:../../tmk_core/common/avr/xprintf.S **** 	breq	2f
  93:../../tmk_core/common/avr/xprintf.S **** 	rcall	xputc
  94:../../tmk_core/common/avr/xprintf.S **** 	rjmp	1b
  95:../../tmk_core/common/avr/xprintf.S **** 2:	ret
  96               	.endfunc
  97               	
  98               	
  99               	;---------------------------------------------------------------------------
 100               	; Extended direct numeral string output (32bit version)
 101               	;
 102               	;Prototype: void xitoa (long value,	// value to be output
 103               	;                       char radix,	// radix
 104               	;                       char width);	// minimum width
 105               	;
 106               	
 107               	.func xitoa
 108               	.global xitoa
 109               	xitoa:
 110               					;r25:r22 = value, r20 = base, r18 = digits
 111:../../tmk_core/common/avr/xprintf.S **** 	clr	r31		;r31 = stack level
 112:../../tmk_core/common/avr/xprintf.S **** 	ldi	r30, ' '	;r30 = sign
 113:../../tmk_core/common/avr/xprintf.S **** 	ldi	r19, ' '	;r19 = filler
 114:../../tmk_core/common/avr/xprintf.S **** 	sbrs	r20, 7		;When base indicates signd format and the value
 115:../../tmk_core/common/avr/xprintf.S **** 	rjmp	0f		;is minus, add a '-'.
 116:../../tmk_core/common/avr/xprintf.S **** 	neg	r20		;
 117:../../tmk_core/common/avr/xprintf.S **** 	sbrs	r25, 7		;
 118:../../tmk_core/common/avr/xprintf.S **** 	rjmp	0f		;
 119:../../tmk_core/common/avr/xprintf.S **** 	ldi	r30, '-'	;
 120:../../tmk_core/common/avr/xprintf.S **** 	com	r22		;
 121:../../tmk_core/common/avr/xprintf.S **** 	com	r23		;
 122:../../tmk_core/common/avr/xprintf.S **** 	com	r24		;
 123:../../tmk_core/common/avr/xprintf.S **** 	com	r25		;
 124:../../tmk_core/common/avr/xprintf.S **** 	adc	r22, r1		;
 125:../../tmk_core/common/avr/xprintf.S **** 	adc	r23, r1		;
 126:../../tmk_core/common/avr/xprintf.S **** 	adc	r24, r1		;
 127:../../tmk_core/common/avr/xprintf.S **** 	adc	r25, r1		;/
 128:../../tmk_core/common/avr/xprintf.S **** 0:	sbrs	r18, 7		;When digits indicates zero filled,
 129:../../tmk_core/common/avr/xprintf.S **** 	rjmp	1f		;filler is '0'.
 130:../../tmk_core/common/avr/xprintf.S **** 	neg	r18		;
 131:../../tmk_core/common/avr/xprintf.S **** 	ldi	r19, '0'	;/
 132               					;----- string conversion loop
 133:../../tmk_core/common/avr/xprintf.S **** 1:	ldi	r21, 32		;r26 = r25:r22 % r20
 134:../../tmk_core/common/avr/xprintf.S **** 	clr	r26		;r25:r22 /= r20
 135:../../tmk_core/common/avr/xprintf.S **** 2:	lsl	r22		;
 136:../../tmk_core/common/avr/xprintf.S **** 	rol	r23		;
 137:../../tmk_core/common/avr/xprintf.S **** 	rol	r24		;
 138:../../tmk_core/common/avr/xprintf.S **** 	rol	r25		;
 139:../../tmk_core/common/avr/xprintf.S **** 	rol	r26		;
 140:../../tmk_core/common/avr/xprintf.S **** 	cp	r26, r20	;
 141:../../tmk_core/common/avr/xprintf.S **** 	brcs	3f		;
 142:../../tmk_core/common/avr/xprintf.S **** 	sub	r26, r20	;
 143:../../tmk_core/common/avr/xprintf.S **** 	inc	r22		;
 144:../../tmk_core/common/avr/xprintf.S **** 3:	dec	r21		;
 145:../../tmk_core/common/avr/xprintf.S **** 	brne	2b		;/
 146:../../tmk_core/common/avr/xprintf.S **** 	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
 147:../../tmk_core/common/avr/xprintf.S **** 	brcs	4f		;
 148:../../tmk_core/common/avr/xprintf.S **** 	subi	r26, -7		;
 149:../../tmk_core/common/avr/xprintf.S **** 4:	subi	r26, -'0'	;/
 150:../../tmk_core/common/avr/xprintf.S **** 	push	r26		;Stack it
 151:../../tmk_core/common/avr/xprintf.S **** 	inc	r31		;/
 152:../../tmk_core/common/avr/xprintf.S **** 	cp	r22, r1		;Repeat until r25:r22 gets zero
 153:../../tmk_core/common/avr/xprintf.S **** 	cpc	r23, r1		;
 154:../../tmk_core/common/avr/xprintf.S **** 	cpc	r24, r1		;
 155:../../tmk_core/common/avr/xprintf.S **** 	cpc	r25, r1		;
 156:../../tmk_core/common/avr/xprintf.S **** 	brne	1b		;/
 157               	
 158:../../tmk_core/common/avr/xprintf.S **** 	cpi	r30, '-'	;Minus sign if needed
 159:../../tmk_core/common/avr/xprintf.S **** 	brne	5f		;
 160:../../tmk_core/common/avr/xprintf.S **** 	push	r30		;
 161:../../tmk_core/common/avr/xprintf.S **** 	inc	r31		;/
 162:../../tmk_core/common/avr/xprintf.S **** 5:	cp	r31, r18	;Filler
 163:../../tmk_core/common/avr/xprintf.S **** 	brcc	6f		;
 164:../../tmk_core/common/avr/xprintf.S **** 	push	r19		;
 165:../../tmk_core/common/avr/xprintf.S **** 	inc	r31		;
 166:../../tmk_core/common/avr/xprintf.S **** 	rjmp	5b		;/
 167               	
 168:../../tmk_core/common/avr/xprintf.S **** 6:	pop	r24		;Flush stacked digits and exit
 169:../../tmk_core/common/avr/xprintf.S **** 	rcall	xputc		;
 170:../../tmk_core/common/avr/xprintf.S **** 	dec	r31		;
 171:../../tmk_core/common/avr/xprintf.S **** 	brne	6b		;/
 172               	
 173:../../tmk_core/common/avr/xprintf.S **** 	ret
 174               	.endfunc
 175               	
 176               	
 177               	
 178               	;---------------------------------------------------------------------------;
 179               	; Formatted string output (16/32bit version)
 180               	;
 181               	;Prototype:
 182               	; void __xprintf (const char *format_p, ...);
 183               	; void __xsprintf(char*, const char *format_p, ...);
 184               	; void __xfprintf(void(*func)(char), const char *format_p, ...);
 185               	;
 186               	
 187               	#if USE_XPRINTF
 188               	
 189               	.func xvprintf
 190               	xvprintf:
 191:../../tmk_core/common/avr/xprintf.S **** 	ld	ZL, Y+		;Z = pointer to format string
 192:../../tmk_core/common/avr/xprintf.S **** 	ld	ZH, Y+		;/
 193               	
 194:../../tmk_core/common/avr/xprintf.S **** 0:	_LPMI	r24		;Get a format char
 195:../../tmk_core/common/avr/xprintf.S **** 	cpi	r24, 0		;End of format string?
 196:../../tmk_core/common/avr/xprintf.S **** 	breq	90f		;/
 197:../../tmk_core/common/avr/xprintf.S **** 	cpi	r24, '%'	;Is format?
 198:../../tmk_core/common/avr/xprintf.S **** 	breq	20f		;/
 199:../../tmk_core/common/avr/xprintf.S **** 1:	rcall	xputc		;Put a normal character
 200:../../tmk_core/common/avr/xprintf.S **** 	rjmp	0b		;/
 201:../../tmk_core/common/avr/xprintf.S **** 90:	ret
 202               	
 203:../../tmk_core/common/avr/xprintf.S **** 20:	ldi	r18, 0		;r18: digits
 204:../../tmk_core/common/avr/xprintf.S **** 	clt			;T: filler
 205:../../tmk_core/common/avr/xprintf.S **** 	_LPMI	r21		;Get flags
 206:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, '%'	;Is a %?
 207:../../tmk_core/common/avr/xprintf.S **** 	breq	1b		;/
 208:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, '0'	;Zero filled?
 209:../../tmk_core/common/avr/xprintf.S **** 	brne	23f		;
 210:../../tmk_core/common/avr/xprintf.S **** 	set			;/
 211:../../tmk_core/common/avr/xprintf.S **** 22:	_LPMI	r21		;Get width
 212:../../tmk_core/common/avr/xprintf.S **** 23:	cpi	r21, '9'+1	;
 213:../../tmk_core/common/avr/xprintf.S **** 	brcc	24f		;
 214:../../tmk_core/common/avr/xprintf.S **** 	subi	r21, '0'	;
 215:../../tmk_core/common/avr/xprintf.S **** 	brcs	90b		;
 216:../../tmk_core/common/avr/xprintf.S **** 	lsl	r18		;
 217:../../tmk_core/common/avr/xprintf.S **** 	mov	r0, r18		;
 218:../../tmk_core/common/avr/xprintf.S **** 	lsl	r18		;
 219:../../tmk_core/common/avr/xprintf.S **** 	lsl	r18		;
 220:../../tmk_core/common/avr/xprintf.S **** 	add	r18, r0		;
 221:../../tmk_core/common/avr/xprintf.S **** 	add	r18, r21	;
 222:../../tmk_core/common/avr/xprintf.S **** 	rjmp	22b		;/
 223               	
 224:../../tmk_core/common/avr/xprintf.S **** 24:	brtc	25f		;get value (low word)
 225:../../tmk_core/common/avr/xprintf.S **** 	neg	r18		;
 226:../../tmk_core/common/avr/xprintf.S **** 25:	ld	r24, Y+		;
 227:../../tmk_core/common/avr/xprintf.S **** 	ld	r25, Y+		;/
 228:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'c'	;Is type character?
 229:../../tmk_core/common/avr/xprintf.S **** 	breq	1b		;/
 230:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, 's'	;Is type RAM string?
 231:../../tmk_core/common/avr/xprintf.S **** 	breq	50f		;/
 232:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'S'	;Is type ROM string?
 233:../../tmk_core/common/avr/xprintf.S **** 	breq	60f		;/
 234:../../tmk_core/common/avr/xprintf.S **** 	_MOVW	r23,r22,r25,r24	;r25:r22 = value
 235:../../tmk_core/common/avr/xprintf.S **** 	clr	r24		;
 236:../../tmk_core/common/avr/xprintf.S **** 	clr	r25		;
 237:../../tmk_core/common/avr/xprintf.S **** 	clt			;/
 238:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'l'	;Is long int?
 239:../../tmk_core/common/avr/xprintf.S **** 	brne	26f		;
 240:../../tmk_core/common/avr/xprintf.S **** 	ld	r24, Y+		;get value (high word)
 241:../../tmk_core/common/avr/xprintf.S **** 	ld	r25, Y+		;
 242:../../tmk_core/common/avr/xprintf.S **** 	set			;
 243:../../tmk_core/common/avr/xprintf.S **** 	_LPMI	r21		;/
 244:../../tmk_core/common/avr/xprintf.S **** 26:	cpi	r21, 'd'	;Is type signed decimal?
 245:../../tmk_core/common/avr/xprintf.S **** 	brne	27f		;/
 246:../../tmk_core/common/avr/xprintf.S **** 	ldi	r20, -10	;
 247:../../tmk_core/common/avr/xprintf.S **** 	brts	40f		;
 248:../../tmk_core/common/avr/xprintf.S **** 	sbrs	r23, 7		;
 249:../../tmk_core/common/avr/xprintf.S **** 	rjmp	40f		;
 250:../../tmk_core/common/avr/xprintf.S **** 	ldi	r24, -1		;
 251:../../tmk_core/common/avr/xprintf.S **** 	ldi	r25, -1		;
 252:../../tmk_core/common/avr/xprintf.S **** 	rjmp	40f		;/
 253:../../tmk_core/common/avr/xprintf.S **** 27:	cpi	r21, 'u'	;Is type unsigned decimal?
 254:../../tmk_core/common/avr/xprintf.S **** 	ldi	r20, 10		;
 255:../../tmk_core/common/avr/xprintf.S **** 	breq	40f		;/
 256:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'X'	;Is type hexdecimal?
 257:../../tmk_core/common/avr/xprintf.S **** 	ldi	r20, 16		;
 258:../../tmk_core/common/avr/xprintf.S **** 	breq	40f		;/
 259:../../tmk_core/common/avr/xprintf.S **** 	cpi	r21, 'b'	;Is type binary?
 260:../../tmk_core/common/avr/xprintf.S **** 	ldi	r20, 2		;
 261:../../tmk_core/common/avr/xprintf.S **** 	breq	40f		;/
 262:../../tmk_core/common/avr/xprintf.S **** 	ret			;abort
 263:../../tmk_core/common/avr/xprintf.S **** 40:	push	ZH		;Output the value
 264:../../tmk_core/common/avr/xprintf.S **** 	push	ZL		;
 265:../../tmk_core/common/avr/xprintf.S **** 	rcall	xitoa		;
 266:../../tmk_core/common/avr/xprintf.S **** 42:	pop	ZL		;
 267:../../tmk_core/common/avr/xprintf.S **** 	pop	ZH		;
 268:../../tmk_core/common/avr/xprintf.S **** 	rjmp	0b		;/
 269               	
 270:../../tmk_core/common/avr/xprintf.S **** 50:	push	ZH		;Put a string on the RAM
 271:../../tmk_core/common/avr/xprintf.S **** 	push	ZL
 272:../../tmk_core/common/avr/xprintf.S **** 	_MOVW	ZH,ZL, r25,r24
 273:../../tmk_core/common/avr/xprintf.S **** 51:	ld	r24, Z+
 274:../../tmk_core/common/avr/xprintf.S **** 	cpi	r24, 0
 275:../../tmk_core/common/avr/xprintf.S **** 	breq	42b
 276:../../tmk_core/common/avr/xprintf.S **** 	rcall	xputc
 277:../../tmk_core/common/avr/xprintf.S **** 	rjmp	51b
 278               	
 279:../../tmk_core/common/avr/xprintf.S **** 60:	push	ZH		;Put a string on the ROM
 280:../../tmk_core/common/avr/xprintf.S **** 	push	ZL
 281:../../tmk_core/common/avr/xprintf.S **** 	rcall	xputs
 282:../../tmk_core/common/avr/xprintf.S **** 	rjmp	42b
 283               	.endfunc
 284               	
 285               	
 286               	.func __xprintf
 287               	.global __xprintf
 288               	__xprintf:
 289:../../tmk_core/common/avr/xprintf.S **** 	push	YH
 290:../../tmk_core/common/avr/xprintf.S **** 	push	YL
 291:../../tmk_core/common/avr/xprintf.S **** 	in	YL, _SFR_IO_ADDR(SPL)
 292               	#ifdef SPH
 293:../../tmk_core/common/avr/xprintf.S **** 	in	YH, _SFR_IO_ADDR(SPH)
 294               	#else
 295               		clr	YH
 296               	#endif
 297:../../tmk_core/common/avr/xprintf.S **** 	adiw	YL, 5		;Y = pointer to arguments
 298:../../tmk_core/common/avr/xprintf.S **** 	rcall	xvprintf
 299:../../tmk_core/common/avr/xprintf.S **** 	pop	YL
 300:../../tmk_core/common/avr/xprintf.S **** 	pop	YH
 301:../../tmk_core/common/avr/xprintf.S **** 	ret
 302               	.endfunc
 303               	
 304               	
 305               	#if USE_XSPRINTF
 306               	
 307               	.func __xsprintf
 308               	putram:
 309               		_MOVW	ZH,ZL, r15,r14
 310               		st	Z+, r24
 311               		_MOVW	r15,r14, ZH,ZL
 312               		ret
 313               	.global __xsprintf
 314               	__xsprintf:
 315               		push	YH
 316               		push	YL
 317               		in	YL, _SFR_IO_ADDR(SPL)
 318               	#ifdef SPH
 319               		in	YH, _SFR_IO_ADDR(SPH)
 320               	#else
 321               		clr	YH
 322               	#endif
 323               		adiw	YL, 5		;Y = pointer to arguments
 324               		lds	ZL, xfunc_out+0	;Save registered output function
 325               		lds	ZH, xfunc_out+1	;
 326               		push	ZL		;
 327               		push	ZH		;/
 328               		ldi	ZL, lo8(pm(putram));Set local output function
 329               		ldi	ZH, hi8(pm(putram));
 330               		sts	xfunc_out+0, ZL	;
 331               		sts	xfunc_out+1, ZH	;/
 332               		push	r15		;Initialize pointer to string buffer
 333               		push	r14		;
 334               		ld	r14, Y+		;
 335               		ld	r15, Y+		;/
 336               		rcall	xvprintf
 337               		_MOVW	ZH,ZL, r15,r14	;Terminate string
 338               		st	Z, r1		;
 339               		pop	r14		;
 340               		pop	r15		;/
 341               		pop	ZH		;Restore registered output function
 342               		pop	ZL		;
 343               		sts	xfunc_out+0, ZL	;
 344               		sts	xfunc_out+1, ZH	;/
 345               		pop	YL
 346               		pop	YH
 347               		ret
 348               	.endfunc
 349               	#endif
 350               	
 351               	
 352               	#if USE_XFPRINTF
 353               	.func __xfprintf
 354               	.global __xfprintf
 355               	__xfprintf:
 356               		push	YH
 357               		push	YL
 358               		in	YL, _SFR_IO_ADDR(SPL)
 359               	#ifdef SPH
 360               		in	YH, _SFR_IO_ADDR(SPH)
 361               	#else
 362               		clr	YH
 363               	#endif
 364               		adiw	YL, 5		;Y = pointer to arguments
 365               		lds	ZL, xfunc_out+0	;Save registered output function
 366               		lds	ZH, xfunc_out+1	;
 367               		push	ZL		;
 368               		push	ZH		;/
 369               		ld	ZL, Y+		;Set output function
 370               		ld	ZH, Y+		;
 371               		sts	xfunc_out+0, ZL	;
 372               		sts	xfunc_out+1, ZH	;/
 373               		rcall	xvprintf
 374               		pop	ZH		;Restore registered output function
 375               		pop	ZL		;
 376               		sts	xfunc_out+0, ZL	;
 377               		sts	xfunc_out+1, ZH	;/
 378               		pop	YL
 379               		pop	YH
 380               		ret
 381               	.endfunc
 382               	#endif
 383               	
 384               	#endif
 385               	
 386               	
 387               	
 388               	;---------------------------------------------------------------------------
 389               	; Extended numeral string input
 390               	;
 391               	;Prototype:
 392               	; char xatoi (           /* 1: Successful, 0: Failed */
 393               	;      const char **str, /* pointer to pointer to source string */
 394               	;      long *res         /* result */
 395               	; );
 396               	;
DEFINED SYMBOLS
../../tmk_core/common/avr/xprintf.S:51     .bss:0000000000000000 xfunc_out
../../tmk_core/common/avr/xprintf.S:57     .text:0000000000000000 xputc
../../tmk_core/common/avr/xprintf.S:88     .text:0000000000000018 xputs
../../tmk_core/common/avr/xprintf.S:109    .text:0000000000000026 xitoa
../../tmk_core/common/avr/xprintf.S:190    .text:000000000000009c xvprintf
../../tmk_core/common/avr/xprintf.S:288    .text:000000000000014a __xprintf

NO UNDEFINED SYMBOLS
