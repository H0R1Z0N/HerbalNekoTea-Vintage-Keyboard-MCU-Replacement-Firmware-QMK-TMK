   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB107:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** #ifndef TAPPING_TERM
   4:quantum/quantum.c **** #define TAPPING_TERM 200
   5:quantum/quantum.c **** #endif
   6:quantum/quantum.c **** 
   7:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 7 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 7 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
   8:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 8 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 8 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
   9:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  10:quantum/quantum.c ****     break;
  48               		.loc 1 10 5 is_stmt 1 view .LVU4
  11:quantum/quantum.c ****   default:
  12:quantum/quantum.c ****     return;
  13:quantum/quantum.c ****   }
  14:quantum/quantum.c **** 
  15:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 15 3 view .LVU5
  50               		.loc 1 15 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  16:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 16 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  17:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 17 3 view .LVU8
  60               		.loc 1 17 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  18:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 18 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  19:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 19 3 view .LVU11
  70               		.loc 1 19 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  20:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 20 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  21:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 21 3 view .LVU14
  80               		.loc 1 21 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  22:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 22 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  23:quantum/quantum.c **** 
  24:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 24 3 view .LVU17
  90               		.loc 1 24 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  25:quantum/quantum.c **** 
  26:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 26 3 is_stmt 1 view .LVU19
  27:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 27 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  28:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 28 3 view .LVU21
  29:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 29 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  30:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 30 3 view .LVU23
  31:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 31 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  32:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 32 3 view .LVU25
  33:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 33 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  34:quantum/quantum.c **** }
 117               		.loc 1 34 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 34 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  33:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 33 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 34 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 34 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 34 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE107:
 143               		.section	.text.register_code16,"ax",@progbits
 144               	.global	register_code16
 146               	register_code16:
 147               	.LVL14:
 148               	.LFB108:
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** void register_code16 (uint16_t code) {
 149               		.loc 1 36 38 is_stmt 1 view -0
 150               		.cfi_startproc
 151               		.loc 1 36 38 is_stmt 0 view .LVU34
 152 0000 CF93      		push r28
 153               	.LCFI4:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 28, -2
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 1 */
 159               	.L__stack_usage = 1
 160 0002 C82F      		mov r28,r24
  37:quantum/quantum.c ****   do_code16 (code, register_code);
 161               		.loc 1 37 3 is_stmt 1 view .LVU35
 162 0004 60E0      		ldi r22,lo8(gs(register_code))
 163 0006 70E0      		ldi r23,hi8(gs(register_code))
 164 0008 0E94 0000 		call do_code16
 165               	.LVL15:
  38:quantum/quantum.c ****   register_code (code);
 166               		.loc 1 38 3 view .LVU36
 167 000c 8C2F      		mov r24,r28
 168               	/* epilogue start */
  39:quantum/quantum.c **** }
 169               		.loc 1 39 1 is_stmt 0 view .LVU37
 170 000e CF91      		pop r28
  38:quantum/quantum.c ****   register_code (code);
 171               		.loc 1 38 3 view .LVU38
 172 0010 0C94 0000 		jmp register_code
 173               	.LVL16:
 174               		.cfi_endproc
 175               	.LFE108:
 177               		.section	.text.unregister_code16,"ax",@progbits
 178               	.global	unregister_code16
 180               	unregister_code16:
 181               	.LVL17:
 182               	.LFB109:
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 183               		.loc 1 41 40 is_stmt 1 view -0
 184               		.cfi_startproc
 185               		.loc 1 41 40 is_stmt 0 view .LVU40
 186 0000 CF93      		push r28
 187               	.LCFI5:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 28, -2
 190 0002 DF93      		push r29
 191               	.LCFI6:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 29, -3
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 2 */
 197               	.L__stack_usage = 2
 198 0004 EC01      		movw r28,r24
  42:quantum/quantum.c ****   unregister_code (code);
 199               		.loc 1 42 3 is_stmt 1 view .LVU41
 200 0006 0E94 0000 		call unregister_code
 201               	.LVL18:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 202               		.loc 1 43 3 view .LVU42
 203 000a 60E0      		ldi r22,lo8(gs(unregister_code))
 204 000c 70E0      		ldi r23,hi8(gs(unregister_code))
 205 000e CE01      		movw r24,r28
 206               	/* epilogue start */
  44:quantum/quantum.c **** }
 207               		.loc 1 44 1 is_stmt 0 view .LVU43
 208 0010 DF91      		pop r29
 209 0012 CF91      		pop r28
 210               	.LVL19:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 211               		.loc 1 43 3 view .LVU44
 212 0014 0C94 0000 		jmp do_code16
 213               	.LVL20:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 214               		.loc 1 43 3 view .LVU45
 215               		.cfi_endproc
 216               	.LFE109:
 218               		.section	.text.process_action_kb,"ax",@progbits
 219               		.weak	process_action_kb
 221               	process_action_kb:
 222               	.LVL21:
 223               	.LFB110:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** __attribute__ ((weak))
  47:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 224               		.loc 1 47 45 is_stmt 1 view -0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
  48:quantum/quantum.c ****   return true;
 230               		.loc 1 48 3 view .LVU47
  49:quantum/quantum.c **** }
 231               		.loc 1 49 1 is_stmt 0 view .LVU48
 232 0000 81E0      		ldi r24,lo8(1)
 233               	.LVL22:
 234               	/* epilogue start */
 235               		.loc 1 49 1 view .LVU49
 236 0002 0895      		ret
 237               		.cfi_endproc
 238               	.LFE110:
 240               		.section	.text.process_record_user,"ax",@progbits
 241               		.weak	process_record_user
 243               	process_record_user:
 244               	.LVL23:
 245               	.LFB112:
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** __attribute__ ((weak))
  52:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  53:quantum/quantum.c ****   return process_record_user(keycode, record);
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** __attribute__ ((weak))
  57:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 246               		.loc 1 57 65 is_stmt 1 view -0
 247               		.cfi_startproc
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  58:quantum/quantum.c ****   return true;
 252               		.loc 1 58 3 view .LVU51
  59:quantum/quantum.c **** }
 253               		.loc 1 59 1 is_stmt 0 view .LVU52
 254 0000 81E0      		ldi r24,lo8(1)
 255               	.LVL24:
 256               	/* epilogue start */
 257               		.loc 1 59 1 view .LVU53
 258 0002 0895      		ret
 259               		.cfi_endproc
 260               	.LFE112:
 262               		.section	.text.process_record_kb,"ax",@progbits
 263               		.weak	process_record_kb
 265               	process_record_kb:
 266               	.LVL25:
 267               	.LFB111:
  52:quantum/quantum.c ****   return process_record_user(keycode, record);
 268               		.loc 1 52 63 is_stmt 1 view -0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
  53:quantum/quantum.c **** }
 274               		.loc 1 53 3 view .LVU55
  53:quantum/quantum.c **** }
 275               		.loc 1 53 10 is_stmt 0 view .LVU56
 276 0000 0C94 0000 		jmp process_record_user
 277               	.LVL26:
  53:quantum/quantum.c **** }
 278               		.loc 1 53 10 view .LVU57
 279               		.cfi_endproc
 280               	.LFE111:
 282               		.section	.text.reset_keyboard,"ax",@progbits
 283               	.global	reset_keyboard
 285               	reset_keyboard:
 286               	.LFB113:
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** void reset_keyboard(void) {
 287               		.loc 1 61 27 is_stmt 1 view -0
 288               		.cfi_startproc
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 0 */
 292               	.L__stack_usage = 0
  62:quantum/quantum.c ****   clear_keyboard();
 293               		.loc 1 62 3 view .LVU59
 294 0000 0E94 0000 		call clear_keyboard
 295               	.LVL27:
  63:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  64:quantum/quantum.c ****   stop_all_notes();
  65:quantum/quantum.c ****   shutdown_user();
  66:quantum/quantum.c **** #endif
  67:quantum/quantum.c ****   wait_ms(250);
 296               		.loc 1 67 3 view .LVU60
 297               	.LBB4:
 298               	.LBI4:
 299               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 300               		.loc 2 166 1 view .LVU61
 301               	.LBB5:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 302               		.loc 2 168 2 view .LVU62
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 303               		.loc 2 172 2 view .LVU63
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 304               		.loc 2 173 2 view .LVU64
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 305               		.loc 2 174 2 view .LVU65
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 306               		.loc 2 184 3 view .LVU66
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 307               		.loc 2 187 2 view .LVU67
 308 0004 2FEF      		ldi r18,lo8(799999)
 309 0006 84E3      		ldi r24,hi8(799999)
 310 0008 9CE0      		ldi r25,hlo8(799999)
 311 000a 2150      	1:	subi r18,1
 312 000c 8040      		sbci r24,0
 313 000e 9040      		sbci r25,0
 314 0010 01F4      		brne 1b
 315 0012 00C0      		rjmp .
 316 0014 0000      		nop
 317               	.LVL28:
 318               		.loc 2 187 2 is_stmt 0 view .LVU68
 319               	.LBE5:
 320               	.LBE4:
  68:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  69:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  70:quantum/quantum.c **** #endif
  71:quantum/quantum.c ****   bootloader_jump();
 321               		.loc 1 71 3 is_stmt 1 view .LVU69
 322 0016 0C94 0000 		jmp bootloader_jump
 323               	.LVL29:
 324               		.cfi_endproc
 325               	.LFE113:
 327               		.section	.text.process_record_quantum,"ax",@progbits
 328               	.global	process_record_quantum
 330               	process_record_quantum:
 331               	.LVL30:
 332               	.LFB114:
  72:quantum/quantum.c **** }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c **** // Shift / paren setup
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** #ifndef LSPO_KEY
  77:quantum/quantum.c ****   #define LSPO_KEY KC_9
  78:quantum/quantum.c **** #endif
  79:quantum/quantum.c **** #ifndef RSPC_KEY
  80:quantum/quantum.c ****   #define RSPC_KEY KC_0
  81:quantum/quantum.c **** #endif
  82:quantum/quantum.c **** 
  83:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  84:quantum/quantum.c **** static uint16_t scs_timer = 0;
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 333               		.loc 1 86 50 view -0
 334               		.cfi_startproc
 335               		.loc 1 86 50 is_stmt 0 view .LVU71
 336 0000 EF92      		push r14
 337               	.LCFI7:
 338               		.cfi_def_cfa_offset 3
 339               		.cfi_offset 14, -2
 340 0002 FF92      		push r15
 341               	.LCFI8:
 342               		.cfi_def_cfa_offset 4
 343               		.cfi_offset 15, -3
 344 0004 0F93      		push r16
 345               	.LCFI9:
 346               		.cfi_def_cfa_offset 5
 347               		.cfi_offset 16, -4
 348 0006 1F93      		push r17
 349               	.LCFI10:
 350               		.cfi_def_cfa_offset 6
 351               		.cfi_offset 17, -5
 352 0008 CF93      		push r28
 353               	.LCFI11:
 354               		.cfi_def_cfa_offset 7
 355               		.cfi_offset 28, -6
 356 000a DF93      		push r29
 357               	.LCFI12:
 358               		.cfi_def_cfa_offset 8
 359               		.cfi_offset 29, -7
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 6 */
 363               	.L__stack_usage = 6
 364 000c 8C01      		movw r16,r24
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  89:quantum/quantum.c ****   keypos_t key = record->event.key;
 365               		.loc 1 89 3 is_stmt 1 view .LVU72
 366               		.loc 1 89 12 is_stmt 0 view .LVU73
 367 000e FC01      		movw r30,r24
 368 0010 E080      		ld r14,Z
 369 0012 F180      		ldd r15,Z+1
 370               	.LVL31:
  90:quantum/quantum.c ****   uint16_t keycode;
 371               		.loc 1 90 3 is_stmt 1 view .LVU74
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  93:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  94:quantum/quantum.c ****     if (!disable_action_cache) {
 372               		.loc 1 94 5 view .LVU75
 373               		.loc 1 94 8 is_stmt 0 view .LVU76
 374 0014 8091 0000 		lds r24,disable_action_cache
 375               	.LVL32:
 376               		.loc 1 94 8 view .LVU77
 377 0018 8111      		cpse r24,__zero_reg__
 378 001a 00C0      		rjmp .L28
 379               	.LBB6:
  95:quantum/quantum.c ****       uint8_t layer;
 380               		.loc 1 95 7 is_stmt 1 view .LVU78
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****       if (record->event.pressed) {
 381               		.loc 1 97 7 view .LVU79
 382               		.loc 1 97 10 is_stmt 0 view .LVU80
 383 001c 8281      		ldd r24,Z+2
 384 001e 8823      		tst r24
 385 0020 01F0      		breq .L29
  98:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 386               		.loc 1 98 9 is_stmt 1 view .LVU81
 387               	.LVL33:
 388               		.loc 1 98 17 is_stmt 0 view .LVU82
 389 0022 C701      		movw r24,r14
 390 0024 0E94 0000 		call layer_switch_get_layer
 391               	.LVL34:
 392 0028 C82F      		mov r28,r24
 393               	.LVL35:
  99:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 394               		.loc 1 99 9 is_stmt 1 view .LVU83
 395 002a 682F      		mov r22,r24
 396 002c C701      		movw r24,r14
 397               	.LVL36:
 398               		.loc 1 99 9 is_stmt 0 view .LVU84
 399 002e 0E94 0000 		call update_source_layers_cache
 400               	.LVL37:
 401               	.L30:
 100:quantum/quantum.c ****       } else {
 101:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 102:quantum/quantum.c ****       }
 103:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 402               		.loc 1 103 7 is_stmt 1 view .LVU85
 403               		.loc 1 103 17 is_stmt 0 view .LVU86
 404 0032 B701      		movw r22,r14
 405 0034 8C2F      		mov r24,r28
 406               	.LVL38:
 407               	.L85:
 408               		.loc 1 103 17 view .LVU87
 409               	.LBE6:
 104:quantum/quantum.c ****     } else
 105:quantum/quantum.c ****   #endif
 106:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 410               		.loc 1 106 15 view .LVU88
 411 0036 0E94 0000 		call keymap_key_to_keycode
 412               	.LVL39:
 413 003a EC01      		movw r28,r24
 414               	.LVL40:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c ****     // This is how you use actions here
 109:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 110:quantum/quantum.c ****     //   action_t action;
 111:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 112:quantum/quantum.c ****     //   process_action(record, action);
 113:quantum/quantum.c ****     //   return false;
 114:quantum/quantum.c ****     // }
 115:quantum/quantum.c **** 
 116:quantum/quantum.c ****   if (!(
 415               		.loc 1 116 3 is_stmt 1 view .LVU89
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 416               		.loc 1 117 5 is_stmt 0 view .LVU90
 417 003c B801      		movw r22,r16
 418 003e 0E94 0000 		call process_record_kb
 419               	.LVL41:
 420               		.loc 1 117 40 view .LVU91
 421 0042 8823      		tst r24
 422 0044 01F4      		brne .+2
 423 0046 00C0      		rjmp .L33
 118:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 119:quantum/quantum.c ****     process_midi(keycode, record) &&
 120:quantum/quantum.c ****   #endif
 121:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 122:quantum/quantum.c ****     process_music(keycode, record) &&
 123:quantum/quantum.c ****   #endif
 124:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 125:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 126:quantum/quantum.c ****   #endif
 127:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 128:quantum/quantum.c ****     process_leader(keycode, record) &&
 424               		.loc 1 128 5 discriminator 2 view .LVU92
 425 0048 B801      		movw r22,r16
 426 004a CE01      		movw r24,r28
 427 004c 0E94 0000 		call process_leader
 428               	.LVL42:
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 429               		.loc 1 117 40 discriminator 2 view .LVU93
 430 0050 8823      		tst r24
 431 0052 01F4      		brne .+2
 432 0054 00C0      		rjmp .L33
 129:quantum/quantum.c ****   #endif
 130:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 131:quantum/quantum.c ****     process_chording(keycode, record) &&
 132:quantum/quantum.c ****   #endif
 133:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 134:quantum/quantum.c ****     process_unicode(keycode, record) &&
 135:quantum/quantum.c ****   #endif
 136:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 137:quantum/quantum.c ****     process_ucis(keycode, record) &&
 138:quantum/quantum.c ****   #endif
 139:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 140:quantum/quantum.c ****     process_printer(keycode, record) &&
 141:quantum/quantum.c ****   #endif
 142:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 143:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 144:quantum/quantum.c ****   #endif
 145:quantum/quantum.c ****       true)) {
 146:quantum/quantum.c ****     return false;
 147:quantum/quantum.c ****   }
 148:quantum/quantum.c **** 
 149:quantum/quantum.c ****   // Shift / paren setup
 150:quantum/quantum.c **** 
 151:quantum/quantum.c ****   switch(keycode) {
 433               		.loc 1 151 3 is_stmt 1 view .LVU94
 434 0056 C531      		cpi r28,21
 435 0058 F0E7      		ldi r31,112
 436 005a DF07      		cpc r29,r31
 437 005c 00F4      		brsh .L35
 438 005e C230      		cpi r28,2
 439 0060 80E7      		ldi r24,112
 440 0062 D807      		cpc r29,r24
 441 0064 00F0      		brlo .+2
 442 0066 00C0      		rjmp .L36
 443 0068 C115      		cp r28,__zero_reg__
 444 006a E0E7      		ldi r30,112
 445 006c DE07      		cpc r29,r30
 446 006e 01F0      		breq .L37
 447 0070 C130      		cpi r28,1
 448 0072 D047      		sbci r29,112
 449 0074 01F0      		breq .L38
 450               	.L39:
 152:quantum/quantum.c ****     case RESET:
 153:quantum/quantum.c ****       if (record->event.pressed) {
 154:quantum/quantum.c ****         reset_keyboard();
 155:quantum/quantum.c ****       }
 156:quantum/quantum.c **** 	  return false;
 157:quantum/quantum.c ****       break;
 158:quantum/quantum.c ****     case DEBUG:
 159:quantum/quantum.c ****       if (record->event.pressed) {
 160:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 161:quantum/quantum.c ****           debug_enable = true;
 162:quantum/quantum.c ****       }
 163:quantum/quantum.c **** 	  return false;
 164:quantum/quantum.c ****       break;
 165:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 166:quantum/quantum.c **** 	case RGB_TOG:
 167:quantum/quantum.c **** 		if (record->event.pressed) {
 168:quantum/quantum.c **** 			rgblight_toggle();
 169:quantum/quantum.c ****       }
 170:quantum/quantum.c **** 	  return false;
 171:quantum/quantum.c ****       break;
 172:quantum/quantum.c **** 	case RGB_MOD:
 173:quantum/quantum.c **** 		if (record->event.pressed) {
 174:quantum/quantum.c **** 			rgblight_step();
 175:quantum/quantum.c ****       }
 176:quantum/quantum.c **** 	  return false;
 177:quantum/quantum.c ****       break;
 178:quantum/quantum.c **** 	case RGB_HUI:
 179:quantum/quantum.c **** 		if (record->event.pressed) {
 180:quantum/quantum.c **** 			rgblight_increase_hue();
 181:quantum/quantum.c ****       }
 182:quantum/quantum.c **** 	  return false;
 183:quantum/quantum.c ****       break;
 184:quantum/quantum.c **** 	case RGB_HUD:
 185:quantum/quantum.c **** 		if (record->event.pressed) {
 186:quantum/quantum.c **** 			rgblight_decrease_hue();
 187:quantum/quantum.c ****       }
 188:quantum/quantum.c **** 	  return false;
 189:quantum/quantum.c ****       break;
 190:quantum/quantum.c **** 	case RGB_SAI:
 191:quantum/quantum.c **** 		if (record->event.pressed) {
 192:quantum/quantum.c **** 			rgblight_increase_sat();
 193:quantum/quantum.c ****       }
 194:quantum/quantum.c **** 	  return false;
 195:quantum/quantum.c ****       break;
 196:quantum/quantum.c **** 	case RGB_SAD:
 197:quantum/quantum.c **** 		if (record->event.pressed) {
 198:quantum/quantum.c **** 			rgblight_decrease_sat();
 199:quantum/quantum.c ****       }
 200:quantum/quantum.c **** 	  return false;
 201:quantum/quantum.c ****       break;
 202:quantum/quantum.c **** 	case RGB_VAI:
 203:quantum/quantum.c **** 		if (record->event.pressed) {
 204:quantum/quantum.c **** 			rgblight_increase_val();
 205:quantum/quantum.c ****       }
 206:quantum/quantum.c **** 	  return false;
 207:quantum/quantum.c ****       break;
 208:quantum/quantum.c **** 	case RGB_VAD:
 209:quantum/quantum.c **** 		if (record->event.pressed) {
 210:quantum/quantum.c **** 			rgblight_decrease_val();
 211:quantum/quantum.c ****       }
 212:quantum/quantum.c **** 	  return false;
 213:quantum/quantum.c ****       break;
 214:quantum/quantum.c **** 	#endif
 215:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 216:quantum/quantum.c ****       if (record->event.pressed) {
 217:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 218:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 219:quantum/quantum.c ****             eeconfig_init();
 220:quantum/quantum.c ****         }
 221:quantum/quantum.c ****         /* keymap config */
 222:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 223:quantum/quantum.c ****         switch (keycode)
 224:quantum/quantum.c ****         {
 225:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 226:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 227:quantum/quantum.c ****             break;
 228:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 229:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 230:quantum/quantum.c ****             break;
 231:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 232:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 233:quantum/quantum.c ****             break;
 234:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 235:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 236:quantum/quantum.c ****             break;
 237:quantum/quantum.c ****           case MAGIC_NO_GUI:
 238:quantum/quantum.c ****             keymap_config.no_gui = true;
 239:quantum/quantum.c ****             break;
 240:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 241:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 244:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 247:quantum/quantum.c ****             keymap_config.nkro = true;
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 251:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 252:quantum/quantum.c ****             break;
 253:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 254:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 255:quantum/quantum.c ****             break;
 256:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 257:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 258:quantum/quantum.c ****             break;
 259:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 260:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 261:quantum/quantum.c ****             break;
 262:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 263:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 264:quantum/quantum.c ****             break;
 265:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 266:quantum/quantum.c ****             keymap_config.no_gui = false;
 267:quantum/quantum.c ****             break;
 268:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 269:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 272:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 275:quantum/quantum.c ****             keymap_config.nkro = false;
 276:quantum/quantum.c ****             break;
 277:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 278:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 279:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 280:quantum/quantum.c ****             break;
 281:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 282:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 283:quantum/quantum.c ****             break;
 284:quantum/quantum.c ****           default:
 285:quantum/quantum.c ****             break;
 286:quantum/quantum.c ****         }
 287:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 288:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 289:quantum/quantum.c **** 
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****       }
 292:quantum/quantum.c ****       break;
 293:quantum/quantum.c ****     case KC_LSPO: {
 294:quantum/quantum.c ****       if (record->event.pressed) {
 295:quantum/quantum.c ****         shift_interrupted[0] = false;
 296:quantum/quantum.c ****         scs_timer = timer_read ();
 297:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 298:quantum/quantum.c ****       }
 299:quantum/quantum.c ****       else {
 300:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 301:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 302:quantum/quantum.c ****             shift_interrupted[0] = true;
 303:quantum/quantum.c ****             shift_interrupted[1] = true;
 304:quantum/quantum.c ****           }
 305:quantum/quantum.c ****         #endif
 306:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 307:quantum/quantum.c ****           register_code(LSPO_KEY);
 308:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 309:quantum/quantum.c ****         }
 310:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****       return false;
 313:quantum/quantum.c ****       // break;
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c **** 
 316:quantum/quantum.c ****     case KC_RSPC: {
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         shift_interrupted[1] = false;
 319:quantum/quantum.c ****         scs_timer = timer_read ();
 320:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 321:quantum/quantum.c ****       }
 322:quantum/quantum.c ****       else {
 323:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 324:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 325:quantum/quantum.c ****             shift_interrupted[0] = true;
 326:quantum/quantum.c ****             shift_interrupted[1] = true;
 327:quantum/quantum.c ****           }
 328:quantum/quantum.c ****         #endif
 329:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 330:quantum/quantum.c ****           register_code(RSPC_KEY);
 331:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****       return false;
 336:quantum/quantum.c ****       // break;
 337:quantum/quantum.c ****     }
 338:quantum/quantum.c ****     default: {
 339:quantum/quantum.c ****       shift_interrupted[0] = true;
 451               		.loc 1 339 7 view .LVU95
 452               		.loc 1 339 28 is_stmt 0 view .LVU96
 453 0076 81E0      		ldi r24,lo8(1)
 454 0078 8093 0000 		sts shift_interrupted,r24
 340:quantum/quantum.c ****       shift_interrupted[1] = true;
 455               		.loc 1 340 7 is_stmt 1 view .LVU97
 456               		.loc 1 340 28 is_stmt 0 view .LVU98
 457 007c 8093 0000 		sts shift_interrupted+1,r24
 341:quantum/quantum.c ****       break;
 458               		.loc 1 341 7 is_stmt 1 view .LVU99
 459               	.L42:
 342:quantum/quantum.c ****     }
 343:quantum/quantum.c ****   }
 344:quantum/quantum.c **** 
 345:quantum/quantum.c ****   return process_action_kb(record);
 460               		.loc 1 345 3 view .LVU100
 461               		.loc 1 345 10 is_stmt 0 view .LVU101
 462 0080 C801      		movw r24,r16
 463               	/* epilogue start */
 346:quantum/quantum.c **** }
 464               		.loc 1 346 1 view .LVU102
 465 0082 DF91      		pop r29
 466 0084 CF91      		pop r28
 467               	.LVL43:
 468               		.loc 1 346 1 view .LVU103
 469 0086 1F91      		pop r17
 470 0088 0F91      		pop r16
 471               	.LVL44:
 472               		.loc 1 346 1 view .LVU104
 473 008a FF90      		pop r15
 474 008c EF90      		pop r14
 475               	.LVL45:
 345:quantum/quantum.c **** }
 476               		.loc 1 345 10 view .LVU105
 477 008e 0C94 0000 		jmp process_action_kb
 478               	.LVL46:
 479               	.L29:
 480               	.LBB7:
 101:quantum/quantum.c ****       }
 481               		.loc 1 101 9 is_stmt 1 view .LVU106
 101:quantum/quantum.c ****       }
 482               		.loc 1 101 17 is_stmt 0 view .LVU107
 483 0092 C701      		movw r24,r14
 484 0094 0E94 0000 		call read_source_layers_cache
 485               	.LVL47:
 486 0098 C82F      		mov r28,r24
 487               	.LVL48:
 101:quantum/quantum.c ****       }
 488               		.loc 1 101 17 view .LVU108
 489 009a 00C0      		rjmp .L30
 490               	.LVL49:
 491               	.L28:
 101:quantum/quantum.c ****       }
 492               		.loc 1 101 17 view .LVU109
 493               	.LBE7:
 106:quantum/quantum.c **** 
 494               		.loc 1 106 5 is_stmt 1 view .LVU110
 106:quantum/quantum.c **** 
 495               		.loc 1 106 37 is_stmt 0 view .LVU111
 496 009c C701      		movw r24,r14
 497 009e 0E94 0000 		call layer_switch_get_layer
 498               	.LVL50:
 106:quantum/quantum.c **** 
 499               		.loc 1 106 15 view .LVU112
 500 00a2 B701      		movw r22,r14
 501 00a4 00C0      		rjmp .L85
 502               	.LVL51:
 503               	.L35:
 151:quantum/quantum.c ****     case RESET:
 504               		.loc 1 151 3 view .LVU113
 505 00a6 CC33      		cpi r28,60
 506 00a8 80E7      		ldi r24,112
 507 00aa D807      		cpc r29,r24
 508 00ac 01F4      		brne .+2
 509 00ae 00C0      		rjmp .L40
 510 00b0 CD33      		cpi r28,61
 511 00b2 D047      		sbci r29,112
 512 00b4 01F4      		brne .L39
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 513               		.loc 1 317 7 is_stmt 1 view .LVU114
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 514               		.loc 1 317 24 is_stmt 0 view .LVU115
 515 00b6 F801      		movw r30,r16
 516 00b8 8281      		ldd r24,Z+2
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 517               		.loc 1 317 10 view .LVU116
 518 00ba 8823      		tst r24
 519 00bc 01F4      		brne .+2
 520 00be 00C0      		rjmp .L69
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 521               		.loc 1 318 9 is_stmt 1 view .LVU117
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 522               		.loc 1 318 30 is_stmt 0 view .LVU118
 523 00c0 1092 0000 		sts shift_interrupted+1,__zero_reg__
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 524               		.loc 1 319 9 is_stmt 1 view .LVU119
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 525               		.loc 1 319 21 is_stmt 0 view .LVU120
 526 00c4 0E94 0000 		call timer_read
 527               	.LVL52:
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 528               		.loc 1 319 19 view .LVU121
 529 00c8 9093 0000 		sts scs_timer+1,r25
 530 00cc 8093 0000 		sts scs_timer,r24
 320:quantum/quantum.c ****       }
 531               		.loc 1 320 9 is_stmt 1 view .LVU122
 532 00d0 80E2      		ldi r24,lo8(32)
 533 00d2 00C0      		rjmp .L87
 534               	.L37:
 153:quantum/quantum.c ****         reset_keyboard();
 535               		.loc 1 153 7 view .LVU123
 153:quantum/quantum.c ****         reset_keyboard();
 536               		.loc 1 153 10 is_stmt 0 view .LVU124
 537 00d4 F801      		movw r30,r16
 538 00d6 8281      		ldd r24,Z+2
 539 00d8 8111      		cpse r24,__zero_reg__
 154:quantum/quantum.c ****       }
 540               		.loc 1 154 9 is_stmt 1 view .LVU125
 541 00da 0E94 0000 		call reset_keyboard
 542               	.LVL53:
 543               	.L33:
 544               		.loc 1 346 1 is_stmt 0 view .LVU126
 545 00de 80E0      		ldi r24,0
 546               	/* epilogue start */
 547 00e0 DF91      		pop r29
 548 00e2 CF91      		pop r28
 549               	.LVL54:
 550               		.loc 1 346 1 view .LVU127
 551 00e4 1F91      		pop r17
 552 00e6 0F91      		pop r16
 553               	.LVL55:
 554               		.loc 1 346 1 view .LVU128
 555 00e8 FF90      		pop r15
 556 00ea EF90      		pop r14
 557               	.LVL56:
 558               		.loc 1 346 1 view .LVU129
 559 00ec 0895      		ret
 560               	.LVL57:
 561               	.L38:
 157:quantum/quantum.c ****     case DEBUG:
 562               		.loc 1 157 7 is_stmt 1 view .LVU130
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 563               		.loc 1 159 7 view .LVU131
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 564               		.loc 1 159 10 is_stmt 0 view .LVU132
 565 00ee F801      		movw r30,r16
 566 00f0 8281      		ldd r24,Z+2
 567 00f2 8823      		tst r24
 568 00f4 01F0      		breq .L33
 160:quantum/quantum.c ****           debug_enable = true;
 569               		.loc 1 160 39 is_stmt 1 view .LVU133
 161:quantum/quantum.c ****       }
 570               		.loc 1 161 11 view .LVU134
 161:quantum/quantum.c ****       }
 571               		.loc 1 161 24 is_stmt 0 view .LVU135
 572 00f6 8091 0000 		lds r24,debug_config
 573 00fa 8160      		ori r24,lo8(1<<0)
 574 00fc 8093 0000 		sts debug_config,r24
 575 0100 00C0      		rjmp .L33
 576               	.L36:
 164:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 577               		.loc 1 164 7 is_stmt 1 view .LVU136
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 578               		.loc 1 216 7 view .LVU137
 216:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 579               		.loc 1 216 10 is_stmt 0 view .LVU138
 580 0102 F801      		movw r30,r16
 581 0104 8281      		ldd r24,Z+2
 582 0106 8823      		tst r24
 583 0108 01F4      		brne .+2
 584 010a 00C0      		rjmp .L42
 218:quantum/quantum.c ****             eeconfig_init();
 585               		.loc 1 218 9 is_stmt 1 view .LVU139
 218:quantum/quantum.c ****             eeconfig_init();
 586               		.loc 1 218 14 is_stmt 0 view .LVU140
 587 010c 0E94 0000 		call eeconfig_is_enabled
 588               	.LVL58:
 218:quantum/quantum.c ****             eeconfig_init();
 589               		.loc 1 218 12 view .LVU141
 590 0110 8111      		cpse r24,__zero_reg__
 591 0112 00C0      		rjmp .L43
 219:quantum/quantum.c ****         }
 592               		.loc 1 219 13 is_stmt 1 view .LVU142
 593 0114 0E94 0000 		call eeconfig_init
 594               	.LVL59:
 595               	.L43:
 222:quantum/quantum.c ****         switch (keycode)
 596               		.loc 1 222 9 view .LVU143
 222:quantum/quantum.c ****         switch (keycode)
 597               		.loc 1 222 29 is_stmt 0 view .LVU144
 598 0118 0E94 0000 		call eeconfig_read_keymap
 599               	.LVL60:
 600 011c 90E0      		ldi r25,0
 601 011e 9093 0000 		sts keymap_config+1,r25
 602 0122 8093 0000 		sts keymap_config,r24
 223:quantum/quantum.c ****         {
 603               		.loc 1 223 9 is_stmt 1 view .LVU145
 604 0126 FE01      		movw r30,r28
 605 0128 E350      		subi r30,3
 606 012a F047      		sbci r31,112
 226:quantum/quantum.c ****             break;
 607               		.loc 1 226 49 is_stmt 0 view .LVU146
 608 012c 8091 0000 		lds r24,keymap_config
 609 0130 8160      		ori r24,lo8(1<<0)
 610 0132 E231      		cpi r30,18
 611 0134 F105      		cpc r31,__zero_reg__
 612 0136 00F4      		brsh .L86
 613 0138 E050      		subi r30,lo8(-(gs(.L46)))
 614 013a F040      		sbci r31,hi8(-(gs(.L46)))
 615 013c 0C94 0000 		jmp __tablejump2__
 616               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 617               		.p2align	1
 618               	.L46:
 619 0000 0000      		.word gs(.L63)
 620 0002 0000      		.word gs(.L62)
 621 0004 0000      		.word gs(.L61)
 622 0006 0000      		.word gs(.L60)
 623 0008 0000      		.word gs(.L59)
 624 000a 0000      		.word gs(.L58)
 625 000c 0000      		.word gs(.L57)
 626 000e 0000      		.word gs(.L56)
 627 0010 0000      		.word gs(.L55)
 628 0012 0000      		.word gs(.L54)
 629 0014 0000      		.word gs(.L53)
 630 0016 0000      		.word gs(.L52)
 631 0018 0000      		.word gs(.L51)
 632 001a 0000      		.word gs(.L50)
 633 001c 0000      		.word gs(.L49)
 634 001e 0000      		.word gs(.L48)
 635 0020 0000      		.word gs(.L47)
 636 0022 0000      		.word gs(.L45)
 637               		.section	.text.process_record_quantum
 638               	.L63:
 229:quantum/quantum.c ****             break;
 639               		.loc 1 229 13 is_stmt 1 view .LVU147
 229:quantum/quantum.c ****             break;
 640               		.loc 1 229 47 is_stmt 0 view .LVU148
 641 0140 8091 0000 		lds r24,keymap_config
 642 0144 8260      		ori r24,lo8(1<<1)
 643               	.L86:
 282:quantum/quantum.c ****             break;
 644               		.loc 1 282 32 view .LVU149
 645 0146 8093 0000 		sts keymap_config,r24
 283:quantum/quantum.c ****           default:
 646               		.loc 1 283 13 is_stmt 1 view .LVU150
 287:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 647               		.loc 1 287 9 view .LVU151
 648 014a 8091 0000 		lds r24,keymap_config
 649 014e 0E94 0000 		call eeconfig_update_keymap
 650               	.LVL61:
 288:quantum/quantum.c **** 
 651               		.loc 1 288 9 view .LVU152
 652 0152 0E94 0000 		call clear_keyboard
 653               	.LVL62:
 290:quantum/quantum.c ****       }
 654               		.loc 1 290 9 view .LVU153
 290:quantum/quantum.c ****       }
 655               		.loc 1 290 16 is_stmt 0 view .LVU154
 656 0156 00C0      		rjmp .L33
 657               	.L62:
 232:quantum/quantum.c ****             break;
 658               		.loc 1 232 13 is_stmt 1 view .LVU155
 232:quantum/quantum.c ****             break;
 659               		.loc 1 232 42 is_stmt 0 view .LVU156
 660 0158 8091 0000 		lds r24,keymap_config
 661 015c 8460      		ori r24,lo8(1<<2)
 662 015e 00C0      		rjmp .L86
 663               	.L61:
 235:quantum/quantum.c ****             break;
 664               		.loc 1 235 13 is_stmt 1 view .LVU157
 235:quantum/quantum.c ****             break;
 665               		.loc 1 235 42 is_stmt 0 view .LVU158
 666 0160 8091 0000 		lds r24,keymap_config
 667 0164 8860      		ori r24,lo8(1<<3)
 668 0166 00C0      		rjmp .L86
 669               	.L60:
 238:quantum/quantum.c ****             break;
 670               		.loc 1 238 13 is_stmt 1 view .LVU159
 238:quantum/quantum.c ****             break;
 671               		.loc 1 238 34 is_stmt 0 view .LVU160
 672 0168 8091 0000 		lds r24,keymap_config
 673 016c 8061      		ori r24,lo8(1<<4)
 674 016e 00C0      		rjmp .L86
 675               	.L59:
 241:quantum/quantum.c ****             break;
 676               		.loc 1 241 13 is_stmt 1 view .LVU161
 241:quantum/quantum.c ****             break;
 677               		.loc 1 241 42 is_stmt 0 view .LVU162
 678 0170 8091 0000 		lds r24,keymap_config
 679 0174 8062      		ori r24,lo8(1<<5)
 680 0176 00C0      		rjmp .L86
 681               	.L58:
 244:quantum/quantum.c ****             break;
 682               		.loc 1 244 13 is_stmt 1 view .LVU163
 244:quantum/quantum.c ****             break;
 683               		.loc 1 244 52 is_stmt 0 view .LVU164
 684 0178 8091 0000 		lds r24,keymap_config
 685 017c 8064      		ori r24,lo8(1<<6)
 686 017e 00C0      		rjmp .L86
 687               	.L57:
 247:quantum/quantum.c ****             break;
 688               		.loc 1 247 13 is_stmt 1 view .LVU165
 247:quantum/quantum.c ****             break;
 689               		.loc 1 247 32 is_stmt 0 view .LVU166
 690 0180 8091 0000 		lds r24,keymap_config
 691 0184 8068      		ori r24,lo8(1<<7)
 692 0186 00C0      		rjmp .L86
 693               	.L56:
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 694               		.loc 1 250 13 is_stmt 1 view .LVU167
 251:quantum/quantum.c ****             break;
 695               		.loc 1 251 13 view .LVU168
 250:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 696               		.loc 1 250 42 is_stmt 0 view .LVU169
 697 0188 8091 0000 		lds r24,keymap_config
 698 018c 8C60      		ori r24,lo8(12)
 699 018e 00C0      		rjmp .L86
 700               	.L55:
 254:quantum/quantum.c ****             break;
 701               		.loc 1 254 13 is_stmt 1 view .LVU170
 254:quantum/quantum.c ****             break;
 702               		.loc 1 254 49 is_stmt 0 view .LVU171
 703 0190 8091 0000 		lds r24,keymap_config
 704 0194 8E7F      		andi r24,lo8(~(1<<0))
 705 0196 00C0      		rjmp .L86
 706               	.L54:
 257:quantum/quantum.c ****             break;
 707               		.loc 1 257 13 is_stmt 1 view .LVU172
 257:quantum/quantum.c ****             break;
 708               		.loc 1 257 47 is_stmt 0 view .LVU173
 709 0198 8091 0000 		lds r24,keymap_config
 710 019c 8D7F      		andi r24,lo8(~(1<<1))
 711 019e 00C0      		rjmp .L86
 712               	.L53:
 260:quantum/quantum.c ****             break;
 713               		.loc 1 260 13 is_stmt 1 view .LVU174
 260:quantum/quantum.c ****             break;
 714               		.loc 1 260 42 is_stmt 0 view .LVU175
 715 01a0 8091 0000 		lds r24,keymap_config
 716 01a4 8B7F      		andi r24,lo8(~(1<<2))
 717 01a6 00C0      		rjmp .L86
 718               	.L52:
 263:quantum/quantum.c ****             break;
 719               		.loc 1 263 13 is_stmt 1 view .LVU176
 263:quantum/quantum.c ****             break;
 720               		.loc 1 263 42 is_stmt 0 view .LVU177
 721 01a8 8091 0000 		lds r24,keymap_config
 722 01ac 877F      		andi r24,lo8(~(1<<3))
 723 01ae 00C0      		rjmp .L86
 724               	.L51:
 266:quantum/quantum.c ****             break;
 725               		.loc 1 266 13 is_stmt 1 view .LVU178
 266:quantum/quantum.c ****             break;
 726               		.loc 1 266 34 is_stmt 0 view .LVU179
 727 01b0 8091 0000 		lds r24,keymap_config
 728 01b4 8F7E      		andi r24,lo8(~(1<<4))
 729 01b6 00C0      		rjmp .L86
 730               	.L50:
 269:quantum/quantum.c ****             break;
 731               		.loc 1 269 13 is_stmt 1 view .LVU180
 269:quantum/quantum.c ****             break;
 732               		.loc 1 269 42 is_stmt 0 view .LVU181
 733 01b8 8091 0000 		lds r24,keymap_config
 734 01bc 8F7D      		andi r24,lo8(~(1<<5))
 735 01be 00C0      		rjmp .L86
 736               	.L49:
 272:quantum/quantum.c ****             break;
 737               		.loc 1 272 13 is_stmt 1 view .LVU182
 272:quantum/quantum.c ****             break;
 738               		.loc 1 272 52 is_stmt 0 view .LVU183
 739 01c0 8091 0000 		lds r24,keymap_config
 740 01c4 8F7B      		andi r24,lo8(~(1<<6))
 741 01c6 00C0      		rjmp .L86
 742               	.L48:
 275:quantum/quantum.c ****             break;
 743               		.loc 1 275 13 is_stmt 1 view .LVU184
 275:quantum/quantum.c ****             break;
 744               		.loc 1 275 32 is_stmt 0 view .LVU185
 745 01c8 8091 0000 		lds r24,keymap_config
 746 01cc 8F77      		andi r24,lo8(~(1<<7))
 747 01ce 00C0      		rjmp .L86
 748               	.L47:
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 749               		.loc 1 278 13 is_stmt 1 view .LVU186
 279:quantum/quantum.c ****             break;
 750               		.loc 1 279 13 view .LVU187
 278:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 751               		.loc 1 278 42 is_stmt 0 view .LVU188
 752 01d0 8091 0000 		lds r24,keymap_config
 753 01d4 837F      		andi r24,lo8(-13)
 754 01d6 00C0      		rjmp .L86
 755               	.L45:
 282:quantum/quantum.c ****             break;
 756               		.loc 1 282 13 is_stmt 1 view .LVU189
 282:quantum/quantum.c ****             break;
 757               		.loc 1 282 48 is_stmt 0 view .LVU190
 758 01d8 9091 0000 		lds r25,keymap_config
 282:quantum/quantum.c ****             break;
 759               		.loc 1 282 32 view .LVU191
 760 01dc 892F      		mov r24,r25
 761 01de 97FB      		bst r25,7
 762 01e0 87F9      		bld r24,7
 763 01e2 8058      		subi r24,0x80
 764 01e4 00C0      		rjmp .L86
 765               	.L40:
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 766               		.loc 1 294 7 is_stmt 1 view .LVU192
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 767               		.loc 1 294 24 is_stmt 0 view .LVU193
 768 01e6 F801      		movw r30,r16
 769 01e8 8281      		ldd r24,Z+2
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 770               		.loc 1 294 10 view .LVU194
 771 01ea 8823      		tst r24
 772 01ec 01F0      		breq .L65
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 773               		.loc 1 295 9 is_stmt 1 view .LVU195
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 774               		.loc 1 295 30 is_stmt 0 view .LVU196
 775 01ee 1092 0000 		sts shift_interrupted,__zero_reg__
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 776               		.loc 1 296 9 is_stmt 1 view .LVU197
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 777               		.loc 1 296 21 is_stmt 0 view .LVU198
 778 01f2 0E94 0000 		call timer_read
 779               	.LVL63:
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 780               		.loc 1 296 19 view .LVU199
 781 01f6 9093 0000 		sts scs_timer+1,r25
 782 01fa 8093 0000 		sts scs_timer,r24
 297:quantum/quantum.c ****       }
 783               		.loc 1 297 9 is_stmt 1 view .LVU200
 784 01fe 82E0      		ldi r24,lo8(2)
 785               	.L87:
 320:quantum/quantum.c ****       }
 786               		.loc 1 320 9 is_stmt 0 view .LVU201
 787 0200 0E94 0000 		call register_mods
 788               	.LVL64:
 789 0204 00C0      		rjmp .L33
 790               	.L65:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 791               		.loc 1 306 9 is_stmt 1 view .LVU202
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 792               		.loc 1 306 12 is_stmt 0 view .LVU203
 793 0206 8091 0000 		lds r24,shift_interrupted
 794 020a 8111      		cpse r24,__zero_reg__
 795 020c 00C0      		rjmp .L67
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 796               		.loc 1 306 38 discriminator 1 view .LVU204
 797 020e 8091 0000 		lds r24,scs_timer
 798 0212 9091 0000 		lds r25,scs_timer+1
 799 0216 0E94 0000 		call timer_elapsed
 800               	.LVL65:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 801               		.loc 1 306 35 discriminator 1 view .LVU205
 802 021a 883C      		cpi r24,-56
 803 021c 9105      		cpc r25,__zero_reg__
 804 021e 00F4      		brsh .L67
 307:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 805               		.loc 1 307 11 is_stmt 1 view .LVU206
 806 0220 86E2      		ldi r24,lo8(38)
 807 0222 0E94 0000 		call register_code
 808               	.LVL66:
 308:quantum/quantum.c ****         }
 809               		.loc 1 308 11 view .LVU207
 810 0226 86E2      		ldi r24,lo8(38)
 811 0228 0E94 0000 		call unregister_code
 812               	.LVL67:
 813               	.L67:
 310:quantum/quantum.c ****       }
 814               		.loc 1 310 9 view .LVU208
 815 022c 82E0      		ldi r24,lo8(2)
 816               	.L88:
 333:quantum/quantum.c ****       }
 817               		.loc 1 333 9 is_stmt 0 view .LVU209
 818 022e 0E94 0000 		call unregister_mods
 819               	.LVL68:
 820 0232 00C0      		rjmp .L33
 821               	.L69:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 822               		.loc 1 329 9 is_stmt 1 view .LVU210
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 823               		.loc 1 329 12 is_stmt 0 view .LVU211
 824 0234 8091 0000 		lds r24,shift_interrupted+1
 825 0238 8111      		cpse r24,__zero_reg__
 826 023a 00C0      		rjmp .L71
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 827               		.loc 1 329 38 discriminator 1 view .LVU212
 828 023c 8091 0000 		lds r24,scs_timer
 829 0240 9091 0000 		lds r25,scs_timer+1
 830 0244 0E94 0000 		call timer_elapsed
 831               	.LVL69:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 832               		.loc 1 329 35 discriminator 1 view .LVU213
 833 0248 883C      		cpi r24,-56
 834 024a 9105      		cpc r25,__zero_reg__
 835 024c 00F4      		brsh .L71
 330:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 836               		.loc 1 330 11 is_stmt 1 view .LVU214
 837 024e 87E2      		ldi r24,lo8(39)
 838 0250 0E94 0000 		call register_code
 839               	.LVL70:
 331:quantum/quantum.c ****         }
 840               		.loc 1 331 11 view .LVU215
 841 0254 87E2      		ldi r24,lo8(39)
 842 0256 0E94 0000 		call unregister_code
 843               	.LVL71:
 844               	.L71:
 333:quantum/quantum.c ****       }
 845               		.loc 1 333 9 view .LVU216
 846 025a 80E2      		ldi r24,lo8(32)
 847 025c 00C0      		rjmp .L88
 848               		.cfi_endproc
 849               	.LFE114:
 851               		.section	.text.send_string,"ax",@progbits
 852               	.global	send_string
 854               	send_string:
 855               	.LVL72:
 856               	.LFB115:
 347:quantum/quantum.c **** 
 348:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 353:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 354:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 355:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 356:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 357:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 358:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 359:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 360:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 361:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 362:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 363:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 364:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 365:quantum/quantum.c **** };
 366:quantum/quantum.c **** 
 367:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 368:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 369:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 370:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 371:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 372:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 373:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 374:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 375:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 376:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 377:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 378:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 379:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 380:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 381:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 382:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 383:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 387:quantum/quantum.c **** #if 0
 388:quantum/quantum.c **** #include "keymap_colemak.h"
 389:quantum/quantum.c **** 
 390:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 395:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 396:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 397:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 398:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 399:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 400:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 401:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 402:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 403:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 404:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 405:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 406:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 407:quantum/quantum.c **** };
 408:quantum/quantum.c **** 
 409:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 410:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 411:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 412:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 413:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 414:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 415:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 416:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 417:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 418:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 419:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 420:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 421:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 422:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 423:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 424:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 425:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 426:quantum/quantum.c **** };
 427:quantum/quantum.c **** 
 428:quantum/quantum.c **** #endif
 429:quantum/quantum.c **** 
 430:quantum/quantum.c **** void send_string(const char *str) {
 857               		.loc 1 430 35 view -0
 858               		.cfi_startproc
 859               		.loc 1 430 35 is_stmt 0 view .LVU218
 860 0000 0F93      		push r16
 861               	.LCFI13:
 862               		.cfi_def_cfa_offset 3
 863               		.cfi_offset 16, -2
 864 0002 1F93      		push r17
 865               	.LCFI14:
 866               		.cfi_def_cfa_offset 4
 867               		.cfi_offset 17, -3
 868 0004 CF93      		push r28
 869               	.LCFI15:
 870               		.cfi_def_cfa_offset 5
 871               		.cfi_offset 28, -4
 872               	/* prologue: function */
 873               	/* frame size = 0 */
 874               	/* stack size = 3 */
 875               	.L__stack_usage = 3
 876 0006 8C01      		movw r16,r24
 877               	.LVL73:
 878               	.L93:
 431:quantum/quantum.c ****     while (1) {
 879               		.loc 1 431 5 is_stmt 1 view .LVU219
 880               	.LBB8:
 432:quantum/quantum.c ****         uint8_t keycode;
 881               		.loc 1 432 9 view .LVU220
 433:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 882               		.loc 1 433 9 view .LVU221
 883               	.LBB9:
 884               		.loc 1 433 30 view .LVU222
 885               		.loc 1 433 30 view .LVU223
 886               		.loc 1 433 30 view .LVU224
 887 0008 F801      		movw r30,r16
 888               	/* #APP */
 889               	 ;  433 "quantum/quantum.c" 1
 890 000a 2491      		lpm r18, Z
 891               		
 892               	 ;  0 "" 2
 893               	.LVL74:
 894               		.loc 1 433 30 view .LVU225
 895               		.loc 1 433 30 is_stmt 0 view .LVU226
 896               	/* #NOAPP */
 897               	.LBE9:
 434:quantum/quantum.c ****         if (!ascii_code) break;
 898               		.loc 1 434 9 is_stmt 1 view .LVU227
 899               		.loc 1 434 12 is_stmt 0 view .LVU228
 900 000c 2223      		tst r18
 901 000e 01F0      		breq .L89
 435:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 902               		.loc 1 435 9 is_stmt 1 view .LVU229
 903               	.LBB10:
 904               		.loc 1 435 19 view .LVU230
 905 0010 30E0      		ldi r19,0
 906               	.LVL75:
 907               		.loc 1 435 19 view .LVU231
 908               		.loc 1 435 19 view .LVU232
 909 0012 F901      		movw r30,r18
 910 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 911 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 912               	.LVL76:
 913               		.loc 1 435 19 is_stmt 0 view .LVU233
 914               	/* #APP */
 915               	 ;  435 "quantum/quantum.c" 1
 916 0018 C491      		lpm r28, Z
 917               		
 918               	 ;  0 "" 2
 919               	.LVL77:
 920               		.loc 1 435 19 is_stmt 1 view .LVU234
 921               		.loc 1 435 19 is_stmt 0 view .LVU235
 922               	/* #NOAPP */
 923               	.LBE10:
 436:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 924               		.loc 1 436 9 is_stmt 1 view .LVU236
 925               	.LBB11:
 926               		.loc 1 436 13 view .LVU237
 927               		.loc 1 436 13 view .LVU238
 928               		.loc 1 436 13 view .LVU239
 929 001a 2050      		subi r18,lo8(-(ascii_to_qwerty_shift_lut))
 930 001c 3040      		sbci r19,hi8(-(ascii_to_qwerty_shift_lut))
 931               	.LVL78:
 932               		.loc 1 436 13 is_stmt 0 view .LVU240
 933 001e F901      		movw r30,r18
 934               	.LVL79:
 935               		.loc 1 436 13 view .LVU241
 936               	/* #APP */
 937               	 ;  436 "quantum/quantum.c" 1
 938 0020 2491      		lpm r18, Z
 939               		
 940               	 ;  0 "" 2
 941               	.LVL80:
 942               		.loc 1 436 13 is_stmt 1 view .LVU242
 943               	/* #NOAPP */
 944               	.LBE11:
 945               		.loc 1 436 12 is_stmt 0 view .LVU243
 946 0022 2223      		tst r18
 947 0024 01F0      		breq .L91
 437:quantum/quantum.c ****             register_code(KC_LSFT);
 948               		.loc 1 437 13 is_stmt 1 view .LVU244
 949 0026 81EE      		ldi r24,lo8(-31)
 950 0028 0E94 0000 		call register_code
 951               	.LVL81:
 438:quantum/quantum.c ****             register_code(keycode);
 952               		.loc 1 438 13 view .LVU245
 953 002c 8C2F      		mov r24,r28
 954 002e 0E94 0000 		call register_code
 955               	.LVL82:
 439:quantum/quantum.c ****             unregister_code(keycode);
 956               		.loc 1 439 13 view .LVU246
 957 0032 8C2F      		mov r24,r28
 958 0034 0E94 0000 		call unregister_code
 959               	.LVL83:
 440:quantum/quantum.c ****             unregister_code(KC_LSFT);
 960               		.loc 1 440 13 view .LVU247
 961 0038 81EE      		ldi r24,lo8(-31)
 962               	.L94:
 441:quantum/quantum.c ****         }
 442:quantum/quantum.c ****         else {
 443:quantum/quantum.c ****             register_code(keycode);
 444:quantum/quantum.c ****             unregister_code(keycode);
 963               		.loc 1 444 13 is_stmt 0 view .LVU248
 964 003a 0E94 0000 		call unregister_code
 965               	.LVL84:
 445:quantum/quantum.c ****         }
 446:quantum/quantum.c ****         ++str;
 966               		.loc 1 446 9 is_stmt 1 view .LVU249
 967 003e 0F5F      		subi r16,-1
 968 0040 1F4F      		sbci r17,-1
 969               	.LVL85:
 970               		.loc 1 446 9 is_stmt 0 view .LVU250
 971               	.LBE8:
 431:quantum/quantum.c ****         uint8_t keycode;
 972               		.loc 1 431 11 is_stmt 1 view .LVU251
 431:quantum/quantum.c ****         uint8_t keycode;
 973               		.loc 1 431 15 is_stmt 0 view .LVU252
 974 0042 00C0      		rjmp .L93
 975               	.LVL86:
 976               	.L91:
 977               	.LBB12:
 443:quantum/quantum.c ****             unregister_code(keycode);
 978               		.loc 1 443 13 is_stmt 1 view .LVU253
 979 0044 8C2F      		mov r24,r28
 980 0046 0E94 0000 		call register_code
 981               	.LVL87:
 444:quantum/quantum.c ****         }
 982               		.loc 1 444 13 view .LVU254
 983 004a 8C2F      		mov r24,r28
 984 004c 00C0      		rjmp .L94
 985               	.LVL88:
 986               	.L89:
 987               	/* epilogue start */
 444:quantum/quantum.c ****         }
 988               		.loc 1 444 13 is_stmt 0 view .LVU255
 989               	.LBE12:
 447:quantum/quantum.c ****     }
 448:quantum/quantum.c **** }
 990               		.loc 1 448 1 view .LVU256
 991 004e CF91      		pop r28
 992 0050 1F91      		pop r17
 993 0052 0F91      		pop r16
 994               	.LVL89:
 995               		.loc 1 448 1 view .LVU257
 996 0054 0895      		ret
 997               		.cfi_endproc
 998               	.LFE115:
 1000               		.section	.text.update_tri_layer,"ax",@progbits
 1001               	.global	update_tri_layer
 1003               	update_tri_layer:
 1004               	.LVL90:
 1005               	.LFB116:
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1006               		.loc 1 450 71 is_stmt 1 view -0
 1007               		.cfi_startproc
 1008               		.loc 1 450 71 is_stmt 0 view .LVU259
 1009 0000 CF92      		push r12
 1010               	.LCFI16:
 1011               		.cfi_def_cfa_offset 3
 1012               		.cfi_offset 12, -2
 1013 0002 DF92      		push r13
 1014               	.LCFI17:
 1015               		.cfi_def_cfa_offset 4
 1016               		.cfi_offset 13, -3
 1017 0004 EF92      		push r14
 1018               	.LCFI18:
 1019               		.cfi_def_cfa_offset 5
 1020               		.cfi_offset 14, -4
 1021 0006 FF92      		push r15
 1022               	.LCFI19:
 1023               		.cfi_def_cfa_offset 6
 1024               		.cfi_offset 15, -5
 1025 0008 0F93      		push r16
 1026               	.LCFI20:
 1027               		.cfi_def_cfa_offset 7
 1028               		.cfi_offset 16, -6
 1029 000a 1F93      		push r17
 1030               	.LCFI21:
 1031               		.cfi_def_cfa_offset 8
 1032               		.cfi_offset 17, -7
 1033               	/* prologue: function */
 1034               	/* frame size = 0 */
 1035               	/* stack size = 6 */
 1036               	.L__stack_usage = 6
 1037 000c 982F      		mov r25,r24
 1038 000e 842F      		mov r24,r20
 1039               	.LVL91:
 451:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 1040               		.loc 1 451 3 is_stmt 1 view .LVU260
 1041 0010 01E0      		ldi r16,lo8(1)
 1042 0012 10E0      		ldi r17,0
 1043 0014 20E0      		ldi r18,0
 1044 0016 30E0      		ldi r19,0
 1045 0018 6801      		movw r12,r16
 1046 001a 7901      		movw r14,r18
 1047 001c 00C0      		rjmp 2f
 1048               		1:
 1049 001e CC0C      		lsl r12
 1050 0020 DD1C      		rol r13
 1051 0022 EE1C      		rol r14
 1052 0024 FF1C      		rol r15
 1053               		2:
 1054 0026 6A95      		dec r22
 1055 0028 02F4      		brpl 1b
 1056 002a B701      		movw r22,r14
 1057               	.LVL92:
 1058               		.loc 1 451 3 is_stmt 0 view .LVU261
 1059 002c A601      		movw r20,r12
 1060               	.LVL93:
 1061               		.loc 1 451 3 view .LVU262
 1062 002e 00C0      		rjmp 2f
 1063               		1:
 1064 0030 000F      		lsl r16
 1065 0032 111F      		rol r17
 1066 0034 221F      		rol r18
 1067 0036 331F      		rol r19
 1068               		2:
 1069 0038 9A95      		dec r25
 1070 003a 02F4      		brpl 1b
 1071 003c 402B      		or r20,r16
 1072 003e 512B      		or r21,r17
 1073 0040 622B      		or r22,r18
 1074 0042 732B      		or r23,r19
 1075               		.loc 1 451 27 view .LVU263
 1076 0044 0091 0000 		lds r16,layer_state
 1077 0048 1091 0000 		lds r17,layer_state+1
 1078 004c 2091 0000 		lds r18,layer_state+2
 1079 0050 3091 0000 		lds r19,layer_state+3
 1080 0054 0423      		and r16,r20
 1081 0056 1523      		and r17,r21
 1082 0058 2623      		and r18,r22
 1083 005a 3723      		and r19,r23
 1084 005c 4017      		cp r20,r16
 1085 005e 5107      		cpc r21,r17
 1086 0060 6207      		cpc r22,r18
 1087 0062 7307      		cpc r23,r19
 1088 0064 01F4      		brne .L96
 452:quantum/quantum.c ****     layer_on(layer3);
 1089               		.loc 1 452 5 is_stmt 1 view .LVU264
 1090               	/* epilogue start */
 453:quantum/quantum.c ****   } else {
 454:quantum/quantum.c ****     layer_off(layer3);
 455:quantum/quantum.c ****   }
 456:quantum/quantum.c **** }
 1091               		.loc 1 456 1 is_stmt 0 view .LVU265
 1092 0066 1F91      		pop r17
 1093 0068 0F91      		pop r16
 1094 006a FF90      		pop r15
 1095 006c EF90      		pop r14
 1096 006e DF90      		pop r13
 1097 0070 CF90      		pop r12
 452:quantum/quantum.c ****     layer_on(layer3);
 1098               		.loc 1 452 5 view .LVU266
 1099 0072 0C94 0000 		jmp layer_on
 1100               	.LVL94:
 1101               	.L96:
 454:quantum/quantum.c ****   }
 1102               		.loc 1 454 5 is_stmt 1 view .LVU267
 1103               	/* epilogue start */
 1104               		.loc 1 456 1 is_stmt 0 view .LVU268
 1105 0076 1F91      		pop r17
 1106 0078 0F91      		pop r16
 1107 007a FF90      		pop r15
 1108 007c EF90      		pop r14
 1109 007e DF90      		pop r13
 1110 0080 CF90      		pop r12
 454:quantum/quantum.c ****   }
 1111               		.loc 1 454 5 view .LVU269
 1112 0082 0C94 0000 		jmp layer_off
 1113               	.LVL95:
 454:quantum/quantum.c ****   }
 1114               		.loc 1 454 5 view .LVU270
 1115               		.cfi_endproc
 1116               	.LFE116:
 1118               		.section	.text.tap_random_base64,"ax",@progbits
 1119               	.global	tap_random_base64
 1121               	tap_random_base64:
 1122               	.LFB117:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void tap_random_base64(void) {
 1123               		.loc 1 458 30 is_stmt 1 view -0
 1124               		.cfi_startproc
 1125 0000 CF93      		push r28
 1126               	.LCFI22:
 1127               		.cfi_def_cfa_offset 3
 1128               		.cfi_offset 28, -2
 1129 0002 DF93      		push r29
 1130               	.LCFI23:
 1131               		.cfi_def_cfa_offset 4
 1132               		.cfi_offset 29, -3
 1133               	/* prologue: function */
 1134               	/* frame size = 0 */
 1135               	/* stack size = 2 */
 1136               	.L__stack_usage = 2
 459:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 460:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1137               		.loc 1 460 5 view .LVU272
 1138               		.loc 1 460 20 is_stmt 0 view .LVU273
 1139 0004 46B5      		in r20,0x26
 1140               		.loc 1 460 28 view .LVU274
 1141 0006 2091 8400 		lds r18,132
 1142 000a 3091 8500 		lds r19,132+1
 1143               		.loc 1 460 36 view .LVU275
 1144 000e C091 9400 		lds r28,148
 1145 0012 D091 9500 		lds r29,148+1
 1146               		.loc 1 460 44 view .LVU276
 1147 0016 8091 BE00 		lds r24,190
 1148 001a 9091 BF00 		lds r25,190+1
 1149               		.loc 1 460 34 view .LVU277
 1150 001e C20F      		add r28,r18
 1151 0020 C40F      		add r28,r20
 1152               		.loc 1 460 42 view .LVU278
 1153 0022 C80F      		add r28,r24
 1154               		.loc 1 460 13 view .LVU279
 1155 0024 CF73      		andi r28,lo8(63)
 1156               	.LVL96:
 461:quantum/quantum.c ****   #else
 462:quantum/quantum.c ****     uint8_t key = rand() % 64;
 463:quantum/quantum.c ****   #endif
 464:quantum/quantum.c ****   switch (key) {
 1157               		.loc 1 464 3 is_stmt 1 view .LVU280
 1158 0026 CE33      		cpi r28,lo8(62)
 1159 0028 00F4      		brsh .L98
 1160 002a C533      		cpi r28,lo8(53)
 1161 002c 00F4      		brsh .L99
 1162 002e C433      		cpi r28,lo8(52)
 1163 0030 01F0      		breq .L100
 1164 0032 CA31      		cpi r28,lo8(26)
 1165 0034 00F0      		brlo .L105
 465:quantum/quantum.c ****     case 0 ... 25:
 466:quantum/quantum.c ****       register_code(KC_LSFT);
 467:quantum/quantum.c ****       register_code(key + KC_A);
 468:quantum/quantum.c ****       unregister_code(key + KC_A);
 469:quantum/quantum.c ****       unregister_code(KC_LSFT);
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 26 ... 51:
 472:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1166               		.loc 1 472 7 view .LVU281
 1167 0036 C651      		subi r28,lo8(-(-22))
 1168               	.LVL97:
 1169               	.L109:
 473:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 474:quantum/quantum.c ****       break;
 475:quantum/quantum.c ****     case 52:
 476:quantum/quantum.c ****       register_code(KC_0);
 477:quantum/quantum.c ****       unregister_code(KC_0);
 478:quantum/quantum.c ****       break;
 479:quantum/quantum.c ****     case 53 ... 61:
 480:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1170               		.loc 1 480 7 is_stmt 0 view .LVU282
 1171 0038 8C2F      		mov r24,r28
 1172 003a 0E94 0000 		call register_code
 1173               	.LVL98:
 481:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1174               		.loc 1 481 7 is_stmt 1 view .LVU283
 1175 003e 8C2F      		mov r24,r28
 1176 0040 00C0      		rjmp .L107
 1177               	.LVL99:
 1178               	.L98:
 464:quantum/quantum.c ****     case 0 ... 25:
 1179               		.loc 1 464 3 is_stmt 0 view .LVU284
 1180 0042 CE33      		cpi r28,lo8(62)
 1181 0044 01F4      		brne .L106
 482:quantum/quantum.c ****       break;
 483:quantum/quantum.c ****     case 62:
 484:quantum/quantum.c ****       register_code(KC_LSFT);
 1182               		.loc 1 484 7 is_stmt 1 view .LVU285
 1183 0046 81EE      		ldi r24,lo8(-31)
 1184 0048 0E94 0000 		call register_code
 1185               	.LVL100:
 485:quantum/quantum.c ****       register_code(KC_EQL);
 1186               		.loc 1 485 7 view .LVU286
 1187 004c 8EE2      		ldi r24,lo8(46)
 1188 004e 0E94 0000 		call register_code
 1189               	.LVL101:
 486:quantum/quantum.c ****       unregister_code(KC_EQL);
 1190               		.loc 1 486 7 view .LVU287
 1191 0052 8EE2      		ldi r24,lo8(46)
 1192 0054 00C0      		rjmp .L108
 1193               	.L105:
 466:quantum/quantum.c ****       register_code(key + KC_A);
 1194               		.loc 1 466 7 view .LVU288
 1195 0056 81EE      		ldi r24,lo8(-31)
 1196 0058 0E94 0000 		call register_code
 1197               	.LVL102:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1198               		.loc 1 467 7 view .LVU289
 1199 005c CC5F      		subi r28,lo8(-(4))
 1200               	.LVL103:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1201               		.loc 1 467 7 is_stmt 0 view .LVU290
 1202 005e 8C2F      		mov r24,r28
 1203 0060 0E94 0000 		call register_code
 1204               	.LVL104:
 468:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1205               		.loc 1 468 7 is_stmt 1 view .LVU291
 1206 0064 8C2F      		mov r24,r28
 1207               	.LVL105:
 1208               	.L108:
 1209               		.loc 1 486 7 is_stmt 0 view .LVU292
 1210 0066 0E94 0000 		call unregister_code
 1211               	.LVL106:
 487:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1212               		.loc 1 487 7 is_stmt 1 view .LVU293
 1213 006a 81EE      		ldi r24,lo8(-31)
 1214 006c 00C0      		rjmp .L107
 1215               	.LVL107:
 1216               	.L100:
 476:quantum/quantum.c ****       unregister_code(KC_0);
 1217               		.loc 1 476 7 view .LVU294
 1218 006e 87E2      		ldi r24,lo8(39)
 1219 0070 0E94 0000 		call register_code
 1220               	.LVL108:
 477:quantum/quantum.c ****       break;
 1221               		.loc 1 477 7 view .LVU295
 1222 0074 87E2      		ldi r24,lo8(39)
 1223               	.LVL109:
 1224               	.L107:
 1225               	/* epilogue start */
 488:quantum/quantum.c ****       break;
 489:quantum/quantum.c ****     case 63:
 490:quantum/quantum.c ****       register_code(KC_SLSH);
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 492:quantum/quantum.c ****       break;
 493:quantum/quantum.c ****   }
 494:quantum/quantum.c **** }
 1226               		.loc 1 494 1 is_stmt 0 view .LVU296
 1227 0076 DF91      		pop r29
 1228 0078 CF91      		pop r28
 491:quantum/quantum.c ****       break;
 1229               		.loc 1 491 7 view .LVU297
 1230 007a 0C94 0000 		jmp unregister_code
 1231               	.LVL110:
 1232               	.L99:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1233               		.loc 1 480 7 is_stmt 1 view .LVU298
 1234 007e C751      		subi r28,lo8(-(-23))
 1235               	.LVL111:
 480:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1236               		.loc 1 480 7 is_stmt 0 view .LVU299
 1237 0080 00C0      		rjmp .L109
 1238               	.LVL112:
 1239               	.L106:
 490:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1240               		.loc 1 490 7 is_stmt 1 view .LVU300
 1241 0082 88E3      		ldi r24,lo8(56)
 1242 0084 0E94 0000 		call register_code
 1243               	.LVL113:
 491:quantum/quantum.c ****       break;
 1244               		.loc 1 491 7 view .LVU301
 1245 0088 88E3      		ldi r24,lo8(56)
 1246 008a 00C0      		rjmp .L107
 1247               		.cfi_endproc
 1248               	.LFE117:
 1250               		.section	.text.matrix_init_quantum,"ax",@progbits
 1251               	.global	matrix_init_quantum
 1253               	matrix_init_quantum:
 1254               	.LFB118:
 495:quantum/quantum.c **** 
 496:quantum/quantum.c **** void matrix_init_quantum() {
 1255               		.loc 1 496 28 view -0
 1256               		.cfi_startproc
 1257               	/* prologue: function */
 1258               	/* frame size = 0 */
 1259               	/* stack size = 0 */
 1260               	.L__stack_usage = 0
 497:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 498:quantum/quantum.c ****     backlight_init_ports();
 499:quantum/quantum.c ****   #endif
 500:quantum/quantum.c ****   matrix_init_kb();
 1261               		.loc 1 500 3 view .LVU303
 1262 0000 0C94 0000 		jmp matrix_init_kb
 1263               	.LVL114:
 1264               		.cfi_endproc
 1265               	.LFE118:
 1267               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1268               	.global	matrix_scan_quantum
 1270               	matrix_scan_quantum:
 1271               	.LFB119:
 501:quantum/quantum.c **** }
 502:quantum/quantum.c **** 
 503:quantum/quantum.c **** void matrix_scan_quantum() {
 1272               		.loc 1 503 28 view -0
 1273               		.cfi_startproc
 1274               	/* prologue: function */
 1275               	/* frame size = 0 */
 1276               	/* stack size = 0 */
 1277               	.L__stack_usage = 0
 504:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 505:quantum/quantum.c ****     matrix_scan_music();
 506:quantum/quantum.c ****   #endif
 507:quantum/quantum.c **** 
 508:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 509:quantum/quantum.c ****     matrix_scan_tap_dance();
 510:quantum/quantum.c ****   #endif
 511:quantum/quantum.c ****   matrix_scan_kb();
 1278               		.loc 1 511 3 view .LVU305
 1279 0000 0C94 0000 		jmp matrix_scan_kb
 1280               	.LVL115:
 1281               		.cfi_endproc
 1282               	.LFE119:
 1284               		.section	.text.backlight_init_ports,"ax",@progbits
 1285               		.weak	backlight_init_ports
 1287               	backlight_init_ports:
 1288               	.LFB138:
 1289               		.cfi_startproc
 1290               	/* prologue: function */
 1291               	/* frame size = 0 */
 1292               	/* stack size = 0 */
 1293               	.L__stack_usage = 0
 1294               	/* epilogue start */
 1295 0000 0895      		ret
 1296               		.cfi_endproc
 1297               	.LFE138:
 1299               		.section	.text.send_nibble,"ax",@progbits
 1300               	.global	send_nibble
 1302               	send_nibble:
 1303               	.LVL116:
 1304               	.LFB125:
 512:quantum/quantum.c **** }
 513:quantum/quantum.c **** 
 514:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 515:quantum/quantum.c **** 
 516:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 517:quantum/quantum.c **** 
 518:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 519:quantum/quantum.c **** #  define COM1x1 COM1C1
 520:quantum/quantum.c **** #  define OCR1x  OCR1C
 521:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 522:quantum/quantum.c **** #  define COM1x1 COM1B1
 523:quantum/quantum.c **** #  define OCR1x  OCR1B
 524:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 525:quantum/quantum.c **** #  define COM1x1 COM1A1
 526:quantum/quantum.c **** #  define OCR1x  OCR1A
 527:quantum/quantum.c **** #else
 528:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 529:quantum/quantum.c **** #endif
 530:quantum/quantum.c **** 
 531:quantum/quantum.c **** __attribute__ ((weak))
 532:quantum/quantum.c **** void backlight_init_ports(void)
 533:quantum/quantum.c **** {
 534:quantum/quantum.c **** 
 535:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 536:quantum/quantum.c ****   // DDRx |= n
 537:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 538:quantum/quantum.c ****   // PORTx &= ~n
 539:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 540:quantum/quantum.c **** 
 541:quantum/quantum.c ****   // Use full 16-bit resolution.
 542:quantum/quantum.c ****   ICR1 = 0xFFFF;
 543:quantum/quantum.c **** 
 544:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 545:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 546:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 547:quantum/quantum.c **** 
 548:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 549:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 550:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 551:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 552:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 553:quantum/quantum.c **** 
 554:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 555:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 556:quantum/quantum.c **** 
 557:quantum/quantum.c ****   backlight_init();
 558:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 559:quantum/quantum.c ****     breathing_defaults();
 560:quantum/quantum.c ****   #endif
 561:quantum/quantum.c **** }
 562:quantum/quantum.c **** 
 563:quantum/quantum.c **** __attribute__ ((weak))
 564:quantum/quantum.c **** void backlight_set(uint8_t level)
 565:quantum/quantum.c **** {
 566:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 567:quantum/quantum.c ****   // PORTx &= ~n
 568:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 569:quantum/quantum.c **** 
 570:quantum/quantum.c ****   if ( level == 0 ) {
 571:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 572:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 573:quantum/quantum.c ****     OCR1x = 0x0;
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 575:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 576:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 577:quantum/quantum.c ****     // Set the brightness
 578:quantum/quantum.c ****     OCR1x = 0xFFFF;
 579:quantum/quantum.c ****   } else {
 580:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 581:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 582:quantum/quantum.c ****     // Set the brightness
 583:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** 
 586:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 587:quantum/quantum.c ****     breathing_intensity_default();
 588:quantum/quantum.c ****   #endif
 589:quantum/quantum.c **** }
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** 
 592:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 595:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 596:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** static uint8_t breath_intensity;
 599:quantum/quantum.c **** static uint8_t breath_speed;
 600:quantum/quantum.c **** static uint16_t breathing_index;
 601:quantum/quantum.c **** static uint8_t breathing_halt;
 602:quantum/quantum.c **** 
 603:quantum/quantum.c **** void breathing_enable(void)
 604:quantum/quantum.c **** {
 605:quantum/quantum.c ****     if (get_backlight_level() == 0)
 606:quantum/quantum.c ****     {
 607:quantum/quantum.c ****         breathing_index = 0;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c ****     else
 610:quantum/quantum.c ****     {
 611:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 612:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 613:quantum/quantum.c ****     }
 614:quantum/quantum.c **** 
 615:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 616:quantum/quantum.c **** 
 617:quantum/quantum.c ****     // Enable breathing interrupt
 618:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 619:quantum/quantum.c **** }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c **** void breathing_pulse(void)
 622:quantum/quantum.c **** {
 623:quantum/quantum.c ****     if (get_backlight_level() == 0)
 624:quantum/quantum.c ****     {
 625:quantum/quantum.c ****         breathing_index = 0;
 626:quantum/quantum.c ****     }
 627:quantum/quantum.c ****     else
 628:quantum/quantum.c ****     {
 629:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 630:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 631:quantum/quantum.c ****     }
 632:quantum/quantum.c **** 
 633:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 634:quantum/quantum.c **** 
 635:quantum/quantum.c ****     // Enable breathing interrupt
 636:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 637:quantum/quantum.c **** }
 638:quantum/quantum.c **** 
 639:quantum/quantum.c **** void breathing_disable(void)
 640:quantum/quantum.c **** {
 641:quantum/quantum.c ****     // Disable breathing interrupt
 642:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 643:quantum/quantum.c ****     backlight_set(get_backlight_level());
 644:quantum/quantum.c **** }
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** void breathing_self_disable(void)
 647:quantum/quantum.c **** {
 648:quantum/quantum.c ****     if (get_backlight_level() == 0)
 649:quantum/quantum.c ****     {
 650:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 651:quantum/quantum.c ****     }
 652:quantum/quantum.c ****     else
 653:quantum/quantum.c ****     {
 654:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 655:quantum/quantum.c ****     }
 656:quantum/quantum.c **** 
 657:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 658:quantum/quantum.c **** }
 659:quantum/quantum.c **** 
 660:quantum/quantum.c **** void breathing_toggle(void)
 661:quantum/quantum.c **** {
 662:quantum/quantum.c ****     if (!is_breathing())
 663:quantum/quantum.c ****     {
 664:quantum/quantum.c ****         if (get_backlight_level() == 0)
 665:quantum/quantum.c ****         {
 666:quantum/quantum.c ****             breathing_index = 0;
 667:quantum/quantum.c ****         }
 668:quantum/quantum.c ****         else
 669:quantum/quantum.c ****         {
 670:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 671:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 672:quantum/quantum.c ****         }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c ****     // Toggle breathing interrupt
 678:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 679:quantum/quantum.c **** 
 680:quantum/quantum.c ****     // Restore backlight level
 681:quantum/quantum.c ****     if (!is_breathing())
 682:quantum/quantum.c ****     {
 683:quantum/quantum.c ****         backlight_set(get_backlight_level());
 684:quantum/quantum.c ****     }
 685:quantum/quantum.c **** }
 686:quantum/quantum.c **** 
 687:quantum/quantum.c **** bool is_breathing(void)
 688:quantum/quantum.c **** {
 689:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 690:quantum/quantum.c **** }
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void breathing_intensity_default(void)
 693:quantum/quantum.c **** {
 694:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 695:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 696:quantum/quantum.c **** }
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 699:quantum/quantum.c **** {
 700:quantum/quantum.c ****     breath_intensity = value;
 701:quantum/quantum.c **** }
 702:quantum/quantum.c **** 
 703:quantum/quantum.c **** void breathing_speed_default(void)
 704:quantum/quantum.c **** {
 705:quantum/quantum.c ****     breath_speed = 4;
 706:quantum/quantum.c **** }
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 709:quantum/quantum.c **** {
 710:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 711:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****     if (is_breathing_now)
 714:quantum/quantum.c ****     {
 715:quantum/quantum.c ****         // Disable breathing interrupt
 716:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 717:quantum/quantum.c ****     }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     breath_speed = value;
 720:quantum/quantum.c **** 
 721:quantum/quantum.c ****     if (is_breathing_now)
 722:quantum/quantum.c ****     {
 723:quantum/quantum.c ****         // Adjust index to account for new speed
 724:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 725:quantum/quantum.c **** 
 726:quantum/quantum.c ****         // Enable breathing interrupt
 727:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 728:quantum/quantum.c ****     }
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(0);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 747:quantum/quantum.c ****     {
 748:quantum/quantum.c ****         breathing_speed_set(10);
 749:quantum/quantum.c ****     }
 750:quantum/quantum.c ****     else
 751:quantum/quantum.c ****     {
 752:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 753:quantum/quantum.c ****     }
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void breathing_defaults(void)
 757:quantum/quantum.c **** {
 758:quantum/quantum.c ****     breathing_intensity_default();
 759:quantum/quantum.c ****     breathing_speed_default();
 760:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 764:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 765:quantum/quantum.c ****  *
 766:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 767:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 768:quantum/quantum.c ****  */
 769:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 770:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 771:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 772:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 773:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 777:quantum/quantum.c **** {
 778:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** 
 781:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 784:quantum/quantum.c ****     {
 785:quantum/quantum.c ****         // Disable breathing interrupt
 786:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 787:quantum/quantum.c ****     }
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** 
 794:quantum/quantum.c **** 
 795:quantum/quantum.c **** #endif // breathing
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** #else // backlight
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** __attribute__ ((weak))
 800:quantum/quantum.c **** void backlight_init_ports(void)
 801:quantum/quantum.c **** {
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** }
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** void backlight_set(uint8_t level)
 807:quantum/quantum.c **** {
 808:quantum/quantum.c **** 
 809:quantum/quantum.c **** }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c **** #endif // backlight
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** // Functions for spitting out values
 815:quantum/quantum.c **** //
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 818:quantum/quantum.c ****     uint16_t word = (number >> 16);
 819:quantum/quantum.c ****     send_word(word);
 820:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 821:quantum/quantum.c **** }
 822:quantum/quantum.c **** 
 823:quantum/quantum.c **** void send_word(uint16_t number) {
 824:quantum/quantum.c ****     uint8_t byte = number >> 8;
 825:quantum/quantum.c ****     send_byte(byte);
 826:quantum/quantum.c ****     send_byte(number & 0xFF);
 827:quantum/quantum.c **** }
 828:quantum/quantum.c **** 
 829:quantum/quantum.c **** void send_byte(uint8_t number) {
 830:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 831:quantum/quantum.c ****     send_nibble(nibble);
 832:quantum/quantum.c ****     send_nibble(number & 0xF);
 833:quantum/quantum.c **** }
 834:quantum/quantum.c **** 
 835:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1305               		.loc 1 835 34 view -0
 1306               		.cfi_startproc
 1307               		.loc 1 835 34 is_stmt 0 view .LVU307
 1308 0000 CF93      		push r28
 1309               	.LCFI24:
 1310               		.cfi_def_cfa_offset 3
 1311               		.cfi_offset 28, -2
 1312               	/* prologue: function */
 1313               	/* frame size = 0 */
 1314               	/* stack size = 1 */
 1315               	.L__stack_usage = 1
 1316 0002 C82F      		mov r28,r24
 836:quantum/quantum.c ****     switch (number) {
 1317               		.loc 1 836 5 is_stmt 1 view .LVU308
 1318 0004 8A30      		cpi r24,lo8(10)
 1319 0006 00F4      		brsh .L114
 1320 0008 8823      		tst r24
 1321 000a 01F0      		breq .L119
 837:quantum/quantum.c ****         case 0:
 838:quantum/quantum.c ****             register_code(KC_0);
 839:quantum/quantum.c ****             unregister_code(KC_0);
 840:quantum/quantum.c ****             break;
 841:quantum/quantum.c ****         case 1 ... 9:
 842:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 1322               		.loc 1 842 13 view .LVU309
 1323 000c C35E      		subi r28,lo8(-(29))
 1324               	.L122:
 843:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 844:quantum/quantum.c ****             break;
 845:quantum/quantum.c ****         case 0xA ... 0xF:
 846:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1325               		.loc 1 846 13 is_stmt 0 view .LVU310
 1326 000e 8C2F      		mov r24,r28
 1327               	.LVL117:
 1328               		.loc 1 846 13 view .LVU311
 1329 0010 0E94 0000 		call register_code
 1330               	.LVL118:
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1331               		.loc 1 847 13 is_stmt 1 view .LVU312
 1332 0014 8C2F      		mov r24,r28
 1333 0016 00C0      		rjmp .L121
 1334               	.LVL119:
 1335               	.L114:
 836:quantum/quantum.c ****         case 0:
 1336               		.loc 1 836 5 is_stmt 0 view .LVU313
 1337 0018 96EF      		ldi r25,lo8(-10)
 1338 001a 980F      		add r25,r24
 846:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1339               		.loc 1 846 13 view .LVU314
 1340 001c C650      		subi r28,lo8(-(-6))
 836:quantum/quantum.c ****         case 0:
 1341               		.loc 1 836 5 view .LVU315
 1342 001e 9630      		cpi r25,lo8(6)
 1343 0020 00F0      		brlo .L122
 1344               	/* epilogue start */
 848:quantum/quantum.c ****             break;
 849:quantum/quantum.c ****     }
 850:quantum/quantum.c **** }
 1345               		.loc 1 850 1 view .LVU316
 1346 0022 CF91      		pop r28
 1347 0024 0895      		ret
 1348               	.L119:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1349               		.loc 1 838 13 is_stmt 1 view .LVU317
 1350 0026 87E2      		ldi r24,lo8(39)
 1351               	.LVL120:
 838:quantum/quantum.c ****             unregister_code(KC_0);
 1352               		.loc 1 838 13 is_stmt 0 view .LVU318
 1353 0028 0E94 0000 		call register_code
 1354               	.LVL121:
 839:quantum/quantum.c ****             break;
 1355               		.loc 1 839 13 is_stmt 1 view .LVU319
 1356 002c 87E2      		ldi r24,lo8(39)
 1357               	.LVL122:
 1358               	.L121:
 1359               	/* epilogue start */
 1360               		.loc 1 850 1 is_stmt 0 view .LVU320
 1361 002e CF91      		pop r28
 847:quantum/quantum.c ****             break;
 1362               		.loc 1 847 13 view .LVU321
 1363 0030 0C94 0000 		jmp unregister_code
 1364               	.LVL123:
 1365               		.cfi_endproc
 1366               	.LFE125:
 1368               		.section	.text.send_byte,"ax",@progbits
 1369               	.global	send_byte
 1371               	send_byte:
 1372               	.LVL124:
 1373               	.LFB124:
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1374               		.loc 1 829 32 is_stmt 1 view -0
 1375               		.cfi_startproc
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1376               		.loc 1 829 32 is_stmt 0 view .LVU323
 1377 0000 CF93      		push r28
 1378               	.LCFI25:
 1379               		.cfi_def_cfa_offset 3
 1380               		.cfi_offset 28, -2
 1381               	/* prologue: function */
 1382               	/* frame size = 0 */
 1383               	/* stack size = 1 */
 1384               	.L__stack_usage = 1
 1385 0002 C82F      		mov r28,r24
 830:quantum/quantum.c ****     send_nibble(nibble);
 1386               		.loc 1 830 5 is_stmt 1 view .LVU324
 1387               	.LVL125:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1388               		.loc 1 831 5 view .LVU325
 1389 0004 8295      		swap r24
 1390               	.LVL126:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1391               		.loc 1 831 5 is_stmt 0 view .LVU326
 1392 0006 8F70      		andi r24,lo8(15)
 1393 0008 0E94 0000 		call send_nibble
 1394               	.LVL127:
 832:quantum/quantum.c **** }
 1395               		.loc 1 832 5 is_stmt 1 view .LVU327
 1396 000c 8C2F      		mov r24,r28
 1397 000e 8F70      		andi r24,lo8(15)
 1398               	/* epilogue start */
 833:quantum/quantum.c **** 
 1399               		.loc 1 833 1 is_stmt 0 view .LVU328
 1400 0010 CF91      		pop r28
 1401               	.LVL128:
 832:quantum/quantum.c **** }
 1402               		.loc 1 832 5 view .LVU329
 1403 0012 0C94 0000 		jmp send_nibble
 1404               	.LVL129:
 1405               		.cfi_endproc
 1406               	.LFE124:
 1408               		.section	.text.send_word,"ax",@progbits
 1409               	.global	send_word
 1411               	send_word:
 1412               	.LVL130:
 1413               	.LFB123:
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1414               		.loc 1 823 33 is_stmt 1 view -0
 1415               		.cfi_startproc
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1416               		.loc 1 823 33 is_stmt 0 view .LVU331
 1417 0000 CF93      		push r28
 1418               	.LCFI26:
 1419               		.cfi_def_cfa_offset 3
 1420               		.cfi_offset 28, -2
 1421               	/* prologue: function */
 1422               	/* frame size = 0 */
 1423               	/* stack size = 1 */
 1424               	.L__stack_usage = 1
 1425 0002 C82F      		mov r28,r24
 1426 0004 892F      		mov r24,r25
 1427               	.LVL131:
 824:quantum/quantum.c ****     send_byte(byte);
 1428               		.loc 1 824 5 is_stmt 1 view .LVU332
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1429               		.loc 1 825 5 view .LVU333
 1430 0006 0E94 0000 		call send_byte
 1431               	.LVL132:
 826:quantum/quantum.c **** }
 1432               		.loc 1 826 5 view .LVU334
 1433 000a 8C2F      		mov r24,r28
 1434               	/* epilogue start */
 827:quantum/quantum.c **** 
 1435               		.loc 1 827 1 is_stmt 0 view .LVU335
 1436 000c CF91      		pop r28
 826:quantum/quantum.c **** }
 1437               		.loc 1 826 5 view .LVU336
 1438 000e 0C94 0000 		jmp send_byte
 1439               	.LVL133:
 1440               		.cfi_endproc
 1441               	.LFE123:
 1443               		.section	.text.send_dword,"ax",@progbits
 1444               	.global	send_dword
 1446               	send_dword:
 1447               	.LVL134:
 1448               	.LFB122:
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1449               		.loc 1 817 34 is_stmt 1 view -0
 1450               		.cfi_startproc
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1451               		.loc 1 817 34 is_stmt 0 view .LVU338
 1452 0000 CF93      		push r28
 1453               	.LCFI27:
 1454               		.cfi_def_cfa_offset 3
 1455               		.cfi_offset 28, -2
 1456 0002 DF93      		push r29
 1457               	.LCFI28:
 1458               		.cfi_def_cfa_offset 4
 1459               		.cfi_offset 29, -3
 1460               	/* prologue: function */
 1461               	/* frame size = 0 */
 1462               	/* stack size = 2 */
 1463               	.L__stack_usage = 2
 1464 0004 D62F      		mov r29,r22
 1465 0006 C72F      		mov r28,r23
 818:quantum/quantum.c ****     send_word(word);
 1466               		.loc 1 818 5 is_stmt 1 view .LVU339
 1467               	.LVL135:
 819:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1468               		.loc 1 819 5 view .LVU340
 1469 0008 0E94 0000 		call send_word
 1470               	.LVL136:
 820:quantum/quantum.c **** }
 1471               		.loc 1 820 5 view .LVU341
 1472 000c 8D2F      		mov r24,r29
 1473 000e 9C2F      		mov r25,r28
 1474               	/* epilogue start */
 821:quantum/quantum.c **** 
 1475               		.loc 1 821 1 is_stmt 0 view .LVU342
 1476 0010 DF91      		pop r29
 821:quantum/quantum.c **** 
 1477               		.loc 1 821 1 view .LVU343
 1478 0012 CF91      		pop r28
 820:quantum/quantum.c **** }
 1479               		.loc 1 820 5 view .LVU344
 1480 0014 0C94 0000 		jmp send_word
 1481               	.LVL137:
 820:quantum/quantum.c **** }
 1482               		.loc 1 820 5 view .LVU345
 1483               		.cfi_endproc
 1484               	.LFE122:
 1486               		.section	.text.api_send_unicode,"ax",@progbits
 1487               	.global	api_send_unicode
 1489               	api_send_unicode:
 1490               	.LVL138:
 1491               	.LFB126:
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1492               		.loc 1 852 41 is_stmt 1 view -0
 1493               		.cfi_startproc
 1494               	/* prologue: function */
 1495               	/* frame size = 0 */
 1496               	/* stack size = 0 */
 1497               	.L__stack_usage = 0
 853:quantum/quantum.c **** #ifdef API_ENABLE
 854:quantum/quantum.c ****     uint8_t chunk[4];
 855:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 856:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 857:quantum/quantum.c **** #endif
 858:quantum/quantum.c **** }
 1498               		.loc 1 858 1 view .LVU347
 1499               	/* epilogue start */
 1500 0000 0895      		ret
 1501               		.cfi_endproc
 1502               	.LFE126:
 1504               		.section	.text.led_set_user,"ax",@progbits
 1505               		.weak	led_set_user
 1507               	led_set_user:
 1508               	.LVL139:
 1509               	.LFB127:
 859:quantum/quantum.c **** 
 860:quantum/quantum.c **** __attribute__ ((weak))
 861:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1510               		.loc 1 861 36 view -0
 1511               		.cfi_startproc
 1512               	/* prologue: function */
 1513               	/* frame size = 0 */
 1514               	/* stack size = 0 */
 1515               	.L__stack_usage = 0
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** }
 1516               		.loc 1 863 1 view .LVU349
 1517               	/* epilogue start */
 1518 0000 0895      		ret
 1519               		.cfi_endproc
 1520               	.LFE127:
 1522               		.set	led_set_user.localalias,led_set_user
 1523               		.section	.text.backlight_set,"ax",@progbits
 1524               		.weak	backlight_set
 1526               	backlight_set:
 1527               	.LFB140:
 1528               		.cfi_startproc
 1529               	/* prologue: function */
 1530               	/* frame size = 0 */
 1531               	/* stack size = 0 */
 1532               	.L__stack_usage = 0
 1533               	/* epilogue start */
 1534 0000 0895      		ret
 1535               		.cfi_endproc
 1536               	.LFE140:
 1538               		.section	.text.led_set_kb,"ax",@progbits
 1539               		.weak	led_set_kb
 1541               	led_set_kb:
 1542               	.LVL140:
 1543               	.LFB128:
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** __attribute__ ((weak))
 866:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1544               		.loc 1 866 34 view -0
 1545               		.cfi_startproc
 1546               	/* prologue: function */
 1547               	/* frame size = 0 */
 1548               	/* stack size = 0 */
 1549               	.L__stack_usage = 0
 867:quantum/quantum.c ****     led_set_user(usb_led);
 1550               		.loc 1 867 5 view .LVU351
 1551 0000 0C94 0000 		jmp led_set_user
 1552               	.LVL141:
 1553               		.loc 1 867 5 is_stmt 0 view .LVU352
 1554               		.cfi_endproc
 1555               	.LFE128:
 1557               		.section	.text.led_init_ports,"ax",@progbits
 1558               		.weak	led_init_ports
 1560               	led_init_ports:
 1561               	.LFB129:
 868:quantum/quantum.c **** }
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** __attribute__ ((weak))
 871:quantum/quantum.c **** void led_init_ports(void)
 872:quantum/quantum.c **** {
 1562               		.loc 1 872 1 is_stmt 1 view -0
 1563               		.cfi_startproc
 1564               	/* prologue: function */
 1565               	/* frame size = 0 */
 1566               	/* stack size = 0 */
 1567               	.L__stack_usage = 0
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** }
 1568               		.loc 1 874 1 view .LVU354
 1569               	/* epilogue start */
 1570 0000 0895      		ret
 1571               		.cfi_endproc
 1572               	.LFE129:
 1574               		.section	.text.led_set,"ax",@progbits
 1575               		.weak	led_set
 1577               	led_set:
 1578               	.LVL142:
 1579               	.LFB130:
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** __attribute__ ((weak))
 877:quantum/quantum.c **** void led_set(uint8_t usb_led)
 878:quantum/quantum.c **** {
 1580               		.loc 1 878 1 view -0
 1581               		.cfi_startproc
 1582               	/* prologue: function */
 1583               	/* frame size = 0 */
 1584               	/* stack size = 0 */
 1585               	.L__stack_usage = 0
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   // Example LED Code
 881:quantum/quantum.c ****   //
 882:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 883:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 884:quantum/quantum.c ****     // {
 885:quantum/quantum.c ****     //     // Output high.
 886:quantum/quantum.c ****     //     DDRE |= (1<<6);
 887:quantum/quantum.c ****     //     PORTE |= (1<<6);
 888:quantum/quantum.c ****     // }
 889:quantum/quantum.c ****     // else
 890:quantum/quantum.c ****     // {
 891:quantum/quantum.c ****     //     // Output low.
 892:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 893:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 894:quantum/quantum.c ****     // }
 895:quantum/quantum.c **** 
 896:quantum/quantum.c ****   led_set_kb(usb_led);
 1586               		.loc 1 896 3 view .LVU356
 1587 0000 0C94 0000 		jmp led_set_kb
 1588               	.LVL143:
 1589               		.loc 1 896 3 is_stmt 0 view .LVU357
 1590               		.cfi_endproc
 1591               	.LFE130:
 1593               		.section	.text.startup_user,"ax",@progbits
 1594               		.weak	startup_user
 1596               	startup_user:
 1597               	.LFB134:
 1598               		.cfi_startproc
 1599               	/* prologue: function */
 1600               	/* frame size = 0 */
 1601               	/* stack size = 0 */
 1602               	.L__stack_usage = 0
 1603               	/* epilogue start */
 1604 0000 0895      		ret
 1605               		.cfi_endproc
 1606               	.LFE134:
 1608               		.section	.text.shutdown_user,"ax",@progbits
 1609               		.weak	shutdown_user
 1611               	shutdown_user:
 1612               	.LFB136:
 1613               		.cfi_startproc
 1614               	/* prologue: function */
 1615               	/* frame size = 0 */
 1616               	/* stack size = 0 */
 1617               	.L__stack_usage = 0
 1618               	/* epilogue start */
 1619 0000 0895      		ret
 1620               		.cfi_endproc
 1621               	.LFE136:
 1623               	.global	ascii_to_qwerty_keycode_lut
 1624               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a"
 1627               	ascii_to_qwerty_keycode_lut:
 1628 0000 00        		.string	""
 1629 0001 00        		.string	""
 1630 0002 00        		.string	""
 1631 0003 00        		.string	""
 1632 0004 00        		.string	""
 1633 0005 00        		.string	""
 1634 0006 00        		.string	""
 1635 0007 00        		.string	""
 1636 0008 2A2B 2800 		.string	"*+("
 1637 000c 00        		.string	""
 1638 000d 00        		.string	""
 1639 000e 00        		.string	""
 1640 000f 00        		.string	""
 1641 0010 00        		.string	""
 1642 0011 00        		.string	""
 1643 0012 00        		.string	""
 1644 0013 00        		.string	""
 1645 0014 00        		.string	""
 1646 0015 00        		.string	""
 1647 0016 00        		.string	""
 1648 0017 00        		.string	""
 1649 0018 00        		.string	""
 1650 0019 00        		.string	""
 1651 001a 00        		.string	""
 1652 001b 2900      		.string	")"
 1653 001d 00        		.string	""
 1654 001e 00        		.string	""
 1655 001f 00        		.string	""
 1656 0020 2C1E 3420 		.ascii	",\0364 !\"$4&'%.6-78'\036\037 !\"#$%&336.78\037\004\005\006\007"
 1656      2122 2434 
 1656      2627 252E 
 1656      362D 3738 
 1656      271E 1F20 
 1657 0045 0809 0A0B 		.ascii	"\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031"
 1657      0C0D 0E0F 
 1657      1011 1213 
 1657      1415 1617 
 1657      1819 
 1658 0057 1A1B 1C1D 		.ascii	"\032\033\034\035/10#-5\004\005\006\007\b\t\n\013\f\r\016\017"
 1658      2F31 3023 
 1658      2D35 0405 
 1658      0607 0809 
 1658      0A0B 0C0D 
 1659 006d 1011 1213 		.ascii	"\020\021\022\023\024\025\026\027\030\031\032\033\034\035/105"
 1659      1415 1617 
 1659      1819 1A1B 
 1659      1C1D 2F31 
 1659      3035 
 1660 007f 4C        		.ascii	"L"
 1661               	.global	ascii_to_qwerty_shift_lut
 1662               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a"
 1665               	ascii_to_qwerty_shift_lut:
 1666 0000 00        		.byte	0
 1667 0001 00        		.byte	0
 1668 0002 00        		.byte	0
 1669 0003 00        		.byte	0
 1670 0004 00        		.byte	0
 1671 0005 00        		.byte	0
 1672 0006 00        		.byte	0
 1673 0007 00        		.byte	0
 1674 0008 00        		.byte	0
 1675 0009 00        		.byte	0
 1676 000a 00        		.byte	0
 1677 000b 00        		.byte	0
 1678 000c 00        		.byte	0
 1679 000d 00        		.byte	0
 1680 000e 00        		.byte	0
 1681 000f 00        		.byte	0
 1682 0010 00        		.byte	0
 1683 0011 00        		.byte	0
 1684 0012 00        		.byte	0
 1685 0013 00        		.byte	0
 1686 0014 00        		.byte	0
 1687 0015 00        		.byte	0
 1688 0016 00        		.byte	0
 1689 0017 00        		.byte	0
 1690 0018 00        		.byte	0
 1691 0019 00        		.byte	0
 1692 001a 00        		.byte	0
 1693 001b 00        		.byte	0
 1694 001c 00        		.byte	0
 1695 001d 00        		.byte	0
 1696 001e 00        		.byte	0
 1697 001f 00        		.byte	0
 1698 0020 00        		.byte	0
 1699 0021 01        		.byte	1
 1700 0022 01        		.byte	1
 1701 0023 01        		.byte	1
 1702 0024 01        		.byte	1
 1703 0025 01        		.byte	1
 1704 0026 01        		.byte	1
 1705 0027 00        		.byte	0
 1706 0028 01        		.byte	1
 1707 0029 01        		.byte	1
 1708 002a 01        		.byte	1
 1709 002b 01        		.byte	1
 1710 002c 00        		.byte	0
 1711 002d 00        		.byte	0
 1712 002e 00        		.byte	0
 1713 002f 00        		.byte	0
 1714 0030 00        		.byte	0
 1715 0031 00        		.byte	0
 1716 0032 00        		.byte	0
 1717 0033 00        		.byte	0
 1718 0034 00        		.byte	0
 1719 0035 00        		.byte	0
 1720 0036 00        		.byte	0
 1721 0037 00        		.byte	0
 1722 0038 00        		.byte	0
 1723 0039 00        		.byte	0
 1724 003a 01        		.byte	1
 1725 003b 00        		.byte	0
 1726 003c 01        		.byte	1
 1727 003d 00        		.byte	0
 1728 003e 01        		.byte	1
 1729 003f 01        		.byte	1
 1730 0040 01        		.byte	1
 1731 0041 01        		.byte	1
 1732 0042 01        		.byte	1
 1733 0043 01        		.byte	1
 1734 0044 01        		.byte	1
 1735 0045 01        		.byte	1
 1736 0046 01        		.byte	1
 1737 0047 01        		.byte	1
 1738 0048 01        		.byte	1
 1739 0049 01        		.byte	1
 1740 004a 01        		.byte	1
 1741 004b 01        		.byte	1
 1742 004c 01        		.byte	1
 1743 004d 01        		.byte	1
 1744 004e 01        		.byte	1
 1745 004f 01        		.byte	1
 1746 0050 01        		.byte	1
 1747 0051 01        		.byte	1
 1748 0052 01        		.byte	1
 1749 0053 01        		.byte	1
 1750 0054 01        		.byte	1
 1751 0055 01        		.byte	1
 1752 0056 01        		.byte	1
 1753 0057 01        		.byte	1
 1754 0058 01        		.byte	1
 1755 0059 01        		.byte	1
 1756 005a 01        		.byte	1
 1757 005b 00        		.byte	0
 1758 005c 00        		.byte	0
 1759 005d 00        		.byte	0
 1760 005e 01        		.byte	1
 1761 005f 01        		.byte	1
 1762 0060 00        		.byte	0
 1763 0061 00        		.byte	0
 1764 0062 00        		.byte	0
 1765 0063 00        		.byte	0
 1766 0064 00        		.byte	0
 1767 0065 00        		.byte	0
 1768 0066 00        		.byte	0
 1769 0067 00        		.byte	0
 1770 0068 00        		.byte	0
 1771 0069 00        		.byte	0
 1772 006a 00        		.byte	0
 1773 006b 00        		.byte	0
 1774 006c 00        		.byte	0
 1775 006d 00        		.byte	0
 1776 006e 00        		.byte	0
 1777 006f 00        		.byte	0
 1778 0070 00        		.byte	0
 1779 0071 00        		.byte	0
 1780 0072 00        		.byte	0
 1781 0073 00        		.byte	0
 1782 0074 00        		.byte	0
 1783 0075 00        		.byte	0
 1784 0076 00        		.byte	0
 1785 0077 00        		.byte	0
 1786 0078 00        		.byte	0
 1787 0079 00        		.byte	0
 1788 007a 00        		.byte	0
 1789 007b 01        		.byte	1
 1790 007c 01        		.byte	1
 1791 007d 01        		.byte	1
 1792 007e 01        		.byte	1
 1793 007f 00        		.byte	0
 1794               		.section	.bss.scs_timer,"aw",@nobits
 1797               	scs_timer:
 1798 0000 0000      		.zero	2
 1799               		.section	.bss.shift_interrupted,"aw",@nobits
 1802               	shift_interrupted:
 1803 0000 0000      		.zero	2
 1804               		.text
 1805               	.Letext0:
 1806               		.file 3 "/usr/avr/include/stdint.h"
 1807               		.file 4 "./tmk_core/common/keyboard.h"
 1808               		.file 5 "./tmk_core/common/action.h"
 1809               		.file 6 "./tmk_core/common/debug.h"
 1810               		.file 7 "quantum/keycode_config.h"
 1811               		.file 8 "./tmk_core/common/keycode.h"
 1812               		.file 9 "quantum/quantum_keycodes.h"
 1813               		.file 10 "./tmk_core/common/action_layer.h"
 1814               		.file 11 "quantum/quantum.h"
 1815               		.file 12 "quantum/keymap.h"
 1816               		.file 13 "./quantum/process_keycode/process_leader.h"
 1817               		.file 14 "./tmk_core/common/timer.h"
 1818               		.file 15 "./tmk_core/common/eeconfig.h"
 1819               		.file 16 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
     /tmp/ccAsbhFv.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccAsbhFv.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccAsbhFv.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccAsbhFv.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccAsbhFv.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccAsbhFv.s:12     .text.do_code16:0000000000000000 do_code16
     /tmp/ccAsbhFv.s:146    .text.register_code16:0000000000000000 register_code16
     /tmp/ccAsbhFv.s:180    .text.unregister_code16:0000000000000000 unregister_code16
     /tmp/ccAsbhFv.s:221    .text.process_action_kb:0000000000000000 process_action_kb
     /tmp/ccAsbhFv.s:243    .text.process_record_user:0000000000000000 process_record_user
     /tmp/ccAsbhFv.s:265    .text.process_record_kb:0000000000000000 process_record_kb
     /tmp/ccAsbhFv.s:285    .text.reset_keyboard:0000000000000000 reset_keyboard
     /tmp/ccAsbhFv.s:330    .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccAsbhFv.s:1802   .bss.shift_interrupted:0000000000000000 shift_interrupted
     /tmp/ccAsbhFv.s:1797   .bss.scs_timer:0000000000000000 scs_timer
     /tmp/ccAsbhFv.s:854    .text.send_string:0000000000000000 send_string
     /tmp/ccAsbhFv.s:1627   .progmem.data.ascii_to_qwerty_keycode_lut:0000000000000000 ascii_to_qwerty_keycode_lut
     /tmp/ccAsbhFv.s:1665   .progmem.data.ascii_to_qwerty_shift_lut:0000000000000000 ascii_to_qwerty_shift_lut
     /tmp/ccAsbhFv.s:1003   .text.update_tri_layer:0000000000000000 update_tri_layer
     /tmp/ccAsbhFv.s:1121   .text.tap_random_base64:0000000000000000 tap_random_base64
     /tmp/ccAsbhFv.s:1253   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/ccAsbhFv.s:1270   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/ccAsbhFv.s:1287   .text.backlight_init_ports:0000000000000000 backlight_init_ports
     /tmp/ccAsbhFv.s:1302   .text.send_nibble:0000000000000000 send_nibble
     /tmp/ccAsbhFv.s:1371   .text.send_byte:0000000000000000 send_byte
     /tmp/ccAsbhFv.s:1411   .text.send_word:0000000000000000 send_word
     /tmp/ccAsbhFv.s:1446   .text.send_dword:0000000000000000 send_dword
     /tmp/ccAsbhFv.s:1489   .text.api_send_unicode:0000000000000000 api_send_unicode
     /tmp/ccAsbhFv.s:1507   .text.led_set_user:0000000000000000 led_set_user
     /tmp/ccAsbhFv.s:1507   .text.led_set_user:0000000000000000 led_set_user.localalias
     /tmp/ccAsbhFv.s:1526   .text.backlight_set:0000000000000000 backlight_set
     /tmp/ccAsbhFv.s:1541   .text.led_set_kb:0000000000000000 led_set_kb
     /tmp/ccAsbhFv.s:1560   .text.led_init_ports:0000000000000000 led_init_ports
     /tmp/ccAsbhFv.s:1577   .text.led_set:0000000000000000 led_set
     /tmp/ccAsbhFv.s:1596   .text.startup_user:0000000000000000 startup_user
     /tmp/ccAsbhFv.s:1611   .text.shutdown_user:0000000000000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
process_leader
read_source_layers_cache
timer_read
debug_config
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_kb
__do_clear_bss
