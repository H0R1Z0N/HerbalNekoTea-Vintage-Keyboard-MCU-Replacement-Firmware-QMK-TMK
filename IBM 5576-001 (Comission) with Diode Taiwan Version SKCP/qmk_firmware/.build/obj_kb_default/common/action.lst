   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.file 1 "./tmk_core/common/action.c"
  12               		.section	.text.action_exec,"ax",@progbits
  13               	.global	action_exec
  15               	action_exec:
  16               	.LFB107:
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  17               		.loc 1 38 1 view -0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 CDB7      		in r28,__SP_L__
  28 0006 DEB7      		in r29,__SP_H__
  29               	.LCFI2:
  30               		.cfi_def_cfa_register 28
  31 0008 2B97      		sbiw r28,11
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 15
  34 000a 0FB6      		in __tmp_reg__,__SREG__
  35 000c F894      		cli
  36 000e DEBF      		out __SP_H__,r29
  37 0010 0FBE      		out __SREG__,__tmp_reg__
  38 0012 CDBF      		out __SP_L__,r28
  39               	/* prologue: function */
  40               	/* frame size = 11 */
  41               	/* stack size = 13 */
  42               	.L__stack_usage = 13
  43 0014 4F83      		std Y+7,r20
  44 0016 5887      		std Y+8,r21
  45 0018 6987      		std Y+9,r22
  46 001a 7A87      		std Y+10,r23
  47 001c 8B87      		std Y+11,r24
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 39 5 view .LVU1
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  49               		.loc 1 41 58 view .LVU2
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  50               		.loc 1 50 5 view .LVU3
  51               		.loc 1 50 17 is_stmt 0 view .LVU4
  52 001e 1E82      		std Y+6,__zero_reg__
  53 0020 85E0      		ldi r24,lo8(5)
  54 0022 FE01      		movw r30,r28
  55 0024 3796      		adiw r30,7
  56 0026 DE01      		movw r26,r28
  57 0028 1196      		adiw r26,1
  58               		0:
  59 002a 0190      		ld r0,Z+
  60 002c 0D92      		st X+,r0
  61 002e 8A95      		dec r24
  62 0030 01F4      		brne 0b
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  63               		.loc 1 53 5 is_stmt 1 view .LVU5
  64 0032 4981      		ldd r20,Y+1
  65 0034 5A81      		ldd r21,Y+2
  66 0036 6B81      		ldd r22,Y+3
  67 0038 7C81      		ldd r23,Y+4
  68 003a 8D81      		ldd r24,Y+5
  69 003c 9E81      		ldd r25,Y+6
  70               	/* epilogue start */
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  71               		.loc 1 60 1 is_stmt 0 view .LVU6
  72 003e 2B96      		adiw r28,11
  73 0040 0FB6      		in __tmp_reg__,__SREG__
  74 0042 F894      		cli
  75 0044 DEBF      		out __SP_H__,r29
  76 0046 0FBE      		out __SREG__,__tmp_reg__
  77 0048 CDBF      		out __SP_L__,r28
  78 004a DF91      		pop r29
  79 004c CF91      		pop r28
  53:./tmk_core/common/action.c **** #else
  80               		.loc 1 53 5 view .LVU7
  81 004e 0C94 0000 		jmp action_tapping_process
  82               	.LVL0:
  83               		.cfi_endproc
  84               	.LFE107:
  86               		.section	.text.process_record_quantum,"ax",@progbits
  87               		.weak	process_record_quantum
  89               	process_record_quantum:
  90               	.LVL1:
  91               	.LFB109:
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  92               		.loc 1 99 50 is_stmt 1 view -0
  93               		.cfi_startproc
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
  98               		.loc 1 100 5 view .LVU9
 101:./tmk_core/common/action.c **** }
  99               		.loc 1 101 1 is_stmt 0 view .LVU10
 100 0000 81E0      		ldi r24,lo8(1)
 101               	.LVL2:
 102               	/* epilogue start */
 103               		.loc 1 101 1 view .LVU11
 104 0002 0895      		ret
 105               		.cfi_endproc
 106               	.LFE109:
 108               		.section	.text.register_code,"ax",@progbits
 109               	.global	register_code
 111               	register_code:
 112               	.LVL3:
 113               	.LFB112:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 114               		.loc 1 547 1 is_stmt 1 view -0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 120               		.loc 1 548 5 view .LVU13
 121               		.loc 1 548 8 is_stmt 0 view .LVU14
 122 0000 8823      		tst r24
 123 0002 01F4      		brne .+2
 124 0004 00C0      		rjmp .L3
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 125               		.loc 1 553 10 is_stmt 1 view .LVU15
 126               		.loc 1 553 13 is_stmt 0 view .LVU16
 127 0006 8238      		cpi r24,lo8(-126)
 128 0008 01F4      		brne .L6
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 129               		.loc 1 556 9 is_stmt 1 view .LVU17
 130               		.loc 1 556 13 is_stmt 0 view .LVU18
 131 000a 0E94 0000 		call host_keyboard_leds
 132               	.LVL4:
 133               		.loc 1 556 12 view .LVU19
 134 000e 81FD      		sbrc r24,1
 135 0010 00C0      		rjmp .L3
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 136               		.loc 1 558 9 is_stmt 1 view .LVU20
 137 0012 89E3      		ldi r24,lo8(57)
 138 0014 0E94 0000 		call add_key
 139               	.LVL5:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 140               		.loc 1 559 9 view .LVU21
 141 0018 0E94 0000 		call send_keyboard_report
 142               	.LVL6:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 143               		.loc 1 560 9 view .LVU22
 144 001c 89E3      		ldi r24,lo8(57)
 145               	.L16:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 146               		.loc 1 570 9 is_stmt 0 view .LVU23
 147 001e 0E94 0000 		call del_key
 148               	.LVL7:
 149               	.L17:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 150               		.loc 1 571 9 is_stmt 1 view .LVU24
 151 0022 0C94 0000 		jmp send_keyboard_report
 152               	.LVL8:
 153               	.L6:
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 154               		.loc 1 564 10 view .LVU25
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 155               		.loc 1 564 13 is_stmt 0 view .LVU26
 156 0026 8338      		cpi r24,lo8(-125)
 157 0028 01F4      		brne .L8
 566:./tmk_core/common/action.c **** #endif
 158               		.loc 1 566 9 is_stmt 1 view .LVU27
 566:./tmk_core/common/action.c **** #endif
 159               		.loc 1 566 13 is_stmt 0 view .LVU28
 160 002a 0E94 0000 		call host_keyboard_leds
 161               	.LVL9:
 566:./tmk_core/common/action.c **** #endif
 162               		.loc 1 566 12 view .LVU29
 163 002e 80FD      		sbrc r24,0
 164 0030 00C0      		rjmp .L3
 568:./tmk_core/common/action.c ****         send_keyboard_report();
 165               		.loc 1 568 9 is_stmt 1 view .LVU30
 166 0032 83E5      		ldi r24,lo8(83)
 167 0034 0E94 0000 		call add_key
 168               	.LVL10:
 569:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 169               		.loc 1 569 9 view .LVU31
 170 0038 0E94 0000 		call send_keyboard_report
 171               	.LVL11:
 570:./tmk_core/common/action.c ****         send_keyboard_report();
 172               		.loc 1 570 9 view .LVU32
 173 003c 83E5      		ldi r24,lo8(83)
 174 003e 00C0      		rjmp .L16
 175               	.LVL12:
 176               	.L8:
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 177               		.loc 1 574 10 view .LVU33
 178               		.loc 1 574 13 is_stmt 0 view .LVU34
 179 0040 8438      		cpi r24,lo8(-124)
 180 0042 01F4      		brne .L9
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 181               		.loc 1 576 9 is_stmt 1 view .LVU35
 182               		.loc 1 576 13 is_stmt 0 view .LVU36
 183 0044 0E94 0000 		call host_keyboard_leds
 184               	.LVL13:
 185               		.loc 1 576 12 view .LVU37
 186 0048 82FD      		sbrc r24,2
 187 004a 00C0      		rjmp .L3
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 188               		.loc 1 578 9 is_stmt 1 view .LVU38
 189 004c 87E4      		ldi r24,lo8(71)
 190 004e 0E94 0000 		call add_key
 191               	.LVL14:
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 192               		.loc 1 579 9 view .LVU39
 193 0052 0E94 0000 		call send_keyboard_report
 194               	.LVL15:
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 195               		.loc 1 580 9 view .LVU40
 196 0056 87E4      		ldi r24,lo8(71)
 197 0058 00C0      		rjmp .L16
 198               	.LVL16:
 199               	.L9:
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 200               		.loc 1 585 10 view .LVU41
 201               		.loc 1 585 13 is_stmt 0 view .LVU42
 202 005a 9CEF      		ldi r25,lo8(-4)
 203 005c 980F      		add r25,r24
 204 005e 913A      		cpi r25,lo8(-95)
 205 0060 00F4      		brsh .L10
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 206               		.loc 1 587 9 is_stmt 1 view .LVU43
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 207               		.loc 1 605 13 view .LVU44
 208 0062 0E94 0000 		call add_key
 209               	.LVL17:
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 210               		.loc 1 606 13 view .LVU45
 211 0066 00C0      		rjmp .L17
 212               	.LVL18:
 213               	.L10:
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 214               		.loc 1 609 10 view .LVU46
 215               		.loc 1 609 13 is_stmt 0 view .LVU47
 216 0068 90E2      		ldi r25,lo8(32)
 217 006a 980F      		add r25,r24
 218 006c 9830      		cpi r25,lo8(8)
 219 006e 00F4      		brsh .L11
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 220               		.loc 1 610 9 is_stmt 1 view .LVU48
 221               		.loc 1 610 18 is_stmt 0 view .LVU49
 222 0070 8770      		andi r24,lo8(7)
 223               	.LVL19:
 224               		.loc 1 610 9 view .LVU50
 225 0072 91E0      		ldi r25,lo8(1)
 226 0074 00C0      		rjmp 2f
 227               		1:
 228 0076 990F      		lsl r25
 229               		2:
 230 0078 8A95      		dec r24
 231 007a 02F4      		brpl 1b
 232 007c 892F      		mov r24,r25
 233 007e 0E94 0000 		call add_mods
 234               	.LVL20:
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 235               		.loc 1 611 9 is_stmt 1 view .LVU51
 236 0082 00C0      		rjmp .L17
 237               	.LVL21:
 238               	.L11:
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 239               		.loc 1 613 10 view .LVU52
 240               		.loc 1 613 13 is_stmt 0 view .LVU53
 241 0084 9BE5      		ldi r25,lo8(91)
 242 0086 980F      		add r25,r24
 243 0088 9330      		cpi r25,lo8(3)
 244 008a 00F4      		brsh .L12
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 245               		.loc 1 614 9 is_stmt 1 view .LVU54
 246 008c 853A      		cpi r24,lo8(-91)
 247 008e 01F0      		breq .L14
 248               		.loc 1 614 26 is_stmt 0 discriminator 1 view .LVU55
 249 0090 863A      		cpi r24,lo8(-90)
 250 0092 01F4      		brne .L15
 251               		.loc 1 614 26 view .LVU56
 252 0094 82E8      		ldi r24,lo8(-126)
 253 0096 90E0      		ldi r25,0
 254               	.LVL22:
 255               	.L13:
 256               		.loc 1 614 9 discriminator 12 view .LVU57
 257 0098 0C94 0000 		jmp host_system_send
 258               	.LVL23:
 259               	.L14:
 260               		.loc 1 614 9 view .LVU58
 261 009c 81E8      		ldi r24,lo8(-127)
 262 009e 90E0      		ldi r25,0
 263               	.LVL24:
 264               		.loc 1 614 9 view .LVU59
 265 00a0 00C0      		rjmp .L13
 266               	.LVL25:
 267               	.L15:
 268               		.loc 1 614 26 view .LVU60
 269 00a2 83E8      		ldi r24,lo8(-125)
 270 00a4 90E0      		ldi r25,0
 271               	.LVL26:
 272               		.loc 1 614 26 view .LVU61
 273 00a6 00C0      		rjmp .L13
 274               	.LVL27:
 275               	.L12:
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 276               		.loc 1 616 10 is_stmt 1 view .LVU62
 277               		.loc 1 616 13 is_stmt 0 view .LVU63
 278 00a8 885A      		subi r24,lo8(-(88))
 279               	.LVL28:
 280               		.loc 1 616 13 view .LVU64
 281 00aa 8531      		cpi r24,lo8(21)
 282 00ac 00F4      		brsh .L3
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 283               		.loc 1 617 9 is_stmt 1 view .LVU65
 284 00ae E82F      		mov r30,r24
 285 00b0 F0E0      		ldi r31,0
 286 00b2 EE0F      		lsl r30
 287 00b4 FF1F      		rol r31
 288               	.LVL29:
 289               		.loc 1 617 9 is_stmt 0 view .LVU66
 290 00b6 E050      		subi r30,lo8(-(CSWTCH.33))
 291 00b8 F040      		sbci r31,hi8(-(CSWTCH.33))
 292 00ba 8081      		ld r24,Z
 293 00bc 9181      		ldd r25,Z+1
 294 00be 0C94 0000 		jmp host_consumer_send
 295               	.LVL30:
 296               	.L3:
 297               	/* epilogue start */
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 298               		.loc 1 619 1 view .LVU67
 299 00c2 0895      		ret
 300               		.cfi_endproc
 301               	.LFE112:
 303               		.section	.text.unregister_code,"ax",@progbits
 304               	.global	unregister_code
 306               	unregister_code:
 307               	.LVL31:
 308               	.LFB113:
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 309               		.loc 1 622 1 is_stmt 1 view -0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 315               		.loc 1 623 5 view .LVU69
 316               		.loc 1 623 8 is_stmt 0 view .LVU70
 317 0000 8823      		tst r24
 318 0002 01F4      		brne .+2
 319 0004 00C0      		rjmp .L18
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 320               		.loc 1 628 10 is_stmt 1 view .LVU71
 321               		.loc 1 628 13 is_stmt 0 view .LVU72
 322 0006 8238      		cpi r24,lo8(-126)
 323 0008 01F4      		brne .L21
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 324               		.loc 1 631 9 is_stmt 1 view .LVU73
 325               		.loc 1 631 15 is_stmt 0 view .LVU74
 326 000a 0E94 0000 		call host_keyboard_leds
 327               	.LVL32:
 328               		.loc 1 631 12 view .LVU75
 329 000e 81FF      		sbrs r24,1
 330 0010 00C0      		rjmp .L18
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 331               		.loc 1 633 9 is_stmt 1 view .LVU76
 332 0012 89E3      		ldi r24,lo8(57)
 333 0014 0E94 0000 		call add_key
 334               	.LVL33:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 335               		.loc 1 634 9 view .LVU77
 336 0018 0E94 0000 		call send_keyboard_report
 337               	.LVL34:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 338               		.loc 1 635 9 view .LVU78
 339 001c 89E3      		ldi r24,lo8(57)
 340               	.L37:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 341               		.loc 1 645 9 is_stmt 0 view .LVU79
 342 001e 0E94 0000 		call del_key
 343               	.LVL35:
 344               	.L38:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 345               		.loc 1 646 9 is_stmt 1 view .LVU80
 346 0022 0C94 0000 		jmp send_keyboard_report
 347               	.LVL36:
 348               	.L21:
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 349               		.loc 1 639 10 view .LVU81
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 350               		.loc 1 639 13 is_stmt 0 view .LVU82
 351 0026 8338      		cpi r24,lo8(-125)
 352 0028 01F4      		brne .L23
 641:./tmk_core/common/action.c **** #endif
 353               		.loc 1 641 9 is_stmt 1 view .LVU83
 641:./tmk_core/common/action.c **** #endif
 354               		.loc 1 641 15 is_stmt 0 view .LVU84
 355 002a 0E94 0000 		call host_keyboard_leds
 356               	.LVL37:
 641:./tmk_core/common/action.c **** #endif
 357               		.loc 1 641 12 view .LVU85
 358 002e 80FF      		sbrs r24,0
 359 0030 00C0      		rjmp .L18
 643:./tmk_core/common/action.c ****         send_keyboard_report();
 360               		.loc 1 643 9 is_stmt 1 view .LVU86
 361 0032 83E5      		ldi r24,lo8(83)
 362 0034 0E94 0000 		call add_key
 363               	.LVL38:
 644:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 364               		.loc 1 644 9 view .LVU87
 365 0038 0E94 0000 		call send_keyboard_report
 366               	.LVL39:
 645:./tmk_core/common/action.c ****         send_keyboard_report();
 367               		.loc 1 645 9 view .LVU88
 368 003c 83E5      		ldi r24,lo8(83)
 369 003e 00C0      		rjmp .L37
 370               	.LVL40:
 371               	.L23:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 372               		.loc 1 649 10 view .LVU89
 373               		.loc 1 649 13 is_stmt 0 view .LVU90
 374 0040 8438      		cpi r24,lo8(-124)
 375 0042 01F4      		brne .L24
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 376               		.loc 1 651 9 is_stmt 1 view .LVU91
 377               		.loc 1 651 15 is_stmt 0 view .LVU92
 378 0044 0E94 0000 		call host_keyboard_leds
 379               	.LVL41:
 380               		.loc 1 651 12 view .LVU93
 381 0048 82FF      		sbrs r24,2
 382 004a 00C0      		rjmp .L18
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 383               		.loc 1 653 9 is_stmt 1 view .LVU94
 384 004c 87E4      		ldi r24,lo8(71)
 385 004e 0E94 0000 		call add_key
 386               	.LVL42:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 387               		.loc 1 654 9 view .LVU95
 388 0052 0E94 0000 		call send_keyboard_report
 389               	.LVL43:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 390               		.loc 1 655 9 view .LVU96
 391 0056 87E4      		ldi r24,lo8(71)
 392 0058 00C0      		rjmp .L37
 393               	.LVL44:
 394               	.L24:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 395               		.loc 1 660 10 view .LVU97
 396               		.loc 1 660 13 is_stmt 0 view .LVU98
 397 005a 9CEF      		ldi r25,lo8(-4)
 398 005c 980F      		add r25,r24
 399 005e 913A      		cpi r25,lo8(-95)
 400 0060 00F0      		brlo .L37
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 401               		.loc 1 664 10 is_stmt 1 view .LVU99
 402               		.loc 1 664 13 is_stmt 0 view .LVU100
 403 0062 90E2      		ldi r25,lo8(32)
 404 0064 980F      		add r25,r24
 405 0066 9830      		cpi r25,lo8(8)
 406 0068 00F4      		brsh .L26
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 407               		.loc 1 665 9 is_stmt 1 view .LVU101
 408               		.loc 1 665 18 is_stmt 0 view .LVU102
 409 006a 8770      		andi r24,lo8(7)
 410               	.LVL45:
 411               		.loc 1 665 9 view .LVU103
 412 006c 91E0      		ldi r25,lo8(1)
 413 006e 00C0      		rjmp 2f
 414               		1:
 415 0070 990F      		lsl r25
 416               		2:
 417 0072 8A95      		dec r24
 418 0074 02F4      		brpl 1b
 419 0076 892F      		mov r24,r25
 420 0078 0E94 0000 		call del_mods
 421               	.LVL46:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 422               		.loc 1 666 9 is_stmt 1 view .LVU104
 423 007c 00C0      		rjmp .L38
 424               	.LVL47:
 425               	.L26:
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 426               		.loc 1 668 10 view .LVU105
 427               		.loc 1 668 13 is_stmt 0 view .LVU106
 428 007e 9BE5      		ldi r25,lo8(91)
 429 0080 980F      		add r25,r24
 430 0082 9330      		cpi r25,lo8(3)
 431 0084 00F4      		brsh .L27
 669:./tmk_core/common/action.c ****         host_system_send(0);
 432               		.loc 1 669 9 is_stmt 1 view .LVU107
 433 0086 80E0      		ldi r24,0
 434 0088 90E0      		ldi r25,0
 435               	.LVL48:
 436               		.loc 1 669 9 is_stmt 0 view .LVU108
 437 008a 0C94 0000 		jmp host_system_send
 438               	.LVL49:
 439               	.L27:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 440               		.loc 1 671 10 is_stmt 1 view .LVU109
 441               		.loc 1 671 13 is_stmt 0 view .LVU110
 442 008e 885A      		subi r24,lo8(-(88))
 443               	.LVL50:
 444               		.loc 1 671 13 view .LVU111
 445 0090 8531      		cpi r24,lo8(21)
 446 0092 00F4      		brsh .L18
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 447               		.loc 1 672 9 is_stmt 1 view .LVU112
 448 0094 80E0      		ldi r24,0
 449 0096 90E0      		ldi r25,0
 450               	.LVL51:
 451               		.loc 1 672 9 is_stmt 0 view .LVU113
 452 0098 0C94 0000 		jmp host_consumer_send
 453               	.LVL52:
 454               	.L18:
 455               	/* epilogue start */
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 456               		.loc 1 674 1 view .LVU114
 457 009c 0895      		ret
 458               		.cfi_endproc
 459               	.LFE113:
 461               		.section	.text.register_mods,"ax",@progbits
 462               	.global	register_mods
 464               	register_mods:
 465               	.LVL53:
 466               	.LFB114:
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 467               		.loc 1 677 1 is_stmt 1 view -0
 468               		.cfi_startproc
 469               	/* prologue: function */
 470               	/* frame size = 0 */
 471               	/* stack size = 0 */
 472               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 473               		.loc 1 678 5 view .LVU116
 474               		.loc 1 678 8 is_stmt 0 view .LVU117
 475 0000 8823      		tst r24
 476 0002 01F0      		breq .L39
 679:./tmk_core/common/action.c ****         add_mods(mods);
 477               		.loc 1 679 9 is_stmt 1 view .LVU118
 478 0004 0E94 0000 		call add_mods
 479               	.LVL54:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 480               		.loc 1 680 9 view .LVU119
 481 0008 0C94 0000 		jmp send_keyboard_report
 482               	.LVL55:
 483               	.L39:
 484               	/* epilogue start */
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 485               		.loc 1 682 1 is_stmt 0 view .LVU120
 486 000c 0895      		ret
 487               		.cfi_endproc
 488               	.LFE114:
 490               		.section	.text.unregister_mods,"ax",@progbits
 491               	.global	unregister_mods
 493               	unregister_mods:
 494               	.LVL56:
 495               	.LFB115:
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 496               		.loc 1 685 1 is_stmt 1 view -0
 497               		.cfi_startproc
 498               	/* prologue: function */
 499               	/* frame size = 0 */
 500               	/* stack size = 0 */
 501               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 502               		.loc 1 686 5 view .LVU122
 503               		.loc 1 686 8 is_stmt 0 view .LVU123
 504 0000 8823      		tst r24
 505 0002 01F0      		breq .L41
 687:./tmk_core/common/action.c ****         del_mods(mods);
 506               		.loc 1 687 9 is_stmt 1 view .LVU124
 507 0004 0E94 0000 		call del_mods
 508               	.LVL57:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 509               		.loc 1 688 9 view .LVU125
 510 0008 0C94 0000 		jmp send_keyboard_report
 511               	.LVL58:
 512               	.L41:
 513               	/* epilogue start */
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 514               		.loc 1 690 1 is_stmt 0 view .LVU126
 515 000c 0895      		ret
 516               		.cfi_endproc
 517               	.LFE115:
 519               		.section	.text.process_action,"ax",@progbits
 520               	.global	process_action
 522               	process_action:
 523               	.LVL59:
 524               	.LFB111:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 525               		.loc 1 122 1 is_stmt 1 view -0
 526               		.cfi_startproc
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 527               		.loc 1 122 1 is_stmt 0 view .LVU128
 528 0000 CF92      		push r12
 529               	.LCFI4:
 530               		.cfi_def_cfa_offset 3
 531               		.cfi_offset 12, -2
 532 0002 DF92      		push r13
 533               	.LCFI5:
 534               		.cfi_def_cfa_offset 4
 535               		.cfi_offset 13, -3
 536 0004 EF92      		push r14
 537               	.LCFI6:
 538               		.cfi_def_cfa_offset 5
 539               		.cfi_offset 14, -4
 540 0006 FF92      		push r15
 541               	.LCFI7:
 542               		.cfi_def_cfa_offset 6
 543               		.cfi_offset 15, -5
 544 0008 0F93      		push r16
 545               	.LCFI8:
 546               		.cfi_def_cfa_offset 7
 547               		.cfi_offset 16, -6
 548 000a 1F93      		push r17
 549               	.LCFI9:
 550               		.cfi_def_cfa_offset 8
 551               		.cfi_offset 17, -7
 552 000c CF93      		push r28
 553               	.LCFI10:
 554               		.cfi_def_cfa_offset 9
 555               		.cfi_offset 28, -8
 556 000e DF93      		push r29
 557               	.LCFI11:
 558               		.cfi_def_cfa_offset 10
 559               		.cfi_offset 29, -9
 560 0010 00D0      		rcall .
 561 0012 00D0      		rcall .
 562 0014 00D0      		rcall .
 563               	.LCFI12:
 564               		.cfi_def_cfa_offset 16
 565 0016 CDB7      		in r28,__SP_L__
 566 0018 DEB7      		in r29,__SP_H__
 567               	.LCFI13:
 568               		.cfi_def_cfa_register 28
 569               	/* prologue: function */
 570               	/* frame size = 6 */
 571               	/* stack size = 14 */
 572               	.L__stack_usage = 14
 573 001a 7C01      		movw r14,r24
 574 001c 6E83      		std Y+6,r22
 575 001e 7D83      		std Y+5,r23
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 576               		.loc 1 123 5 is_stmt 1 view .LVU129
 577               	.LVL60:
 124:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 578               		.loc 1 124 5 view .LVU130
 126:./tmk_core/common/action.c **** #endif
 579               		.loc 1 126 5 view .LVU131
 126:./tmk_core/common/action.c **** #endif
 580               		.loc 1 126 36 is_stmt 0 view .LVU132
 581 0020 FC01      		movw r30,r24
 582 0022 0581      		ldd r16,Z+5
 583 0024 0295      		swap r16
 584 0026 0F70      		andi r16,lo8(15)
 585               	.LVL61:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 586               		.loc 1 136 5 is_stmt 1 view .LVU133
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 587               		.loc 1 136 14 is_stmt 0 view .LVU134
 588 0028 1281      		ldd r17,Z+2
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 589               		.loc 1 136 8 view .LVU135
 590 002a 1111      		cpse r17,__zero_reg__
 591 002c 00C0      		rjmp .L44
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 592               		.loc 1 143 5 is_stmt 1 view .LVU136
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 593               		.loc 1 143 9 is_stmt 0 view .LVU137
 594 002e 0E94 0000 		call is_oneshot_layer_active
 595               	.LVL62:
 596               	.L46:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 597               		.loc 1 123 10 view .LVU138
 598 0032 D12C      		mov r13,__zero_reg__
 599               	.LVL63:
 600               	.L45:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 601               		.loc 1 149 5 is_stmt 1 view .LVU139
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 602               		.loc 1 149 24 is_stmt 0 view .LVU140
 603 0034 ED81      		ldd r30,Y+5
 604 0036 E295      		swap r30
 605 0038 EF70      		andi r30,lo8(15)
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 606               		.loc 1 149 5 view .LVU141
 607 003a F0E0      		ldi r31,0
 608 003c E050      		subi r30,lo8(-(gs(.L49)))
 609 003e F040      		sbci r31,hi8(-(gs(.L49)))
 610 0040 0C94 0000 		jmp __tablejump2__
 611               		.section	.jumptables.gcc.process_action,"a",@progbits
 612               		.p2align	1
 613               	.L49:
 614 0000 0000      		.word gs(.L56)
 615 0002 0000      		.word gs(.L56)
 616 0004 0000      		.word gs(.L55)
 617 0006 0000      		.word gs(.L55)
 618 0008 0000      		.word gs(.L54)
 619 000a 0000      		.word gs(.L53)
 620 000c 0000      		.word gs(.L47)
 621 000e 0000      		.word gs(.L47)
 622 0010 0000      		.word gs(.L52)
 623 0012 0000      		.word gs(.L47)
 624 0014 0000      		.word gs(.L51)
 625 0016 0000      		.word gs(.L51)
 626 0018 0000      		.word gs(.L50)
 627 001a 0000      		.word gs(.L47)
 628 001c 0000      		.word gs(.L47)
 629 001e 0000      		.word gs(.L48)
 630               		.section	.text.process_action
 631               	.LVL64:
 632               	.L44:
 138:./tmk_core/common/action.c ****     }
 633               		.loc 1 138 9 is_stmt 1 view .LVU142
 634 0044 0E94 0000 		call clear_weak_mods
 635               	.LVL65:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 636               		.loc 1 143 5 view .LVU143
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 637               		.loc 1 143 9 is_stmt 0 view .LVU144
 638 0048 0E94 0000 		call is_oneshot_layer_active
 639               	.LVL66:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 640               		.loc 1 143 8 view .LVU145
 641 004c 8823      		tst r24
 642 004e 01F0      		breq .L46
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 643               		.loc 1 143 55 discriminator 2 view .LVU146
 644 0050 8E81      		ldd r24,Y+6
 645 0052 805E      		subi r24,lo8(-(32))
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 646               		.loc 1 143 52 discriminator 2 view .LVU147
 647 0054 8830      		cpi r24,lo8(8)
 648 0056 00F0      		brlo .L46
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 649               		.loc 1 144 9 is_stmt 1 view .LVU148
 650 0058 82E0      		ldi r24,lo8(2)
 651 005a 0E94 0000 		call clear_oneshot_layer_state
 652               	.LVL67:
 145:./tmk_core/common/action.c ****     }
 653               		.loc 1 145 9 view .LVU149
 145:./tmk_core/common/action.c ****     }
 654               		.loc 1 145 31 is_stmt 0 view .LVU150
 655 005e 0E94 0000 		call is_oneshot_layer_active
 656               	.LVL68:
 145:./tmk_core/common/action.c ****     }
 657               		.loc 1 145 9 view .LVU151
 658 0062 91E0      		ldi r25,lo8(1)
 659 0064 D82E      		mov r13,r24
 660 0066 D926      		eor r13,r25
 661               	.LVL69:
 145:./tmk_core/common/action.c ****     }
 662               		.loc 1 145 9 view .LVU152
 663 0068 00C0      		rjmp .L45
 664               	.L56:
 665               	.LBB6:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 666               		.loc 1 154 17 is_stmt 1 view .LVU153
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 667               		.loc 1 154 75 is_stmt 0 view .LVU154
 668 006a 0D81      		ldd r16,Y+5
 669               	.LVL70:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 670               		.loc 1 154 75 view .LVU155
 671 006c 0F70      		andi r16,lo8(15)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 672               		.loc 1 154 25 view .LVU156
 673 006e FD81      		ldd r31,Y+5
 674 0070 F031      		cpi r31,lo8(16)
 675 0072 00F0      		brlo .L57
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 676               		.loc 1 154 25 discriminator 2 view .LVU157
 677 0074 0295      		swap r16
 678 0076 007F      		andi r16,lo8(-16)
 679               	.L57:
 680               	.LVL71:
 156:./tmk_core/common/action.c ****                     if (mods) {
 681               		.loc 1 156 17 is_stmt 1 discriminator 4 view .LVU158
 156:./tmk_core/common/action.c ****                     if (mods) {
 682               		.loc 1 156 20 is_stmt 0 discriminator 4 view .LVU159
 683 0078 1123      		tst r17
 684 007a 01F0      		breq .L58
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 685               		.loc 1 157 21 is_stmt 1 view .LVU160
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 686               		.loc 1 157 24 is_stmt 0 view .LVU161
 687 007c 0023      		tst r16
 688 007e 01F0      		breq .L142
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 689               		.loc 1 158 25 is_stmt 1 view .LVU162
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 690               		.loc 1 158 29 is_stmt 0 view .LVU163
 691 0080 8E81      		ldd r24,Y+6
 692 0082 805E      		subi r24,lo8(-(32))
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 693               		.loc 1 158 28 view .LVU164
 694 0084 8830      		cpi r24,lo8(8)
 695 0086 00F0      		brlo .L60
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 696               		.loc 1 158 53 discriminator 1 view .LVU165
 697 0088 2E81      		ldd r18,Y+6
 698 008a 2111      		cpse r18,__zero_reg__
 699 008c 00C0      		rjmp .L61
 700               	.L60:
 162:./tmk_core/common/action.c ****                         } else {
 701               		.loc 1 162 29 is_stmt 1 view .LVU166
 702 008e 802F      		mov r24,r16
 703 0090 0E94 0000 		call add_mods
 704               	.LVL72:
 705               	.L62:
 166:./tmk_core/common/action.c ****                     }
 706               		.loc 1 166 25 view .LVU167
 707 0094 0E94 0000 		call send_keyboard_report
 708               	.LVL73:
 168:./tmk_core/common/action.c ****                 } else {
 709               		.loc 1 168 21 view .LVU168
 710               	.L142:
 168:./tmk_core/common/action.c ****                 } else {
 711               		.loc 1 168 21 is_stmt 0 view .LVU169
 712               	.LBE6:
 419:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 713               		.loc 1 419 75 is_stmt 1 view .LVU170
 420:./tmk_core/common/action.c ****                         } else {
 714               		.loc 1 420 29 view .LVU171
 715 0098 8E81      		ldd r24,Y+6
 716 009a 0E94 0000 		call register_code
 717               	.LVL74:
 718 009e 00C0      		rjmp .L47
 719               	.LVL75:
 720               	.L61:
 721               	.LBB7:
 164:./tmk_core/common/action.c ****                         }
 722               		.loc 1 164 29 view .LVU172
 723 00a0 802F      		mov r24,r16
 724 00a2 0E94 0000 		call add_weak_mods
 725               	.LVL76:
 726 00a6 00C0      		rjmp .L62
 727               	.L58:
 170:./tmk_core/common/action.c ****                     if (mods) {
 728               		.loc 1 170 21 view .LVU173
 729 00a8 8E81      		ldd r24,Y+6
 730 00aa 0E94 0000 		call unregister_code
 731               	.LVL77:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 732               		.loc 1 171 21 view .LVU174
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 733               		.loc 1 171 24 is_stmt 0 view .LVU175
 734 00ae 0023      		tst r16
 735 00b0 01F0      		breq .L47
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 736               		.loc 1 172 25 is_stmt 1 view .LVU176
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 737               		.loc 1 172 29 is_stmt 0 view .LVU177
 738 00b2 8E81      		ldd r24,Y+6
 739 00b4 805E      		subi r24,lo8(-(32))
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 740               		.loc 1 172 28 view .LVU178
 741 00b6 8830      		cpi r24,lo8(8)
 742 00b8 00F0      		brlo .L64
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 743               		.loc 1 172 53 discriminator 1 view .LVU179
 744 00ba 3E81      		ldd r19,Y+6
 745 00bc 3111      		cpse r19,__zero_reg__
 746 00be 00C0      		rjmp .L65
 747               	.L64:
 173:./tmk_core/common/action.c ****                         } else {
 748               		.loc 1 173 29 is_stmt 1 view .LVU180
 749 00c0 802F      		mov r24,r16
 750 00c2 0E94 0000 		call del_mods
 751               	.LVL78:
 752               	.L66:
 177:./tmk_core/common/action.c ****                     }
 753               		.loc 1 177 25 view .LVU181
 754 00c6 0E94 0000 		call send_keyboard_report
 755               	.LVL79:
 756               	.L47:
 177:./tmk_core/common/action.c ****                     }
 757               		.loc 1 177 25 is_stmt 0 view .LVU182
 758               	.LBE7:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 759               		.loc 1 531 5 is_stmt 1 view .LVU183
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 760               		.loc 1 531 8 is_stmt 0 view .LVU184
 761 00ca DD20      		tst r13
 762 00cc 01F4      		brne .+2
 763 00ce 00C0      		rjmp .L43
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 764               		.loc 1 531 33 discriminator 1 view .LVU185
 765 00d0 0E94 0000 		call get_oneshot_layer_state
 766               	.LVL80:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 767               		.loc 1 531 28 discriminator 1 view .LVU186
 768 00d4 80FD      		sbrc r24,0
 769 00d6 00C0      		rjmp .L43
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 770               		.loc 1 532 9 is_stmt 1 view .LVU187
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 771               		.loc 1 532 31 is_stmt 0 view .LVU188
 772 00d8 F701      		movw r30,r14
 773 00da 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 774               		.loc 1 533 9 is_stmt 1 view .LVU189
 775 00dc 0E94 0000 		call get_oneshot_layer
 776               	.LVL81:
 777 00e0 0E94 0000 		call layer_on
 778               	.LVL82:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 779               		.loc 1 534 9 view .LVU190
 780 00e4 C701      		movw r24,r14
 781 00e6 0E94 0000 		call process_record
 782               	.LVL83:
 535:./tmk_core/common/action.c ****     }
 783               		.loc 1 535 9 view .LVU191
 784 00ea 0E94 0000 		call get_oneshot_layer
 785               	.LVL84:
 786               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 787               		.loc 1 538 1 is_stmt 0 view .LVU192
 788 00ee 0F90      		pop __tmp_reg__
 789 00f0 0F90      		pop __tmp_reg__
 790 00f2 0F90      		pop __tmp_reg__
 791 00f4 0F90      		pop __tmp_reg__
 792 00f6 0F90      		pop __tmp_reg__
 793 00f8 0F90      		pop __tmp_reg__
 794 00fa DF91      		pop r29
 795 00fc CF91      		pop r28
 796 00fe 1F91      		pop r17
 797               	.LVL85:
 538:./tmk_core/common/action.c **** 
 798               		.loc 1 538 1 view .LVU193
 799 0100 0F91      		pop r16
 800 0102 FF90      		pop r15
 801 0104 EF90      		pop r14
 802               	.LVL86:
 538:./tmk_core/common/action.c **** 
 803               		.loc 1 538 1 view .LVU194
 804 0106 DF90      		pop r13
 805               	.LVL87:
 538:./tmk_core/common/action.c **** 
 806               		.loc 1 538 1 view .LVU195
 807 0108 CF90      		pop r12
 535:./tmk_core/common/action.c ****     }
 808               		.loc 1 535 9 view .LVU196
 809 010a 0C94 0000 		jmp layer_off
 810               	.LVL88:
 811               	.L65:
 812               	.LBB8:
 175:./tmk_core/common/action.c ****                         }
 813               		.loc 1 175 29 is_stmt 1 view .LVU197
 814 010e 802F      		mov r24,r16
 815 0110 0E94 0000 		call del_weak_mods
 816               	.LVL89:
 817 0114 00C0      		rjmp .L66
 818               	.LVL90:
 819               	.L55:
 175:./tmk_core/common/action.c ****                         }
 820               		.loc 1 175 29 is_stmt 0 view .LVU198
 821               	.LBE8:
 822               	.LBB9:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 823               		.loc 1 186 17 is_stmt 1 view .LVU199
 824               	.LBE9:
 825               	.LBB10:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 826               		.loc 1 154 75 is_stmt 0 view .LVU200
 827 0116 4D81      		ldd r20,Y+5
 828 0118 4F70      		andi r20,lo8(15)
 829 011a C42E      		mov r12,r20
 830               	.LBE10:
 831               	.LBB11:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 832               		.loc 1 186 48 view .LVU201
 833 011c 5D81      		ldd r21,Y+5
 834 011e 507F      		andi r21,lo8(-16)
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 835               		.loc 1 186 25 view .LVU202
 836 0120 5032      		cpi r21,lo8(32)
 837 0122 01F0      		breq .L67
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 838               		.loc 1 186 25 discriminator 2 view .LVU203
 839 0124 C294      		swap r12
 840 0126 80EF      		ldi r24,lo8(-16)
 841 0128 C822      		and r12,r24
 842               	.L67:
 843               	.LVL91:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 844               		.loc 1 188 17 is_stmt 1 discriminator 4 view .LVU204
 845 012a 6E81      		ldd r22,Y+6
 846 012c 6623      		tst r22
 847 012e 01F0      		breq .L68
 848 0130 6130      		cpi r22,lo8(1)
 849 0132 01F0      		breq .L69
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 850               		.loc 1 243 25 view .LVU205
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 851               		.loc 1 243 28 is_stmt 0 view .LVU206
 852 0134 1123      		tst r17
 853 0136 01F0      		breq .L77
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 854               		.loc 1 244 29 is_stmt 1 view .LVU207
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 855               		.loc 1 244 32 is_stmt 0 view .LVU208
 856 0138 0023      		tst r16
 857 013a 01F0      		breq .L143
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 858               		.loc 1 246 33 is_stmt 1 view .LVU209
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 859               		.loc 1 246 37 is_stmt 0 view .LVU210
 860 013c F701      		movw r30,r14
 861 013e 8581      		ldd r24,Z+5
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 862               		.loc 1 246 36 view .LVU211
 863 0140 80FF      		sbrs r24,0
 864 0142 00C0      		rjmp .L142
 247:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 865               		.loc 1 247 80 is_stmt 1 view .LVU212
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 866               		.loc 1 249 37 view .LVU213
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 867               		.loc 1 249 55 is_stmt 0 view .LVU214
 868 0144 8F70      		andi r24,lo8(15)
 869 0146 8583      		std Z+5,r24
 870 0148 00C0      		rjmp .L143
 871               	.L68:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 872               		.loc 1 192 25 is_stmt 1 view .LVU215
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 873               		.loc 1 192 28 is_stmt 0 view .LVU216
 874 014a 1123      		tst r17
 875 014c 01F0      		breq .L71
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 876               		.loc 1 193 29 is_stmt 1 view .LVU217
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 877               		.loc 1 193 32 is_stmt 0 view .LVU218
 878 014e 0111      		cpse r16,__zero_reg__
 879 0150 00C0      		rjmp .L72
 880               	.L143:
 250:./tmk_core/common/action.c ****                                 } else
 881               		.loc 1 250 37 is_stmt 1 view .LVU219
 882 0152 8C2D      		mov r24,r12
 883               	.LVL92:
 884               	.L139:
 250:./tmk_core/common/action.c ****                                 } else
 885               		.loc 1 250 37 is_stmt 0 view .LVU220
 886 0154 0E94 0000 		call register_mods
 887               	.LVL93:
 888 0158 00C0      		rjmp .L47
 889               	.LVL94:
 890               	.L72:
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 891               		.loc 1 196 36 is_stmt 1 view .LVU221
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 892               		.loc 1 198 33 is_stmt 0 view .LVU222
 893 015a 8C2D      		mov r24,r12
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 894               		.loc 1 196 39 view .LVU223
 895 015c 0130      		cpi r16,lo8(1)
 896 015e 01F4      		brne .L139
 197:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 897               		.loc 1 197 69 is_stmt 1 view .LVU224
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 898               		.loc 1 198 33 view .LVU225
 899 0160 0E94 0000 		call set_oneshot_mods
 900               	.LVL95:
 901 0164 00C0      		rjmp .L47
 902               	.L71:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 903               		.loc 1 210 29 view .LVU226
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 904               		.loc 1 210 32 is_stmt 0 view .LVU227
 905 0166 0111      		cpse r16,__zero_reg__
 906 0168 00C0      		rjmp .L74
 907               	.L148:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 908               		.loc 1 225 33 is_stmt 1 view .LVU228
 909 016a 0E94 0000 		call clear_oneshot_mods
 910               	.LVL96:
 226:./tmk_core/common/action.c ****                             }
 911               		.loc 1 226 33 view .LVU229
 912               	.L80:
 266:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 913               		.loc 1 266 71 view .LVU230
 267:./tmk_core/common/action.c ****                             }
 914               		.loc 1 267 33 view .LVU231
 915 016e 8C2D      		mov r24,r12
 916               	.LVL97:
 917               	.L141:
 267:./tmk_core/common/action.c ****                             }
 918               		.loc 1 267 33 is_stmt 0 view .LVU232
 919               	.LBE11:
 350:./tmk_core/common/action.c ****                     }
 920               		.loc 1 350 25 view .LVU233
 921 0170 0E94 0000 		call unregister_mods
 922               	.LVL98:
 923 0174 00C0      		rjmp .L47
 924               	.LVL99:
 925               	.L74:
 926               	.LBB12:
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 927               		.loc 1 213 36 is_stmt 1 view .LVU234
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 928               		.loc 1 213 39 is_stmt 0 view .LVU235
 929 0176 0130      		cpi r16,lo8(1)
 930 0178 01F4      		brne .+2
 931 017a 00C0      		rjmp .L47
 932 017c 00C0      		rjmp .L148
 933               	.L69:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 934               		.loc 1 232 25 is_stmt 1 view .LVU236
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 935               		.loc 1 232 28 is_stmt 0 view .LVU237
 936 017e 1123      		tst r17
 937 0180 01F0      		breq .L76
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 938               		.loc 1 233 29 is_stmt 1 view .LVU238
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 939               		.loc 1 233 32 is_stmt 0 view .LVU239
 940 0182 0630      		cpi r16,lo8(6)
 941 0184 00F0      		brlo .+2
 942 0186 00C0      		rjmp .L47
 943 0188 00C0      		rjmp .L143
 944               	.L76:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 945               		.loc 1 237 29 is_stmt 1 view .LVU240
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 946               		.loc 1 237 32 is_stmt 0 view .LVU241
 947 018a 0530      		cpi r16,lo8(5)
 948 018c 00F0      		brlo .+2
 949 018e 00C0      		rjmp .L47
 950 0190 00C0      		rjmp .L80
 951               	.L77:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 952               		.loc 1 262 29 is_stmt 1 view .LVU242
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 953               		.loc 1 262 32 is_stmt 0 view .LVU243
 954 0192 0023      		tst r16
 955 0194 01F0      		breq .L80
 956               	.LVL100:
 957               	.L140:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 958               		.loc 1 262 32 view .LVU244
 959               	.LBE12:
 427:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 960               		.loc 1 427 77 is_stmt 1 view .LVU245
 428:./tmk_core/common/action.c ****                         } else {
 961               		.loc 1 428 29 view .LVU246
 962 0196 8E81      		ldd r24,Y+6
 963 0198 0E94 0000 		call unregister_code
 964               	.LVL101:
 965 019c 00C0      		rjmp .L47
 966               	.L54:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 967               		.loc 1 278 13 view .LVU247
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 968               		.loc 1 278 33 is_stmt 0 view .LVU248
 969 019e 8D81      		ldd r24,Y+5
 970 01a0 8695      		lsr r24
 971 01a2 8695      		lsr r24
 972 01a4 8370      		andi r24,lo8(3)
 973 01a6 8823      		tst r24
 974 01a8 01F0      		breq .L81
 975 01aa 8130      		cpi r24,lo8(1)
 976 01ac 01F0      		breq .+2
 977 01ae 00C0      		rjmp .L47
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 978               		.loc 1 287 21 is_stmt 1 view .LVU249
 288:./tmk_core/common/action.c ****                     } else {
 979               		.loc 1 288 25 is_stmt 0 view .LVU250
 980 01b0 8E81      		ldd r24,Y+6
 981 01b2 9D81      		ldd r25,Y+5
 982 01b4 9370      		andi r25,lo8(3)
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 983               		.loc 1 287 24 view .LVU251
 984 01b6 1111      		cpse r17,__zero_reg__
 985 01b8 00C0      		rjmp .L145
 290:./tmk_core/common/action.c ****                     }
 986               		.loc 1 290 25 is_stmt 1 view .LVU252
 987 01ba 80E0      		ldi r24,0
 988 01bc 90E0      		ldi r25,0
 989               	.L145:
 990 01be 0E94 0000 		call host_consumer_send
 991               	.LVL102:
 992 01c2 00C0      		rjmp .L47
 993               	.L81:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 994               		.loc 1 280 21 view .LVU253
 281:./tmk_core/common/action.c ****                     } else {
 995               		.loc 1 281 25 is_stmt 0 view .LVU254
 996 01c4 8E81      		ldd r24,Y+6
 997 01c6 9D81      		ldd r25,Y+5
 998 01c8 9370      		andi r25,lo8(3)
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 999               		.loc 1 280 24 view .LVU255
 1000 01ca 1111      		cpse r17,__zero_reg__
 1001 01cc 00C0      		rjmp .L136
 283:./tmk_core/common/action.c ****                     }
 1002               		.loc 1 283 25 is_stmt 1 view .LVU256
 1003 01ce 80E0      		ldi r24,0
 1004 01d0 90E0      		ldi r25,0
 1005               	.L136:
 1006 01d2 0E94 0000 		call host_system_send
 1007               	.LVL103:
 1008 01d6 00C0      		rjmp .L47
 1009               	.L53:
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1010               		.loc 1 299 13 view .LVU257
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1011               		.loc 1 300 17 is_stmt 0 view .LVU258
 1012 01d8 8E81      		ldd r24,Y+6
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1013               		.loc 1 299 16 view .LVU259
 1014 01da 1123      		tst r17
 1015 01dc 01F0      		breq .L85
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1016               		.loc 1 300 17 is_stmt 1 view .LVU260
 1017 01de 0E94 0000 		call mousekey_on
 1018               	.LVL104:
 301:./tmk_core/common/action.c ****             } else {
 1019               		.loc 1 301 17 view .LVU261
 1020               	.L137:
 304:./tmk_core/common/action.c ****             }
 1021               		.loc 1 304 17 view .LVU262
 1022 01e2 0E94 0000 		call mousekey_send
 1023               	.LVL105:
 1024 01e6 00C0      		rjmp .L47
 1025               	.L85:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1026               		.loc 1 303 17 view .LVU263
 1027 01e8 0E94 0000 		call mousekey_off
 1028               	.LVL106:
 1029 01ec 00C0      		rjmp .L137
 1030               	.L52:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1031               		.loc 1 310 13 view .LVU264
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1032               		.loc 1 310 39 is_stmt 0 view .LVU265
 1033 01ee 8D81      		ldd r24,Y+5
 1034 01f0 8370      		andi r24,lo8(3)
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1035               		.loc 1 310 16 view .LVU266
 1036 01f2 8111      		cpse r24,__zero_reg__
 1037 01f4 00C0      		rjmp .L86
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1038               		.loc 1 312 17 is_stmt 1 view .LVU267
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1039               		.loc 1 312 20 is_stmt 0 view .LVU268
 1040 01f6 1111      		cpse r17,__zero_reg__
 1041 01f8 00C0      		rjmp .L47
 1042               	.LBB13:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1043               		.loc 1 313 21 is_stmt 1 view .LVU269
 1044               	.LVL107:
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1045               		.loc 1 314 21 view .LVU270
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1046               		.loc 1 313 55 is_stmt 0 view .LVU271
 1047 01fa 2E81      		ldd r18,Y+6
 1048 01fc 2295      		swap r18
 1049 01fe 2695      		lsr r18
 1050 0200 2770      		andi r18,lo8(7)
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1051               		.loc 1 313 29 view .LVU272
 1052 0202 220F      		lsl r18
 1053 0204 220F      		lsl r18
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1054               		.loc 1 314 66 view .LVU273
 1055 0206 8E81      		ldd r24,Y+6
 1056 0208 8F70      		andi r24,lo8(15)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1057               		.loc 1 314 38 view .LVU274
 1058 020a 90E0      		ldi r25,0
 1059 020c A0E0      		ldi r26,0
 1060 020e B0E0      		ldi r27,0
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1061               		.loc 1 314 30 view .LVU275
 1062 0210 AC01      		movw r20,r24
 1063 0212 BD01      		movw r22,r26
 1064 0214 022E      		mov r0,r18
 1065 0216 00C0      		rjmp 2f
 1066               		1:
 1067 0218 440F      		lsl r20
 1068 021a 551F      		rol r21
 1069 021c 661F      		rol r22
 1070 021e 771F      		rol r23
 1071               		2:
 1072 0220 0A94      		dec r0
 1073 0222 02F4      		brpl 1b
 1074 0224 4983      		std Y+1,r20
 1075 0226 5A83      		std Y+2,r21
 1076 0228 6B83      		std Y+3,r22
 1077 022a 7C83      		std Y+4,r23
 1078               	.LVL108:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1079               		.loc 1 315 21 is_stmt 1 view .LVU276
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1080               		.loc 1 315 91 is_stmt 0 view .LVU277
 1081 022c 5E81      		ldd r21,Y+6
 1082 022e 60E0      		ldi r22,0
 1083 0230 70E0      		ldi r23,0
 1084 0232 CB01      		movw r24,r22
 1085 0234 54FF      		sbrs r21,4
 1086 0236 00C0      		rjmp .L87
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1087               		.loc 1 315 82 discriminator 1 view .LVU278
 1088 0238 6FE0      		ldi r22,lo8(15)
 1089 023a 70E0      		ldi r23,0
 1090 023c 80E0      		ldi r24,0
 1091 023e 90E0      		ldi r25,0
 1092 0240 00C0      		rjmp 2f
 1093               		1:
 1094 0242 660F      		lsl r22
 1095 0244 771F      		rol r23
 1096 0246 881F      		rol r24
 1097 0248 991F      		rol r25
 1098               		2:
 1099 024a 2A95      		dec r18
 1100 024c 02F4      		brpl 1b
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1101               		.loc 1 315 91 discriminator 1 view .LVU279
 1102 024e 6095      		com r22
 1103 0250 7095      		com r23
 1104 0252 8095      		com r24
 1105 0254 9095      		com r25
 1106               	.L87:
 1107               	.LVL109:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1108               		.loc 1 316 21 is_stmt 1 discriminator 4 view .LVU280
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1109               		.loc 1 316 47 is_stmt 0 discriminator 4 view .LVU281
 1110 0256 ED81      		ldd r30,Y+5
 1111 0258 E695      		lsr r30
 1112 025a E695      		lsr r30
 1113 025c E370      		andi r30,lo8(3)
 1114 025e ED83      		std Y+5,r30
 1115               	.LVL110:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1116               		.loc 1 316 47 discriminator 4 view .LVU282
 1117 0260 E230      		cpi r30,lo8(2)
 1118 0262 01F0      		breq .L88
 1119 0264 E330      		cpi r30,lo8(3)
 1120 0266 01F0      		breq .L89
 1121 0268 2981      		ldd r18,Y+1
 1122 026a 3A81      		ldd r19,Y+2
 1123 026c 4B81      		ldd r20,Y+3
 1124 026e 5C81      		ldd r21,Y+4
 1125 0270 262B      		or r18,r22
 1126 0272 372B      		or r19,r23
 1127 0274 482B      		or r20,r24
 1128 0276 592B      		or r21,r25
 1129 0278 2983      		std Y+1,r18
 1130 027a 3A83      		std Y+2,r19
 1131 027c 4B83      		std Y+3,r20
 1132 027e 5C83      		std Y+4,r21
 1133 0280 E130      		cpi r30,lo8(1)
 1134 0282 01F0      		breq .L147
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1135               		.loc 1 317 42 is_stmt 1 view .LVU283
 1136 0284 CA01      		movw r24,r20
 1137 0286 B901      		movw r22,r18
 1138               	.LVL111:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1139               		.loc 1 317 42 is_stmt 0 view .LVU284
 1140 0288 0E94 0000 		call default_layer_and
 1141               	.LVL112:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1142               		.loc 1 317 74 is_stmt 1 view .LVU285
 1143 028c 00C0      		rjmp .L47
 1144               	.LVL113:
 1145               	.L88:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1146               		.loc 1 319 42 view .LVU286
 1147 028e 2981      		ldd r18,Y+1
 1148 0290 3A81      		ldd r19,Y+2
 1149 0292 4B81      		ldd r20,Y+3
 1150 0294 5C81      		ldd r21,Y+4
 1151 0296 262B      		or r18,r22
 1152 0298 372B      		or r19,r23
 1153 029a 482B      		or r20,r24
 1154 029c 592B      		or r21,r25
 1155 029e 2983      		std Y+1,r18
 1156 02a0 3A83      		std Y+2,r19
 1157 02a2 4B83      		std Y+3,r20
 1158 02a4 5C83      		std Y+4,r21
 1159 02a6 CA01      		movw r24,r20
 1160 02a8 B901      		movw r22,r18
 1161               	.LVL114:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1162               		.loc 1 319 42 is_stmt 0 view .LVU287
 1163 02aa 0E94 0000 		call default_layer_xor
 1164               	.LVL115:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1165               		.loc 1 319 74 is_stmt 1 view .LVU288
 1166 02ae 00C0      		rjmp .L47
 1167               	.LVL116:
 1168               	.L89:
 320:./tmk_core/common/action.c ****                     }
 1169               		.loc 1 320 42 view .LVU289
 1170 02b0 0E94 0000 		call default_layer_and
 1171               	.LVL117:
 1172               	.L147:
 320:./tmk_core/common/action.c ****                     }
 1173               		.loc 1 320 67 view .LVU290
 1174 02b4 6981      		ldd r22,Y+1
 1175 02b6 7A81      		ldd r23,Y+2
 1176 02b8 8B81      		ldd r24,Y+3
 1177 02ba 9C81      		ldd r25,Y+4
 1178 02bc 0E94 0000 		call default_layer_or
 1179               	.LVL118:
 320:./tmk_core/common/action.c ****                     }
 1180               		.loc 1 320 91 view .LVU291
 1181 02c0 00C0      		rjmp .L47
 1182               	.LVL119:
 1183               	.L86:
 320:./tmk_core/common/action.c ****                     }
 1184               		.loc 1 320 91 is_stmt 0 view .LVU292
 1185               	.LBE13:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1186               		.loc 1 325 17 is_stmt 1 view .LVU293
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1187               		.loc 1 325 21 is_stmt 0 view .LVU294
 1188 02c2 1123      		tst r17
 1189 02c4 01F4      		brne .+2
 1190 02c6 00C0      		rjmp .L91
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1191               		.loc 1 325 20 discriminator 1 view .LVU295
 1192 02c8 3D81      		ldd r19,Y+5
 1193 02ca 30FF      		sbrs r19,0
 1194 02cc 00C0      		rjmp .L47
 1195               	.L92:
 1196               	.LBB14:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1197               		.loc 1 327 21 is_stmt 1 view .LVU296
 1198               	.LVL120:
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1199               		.loc 1 328 21 view .LVU297
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1200               		.loc 1 327 55 is_stmt 0 view .LVU298
 1201 02ce 2E81      		ldd r18,Y+6
 1202 02d0 2295      		swap r18
 1203 02d2 2695      		lsr r18
 1204 02d4 2770      		andi r18,lo8(7)
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1205               		.loc 1 327 29 view .LVU299
 1206 02d6 220F      		lsl r18
 1207 02d8 220F      		lsl r18
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1208               		.loc 1 328 66 view .LVU300
 1209 02da 8E81      		ldd r24,Y+6
 1210 02dc 8F70      		andi r24,lo8(15)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1211               		.loc 1 328 38 view .LVU301
 1212 02de 90E0      		ldi r25,0
 1213 02e0 A0E0      		ldi r26,0
 1214 02e2 B0E0      		ldi r27,0
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1215               		.loc 1 328 30 view .LVU302
 1216 02e4 AC01      		movw r20,r24
 1217 02e6 BD01      		movw r22,r26
 1218 02e8 022E      		mov r0,r18
 1219 02ea 00C0      		rjmp 2f
 1220               		1:
 1221 02ec 440F      		lsl r20
 1222 02ee 551F      		rol r21
 1223 02f0 661F      		rol r22
 1224 02f2 771F      		rol r23
 1225               		2:
 1226 02f4 0A94      		dec r0
 1227 02f6 02F4      		brpl 1b
 1228 02f8 4983      		std Y+1,r20
 1229 02fa 5A83      		std Y+2,r21
 1230 02fc 6B83      		std Y+3,r22
 1231 02fe 7C83      		std Y+4,r23
 1232               	.LVL121:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1233               		.loc 1 329 21 is_stmt 1 view .LVU303
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1234               		.loc 1 329 91 is_stmt 0 view .LVU304
 1235 0300 5E81      		ldd r21,Y+6
 1236 0302 60E0      		ldi r22,0
 1237 0304 70E0      		ldi r23,0
 1238 0306 CB01      		movw r24,r22
 1239 0308 54FF      		sbrs r21,4
 1240 030a 00C0      		rjmp .L93
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1241               		.loc 1 329 82 discriminator 1 view .LVU305
 1242 030c 6FE0      		ldi r22,lo8(15)
 1243 030e 70E0      		ldi r23,0
 1244 0310 80E0      		ldi r24,0
 1245 0312 90E0      		ldi r25,0
 1246 0314 00C0      		rjmp 2f
 1247               		1:
 1248 0316 660F      		lsl r22
 1249 0318 771F      		rol r23
 1250 031a 881F      		rol r24
 1251 031c 991F      		rol r25
 1252               		2:
 1253 031e 2A95      		dec r18
 1254 0320 02F4      		brpl 1b
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1255               		.loc 1 329 91 discriminator 1 view .LVU306
 1256 0322 6095      		com r22
 1257 0324 7095      		com r23
 1258 0326 8095      		com r24
 1259 0328 9095      		com r25
 1260               	.L93:
 1261               	.LVL122:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1262               		.loc 1 330 21 is_stmt 1 discriminator 4 view .LVU307
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1263               		.loc 1 330 47 is_stmt 0 discriminator 4 view .LVU308
 1264 032a ED81      		ldd r30,Y+5
 1265 032c E695      		lsr r30
 1266 032e E695      		lsr r30
 1267 0330 E370      		andi r30,lo8(3)
 1268 0332 ED83      		std Y+5,r30
 1269               	.LVL123:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1270               		.loc 1 330 47 discriminator 4 view .LVU309
 1271 0334 E230      		cpi r30,lo8(2)
 1272 0336 01F0      		breq .L94
 1273 0338 E330      		cpi r30,lo8(3)
 1274 033a 01F0      		breq .L95
 1275 033c 2981      		ldd r18,Y+1
 1276 033e 3A81      		ldd r19,Y+2
 1277 0340 4B81      		ldd r20,Y+3
 1278 0342 5C81      		ldd r21,Y+4
 1279 0344 262B      		or r18,r22
 1280 0346 372B      		or r19,r23
 1281 0348 482B      		or r20,r24
 1282 034a 592B      		or r21,r25
 1283 034c 2983      		std Y+1,r18
 1284 034e 3A83      		std Y+2,r19
 1285 0350 4B83      		std Y+3,r20
 1286 0352 5C83      		std Y+4,r21
 1287 0354 E130      		cpi r30,lo8(1)
 1288 0356 01F0      		breq .L146
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1289               		.loc 1 331 42 is_stmt 1 view .LVU310
 1290 0358 CA01      		movw r24,r20
 1291 035a B901      		movw r22,r18
 1292               	.LVL124:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1293               		.loc 1 331 42 is_stmt 0 view .LVU311
 1294 035c 0E94 0000 		call layer_and
 1295               	.LVL125:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1296               		.loc 1 331 66 is_stmt 1 view .LVU312
 1297 0360 00C0      		rjmp .L47
 1298               	.LVL126:
 1299               	.L91:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1300               		.loc 1 331 66 is_stmt 0 view .LVU313
 1301               	.LBE14:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1302               		.loc 1 325 20 discriminator 2 view .LVU314
 1303 0362 8230      		cpi r24,lo8(2)
 1304 0364 00F4      		brsh .+2
 1305 0366 00C0      		rjmp .L47
 1306 0368 00C0      		rjmp .L92
 1307               	.LVL127:
 1308               	.L94:
 1309               	.LBB15:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1310               		.loc 1 333 42 is_stmt 1 view .LVU315
 1311 036a 2981      		ldd r18,Y+1
 1312 036c 3A81      		ldd r19,Y+2
 1313 036e 4B81      		ldd r20,Y+3
 1314 0370 5C81      		ldd r21,Y+4
 1315 0372 262B      		or r18,r22
 1316 0374 372B      		or r19,r23
 1317 0376 482B      		or r20,r24
 1318 0378 592B      		or r21,r25
 1319 037a 2983      		std Y+1,r18
 1320 037c 3A83      		std Y+2,r19
 1321 037e 4B83      		std Y+3,r20
 1322 0380 5C83      		std Y+4,r21
 1323 0382 CA01      		movw r24,r20
 1324 0384 B901      		movw r22,r18
 1325               	.LVL128:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1326               		.loc 1 333 42 is_stmt 0 view .LVU316
 1327 0386 0E94 0000 		call layer_xor
 1328               	.LVL129:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1329               		.loc 1 333 66 is_stmt 1 view .LVU317
 1330 038a 00C0      		rjmp .L47
 1331               	.LVL130:
 1332               	.L95:
 334:./tmk_core/common/action.c ****                     }
 1333               		.loc 1 334 42 view .LVU318
 1334 038c 0E94 0000 		call layer_and
 1335               	.LVL131:
 1336               	.L146:
 334:./tmk_core/common/action.c ****                     }
 1337               		.loc 1 334 59 view .LVU319
 1338 0390 6981      		ldd r22,Y+1
 1339 0392 7A81      		ldd r23,Y+2
 1340 0394 8B81      		ldd r24,Y+3
 1341 0396 9C81      		ldd r25,Y+4
 1342 0398 0E94 0000 		call layer_or
 1343               	.LVL132:
 334:./tmk_core/common/action.c ****                     }
 1344               		.loc 1 334 75 view .LVU320
 1345 039c 00C0      		rjmp .L47
 1346               	.LVL133:
 1347               	.L51:
 334:./tmk_core/common/action.c ****                     }
 1348               		.loc 1 334 75 is_stmt 0 view .LVU321
 1349               	.LBE15:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1350               		.loc 1 342 13 is_stmt 1 view .LVU322
 1351 039e 3E81      		ldd r19,Y+6
 1352 03a0 323F      		cpi r19,lo8(-14)
 1353 03a2 01F4      		brne .+2
 1354 03a4 00C0      		rjmp .L97
 1355 03a6 00F4      		brsh .L98
 1356 03a8 303F      		cpi r19,lo8(-16)
 1357 03aa 01F0      		breq .L99
 1358 03ac 313F      		cpi r19,lo8(-15)
 1359 03ae 01F0      		breq .L100
 1360 03b0 832F      		mov r24,r19
 1361 03b2 805E      		subi r24,lo8(-(32))
 1362 03b4 8031      		cpi r24,lo8(16)
 1363 03b6 00F0      		brlo .L133
 1364               	.L101:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1365               		.loc 1 417 21 view .LVU323
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1366               		.loc 1 417 24 is_stmt 0 view .LVU324
 1367 03b8 1123      		tst r17
 1368 03ba 01F4      		brne .+2
 1369 03bc 00C0      		rjmp .L112
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1370               		.loc 1 418 25 is_stmt 1 view .LVU325
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1371               		.loc 1 418 28 is_stmt 0 view .LVU326
 1372 03be 0111      		cpse r16,__zero_reg__
 1373 03c0 00C0      		rjmp .L142
 422:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1374               		.loc 1 422 76 is_stmt 1 view .LVU327
 423:./tmk_core/common/action.c ****                         }
 1375               		.loc 1 423 29 view .LVU328
 1376 03c2 8D81      		ldd r24,Y+5
 1377 03c4 8F71      		andi r24,lo8(31)
 1378 03c6 00C0      		rjmp .L138
 1379               	.L98:
 423:./tmk_core/common/action.c ****                         }
 1380               		.loc 1 423 29 is_stmt 0 view .LVU329
 1381 03c8 4E81      		ldd r20,Y+6
 1382 03ca 433F      		cpi r20,lo8(-13)
 1383 03cc 01F0      		breq .L103
 1384 03ce 443F      		cpi r20,lo8(-12)
 1385 03d0 01F4      		brne .L101
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1386               		.loc 1 403 21 is_stmt 1 view .LVU330
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1387               		.loc 1 403 24 is_stmt 0 view .LVU331
 1388 03d2 1123      		tst r17
 1389 03d4 01F0      		breq .L111
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1390               		.loc 1 404 25 is_stmt 1 view .LVU332
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1391               		.loc 1 404 50 is_stmt 0 view .LVU333
 1392 03d6 6D81      		ldd r22,Y+5
 1393 03d8 6F71      		andi r22,lo8(31)
 1394 03da 6983      		std Y+1,r22
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1395               		.loc 1 404 25 view .LVU334
 1396 03dc 862F      		mov r24,r22
 1397 03de 0E94 0000 		call layer_on
 1398               	.LVL134:
 405:./tmk_core/common/action.c ****                     } else {
 1399               		.loc 1 405 25 is_stmt 1 view .LVU335
 1400 03e2 63E0      		ldi r22,lo8(3)
 1401 03e4 8981      		ldd r24,Y+1
 1402 03e6 0E94 0000 		call set_oneshot_layer
 1403               	.LVL135:
 1404 03ea 00C0      		rjmp .L47
 1405               	.L133:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1406               		.loc 1 345 21 view .LVU336
 347:./tmk_core/common/action.c ****                     } else {
 1407               		.loc 1 347 25 is_stmt 0 view .LVU337
 1408 03ec 5E81      		ldd r21,Y+6
 1409 03ee 5F70      		andi r21,lo8(15)
 1410 03f0 5983      		std Y+1,r21
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1411               		.loc 1 346 50 view .LVU338
 1412 03f2 8D81      		ldd r24,Y+5
 1413 03f4 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1414               		.loc 1 345 24 view .LVU339
 1415 03f6 1123      		tst r17
 1416 03f8 01F0      		breq .L105
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1417               		.loc 1 346 25 is_stmt 1 view .LVU340
 1418 03fa 0E94 0000 		call layer_on
 1419               	.LVL136:
 347:./tmk_core/common/action.c ****                     } else {
 1420               		.loc 1 347 25 view .LVU341
 1421 03fe 8981      		ldd r24,Y+1
 1422 0400 00C0      		rjmp .L139
 1423               	.L105:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1424               		.loc 1 349 25 view .LVU342
 1425 0402 0E94 0000 		call layer_off
 1426               	.LVL137:
 350:./tmk_core/common/action.c ****                     }
 1427               		.loc 1 350 25 view .LVU343
 1428 0406 8981      		ldd r24,Y+1
 1429 0408 00C0      		rjmp .L141
 1430               	.L99:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1431               		.loc 1 355 21 view .LVU344
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1432               		.loc 1 355 24 is_stmt 0 view .LVU345
 1433 040a 1123      		tst r17
 1434 040c 01F0      		breq .L106
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1435               		.loc 1 356 25 is_stmt 1 view .LVU346
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1436               		.loc 1 356 28 is_stmt 0 view .LVU347
 1437 040e 0530      		cpi r16,lo8(5)
 1438               	.L135:
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1439               		.loc 1 356 28 view .LVU348
 1440 0410 00F0      		brlo .+2
 1441 0412 00C0      		rjmp .L47
 357:./tmk_core/common/action.c ****                         }
 1442               		.loc 1 357 29 is_stmt 1 view .LVU349
 1443 0414 8D81      		ldd r24,Y+5
 1444 0416 8F71      		andi r24,lo8(31)
 1445 0418 0E94 0000 		call layer_invert
 1446               	.LVL138:
 1447 041c 00C0      		rjmp .L47
 1448               	.L106:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1449               		.loc 1 360 25 view .LVU350
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1450               		.loc 1 360 28 is_stmt 0 view .LVU351
 1451 041e 0530      		cpi r16,lo8(5)
 1452 0420 00C0      		rjmp .L135
 1453               	.L100:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1454               		.loc 1 366 21 is_stmt 1 view .LVU352
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1455               		.loc 1 346 50 is_stmt 0 view .LVU353
 1456 0422 8D81      		ldd r24,Y+5
 1457 0424 8F71      		andi r24,lo8(31)
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1458               		.loc 1 366 68 view .LVU354
 1459 0426 1123      		tst r17
 1460 0428 01F0      		breq .L144
 1461               	.L138:
 423:./tmk_core/common/action.c ****                         }
 1462               		.loc 1 423 29 view .LVU355
 1463 042a 0E94 0000 		call layer_on
 1464               	.LVL139:
 1465 042e 00C0      		rjmp .L47
 1466               	.L97:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1467               		.loc 1 370 21 is_stmt 1 view .LVU356
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1468               		.loc 1 346 50 is_stmt 0 view .LVU357
 1469 0430 8D81      		ldd r24,Y+5
 1470 0432 8F71      		andi r24,lo8(31)
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1471               		.loc 1 370 69 view .LVU358
 1472 0434 1123      		tst r17
 1473 0436 01F0      		breq .L138
 1474               	.L144:
 431:./tmk_core/common/action.c ****                         }
 1475               		.loc 1 431 29 view .LVU359
 1476 0438 0E94 0000 		call layer_off
 1477               	.LVL140:
 1478 043c 00C0      		rjmp .L47
 1479               	.L103:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1480               		.loc 1 374 21 is_stmt 1 view .LVU360
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1481               		.loc 1 374 70 is_stmt 0 view .LVU361
 1482 043e 1123      		tst r17
 1483 0440 01F0      		breq .L110
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1484               		.loc 1 374 37 discriminator 1 view .LVU362
 1485 0442 8D81      		ldd r24,Y+5
 1486 0444 8F71      		andi r24,lo8(31)
 1487 0446 0E94 0000 		call layer_move
 1488               	.LVL141:
 1489 044a 00C0      		rjmp .L47
 1490               	.L110:
 375:./tmk_core/common/action.c ****                     break;
 1491               		.loc 1 375 37 view .LVU363
 1492 044c 0E94 0000 		call layer_clear
 1493               	.LVL142:
 1494 0450 00C0      		rjmp .L47
 1495               	.L111:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1496               		.loc 1 407 25 is_stmt 1 view .LVU364
 1497 0452 81E0      		ldi r24,lo8(1)
 1498 0454 0E94 0000 		call clear_oneshot_layer_state
 1499               	.LVL143:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1500               		.loc 1 408 25 view .LVU365
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1501               		.loc 1 408 28 is_stmt 0 view .LVU366
 1502 0458 0230      		cpi r16,lo8(2)
 1503 045a 00F4      		brsh .+2
 1504 045c 00C0      		rjmp .L47
 409:./tmk_core/common/action.c ****                         }
 1505               		.loc 1 409 29 is_stmt 1 view .LVU367
 1506 045e 82E0      		ldi r24,lo8(2)
 1507 0460 0E94 0000 		call clear_oneshot_layer_state
 1508               	.LVL144:
 1509 0464 00C0      		rjmp .L47
 1510               	.L112:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1511               		.loc 1 426 25 view .LVU368
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1512               		.loc 1 426 28 is_stmt 0 view .LVU369
 1513 0466 0111      		cpse r16,__zero_reg__
 1514 0468 00C0      		rjmp .L140
 430:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1515               		.loc 1 430 79 is_stmt 1 view .LVU370
 431:./tmk_core/common/action.c ****                         }
 1516               		.loc 1 431 29 view .LVU371
 1517 046a 8D81      		ldd r24,Y+5
 1518 046c 8F71      		andi r24,lo8(31)
 1519 046e 00C0      		rjmp .L144
 1520               	.L50:
 442:./tmk_core/common/action.c ****             break;
 1521               		.loc 1 442 13 view .LVU372
 442:./tmk_core/common/action.c ****             break;
 1522               		.loc 1 442 83 is_stmt 0 view .LVU373
 1523 0470 4D81      		ldd r20,Y+5
 1524 0472 4F70      		andi r20,lo8(15)
 442:./tmk_core/common/action.c ****             break;
 1525               		.loc 1 442 13 view .LVU374
 1526 0474 6E81      		ldd r22,Y+6
 1527 0476 C701      		movw r24,r14
 1528 0478 0E94 0000 		call action_get_macro
 1529               	.LVL145:
 1530 047c 0E94 0000 		call action_macro_play
 1531               	.LVL146:
 443:./tmk_core/common/action.c **** #endif
 1532               		.loc 1 443 13 is_stmt 1 view .LVU375
 1533 0480 00C0      		rjmp .L47
 1534               	.L48:
 520:./tmk_core/common/action.c ****             break;
 1535               		.loc 1 520 13 view .LVU376
 520:./tmk_core/common/action.c ****             break;
 1536               		.loc 1 520 64 is_stmt 0 view .LVU377
 1537 0482 4D81      		ldd r20,Y+5
 1538 0484 4F70      		andi r20,lo8(15)
 520:./tmk_core/common/action.c ****             break;
 1539               		.loc 1 520 13 view .LVU378
 1540 0486 6E81      		ldd r22,Y+6
 1541 0488 C701      		movw r24,r14
 1542 048a 0E94 0000 		call action_function
 1543               	.LVL147:
 521:./tmk_core/common/action.c **** #endif
 1544               		.loc 1 521 13 is_stmt 1 view .LVU379
 1545 048e 00C0      		rjmp .L47
 1546               	.LVL148:
 1547               	.L43:
 1548               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1549               		.loc 1 538 1 is_stmt 0 view .LVU380
 1550 0490 0F90      		pop __tmp_reg__
 1551 0492 0F90      		pop __tmp_reg__
 1552 0494 0F90      		pop __tmp_reg__
 1553 0496 0F90      		pop __tmp_reg__
 1554 0498 0F90      		pop __tmp_reg__
 1555 049a 0F90      		pop __tmp_reg__
 1556 049c DF91      		pop r29
 1557 049e CF91      		pop r28
 1558 04a0 1F91      		pop r17
 1559               	.LVL149:
 538:./tmk_core/common/action.c **** 
 1560               		.loc 1 538 1 view .LVU381
 1561 04a2 0F91      		pop r16
 1562 04a4 FF90      		pop r15
 1563 04a6 EF90      		pop r14
 1564               	.LVL150:
 538:./tmk_core/common/action.c **** 
 1565               		.loc 1 538 1 view .LVU382
 1566 04a8 DF90      		pop r13
 1567               	.LVL151:
 538:./tmk_core/common/action.c **** 
 1568               		.loc 1 538 1 view .LVU383
 1569 04aa CF90      		pop r12
 1570 04ac 0895      		ret
 1571               		.cfi_endproc
 1572               	.LFE111:
 1574               		.section	.text.process_record,"ax",@progbits
 1575               	.global	process_record
 1577               	process_record:
 1578               	.LVL152:
 1579               	.LFB110:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1580               		.loc 1 104 1 is_stmt 1 view -0
 1581               		.cfi_startproc
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1582               		.loc 1 104 1 is_stmt 0 view .LVU385
 1583 0000 0F93      		push r16
 1584               	.LCFI14:
 1585               		.cfi_def_cfa_offset 3
 1586               		.cfi_offset 16, -2
 1587 0002 1F93      		push r17
 1588               	.LCFI15:
 1589               		.cfi_def_cfa_offset 4
 1590               		.cfi_offset 17, -3
 1591 0004 CF93      		push r28
 1592               	.LCFI16:
 1593               		.cfi_def_cfa_offset 5
 1594               		.cfi_offset 28, -4
 1595 0006 DF93      		push r29
 1596               	.LCFI17:
 1597               		.cfi_def_cfa_offset 6
 1598               		.cfi_offset 29, -5
 1599               	/* prologue: function */
 1600               	/* frame size = 0 */
 1601               	/* stack size = 4 */
 1602               	.L__stack_usage = 4
 1603 0008 EC01      		movw r28,r24
 105:./tmk_core/common/action.c **** 
 1604               		.loc 1 105 5 is_stmt 1 view .LVU386
 1605 000a 9881      		ld r25,Y
 1606               	.LVL153:
 105:./tmk_core/common/action.c **** 
 1607               		.loc 1 105 5 is_stmt 0 view .LVU387
 1608 000c 8981      		ldd r24,Y+1
 1609               	.LVL154:
 1610               	.LBB16:
 1611               	.LBI16:
 1612               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1613               		.loc 2 49 20 is_stmt 1 view .LVU388
 1614               	.LBB17:
 1615               		.loc 2 49 51 view .LVU389
 1616               		.loc 2 49 74 is_stmt 0 view .LVU390
 1617 000e 2B81      		ldd r18,Y+3
 1618 0010 3C81      		ldd r19,Y+4
 1619 0012 232B      		or r18,r19
 1620 0014 01F0      		breq .L151
 1621 0016 8923      		and r24,r25
 1622               	.LVL155:
 1623               		.loc 2 49 74 view .LVU391
 1624 0018 8F3F      		cpi r24,lo8(-1)
 1625 001a 01F0      		breq .L151
 1626               	.LVL156:
 1627               		.loc 2 49 74 view .LVU392
 1628               	.LBE17:
 1629               	.LBE16:
 107:./tmk_core/common/action.c ****         return;
 1630               		.loc 1 107 5 is_stmt 1 view .LVU393
 107:./tmk_core/common/action.c ****         return;
 1631               		.loc 1 107 9 is_stmt 0 view .LVU394
 1632 001c CE01      		movw r24,r28
 1633 001e 0E94 0000 		call process_record_quantum
 1634               	.LVL157:
 107:./tmk_core/common/action.c ****         return;
 1635               		.loc 1 107 7 view .LVU395
 1636 0022 8823      		tst r24
 1637 0024 01F0      		breq .L151
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1638               		.loc 1 110 5 is_stmt 1 view .LVU396
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1639               		.loc 1 110 23 is_stmt 0 view .LVU397
 1640 0026 6881      		ld r22,Y
 1641 0028 7981      		ldd r23,Y+1
 1642 002a 8A81      		ldd r24,Y+2
 1643 002c 0E94 0000 		call store_or_get_action
 1644               	.LVL158:
 1645 0030 8C01      		movw r16,r24
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1646               		.loc 1 111 23 is_stmt 1 view .LVU398
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1647               		.loc 1 111 25 view .LVU399
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1648               		.loc 1 113 29 view .LVU400
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1649               		.loc 1 113 31 view .LVU401
 1650 0032 0E94 0000 		call layer_debug
 1651               	.LVL159:
 114:./tmk_core/common/action.c **** #endif
 1652               		.loc 1 114 37 view .LVU402
 114:./tmk_core/common/action.c **** #endif
 1653               		.loc 1 114 39 view .LVU403
 1654 0036 0E94 0000 		call default_layer_debug
 1655               	.LVL160:
 116:./tmk_core/common/action.c **** 
 1656               		.loc 1 116 15 view .LVU404
 118:./tmk_core/common/action.c **** }
 1657               		.loc 1 118 5 view .LVU405
 1658 003a B801      		movw r22,r16
 1659 003c CE01      		movw r24,r28
 1660               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1661               		.loc 1 119 1 is_stmt 0 view .LVU406
 1662 003e DF91      		pop r29
 1663 0040 CF91      		pop r28
 1664               	.LVL161:
 119:./tmk_core/common/action.c **** 
 1665               		.loc 1 119 1 view .LVU407
 1666 0042 1F91      		pop r17
 1667 0044 0F91      		pop r16
 118:./tmk_core/common/action.c **** }
 1668               		.loc 1 118 5 view .LVU408
 1669 0046 0C94 0000 		jmp process_action
 1670               	.LVL162:
 1671               	.L151:
 1672               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1673               		.loc 1 119 1 discriminator 1 view .LVU409
 1674 004a DF91      		pop r29
 1675 004c CF91      		pop r28
 1676               	.LVL163:
 119:./tmk_core/common/action.c **** 
 1677               		.loc 1 119 1 discriminator 1 view .LVU410
 1678 004e 1F91      		pop r17
 1679 0050 0F91      		pop r16
 1680 0052 0895      		ret
 1681               		.cfi_endproc
 1682               	.LFE110:
 1684               		.section	.text.process_record_nocache,"ax",@progbits
 1685               	.global	process_record_nocache
 1687               	process_record_nocache:
 1688               	.LVL164:
 1689               	.LFB108:
  86:./tmk_core/common/action.c ****     disable_action_cache = true;
 1690               		.loc 1 86 1 is_stmt 1 view -0
 1691               		.cfi_startproc
 1692               	/* prologue: function */
 1693               	/* frame size = 0 */
 1694               	/* stack size = 0 */
 1695               	.L__stack_usage = 0
  87:./tmk_core/common/action.c ****     process_record(record);
 1696               		.loc 1 87 5 view .LVU412
  87:./tmk_core/common/action.c ****     process_record(record);
 1697               		.loc 1 87 26 is_stmt 0 view .LVU413
 1698 0000 21E0      		ldi r18,lo8(1)
 1699 0002 2093 0000 		sts disable_action_cache,r18
  88:./tmk_core/common/action.c ****     disable_action_cache = false;
 1700               		.loc 1 88 5 is_stmt 1 view .LVU414
 1701 0006 0E94 0000 		call process_record
 1702               	.LVL165:
  89:./tmk_core/common/action.c **** }
 1703               		.loc 1 89 5 view .LVU415
  89:./tmk_core/common/action.c **** }
 1704               		.loc 1 89 26 is_stmt 0 view .LVU416
 1705 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1706               	/* epilogue start */
  90:./tmk_core/common/action.c **** #else
 1707               		.loc 1 90 1 view .LVU417
 1708 000e 0895      		ret
 1709               		.cfi_endproc
 1710               	.LFE108:
 1712               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1713               	.global	clear_keyboard_but_mods
 1715               	clear_keyboard_but_mods:
 1716               	.LFB117:
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1717               		.loc 1 699 1 is_stmt 1 view -0
 1718               		.cfi_startproc
 1719               	/* prologue: function */
 1720               	/* frame size = 0 */
 1721               	/* stack size = 0 */
 1722               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1723               		.loc 1 700 5 view .LVU419
 1724 0000 0E94 0000 		call clear_weak_mods
 1725               	.LVL166:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1726               		.loc 1 701 5 view .LVU420
 1727 0004 0E94 0000 		call clear_macro_mods
 1728               	.LVL167:
 702:./tmk_core/common/action.c ****     clear_keys();
 1729               		.loc 1 702 5 view .LVU421
 1730 0008 0E94 0000 		call clear_keys
 1731               	.LVL168:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1732               		.loc 1 703 5 view .LVU422
 1733 000c 0E94 0000 		call send_keyboard_report
 1734               	.LVL169:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 1735               		.loc 1 705 5 view .LVU423
 1736 0010 0E94 0000 		call mousekey_clear
 1737               	.LVL170:
 706:./tmk_core/common/action.c ****     mousekey_send();
 1738               		.loc 1 706 5 view .LVU424
 1739 0014 0E94 0000 		call mousekey_send
 1740               	.LVL171:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 1741               		.loc 1 709 5 view .LVU425
 1742 0018 80E0      		ldi r24,0
 1743 001a 90E0      		ldi r25,0
 1744 001c 0E94 0000 		call host_system_send
 1745               	.LVL172:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 1746               		.loc 1 710 5 view .LVU426
 1747 0020 80E0      		ldi r24,0
 1748 0022 90E0      		ldi r25,0
 1749 0024 0C94 0000 		jmp host_consumer_send
 1750               	.LVL173:
 1751               		.cfi_endproc
 1752               	.LFE117:
 1754               		.section	.text.clear_keyboard,"ax",@progbits
 1755               	.global	clear_keyboard
 1757               	clear_keyboard:
 1758               	.LFB116:
 693:./tmk_core/common/action.c ****     clear_mods();
 1759               		.loc 1 693 1 view -0
 1760               		.cfi_startproc
 1761               	/* prologue: function */
 1762               	/* frame size = 0 */
 1763               	/* stack size = 0 */
 1764               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1765               		.loc 1 694 5 view .LVU428
 1766 0000 0E94 0000 		call clear_mods
 1767               	.LVL174:
 695:./tmk_core/common/action.c **** }
 1768               		.loc 1 695 5 view .LVU429
 1769 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1770               	.LVL175:
 1771               		.cfi_endproc
 1772               	.LFE116:
 1774               		.section	.text.is_tap_key,"ax",@progbits
 1775               	.global	is_tap_key
 1777               	is_tap_key:
 1778               	.LVL176:
 1779               	.LFB118:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 1780               		.loc 1 715 1 view -0
 1781               		.cfi_startproc
 1782               	/* prologue: function */
 1783               	/* frame size = 0 */
 1784               	/* stack size = 0 */
 1785               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1786               		.loc 1 716 5 view .LVU431
 1787               		.loc 1 716 23 is_stmt 0 view .LVU432
 1788 0000 0E94 0000 		call layer_switch_get_action
 1789               	.LVL177:
 1790               		.loc 1 716 23 view .LVU433
 1791 0004 282F      		mov r18,r24
 1792               	.LVL178:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1793               		.loc 1 718 5 is_stmt 1 view .LVU434
 1794               		.loc 1 718 24 is_stmt 0 view .LVU435
 1795 0006 892F      		mov r24,r25
 1796 0008 8295      		swap r24
 1797 000a 8F70      		andi r24,lo8(15)
 1798               		.loc 1 718 5 view .LVU436
 1799 000c 903C      		cpi r25,lo8(-64)
 1800 000e 00F4      		brsh .L165
 1801 0010 8A30      		cpi r24,lo8(10)
 1802 0012 00F4      		brsh .L166
 1803 0014 8430      		cpi r24,lo8(4)
 1804 0016 00F4      		brsh .L167
 1805 0018 8230      		cpi r24,lo8(2)
 1806 001a 00F4      		brsh .L166
 1807               	.L192:
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1808               		.loc 1 739 16 view .LVU437
 1809 001c 80E0      		ldi r24,0
 1810 001e 0895      		ret
 1811               	.L167:
 718:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 1812               		.loc 1 718 5 view .LVU438
 1813 0020 8630      		cpi r24,lo8(6)
 1814 0022 01F4      		brne .L192
 731:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 1815               		.loc 1 731 13 is_stmt 1 view .LVU439
 727:./tmk_core/common/action.c ****             }
 1816               		.loc 1 727 28 is_stmt 0 view .LVU440
 1817 0024 81E0      		ldi r24,lo8(1)
 1818 0026 203E      		cpi r18,lo8(-32)
 1819 0028 00F0      		brlo .L168
 1820 002a 213F      		cpi r18,lo8(-15)
 1821 002c 00C0      		rjmp .L194
 1822               	.LVL179:
 1823               	.L165:
 718:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 1824               		.loc 1 718 5 view .LVU441
 1825 002e 8C30      		cpi r24,lo8(12)
 1826 0030 01F0      		breq .L170
 1827 0032 8F30      		cpi r24,lo8(15)
 1828 0034 01F4      		brne .L192
 1829               	.L170:
 1830               		.loc 1 739 13 is_stmt 1 view .LVU442
 1831               		.loc 1 739 28 is_stmt 0 view .LVU443
 1832 0036 9F70      		andi r25,lo8(15)
 1833               	.LVL180:
 1834               		.loc 1 739 16 view .LVU444
 1835 0038 81E0      		ldi r24,lo8(1)
 1836 003a 9830      		cpi r25,lo8(8)
 1837 003c 00F4      		brsh .L168
 1838 003e 00C0      		rjmp .L192
 1839               	.LVL181:
 1840               	.L166:
 723:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 1841               		.loc 1 723 13 is_stmt 1 view .LVU445
 1842 0040 81E0      		ldi r24,lo8(1)
 1843 0042 203F      		cpi r18,lo8(-16)
 1844 0044 01F0      		breq .L176
 1845 0046 00F4      		brsh .L171
 1846 0048 203E      		cpi r18,lo8(-32)
 1847 004a 00F4      		brsh .L192
 1848               	.LVL182:
 1849               	.L168:
 1850               	/* epilogue start */
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 743:./tmk_core/common/action.c **** }
 1851               		.loc 1 743 1 is_stmt 0 view .LVU446
 1852 004c 0895      		ret
 1853               	.LVL183:
 1854               	.L171:
 1855               		.loc 1 743 1 view .LVU447
 1856 004e 243F      		cpi r18,lo8(-12)
 1857               	.L194:
 1858               		.loc 1 743 1 view .LVU448
 1859 0050 01F4      		brne .L192
 1860 0052 00C0      		rjmp .L168
 1861               	.L176:
 1862               		.loc 1 743 1 view .LVU449
 1863 0054 0895      		ret
 1864               		.cfi_endproc
 1865               	.LFE118:
 1867               		.section	.text.debug_event,"ax",@progbits
 1868               	.global	debug_event
 1870               	debug_event:
 1871               	.LFB119:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 1872               		.loc 1 750 1 is_stmt 1 view -0
 1873               		.cfi_startproc
 1874 0000 CF93      		push r28
 1875               	.LCFI18:
 1876               		.cfi_def_cfa_offset 3
 1877               		.cfi_offset 28, -2
 1878 0002 DF93      		push r29
 1879               	.LCFI19:
 1880               		.cfi_def_cfa_offset 4
 1881               		.cfi_offset 29, -3
 1882 0004 00D0      		rcall .
 1883 0006 00D0      		rcall .
 1884 0008 0F92      		push __tmp_reg__
 1885               	.LCFI20:
 1886               		.cfi_def_cfa_offset 9
 1887 000a CDB7      		in r28,__SP_L__
 1888 000c DEB7      		in r29,__SP_H__
 1889               	.LCFI21:
 1890               		.cfi_def_cfa_register 28
 1891               	/* prologue: function */
 1892               	/* frame size = 5 */
 1893               	/* stack size = 7 */
 1894               	.L__stack_usage = 7
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 1895               		.loc 1 751 103 view .LVU451
 1896               	/* epilogue start */
 752:./tmk_core/common/action.c **** }
 1897               		.loc 1 752 1 is_stmt 0 view .LVU452
 1898 000e 0F90      		pop __tmp_reg__
 1899 0010 0F90      		pop __tmp_reg__
 1900 0012 0F90      		pop __tmp_reg__
 1901 0014 0F90      		pop __tmp_reg__
 1902 0016 0F90      		pop __tmp_reg__
 1903 0018 DF91      		pop r29
 1904 001a CF91      		pop r28
 1905 001c 0895      		ret
 1906               		.cfi_endproc
 1907               	.LFE119:
 1909               		.section	.text.debug_record,"ax",@progbits
 1910               	.global	debug_record
 1912               	debug_record:
 1913               	.LFB120:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 1914               		.loc 1 755 1 is_stmt 1 view -0
 1915               		.cfi_startproc
 1916 0000 CF93      		push r28
 1917               	.LCFI22:
 1918               		.cfi_def_cfa_offset 3
 1919               		.cfi_offset 28, -2
 1920 0002 DF93      		push r29
 1921               	.LCFI23:
 1922               		.cfi_def_cfa_offset 4
 1923               		.cfi_offset 29, -3
 1924 0004 00D0      		rcall .
 1925 0006 00D0      		rcall .
 1926 0008 00D0      		rcall .
 1927               	.LCFI24:
 1928               		.cfi_def_cfa_offset 10
 1929 000a CDB7      		in r28,__SP_L__
 1930 000c DEB7      		in r29,__SP_H__
 1931               	.LCFI25:
 1932               		.cfi_def_cfa_register 28
 1933               	/* prologue: function */
 1934               	/* frame size = 6 */
 1935               	/* stack size = 8 */
 1936               	.L__stack_usage = 8
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 1937               		.loc 1 756 5 view .LVU454
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 1938               		.loc 1 758 77 view .LVU455
 1939               	/* epilogue start */
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 1940               		.loc 1 760 1 is_stmt 0 view .LVU456
 1941 000e 0F90      		pop __tmp_reg__
 1942 0010 0F90      		pop __tmp_reg__
 1943 0012 0F90      		pop __tmp_reg__
 1944 0014 0F90      		pop __tmp_reg__
 1945 0016 0F90      		pop __tmp_reg__
 1946 0018 0F90      		pop __tmp_reg__
 1947 001a DF91      		pop r29
 1948 001c CF91      		pop r28
 1949 001e 0895      		ret
 1950               		.cfi_endproc
 1951               	.LFE120:
 1953               		.section	.text.debug_action,"ax",@progbits
 1954               	.global	debug_action
 1956               	debug_action:
 1957               	.LVL184:
 1958               	.LFB121:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 1959               		.loc 1 763 1 is_stmt 1 view -0
 1960               		.cfi_startproc
 1961               	/* prologue: function */
 1962               	/* frame size = 0 */
 1963               	/* stack size = 0 */
 1964               	.L__stack_usage = 0
 764:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1965               		.loc 1 764 5 view .LVU458
 765:./tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 766:./tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 767:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 768:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 769:./tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 770:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 771:./tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 772:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 773:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 774:./tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 775:./tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 776:./tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 777:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
 778:./tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 779:./tmk_core/common/action.c ****     }
 780:./tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 1966               		.loc 1 780 71 view .LVU459
 1967               	/* epilogue start */
 781:./tmk_core/common/action.c **** }
 1968               		.loc 1 781 1 is_stmt 0 view .LVU460
 1969 0000 0895      		ret
 1970               		.cfi_endproc
 1971               	.LFE121:
 1973               		.section	.rodata.CSWTCH.33,"a"
 1976               	CSWTCH.33:
 1977 0000 E200      		.word	226
 1978 0002 E900      		.word	233
 1979 0004 EA00      		.word	234
 1980 0006 B500      		.word	181
 1981 0008 B600      		.word	182
 1982 000a B700      		.word	183
 1983 000c CD00      		.word	205
 1984 000e 8301      		.word	387
 1985 0010 CC00      		.word	204
 1986 0012 8A01      		.word	394
 1987 0014 9201      		.word	402
 1988 0016 9401      		.word	404
 1989 0018 2102      		.word	545
 1990 001a 2302      		.word	547
 1991 001c 2402      		.word	548
 1992 001e 2502      		.word	549
 1993 0020 2602      		.word	550
 1994 0022 2702      		.word	551
 1995 0024 2A02      		.word	554
 1996 0026 B300      		.word	179
 1997 0028 B400      		.word	180
 1998               	.global	disable_action_cache
 1999               		.section	.bss.disable_action_cache,"aw",@nobits
 2002               	disable_action_cache:
 2003 0000 00        		.zero	1
 2004               		.text
 2005               	.Letext0:
 2006               		.file 3 "/usr/avr/include/stdint.h"
 2007               		.file 4 "./tmk_core/common/keycode.h"
 2008               		.file 5 "./tmk_core/common/action_code.h"
 2009               		.file 6 "./tmk_core/common/action_macro.h"
 2010               		.file 7 "./tmk_core/common/action.h"
 2011               		.file 8 "./tmk_core/common/action_util.h"
 2012               		.file 9 "./tmk_core/common/mousekey.h"
 2013               		.file 10 "./tmk_core/common/host.h"
 2014               		.file 11 "./tmk_core/common/action_layer.h"
 2015               		.file 12 "./tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccnyktCV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnyktCV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnyktCV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnyktCV.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccnyktCV.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnyktCV.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnyktCV.s:15     .text.action_exec:0000000000000000 action_exec
     /tmp/ccnyktCV.s:17     .text.action_exec:0000000000000000 .Loc.0
     /tmp/ccnyktCV.s:18     .text.action_exec:0000000000000000 L0
     /tmp/ccnyktCV.s:48     .text.action_exec:000000000000001e .Loc.1
     /tmp/ccnyktCV.s:49     .text.action_exec:000000000000001e .Loc.2
     /tmp/ccnyktCV.s:50     .text.action_exec:000000000000001e .Loc.3
     /tmp/ccnyktCV.s:51     .text.action_exec:000000000000001e .Loc.4
     /tmp/ccnyktCV.s:63     .text.action_exec:0000000000000032 .Loc.5
     /tmp/ccnyktCV.s:71     .text.action_exec:000000000000003e .Loc.6
     /tmp/ccnyktCV.s:80     .text.action_exec:000000000000004e .Loc.7
     /tmp/ccnyktCV.s:83     .text.action_exec:0000000000000052 L0
     /tmp/ccnyktCV.s:89     .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccnyktCV.s:92     .text.process_record_quantum:0000000000000000 .Loc.8
     /tmp/ccnyktCV.s:93     .text.process_record_quantum:0000000000000000 L0
     /tmp/ccnyktCV.s:98     .text.process_record_quantum:0000000000000000 .Loc.9
     /tmp/ccnyktCV.s:99     .text.process_record_quantum:0000000000000000 .Loc.10
     /tmp/ccnyktCV.s:103    .text.process_record_quantum:0000000000000002 .Loc.11
     /tmp/ccnyktCV.s:105    .text.process_record_quantum:0000000000000004 L0
     /tmp/ccnyktCV.s:111    .text.register_code:0000000000000000 register_code
     /tmp/ccnyktCV.s:114    .text.register_code:0000000000000000 .Loc.12
     /tmp/ccnyktCV.s:115    .text.register_code:0000000000000000 L0
     /tmp/ccnyktCV.s:120    .text.register_code:0000000000000000 .Loc.13
     /tmp/ccnyktCV.s:121    .text.register_code:0000000000000000 .Loc.14
     /tmp/ccnyktCV.s:123    .text.register_code:0000000000000004 L0
     /tmp/ccnyktCV.s:125    .text.register_code:0000000000000006 .Loc.15
     /tmp/ccnyktCV.s:126    .text.register_code:0000000000000006 .Loc.16
     /tmp/ccnyktCV.s:129    .text.register_code:000000000000000a .Loc.17
     /tmp/ccnyktCV.s:130    .text.register_code:000000000000000a .Loc.18
     /tmp/ccnyktCV.s:133    .text.register_code:000000000000000e .Loc.19
     /tmp/ccnyktCV.s:136    .text.register_code:0000000000000012 .Loc.20
     /tmp/ccnyktCV.s:140    .text.register_code:0000000000000018 .Loc.21
     /tmp/ccnyktCV.s:143    .text.register_code:000000000000001c .Loc.22
     /tmp/ccnyktCV.s:146    .text.register_code:000000000000001e .Loc.23
     /tmp/ccnyktCV.s:150    .text.register_code:0000000000000022 .Loc.24
     /tmp/ccnyktCV.s:154    .text.register_code:0000000000000026 .Loc.25
     /tmp/ccnyktCV.s:155    .text.register_code:0000000000000026 .Loc.26
     /tmp/ccnyktCV.s:158    .text.register_code:000000000000002a .Loc.27
     /tmp/ccnyktCV.s:159    .text.register_code:000000000000002a .Loc.28
     /tmp/ccnyktCV.s:162    .text.register_code:000000000000002e .Loc.29
     /tmp/ccnyktCV.s:165    .text.register_code:0000000000000032 .Loc.30
     /tmp/ccnyktCV.s:169    .text.register_code:0000000000000038 .Loc.31
     /tmp/ccnyktCV.s:172    .text.register_code:000000000000003c .Loc.32
     /tmp/ccnyktCV.s:177    .text.register_code:0000000000000040 .Loc.33
     /tmp/ccnyktCV.s:178    .text.register_code:0000000000000040 .Loc.34
     /tmp/ccnyktCV.s:181    .text.register_code:0000000000000044 .Loc.35
     /tmp/ccnyktCV.s:182    .text.register_code:0000000000000044 .Loc.36
     /tmp/ccnyktCV.s:185    .text.register_code:0000000000000048 .Loc.37
     /tmp/ccnyktCV.s:188    .text.register_code:000000000000004c .Loc.38
     /tmp/ccnyktCV.s:192    .text.register_code:0000000000000052 .Loc.39
     /tmp/ccnyktCV.s:195    .text.register_code:0000000000000056 .Loc.40
     /tmp/ccnyktCV.s:200    .text.register_code:000000000000005a .Loc.41
     /tmp/ccnyktCV.s:201    .text.register_code:000000000000005a .Loc.42
     /tmp/ccnyktCV.s:206    .text.register_code:0000000000000062 .Loc.43
     /tmp/ccnyktCV.s:207    .text.register_code:0000000000000062 .Loc.44
     /tmp/ccnyktCV.s:210    .text.register_code:0000000000000066 .Loc.45
     /tmp/ccnyktCV.s:214    .text.register_code:0000000000000068 .Loc.46
     /tmp/ccnyktCV.s:215    .text.register_code:0000000000000068 .Loc.47
     /tmp/ccnyktCV.s:220    .text.register_code:0000000000000070 .Loc.48
     /tmp/ccnyktCV.s:221    .text.register_code:0000000000000070 .Loc.49
     /tmp/ccnyktCV.s:224    .text.register_code:0000000000000072 .Loc.50
     /tmp/ccnyktCV.s:235    .text.register_code:0000000000000082 .Loc.51
     /tmp/ccnyktCV.s:239    .text.register_code:0000000000000084 .Loc.52
     /tmp/ccnyktCV.s:240    .text.register_code:0000000000000084 .Loc.53
     /tmp/ccnyktCV.s:245    .text.register_code:000000000000008c .Loc.54
     /tmp/ccnyktCV.s:248    .text.register_code:0000000000000090 .Loc.55
     /tmp/ccnyktCV.s:251    .text.register_code:0000000000000094 .Loc.56
     /tmp/ccnyktCV.s:256    .text.register_code:0000000000000098 .Loc.57
     /tmp/ccnyktCV.s:260    .text.register_code:000000000000009c .Loc.58
     /tmp/ccnyktCV.s:264    .text.register_code:00000000000000a0 .Loc.59
     /tmp/ccnyktCV.s:268    .text.register_code:00000000000000a2 .Loc.60
     /tmp/ccnyktCV.s:272    .text.register_code:00000000000000a6 .Loc.61
     /tmp/ccnyktCV.s:276    .text.register_code:00000000000000a8 .Loc.62
     /tmp/ccnyktCV.s:277    .text.register_code:00000000000000a8 .Loc.63
     /tmp/ccnyktCV.s:280    .text.register_code:00000000000000aa .Loc.64
     /tmp/ccnyktCV.s:283    .text.register_code:00000000000000ae .Loc.65
     /tmp/ccnyktCV.s:289    .text.register_code:00000000000000b6 .Loc.66
     /tmp/ccnyktCV.s:1976   .rodata.CSWTCH.33:0000000000000000 CSWTCH.33
     /tmp/ccnyktCV.s:298    .text.register_code:00000000000000c2 .Loc.67
     /tmp/ccnyktCV.s:300    .text.register_code:00000000000000c4 L0
     /tmp/ccnyktCV.s:306    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccnyktCV.s:309    .text.unregister_code:0000000000000000 .Loc.68
     /tmp/ccnyktCV.s:310    .text.unregister_code:0000000000000000 L0
     /tmp/ccnyktCV.s:315    .text.unregister_code:0000000000000000 .Loc.69
     /tmp/ccnyktCV.s:316    .text.unregister_code:0000000000000000 .Loc.70
     /tmp/ccnyktCV.s:318    .text.unregister_code:0000000000000004 L0
     /tmp/ccnyktCV.s:320    .text.unregister_code:0000000000000006 .Loc.71
     /tmp/ccnyktCV.s:321    .text.unregister_code:0000000000000006 .Loc.72
     /tmp/ccnyktCV.s:324    .text.unregister_code:000000000000000a .Loc.73
     /tmp/ccnyktCV.s:325    .text.unregister_code:000000000000000a .Loc.74
     /tmp/ccnyktCV.s:328    .text.unregister_code:000000000000000e .Loc.75
     /tmp/ccnyktCV.s:331    .text.unregister_code:0000000000000012 .Loc.76
     /tmp/ccnyktCV.s:335    .text.unregister_code:0000000000000018 .Loc.77
     /tmp/ccnyktCV.s:338    .text.unregister_code:000000000000001c .Loc.78
     /tmp/ccnyktCV.s:341    .text.unregister_code:000000000000001e .Loc.79
     /tmp/ccnyktCV.s:345    .text.unregister_code:0000000000000022 .Loc.80
     /tmp/ccnyktCV.s:349    .text.unregister_code:0000000000000026 .Loc.81
     /tmp/ccnyktCV.s:350    .text.unregister_code:0000000000000026 .Loc.82
     /tmp/ccnyktCV.s:353    .text.unregister_code:000000000000002a .Loc.83
     /tmp/ccnyktCV.s:354    .text.unregister_code:000000000000002a .Loc.84
     /tmp/ccnyktCV.s:357    .text.unregister_code:000000000000002e .Loc.85
     /tmp/ccnyktCV.s:360    .text.unregister_code:0000000000000032 .Loc.86
     /tmp/ccnyktCV.s:364    .text.unregister_code:0000000000000038 .Loc.87
     /tmp/ccnyktCV.s:367    .text.unregister_code:000000000000003c .Loc.88
     /tmp/ccnyktCV.s:372    .text.unregister_code:0000000000000040 .Loc.89
     /tmp/ccnyktCV.s:373    .text.unregister_code:0000000000000040 .Loc.90
     /tmp/ccnyktCV.s:376    .text.unregister_code:0000000000000044 .Loc.91
     /tmp/ccnyktCV.s:377    .text.unregister_code:0000000000000044 .Loc.92
     /tmp/ccnyktCV.s:380    .text.unregister_code:0000000000000048 .Loc.93
     /tmp/ccnyktCV.s:383    .text.unregister_code:000000000000004c .Loc.94
     /tmp/ccnyktCV.s:387    .text.unregister_code:0000000000000052 .Loc.95
     /tmp/ccnyktCV.s:390    .text.unregister_code:0000000000000056 .Loc.96
     /tmp/ccnyktCV.s:395    .text.unregister_code:000000000000005a .Loc.97
     /tmp/ccnyktCV.s:396    .text.unregister_code:000000000000005a .Loc.98
     /tmp/ccnyktCV.s:401    .text.unregister_code:0000000000000062 .Loc.99
     /tmp/ccnyktCV.s:402    .text.unregister_code:0000000000000062 .Loc.100
     /tmp/ccnyktCV.s:407    .text.unregister_code:000000000000006a .Loc.101
     /tmp/ccnyktCV.s:408    .text.unregister_code:000000000000006a .Loc.102
     /tmp/ccnyktCV.s:411    .text.unregister_code:000000000000006c .Loc.103
     /tmp/ccnyktCV.s:422    .text.unregister_code:000000000000007c .Loc.104
     /tmp/ccnyktCV.s:426    .text.unregister_code:000000000000007e .Loc.105
     /tmp/ccnyktCV.s:427    .text.unregister_code:000000000000007e .Loc.106
     /tmp/ccnyktCV.s:432    .text.unregister_code:0000000000000086 .Loc.107
     /tmp/ccnyktCV.s:436    .text.unregister_code:000000000000008a .Loc.108
     /tmp/ccnyktCV.s:440    .text.unregister_code:000000000000008e .Loc.109
     /tmp/ccnyktCV.s:441    .text.unregister_code:000000000000008e .Loc.110
     /tmp/ccnyktCV.s:444    .text.unregister_code:0000000000000090 .Loc.111
     /tmp/ccnyktCV.s:447    .text.unregister_code:0000000000000094 .Loc.112
     /tmp/ccnyktCV.s:451    .text.unregister_code:0000000000000098 .Loc.113
     /tmp/ccnyktCV.s:456    .text.unregister_code:000000000000009c .Loc.114
     /tmp/ccnyktCV.s:458    .text.unregister_code:000000000000009e L0
     /tmp/ccnyktCV.s:464    .text.register_mods:0000000000000000 register_mods
     /tmp/ccnyktCV.s:467    .text.register_mods:0000000000000000 .Loc.115
     /tmp/ccnyktCV.s:468    .text.register_mods:0000000000000000 L0
     /tmp/ccnyktCV.s:473    .text.register_mods:0000000000000000 .Loc.116
     /tmp/ccnyktCV.s:474    .text.register_mods:0000000000000000 .Loc.117
     /tmp/ccnyktCV.s:477    .text.register_mods:0000000000000004 .Loc.118
     /tmp/ccnyktCV.s:480    .text.register_mods:0000000000000008 .Loc.119
     /tmp/ccnyktCV.s:485    .text.register_mods:000000000000000c .Loc.120
     /tmp/ccnyktCV.s:487    .text.register_mods:000000000000000e L0
     /tmp/ccnyktCV.s:493    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccnyktCV.s:496    .text.unregister_mods:0000000000000000 .Loc.121
     /tmp/ccnyktCV.s:497    .text.unregister_mods:0000000000000000 L0
     /tmp/ccnyktCV.s:502    .text.unregister_mods:0000000000000000 .Loc.122
     /tmp/ccnyktCV.s:503    .text.unregister_mods:0000000000000000 .Loc.123
     /tmp/ccnyktCV.s:506    .text.unregister_mods:0000000000000004 .Loc.124
     /tmp/ccnyktCV.s:509    .text.unregister_mods:0000000000000008 .Loc.125
     /tmp/ccnyktCV.s:514    .text.unregister_mods:000000000000000c .Loc.126
     /tmp/ccnyktCV.s:516    .text.unregister_mods:000000000000000e L0
     /tmp/ccnyktCV.s:522    .text.process_action:0000000000000000 process_action
     /tmp/ccnyktCV.s:525    .text.process_action:0000000000000000 .Loc.127
     /tmp/ccnyktCV.s:526    .text.process_action:0000000000000000 L0
     /tmp/ccnyktCV.s:527    .text.process_action:0000000000000000 .Loc.128
     /tmp/ccnyktCV.s:560    .text.process_action:0000000000000012 L0
     /tmp/ccnyktCV.s:561    .text.process_action:0000000000000014 L0
     /tmp/ccnyktCV.s:562    .text.process_action:0000000000000016 L0
     /tmp/ccnyktCV.s:576    .text.process_action:0000000000000020 .Loc.129
     /tmp/ccnyktCV.s:578    .text.process_action:0000000000000020 .Loc.130
     /tmp/ccnyktCV.s:579    .text.process_action:0000000000000020 .Loc.131
     /tmp/ccnyktCV.s:580    .text.process_action:0000000000000020 .Loc.132
     /tmp/ccnyktCV.s:586    .text.process_action:0000000000000028 .Loc.133
     /tmp/ccnyktCV.s:587    .text.process_action:0000000000000028 .Loc.134
     /tmp/ccnyktCV.s:589    .text.process_action:000000000000002a .Loc.135
     /tmp/ccnyktCV.s:592    .text.process_action:000000000000002e .Loc.136
     /tmp/ccnyktCV.s:593    .text.process_action:000000000000002e .Loc.137
     /tmp/ccnyktCV.s:597    .text.process_action:0000000000000032 .Loc.138
     /tmp/ccnyktCV.s:601    .text.process_action:0000000000000034 .Loc.139
     /tmp/ccnyktCV.s:602    .text.process_action:0000000000000034 .Loc.140
     /tmp/ccnyktCV.s:606    .text.process_action:000000000000003a .Loc.141
     /tmp/ccnyktCV.s:633    .text.process_action:0000000000000044 .Loc.142
     /tmp/ccnyktCV.s:636    .text.process_action:0000000000000048 .Loc.143
     /tmp/ccnyktCV.s:637    .text.process_action:0000000000000048 .Loc.144
     /tmp/ccnyktCV.s:640    .text.process_action:000000000000004c .Loc.145
     /tmp/ccnyktCV.s:643    .text.process_action:0000000000000050 .Loc.146
     /tmp/ccnyktCV.s:646    .text.process_action:0000000000000054 .Loc.147
     /tmp/ccnyktCV.s:649    .text.process_action:0000000000000058 .Loc.148
     /tmp/ccnyktCV.s:653    .text.process_action:000000000000005e .Loc.149
     /tmp/ccnyktCV.s:654    .text.process_action:000000000000005e .Loc.150
     /tmp/ccnyktCV.s:657    .text.process_action:0000000000000062 .Loc.151
     /tmp/ccnyktCV.s:662    .text.process_action:0000000000000068 .Loc.152
     /tmp/ccnyktCV.s:666    .text.process_action:000000000000006a .Loc.153
     /tmp/ccnyktCV.s:667    .text.process_action:000000000000006a .Loc.154
     /tmp/ccnyktCV.s:670    .text.process_action:000000000000006c .Loc.155
     /tmp/ccnyktCV.s:672    .text.process_action:000000000000006e .Loc.156
     /tmp/ccnyktCV.s:676    .text.process_action:0000000000000074 .Loc.157
     /tmp/ccnyktCV.s:681    .text.process_action:0000000000000078 .Loc.158
     /tmp/ccnyktCV.s:682    .text.process_action:0000000000000078 .Loc.159
     /tmp/ccnyktCV.s:685    .text.process_action:000000000000007c .Loc.160
     /tmp/ccnyktCV.s:686    .text.process_action:000000000000007c .Loc.161
     /tmp/ccnyktCV.s:689    .text.process_action:0000000000000080 .Loc.162
     /tmp/ccnyktCV.s:690    .text.process_action:0000000000000080 .Loc.163
     /tmp/ccnyktCV.s:693    .text.process_action:0000000000000084 .Loc.164
     /tmp/ccnyktCV.s:696    .text.process_action:0000000000000088 .Loc.165
     /tmp/ccnyktCV.s:701    .text.process_action:000000000000008e .Loc.166
     /tmp/ccnyktCV.s:706    .text.process_action:0000000000000094 .Loc.167
     /tmp/ccnyktCV.s:709    .text.process_action:0000000000000098 .Loc.168
     /tmp/ccnyktCV.s:711    .text.process_action:0000000000000098 .Loc.169
     /tmp/ccnyktCV.s:713    .text.process_action:0000000000000098 .Loc.170
     /tmp/ccnyktCV.s:714    .text.process_action:0000000000000098 .Loc.171
     /tmp/ccnyktCV.s:722    .text.process_action:00000000000000a0 .Loc.172
     /tmp/ccnyktCV.s:728    .text.process_action:00000000000000a8 .Loc.173
     /tmp/ccnyktCV.s:732    .text.process_action:00000000000000ae .Loc.174
     /tmp/ccnyktCV.s:733    .text.process_action:00000000000000ae .Loc.175
     /tmp/ccnyktCV.s:736    .text.process_action:00000000000000b2 .Loc.176
     /tmp/ccnyktCV.s:737    .text.process_action:00000000000000b2 .Loc.177
     /tmp/ccnyktCV.s:740    .text.process_action:00000000000000b6 .Loc.178
     /tmp/ccnyktCV.s:743    .text.process_action:00000000000000ba .Loc.179
     /tmp/ccnyktCV.s:748    .text.process_action:00000000000000c0 .Loc.180
     /tmp/ccnyktCV.s:753    .text.process_action:00000000000000c6 .Loc.181
     /tmp/ccnyktCV.s:757    .text.process_action:00000000000000ca .Loc.182
     /tmp/ccnyktCV.s:759    .text.process_action:00000000000000ca .Loc.183
     /tmp/ccnyktCV.s:760    .text.process_action:00000000000000ca .Loc.184
     /tmp/ccnyktCV.s:762    .text.process_action:00000000000000ce L0
     /tmp/ccnyktCV.s:764    .text.process_action:00000000000000d0 .Loc.185
     /tmp/ccnyktCV.s:767    .text.process_action:00000000000000d4 .Loc.186
     /tmp/ccnyktCV.s:770    .text.process_action:00000000000000d8 .Loc.187
     /tmp/ccnyktCV.s:771    .text.process_action:00000000000000d8 .Loc.188
     /tmp/ccnyktCV.s:774    .text.process_action:00000000000000dc .Loc.189
     /tmp/ccnyktCV.s:779    .text.process_action:00000000000000e4 .Loc.190
     /tmp/ccnyktCV.s:1577   .text.process_record:0000000000000000 process_record
     /tmp/ccnyktCV.s:783    .text.process_action:00000000000000ea .Loc.191
     /tmp/ccnyktCV.s:787    .text.process_action:00000000000000ee .Loc.192
     /tmp/ccnyktCV.s:798    .text.process_action:0000000000000100 .Loc.193
     /tmp/ccnyktCV.s:803    .text.process_action:0000000000000106 .Loc.194
     /tmp/ccnyktCV.s:806    .text.process_action:0000000000000108 .Loc.195
     /tmp/ccnyktCV.s:808    .text.process_action:000000000000010a .Loc.196
     /tmp/ccnyktCV.s:813    .text.process_action:000000000000010e .Loc.197
     /tmp/ccnyktCV.s:820    .text.process_action:0000000000000116 .Loc.198
     /tmp/ccnyktCV.s:823    .text.process_action:0000000000000116 .Loc.199
     /tmp/ccnyktCV.s:826    .text.process_action:0000000000000116 .Loc.200
     /tmp/ccnyktCV.s:832    .text.process_action:000000000000011c .Loc.201
     /tmp/ccnyktCV.s:835    .text.process_action:0000000000000120 .Loc.202
     /tmp/ccnyktCV.s:838    .text.process_action:0000000000000124 .Loc.203
     /tmp/ccnyktCV.s:844    .text.process_action:000000000000012a .Loc.204
     /tmp/ccnyktCV.s:850    .text.process_action:0000000000000134 .Loc.205
     /tmp/ccnyktCV.s:851    .text.process_action:0000000000000134 .Loc.206
     /tmp/ccnyktCV.s:854    .text.process_action:0000000000000138 .Loc.207
     /tmp/ccnyktCV.s:855    .text.process_action:0000000000000138 .Loc.208
     /tmp/ccnyktCV.s:858    .text.process_action:000000000000013c .Loc.209
     /tmp/ccnyktCV.s:859    .text.process_action:000000000000013c .Loc.210
     /tmp/ccnyktCV.s:862    .text.process_action:0000000000000140 .Loc.211
     /tmp/ccnyktCV.s:865    .text.process_action:0000000000000144 .Loc.212
     /tmp/ccnyktCV.s:866    .text.process_action:0000000000000144 .Loc.213
     /tmp/ccnyktCV.s:867    .text.process_action:0000000000000144 .Loc.214
     /tmp/ccnyktCV.s:872    .text.process_action:000000000000014a .Loc.215
     /tmp/ccnyktCV.s:873    .text.process_action:000000000000014a .Loc.216
     /tmp/ccnyktCV.s:876    .text.process_action:000000000000014e .Loc.217
     /tmp/ccnyktCV.s:877    .text.process_action:000000000000014e .Loc.218
     /tmp/ccnyktCV.s:881    .text.process_action:0000000000000152 .Loc.219
     /tmp/ccnyktCV.s:885    .text.process_action:0000000000000154 .Loc.220
     /tmp/ccnyktCV.s:891    .text.process_action:000000000000015a .Loc.221
     /tmp/ccnyktCV.s:892    .text.process_action:000000000000015a .Loc.222
     /tmp/ccnyktCV.s:894    .text.process_action:000000000000015c .Loc.223
     /tmp/ccnyktCV.s:897    .text.process_action:0000000000000160 .Loc.224
     /tmp/ccnyktCV.s:898    .text.process_action:0000000000000160 .Loc.225
     /tmp/ccnyktCV.s:903    .text.process_action:0000000000000166 .Loc.226
     /tmp/ccnyktCV.s:904    .text.process_action:0000000000000166 .Loc.227
     /tmp/ccnyktCV.s:908    .text.process_action:000000000000016a .Loc.228
     /tmp/ccnyktCV.s:911    .text.process_action:000000000000016e .Loc.229
     /tmp/ccnyktCV.s:913    .text.process_action:000000000000016e .Loc.230
     /tmp/ccnyktCV.s:914    .text.process_action:000000000000016e .Loc.231
     /tmp/ccnyktCV.s:918    .text.process_action:0000000000000170 .Loc.232
     /tmp/ccnyktCV.s:920    .text.process_action:0000000000000170 .Loc.233
     /tmp/ccnyktCV.s:927    .text.process_action:0000000000000176 .Loc.234
     /tmp/ccnyktCV.s:928    .text.process_action:0000000000000176 .Loc.235
     /tmp/ccnyktCV.s:930    .text.process_action:000000000000017a L0
     /tmp/ccnyktCV.s:934    .text.process_action:000000000000017e .Loc.236
     /tmp/ccnyktCV.s:935    .text.process_action:000000000000017e .Loc.237
     /tmp/ccnyktCV.s:938    .text.process_action:0000000000000182 .Loc.238
     /tmp/ccnyktCV.s:939    .text.process_action:0000000000000182 .Loc.239
     /tmp/ccnyktCV.s:941    .text.process_action:0000000000000186 L0
     /tmp/ccnyktCV.s:945    .text.process_action:000000000000018a .Loc.240
     /tmp/ccnyktCV.s:946    .text.process_action:000000000000018a .Loc.241
     /tmp/ccnyktCV.s:948    .text.process_action:000000000000018e L0
     /tmp/ccnyktCV.s:952    .text.process_action:0000000000000192 .Loc.242
     /tmp/ccnyktCV.s:953    .text.process_action:0000000000000192 .Loc.243
     /tmp/ccnyktCV.s:958    .text.process_action:0000000000000196 .Loc.244
     /tmp/ccnyktCV.s:960    .text.process_action:0000000000000196 .Loc.245
     /tmp/ccnyktCV.s:961    .text.process_action:0000000000000196 .Loc.246
     /tmp/ccnyktCV.s:967    .text.process_action:000000000000019e .Loc.247
     /tmp/ccnyktCV.s:968    .text.process_action:000000000000019e .Loc.248
     /tmp/ccnyktCV.s:976    .text.process_action:00000000000001ae L0
     /tmp/ccnyktCV.s:978    .text.process_action:00000000000001b0 .Loc.249
     /tmp/ccnyktCV.s:979    .text.process_action:00000000000001b0 .Loc.250
     /tmp/ccnyktCV.s:983    .text.process_action:00000000000001b6 .Loc.251
     /tmp/ccnyktCV.s:986    .text.process_action:00000000000001ba .Loc.252
     /tmp/ccnyktCV.s:994    .text.process_action:00000000000001c4 .Loc.253
     /tmp/ccnyktCV.s:995    .text.process_action:00000000000001c4 .Loc.254
     /tmp/ccnyktCV.s:999    .text.process_action:00000000000001ca .Loc.255
     /tmp/ccnyktCV.s:1002   .text.process_action:00000000000001ce .Loc.256
     /tmp/ccnyktCV.s:1010   .text.process_action:00000000000001d8 .Loc.257
     /tmp/ccnyktCV.s:1011   .text.process_action:00000000000001d8 .Loc.258
     /tmp/ccnyktCV.s:1013   .text.process_action:00000000000001da .Loc.259
     /tmp/ccnyktCV.s:1016   .text.process_action:00000000000001de .Loc.260
     /tmp/ccnyktCV.s:1019   .text.process_action:00000000000001e2 .Loc.261
     /tmp/ccnyktCV.s:1021   .text.process_action:00000000000001e2 .Loc.262
     /tmp/ccnyktCV.s:1026   .text.process_action:00000000000001e8 .Loc.263
     /tmp/ccnyktCV.s:1031   .text.process_action:00000000000001ee .Loc.264
     /tmp/ccnyktCV.s:1032   .text.process_action:00000000000001ee .Loc.265
     /tmp/ccnyktCV.s:1035   .text.process_action:00000000000001f2 .Loc.266
     /tmp/ccnyktCV.s:1038   .text.process_action:00000000000001f6 .Loc.267
     /tmp/ccnyktCV.s:1039   .text.process_action:00000000000001f6 .Loc.268
     /tmp/ccnyktCV.s:1043   .text.process_action:00000000000001fa .Loc.269
     /tmp/ccnyktCV.s:1045   .text.process_action:00000000000001fa .Loc.270
     /tmp/ccnyktCV.s:1046   .text.process_action:00000000000001fa .Loc.271
     /tmp/ccnyktCV.s:1051   .text.process_action:0000000000000202 .Loc.272
     /tmp/ccnyktCV.s:1054   .text.process_action:0000000000000206 .Loc.273
     /tmp/ccnyktCV.s:1057   .text.process_action:000000000000020a .Loc.274
     /tmp/ccnyktCV.s:1061   .text.process_action:0000000000000210 .Loc.275
     /tmp/ccnyktCV.s:1079   .text.process_action:000000000000022c .Loc.276
     /tmp/ccnyktCV.s:1080   .text.process_action:000000000000022c .Loc.277
     /tmp/ccnyktCV.s:1087   .text.process_action:0000000000000238 .Loc.278
     /tmp/ccnyktCV.s:1101   .text.process_action:000000000000024e .Loc.279
     /tmp/ccnyktCV.s:1108   .text.process_action:0000000000000256 .Loc.280
     /tmp/ccnyktCV.s:1109   .text.process_action:0000000000000256 .Loc.281
     /tmp/ccnyktCV.s:1116   .text.process_action:0000000000000260 .Loc.282
     /tmp/ccnyktCV.s:1135   .text.process_action:0000000000000284 .Loc.283
     /tmp/ccnyktCV.s:1139   .text.process_action:0000000000000288 .Loc.284
     /tmp/ccnyktCV.s:1142   .text.process_action:000000000000028c .Loc.285
     /tmp/ccnyktCV.s:1146   .text.process_action:000000000000028e .Loc.286
     /tmp/ccnyktCV.s:1162   .text.process_action:00000000000002aa .Loc.287
     /tmp/ccnyktCV.s:1165   .text.process_action:00000000000002ae .Loc.288
     /tmp/ccnyktCV.s:1169   .text.process_action:00000000000002b0 .Loc.289
     /tmp/ccnyktCV.s:1173   .text.process_action:00000000000002b4 .Loc.290
     /tmp/ccnyktCV.s:1180   .text.process_action:00000000000002c0 .Loc.291
     /tmp/ccnyktCV.s:1184   .text.process_action:00000000000002c2 .Loc.292
     /tmp/ccnyktCV.s:1186   .text.process_action:00000000000002c2 .Loc.293
     /tmp/ccnyktCV.s:1187   .text.process_action:00000000000002c2 .Loc.294
     /tmp/ccnyktCV.s:1189   .text.process_action:00000000000002c6 L0
     /tmp/ccnyktCV.s:1191   .text.process_action:00000000000002c8 .Loc.295
     /tmp/ccnyktCV.s:1197   .text.process_action:00000000000002ce .Loc.296
     /tmp/ccnyktCV.s:1199   .text.process_action:00000000000002ce .Loc.297
     /tmp/ccnyktCV.s:1200   .text.process_action:00000000000002ce .Loc.298
     /tmp/ccnyktCV.s:1205   .text.process_action:00000000000002d6 .Loc.299
     /tmp/ccnyktCV.s:1208   .text.process_action:00000000000002da .Loc.300
     /tmp/ccnyktCV.s:1211   .text.process_action:00000000000002de .Loc.301
     /tmp/ccnyktCV.s:1215   .text.process_action:00000000000002e4 .Loc.302
     /tmp/ccnyktCV.s:1233   .text.process_action:0000000000000300 .Loc.303
     /tmp/ccnyktCV.s:1234   .text.process_action:0000000000000300 .Loc.304
     /tmp/ccnyktCV.s:1241   .text.process_action:000000000000030c .Loc.305
     /tmp/ccnyktCV.s:1255   .text.process_action:0000000000000322 .Loc.306
     /tmp/ccnyktCV.s:1262   .text.process_action:000000000000032a .Loc.307
     /tmp/ccnyktCV.s:1263   .text.process_action:000000000000032a .Loc.308
     /tmp/ccnyktCV.s:1270   .text.process_action:0000000000000334 .Loc.309
     /tmp/ccnyktCV.s:1289   .text.process_action:0000000000000358 .Loc.310
     /tmp/ccnyktCV.s:1293   .text.process_action:000000000000035c .Loc.311
     /tmp/ccnyktCV.s:1296   .text.process_action:0000000000000360 .Loc.312
     /tmp/ccnyktCV.s:1300   .text.process_action:0000000000000362 .Loc.313
     /tmp/ccnyktCV.s:1302   .text.process_action:0000000000000362 .Loc.314
     /tmp/ccnyktCV.s:1304   .text.process_action:0000000000000366 L0
     /tmp/ccnyktCV.s:1310   .text.process_action:000000000000036a .Loc.315
     /tmp/ccnyktCV.s:1326   .text.process_action:0000000000000386 .Loc.316
     /tmp/ccnyktCV.s:1329   .text.process_action:000000000000038a .Loc.317
     /tmp/ccnyktCV.s:1333   .text.process_action:000000000000038c .Loc.318
     /tmp/ccnyktCV.s:1337   .text.process_action:0000000000000390 .Loc.319
     /tmp/ccnyktCV.s:1344   .text.process_action:000000000000039c .Loc.320
     /tmp/ccnyktCV.s:1348   .text.process_action:000000000000039e .Loc.321
     /tmp/ccnyktCV.s:1350   .text.process_action:000000000000039e .Loc.322
     /tmp/ccnyktCV.s:1353   .text.process_action:00000000000003a4 L0
     /tmp/ccnyktCV.s:1365   .text.process_action:00000000000003b8 .Loc.323
     /tmp/ccnyktCV.s:1366   .text.process_action:00000000000003b8 .Loc.324
     /tmp/ccnyktCV.s:1368   .text.process_action:00000000000003bc L0
     /tmp/ccnyktCV.s:1370   .text.process_action:00000000000003be .Loc.325
     /tmp/ccnyktCV.s:1371   .text.process_action:00000000000003be .Loc.326
     /tmp/ccnyktCV.s:1374   .text.process_action:00000000000003c2 .Loc.327
     /tmp/ccnyktCV.s:1375   .text.process_action:00000000000003c2 .Loc.328
     /tmp/ccnyktCV.s:1380   .text.process_action:00000000000003c8 .Loc.329
     /tmp/ccnyktCV.s:1386   .text.process_action:00000000000003d2 .Loc.330
     /tmp/ccnyktCV.s:1387   .text.process_action:00000000000003d2 .Loc.331
     /tmp/ccnyktCV.s:1390   .text.process_action:00000000000003d6 .Loc.332
     /tmp/ccnyktCV.s:1391   .text.process_action:00000000000003d6 .Loc.333
     /tmp/ccnyktCV.s:1395   .text.process_action:00000000000003dc .Loc.334
     /tmp/ccnyktCV.s:1399   .text.process_action:00000000000003e2 .Loc.335
     /tmp/ccnyktCV.s:1406   .text.process_action:00000000000003ec .Loc.336
     /tmp/ccnyktCV.s:1407   .text.process_action:00000000000003ec .Loc.337
     /tmp/ccnyktCV.s:1411   .text.process_action:00000000000003f2 .Loc.338
     /tmp/ccnyktCV.s:1414   .text.process_action:00000000000003f6 .Loc.339
     /tmp/ccnyktCV.s:1417   .text.process_action:00000000000003fa .Loc.340
     /tmp/ccnyktCV.s:1420   .text.process_action:00000000000003fe .Loc.341
     /tmp/ccnyktCV.s:1424   .text.process_action:0000000000000402 .Loc.342
     /tmp/ccnyktCV.s:1427   .text.process_action:0000000000000406 .Loc.343
     /tmp/ccnyktCV.s:1431   .text.process_action:000000000000040a .Loc.344
     /tmp/ccnyktCV.s:1432   .text.process_action:000000000000040a .Loc.345
     /tmp/ccnyktCV.s:1435   .text.process_action:000000000000040e .Loc.346
     /tmp/ccnyktCV.s:1436   .text.process_action:000000000000040e .Loc.347
     /tmp/ccnyktCV.s:1439   .text.process_action:0000000000000410 .Loc.348
     /tmp/ccnyktCV.s:1440   .text.process_action:0000000000000412 L0
     /tmp/ccnyktCV.s:1442   .text.process_action:0000000000000414 .Loc.349
     /tmp/ccnyktCV.s:1449   .text.process_action:000000000000041e .Loc.350
     /tmp/ccnyktCV.s:1450   .text.process_action:000000000000041e .Loc.351
     /tmp/ccnyktCV.s:1454   .text.process_action:0000000000000422 .Loc.352
     /tmp/ccnyktCV.s:1455   .text.process_action:0000000000000422 .Loc.353
     /tmp/ccnyktCV.s:1458   .text.process_action:0000000000000426 .Loc.354
     /tmp/ccnyktCV.s:1462   .text.process_action:000000000000042a .Loc.355
     /tmp/ccnyktCV.s:1467   .text.process_action:0000000000000430 .Loc.356
     /tmp/ccnyktCV.s:1468   .text.process_action:0000000000000430 .Loc.357
     /tmp/ccnyktCV.s:1471   .text.process_action:0000000000000434 .Loc.358
     /tmp/ccnyktCV.s:1475   .text.process_action:0000000000000438 .Loc.359
     /tmp/ccnyktCV.s:1480   .text.process_action:000000000000043e .Loc.360
     /tmp/ccnyktCV.s:1481   .text.process_action:000000000000043e .Loc.361
     /tmp/ccnyktCV.s:1484   .text.process_action:0000000000000442 .Loc.362
     /tmp/ccnyktCV.s:1491   .text.process_action:000000000000044c .Loc.363
     /tmp/ccnyktCV.s:1496   .text.process_action:0000000000000452 .Loc.364
     /tmp/ccnyktCV.s:1500   .text.process_action:0000000000000458 .Loc.365
     /tmp/ccnyktCV.s:1501   .text.process_action:0000000000000458 .Loc.366
     /tmp/ccnyktCV.s:1503   .text.process_action:000000000000045c L0
     /tmp/ccnyktCV.s:1505   .text.process_action:000000000000045e .Loc.367
     /tmp/ccnyktCV.s:1511   .text.process_action:0000000000000466 .Loc.368
     /tmp/ccnyktCV.s:1512   .text.process_action:0000000000000466 .Loc.369
     /tmp/ccnyktCV.s:1515   .text.process_action:000000000000046a .Loc.370
     /tmp/ccnyktCV.s:1516   .text.process_action:000000000000046a .Loc.371
     /tmp/ccnyktCV.s:1521   .text.process_action:0000000000000470 .Loc.372
     /tmp/ccnyktCV.s:1522   .text.process_action:0000000000000470 .Loc.373
     /tmp/ccnyktCV.s:1525   .text.process_action:0000000000000474 .Loc.374
     /tmp/ccnyktCV.s:1532   .text.process_action:0000000000000480 .Loc.375
     /tmp/ccnyktCV.s:1535   .text.process_action:0000000000000482 .Loc.376
     /tmp/ccnyktCV.s:1536   .text.process_action:0000000000000482 .Loc.377
     /tmp/ccnyktCV.s:1539   .text.process_action:0000000000000486 .Loc.378
     /tmp/ccnyktCV.s:1544   .text.process_action:000000000000048e .Loc.379
     /tmp/ccnyktCV.s:1549   .text.process_action:0000000000000490 .Loc.380
     /tmp/ccnyktCV.s:1560   .text.process_action:00000000000004a2 .Loc.381
     /tmp/ccnyktCV.s:1565   .text.process_action:00000000000004a8 .Loc.382
     /tmp/ccnyktCV.s:1568   .text.process_action:00000000000004aa .Loc.383
     /tmp/ccnyktCV.s:1571   .text.process_action:00000000000004ae L0
     /tmp/ccnyktCV.s:1580   .text.process_record:0000000000000000 .Loc.384
     /tmp/ccnyktCV.s:1581   .text.process_record:0000000000000000 L0
     /tmp/ccnyktCV.s:1582   .text.process_record:0000000000000000 .Loc.385
     /tmp/ccnyktCV.s:1604   .text.process_record:000000000000000a .Loc.386
     /tmp/ccnyktCV.s:1607   .text.process_record:000000000000000c .Loc.387
     /tmp/ccnyktCV.s:1613   .text.process_record:000000000000000e .Loc.388
     /tmp/ccnyktCV.s:1615   .text.process_record:000000000000000e .Loc.389
     /tmp/ccnyktCV.s:1616   .text.process_record:000000000000000e .Loc.390
     /tmp/ccnyktCV.s:1623   .text.process_record:0000000000000018 .Loc.391
     /tmp/ccnyktCV.s:1627   .text.process_record:000000000000001c .Loc.392
     /tmp/ccnyktCV.s:1630   .text.process_record:000000000000001c .Loc.393
     /tmp/ccnyktCV.s:1631   .text.process_record:000000000000001c .Loc.394
     /tmp/ccnyktCV.s:1635   .text.process_record:0000000000000022 .Loc.395
     /tmp/ccnyktCV.s:1638   .text.process_record:0000000000000026 .Loc.396
     /tmp/ccnyktCV.s:1639   .text.process_record:0000000000000026 .Loc.397
     /tmp/ccnyktCV.s:1646   .text.process_record:0000000000000032 .Loc.398
     /tmp/ccnyktCV.s:1647   .text.process_record:0000000000000032 .Loc.399
     /tmp/ccnyktCV.s:1648   .text.process_record:0000000000000032 .Loc.400
     /tmp/ccnyktCV.s:1649   .text.process_record:0000000000000032 .Loc.401
     /tmp/ccnyktCV.s:1652   .text.process_record:0000000000000036 .Loc.402
     /tmp/ccnyktCV.s:1653   .text.process_record:0000000000000036 .Loc.403
     /tmp/ccnyktCV.s:1656   .text.process_record:000000000000003a .Loc.404
     /tmp/ccnyktCV.s:1657   .text.process_record:000000000000003a .Loc.405
     /tmp/ccnyktCV.s:1661   .text.process_record:000000000000003e .Loc.406
     /tmp/ccnyktCV.s:1665   .text.process_record:0000000000000042 .Loc.407
     /tmp/ccnyktCV.s:1668   .text.process_record:0000000000000046 .Loc.408
     /tmp/ccnyktCV.s:1673   .text.process_record:000000000000004a .Loc.409
     /tmp/ccnyktCV.s:1677   .text.process_record:000000000000004e .Loc.410
     /tmp/ccnyktCV.s:1681   .text.process_record:0000000000000054 L0
     /tmp/ccnyktCV.s:1687   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/ccnyktCV.s:1690   .text.process_record_nocache:0000000000000000 .Loc.411
     /tmp/ccnyktCV.s:1691   .text.process_record_nocache:0000000000000000 L0
     /tmp/ccnyktCV.s:1696   .text.process_record_nocache:0000000000000000 .Loc.412
     /tmp/ccnyktCV.s:1697   .text.process_record_nocache:0000000000000000 .Loc.413
     /tmp/ccnyktCV.s:2002   .bss.disable_action_cache:0000000000000000 disable_action_cache
     /tmp/ccnyktCV.s:1700   .text.process_record_nocache:0000000000000006 .Loc.414
     /tmp/ccnyktCV.s:1703   .text.process_record_nocache:000000000000000a .Loc.415
     /tmp/ccnyktCV.s:1704   .text.process_record_nocache:000000000000000a .Loc.416
     /tmp/ccnyktCV.s:1707   .text.process_record_nocache:000000000000000e .Loc.417
     /tmp/ccnyktCV.s:1709   .text.process_record_nocache:0000000000000010 L0
     /tmp/ccnyktCV.s:1715   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccnyktCV.s:1717   .text.clear_keyboard_but_mods:0000000000000000 .Loc.418
     /tmp/ccnyktCV.s:1718   .text.clear_keyboard_but_mods:0000000000000000 L0
     /tmp/ccnyktCV.s:1723   .text.clear_keyboard_but_mods:0000000000000000 .Loc.419
     /tmp/ccnyktCV.s:1726   .text.clear_keyboard_but_mods:0000000000000004 .Loc.420
     /tmp/ccnyktCV.s:1729   .text.clear_keyboard_but_mods:0000000000000008 .Loc.421
     /tmp/ccnyktCV.s:1732   .text.clear_keyboard_but_mods:000000000000000c .Loc.422
     /tmp/ccnyktCV.s:1735   .text.clear_keyboard_but_mods:0000000000000010 .Loc.423
     /tmp/ccnyktCV.s:1738   .text.clear_keyboard_but_mods:0000000000000014 .Loc.424
     /tmp/ccnyktCV.s:1741   .text.clear_keyboard_but_mods:0000000000000018 .Loc.425
     /tmp/ccnyktCV.s:1746   .text.clear_keyboard_but_mods:0000000000000020 .Loc.426
     /tmp/ccnyktCV.s:1751   .text.clear_keyboard_but_mods:0000000000000028 L0
     /tmp/ccnyktCV.s:1757   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccnyktCV.s:1759   .text.clear_keyboard:0000000000000000 .Loc.427
     /tmp/ccnyktCV.s:1760   .text.clear_keyboard:0000000000000000 L0
     /tmp/ccnyktCV.s:1765   .text.clear_keyboard:0000000000000000 .Loc.428
     /tmp/ccnyktCV.s:1768   .text.clear_keyboard:0000000000000004 .Loc.429
     /tmp/ccnyktCV.s:1771   .text.clear_keyboard:0000000000000008 L0
     /tmp/ccnyktCV.s:1777   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccnyktCV.s:1780   .text.is_tap_key:0000000000000000 .Loc.430
     /tmp/ccnyktCV.s:1781   .text.is_tap_key:0000000000000000 L0
     /tmp/ccnyktCV.s:1786   .text.is_tap_key:0000000000000000 .Loc.431
     /tmp/ccnyktCV.s:1787   .text.is_tap_key:0000000000000000 .Loc.432
     /tmp/ccnyktCV.s:1790   .text.is_tap_key:0000000000000004 .Loc.433
     /tmp/ccnyktCV.s:1793   .text.is_tap_key:0000000000000006 .Loc.434
     /tmp/ccnyktCV.s:1794   .text.is_tap_key:0000000000000006 .Loc.435
     /tmp/ccnyktCV.s:1798   .text.is_tap_key:000000000000000c .Loc.436
     /tmp/ccnyktCV.s:1808   .text.is_tap_key:000000000000001c .Loc.437
     /tmp/ccnyktCV.s:1812   .text.is_tap_key:0000000000000020 .Loc.438
     /tmp/ccnyktCV.s:1815   .text.is_tap_key:0000000000000024 .Loc.439
     /tmp/ccnyktCV.s:1816   .text.is_tap_key:0000000000000024 .Loc.440
     /tmp/ccnyktCV.s:1824   .text.is_tap_key:000000000000002e .Loc.441
     /tmp/ccnyktCV.s:1830   .text.is_tap_key:0000000000000036 .Loc.442
     /tmp/ccnyktCV.s:1831   .text.is_tap_key:0000000000000036 .Loc.443
     /tmp/ccnyktCV.s:1834   .text.is_tap_key:0000000000000038 .Loc.444
     /tmp/ccnyktCV.s:1841   .text.is_tap_key:0000000000000040 .Loc.445
     /tmp/ccnyktCV.s:1851   .text.is_tap_key:000000000000004c .Loc.446
     /tmp/ccnyktCV.s:1855   .text.is_tap_key:000000000000004e .Loc.447
     /tmp/ccnyktCV.s:1858   .text.is_tap_key:0000000000000050 .Loc.448
     /tmp/ccnyktCV.s:1862   .text.is_tap_key:0000000000000054 .Loc.449
     /tmp/ccnyktCV.s:1864   .text.is_tap_key:0000000000000056 L0
     /tmp/ccnyktCV.s:1870   .text.debug_event:0000000000000000 debug_event
     /tmp/ccnyktCV.s:1872   .text.debug_event:0000000000000000 .Loc.450
     /tmp/ccnyktCV.s:1873   .text.debug_event:0000000000000000 L0
     /tmp/ccnyktCV.s:1882   .text.debug_event:0000000000000006 L0
     /tmp/ccnyktCV.s:1883   .text.debug_event:0000000000000008 L0
     /tmp/ccnyktCV.s:1895   .text.debug_event:000000000000000e .Loc.451
     /tmp/ccnyktCV.s:1897   .text.debug_event:000000000000000e .Loc.452
     /tmp/ccnyktCV.s:1906   .text.debug_event:000000000000001e L0
     /tmp/ccnyktCV.s:1912   .text.debug_record:0000000000000000 debug_record
     /tmp/ccnyktCV.s:1914   .text.debug_record:0000000000000000 .Loc.453
     /tmp/ccnyktCV.s:1915   .text.debug_record:0000000000000000 L0
     /tmp/ccnyktCV.s:1924   .text.debug_record:0000000000000006 L0
     /tmp/ccnyktCV.s:1925   .text.debug_record:0000000000000008 L0
     /tmp/ccnyktCV.s:1926   .text.debug_record:000000000000000a L0
     /tmp/ccnyktCV.s:1937   .text.debug_record:000000000000000e .Loc.454
     /tmp/ccnyktCV.s:1938   .text.debug_record:000000000000000e .Loc.455
     /tmp/ccnyktCV.s:1940   .text.debug_record:000000000000000e .Loc.456
     /tmp/ccnyktCV.s:1950   .text.debug_record:0000000000000020 L0
     /tmp/ccnyktCV.s:1956   .text.debug_action:0000000000000000 debug_action
     /tmp/ccnyktCV.s:1959   .text.debug_action:0000000000000000 .Loc.457
     /tmp/ccnyktCV.s:1960   .text.debug_action:0000000000000000 L0
     /tmp/ccnyktCV.s:1965   .text.debug_action:0000000000000000 .Loc.458
     /tmp/ccnyktCV.s:1966   .text.debug_action:0000000000000000 .Loc.459
     /tmp/ccnyktCV.s:1968   .text.debug_action:0000000000000000 .Loc.460
     /tmp/ccnyktCV.s:1970   .text.debug_action:0000000000000002 L0
     /tmp/ccnyktCV.s:86     .text.action_exec:0000000000000052 L0
     /tmp/ccnyktCV.s:108    .text.process_record_quantum:0000000000000004 L0
     /tmp/ccnyktCV.s:303    .text.register_code:00000000000000c4 L0
     /tmp/ccnyktCV.s:461    .text.unregister_code:000000000000009e L0
     /tmp/ccnyktCV.s:490    .text.register_mods:000000000000000e L0
     /tmp/ccnyktCV.s:519    .text.unregister_mods:000000000000000e L0
     /tmp/ccnyktCV.s:1574   .text.process_action:00000000000004ae L0
     /tmp/ccnyktCV.s:1684   .text.process_record:0000000000000054 L0
     /tmp/ccnyktCV.s:1712   .text.process_record_nocache:0000000000000010 L0
     /tmp/ccnyktCV.s:1754   .text.clear_keyboard_but_mods:0000000000000028 L0
     /tmp/ccnyktCV.s:1774   .text.clear_keyboard:0000000000000008 L0
     /tmp/ccnyktCV.s:1867   .text.is_tap_key:0000000000000056 L0
     /tmp/ccnyktCV.s:1909   .text.debug_event:000000000000001e L0
     /tmp/ccnyktCV.s:1953   .text.debug_record:0000000000000020 L0
     /tmp/ccnyktCV.s:1973   .text.debug_action:0000000000000002 L0
                     .debug_frame:0000000000000000 L0
     /tmp/ccnyktCV.s:58     .text.action_exec:000000000000002a .L01
     /tmp/ccnyktCV.s:296    .text.register_code:00000000000000c2 .L3
     /tmp/ccnyktCV.s:153    .text.register_code:0000000000000026 .L6
     /tmp/ccnyktCV.s:176    .text.register_code:0000000000000040 .L8
     /tmp/ccnyktCV.s:145    .text.register_code:000000000000001e .L16
     /tmp/ccnyktCV.s:199    .text.register_code:000000000000005a .L9
     /tmp/ccnyktCV.s:213    .text.register_code:0000000000000068 .L10
     /tmp/ccnyktCV.s:149    .text.register_code:0000000000000022 .L17
     /tmp/ccnyktCV.s:238    .text.register_code:0000000000000084 .L11
     /tmp/ccnyktCV.s:229    .text.register_code:0000000000000078 .L21
     /tmp/ccnyktCV.s:227    .text.register_code:0000000000000076 .L11
     /tmp/ccnyktCV.s:275    .text.register_code:00000000000000a8 .L12
     /tmp/ccnyktCV.s:259    .text.register_code:000000000000009c .L14
     /tmp/ccnyktCV.s:267    .text.register_code:00000000000000a2 .L15
     /tmp/ccnyktCV.s:255    .text.register_code:0000000000000098 .L13
     /tmp/ccnyktCV.s:454    .text.unregister_code:000000000000009c .L18
     /tmp/ccnyktCV.s:348    .text.unregister_code:0000000000000026 .L21
     /tmp/ccnyktCV.s:371    .text.unregister_code:0000000000000040 .L23
     /tmp/ccnyktCV.s:340    .text.unregister_code:000000000000001e .L37
     /tmp/ccnyktCV.s:394    .text.unregister_code:000000000000005a .L24
     /tmp/ccnyktCV.s:425    .text.unregister_code:000000000000007e .L26
     /tmp/ccnyktCV.s:416    .text.unregister_code:0000000000000072 .L22
     /tmp/ccnyktCV.s:414    .text.unregister_code:0000000000000070 .L12
     /tmp/ccnyktCV.s:344    .text.unregister_code:0000000000000022 .L38
     /tmp/ccnyktCV.s:439    .text.unregister_code:000000000000008e .L27
     /tmp/ccnyktCV.s:483    .text.register_mods:000000000000000c .L39
     /tmp/ccnyktCV.s:512    .text.unregister_mods:000000000000000c .L41
     /tmp/ccnyktCV.s:632    .text.process_action:0000000000000044 .L44
     /tmp/ccnyktCV.s:613    .jumptables.gcc.process_action:0000000000000000 .L49
     /tmp/ccnyktCV.s:596    .text.process_action:0000000000000032 .L46
     /tmp/ccnyktCV.s:600    .text.process_action:0000000000000034 .L45
     /tmp/ccnyktCV.s:679    .text.process_action:0000000000000078 .L57
     /tmp/ccnyktCV.s:727    .text.process_action:00000000000000a8 .L58
     /tmp/ccnyktCV.s:710    .text.process_action:0000000000000098 .L142
     /tmp/ccnyktCV.s:700    .text.process_action:000000000000008e .L60
     /tmp/ccnyktCV.s:720    .text.process_action:00000000000000a0 .L61
     /tmp/ccnyktCV.s:756    .text.process_action:00000000000000ca .L47
     /tmp/ccnyktCV.s:705    .text.process_action:0000000000000094 .L62
     /tmp/ccnyktCV.s:747    .text.process_action:00000000000000c0 .L64
     /tmp/ccnyktCV.s:811    .text.process_action:000000000000010e .L65
     /tmp/ccnyktCV.s:1547   .text.process_action:0000000000000490 .L43
     /tmp/ccnyktCV.s:752    .text.process_action:00000000000000c6 .L66
     /tmp/ccnyktCV.s:842    .text.process_action:000000000000012a .L67
     /tmp/ccnyktCV.s:871    .text.process_action:000000000000014a .L68
     /tmp/ccnyktCV.s:933    .text.process_action:000000000000017e .L69
     /tmp/ccnyktCV.s:951    .text.process_action:0000000000000192 .L77
     /tmp/ccnyktCV.s:880    .text.process_action:0000000000000152 .L143
     /tmp/ccnyktCV.s:902    .text.process_action:0000000000000166 .L71
     /tmp/ccnyktCV.s:890    .text.process_action:000000000000015a .L72
     /tmp/ccnyktCV.s:884    .text.process_action:0000000000000154 .L139
     /tmp/ccnyktCV.s:925    .text.process_action:0000000000000176 .L74
     /tmp/ccnyktCV.s:907    .text.process_action:000000000000016a .L148
     /tmp/ccnyktCV.s:944    .text.process_action:000000000000018a .L76
     /tmp/ccnyktCV.s:912    .text.process_action:000000000000016e .L80
     /tmp/ccnyktCV.s:993    .text.process_action:00000000000001c4 .L81
     /tmp/ccnyktCV.s:989    .text.process_action:00000000000001be .L145
     /tmp/ccnyktCV.s:1005   .text.process_action:00000000000001d2 .L136
     /tmp/ccnyktCV.s:1025   .text.process_action:00000000000001e8 .L85
     /tmp/ccnyktCV.s:1020   .text.process_action:00000000000001e2 .L137
     /tmp/ccnyktCV.s:1183   .text.process_action:00000000000002c2 .L86
     /tmp/ccnyktCV.s:1071   .text.process_action:0000000000000220 .L23
     /tmp/ccnyktCV.s:1066   .text.process_action:0000000000000218 .L13
     /tmp/ccnyktCV.s:1106   .text.process_action:0000000000000256 .L87
     /tmp/ccnyktCV.s:1098   .text.process_action:000000000000024a .L24
     /tmp/ccnyktCV.s:1093   .text.process_action:0000000000000242 .L14
     /tmp/ccnyktCV.s:1145   .text.process_action:000000000000028e .L88
     /tmp/ccnyktCV.s:1168   .text.process_action:00000000000002b0 .L89
     /tmp/ccnyktCV.s:1172   .text.process_action:00000000000002b4 .L147
     /tmp/ccnyktCV.s:1299   .text.process_action:0000000000000362 .L91
     /tmp/ccnyktCV.s:1225   .text.process_action:00000000000002f4 .L25
     /tmp/ccnyktCV.s:1220   .text.process_action:00000000000002ec .L15
     /tmp/ccnyktCV.s:1260   .text.process_action:000000000000032a .L93
     /tmp/ccnyktCV.s:1252   .text.process_action:000000000000031e .L26
     /tmp/ccnyktCV.s:1247   .text.process_action:0000000000000316 .L16
     /tmp/ccnyktCV.s:1308   .text.process_action:000000000000036a .L94
     /tmp/ccnyktCV.s:1332   .text.process_action:000000000000038c .L95
     /tmp/ccnyktCV.s:1336   .text.process_action:0000000000000390 .L146
     /tmp/ccnyktCV.s:1195   .text.process_action:00000000000002ce .L92
     /tmp/ccnyktCV.s:1466   .text.process_action:0000000000000430 .L97
     /tmp/ccnyktCV.s:1379   .text.process_action:00000000000003c8 .L98
     /tmp/ccnyktCV.s:1430   .text.process_action:000000000000040a .L99
     /tmp/ccnyktCV.s:1453   .text.process_action:0000000000000422 .L100
     /tmp/ccnyktCV.s:1405   .text.process_action:00000000000003ec .L133
     /tmp/ccnyktCV.s:1510   .text.process_action:0000000000000466 .L112
     /tmp/ccnyktCV.s:1461   .text.process_action:000000000000042a .L138
     /tmp/ccnyktCV.s:1479   .text.process_action:000000000000043e .L103
     /tmp/ccnyktCV.s:1364   .text.process_action:00000000000003b8 .L101
     /tmp/ccnyktCV.s:1495   .text.process_action:0000000000000452 .L111
     /tmp/ccnyktCV.s:1423   .text.process_action:0000000000000402 .L105
     /tmp/ccnyktCV.s:917    .text.process_action:0000000000000170 .L141
     /tmp/ccnyktCV.s:1448   .text.process_action:000000000000041e .L106
     /tmp/ccnyktCV.s:1438   .text.process_action:0000000000000410 .L135
     /tmp/ccnyktCV.s:1474   .text.process_action:0000000000000438 .L144
     /tmp/ccnyktCV.s:1490   .text.process_action:000000000000044c .L110
     /tmp/ccnyktCV.s:957    .text.process_action:0000000000000196 .L140
     /tmp/ccnyktCV.s:664    .text.process_action:000000000000006a .L56
     /tmp/ccnyktCV.s:819    .text.process_action:0000000000000116 .L55
     /tmp/ccnyktCV.s:966    .text.process_action:000000000000019e .L54
     /tmp/ccnyktCV.s:1009   .text.process_action:00000000000001d8 .L53
     /tmp/ccnyktCV.s:1030   .text.process_action:00000000000001ee .L52
     /tmp/ccnyktCV.s:1347   .text.process_action:000000000000039e .L51
     /tmp/ccnyktCV.s:1520   .text.process_action:0000000000000470 .L50
     /tmp/ccnyktCV.s:1534   .text.process_action:0000000000000482 .L48
     /tmp/ccnyktCV.s:1671   .text.process_record:000000000000004a .L151
     /tmp/ccnyktCV.s:1823   .text.is_tap_key:000000000000002e .L165
     /tmp/ccnyktCV.s:1840   .text.is_tap_key:0000000000000040 .L166
     /tmp/ccnyktCV.s:1811   .text.is_tap_key:0000000000000020 .L167
     /tmp/ccnyktCV.s:1807   .text.is_tap_key:000000000000001c .L192
     /tmp/ccnyktCV.s:1849   .text.is_tap_key:000000000000004c .L168
     /tmp/ccnyktCV.s:1857   .text.is_tap_key:0000000000000050 .L194
     /tmp/ccnyktCV.s:1829   .text.is_tap_key:0000000000000036 .L170
     /tmp/ccnyktCV.s:1861   .text.is_tap_key:0000000000000054 .L176
     /tmp/ccnyktCV.s:1854   .text.is_tap_key:000000000000004e .L171
     /tmp/ccnyktCV.s:5621   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccnyktCV.s:7765   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccnyktCV.s:7823   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccnyktCV.s:1958   .text.debug_action:0000000000000000 .LFB121
     /tmp/ccnyktCV.s:1971   .text.debug_action:0000000000000002 .LFE121
     /tmp/ccnyktCV.s:1913   .text.debug_record:0000000000000000 .LFB120
     /tmp/ccnyktCV.s:1951   .text.debug_record:0000000000000020 .LFE120
     /tmp/ccnyktCV.s:6539   .debug_loc:0000000000000000 .LLST25
     /tmp/ccnyktCV.s:1871   .text.debug_event:0000000000000000 .LFB119
     /tmp/ccnyktCV.s:1907   .text.debug_event:000000000000001e .LFE119
     /tmp/ccnyktCV.s:6571   .debug_loc:0000000000000048 .LLST24
     /tmp/ccnyktCV.s:1779   .text.is_tap_key:0000000000000000 .LFB118
     /tmp/ccnyktCV.s:1865   .text.is_tap_key:0000000000000056 .LFE118
     /tmp/ccnyktCV.s:6606   .debug_loc:0000000000000092 .LLST22
     /tmp/ccnyktCV.s:6603   .debug_loc:0000000000000090 .LVUS22
     /tmp/ccnyktCV.s:6629   .debug_loc:00000000000000b4 .LLST23
     /tmp/ccnyktCV.s:6618   .debug_loc:00000000000000aa .LVUS23
     /tmp/ccnyktCV.s:1789   .text.is_tap_key:0000000000000004 .LVL177
     /tmp/ccnyktCV.s:1716   .text.clear_keyboard_but_mods:0000000000000000 .LFB117
     /tmp/ccnyktCV.s:1752   .text.clear_keyboard_but_mods:0000000000000028 .LFE117
     /tmp/ccnyktCV.s:1725   .text.clear_keyboard_but_mods:0000000000000004 .LVL166
     /tmp/ccnyktCV.s:1728   .text.clear_keyboard_but_mods:0000000000000008 .LVL167
     /tmp/ccnyktCV.s:1731   .text.clear_keyboard_but_mods:000000000000000c .LVL168
     /tmp/ccnyktCV.s:1734   .text.clear_keyboard_but_mods:0000000000000010 .LVL169
     /tmp/ccnyktCV.s:1737   .text.clear_keyboard_but_mods:0000000000000014 .LVL170
     /tmp/ccnyktCV.s:1740   .text.clear_keyboard_but_mods:0000000000000018 .LVL171
     /tmp/ccnyktCV.s:1745   .text.clear_keyboard_but_mods:0000000000000020 .LVL172
     /tmp/ccnyktCV.s:1750   .text.clear_keyboard_but_mods:0000000000000028 .LVL173
     /tmp/ccnyktCV.s:1758   .text.clear_keyboard:0000000000000000 .LFB116
     /tmp/ccnyktCV.s:1772   .text.clear_keyboard:0000000000000008 .LFE116
     /tmp/ccnyktCV.s:1767   .text.clear_keyboard:0000000000000004 .LVL174
     /tmp/ccnyktCV.s:1770   .text.clear_keyboard:0000000000000008 .LVL175
     /tmp/ccnyktCV.s:495    .text.unregister_mods:0000000000000000 .LFB115
     /tmp/ccnyktCV.s:517    .text.unregister_mods:000000000000000e .LFE115
     /tmp/ccnyktCV.s:6685   .debug_loc:0000000000000113 .LLST5
     /tmp/ccnyktCV.s:6678   .debug_loc:000000000000010d .LVUS5
     /tmp/ccnyktCV.s:508    .text.unregister_mods:0000000000000008 .LVL57
     /tmp/ccnyktCV.s:511    .text.unregister_mods:000000000000000c .LVL58
     /tmp/ccnyktCV.s:466    .text.register_mods:0000000000000000 .LFB114
     /tmp/ccnyktCV.s:488    .text.register_mods:000000000000000e .LFE114
     /tmp/ccnyktCV.s:6710   .debug_loc:0000000000000145 .LLST4
     /tmp/ccnyktCV.s:6703   .debug_loc:000000000000013f .LVUS4
     /tmp/ccnyktCV.s:479    .text.register_mods:0000000000000008 .LVL54
     /tmp/ccnyktCV.s:482    .text.register_mods:000000000000000c .LVL55
     /tmp/ccnyktCV.s:308    .text.unregister_code:0000000000000000 .LFB113
     /tmp/ccnyktCV.s:459    .text.unregister_code:000000000000009e .LFE113
     /tmp/ccnyktCV.s:6755   .debug_loc:000000000000018b .LLST3
     /tmp/ccnyktCV.s:6728   .debug_loc:0000000000000171 .LVUS3
     /tmp/ccnyktCV.s:327    .text.unregister_code:000000000000000e .LVL32
     /tmp/ccnyktCV.s:334    .text.unregister_code:0000000000000018 .LVL33
     /tmp/ccnyktCV.s:337    .text.unregister_code:000000000000001c .LVL34
     /tmp/ccnyktCV.s:343    .text.unregister_code:0000000000000022 .LVL35
     /tmp/ccnyktCV.s:347    .text.unregister_code:0000000000000026 .LVL36
     /tmp/ccnyktCV.s:356    .text.unregister_code:000000000000002e .LVL37
     /tmp/ccnyktCV.s:363    .text.unregister_code:0000000000000038 .LVL38
     /tmp/ccnyktCV.s:366    .text.unregister_code:000000000000003c .LVL39
     /tmp/ccnyktCV.s:379    .text.unregister_code:0000000000000048 .LVL41
     /tmp/ccnyktCV.s:386    .text.unregister_code:0000000000000052 .LVL42
     /tmp/ccnyktCV.s:389    .text.unregister_code:0000000000000056 .LVL43
     /tmp/ccnyktCV.s:421    .text.unregister_code:000000000000007c .LVL46
     /tmp/ccnyktCV.s:438    .text.unregister_code:000000000000008e .LVL49
     /tmp/ccnyktCV.s:453    .text.unregister_code:000000000000009c .LVL52
     /tmp/ccnyktCV.s:113    .text.register_code:0000000000000000 .LFB112
     /tmp/ccnyktCV.s:301    .text.register_code:00000000000000c4 .LFE112
     /tmp/ccnyktCV.s:6869   .debug_loc:000000000000025d .LLST2
     /tmp/ccnyktCV.s:6830   .debug_loc:0000000000000237 .LVUS2
     /tmp/ccnyktCV.s:132    .text.register_code:000000000000000e .LVL4
     /tmp/ccnyktCV.s:139    .text.register_code:0000000000000018 .LVL5
     /tmp/ccnyktCV.s:142    .text.register_code:000000000000001c .LVL6
     /tmp/ccnyktCV.s:148    .text.register_code:0000000000000022 .LVL7
     /tmp/ccnyktCV.s:152    .text.register_code:0000000000000026 .LVL8
     /tmp/ccnyktCV.s:161    .text.register_code:000000000000002e .LVL9
     /tmp/ccnyktCV.s:168    .text.register_code:0000000000000038 .LVL10
     /tmp/ccnyktCV.s:171    .text.register_code:000000000000003c .LVL11
     /tmp/ccnyktCV.s:184    .text.register_code:0000000000000048 .LVL13
     /tmp/ccnyktCV.s:191    .text.register_code:0000000000000052 .LVL14
     /tmp/ccnyktCV.s:194    .text.register_code:0000000000000056 .LVL15
     /tmp/ccnyktCV.s:209    .text.register_code:0000000000000066 .LVL17
     /tmp/ccnyktCV.s:234    .text.register_code:0000000000000082 .LVL20
     /tmp/ccnyktCV.s:258    .text.register_code:000000000000009c .LVL23
     /tmp/ccnyktCV.s:295    .text.register_code:00000000000000c2 .LVL30
     /tmp/ccnyktCV.s:524    .text.process_action:0000000000000000 .LFB111
     /tmp/ccnyktCV.s:1572   .text.process_action:00000000000004ae .LFE111
     /tmp/ccnyktCV.s:6977   .debug_loc:0000000000000354 .LLST6
     /tmp/ccnyktCV.s:7056   .debug_loc:00000000000003f4 .LLST7
     /tmp/ccnyktCV.s:7045   .debug_loc:00000000000003ea .LVUS7
     /tmp/ccnyktCV.s:7105   .debug_loc:000000000000044c .LLST8
     /tmp/ccnyktCV.s:7100   .debug_loc:0000000000000448 .LVUS8
     /tmp/ccnyktCV.s:7137   .debug_loc:000000000000047e .LLST9
     /tmp/ccnyktCV.s:7126   .debug_loc:0000000000000474 .LVUS9
     /tmp/ccnyktCV.s:7169   .debug_loc:00000000000004c5 .LLST10
     /tmp/ccnyktCV.s:7162   .debug_loc:00000000000004bf .LVUS10
     /tmp/ccnyktCV.s:7208   .debug_loc:0000000000000505 .LLST11
     /tmp/ccnyktCV.s:7203   .debug_loc:0000000000000501 .LVUS11
     /tmp/ccnyktCV.s:7226   .debug_loc:0000000000000529 .LLST12
     /tmp/ccnyktCV.s:7219   .debug_loc:0000000000000523 .LVUS12
     /tmp/ccnyktCV.s:704    .text.process_action:0000000000000094 .LVL72
     /tmp/ccnyktCV.s:708    .text.process_action:0000000000000098 .LVL73
     /tmp/ccnyktCV.s:725    .text.process_action:00000000000000a6 .LVL76
     /tmp/ccnyktCV.s:731    .text.process_action:00000000000000ae .LVL77
     /tmp/ccnyktCV.s:751    .text.process_action:00000000000000c6 .LVL78
     /tmp/ccnyktCV.s:755    .text.process_action:00000000000000ca .LVL79
     /tmp/ccnyktCV.s:816    .text.process_action:0000000000000114 .LVL89
     /tmp/ccnyktCV.s:7248   .debug_loc:0000000000000558 .LLST13
     /tmp/ccnyktCV.s:7241   .debug_loc:0000000000000552 .LVUS13
     /tmp/ccnyktCV.s:887    .text.process_action:0000000000000158 .LVL93
     /tmp/ccnyktCV.s:900    .text.process_action:0000000000000164 .LVL95
     /tmp/ccnyktCV.s:910    .text.process_action:000000000000016e .LVL96
     /tmp/ccnyktCV.s:1042   .text.process_action:00000000000001fa .LBB13
     /tmp/ccnyktCV.s:1185   .text.process_action:00000000000002c2 .LBE13
     /tmp/ccnyktCV.s:7272   .debug_loc:0000000000000589 .LLST14
     /tmp/ccnyktCV.s:7263   .debug_loc:0000000000000581 .LVUS14
     /tmp/ccnyktCV.s:7332   .debug_loc:00000000000005e5 .LLST15
     /tmp/ccnyktCV.s:7325   .debug_loc:00000000000005df .LVUS15
     /tmp/ccnyktCV.s:1141   .text.process_action:000000000000028c .LVL112
     /tmp/ccnyktCV.s:1164   .text.process_action:00000000000002ae .LVL115
     /tmp/ccnyktCV.s:1171   .text.process_action:00000000000002b4 .LVL117
     /tmp/ccnyktCV.s:1179   .text.process_action:00000000000002c0 .LVL118
     /tmp/ccnyktCV.s:7389   .debug_loc:0000000000000637 .LLST16
     /tmp/ccnyktCV.s:7380   .debug_loc:000000000000062f .LVUS16
     /tmp/ccnyktCV.s:7449   .debug_loc:0000000000000693 .LLST17
     /tmp/ccnyktCV.s:7442   .debug_loc:000000000000068d .LVUS17
     /tmp/ccnyktCV.s:1295   .text.process_action:0000000000000360 .LVL125
     /tmp/ccnyktCV.s:1328   .text.process_action:000000000000038a .LVL129
     /tmp/ccnyktCV.s:1335   .text.process_action:0000000000000390 .LVL131
     /tmp/ccnyktCV.s:1343   .text.process_action:000000000000039c .LVL132
     /tmp/ccnyktCV.s:595    .text.process_action:0000000000000032 .LVL62
     /tmp/ccnyktCV.s:635    .text.process_action:0000000000000048 .LVL65
     /tmp/ccnyktCV.s:639    .text.process_action:000000000000004c .LVL66
     /tmp/ccnyktCV.s:652    .text.process_action:000000000000005e .LVL67
     /tmp/ccnyktCV.s:656    .text.process_action:0000000000000062 .LVL68
     /tmp/ccnyktCV.s:717    .text.process_action:000000000000009e .LVL74
     /tmp/ccnyktCV.s:766    .text.process_action:00000000000000d4 .LVL80
     /tmp/ccnyktCV.s:776    .text.process_action:00000000000000e0 .LVL81
     /tmp/ccnyktCV.s:778    .text.process_action:00000000000000e4 .LVL82
     /tmp/ccnyktCV.s:782    .text.process_action:00000000000000ea .LVL83
     /tmp/ccnyktCV.s:785    .text.process_action:00000000000000ee .LVL84
     /tmp/ccnyktCV.s:810    .text.process_action:000000000000010e .LVL88
     /tmp/ccnyktCV.s:922    .text.process_action:0000000000000174 .LVL98
     /tmp/ccnyktCV.s:964    .text.process_action:000000000000019c .LVL101
     /tmp/ccnyktCV.s:991    .text.process_action:00000000000001c2 .LVL102
     /tmp/ccnyktCV.s:1007   .text.process_action:00000000000001d6 .LVL103
     /tmp/ccnyktCV.s:1018   .text.process_action:00000000000001e2 .LVL104
     /tmp/ccnyktCV.s:1023   .text.process_action:00000000000001e6 .LVL105
     /tmp/ccnyktCV.s:1028   .text.process_action:00000000000001ec .LVL106
     /tmp/ccnyktCV.s:1398   .text.process_action:00000000000003e2 .LVL134
     /tmp/ccnyktCV.s:1403   .text.process_action:00000000000003ea .LVL135
     /tmp/ccnyktCV.s:1419   .text.process_action:00000000000003fe .LVL136
     /tmp/ccnyktCV.s:1426   .text.process_action:0000000000000406 .LVL137
     /tmp/ccnyktCV.s:1446   .text.process_action:000000000000041c .LVL138
     /tmp/ccnyktCV.s:1464   .text.process_action:000000000000042e .LVL139
     /tmp/ccnyktCV.s:1477   .text.process_action:000000000000043c .LVL140
     /tmp/ccnyktCV.s:1488   .text.process_action:000000000000044a .LVL141
     /tmp/ccnyktCV.s:1493   .text.process_action:0000000000000450 .LVL142
     /tmp/ccnyktCV.s:1499   .text.process_action:0000000000000458 .LVL143
     /tmp/ccnyktCV.s:1508   .text.process_action:0000000000000464 .LVL144
     /tmp/ccnyktCV.s:1529   .text.process_action:000000000000047c .LVL145
     /tmp/ccnyktCV.s:1531   .text.process_action:0000000000000480 .LVL146
     /tmp/ccnyktCV.s:1543   .text.process_action:000000000000048e .LVL147
     /tmp/ccnyktCV.s:1579   .text.process_record:0000000000000000 .LFB110
     /tmp/ccnyktCV.s:1682   .text.process_record:0000000000000054 .LFE110
     /tmp/ccnyktCV.s:7497   .debug_loc:00000000000006dd .LLST18
     /tmp/ccnyktCV.s:7543   .debug_loc:0000000000000732 .LLST19
     /tmp/ccnyktCV.s:7530   .debug_loc:0000000000000726 .LVUS19
     /tmp/ccnyktCV.s:1611   .text.process_record:000000000000000e .LBI16
     /tmp/ccnyktCV.s:1610   .text.process_record:000000000000000e .LBB16
     /tmp/ccnyktCV.s:1629   .text.process_record:000000000000001c .LBE16
     /tmp/ccnyktCV.s:7603   .debug_loc:000000000000079c .LLST20
     /tmp/ccnyktCV.s:7596   .debug_loc:0000000000000796 .LVUS20
     /tmp/ccnyktCV.s:1634   .text.process_record:0000000000000022 .LVL157
     /tmp/ccnyktCV.s:1644   .text.process_record:0000000000000030 .LVL158
     /tmp/ccnyktCV.s:1651   .text.process_record:0000000000000036 .LVL159
     /tmp/ccnyktCV.s:1655   .text.process_record:000000000000003a .LVL160
     /tmp/ccnyktCV.s:1670   .text.process_record:000000000000004a .LVL162
     /tmp/ccnyktCV.s:91     .text.process_record_quantum:0000000000000000 .LFB109
     /tmp/ccnyktCV.s:106    .text.process_record_quantum:0000000000000004 .LFE109
     /tmp/ccnyktCV.s:7650   .debug_loc:00000000000007e4 .LLST1
     /tmp/ccnyktCV.s:7645   .debug_loc:00000000000007e0 .LVUS1
     /tmp/ccnyktCV.s:1689   .text.process_record_nocache:0000000000000000 .LFB108
     /tmp/ccnyktCV.s:1710   .text.process_record_nocache:0000000000000010 .LFE108
     /tmp/ccnyktCV.s:7674   .debug_loc:000000000000080e .LLST21
     /tmp/ccnyktCV.s:7669   .debug_loc:000000000000080a .LVUS21
     /tmp/ccnyktCV.s:1702   .text.process_record_nocache:000000000000000a .LVL165
     /tmp/ccnyktCV.s:16     .text.action_exec:0000000000000000 .LFB107
     /tmp/ccnyktCV.s:84     .text.action_exec:0000000000000052 .LFE107
     /tmp/ccnyktCV.s:7693   .debug_loc:0000000000000834 .LLST0
     /tmp/ccnyktCV.s:82     .text.action_exec:0000000000000052 .LVL0
     /tmp/ccnyktCV.s:1917   .text.debug_record:0000000000000002 .LCFI22
     /tmp/ccnyktCV.s:1921   .text.debug_record:0000000000000004 .LCFI23
     /tmp/ccnyktCV.s:1927   .text.debug_record:000000000000000a .LCFI24
     /tmp/ccnyktCV.s:1931   .text.debug_record:000000000000000e .LCFI25
     /tmp/ccnyktCV.s:1875   .text.debug_event:0000000000000002 .LCFI18
     /tmp/ccnyktCV.s:1879   .text.debug_event:0000000000000004 .LCFI19
     /tmp/ccnyktCV.s:1885   .text.debug_event:000000000000000a .LCFI20
     /tmp/ccnyktCV.s:1889   .text.debug_event:000000000000000e .LCFI21
     /tmp/ccnyktCV.s:1778   .text.is_tap_key:0000000000000000 .LVL176
     /tmp/ccnyktCV.s:1792   .text.is_tap_key:0000000000000006 .LVL178
     /tmp/ccnyktCV.s:1822   .text.is_tap_key:000000000000002e .LVL179
     /tmp/ccnyktCV.s:1833   .text.is_tap_key:0000000000000038 .LVL180
     /tmp/ccnyktCV.s:1839   .text.is_tap_key:0000000000000040 .LVL181
     /tmp/ccnyktCV.s:1848   .text.is_tap_key:000000000000004c .LVL182
     /tmp/ccnyktCV.s:1853   .text.is_tap_key:000000000000004e .LVL183
     /tmp/ccnyktCV.s:494    .text.unregister_mods:0000000000000000 .LVL56
     /tmp/ccnyktCV.s:465    .text.register_mods:0000000000000000 .LVL53
     /tmp/ccnyktCV.s:307    .text.unregister_code:0000000000000000 .LVL31
     /tmp/ccnyktCV.s:370    .text.unregister_code:0000000000000040 .LVL40
     /tmp/ccnyktCV.s:393    .text.unregister_code:000000000000005a .LVL44
     /tmp/ccnyktCV.s:410    .text.unregister_code:000000000000006c .LVL45
     /tmp/ccnyktCV.s:424    .text.unregister_code:000000000000007e .LVL47
     /tmp/ccnyktCV.s:435    .text.unregister_code:000000000000008a .LVL48
     /tmp/ccnyktCV.s:443    .text.unregister_code:0000000000000090 .LVL50
     /tmp/ccnyktCV.s:450    .text.unregister_code:0000000000000098 .LVL51
     /tmp/ccnyktCV.s:112    .text.register_code:0000000000000000 .LVL3
     /tmp/ccnyktCV.s:175    .text.register_code:0000000000000040 .LVL12
     /tmp/ccnyktCV.s:198    .text.register_code:000000000000005a .LVL16
     /tmp/ccnyktCV.s:212    .text.register_code:0000000000000068 .LVL18
     /tmp/ccnyktCV.s:223    .text.register_code:0000000000000072 .LVL19
     /tmp/ccnyktCV.s:237    .text.register_code:0000000000000084 .LVL21
     /tmp/ccnyktCV.s:254    .text.register_code:0000000000000098 .LVL22
     /tmp/ccnyktCV.s:263    .text.register_code:00000000000000a0 .LVL24
     /tmp/ccnyktCV.s:266    .text.register_code:00000000000000a2 .LVL25
     /tmp/ccnyktCV.s:271    .text.register_code:00000000000000a6 .LVL26
     /tmp/ccnyktCV.s:274    .text.register_code:00000000000000a8 .LVL27
     /tmp/ccnyktCV.s:279    .text.register_code:00000000000000aa .LVL28
     /tmp/ccnyktCV.s:288    .text.register_code:00000000000000b6 .LVL29
     /tmp/ccnyktCV.s:529    .text.process_action:0000000000000002 .LCFI4
     /tmp/ccnyktCV.s:533    .text.process_action:0000000000000004 .LCFI5
     /tmp/ccnyktCV.s:537    .text.process_action:0000000000000006 .LCFI6
     /tmp/ccnyktCV.s:541    .text.process_action:0000000000000008 .LCFI7
     /tmp/ccnyktCV.s:545    .text.process_action:000000000000000a .LCFI8
     /tmp/ccnyktCV.s:549    .text.process_action:000000000000000c .LCFI9
     /tmp/ccnyktCV.s:553    .text.process_action:000000000000000e .LCFI10
     /tmp/ccnyktCV.s:557    .text.process_action:0000000000000010 .LCFI11
     /tmp/ccnyktCV.s:563    .text.process_action:0000000000000016 .LCFI12
     /tmp/ccnyktCV.s:567    .text.process_action:000000000000001a .LCFI13
     /tmp/ccnyktCV.s:523    .text.process_action:0000000000000000 .LVL59
     /tmp/ccnyktCV.s:802    .text.process_action:0000000000000106 .LVL86
     /tmp/ccnyktCV.s:1564   .text.process_action:00000000000004a8 .LVL150
     /tmp/ccnyktCV.s:631    .text.process_action:0000000000000044 .LVL64
     /tmp/ccnyktCV.s:577    .text.process_action:0000000000000020 .LVL60
     /tmp/ccnyktCV.s:599    .text.process_action:0000000000000034 .LVL63
     /tmp/ccnyktCV.s:661    .text.process_action:0000000000000068 .LVL69
     /tmp/ccnyktCV.s:805    .text.process_action:0000000000000108 .LVL87
     /tmp/ccnyktCV.s:1567   .text.process_action:00000000000004aa .LVL151
     /tmp/ccnyktCV.s:797    .text.process_action:0000000000000100 .LVL85
     /tmp/ccnyktCV.s:1559   .text.process_action:00000000000004a2 .LVL149
     /tmp/ccnyktCV.s:585    .text.process_action:0000000000000028 .LVL61
     /tmp/ccnyktCV.s:669    .text.process_action:000000000000006c .LVL70
     /tmp/ccnyktCV.s:818    .text.process_action:0000000000000116 .LVL90
     /tmp/ccnyktCV.s:1546   .text.process_action:0000000000000490 .LVL148
     /tmp/ccnyktCV.s:680    .text.process_action:0000000000000078 .LVL71
     /tmp/ccnyktCV.s:719    .text.process_action:00000000000000a0 .LVL75
     /tmp/ccnyktCV.s:843    .text.process_action:000000000000012a .LVL91
     /tmp/ccnyktCV.s:883    .text.process_action:0000000000000154 .LVL92
     /tmp/ccnyktCV.s:889    .text.process_action:000000000000015a .LVL94
     /tmp/ccnyktCV.s:916    .text.process_action:0000000000000170 .LVL97
     /tmp/ccnyktCV.s:924    .text.process_action:0000000000000176 .LVL99
     /tmp/ccnyktCV.s:956    .text.process_action:0000000000000196 .LVL100
     /tmp/ccnyktCV.s:1078   .text.process_action:000000000000022c .LVL108
     /tmp/ccnyktCV.s:1144   .text.process_action:000000000000028e .LVL113
     /tmp/ccnyktCV.s:1167   .text.process_action:00000000000002b0 .LVL116
     /tmp/ccnyktCV.s:1107   .text.process_action:0000000000000256 .LVL109
     /tmp/ccnyktCV.s:1138   .text.process_action:0000000000000288 .LVL111
     /tmp/ccnyktCV.s:1161   .text.process_action:00000000000002aa .LVL114
     /tmp/ccnyktCV.s:1232   .text.process_action:0000000000000300 .LVL121
     /tmp/ccnyktCV.s:1307   .text.process_action:000000000000036a .LVL127
     /tmp/ccnyktCV.s:1331   .text.process_action:000000000000038c .LVL130
     /tmp/ccnyktCV.s:1261   .text.process_action:000000000000032a .LVL122
     /tmp/ccnyktCV.s:1292   .text.process_action:000000000000035c .LVL124
     /tmp/ccnyktCV.s:1325   .text.process_action:0000000000000386 .LVL128
     /tmp/ccnyktCV.s:1584   .text.process_record:0000000000000002 .LCFI14
     /tmp/ccnyktCV.s:1588   .text.process_record:0000000000000004 .LCFI15
     /tmp/ccnyktCV.s:1592   .text.process_record:0000000000000006 .LCFI16
     /tmp/ccnyktCV.s:1596   .text.process_record:0000000000000008 .LCFI17
     /tmp/ccnyktCV.s:1578   .text.process_record:0000000000000000 .LVL152
     /tmp/ccnyktCV.s:1609   .text.process_record:000000000000000e .LVL154
     /tmp/ccnyktCV.s:1664   .text.process_record:0000000000000042 .LVL161
     /tmp/ccnyktCV.s:1676   .text.process_record:000000000000004e .LVL163
     /tmp/ccnyktCV.s:1606   .text.process_record:000000000000000c .LVL153
     /tmp/ccnyktCV.s:1622   .text.process_record:0000000000000018 .LVL155
     /tmp/ccnyktCV.s:1626   .text.process_record:000000000000001c .LVL156
     /tmp/ccnyktCV.s:90     .text.process_record_quantum:0000000000000000 .LVL1
     /tmp/ccnyktCV.s:101    .text.process_record_quantum:0000000000000002 .LVL2
     /tmp/ccnyktCV.s:1688   .text.process_record_nocache:0000000000000000 .LVL164
     /tmp/ccnyktCV.s:20     .text.action_exec:0000000000000002 .LCFI0
     /tmp/ccnyktCV.s:24     .text.action_exec:0000000000000004 .LCFI1
     /tmp/ccnyktCV.s:29     .text.action_exec:0000000000000008 .LCFI2
     /tmp/ccnyktCV.s:32     .text.action_exec:000000000000000a .LCFI3
     /tmp/ccnyktCV.s:2017   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccnyktCV.s:665    .text.process_action:000000000000006a .LBB6
     /tmp/ccnyktCV.s:712    .text.process_action:0000000000000098 .LBE6
     /tmp/ccnyktCV.s:721    .text.process_action:00000000000000a0 .LBB7
     /tmp/ccnyktCV.s:758    .text.process_action:00000000000000ca .LBE7
     /tmp/ccnyktCV.s:812    .text.process_action:000000000000010e .LBB8
     /tmp/ccnyktCV.s:821    .text.process_action:0000000000000116 .LBE8
     /tmp/ccnyktCV.s:825    .text.process_action:0000000000000116 .LBB10
     /tmp/ccnyktCV.s:830    .text.process_action:000000000000011c .LBE10
     /tmp/ccnyktCV.s:822    .text.process_action:0000000000000116 .LBB9
     /tmp/ccnyktCV.s:824    .text.process_action:0000000000000116 .LBE9
     /tmp/ccnyktCV.s:831    .text.process_action:000000000000011c .LBB11
     /tmp/ccnyktCV.s:919    .text.process_action:0000000000000170 .LBE11
     /tmp/ccnyktCV.s:926    .text.process_action:0000000000000176 .LBB12
     /tmp/ccnyktCV.s:959    .text.process_action:0000000000000196 .LBE12
     /tmp/ccnyktCV.s:1196   .text.process_action:00000000000002ce .LBB14
     /tmp/ccnyktCV.s:1301   .text.process_action:0000000000000362 .LBE14
     /tmp/ccnyktCV.s:1309   .text.process_action:000000000000036a .LBB15
     /tmp/ccnyktCV.s:1349   .text.process_action:000000000000039e .LBE15

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
is_oneshot_layer_active
__tablejump2__
clear_weak_mods
clear_oneshot_layer_state
add_weak_mods
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
set_oneshot_layer
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_copy_data
__do_clear_bss
