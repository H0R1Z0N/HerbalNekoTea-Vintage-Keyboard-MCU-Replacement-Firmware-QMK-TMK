   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.matrix_init_user,"ax",@progbits
  12               		.weak	matrix_init_user
  14               	matrix_init_user:
  15               	.LFB10:
  16               		.file 1 "quantum/matrix.c"
   1:quantum/matrix.c **** /*
   2:quantum/matrix.c **** Copyright 2012 Jun Wako
   3:quantum/matrix.c **** Copyright 2014 Jack Humbert
   4:quantum/matrix.c **** 
   5:quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   6:quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   7:quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   8:quantum/matrix.c **** (at your option) any later version.
   9:quantum/matrix.c **** 
  10:quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  11:quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/matrix.c **** GNU General Public License for more details.
  14:quantum/matrix.c **** 
  15:quantum/matrix.c **** You should have received a copy of the GNU General Public License
  16:quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/matrix.c **** */
  18:quantum/matrix.c **** #include <stdint.h>
  19:quantum/matrix.c **** #include <stdbool.h>
  20:quantum/matrix.c **** #if defined(__AVR__)
  21:quantum/matrix.c **** #include <avr/io.h>
  22:quantum/matrix.c **** #endif
  23:quantum/matrix.c **** #include "wait.h"
  24:quantum/matrix.c **** #include "print.h"
  25:quantum/matrix.c **** #include "debug.h"
  26:quantum/matrix.c **** #include "util.h"
  27:quantum/matrix.c **** #include "matrix.h"
  28:quantum/matrix.c **** #include "timer.h"
  29:quantum/matrix.c **** 
  30:quantum/matrix.c **** 
  31:quantum/matrix.c **** /* Set 0 if debouncing isn't needed */
  32:quantum/matrix.c **** 
  33:quantum/matrix.c **** #ifndef DEBOUNCING_DELAY
  34:quantum/matrix.c **** #   define DEBOUNCING_DELAY 5
  35:quantum/matrix.c **** #endif
  36:quantum/matrix.c **** 
  37:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
  38:quantum/matrix.c ****     static uint16_t debouncing_time;
  39:quantum/matrix.c ****     static bool debouncing = false;
  40:quantum/matrix.c **** #endif
  41:quantum/matrix.c **** 
  42:quantum/matrix.c **** #if (MATRIX_COLS <= 8)
  43:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 01234567\n")
  44:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse8(matrix_get_row(row))
  45:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop(matrix[i])
  46:quantum/matrix.c **** #    define ROW_SHIFTER ((uint8_t)1)
  47:quantum/matrix.c **** #elif (MATRIX_COLS <= 16)
  48:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF\n")
  49:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse16(matrix_get_row(row))
  50:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop16(matrix[i])
  51:quantum/matrix.c **** #    define ROW_SHIFTER ((uint16_t)1)
  52:quantum/matrix.c **** #elif (MATRIX_COLS <= 32)
  53:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  54:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse32(matrix_get_row(row))
  55:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop32(matrix[i])
  56:quantum/matrix.c **** #    define ROW_SHIFTER  ((uint32_t)1)
  57:quantum/matrix.c **** #endif
  58:quantum/matrix.c **** 
  59:quantum/matrix.c **** #ifdef MATRIX_MASKED
  60:quantum/matrix.c ****     extern const matrix_row_t matrix_mask[];
  61:quantum/matrix.c **** #endif
  62:quantum/matrix.c **** 
  63:quantum/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  64:quantum/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  65:quantum/matrix.c **** 
  66:quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  67:quantum/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  68:quantum/matrix.c **** 
  69:quantum/matrix.c **** static matrix_row_t matrix_raw[MATRIX_ROWS];
  70:quantum/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  71:quantum/matrix.c **** 
  72:quantum/matrix.c **** 
  73:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
  74:quantum/matrix.c ****     static void init_cols(void);
  75:quantum/matrix.c ****     static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row);
  76:quantum/matrix.c ****     static void unselect_rows(void);
  77:quantum/matrix.c ****     static void select_row(uint8_t row);
  78:quantum/matrix.c ****     static void unselect_row(uint8_t row);
  79:quantum/matrix.c **** #else // ROW2COL
  80:quantum/matrix.c ****     static void init_rows(void);
  81:quantum/matrix.c ****     static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col);
  82:quantum/matrix.c ****     static void unselect_cols(void);
  83:quantum/matrix.c ****     static void unselect_col(uint8_t col);
  84:quantum/matrix.c ****     static void select_col(uint8_t col);
  85:quantum/matrix.c **** #endif
  86:quantum/matrix.c **** 
  87:quantum/matrix.c **** __attribute__ ((weak))
  88:quantum/matrix.c **** void matrix_init_quantum(void) {
  89:quantum/matrix.c ****     matrix_init_kb();
  90:quantum/matrix.c **** }
  91:quantum/matrix.c **** 
  92:quantum/matrix.c **** __attribute__ ((weak))
  93:quantum/matrix.c **** void matrix_scan_quantum(void) {
  94:quantum/matrix.c ****     matrix_scan_kb();
  95:quantum/matrix.c **** }
  96:quantum/matrix.c **** 
  97:quantum/matrix.c **** __attribute__ ((weak))
  98:quantum/matrix.c **** void matrix_init_kb(void) {
  99:quantum/matrix.c ****     matrix_init_user();
 100:quantum/matrix.c **** }
 101:quantum/matrix.c **** 
 102:quantum/matrix.c **** __attribute__ ((weak))
 103:quantum/matrix.c **** void matrix_scan_kb(void) {
 104:quantum/matrix.c ****     matrix_scan_user();
 105:quantum/matrix.c **** }
 106:quantum/matrix.c **** 
 107:quantum/matrix.c **** __attribute__ ((weak))
 108:quantum/matrix.c **** void matrix_init_user(void) {
  17               		.loc 1 108 29 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 109:quantum/matrix.c **** }
  23               		.loc 1 109 1 view .LVU1
  24               	/* epilogue start */
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE10:
  29               		.set	matrix_init_user.localalias,matrix_init_user
  30               		.section	.text.matrix_init_kb,"ax",@progbits
  31               		.weak	matrix_init_kb
  33               	matrix_init_kb:
  34               	.LFB8:
  98:quantum/matrix.c ****     matrix_init_user();
  35               		.loc 1 98 27 view -0
  36               		.cfi_startproc
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  99:quantum/matrix.c **** }
  41               		.loc 1 99 5 view .LVU3
  42 0000 0C94 0000 		jmp matrix_init_user
  43               	.LVL0:
  44               		.cfi_endproc
  45               	.LFE8:
  47               		.section	.text.matrix_init_quantum,"ax",@progbits
  48               		.weak	matrix_init_quantum
  50               	matrix_init_quantum:
  51               	.LFB6:
  88:quantum/matrix.c ****     matrix_init_kb();
  52               		.loc 1 88 32 view -0
  53               		.cfi_startproc
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
  89:quantum/matrix.c **** }
  58               		.loc 1 89 5 view .LVU5
  59 0000 0C94 0000 		jmp matrix_init_kb
  60               	.LVL1:
  61               		.cfi_endproc
  62               	.LFE6:
  64               		.section	.text.matrix_scan_user,"ax",@progbits
  65               		.weak	matrix_scan_user
  67               	matrix_scan_user:
  68               	.LFB27:
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74               	/* epilogue start */
  75 0000 0895      		ret
  76               		.cfi_endproc
  77               	.LFE27:
  79               		.section	.text.matrix_scan_kb,"ax",@progbits
  80               		.weak	matrix_scan_kb
  82               	matrix_scan_kb:
  83               	.LFB9:
 103:quantum/matrix.c ****     matrix_scan_user();
  84               		.loc 1 103 27 view -0
  85               		.cfi_startproc
  86               	/* prologue: function */
  87               	/* frame size = 0 */
  88               	/* stack size = 0 */
  89               	.L__stack_usage = 0
 104:quantum/matrix.c **** }
  90               		.loc 1 104 5 view .LVU7
  91 0000 0C94 0000 		jmp matrix_scan_user
  92               	.LVL2:
  93               		.cfi_endproc
  94               	.LFE9:
  96               		.section	.text.matrix_scan_quantum,"ax",@progbits
  97               		.weak	matrix_scan_quantum
  99               	matrix_scan_quantum:
 100               	.LFB7:
  93:quantum/matrix.c ****     matrix_scan_kb();
 101               		.loc 1 93 32 view -0
 102               		.cfi_startproc
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
  94:quantum/matrix.c **** }
 107               		.loc 1 94 5 view .LVU9
 108 0000 0C94 0000 		jmp matrix_scan_kb
 109               	.LVL3:
 110               		.cfi_endproc
 111               	.LFE7:
 113               		.section	.text.matrix_rows,"ax",@progbits
 114               	.global	matrix_rows
 116               	matrix_rows:
 117               	.LFB12:
 110:quantum/matrix.c **** 
 111:quantum/matrix.c **** __attribute__ ((weak))
 112:quantum/matrix.c **** void matrix_scan_user(void) {
 113:quantum/matrix.c **** }
 114:quantum/matrix.c **** 
 115:quantum/matrix.c **** inline
 116:quantum/matrix.c **** uint8_t matrix_rows(void) {
 118               		.loc 1 116 27 view -0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
 117:quantum/matrix.c ****     return MATRIX_ROWS;
 124               		.loc 1 117 5 view .LVU11
 118:quantum/matrix.c **** }
 125               		.loc 1 118 1 is_stmt 0 view .LVU12
 126 0000 83E1      		ldi r24,lo8(19)
 127               	/* epilogue start */
 128 0002 0895      		ret
 129               		.cfi_endproc
 130               	.LFE12:
 132               		.section	.text.matrix_cols,"ax",@progbits
 133               	.global	matrix_cols
 135               	matrix_cols:
 136               	.LFB13:
 119:quantum/matrix.c **** 
 120:quantum/matrix.c **** inline
 121:quantum/matrix.c **** uint8_t matrix_cols(void) {
 137               		.loc 1 121 27 is_stmt 1 view -0
 138               		.cfi_startproc
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
 122:quantum/matrix.c ****     return MATRIX_COLS;
 143               		.loc 1 122 5 view .LVU14
 123:quantum/matrix.c **** }
 144               		.loc 1 123 1 is_stmt 0 view .LVU15
 145 0000 88E0      		ldi r24,lo8(8)
 146               	/* epilogue start */
 147 0002 0895      		ret
 148               		.cfi_endproc
 149               	.LFE13:
 151               		.section	.text.matrix_init,"ax",@progbits
 152               	.global	matrix_init
 154               	matrix_init:
 155               	.LFB14:
 124:quantum/matrix.c **** 
 125:quantum/matrix.c **** // void matrix_power_up(void) {
 126:quantum/matrix.c **** // #if (DIODE_DIRECTION == COL2ROW)
 127:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 128:quantum/matrix.c **** //         /* DDRxn */
 129:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 1) |= _BV(row_pins[r] & 0xF);
 130:quantum/matrix.c **** //         toggle_row(r);
 131:quantum/matrix.c **** //     }
 132:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 133:quantum/matrix.c **** //         /* PORTxn */
 134:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 2) |= _BV(col_pins[c] & 0xF);
 135:quantum/matrix.c **** //     }
 136:quantum/matrix.c **** // #else
 137:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 138:quantum/matrix.c **** //         /* DDRxn */
 139:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 1) |= _BV(col_pins[c] & 0xF);
 140:quantum/matrix.c **** //         toggle_col(c);
 141:quantum/matrix.c **** //     }
 142:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 143:quantum/matrix.c **** //         /* PORTxn */
 144:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 2) |= _BV(row_pins[r] & 0xF);
 145:quantum/matrix.c **** //     }
 146:quantum/matrix.c **** // #endif
 147:quantum/matrix.c **** // }
 148:quantum/matrix.c **** 
 149:quantum/matrix.c **** void matrix_init(void) {
 156               		.loc 1 149 24 is_stmt 1 view -0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 150:quantum/matrix.c **** 
 151:quantum/matrix.c ****     // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
 152:quantum/matrix.c ****     #if  (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) || defined(__AVR_ATmega32U4_
 153:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 162               		.loc 1 153 9 view .LVU17
 163               		.loc 1 153 15 is_stmt 0 view .LVU18
 164 0000 85B7      		in r24,0x35
 165 0002 8068      		ori r24,lo8(-128)
 166 0004 85BF      		out 0x35,r24
 154:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 167               		.loc 1 154 9 is_stmt 1 view .LVU19
 168               		.loc 1 154 15 is_stmt 0 view .LVU20
 169 0006 85B7      		in r24,0x35
 170 0008 8068      		ori r24,lo8(-128)
 171 000a 85BF      		out 0x35,r24
 155:quantum/matrix.c ****     #endif
 156:quantum/matrix.c **** 
 157:quantum/matrix.c ****     // initialize row and col
 158:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 159:quantum/matrix.c ****     unselect_rows();
 172               		.loc 1 159 5 is_stmt 1 view .LVU21
 173               	.LBB15:
 174               	.LBI15:
 160:quantum/matrix.c ****     init_cols();
 161:quantum/matrix.c **** #else // ROW2COL
 162:quantum/matrix.c ****     unselect_cols();
 163:quantum/matrix.c ****     init_rows();
 164:quantum/matrix.c **** #endif
 165:quantum/matrix.c **** 
 166:quantum/matrix.c ****     // initialize matrix state: all keys off
 167:quantum/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 168:quantum/matrix.c ****         matrix[i] = 0;
 169:quantum/matrix.c ****         matrix_raw[i] = 0;
 170:quantum/matrix.c ****         matrix_debouncing[i] = 0;
 171:quantum/matrix.c ****     }
 172:quantum/matrix.c **** 
 173:quantum/matrix.c ****     matrix_init_quantum();
 174:quantum/matrix.c **** }
 175:quantum/matrix.c **** 
 176:quantum/matrix.c **** uint8_t matrix_scan(void)
 177:quantum/matrix.c **** {
 178:quantum/matrix.c **** 
 179:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 180:quantum/matrix.c **** 
 181:quantum/matrix.c ****     // Set row, read cols
 182:quantum/matrix.c ****     for (uint8_t current_row = 0; current_row < MATRIX_ROWS; current_row++) {
 183:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 184:quantum/matrix.c ****             bool matrix_changed = read_cols_on_row(matrix_debouncing, current_row);
 185:quantum/matrix.c **** 
 186:quantum/matrix.c ****             if (matrix_changed) {
 187:quantum/matrix.c ****                 debouncing = true;
 188:quantum/matrix.c ****                 debouncing_time = timer_read();
 189:quantum/matrix.c ****             }
 190:quantum/matrix.c **** 
 191:quantum/matrix.c **** #       else
 192:quantum/matrix.c ****             read_cols_on_row(matrix, current_row);
 193:quantum/matrix.c **** #       endif
 194:quantum/matrix.c **** 
 195:quantum/matrix.c ****     }
 196:quantum/matrix.c **** 
 197:quantum/matrix.c **** #else // ROW2COL
 198:quantum/matrix.c **** 
 199:quantum/matrix.c ****     // Set col, read rows
 200:quantum/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 201:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 202:quantum/matrix.c ****             bool matrix_changed = read_rows_on_col(matrix_debouncing, current_col);
 203:quantum/matrix.c ****             if (matrix_changed) {
 204:quantum/matrix.c ****                 debouncing = true;
 205:quantum/matrix.c ****                 debouncing_time = timer_read();
 206:quantum/matrix.c ****             }
 207:quantum/matrix.c **** #       else
 208:quantum/matrix.c ****              read_rows_on_col(matrix, current_col);
 209:quantum/matrix.c **** #       endif
 210:quantum/matrix.c **** 
 211:quantum/matrix.c ****     }
 212:quantum/matrix.c **** 
 213:quantum/matrix.c **** #endif
 214:quantum/matrix.c **** 
 215:quantum/matrix.c **** #   if (DEBOUNCING_DELAY > 0)
 216:quantum/matrix.c ****         if (debouncing && (timer_elapsed(debouncing_time) > DEBOUNCING_DELAY)) {
 217:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 218:quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 219:quantum/matrix.c ****             }
 220:quantum/matrix.c ****             debouncing = false;
 221:quantum/matrix.c ****         }
 222:quantum/matrix.c **** #   endif
 223:quantum/matrix.c **** 
 224:quantum/matrix.c ****     matrix_scan_quantum();
 225:quantum/matrix.c ****     return 1;
 226:quantum/matrix.c **** }
 227:quantum/matrix.c **** 
 228:quantum/matrix.c **** bool matrix_is_modified(void)
 229:quantum/matrix.c **** {
 230:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 231:quantum/matrix.c ****     if (debouncing) return false;
 232:quantum/matrix.c **** #endif
 233:quantum/matrix.c ****     return true;
 234:quantum/matrix.c **** }
 235:quantum/matrix.c **** 
 236:quantum/matrix.c **** inline
 237:quantum/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 238:quantum/matrix.c **** {
 239:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 240:quantum/matrix.c **** }
 241:quantum/matrix.c **** 
 242:quantum/matrix.c **** inline
 243:quantum/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 244:quantum/matrix.c **** {
 245:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 246:quantum/matrix.c ****     // switch blocker installed and the switch is always pressed.
 247:quantum/matrix.c **** #ifdef MATRIX_MASKED
 248:quantum/matrix.c ****     return matrix[row] & matrix_mask[row];
 249:quantum/matrix.c **** #else
 250:quantum/matrix.c ****     return matrix[row];
 251:quantum/matrix.c **** #endif
 252:quantum/matrix.c **** }
 253:quantum/matrix.c **** 
 254:quantum/matrix.c **** void matrix_print(void)
 255:quantum/matrix.c **** {
 256:quantum/matrix.c ****     print_matrix_header();
 257:quantum/matrix.c **** 
 258:quantum/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 259:quantum/matrix.c ****         phex(row); print(": ");
 260:quantum/matrix.c ****         print_matrix_row(row);
 261:quantum/matrix.c ****         print("\n");
 262:quantum/matrix.c ****     }
 263:quantum/matrix.c **** }
 264:quantum/matrix.c **** 
 265:quantum/matrix.c **** uint8_t matrix_key_count(void)
 266:quantum/matrix.c **** {
 267:quantum/matrix.c ****     uint8_t count = 0;
 268:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 269:quantum/matrix.c ****         count += matrix_bitpop(i);
 270:quantum/matrix.c ****     }
 271:quantum/matrix.c ****     return count;
 272:quantum/matrix.c **** }
 273:quantum/matrix.c **** 
 274:quantum/matrix.c **** 
 275:quantum/matrix.c **** 
 276:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 277:quantum/matrix.c **** 
 278:quantum/matrix.c **** static void init_cols(void)
 279:quantum/matrix.c **** {
 280:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_COLS; x++) {
 281:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 283:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 284:quantum/matrix.c ****     }
 285:quantum/matrix.c **** }
 286:quantum/matrix.c **** 
 287:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row)
 288:quantum/matrix.c **** {
 289:quantum/matrix.c ****     // Store last value of row prior to reading
 290:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
 291:quantum/matrix.c **** 
 292:quantum/matrix.c ****     // Clear data in matrix row
 293:quantum/matrix.c ****     current_matrix[current_row] = 0;
 294:quantum/matrix.c **** 
 295:quantum/matrix.c ****     // Select row and wait for row selecton to stabilize
 296:quantum/matrix.c ****     select_row(current_row);
 297:quantum/matrix.c ****     wait_us(30);
 298:quantum/matrix.c **** 
 299:quantum/matrix.c ****     // For each col...
 300:quantum/matrix.c ****     for(uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 301:quantum/matrix.c **** 
 302:quantum/matrix.c ****         // Select the col pin to read (active low)
 303:quantum/matrix.c ****         uint8_t pin = col_pins[col_index];
 304:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 305:quantum/matrix.c **** 
 306:quantum/matrix.c ****         // Populate the matrix row with the state of the col pin
 307:quantum/matrix.c ****         current_matrix[current_row] |=  pin_state ? 0 : (ROW_SHIFTER << col_index);
 308:quantum/matrix.c ****     }
 309:quantum/matrix.c **** 
 310:quantum/matrix.c ****     // Unselect row
 311:quantum/matrix.c ****     unselect_row(current_row);
 312:quantum/matrix.c **** 
 313:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 314:quantum/matrix.c **** }
 315:quantum/matrix.c **** 
 316:quantum/matrix.c **** static void select_row(uint8_t row)
 317:quantum/matrix.c **** {
 318:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 320:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 321:quantum/matrix.c **** }
 322:quantum/matrix.c **** 
 323:quantum/matrix.c **** static void unselect_row(uint8_t row)
 324:quantum/matrix.c **** {
 325:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 327:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 328:quantum/matrix.c **** }
 329:quantum/matrix.c **** 
 330:quantum/matrix.c **** static void unselect_rows(void)
 175               		.loc 1 330 13 view .LVU22
 331:quantum/matrix.c **** {
 332:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_ROWS; x++) {
 176               		.loc 1 332 5 view .LVU23
 177               	.LBB16:
 178               		.loc 1 332 9 view .LVU24
 179               	.LVL4:
 180               		.loc 1 332 26 view .LVU25
 181 000c A0E0      		ldi r26,lo8(row_pins)
 182 000e B0E0      		ldi r27,hi8(row_pins)
 183 0010 40E0      		ldi r20,lo8(row_pins+19)
 184 0012 50E0      		ldi r21,hi8(row_pins+19)
 185               	.LBB17:
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 334:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 186               		.loc 1 334 38 is_stmt 0 view .LVU26
 187 0014 61E0      		ldi r22,lo8(1)
 188 0016 70E0      		ldi r23,0
 189               	.LVL5:
 190               	.L10:
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 191               		.loc 1 333 9 is_stmt 1 view .LVU27
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 192               		.loc 1 333 17 is_stmt 0 view .LVU28
 193 0018 8D91      		ld r24,X+
 194               	.LVL6:
 195               		.loc 1 334 9 is_stmt 1 view .LVU29
 196               		.loc 1 334 34 is_stmt 0 view .LVU30
 197 001a E82F      		mov r30,r24
 198 001c E295      		swap r30
 199 001e EF70      		andi r30,lo8(15)
 200 0020 F0E0      		ldi r31,0
 201 0022 91A1      		ldd r25,Z+33
 202               		.loc 1 334 38 view .LVU31
 203 0024 8F70      		andi r24,lo8(15)
 204               	.LVL7:
 205               		.loc 1 334 38 view .LVU32
 206 0026 9B01      		movw r18,r22
 207 0028 00C0      		rjmp 2f
 208               		1:
 209 002a 220F      		lsl r18
 210               		2:
 211 002c 8A95      		dec r24
 212 002e 02F4      		brpl 1b
 213               		.loc 1 334 34 view .LVU33
 214 0030 822F      		mov r24,r18
 215 0032 8095      		com r24
 216 0034 8923      		and r24,r25
 217 0036 81A3      		std Z+33,r24
 218               	.LVL8:
 335:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 219               		.loc 1 335 9 is_stmt 1 view .LVU34
 220               		.loc 1 335 34 is_stmt 0 view .LVU35
 221 0038 82A1      		ldd r24,Z+34
 222 003a 822B      		or r24,r18
 223 003c 82A3      		std Z+34,r24
 224               	.LBE17:
 332:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 225               		.loc 1 332 42 is_stmt 1 view .LVU36
 226               	.LVL9:
 332:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 227               		.loc 1 332 26 view .LVU37
 228 003e 4A17      		cp r20,r26
 229 0040 5B07      		cpc r21,r27
 230 0042 01F4      		brne .L10
 231 0044 A0E0      		ldi r26,lo8(col_pins)
 232 0046 B0E0      		ldi r27,hi8(col_pins)
 233               	.LVL10:
 332:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 234               		.loc 1 332 26 is_stmt 0 view .LVU38
 235 0048 40E0      		ldi r20,lo8(col_pins+8)
 236 004a 50E0      		ldi r21,hi8(col_pins+8)
 237               	.LBE16:
 238               	.LBE15:
 239               	.LBB18:
 240               	.LBB19:
 241               	.LBB20:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 242               		.loc 1 282 38 view .LVU39
 243 004c 61E0      		ldi r22,lo8(1)
 244 004e 70E0      		ldi r23,0
 245               	.L11:
 246               	.LVL11:
 281:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 247               		.loc 1 281 9 is_stmt 1 view .LVU40
 281:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 248               		.loc 1 281 17 is_stmt 0 view .LVU41
 249 0050 8D91      		ld r24,X+
 250               	.LVL12:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 251               		.loc 1 282 9 is_stmt 1 view .LVU42
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 252               		.loc 1 282 34 is_stmt 0 view .LVU43
 253 0052 E82F      		mov r30,r24
 254 0054 E295      		swap r30
 255 0056 EF70      		andi r30,lo8(15)
 256 0058 F0E0      		ldi r31,0
 257 005a 91A1      		ldd r25,Z+33
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 258               		.loc 1 282 38 view .LVU44
 259 005c 8F70      		andi r24,lo8(15)
 260               	.LVL13:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 261               		.loc 1 282 38 view .LVU45
 262 005e 9B01      		movw r18,r22
 263 0060 00C0      		rjmp 2f
 264               		1:
 265 0062 220F      		lsl r18
 266               		2:
 267 0064 8A95      		dec r24
 268 0066 02F4      		brpl 1b
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 269               		.loc 1 282 34 view .LVU46
 270 0068 822F      		mov r24,r18
 271 006a 8095      		com r24
 272 006c 8923      		and r24,r25
 273 006e 81A3      		std Z+33,r24
 274               	.LVL14:
 283:quantum/matrix.c ****     }
 275               		.loc 1 283 9 is_stmt 1 view .LVU47
 283:quantum/matrix.c ****     }
 276               		.loc 1 283 34 is_stmt 0 view .LVU48
 277 0070 82A1      		ldd r24,Z+34
 278 0072 822B      		or r24,r18
 279 0074 82A3      		std Z+34,r24
 280               	.LBE20:
 280:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 281               		.loc 1 280 42 is_stmt 1 view .LVU49
 282               	.LVL15:
 280:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 283               		.loc 1 280 26 view .LVU50
 284 0076 4A17      		cp r20,r26
 285 0078 5B07      		cpc r21,r27
 286 007a 01F4      		brne .L11
 287               	.LBE19:
 288               	.LBE18:
 289               	.LBB21:
 168:quantum/matrix.c ****         matrix_raw[i] = 0;
 290               		.loc 1 168 19 is_stmt 0 view .LVU51
 291 007c 83E1      		ldi r24,lo8(19)
 292 007e E0E0      		ldi r30,lo8(matrix)
 293 0080 F0E0      		ldi r31,hi8(matrix)
 294 0082 DF01      		movw r26,r30
 295               	.LVL16:
 168:quantum/matrix.c ****         matrix_raw[i] = 0;
 296               		.loc 1 168 19 view .LVU52
 297 0084 982F      		mov r25,r24
 298               		0:
 299 0086 1D92      		st X+,__zero_reg__
 300 0088 9A95      		dec r25
 301 008a 01F4      		brne 0b
 170:quantum/matrix.c ****     }
 302               		.loc 1 170 30 view .LVU53
 303 008c E0E0      		ldi r30,lo8(matrix_debouncing)
 304 008e F0E0      		ldi r31,hi8(matrix_debouncing)
 305 0090 DF01      		movw r26,r30
 306               		0:
 307 0092 1D92      		st X+,__zero_reg__
 308 0094 8A95      		dec r24
 309 0096 01F4      		brne 0b
 170:quantum/matrix.c ****     }
 310               		.loc 1 170 30 view .LVU54
 311               	.LBE21:
 173:quantum/matrix.c **** }
 312               		.loc 1 173 5 is_stmt 1 view .LVU55
 313 0098 0C94 0000 		jmp matrix_init_quantum
 314               	.LVL17:
 315               		.cfi_endproc
 316               	.LFE14:
 318               		.section	.text.matrix_scan,"ax",@progbits
 319               	.global	matrix_scan
 321               	matrix_scan:
 322               	.LFB15:
 177:quantum/matrix.c **** 
 323               		.loc 1 177 1 view -0
 324               		.cfi_startproc
 325 0000 4F92      		push r4
 326               	.LCFI0:
 327               		.cfi_def_cfa_offset 3
 328               		.cfi_offset 4, -2
 329 0002 5F92      		push r5
 330               	.LCFI1:
 331               		.cfi_def_cfa_offset 4
 332               		.cfi_offset 5, -3
 333 0004 6F92      		push r6
 334               	.LCFI2:
 335               		.cfi_def_cfa_offset 5
 336               		.cfi_offset 6, -4
 337 0006 7F92      		push r7
 338               	.LCFI3:
 339               		.cfi_def_cfa_offset 6
 340               		.cfi_offset 7, -5
 341 0008 8F92      		push r8
 342               	.LCFI4:
 343               		.cfi_def_cfa_offset 7
 344               		.cfi_offset 8, -6
 345 000a 9F92      		push r9
 346               	.LCFI5:
 347               		.cfi_def_cfa_offset 8
 348               		.cfi_offset 9, -7
 349 000c AF92      		push r10
 350               	.LCFI6:
 351               		.cfi_def_cfa_offset 9
 352               		.cfi_offset 10, -8
 353 000e BF92      		push r11
 354               	.LCFI7:
 355               		.cfi_def_cfa_offset 10
 356               		.cfi_offset 11, -9
 357 0010 CF92      		push r12
 358               	.LCFI8:
 359               		.cfi_def_cfa_offset 11
 360               		.cfi_offset 12, -10
 361 0012 DF92      		push r13
 362               	.LCFI9:
 363               		.cfi_def_cfa_offset 12
 364               		.cfi_offset 13, -11
 365 0014 EF92      		push r14
 366               	.LCFI10:
 367               		.cfi_def_cfa_offset 13
 368               		.cfi_offset 14, -12
 369 0016 FF92      		push r15
 370               	.LCFI11:
 371               		.cfi_def_cfa_offset 14
 372               		.cfi_offset 15, -13
 373 0018 0F93      		push r16
 374               	.LCFI12:
 375               		.cfi_def_cfa_offset 15
 376               		.cfi_offset 16, -14
 377 001a 1F93      		push r17
 378               	.LCFI13:
 379               		.cfi_def_cfa_offset 16
 380               		.cfi_offset 17, -15
 381 001c CF93      		push r28
 382               	.LCFI14:
 383               		.cfi_def_cfa_offset 17
 384               		.cfi_offset 28, -16
 385 001e DF93      		push r29
 386               	.LCFI15:
 387               		.cfi_def_cfa_offset 18
 388               		.cfi_offset 29, -17
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 16 */
 392               	.L__stack_usage = 16
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 393               		.loc 1 182 5 view .LVU57
 394               	.LBB39:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 395               		.loc 1 182 10 view .LVU58
 396               	.LVL18:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 397               		.loc 1 182 47 view .LVU59
 398 0020 80E0      		ldi r24,lo8(matrix_debouncing)
 399 0022 482E      		mov r4,r24
 400 0024 80E0      		ldi r24,hi8(matrix_debouncing)
 401 0026 582E      		mov r5,r24
 402 0028 90E0      		ldi r25,lo8(row_pins)
 403 002a C92E      		mov r12,r25
 404 002c 90E0      		ldi r25,hi8(row_pins)
 405 002e D92E      		mov r13,r25
 406 0030 20E0      		ldi r18,lo8(matrix_debouncing+19)
 407 0032 E22E      		mov r14,r18
 408 0034 20E0      		ldi r18,hi8(matrix_debouncing+19)
 409 0036 F22E      		mov r15,r18
 410               	.LBB40:
 411               	.LBB41:
 412               	.LBB42:
 413               	.LBB43:
 414               	.LBB44:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 415               		.loc 1 319 34 is_stmt 0 view .LVU60
 416 0038 01E0      		ldi r16,lo8(1)
 417 003a 10E0      		ldi r17,0
 418               	.LBE44:
 419               	.LBE43:
 420               	.LBE42:
 421               	.LBE41:
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 422               		.loc 1 187 28 view .LVU61
 423 003c BB24      		clr r11
 424 003e B394      		inc r11
 425               	.LVL19:
 426               	.L18:
 184:quantum/matrix.c **** 
 427               		.loc 1 184 13 is_stmt 1 view .LVU62
 428               	.LBB60:
 429               	.LBI41:
 287:quantum/matrix.c **** {
 430               		.loc 1 287 13 view .LVU63
 431               	.LBB58:
 290:quantum/matrix.c **** 
 432               		.loc 1 290 5 view .LVU64
 290:quantum/matrix.c **** 
 433               		.loc 1 290 18 is_stmt 0 view .LVU65
 434 0040 E201      		movw r28,r4
 435 0042 8990      		ld r8,Y+
 436 0044 2E01      		movw r4,r28
 437               	.LVL20:
 293:quantum/matrix.c **** 
 438               		.loc 1 293 5 is_stmt 1 view .LVU66
 439 0046 DE01      		movw r26,r28
 293:quantum/matrix.c **** 
 440               		.loc 1 293 33 is_stmt 0 view .LVU67
 441 0048 1E92      		st -X,__zero_reg__
 296:quantum/matrix.c ****     wait_us(30);
 442               		.loc 1 296 5 is_stmt 1 view .LVU68
 443               	.LVL21:
 444               	.LBB46:
 445               	.LBI43:
 316:quantum/matrix.c **** {
 446               		.loc 1 316 13 view .LVU69
 447               	.LBB45:
 318:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 448               		.loc 1 318 5 view .LVU70
 318:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 449               		.loc 1 318 13 is_stmt 0 view .LVU71
 450 004a F601      		movw r30,r12
 451 004c 8191      		ld r24,Z+
 452 004e 6F01      		movw r12,r30
 453               	.LVL22:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 454               		.loc 1 319 5 is_stmt 1 view .LVU72
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 455               		.loc 1 319 30 is_stmt 0 view .LVU73
 456 0050 E82F      		mov r30,r24
 457 0052 E295      		swap r30
 458 0054 EF70      		andi r30,lo8(15)
 459 0056 F0E0      		ldi r31,0
 460 0058 91A1      		ldd r25,Z+33
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 461               		.loc 1 319 34 view .LVU74
 462 005a 8F70      		andi r24,lo8(15)
 463               	.LVL23:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 464               		.loc 1 319 34 view .LVU75
 465 005c A801      		movw r20,r16
 466 005e 00C0      		rjmp 2f
 467               		1:
 468 0060 440F      		lsl r20
 469               		2:
 470 0062 8A95      		dec r24
 471 0064 02F4      		brpl 1b
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 472               		.loc 1 319 30 view .LVU76
 473 0066 892F      		mov r24,r25
 474 0068 842B      		or r24,r20
 475 006a 81A3      		std Z+33,r24
 476               	.LVL24:
 320:quantum/matrix.c **** }
 477               		.loc 1 320 5 is_stmt 1 view .LVU77
 320:quantum/matrix.c **** }
 478               		.loc 1 320 30 is_stmt 0 view .LVU78
 479 006c 82A1      		ldd r24,Z+34
 480 006e A42E      		mov r10,r20
 481 0070 A094      		com r10
 482 0072 8A21      		and r24,r10
 483 0074 82A3      		std Z+34,r24
 484               	.LVL25:
 320:quantum/matrix.c **** }
 485               		.loc 1 320 30 view .LVU79
 486               	.LBE45:
 487               	.LBE46:
 297:quantum/matrix.c **** 
 488               		.loc 1 297 5 is_stmt 1 view .LVU80
 489               	.LBB47:
 490               	.LBI47:
 491               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 492               		.loc 2 255 1 view .LVU81
 493               	.LBB48:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 494               		.loc 2 257 2 view .LVU82
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 495               		.loc 2 261 2 view .LVU83
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 496               		.loc 2 262 2 view .LVU84
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 497               		.loc 2 263 2 view .LVU85
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 498               		.loc 2 273 3 view .LVU86
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 499               		.loc 2 276 2 view .LVU87
 500 0076 80EA      		ldi r24,lo8(-96)
 501 0078 8A95      	1:	dec r24
 502 007a 01F4      		brne 1b
 503               	.LVL26:
 504               		.loc 2 276 2 is_stmt 0 view .LVU88
 505               	.LBE48:
 506               	.LBE47:
 300:quantum/matrix.c **** 
 507               		.loc 1 300 5 is_stmt 1 view .LVU89
 508               	.LBB50:
 300:quantum/matrix.c **** 
 509               		.loc 1 300 9 view .LVU90
 300:quantum/matrix.c **** 
 510               		.loc 1 300 42 view .LVU91
 511 007c 60E0      		ldi r22,lo8(col_pins)
 512 007e 70E0      		ldi r23,hi8(col_pins)
 513               	.LBE50:
 514               	.LBB53:
 515               	.LBB49:
 516               		.loc 2 276 2 is_stmt 0 view .LVU92
 517 0080 30E0      		ldi r19,0
 518 0082 20E0      		ldi r18,0
 519               	.LVL27:
 520               	.L16:
 521               		.loc 2 276 2 view .LVU93
 522               	.LBE49:
 523               	.LBE53:
 524               	.LBB54:
 525               	.LBB51:
 303:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 526               		.loc 1 303 9 is_stmt 1 view .LVU94
 303:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 527               		.loc 1 303 17 is_stmt 0 view .LVU95
 528 0084 EB01      		movw r28,r22
 529 0086 9990      		ld r9,Y+
 530 0088 BE01      		movw r22,r28
 531               	.LVL28:
 304:quantum/matrix.c **** 
 532               		.loc 1 304 9 is_stmt 1 view .LVU96
 304:quantum/matrix.c **** 
 533               		.loc 1 304 30 is_stmt 0 view .LVU97
 534 008a 892D      		mov r24,r9
 535 008c 8295      		swap r24
 536 008e 8F70      		andi r24,lo8(15)
 537 0090 805E      		subi r24,lo8(-(32))
 538 0092 90E0      		ldi r25,0
 539 0094 EC01      		movw r28,r24
 540 0096 7880      		ld r7,Y
 541               	.LVL29:
 307:quantum/matrix.c ****     }
 542               		.loc 1 307 9 is_stmt 1 view .LVU98
 307:quantum/matrix.c ****     }
 543               		.loc 1 307 37 is_stmt 0 view .LVU99
 544 0098 6C90      		ld r6,X
 304:quantum/matrix.c **** 
 545               		.loc 1 304 51 view .LVU100
 546 009a 892D      		mov r24,r9
 547 009c 8F70      		andi r24,lo8(15)
 548               	.LVL30:
 304:quantum/matrix.c **** 
 549               		.loc 1 304 51 view .LVU101
 550 009e E801      		movw r28,r16
 551 00a0 00C0      		rjmp 2f
 552               		1:
 553 00a2 CC0F      		lsl r28
 554 00a4 DD1F      		rol r29
 555               		2:
 556 00a6 8A95      		dec r24
 557 00a8 02F4      		brpl 1b
 558 00aa CE01      		movw r24,r28
 559               	.LVL31:
 304:quantum/matrix.c **** 
 560               		.loc 1 304 17 view .LVU102
 561 00ac 8721      		and r24,r7
 307:quantum/matrix.c ****     }
 562               		.loc 1 307 37 view .LVU103
 563 00ae 01F0      		breq .+2
 564 00b0 00C0      		rjmp .L22
 565 00b2 802F      		mov r24,r16
 566 00b4 022E      		mov r0,r18
 567 00b6 00C0      		rjmp 2f
 568               		1:
 569 00b8 880F      		lsl r24
 570               		2:
 571 00ba 0A94      		dec r0
 572 00bc 02F4      		brpl 1b
 573               	.L15:
 574 00be 8629      		or r24,r6
 575 00c0 8C93      		st X,r24
 576               	.LBE51:
 300:quantum/matrix.c **** 
 577               		.loc 1 300 66 is_stmt 1 view .LVU104
 578               	.LVL32:
 300:quantum/matrix.c **** 
 579               		.loc 1 300 42 view .LVU105
 580 00c2 2F5F      		subi r18,-1
 581 00c4 3F4F      		sbci r19,-1
 582               	.LVL33:
 300:quantum/matrix.c **** 
 583               		.loc 1 300 42 is_stmt 0 view .LVU106
 584 00c6 2830      		cpi r18,8
 585 00c8 3105      		cpc r19,__zero_reg__
 586 00ca 01F4      		brne .L16
 587               	.LBE54:
 311:quantum/matrix.c **** 
 588               		.loc 1 311 5 is_stmt 1 view .LVU107
 589               	.LVL34:
 590               	.LBB55:
 591               	.LBI55:
 323:quantum/matrix.c **** {
 592               		.loc 1 323 13 view .LVU108
 593               	.LBB56:
 325:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 594               		.loc 1 325 5 view .LVU109
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 595               		.loc 1 326 5 view .LVU110
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 596               		.loc 1 326 30 is_stmt 0 view .LVU111
 597 00cc 81A1      		ldd r24,Z+33
 598 00ce A822      		and r10,r24
 599 00d0 A1A2      		std Z+33,r10
 327:quantum/matrix.c **** }
 600               		.loc 1 327 5 is_stmt 1 view .LVU112
 327:quantum/matrix.c **** }
 601               		.loc 1 327 30 is_stmt 0 view .LVU113
 602 00d2 82A1      		ldd r24,Z+34
 603 00d4 842B      		or r24,r20
 604 00d6 82A3      		std Z+34,r24
 605               	.LVL35:
 327:quantum/matrix.c **** }
 606               		.loc 1 327 30 view .LVU114
 607               	.LBE56:
 608               	.LBE55:
 313:quantum/matrix.c **** }
 609               		.loc 1 313 5 is_stmt 1 view .LVU115
 313:quantum/matrix.c **** }
 610               		.loc 1 313 5 is_stmt 0 view .LVU116
 611               	.LBE58:
 612               	.LBE60:
 186:quantum/matrix.c ****                 debouncing = true;
 613               		.loc 1 186 13 is_stmt 1 view .LVU117
 186:quantum/matrix.c ****                 debouncing = true;
 614               		.loc 1 186 16 is_stmt 0 view .LVU118
 615 00d8 8C91      		ld r24,X
 616 00da 8816      		cp r8,r24
 617 00dc 01F0      		breq .L17
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 618               		.loc 1 187 17 is_stmt 1 view .LVU119
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 619               		.loc 1 187 28 is_stmt 0 view .LVU120
 620 00de B092 0000 		sts debouncing,r11
 188:quantum/matrix.c ****             }
 621               		.loc 1 188 17 is_stmt 1 view .LVU121
 188:quantum/matrix.c ****             }
 622               		.loc 1 188 35 is_stmt 0 view .LVU122
 623 00e2 0E94 0000 		call timer_read
 624               	.LVL36:
 188:quantum/matrix.c ****             }
 625               		.loc 1 188 33 view .LVU123
 626 00e6 9093 0000 		sts debouncing_time+1,r25
 627 00ea 8093 0000 		sts debouncing_time,r24
 628               	.L17:
 629               	.LBE40:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 630               		.loc 1 182 73 is_stmt 1 discriminator 2 view .LVU124
 631               	.LVL37:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 632               		.loc 1 182 47 discriminator 2 view .LVU125
 633 00ee E414      		cp r14,r4
 634 00f0 F504      		cpc r15,r5
 635 00f2 01F0      		breq .+2
 636 00f4 00C0      		rjmp .L18
 637               	.LBE39:
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 638               		.loc 1 216 9 view .LVU126
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 639               		.loc 1 216 12 is_stmt 0 view .LVU127
 640 00f6 8091 0000 		lds r24,debouncing
 641 00fa 8823      		tst r24
 642 00fc 01F0      		breq .L20
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 643               		.loc 1 216 28 discriminator 1 view .LVU128
 644 00fe 8091 0000 		lds r24,debouncing_time
 645 0102 9091 0000 		lds r25,debouncing_time+1
 646 0106 0E94 0000 		call timer_elapsed
 647               	.LVL38:
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 648               		.loc 1 216 24 discriminator 1 view .LVU129
 649 010a 0697      		sbiw r24,6
 650 010c 00F0      		brlo .L20
 651               	.LBB63:
 218:quantum/matrix.c ****             }
 652               		.loc 1 218 27 view .LVU130
 653 010e 83E1      		ldi r24,lo8(19)
 654 0110 E0E0      		ldi r30,lo8(matrix_debouncing)
 655 0112 F0E0      		ldi r31,hi8(matrix_debouncing)
 656 0114 A0E0      		ldi r26,lo8(matrix)
 657 0116 B0E0      		ldi r27,hi8(matrix)
 658               		0:
 659 0118 0190      		ld r0,Z+
 660 011a 0D92      		st X+,r0
 661 011c 8A95      		dec r24
 662 011e 01F4      		brne 0b
 663               	.LBE63:
 220:quantum/matrix.c ****         }
 664               		.loc 1 220 13 is_stmt 1 view .LVU131
 220:quantum/matrix.c ****         }
 665               		.loc 1 220 24 is_stmt 0 view .LVU132
 666 0120 1092 0000 		sts debouncing,__zero_reg__
 667               	.L20:
 224:quantum/matrix.c ****     return 1;
 668               		.loc 1 224 5 is_stmt 1 view .LVU133
 669 0124 0E94 0000 		call matrix_scan_quantum
 670               	.LVL39:
 225:quantum/matrix.c **** }
 671               		.loc 1 225 5 view .LVU134
 226:quantum/matrix.c **** 
 672               		.loc 1 226 1 is_stmt 0 view .LVU135
 673 0128 81E0      		ldi r24,lo8(1)
 674               	/* epilogue start */
 675 012a DF91      		pop r29
 676 012c CF91      		pop r28
 677 012e 1F91      		pop r17
 678 0130 0F91      		pop r16
 679 0132 FF90      		pop r15
 680 0134 EF90      		pop r14
 681 0136 DF90      		pop r13
 682 0138 CF90      		pop r12
 683 013a BF90      		pop r11
 684 013c AF90      		pop r10
 685 013e 9F90      		pop r9
 686 0140 8F90      		pop r8
 226:quantum/matrix.c **** 
 687               		.loc 1 226 1 view .LVU136
 688 0142 7F90      		pop r7
 689 0144 6F90      		pop r6
 690 0146 5F90      		pop r5
 691 0148 4F90      		pop r4
 692               	.LVL40:
 226:quantum/matrix.c **** 
 693               		.loc 1 226 1 view .LVU137
 694 014a 0895      		ret
 695               	.LVL41:
 696               	.L22:
 697               	.LBB64:
 698               	.LBB62:
 699               	.LBB61:
 700               	.LBB59:
 701               	.LBB57:
 702               	.LBB52:
 307:quantum/matrix.c ****     }
 703               		.loc 1 307 37 view .LVU138
 704 014c 80E0      		ldi r24,0
 705 014e 00C0      		rjmp .L15
 706               	.LBE52:
 707               	.LBE57:
 708               	.LBE59:
 709               	.LBE61:
 710               	.LBE62:
 711               	.LBE64:
 712               		.cfi_endproc
 713               	.LFE15:
 715               		.section	.text.matrix_is_modified,"ax",@progbits
 716               	.global	matrix_is_modified
 718               	matrix_is_modified:
 719               	.LFB16:
 229:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 720               		.loc 1 229 1 is_stmt 1 view -0
 721               		.cfi_startproc
 722               	/* prologue: function */
 723               	/* frame size = 0 */
 724               	/* stack size = 0 */
 725               	.L__stack_usage = 0
 231:quantum/matrix.c **** #endif
 726               		.loc 1 231 5 view .LVU140
 231:quantum/matrix.c **** #endif
 727               		.loc 1 231 8 is_stmt 0 view .LVU141
 728 0000 9091 0000 		lds r25,debouncing
 234:quantum/matrix.c **** 
 729               		.loc 1 234 1 view .LVU142
 730 0004 81E0      		ldi r24,lo8(1)
 731 0006 8927      		eor r24,r25
 732               	/* epilogue start */
 733 0008 0895      		ret
 734               		.cfi_endproc
 735               	.LFE16:
 737               		.section	.text.matrix_is_on,"ax",@progbits
 738               	.global	matrix_is_on
 740               	matrix_is_on:
 741               	.LVL42:
 742               	.LFB17:
 238:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 743               		.loc 1 238 1 is_stmt 1 view -0
 744               		.cfi_startproc
 745               	/* prologue: function */
 746               	/* frame size = 0 */
 747               	/* stack size = 0 */
 748               	.L__stack_usage = 0
 239:quantum/matrix.c **** }
 749               		.loc 1 239 5 view .LVU144
 239:quantum/matrix.c **** }
 750               		.loc 1 239 19 is_stmt 0 view .LVU145
 751 0000 E82F      		mov r30,r24
 752 0002 F0E0      		ldi r31,0
 753 0004 E050      		subi r30,lo8(-(matrix))
 754 0006 F040      		sbci r31,hi8(-(matrix))
 755 0008 8081      		ld r24,Z
 756               	.LVL43:
 239:quantum/matrix.c **** }
 757               		.loc 1 239 43 view .LVU146
 758 000a 21E0      		ldi r18,lo8(1)
 759 000c 30E0      		ldi r19,0
 760 000e 6230      		cpi r22,lo8(2)
 761 0010 00F4      		brsh .L27
 762 0012 20E0      		ldi r18,0
 763               	.L27:
 239:quantum/matrix.c **** }
 764               		.loc 1 239 25 view .LVU147
 765 0014 8223      		and r24,r18
 240:quantum/matrix.c **** 
 766               		.loc 1 240 1 view .LVU148
 767 0016 8170      		andi r24,lo8(1)
 768               	/* epilogue start */
 769 0018 0895      		ret
 770               		.cfi_endproc
 771               	.LFE17:
 773               		.section	.text.matrix_get_row,"ax",@progbits
 774               	.global	matrix_get_row
 776               	matrix_get_row:
 777               	.LVL44:
 778               	.LFB18:
 244:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 779               		.loc 1 244 1 is_stmt 1 view -0
 780               		.cfi_startproc
 781               	/* prologue: function */
 782               	/* frame size = 0 */
 783               	/* stack size = 0 */
 784               	.L__stack_usage = 0
 250:quantum/matrix.c **** #endif
 785               		.loc 1 250 5 view .LVU150
 250:quantum/matrix.c **** #endif
 786               		.loc 1 250 18 is_stmt 0 view .LVU151
 787 0000 E82F      		mov r30,r24
 788 0002 F0E0      		ldi r31,0
 789 0004 E050      		subi r30,lo8(-(matrix))
 790 0006 F040      		sbci r31,hi8(-(matrix))
 252:quantum/matrix.c **** 
 791               		.loc 1 252 1 view .LVU152
 792 0008 8081      		ld r24,Z
 793               	.LVL45:
 794               	/* epilogue start */
 252:quantum/matrix.c **** 
 795               		.loc 1 252 1 view .LVU153
 796 000a 0895      		ret
 797               		.cfi_endproc
 798               	.LFE18:
 800               		.section	.text.matrix_print,"ax",@progbits
 801               	.global	matrix_print
 803               	matrix_print:
 804               	.LFB19:
 255:quantum/matrix.c ****     print_matrix_header();
 805               		.loc 1 255 1 is_stmt 1 view -0
 806               		.cfi_startproc
 807               	/* prologue: function */
 808               	/* frame size = 0 */
 809               	/* stack size = 0 */
 810               	.L__stack_usage = 0
 256:quantum/matrix.c **** 
 811               		.loc 1 256 26 view .LVU155
 258:quantum/matrix.c ****         phex(row); print(": ");
 812               		.loc 1 258 5 view .LVU156
 258:quantum/matrix.c ****         phex(row); print(": ");
 813               		.loc 1 258 10 view .LVU157
 258:quantum/matrix.c ****         phex(row); print(": ");
 814               		.loc 1 258 31 view .LVU158
 815               	/* epilogue start */
 263:quantum/matrix.c **** 
 816               		.loc 1 263 1 is_stmt 0 view .LVU159
 817 0000 0895      		ret
 818               		.cfi_endproc
 819               	.LFE19:
 821               		.section	.text.matrix_key_count,"ax",@progbits
 822               	.global	matrix_key_count
 824               	matrix_key_count:
 825               	.LFB20:
 266:quantum/matrix.c ****     uint8_t count = 0;
 826               		.loc 1 266 1 is_stmt 1 view -0
 827               		.cfi_startproc
 828 0000 0F93      		push r16
 829               	.LCFI16:
 830               		.cfi_def_cfa_offset 3
 831               		.cfi_offset 16, -2
 832 0002 1F93      		push r17
 833               	.LCFI17:
 834               		.cfi_def_cfa_offset 4
 835               		.cfi_offset 17, -3
 836 0004 CF93      		push r28
 837               	.LCFI18:
 838               		.cfi_def_cfa_offset 5
 839               		.cfi_offset 28, -4
 840               	/* prologue: function */
 841               	/* frame size = 0 */
 842               	/* stack size = 3 */
 843               	.L__stack_usage = 3
 267:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 844               		.loc 1 267 5 view .LVU161
 845               	.LVL46:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 846               		.loc 1 268 5 view .LVU162
 847               	.LBB65:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 848               		.loc 1 268 10 view .LVU163
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 849               		.loc 1 268 27 view .LVU164
 850 0006 00E0      		ldi r16,lo8(matrix)
 851 0008 10E0      		ldi r17,hi8(matrix)
 852               	.LBE65:
 267:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 853               		.loc 1 267 13 is_stmt 0 view .LVU165
 854 000a C0E0      		ldi r28,0
 855               	.LVL47:
 856               	.L31:
 857               	.LBB66:
 269:quantum/matrix.c ****     }
 858               		.loc 1 269 9 is_stmt 1 discriminator 3 view .LVU166
 269:quantum/matrix.c ****     }
 859               		.loc 1 269 18 is_stmt 0 discriminator 3 view .LVU167
 860 000c F801      		movw r30,r16
 861 000e 8191      		ld r24,Z+
 862 0010 8F01      		movw r16,r30
 863               	.LVL48:
 269:quantum/matrix.c ****     }
 864               		.loc 1 269 18 discriminator 3 view .LVU168
 865 0012 0E94 0000 		call bitpop
 866               	.LVL49:
 269:quantum/matrix.c ****     }
 867               		.loc 1 269 15 discriminator 3 view .LVU169
 868 0016 C80F      		add r28,r24
 869               	.LVL50:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 870               		.loc 1 268 43 is_stmt 1 discriminator 3 view .LVU170
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 871               		.loc 1 268 27 discriminator 3 view .LVU171
 872 0018 F0E0      		ldi r31,hi8(matrix+19)
 873 001a 0030      		cpi r16,lo8(matrix+19)
 874 001c 1F07      		cpc r17,r31
 875 001e 01F4      		brne .L31
 876               	.LBE66:
 271:quantum/matrix.c **** }
 877               		.loc 1 271 5 view .LVU172
 272:quantum/matrix.c **** 
 878               		.loc 1 272 1 is_stmt 0 view .LVU173
 879 0020 8C2F      		mov r24,r28
 880               	/* epilogue start */
 881 0022 CF91      		pop r28
 882               	.LVL51:
 272:quantum/matrix.c **** 
 883               		.loc 1 272 1 view .LVU174
 884 0024 1F91      		pop r17
 885 0026 0F91      		pop r16
 886               	.LVL52:
 272:quantum/matrix.c **** 
 887               		.loc 1 272 1 view .LVU175
 888 0028 0895      		ret
 889               		.cfi_endproc
 890               	.LFE20:
 892               		.section	.bss.matrix_debouncing,"aw",@nobits
 895               	matrix_debouncing:
 896 0000 0000 0000 		.zero	19
 896      0000 0000 
 896      0000 0000 
 896      0000 0000 
 896      0000 00
 897               		.section	.bss.matrix,"aw",@nobits
 900               	matrix:
 901 0000 0000 0000 		.zero	19
 901      0000 0000 
 901      0000 0000 
 901      0000 0000 
 901      0000 00
 902               		.section	.rodata.col_pins,"a"
 905               	col_pins:
 906 0000 6760 6166 		.ascii	"g`afbcde"
 906      6263 6465 
 907               		.section	.rodata.row_pins,"a"
 910               	row_pins:
 911 0000 F7F6 F5F4 		.ascii	"\367\366\365\364\363\362\361\360\3070123\225\224\223\222\300"
 911      F3F2 F1F0 
 911      C730 3132 
 911      3395 9493 
 911      92C0 
 912 0012 97        		.ascii	"\227"
 913               		.section	.bss.debouncing,"aw",@nobits
 916               	debouncing:
 917 0000 00        		.zero	1
 918               		.section	.bss.debouncing_time,"aw",@nobits
 921               	debouncing_time:
 922 0000 0000      		.zero	2
 923               		.text
 924               	.Letext0:
 925               		.file 3 "/usr/avr/include/stdint.h"
 926               		.file 4 "./tmk_core/common/matrix.h"
 927               		.file 5 "./tmk_core/common/util.h"
 928               		.file 6 "/usr/avr/include/math.h"
 929               		.file 7 "./tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
     /tmp/cckGq4rO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckGq4rO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckGq4rO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckGq4rO.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cckGq4rO.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckGq4rO.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckGq4rO.s:14     .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/cckGq4rO.s:14     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias
     /tmp/cckGq4rO.s:33     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/cckGq4rO.s:50     .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
     /tmp/cckGq4rO.s:67     .text.matrix_scan_user:0000000000000000 matrix_scan_user
     /tmp/cckGq4rO.s:82     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
     /tmp/cckGq4rO.s:99     .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
     /tmp/cckGq4rO.s:116    .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/cckGq4rO.s:135    .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/cckGq4rO.s:154    .text.matrix_init:0000000000000000 matrix_init
     /tmp/cckGq4rO.s:910    .rodata.row_pins:0000000000000000 row_pins
     /tmp/cckGq4rO.s:905    .rodata.col_pins:0000000000000000 col_pins
     /tmp/cckGq4rO.s:900    .bss.matrix:0000000000000000 matrix
     /tmp/cckGq4rO.s:895    .bss.matrix_debouncing:0000000000000000 matrix_debouncing
     /tmp/cckGq4rO.s:321    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/cckGq4rO.s:916    .bss.debouncing:0000000000000000 debouncing
     /tmp/cckGq4rO.s:921    .bss.debouncing_time:0000000000000000 debouncing_time
     /tmp/cckGq4rO.s:718    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/cckGq4rO.s:740    .text.matrix_is_on:0000000000000000 matrix_is_on
     /tmp/cckGq4rO.s:776    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/cckGq4rO.s:803    .text.matrix_print:0000000000000000 matrix_print
     /tmp/cckGq4rO.s:824    .text.matrix_key_count:0000000000000000 matrix_key_count

UNDEFINED SYMBOLS
timer_read
timer_elapsed
bitpop
__do_copy_data
__do_clear_bss
