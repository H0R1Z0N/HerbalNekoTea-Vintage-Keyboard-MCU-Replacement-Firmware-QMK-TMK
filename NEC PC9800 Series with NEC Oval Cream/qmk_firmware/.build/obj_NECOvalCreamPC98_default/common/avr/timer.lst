   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.timer_init,"ax",@progbits
  12               	.global	timer_init
  14               	timer_init:
  15               	.LFB5:
  16               		.file 1 "tmk_core/common/avr/timer.c"
   1:tmk_core/common/avr/timer.c **** /*
   2:tmk_core/common/avr/timer.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/avr/timer.c **** 
   4:tmk_core/common/avr/timer.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/avr/timer.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/avr/timer.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/avr/timer.c **** (at your option) any later version.
   8:tmk_core/common/avr/timer.c **** 
   9:tmk_core/common/avr/timer.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/avr/timer.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/avr/timer.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/avr/timer.c **** GNU General Public License for more details.
  13:tmk_core/common/avr/timer.c **** 
  14:tmk_core/common/avr/timer.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/avr/timer.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/avr/timer.c **** */
  17:tmk_core/common/avr/timer.c **** 
  18:tmk_core/common/avr/timer.c **** #include <avr/io.h>
  19:tmk_core/common/avr/timer.c **** #include <avr/interrupt.h>
  20:tmk_core/common/avr/timer.c **** #include <util/atomic.h>
  21:tmk_core/common/avr/timer.c **** #include <stdint.h>
  22:tmk_core/common/avr/timer.c **** #include "timer_avr.h"
  23:tmk_core/common/avr/timer.c **** #include "timer.h"
  24:tmk_core/common/avr/timer.c **** 
  25:tmk_core/common/avr/timer.c **** // counter resolution 1ms
  26:tmk_core/common/avr/timer.c **** // NOTE: union { uint32_t timer32; struct { uint16_t dummy; uint16_t timer16; }}
  27:tmk_core/common/avr/timer.c **** volatile uint32_t timer_count;
  28:tmk_core/common/avr/timer.c **** 
  29:tmk_core/common/avr/timer.c **** /** \brief timer initialization
  30:tmk_core/common/avr/timer.c ****  *
  31:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  32:tmk_core/common/avr/timer.c ****  */
  33:tmk_core/common/avr/timer.c **** void timer_init(void) {
  17               		.loc 1 33 23 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  34:tmk_core/common/avr/timer.c **** #if TIMER_PRESCALER == 1
  35:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS00);
  36:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 8
  37:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS01);
  38:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 64
  39:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS00) | _BV(CS01);
  23               		.loc 1 39 5 view .LVU1
  24               	.LVL0:
  40:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 256
  41:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS02);
  42:tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 1024
  43:tmk_core/common/avr/timer.c ****     uint8_t prescaler = _BV(CS00) | _BV(CS02);
  44:tmk_core/common/avr/timer.c **** #else
  45:tmk_core/common/avr/timer.c **** #    error "Timer prescaler value is not valid"
  46:tmk_core/common/avr/timer.c **** #endif
  47:tmk_core/common/avr/timer.c **** 
  48:tmk_core/common/avr/timer.c **** #if defined(__AVR_ATmega32A__)
  49:tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  50:tmk_core/common/avr/timer.c ****     TCCR0 = _BV(WGM01) | prescaler;
  51:tmk_core/common/avr/timer.c **** 
  52:tmk_core/common/avr/timer.c ****     OCR0  = TIMER_RAW_TOP;
  53:tmk_core/common/avr/timer.c ****     TIMSK = _BV(OCIE0);
  54:tmk_core/common/avr/timer.c **** #elif defined(__AVR_ATtiny85__)
  55:tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  56:tmk_core/common/avr/timer.c ****     TCCR0A = _BV(WGM01);
  57:tmk_core/common/avr/timer.c ****     TCCR0B = prescaler;
  58:tmk_core/common/avr/timer.c **** 
  59:tmk_core/common/avr/timer.c ****     OCR0A = TIMER_RAW_TOP;
  60:tmk_core/common/avr/timer.c ****     TIMSK = _BV(OCIE0A);
  61:tmk_core/common/avr/timer.c **** #else
  62:tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  63:tmk_core/common/avr/timer.c ****     TCCR0A = _BV(WGM01);
  25               		.loc 1 63 5 view .LVU2
  26               		.loc 1 63 12 is_stmt 0 view .LVU3
  27 0000 82E0      		ldi r24,lo8(2)
  28 0002 84BD      		out 0x24,r24
  64:tmk_core/common/avr/timer.c ****     TCCR0B = prescaler;
  29               		.loc 1 64 5 is_stmt 1 view .LVU4
  30               		.loc 1 64 12 is_stmt 0 view .LVU5
  31 0004 93E0      		ldi r25,lo8(3)
  32 0006 95BD      		out 0x25,r25
  65:tmk_core/common/avr/timer.c **** 
  66:tmk_core/common/avr/timer.c ****     OCR0A  = TIMER_RAW_TOP;
  33               		.loc 1 66 5 is_stmt 1 view .LVU6
  34               		.loc 1 66 12 is_stmt 0 view .LVU7
  35 0008 9AEF      		ldi r25,lo8(-6)
  36 000a 97BD      		out 0x27,r25
  67:tmk_core/common/avr/timer.c ****     TIMSK0 = _BV(OCIE0A);
  37               		.loc 1 67 5 is_stmt 1 view .LVU8
  38               		.loc 1 67 12 is_stmt 0 view .LVU9
  39 000c 8093 6E00 		sts 110,r24
  40               	/* epilogue start */
  68:tmk_core/common/avr/timer.c **** #endif
  69:tmk_core/common/avr/timer.c **** }
  41               		.loc 1 69 1 view .LVU10
  42 0010 0895      		ret
  43               		.cfi_endproc
  44               	.LFE5:
  46               		.section	.text.timer_clear,"ax",@progbits
  47               	.global	timer_clear
  49               	timer_clear:
  50               	.LFB6:
  70:tmk_core/common/avr/timer.c **** 
  71:tmk_core/common/avr/timer.c **** /** \brief timer clear
  72:tmk_core/common/avr/timer.c ****  *
  73:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  74:tmk_core/common/avr/timer.c ****  */
  75:tmk_core/common/avr/timer.c **** inline void timer_clear(void) {
  51               		.loc 1 75 31 is_stmt 1 view -0
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  76:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { timer_count = 0; }
  57               		.loc 1 76 5 view .LVU12
  58               	.LBB27:
  59               		.loc 1 76 5 view .LVU13
  60 0000 8FB7      		in r24,__SREG__
  61               	.LVL1:
  62               	.LBB28:
  63               	.LBI28:
  64               		.file 2 "/usr/avr/include/util/atomic.h"
   1:/usr/avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/avr/include/util/atomic.h **** 
   4:/usr/avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/avr/include/util/atomic.h **** 
   7:/usr/avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/avr/include/util/atomic.h **** 
  10:/usr/avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/avr/include/util/atomic.h ****      distribution.
  14:/usr/avr/include/util/atomic.h **** 
  15:/usr/avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/avr/include/util/atomic.h **** 
  19:/usr/avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/avr/include/util/atomic.h **** */
  31:/usr/avr/include/util/atomic.h **** 
  32:/usr/avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/avr/include/util/atomic.h **** 
  34:/usr/avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/avr/include/util/atomic.h **** 
  37:/usr/avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/avr/include/util/atomic.h **** 
  40:/usr/avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/avr/include/util/atomic.h **** {
  44:/usr/avr/include/util/atomic.h ****     sei();
  45:/usr/avr/include/util/atomic.h ****     return 1;
  46:/usr/avr/include/util/atomic.h **** }
  47:/usr/avr/include/util/atomic.h **** 
  48:/usr/avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  65               		.loc 2 48 27 view .LVU14
  66               	.LBB29:
  49:/usr/avr/include/util/atomic.h **** {
  50:/usr/avr/include/util/atomic.h ****     cli();
  67               		.loc 2 50 5 view .LVU15
  68               	/* #APP */
  69               	 ;  50 "/usr/avr/include/util/atomic.h" 1
  70 0002 F894      		cli
  71               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h ****     return 1;
  72               		.loc 2 51 5 view .LVU16
  73               	.LVL2:
  74               		.loc 2 51 5 is_stmt 0 view .LVU17
  75               	/* #NOAPP */
  76               	.LBE29:
  77               	.LBE28:
  78               		.loc 1 76 41 is_stmt 1 view .LVU18
  79               		.loc 1 76 53 is_stmt 0 view .LVU19
  80 0004 1092 0000 		sts timer_count,__zero_reg__
  81 0008 1092 0000 		sts timer_count+1,__zero_reg__
  82 000c 1092 0000 		sts timer_count+2,__zero_reg__
  83 0010 1092 0000 		sts timer_count+3,__zero_reg__
  84               	.LVL3:
  85               	.LBB30:
  86               	.LBI30:
  52:/usr/avr/include/util/atomic.h **** }
  53:/usr/avr/include/util/atomic.h **** 
  54:/usr/avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/avr/include/util/atomic.h **** {
  56:/usr/avr/include/util/atomic.h ****     sei();
  57:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:/usr/avr/include/util/atomic.h ****     (void)__s;
  59:/usr/avr/include/util/atomic.h **** }
  60:/usr/avr/include/util/atomic.h **** 
  61:/usr/avr/include/util/atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:/usr/avr/include/util/atomic.h **** {
  63:/usr/avr/include/util/atomic.h ****     cli();
  64:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:/usr/avr/include/util/atomic.h ****     (void)__s;
  66:/usr/avr/include/util/atomic.h **** }
  67:/usr/avr/include/util/atomic.h **** 
  68:/usr/avr/include/util/atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  87               		.loc 2 68 24 is_stmt 1 view .LVU20
  88               	.LBB31:
  69:/usr/avr/include/util/atomic.h **** {
  70:/usr/avr/include/util/atomic.h ****     SREG = *__s;
  89               		.loc 2 70 5 view .LVU21
  90               		.loc 2 70 10 is_stmt 0 view .LVU22
  91 0014 8FBF      		out __SREG__,r24
  71:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  92               		.loc 2 71 5 is_stmt 1 view .LVU23
  93               	.LVL4:
  94               	/* epilogue start */
  95               		.loc 2 71 5 is_stmt 0 view .LVU24
  96               	.LBE31:
  97               	.LBE30:
  98               	.LBE27:
  77:tmk_core/common/avr/timer.c **** }
  99               		.loc 1 77 1 view .LVU25
 100 0016 0895      		ret
 101               		.cfi_endproc
 102               	.LFE6:
 104               		.section	.text.timer_read,"ax",@progbits
 105               	.global	timer_read
 107               	timer_read:
 108               	.LFB7:
  78:tmk_core/common/avr/timer.c **** 
  79:tmk_core/common/avr/timer.c **** /** \brief timer read
  80:tmk_core/common/avr/timer.c ****  *
  81:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  82:tmk_core/common/avr/timer.c ****  */
  83:tmk_core/common/avr/timer.c **** inline uint16_t timer_read(void) {
 109               		.loc 1 83 34 is_stmt 1 view -0
 110               		.cfi_startproc
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  84:tmk_core/common/avr/timer.c ****     uint32_t t;
 115               		.loc 1 84 5 view .LVU27
  85:tmk_core/common/avr/timer.c **** 
  86:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
 116               		.loc 1 86 5 view .LVU28
 117               	.LBB32:
 118               		.loc 1 86 5 view .LVU29
 119 0000 2FB7      		in r18,__SREG__
 120               	.LVL5:
 121               	.LBB33:
 122               	.LBI33:
  48:/usr/avr/include/util/atomic.h **** {
 123               		.loc 2 48 27 view .LVU30
 124               	.LBB34:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 125               		.loc 2 50 5 view .LVU31
 126               	/* #APP */
 127               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 128 0002 F894      		cli
 129               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 130               		.loc 2 51 5 view .LVU32
 131               	.LVL6:
  51:/usr/avr/include/util/atomic.h **** }
 132               		.loc 2 51 5 is_stmt 0 view .LVU33
 133               	/* #NOAPP */
 134               	.LBE34:
 135               	.LBE33:
 136               		.loc 1 86 41 is_stmt 1 view .LVU34
 137               		.loc 1 86 43 is_stmt 0 view .LVU35
 138 0004 8091 0000 		lds r24,timer_count
 139 0008 9091 0000 		lds r25,timer_count+1
 140 000c A091 0000 		lds r26,timer_count+2
 141 0010 B091 0000 		lds r27,timer_count+3
 142               	.LVL7:
 143               	.LBB35:
 144               	.LBI35:
  68:/usr/avr/include/util/atomic.h **** {
 145               		.loc 2 68 24 is_stmt 1 view .LVU36
 146               	.LBB36:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 147               		.loc 2 70 5 view .LVU37
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 148               		.loc 2 70 10 is_stmt 0 view .LVU38
 149 0014 2FBF      		out __SREG__,r18
 150               		.loc 2 71 5 is_stmt 1 view .LVU39
 151               	.LVL8:
 152               		.loc 2 71 5 is_stmt 0 view .LVU40
 153               	.LBE36:
 154               	.LBE35:
 155               	.LBE32:
  87:tmk_core/common/avr/timer.c **** 
  88:tmk_core/common/avr/timer.c ****     return (t & 0xFFFF);
 156               		.loc 1 88 5 is_stmt 1 view .LVU41
 157               	/* epilogue start */
  89:tmk_core/common/avr/timer.c **** }
 158               		.loc 1 89 1 is_stmt 0 view .LVU42
 159 0016 0895      		ret
 160               		.cfi_endproc
 161               	.LFE7:
 163               		.section	.text.timer_read32,"ax",@progbits
 164               	.global	timer_read32
 166               	timer_read32:
 167               	.LFB8:
  90:tmk_core/common/avr/timer.c **** 
  91:tmk_core/common/avr/timer.c **** /** \brief timer read32
  92:tmk_core/common/avr/timer.c ****  *
  93:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
  94:tmk_core/common/avr/timer.c ****  */
  95:tmk_core/common/avr/timer.c **** inline uint32_t timer_read32(void) {
 168               		.loc 1 95 36 is_stmt 1 view -0
 169               		.cfi_startproc
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
  96:tmk_core/common/avr/timer.c ****     uint32_t t;
 174               		.loc 1 96 5 view .LVU44
  97:tmk_core/common/avr/timer.c **** 
  98:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
 175               		.loc 1 98 5 view .LVU45
 176               	.LBB37:
 177               		.loc 1 98 5 view .LVU46
 178 0000 2FB7      		in r18,__SREG__
 179               	.LVL9:
 180               	.LBB38:
 181               	.LBI38:
  48:/usr/avr/include/util/atomic.h **** {
 182               		.loc 2 48 27 view .LVU47
 183               	.LBB39:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 184               		.loc 2 50 5 view .LVU48
 185               	/* #APP */
 186               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 187 0002 F894      		cli
 188               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 189               		.loc 2 51 5 view .LVU49
 190               	.LVL10:
  51:/usr/avr/include/util/atomic.h **** }
 191               		.loc 2 51 5 is_stmt 0 view .LVU50
 192               	/* #NOAPP */
 193               	.LBE39:
 194               	.LBE38:
 195               		.loc 1 98 41 is_stmt 1 view .LVU51
 196               		.loc 1 98 43 is_stmt 0 view .LVU52
 197 0004 6091 0000 		lds r22,timer_count
 198 0008 7091 0000 		lds r23,timer_count+1
 199 000c 8091 0000 		lds r24,timer_count+2
 200 0010 9091 0000 		lds r25,timer_count+3
 201               	.LVL11:
 202               	.LBB40:
 203               	.LBI40:
  68:/usr/avr/include/util/atomic.h **** {
 204               		.loc 2 68 24 is_stmt 1 view .LVU53
 205               	.LBB41:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 206               		.loc 2 70 5 view .LVU54
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 207               		.loc 2 70 10 is_stmt 0 view .LVU55
 208 0014 2FBF      		out __SREG__,r18
 209               		.loc 2 71 5 is_stmt 1 view .LVU56
 210               	.LVL12:
 211               		.loc 2 71 5 is_stmt 0 view .LVU57
 212               	.LBE41:
 213               	.LBE40:
 214               	.LBE37:
  99:tmk_core/common/avr/timer.c **** 
 100:tmk_core/common/avr/timer.c ****     return t;
 215               		.loc 1 100 5 is_stmt 1 view .LVU58
 216               	/* epilogue start */
 101:tmk_core/common/avr/timer.c **** }
 217               		.loc 1 101 1 is_stmt 0 view .LVU59
 218 0016 0895      		ret
 219               		.cfi_endproc
 220               	.LFE8:
 222               		.section	.text.timer_elapsed,"ax",@progbits
 223               	.global	timer_elapsed
 225               	timer_elapsed:
 226               	.LVL13:
 227               	.LFB9:
 102:tmk_core/common/avr/timer.c **** 
 103:tmk_core/common/avr/timer.c **** /** \brief timer elapsed
 104:tmk_core/common/avr/timer.c ****  *
 105:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
 106:tmk_core/common/avr/timer.c ****  */
 107:tmk_core/common/avr/timer.c **** inline uint16_t timer_elapsed(uint16_t last) {
 228               		.loc 1 107 46 is_stmt 1 view -0
 229               		.cfi_startproc
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 0 */
 233               	.L__stack_usage = 0
 234               		.loc 1 107 46 is_stmt 0 view .LVU61
 235 0000 9C01      		movw r18,r24
 108:tmk_core/common/avr/timer.c ****     uint32_t t;
 236               		.loc 1 108 5 is_stmt 1 view .LVU62
 109:tmk_core/common/avr/timer.c **** 
 110:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
 237               		.loc 1 110 5 view .LVU63
 238               	.LBB42:
 239               		.loc 1 110 5 view .LVU64
 240 0002 4FB7      		in r20,__SREG__
 241               	.LVL14:
 242               	.LBB43:
 243               	.LBI43:
  48:/usr/avr/include/util/atomic.h **** {
 244               		.loc 2 48 27 view .LVU65
 245               	.LBB44:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 246               		.loc 2 50 5 view .LVU66
 247               	/* #APP */
 248               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 249 0004 F894      		cli
 250               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 251               		.loc 2 51 5 view .LVU67
 252               	.LVL15:
  51:/usr/avr/include/util/atomic.h **** }
 253               		.loc 2 51 5 is_stmt 0 view .LVU68
 254               	/* #NOAPP */
 255               	.LBE44:
 256               	.LBE43:
 257               		.loc 1 110 41 is_stmt 1 view .LVU69
 258               		.loc 1 110 43 is_stmt 0 view .LVU70
 259 0006 8091 0000 		lds r24,timer_count
 260 000a 9091 0000 		lds r25,timer_count+1
 261 000e A091 0000 		lds r26,timer_count+2
 262 0012 B091 0000 		lds r27,timer_count+3
 263               	.LVL16:
 264               	.LBB45:
 265               	.LBI45:
  68:/usr/avr/include/util/atomic.h **** {
 266               		.loc 2 68 24 is_stmt 1 view .LVU71
 267               	.LBB46:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 268               		.loc 2 70 5 view .LVU72
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 269               		.loc 2 70 10 is_stmt 0 view .LVU73
 270 0016 4FBF      		out __SREG__,r20
 271               		.loc 2 71 5 is_stmt 1 view .LVU74
 272               	.LVL17:
 273               		.loc 2 71 5 is_stmt 0 view .LVU75
 274               	.LBE46:
 275               	.LBE45:
 276               	.LBE42:
 111:tmk_core/common/avr/timer.c **** 
 112:tmk_core/common/avr/timer.c ****     return TIMER_DIFF_16((t & 0xFFFF), last);
 277               		.loc 1 112 5 is_stmt 1 view .LVU76
 113:tmk_core/common/avr/timer.c **** }
 278               		.loc 1 113 1 is_stmt 0 view .LVU77
 279 0018 821B      		sub r24,r18
 280 001a 930B      		sbc r25,r19
 281               	/* epilogue start */
 282 001c 0895      		ret
 283               		.cfi_endproc
 284               	.LFE9:
 286               		.section	.text.timer_elapsed32,"ax",@progbits
 287               	.global	timer_elapsed32
 289               	timer_elapsed32:
 290               	.LVL18:
 291               	.LFB10:
 114:tmk_core/common/avr/timer.c **** 
 115:tmk_core/common/avr/timer.c **** /** \brief timer elapsed32
 116:tmk_core/common/avr/timer.c ****  *
 117:tmk_core/common/avr/timer.c ****  * FIXME: needs doc
 118:tmk_core/common/avr/timer.c ****  */
 119:tmk_core/common/avr/timer.c **** inline uint32_t timer_elapsed32(uint32_t last) {
 292               		.loc 1 119 48 is_stmt 1 view -0
 293               		.cfi_startproc
 294               		.loc 1 119 48 is_stmt 0 view .LVU79
 295 0000 CF92      		push r12
 296               	.LCFI0:
 297               		.cfi_def_cfa_offset 3
 298               		.cfi_offset 12, -2
 299 0002 DF92      		push r13
 300               	.LCFI1:
 301               		.cfi_def_cfa_offset 4
 302               		.cfi_offset 13, -3
 303 0004 EF92      		push r14
 304               	.LCFI2:
 305               		.cfi_def_cfa_offset 5
 306               		.cfi_offset 14, -4
 307 0006 FF92      		push r15
 308               	.LCFI3:
 309               		.cfi_def_cfa_offset 6
 310               		.cfi_offset 15, -5
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 4 */
 314               	.L__stack_usage = 4
 120:tmk_core/common/avr/timer.c ****     uint32_t t;
 315               		.loc 1 120 5 is_stmt 1 view .LVU80
 121:tmk_core/common/avr/timer.c **** 
 122:tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { t = timer_count; }
 316               		.loc 1 122 5 view .LVU81
 317               	.LBB47:
 318               		.loc 1 122 5 view .LVU82
 319 0008 2FB7      		in r18,__SREG__
 320               	.LVL19:
 321               	.LBB48:
 322               	.LBI48:
  48:/usr/avr/include/util/atomic.h **** {
 323               		.loc 2 48 27 view .LVU83
 324               	.LBB49:
  50:/usr/avr/include/util/atomic.h ****     return 1;
 325               		.loc 2 50 5 view .LVU84
 326               	/* #APP */
 327               	 ;  50 "/usr/avr/include/util/atomic.h" 1
 328 000a F894      		cli
 329               	 ;  0 "" 2
  51:/usr/avr/include/util/atomic.h **** }
 330               		.loc 2 51 5 view .LVU85
 331               	.LVL20:
  51:/usr/avr/include/util/atomic.h **** }
 332               		.loc 2 51 5 is_stmt 0 view .LVU86
 333               	/* #NOAPP */
 334               	.LBE49:
 335               	.LBE48:
 336               		.loc 1 122 41 is_stmt 1 view .LVU87
 337               		.loc 1 122 43 is_stmt 0 view .LVU88
 338 000c C090 0000 		lds r12,timer_count
 339 0010 D090 0000 		lds r13,timer_count+1
 340 0014 E090 0000 		lds r14,timer_count+2
 341 0018 F090 0000 		lds r15,timer_count+3
 342               	.LVL21:
 343               	.LBB50:
 344               	.LBI50:
  68:/usr/avr/include/util/atomic.h **** {
 345               		.loc 2 68 24 is_stmt 1 view .LVU89
 346               	.LBB51:
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 347               		.loc 2 70 5 view .LVU90
  70:/usr/avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 348               		.loc 2 70 10 is_stmt 0 view .LVU91
 349 001c 2FBF      		out __SREG__,r18
 350               		.loc 2 71 5 is_stmt 1 view .LVU92
 351               	.LVL22:
 352               		.loc 2 71 5 is_stmt 0 view .LVU93
 353               	.LBE51:
 354               	.LBE50:
 355               	.LBE47:
 123:tmk_core/common/avr/timer.c **** 
 124:tmk_core/common/avr/timer.c ****     return TIMER_DIFF_32(t, last);
 356               		.loc 1 124 5 is_stmt 1 view .LVU94
 357               		.loc 1 124 12 is_stmt 0 view .LVU95
 358 001e A701      		movw r20,r14
 359 0020 9601      		movw r18,r12
 360 0022 261B      		sub r18,r22
 361 0024 370B      		sbc r19,r23
 362 0026 480B      		sbc r20,r24
 363 0028 590B      		sbc r21,r25
 364 002a CA01      		movw r24,r20
 365 002c B901      		movw r22,r18
 366               	.LVL23:
 367               	/* epilogue start */
 125:tmk_core/common/avr/timer.c **** }
 368               		.loc 1 125 1 view .LVU96
 369 002e FF90      		pop r15
 370 0030 EF90      		pop r14
 371 0032 DF90      		pop r13
 372 0034 CF90      		pop r12
 373               	.LVL24:
 374               		.loc 1 125 1 view .LVU97
 375 0036 0895      		ret
 376               		.cfi_endproc
 377               	.LFE10:
 379               		.section	.text.__vector_21,"ax",@progbits
 380               	.global	__vector_21
 382               	__vector_21:
 383               	.LFB11:
 126:tmk_core/common/avr/timer.c **** 
 127:tmk_core/common/avr/timer.c **** // excecuted once per 1ms.(excess for just timer count?)
 128:tmk_core/common/avr/timer.c **** #ifndef __AVR_ATmega32A__
 129:tmk_core/common/avr/timer.c **** #    define TIMER_INTERRUPT_VECTOR TIMER0_COMPA_vect
 130:tmk_core/common/avr/timer.c **** #else
 131:tmk_core/common/avr/timer.c **** #    define TIMER_INTERRUPT_VECTOR TIMER0_COMP_vect
 132:tmk_core/common/avr/timer.c **** #endif
 133:tmk_core/common/avr/timer.c **** ISR(TIMER_INTERRUPT_VECTOR, ISR_NOBLOCK) { timer_count++; }
 384               		.loc 1 133 42 is_stmt 1 view -0
 385               		.cfi_startproc
 386 0000 7894      		sei
 387 0002 1F92 1FB6 		__gcc_isr 1
 387      1F92 1124 
 387      8F93 
 388 000c 9F93      		push r25
 389               	.LCFI4:
 390               		.cfi_def_cfa_offset 3
 391               		.cfi_offset 25, -2
 392 000e AF93      		push r26
 393               	.LCFI5:
 394               		.cfi_def_cfa_offset 4
 395               		.cfi_offset 26, -3
 396 0010 BF93      		push r27
 397               	.LCFI6:
 398               		.cfi_def_cfa_offset 5
 399               		.cfi_offset 27, -4
 400               	/* prologue: Interrupt */
 401               	/* frame size = 0 */
 402               	/* stack size = 3...7 */
 403               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 404               		.loc 1 133 44 view .LVU99
 405               		.loc 1 133 55 is_stmt 0 view .LVU100
 406 0012 8091 0000 		lds r24,timer_count
 407 0016 9091 0000 		lds r25,timer_count+1
 408 001a A091 0000 		lds r26,timer_count+2
 409 001e B091 0000 		lds r27,timer_count+3
 410 0022 0196      		adiw r24,1
 411 0024 A11D      		adc r26,__zero_reg__
 412 0026 B11D      		adc r27,__zero_reg__
 413 0028 8093 0000 		sts timer_count,r24
 414 002c 9093 0000 		sts timer_count+1,r25
 415 0030 A093 0000 		sts timer_count+2,r26
 416 0034 B093 0000 		sts timer_count+3,r27
 417               	/* epilogue start */
 418               		.loc 1 133 1 view .LVU101
 419 0038 BF91      		pop r27
 420 003a AF91      		pop r26
 421 003c 9F91      		pop r25
 422 003e 8F91 1F90 		__gcc_isr 2
 422      1FBE 1F90 
 423 0046 1895      		reti
 424               		__gcc_isr 0,r24
 425               		.cfi_endproc
 426               	.LFE11:
 428               		.comm	timer_count,4,1
 429               		.text
 430               	.Letext0:
 431               		.file 3 "/usr/avr/include/stdint.h"
 432               		.file 4 "tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/cczKdRx4.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczKdRx4.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczKdRx4.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczKdRx4.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cczKdRx4.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczKdRx4.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczKdRx4.s:14     .text.timer_init:0000000000000000 timer_init
     /tmp/cczKdRx4.s:49     .text.timer_clear:0000000000000000 timer_clear
                            *COM*:0000000000000004 timer_count
     /tmp/cczKdRx4.s:107    .text.timer_read:0000000000000000 timer_read
     /tmp/cczKdRx4.s:166    .text.timer_read32:0000000000000000 timer_read32
     /tmp/cczKdRx4.s:225    .text.timer_elapsed:0000000000000000 timer_elapsed
     /tmp/cczKdRx4.s:289    .text.timer_elapsed32:0000000000000000 timer_elapsed32
     /tmp/cczKdRx4.s:382    .text.__vector_21:0000000000000000 __vector_21
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
__do_clear_bss
