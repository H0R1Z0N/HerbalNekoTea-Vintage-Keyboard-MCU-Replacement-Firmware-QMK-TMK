   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.default_layer_state_set_user,"ax",@progbits
  12               		.weak	default_layer_state_set_user
  14               	default_layer_state_set_user:
  15               	.LVL0:
  16               	.LFB4:
  17               		.file 1 "tmk_core/common/action_layer.c"
   1:tmk_core/common/action_layer.c **** #include <stdint.h>
   2:tmk_core/common/action_layer.c **** #include "keyboard.h"
   3:tmk_core/common/action_layer.c **** #include "action.h"
   4:tmk_core/common/action_layer.c **** #include "util.h"
   5:tmk_core/common/action_layer.c **** #include "action_layer.h"
   6:tmk_core/common/action_layer.c **** 
   7:tmk_core/common/action_layer.c **** #ifdef DEBUG_ACTION
   8:tmk_core/common/action_layer.c **** #    include "debug.h"
   9:tmk_core/common/action_layer.c **** #else
  10:tmk_core/common/action_layer.c **** #    include "nodebug.h"
  11:tmk_core/common/action_layer.c **** #endif
  12:tmk_core/common/action_layer.c **** 
  13:tmk_core/common/action_layer.c **** /** \brief Default Layer State
  14:tmk_core/common/action_layer.c ****  */
  15:tmk_core/common/action_layer.c **** layer_state_t default_layer_state = 0;
  16:tmk_core/common/action_layer.c **** 
  17:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set At user Level
  18:tmk_core/common/action_layer.c ****  *
  19:tmk_core/common/action_layer.c ****  * Run user code on default layer state change
  20:tmk_core/common/action_layer.c ****  */
  21:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_user(layer_state_t state) { return stat
  18               		.loc 1 21 87 view -0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24               		.loc 1 21 89 view .LVU1
  25               	/* epilogue start */
  26               		.loc 1 21 1 is_stmt 0 view .LVU2
  27 0000 0895      		ret
  28               		.cfi_endproc
  29               	.LFE4:
  31               		.set	default_layer_state_set_user.localalias.0,default_layer_state_set_user
  32               		.section	.text.default_layer_state_set_kb,"ax",@progbits
  33               		.weak	default_layer_state_set_kb
  35               	default_layer_state_set_kb:
  36               	.LVL1:
  37               	.LFB5:
  22:tmk_core/common/action_layer.c **** 
  23:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set At Keyboard Level
  24:tmk_core/common/action_layer.c ****  *
  25:tmk_core/common/action_layer.c ****  *  Run keyboard code on default layer state change
  26:tmk_core/common/action_layer.c ****  */
  27:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_kb(layer_state_t state) { return defaul
  38               		.loc 1 27 85 is_stmt 1 view -0
  39               		.cfi_startproc
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 0 */
  43               	.L__stack_usage = 0
  44               		.loc 1 27 87 view .LVU4
  45               		.loc 1 27 94 is_stmt 0 view .LVU5
  46 0000 0C94 0000 		jmp default_layer_state_set_user
  47               	.LVL2:
  48               		.loc 1 27 94 view .LVU6
  49               		.cfi_endproc
  50               	.LFE5:
  52               		.section	.text.default_layer_state_set,"ax",@progbits
  54               	default_layer_state_set:
  55               	.LVL3:
  56               	.LFB6:
  28:tmk_core/common/action_layer.c **** 
  29:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set
  30:tmk_core/common/action_layer.c ****  *
  31:tmk_core/common/action_layer.c ****  * Static function to set the default layer state, prints debug info and clears keys
  32:tmk_core/common/action_layer.c ****  */
  33:tmk_core/common/action_layer.c **** static void default_layer_state_set(layer_state_t state) {
  57               		.loc 1 33 58 is_stmt 1 view -0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  34:tmk_core/common/action_layer.c ****     state = default_layer_state_set_kb(state);
  63               		.loc 1 34 5 view .LVU8
  64               		.loc 1 34 13 is_stmt 0 view .LVU9
  65 0000 0E94 0000 		call default_layer_state_set_kb
  66               	.LVL4:
  35:tmk_core/common/action_layer.c ****     debug("default_layer_state: ");
  67               		.loc 1 35 35 is_stmt 1 view .LVU10
  36:tmk_core/common/action_layer.c ****     default_layer_debug();
  68               		.loc 1 36 5 view .LVU11
  37:tmk_core/common/action_layer.c ****     debug(" to ");
  69               		.loc 1 37 18 view .LVU12
  38:tmk_core/common/action_layer.c ****     default_layer_state = state;
  70               		.loc 1 38 5 view .LVU13
  71               		.loc 1 38 25 is_stmt 0 view .LVU14
  72 0004 6093 0000 		sts default_layer_state,r22
  73 0008 7093 0000 		sts default_layer_state+1,r23
  74 000c 8093 0000 		sts default_layer_state+2,r24
  75 0010 9093 0000 		sts default_layer_state+3,r25
  39:tmk_core/common/action_layer.c ****     default_layer_debug();
  76               		.loc 1 39 5 is_stmt 1 view .LVU15
  40:tmk_core/common/action_layer.c ****     debug("\n");
  77               		.loc 1 40 16 view .LVU16
  41:tmk_core/common/action_layer.c **** #ifdef STRICT_LAYER_RELEASE
  42:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
  43:tmk_core/common/action_layer.c **** #else
  44:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
  78               		.loc 1 44 5 view .LVU17
  79 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
  80               	.LVL5:
  81               		.loc 1 44 5 is_stmt 0 view .LVU18
  82               		.cfi_endproc
  83               	.LFE6:
  85               		.section	.text.default_layer_debug,"ax",@progbits
  86               	.global	default_layer_debug
  88               	default_layer_debug:
  89               	.LFB7:
  45:tmk_core/common/action_layer.c **** #endif
  46:tmk_core/common/action_layer.c **** }
  47:tmk_core/common/action_layer.c **** 
  48:tmk_core/common/action_layer.c **** /** \brief Default Layer Print
  49:tmk_core/common/action_layer.c ****  *
  50:tmk_core/common/action_layer.c ****  * Print out the hex value of the 32-bit default layer state, as well as the value of the highest b
  51:tmk_core/common/action_layer.c ****  */
  52:tmk_core/common/action_layer.c **** void default_layer_debug(void) { dprintf("%08lX(%u)", default_layer_state, get_highest_layer(defaul
  90               		.loc 1 52 32 is_stmt 1 view -0
  91               		.cfi_startproc
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
  96               		.loc 1 52 115 view .LVU20
  97               	/* epilogue start */
  98               		.loc 1 52 1 is_stmt 0 view .LVU21
  99 0000 0895      		ret
 100               		.cfi_endproc
 101               	.LFE7:
 103               		.section	.text.default_layer_set,"ax",@progbits
 104               	.global	default_layer_set
 106               	default_layer_set:
 107               	.LVL6:
 108               	.LFB8:
  53:tmk_core/common/action_layer.c **** 
  54:tmk_core/common/action_layer.c **** /** \brief Default Layer Set
  55:tmk_core/common/action_layer.c ****  *
  56:tmk_core/common/action_layer.c ****  * Sets the default layer state.
  57:tmk_core/common/action_layer.c ****  */
  58:tmk_core/common/action_layer.c **** void default_layer_set(layer_state_t state) { default_layer_state_set(state); }
 109               		.loc 1 58 45 is_stmt 1 view -0
 110               		.cfi_startproc
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
 115               		.loc 1 58 47 view .LVU23
 116 0000 0C94 0000 		jmp default_layer_state_set
 117               	.LVL7:
 118               		.loc 1 58 47 is_stmt 0 view .LVU24
 119               		.cfi_endproc
 120               	.LFE8:
 122               		.section	.text.default_layer_or,"ax",@progbits
 123               	.global	default_layer_or
 125               	default_layer_or:
 126               	.LVL8:
 127               	.LFB9:
  59:tmk_core/common/action_layer.c **** 
  60:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  61:tmk_core/common/action_layer.c **** /** \brief Default Layer Or
  62:tmk_core/common/action_layer.c ****  *
  63:tmk_core/common/action_layer.c ****  * Turns on the default layer based on matching bits between specifed layer and existing layer stat
  64:tmk_core/common/action_layer.c ****  */
  65:tmk_core/common/action_layer.c **** void default_layer_or(layer_state_t state) { default_layer_state_set(default_layer_state | state); 
 128               		.loc 1 65 44 is_stmt 1 view -0
 129               		.cfi_startproc
 130               		.loc 1 65 44 is_stmt 0 view .LVU26
 131 0000 0F93      		push r16
 132               	.LCFI0:
 133               		.cfi_def_cfa_offset 3
 134               		.cfi_offset 16, -2
 135 0002 1F93      		push r17
 136               	.LCFI1:
 137               		.cfi_def_cfa_offset 4
 138               		.cfi_offset 17, -3
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 2 */
 142               	.L__stack_usage = 2
 143               		.loc 1 65 46 is_stmt 1 view .LVU27
 144 0004 0091 0000 		lds r16,default_layer_state
 145 0008 1091 0000 		lds r17,default_layer_state+1
 146 000c 2091 0000 		lds r18,default_layer_state+2
 147 0010 3091 0000 		lds r19,default_layer_state+3
 148 0014 602B      		or r22,r16
 149               	.LVL9:
 150               		.loc 1 65 46 is_stmt 0 view .LVU28
 151 0016 712B      		or r23,r17
 152 0018 822B      		or r24,r18
 153 001a 932B      		or r25,r19
 154               	/* epilogue start */
 155               		.loc 1 65 1 view .LVU29
 156 001c 1F91      		pop r17
 157 001e 0F91      		pop r16
 158               		.loc 1 65 46 view .LVU30
 159 0020 0C94 0000 		jmp default_layer_state_set
 160               	.LVL10:
 161               		.cfi_endproc
 162               	.LFE9:
 164               		.section	.text.default_layer_and,"ax",@progbits
 165               	.global	default_layer_and
 167               	default_layer_and:
 168               	.LVL11:
 169               	.LFB10:
  66:tmk_core/common/action_layer.c **** /** \brief Default Layer And
  67:tmk_core/common/action_layer.c ****  *
  68:tmk_core/common/action_layer.c ****  * Turns on default layer based on matching enabled bits between specifed layer and existing layer 
  69:tmk_core/common/action_layer.c ****  */
  70:tmk_core/common/action_layer.c **** void default_layer_and(layer_state_t state) { default_layer_state_set(default_layer_state & state);
 170               		.loc 1 70 45 is_stmt 1 view -0
 171               		.cfi_startproc
 172               		.loc 1 70 45 is_stmt 0 view .LVU32
 173 0000 0F93      		push r16
 174               	.LCFI2:
 175               		.cfi_def_cfa_offset 3
 176               		.cfi_offset 16, -2
 177 0002 1F93      		push r17
 178               	.LCFI3:
 179               		.cfi_def_cfa_offset 4
 180               		.cfi_offset 17, -3
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 2 */
 184               	.L__stack_usage = 2
 185               		.loc 1 70 47 is_stmt 1 view .LVU33
 186 0004 0091 0000 		lds r16,default_layer_state
 187 0008 1091 0000 		lds r17,default_layer_state+1
 188 000c 2091 0000 		lds r18,default_layer_state+2
 189 0010 3091 0000 		lds r19,default_layer_state+3
 190 0014 6023      		and r22,r16
 191               	.LVL12:
 192               		.loc 1 70 47 is_stmt 0 view .LVU34
 193 0016 7123      		and r23,r17
 194 0018 8223      		and r24,r18
 195 001a 9323      		and r25,r19
 196               	/* epilogue start */
 197               		.loc 1 70 1 view .LVU35
 198 001c 1F91      		pop r17
 199 001e 0F91      		pop r16
 200               		.loc 1 70 47 view .LVU36
 201 0020 0C94 0000 		jmp default_layer_state_set
 202               	.LVL13:
 203               		.cfi_endproc
 204               	.LFE10:
 206               		.section	.text.default_layer_xor,"ax",@progbits
 207               	.global	default_layer_xor
 209               	default_layer_xor:
 210               	.LVL14:
 211               	.LFB11:
  71:tmk_core/common/action_layer.c **** /** \brief Default Layer Xor
  72:tmk_core/common/action_layer.c ****  *
  73:tmk_core/common/action_layer.c ****  * Turns on default layer based on non-matching bits between specifed layer and existing layer stat
  74:tmk_core/common/action_layer.c ****  */
  75:tmk_core/common/action_layer.c **** void default_layer_xor(layer_state_t state) { default_layer_state_set(default_layer_state ^ state);
 212               		.loc 1 75 45 is_stmt 1 view -0
 213               		.cfi_startproc
 214               		.loc 1 75 45 is_stmt 0 view .LVU38
 215 0000 0F93      		push r16
 216               	.LCFI4:
 217               		.cfi_def_cfa_offset 3
 218               		.cfi_offset 16, -2
 219 0002 1F93      		push r17
 220               	.LCFI5:
 221               		.cfi_def_cfa_offset 4
 222               		.cfi_offset 17, -3
 223               	/* prologue: function */
 224               	/* frame size = 0 */
 225               	/* stack size = 2 */
 226               	.L__stack_usage = 2
 227               		.loc 1 75 47 is_stmt 1 view .LVU39
 228 0004 0091 0000 		lds r16,default_layer_state
 229 0008 1091 0000 		lds r17,default_layer_state+1
 230 000c 2091 0000 		lds r18,default_layer_state+2
 231 0010 3091 0000 		lds r19,default_layer_state+3
 232 0014 6027      		eor r22,r16
 233               	.LVL15:
 234               		.loc 1 75 47 is_stmt 0 view .LVU40
 235 0016 7127      		eor r23,r17
 236 0018 8227      		eor r24,r18
 237 001a 9327      		eor r25,r19
 238               	/* epilogue start */
 239               		.loc 1 75 1 view .LVU41
 240 001c 1F91      		pop r17
 241 001e 0F91      		pop r16
 242               		.loc 1 75 47 view .LVU42
 243 0020 0C94 0000 		jmp default_layer_state_set
 244               	.LVL16:
 245               		.cfi_endproc
 246               	.LFE11:
 248               		.section	.text.layer_state_set_user,"ax",@progbits
 249               		.weak	layer_state_set_user
 251               	layer_state_set_user:
 252               	.LFB34:
 253               		.cfi_startproc
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256               	/* stack size = 0 */
 257               	.L__stack_usage = 0
 258 0000 0C94 0000 		jmp default_layer_state_set_user.localalias.0
 259               		.cfi_endproc
 260               	.LFE34:
 262               		.section	.text.layer_state_set_kb,"ax",@progbits
 263               		.weak	layer_state_set_kb
 265               	layer_state_set_kb:
 266               	.LVL17:
 267               	.LFB13:
  76:tmk_core/common/action_layer.c **** #endif
  77:tmk_core/common/action_layer.c **** 
  78:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  79:tmk_core/common/action_layer.c **** /** \brief Keymap Layer State
  80:tmk_core/common/action_layer.c ****  */
  81:tmk_core/common/action_layer.c **** layer_state_t layer_state = 0;
  82:tmk_core/common/action_layer.c **** 
  83:tmk_core/common/action_layer.c **** /** \brief Layer state set user
  84:tmk_core/common/action_layer.c ****  *
  85:tmk_core/common/action_layer.c ****  * Runs user code on layer state change
  86:tmk_core/common/action_layer.c ****  */
  87:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_user(layer_state_t state) { return state; }
  88:tmk_core/common/action_layer.c **** 
  89:tmk_core/common/action_layer.c **** /** \brief Layer state set keyboard
  90:tmk_core/common/action_layer.c ****  *
  91:tmk_core/common/action_layer.c ****  * Runs keyboard code on layer state change
  92:tmk_core/common/action_layer.c ****  */
  93:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_kb(layer_state_t state) { return layer_state_se
 268               		.loc 1 93 77 is_stmt 1 view -0
 269               		.cfi_startproc
 270               	/* prologue: function */
 271               	/* frame size = 0 */
 272               	/* stack size = 0 */
 273               	.L__stack_usage = 0
 274               		.loc 1 93 79 view .LVU44
 275               		.loc 1 93 86 is_stmt 0 view .LVU45
 276 0000 0C94 0000 		jmp layer_state_set_user
 277               	.LVL18:
 278               		.loc 1 93 86 view .LVU46
 279               		.cfi_endproc
 280               	.LFE13:
 282               		.section	.text.layer_state_set,"ax",@progbits
 283               	.global	layer_state_set
 285               	layer_state_set:
 286               	.LVL19:
 287               	.LFB14:
  94:tmk_core/common/action_layer.c **** 
  95:tmk_core/common/action_layer.c **** /** \brief Layer state set
  96:tmk_core/common/action_layer.c ****  *
  97:tmk_core/common/action_layer.c ****  * Sets the layer to match the specifed state (a bitmask)
  98:tmk_core/common/action_layer.c ****  */
  99:tmk_core/common/action_layer.c **** void layer_state_set(layer_state_t state) {
 288               		.loc 1 99 43 is_stmt 1 view -0
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 100:tmk_core/common/action_layer.c ****     state = layer_state_set_kb(state);
 294               		.loc 1 100 5 view .LVU48
 295               		.loc 1 100 13 is_stmt 0 view .LVU49
 296 0000 0E94 0000 		call layer_state_set_kb
 297               	.LVL20:
 101:tmk_core/common/action_layer.c ****     dprint("layer_state: ");
 298               		.loc 1 101 28 is_stmt 1 view .LVU50
 102:tmk_core/common/action_layer.c ****     layer_debug();
 299               		.loc 1 102 5 view .LVU51
 103:tmk_core/common/action_layer.c ****     dprint(" to ");
 300               		.loc 1 103 19 view .LVU52
 104:tmk_core/common/action_layer.c ****     layer_state = state;
 301               		.loc 1 104 5 view .LVU53
 302               		.loc 1 104 17 is_stmt 0 view .LVU54
 303 0004 6093 0000 		sts layer_state,r22
 304 0008 7093 0000 		sts layer_state+1,r23
 305 000c 8093 0000 		sts layer_state+2,r24
 306 0010 9093 0000 		sts layer_state+3,r25
 105:tmk_core/common/action_layer.c ****     layer_debug();
 307               		.loc 1 105 5 is_stmt 1 view .LVU55
 106:tmk_core/common/action_layer.c ****     dprintln();
 308               		.loc 1 106 15 view .LVU56
 107:tmk_core/common/action_layer.c **** #    ifdef STRICT_LAYER_RELEASE
 108:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
 109:tmk_core/common/action_layer.c **** #    else
 110:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
 309               		.loc 1 110 5 view .LVU57
 310 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 311               	.LVL21:
 312               		.loc 1 110 5 is_stmt 0 view .LVU58
 313               		.cfi_endproc
 314               	.LFE14:
 316               		.section	.text.layer_clear,"ax",@progbits
 317               	.global	layer_clear
 319               	layer_clear:
 320               	.LFB15:
 111:tmk_core/common/action_layer.c **** #    endif
 112:tmk_core/common/action_layer.c **** }
 113:tmk_core/common/action_layer.c **** 
 114:tmk_core/common/action_layer.c **** /** \brief Layer clear
 115:tmk_core/common/action_layer.c ****  *
 116:tmk_core/common/action_layer.c ****  * Turn off all layers
 117:tmk_core/common/action_layer.c ****  */
 118:tmk_core/common/action_layer.c **** void layer_clear(void) { layer_state_set(0); }
 321               		.loc 1 118 24 is_stmt 1 view -0
 322               		.cfi_startproc
 323               	/* prologue: function */
 324               	/* frame size = 0 */
 325               	/* stack size = 0 */
 326               	.L__stack_usage = 0
 327               		.loc 1 118 26 view .LVU60
 328 0000 60E0      		ldi r22,0
 329 0002 70E0      		ldi r23,0
 330 0004 CB01      		movw r24,r22
 331 0006 0C94 0000 		jmp layer_state_set
 332               	.LVL22:
 333               		.cfi_endproc
 334               	.LFE15:
 336               		.section	.text.layer_state_cmp,"ax",@progbits
 337               	.global	layer_state_cmp
 339               	layer_state_cmp:
 340               	.LVL23:
 341               	.LFB17:
 119:tmk_core/common/action_layer.c **** 
 120:tmk_core/common/action_layer.c **** /** \brief Layer state is
 121:tmk_core/common/action_layer.c ****  *
 122:tmk_core/common/action_layer.c ****  * Return whether the given state is on (it might still be shadowed by a higher state, though)
 123:tmk_core/common/action_layer.c ****  */
 124:tmk_core/common/action_layer.c **** bool layer_state_is(uint8_t layer) { return layer_state_cmp(layer_state, layer); }
 125:tmk_core/common/action_layer.c **** 
 126:tmk_core/common/action_layer.c **** /** \brief Layer state compare
 127:tmk_core/common/action_layer.c ****  *
 128:tmk_core/common/action_layer.c ****  * Used for comparing layers {mostly used for unit testing}
 129:tmk_core/common/action_layer.c ****  */
 130:tmk_core/common/action_layer.c **** bool layer_state_cmp(layer_state_t cmp_layer_state, uint8_t layer) {
 342               		.loc 1 130 68 view -0
 343               		.cfi_startproc
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 131:tmk_core/common/action_layer.c ****     if (!cmp_layer_state) {
 348               		.loc 1 131 5 view .LVU62
 349               		.loc 1 131 8 is_stmt 0 view .LVU63
 350 0000 6115      		cp r22,__zero_reg__
 351 0002 7105      		cpc r23,__zero_reg__
 352 0004 8105      		cpc r24,__zero_reg__
 353 0006 9105      		cpc r25,__zero_reg__
 354 0008 01F4      		brne .L14
 132:tmk_core/common/action_layer.c ****         return layer == 0;
 355               		.loc 1 132 9 is_stmt 1 view .LVU64
 356               		.loc 1 132 22 is_stmt 0 view .LVU65
 357 000a 81E0      		ldi r24,lo8(1)
 358 000c 4423      		tst r20
 359 000e 01F0      		breq .L13
 360 0010 80E0      		ldi r24,0
 361 0012 0895      		ret
 362               	.L14:
 133:tmk_core/common/action_layer.c ****     }
 134:tmk_core/common/action_layer.c ****     return (cmp_layer_state & (1UL << layer)) != 0;
 363               		.loc 1 134 5 is_stmt 1 view .LVU66
 364               		.loc 1 134 47 is_stmt 0 view .LVU67
 365 0014 DC01      		movw r26,r24
 366 0016 CB01      		movw r24,r22
 367 0018 00C0      		rjmp 2f
 368               		1:
 369 001a B695      		lsr r27
 370 001c A795      		ror r26
 371 001e 9795      		ror r25
 372 0020 8795      		ror r24
 373               		2:
 374 0022 4A95      		dec r20
 375 0024 02F4      		brpl 1b
 376 0026 8170      		andi r24,lo8(1)
 377               	.L13:
 378               	/* epilogue start */
 135:tmk_core/common/action_layer.c **** }
 379               		.loc 1 135 1 view .LVU68
 380 0028 0895      		ret
 381               		.cfi_endproc
 382               	.LFE17:
 384               		.section	.text.layer_state_is,"ax",@progbits
 385               	.global	layer_state_is
 387               	layer_state_is:
 388               	.LVL24:
 389               	.LFB16:
 124:tmk_core/common/action_layer.c **** 
 390               		.loc 1 124 36 is_stmt 1 view -0
 391               		.cfi_startproc
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 0 */
 395               	.L__stack_usage = 0
 124:tmk_core/common/action_layer.c **** 
 396               		.loc 1 124 36 is_stmt 0 view .LVU70
 397 0000 482F      		mov r20,r24
 124:tmk_core/common/action_layer.c **** 
 398               		.loc 1 124 38 is_stmt 1 view .LVU71
 124:tmk_core/common/action_layer.c **** 
 399               		.loc 1 124 45 is_stmt 0 view .LVU72
 400 0002 6091 0000 		lds r22,layer_state
 401 0006 7091 0000 		lds r23,layer_state+1
 402 000a 8091 0000 		lds r24,layer_state+2
 403 000e 9091 0000 		lds r25,layer_state+3
 404 0012 0C94 0000 		jmp layer_state_cmp
 405               	.LVL25:
 124:tmk_core/common/action_layer.c **** 
 406               		.loc 1 124 45 view .LVU73
 407               		.cfi_endproc
 408               	.LFE16:
 410               		.section	.text.layer_move,"ax",@progbits
 411               	.global	layer_move
 413               	layer_move:
 414               	.LVL26:
 415               	.LFB18:
 136:tmk_core/common/action_layer.c **** 
 137:tmk_core/common/action_layer.c **** /** \brief Layer move
 138:tmk_core/common/action_layer.c ****  *
 139:tmk_core/common/action_layer.c ****  * Turns on the given layer and turn off all other layers
 140:tmk_core/common/action_layer.c ****  */
 141:tmk_core/common/action_layer.c **** void layer_move(uint8_t layer) { layer_state_set(1UL << layer); }
 416               		.loc 1 141 32 is_stmt 1 view -0
 417               		.cfi_startproc
 418               		.loc 1 141 32 is_stmt 0 view .LVU75
 419 0000 0F93      		push r16
 420               	.LCFI6:
 421               		.cfi_def_cfa_offset 3
 422               		.cfi_offset 16, -2
 423 0002 1F93      		push r17
 424               	.LCFI7:
 425               		.cfi_def_cfa_offset 4
 426               		.cfi_offset 17, -3
 427               	/* prologue: function */
 428               	/* frame size = 0 */
 429               	/* stack size = 2 */
 430               	.L__stack_usage = 2
 431               		.loc 1 141 34 is_stmt 1 view .LVU76
 432 0004 41E0      		ldi r20,lo8(1)
 433 0006 50E0      		ldi r21,0
 434 0008 60E0      		ldi r22,0
 435 000a 70E0      		ldi r23,0
 436 000c 8A01      		movw r16,r20
 437 000e 9B01      		movw r18,r22
 438 0010 00C0      		rjmp 2f
 439               		1:
 440 0012 000F      		lsl r16
 441 0014 111F      		rol r17
 442 0016 221F      		rol r18
 443 0018 331F      		rol r19
 444               		2:
 445 001a 8A95      		dec r24
 446 001c 02F4      		brpl 1b
 447 001e C901      		movw r24,r18
 448               	.LVL27:
 449               		.loc 1 141 34 is_stmt 0 view .LVU77
 450 0020 B801      		movw r22,r16
 451               	/* epilogue start */
 452               		.loc 1 141 1 view .LVU78
 453 0022 1F91      		pop r17
 454 0024 0F91      		pop r16
 455               		.loc 1 141 34 view .LVU79
 456 0026 0C94 0000 		jmp layer_state_set
 457               	.LVL28:
 458               		.cfi_endproc
 459               	.LFE18:
 461               		.section	.text.layer_on,"ax",@progbits
 462               	.global	layer_on
 464               	layer_on:
 465               	.LVL29:
 466               	.LFB19:
 142:tmk_core/common/action_layer.c **** 
 143:tmk_core/common/action_layer.c **** /** \brief Layer on
 144:tmk_core/common/action_layer.c ****  *
 145:tmk_core/common/action_layer.c ****  * Turns on given layer
 146:tmk_core/common/action_layer.c ****  */
 147:tmk_core/common/action_layer.c **** void layer_on(uint8_t layer) { layer_state_set(layer_state | (1UL << layer)); }
 467               		.loc 1 147 30 is_stmt 1 view -0
 468               		.cfi_startproc
 469               		.loc 1 147 30 is_stmt 0 view .LVU81
 470 0000 0F93      		push r16
 471               	.LCFI8:
 472               		.cfi_def_cfa_offset 3
 473               		.cfi_offset 16, -2
 474 0002 1F93      		push r17
 475               	.LCFI9:
 476               		.cfi_def_cfa_offset 4
 477               		.cfi_offset 17, -3
 478               	/* prologue: function */
 479               	/* frame size = 0 */
 480               	/* stack size = 2 */
 481               	.L__stack_usage = 2
 482               		.loc 1 147 32 is_stmt 1 view .LVU82
 483               		.loc 1 147 67 is_stmt 0 view .LVU83
 484 0004 41E0      		ldi r20,lo8(1)
 485 0006 50E0      		ldi r21,0
 486 0008 60E0      		ldi r22,0
 487 000a 70E0      		ldi r23,0
 488 000c 00C0      		rjmp 2f
 489               		1:
 490 000e 440F      		lsl r20
 491 0010 551F      		rol r21
 492 0012 661F      		rol r22
 493 0014 771F      		rol r23
 494               		2:
 495 0016 8A95      		dec r24
 496 0018 02F4      		brpl 1b
 497               		.loc 1 147 32 view .LVU84
 498 001a 8091 0000 		lds r24,layer_state
 499 001e 9091 0000 		lds r25,layer_state+1
 500 0022 A091 0000 		lds r26,layer_state+2
 501 0026 B091 0000 		lds r27,layer_state+3
 502               	.LVL30:
 503               		.loc 1 147 32 view .LVU85
 504 002a 8A01      		movw r16,r20
 505 002c 9B01      		movw r18,r22
 506 002e 082B      		or r16,r24
 507 0030 192B      		or r17,r25
 508 0032 2A2B      		or r18,r26
 509 0034 3B2B      		or r19,r27
 510 0036 C901      		movw r24,r18
 511 0038 B801      		movw r22,r16
 512               	/* epilogue start */
 513               		.loc 1 147 1 view .LVU86
 514 003a 1F91      		pop r17
 515 003c 0F91      		pop r16
 516               		.loc 1 147 32 view .LVU87
 517 003e 0C94 0000 		jmp layer_state_set
 518               	.LVL31:
 519               		.cfi_endproc
 520               	.LFE19:
 522               		.section	.text.layer_off,"ax",@progbits
 523               	.global	layer_off
 525               	layer_off:
 526               	.LVL32:
 527               	.LFB20:
 148:tmk_core/common/action_layer.c **** 
 149:tmk_core/common/action_layer.c **** /** \brief Layer off
 150:tmk_core/common/action_layer.c ****  *
 151:tmk_core/common/action_layer.c ****  * Turns off given layer
 152:tmk_core/common/action_layer.c ****  */
 153:tmk_core/common/action_layer.c **** void layer_off(uint8_t layer) { layer_state_set(layer_state & ~(1UL << layer)); }
 528               		.loc 1 153 31 is_stmt 1 view -0
 529               		.cfi_startproc
 530               		.loc 1 153 31 is_stmt 0 view .LVU89
 531 0000 0F93      		push r16
 532               	.LCFI10:
 533               		.cfi_def_cfa_offset 3
 534               		.cfi_offset 16, -2
 535 0002 1F93      		push r17
 536               	.LCFI11:
 537               		.cfi_def_cfa_offset 4
 538               		.cfi_offset 17, -3
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 2 */
 542               	.L__stack_usage = 2
 543               		.loc 1 153 33 is_stmt 1 view .LVU90
 544               		.loc 1 153 69 is_stmt 0 view .LVU91
 545 0004 41E0      		ldi r20,lo8(1)
 546 0006 50E0      		ldi r21,0
 547 0008 60E0      		ldi r22,0
 548 000a 70E0      		ldi r23,0
 549 000c 00C0      		rjmp 2f
 550               		1:
 551 000e 440F      		lsl r20
 552 0010 551F      		rol r21
 553 0012 661F      		rol r22
 554 0014 771F      		rol r23
 555               		2:
 556 0016 8A95      		dec r24
 557 0018 02F4      		brpl 1b
 558               		.loc 1 153 63 view .LVU92
 559 001a CB01      		movw r24,r22
 560               	.LVL33:
 561               		.loc 1 153 63 view .LVU93
 562 001c BA01      		movw r22,r20
 563 001e 6095      		com r22
 564 0020 7095      		com r23
 565 0022 8095      		com r24
 566 0024 9095      		com r25
 567               		.loc 1 153 33 view .LVU94
 568 0026 0091 0000 		lds r16,layer_state
 569 002a 1091 0000 		lds r17,layer_state+1
 570 002e 2091 0000 		lds r18,layer_state+2
 571 0032 3091 0000 		lds r19,layer_state+3
 572 0036 6023      		and r22,r16
 573 0038 7123      		and r23,r17
 574 003a 8223      		and r24,r18
 575 003c 9323      		and r25,r19
 576               	/* epilogue start */
 577               		.loc 1 153 1 view .LVU95
 578 003e 1F91      		pop r17
 579 0040 0F91      		pop r16
 580               		.loc 1 153 33 view .LVU96
 581 0042 0C94 0000 		jmp layer_state_set
 582               	.LVL34:
 583               		.cfi_endproc
 584               	.LFE20:
 586               		.section	.text.layer_invert,"ax",@progbits
 587               	.global	layer_invert
 589               	layer_invert:
 590               	.LVL35:
 591               	.LFB21:
 154:tmk_core/common/action_layer.c **** 
 155:tmk_core/common/action_layer.c **** /** \brief Layer invert
 156:tmk_core/common/action_layer.c ****  *
 157:tmk_core/common/action_layer.c ****  * Toggle the given layer (set it if it's unset, or unset it if it's set)
 158:tmk_core/common/action_layer.c ****  */
 159:tmk_core/common/action_layer.c **** void layer_invert(uint8_t layer) { layer_state_set(layer_state ^ (1UL << layer)); }
 592               		.loc 1 159 34 is_stmt 1 view -0
 593               		.cfi_startproc
 594               		.loc 1 159 34 is_stmt 0 view .LVU98
 595 0000 0F93      		push r16
 596               	.LCFI12:
 597               		.cfi_def_cfa_offset 3
 598               		.cfi_offset 16, -2
 599 0002 1F93      		push r17
 600               	.LCFI13:
 601               		.cfi_def_cfa_offset 4
 602               		.cfi_offset 17, -3
 603               	/* prologue: function */
 604               	/* frame size = 0 */
 605               	/* stack size = 2 */
 606               	.L__stack_usage = 2
 607               		.loc 1 159 36 is_stmt 1 view .LVU99
 608               		.loc 1 159 71 is_stmt 0 view .LVU100
 609 0004 41E0      		ldi r20,lo8(1)
 610 0006 50E0      		ldi r21,0
 611 0008 60E0      		ldi r22,0
 612 000a 70E0      		ldi r23,0
 613 000c 00C0      		rjmp 2f
 614               		1:
 615 000e 440F      		lsl r20
 616 0010 551F      		rol r21
 617 0012 661F      		rol r22
 618 0014 771F      		rol r23
 619               		2:
 620 0016 8A95      		dec r24
 621 0018 02F4      		brpl 1b
 622               		.loc 1 159 36 view .LVU101
 623 001a 8091 0000 		lds r24,layer_state
 624 001e 9091 0000 		lds r25,layer_state+1
 625 0022 A091 0000 		lds r26,layer_state+2
 626 0026 B091 0000 		lds r27,layer_state+3
 627               	.LVL36:
 628               		.loc 1 159 36 view .LVU102
 629 002a 8A01      		movw r16,r20
 630 002c 9B01      		movw r18,r22
 631 002e 0827      		eor r16,r24
 632 0030 1927      		eor r17,r25
 633 0032 2A27      		eor r18,r26
 634 0034 3B27      		eor r19,r27
 635 0036 C901      		movw r24,r18
 636 0038 B801      		movw r22,r16
 637               	/* epilogue start */
 638               		.loc 1 159 1 view .LVU103
 639 003a 1F91      		pop r17
 640 003c 0F91      		pop r16
 641               		.loc 1 159 36 view .LVU104
 642 003e 0C94 0000 		jmp layer_state_set
 643               	.LVL37:
 644               		.cfi_endproc
 645               	.LFE21:
 647               		.section	.text.layer_or,"ax",@progbits
 648               	.global	layer_or
 650               	layer_or:
 651               	.LVL38:
 652               	.LFB22:
 160:tmk_core/common/action_layer.c **** 
 161:tmk_core/common/action_layer.c **** /** \brief Layer or
 162:tmk_core/common/action_layer.c ****  *
 163:tmk_core/common/action_layer.c ****  * Turns on layers based on matching bits between specifed layer and existing layer state
 164:tmk_core/common/action_layer.c ****  */
 165:tmk_core/common/action_layer.c **** void layer_or(layer_state_t state) { layer_state_set(layer_state | state); }
 653               		.loc 1 165 36 is_stmt 1 view -0
 654               		.cfi_startproc
 655               		.loc 1 165 36 is_stmt 0 view .LVU106
 656 0000 0F93      		push r16
 657               	.LCFI14:
 658               		.cfi_def_cfa_offset 3
 659               		.cfi_offset 16, -2
 660 0002 1F93      		push r17
 661               	.LCFI15:
 662               		.cfi_def_cfa_offset 4
 663               		.cfi_offset 17, -3
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 2 */
 667               	.L__stack_usage = 2
 668               		.loc 1 165 38 is_stmt 1 view .LVU107
 669 0004 0091 0000 		lds r16,layer_state
 670 0008 1091 0000 		lds r17,layer_state+1
 671 000c 2091 0000 		lds r18,layer_state+2
 672 0010 3091 0000 		lds r19,layer_state+3
 673 0014 602B      		or r22,r16
 674               	.LVL39:
 675               		.loc 1 165 38 is_stmt 0 view .LVU108
 676 0016 712B      		or r23,r17
 677 0018 822B      		or r24,r18
 678 001a 932B      		or r25,r19
 679               	/* epilogue start */
 680               		.loc 1 165 1 view .LVU109
 681 001c 1F91      		pop r17
 682 001e 0F91      		pop r16
 683               		.loc 1 165 38 view .LVU110
 684 0020 0C94 0000 		jmp layer_state_set
 685               	.LVL40:
 686               		.cfi_endproc
 687               	.LFE22:
 689               		.section	.text.layer_and,"ax",@progbits
 690               	.global	layer_and
 692               	layer_and:
 693               	.LVL41:
 694               	.LFB23:
 166:tmk_core/common/action_layer.c **** /** \brief Layer and
 167:tmk_core/common/action_layer.c ****  *
 168:tmk_core/common/action_layer.c ****  * Turns on layers based on matching enabled bits between specifed layer and existing layer state
 169:tmk_core/common/action_layer.c ****  */
 170:tmk_core/common/action_layer.c **** void layer_and(layer_state_t state) { layer_state_set(layer_state & state); }
 695               		.loc 1 170 37 is_stmt 1 view -0
 696               		.cfi_startproc
 697               		.loc 1 170 37 is_stmt 0 view .LVU112
 698 0000 0F93      		push r16
 699               	.LCFI16:
 700               		.cfi_def_cfa_offset 3
 701               		.cfi_offset 16, -2
 702 0002 1F93      		push r17
 703               	.LCFI17:
 704               		.cfi_def_cfa_offset 4
 705               		.cfi_offset 17, -3
 706               	/* prologue: function */
 707               	/* frame size = 0 */
 708               	/* stack size = 2 */
 709               	.L__stack_usage = 2
 710               		.loc 1 170 39 is_stmt 1 view .LVU113
 711 0004 0091 0000 		lds r16,layer_state
 712 0008 1091 0000 		lds r17,layer_state+1
 713 000c 2091 0000 		lds r18,layer_state+2
 714 0010 3091 0000 		lds r19,layer_state+3
 715 0014 6023      		and r22,r16
 716               	.LVL42:
 717               		.loc 1 170 39 is_stmt 0 view .LVU114
 718 0016 7123      		and r23,r17
 719 0018 8223      		and r24,r18
 720 001a 9323      		and r25,r19
 721               	/* epilogue start */
 722               		.loc 1 170 1 view .LVU115
 723 001c 1F91      		pop r17
 724 001e 0F91      		pop r16
 725               		.loc 1 170 39 view .LVU116
 726 0020 0C94 0000 		jmp layer_state_set
 727               	.LVL43:
 728               		.cfi_endproc
 729               	.LFE23:
 731               		.section	.text.layer_xor,"ax",@progbits
 732               	.global	layer_xor
 734               	layer_xor:
 735               	.LVL44:
 736               	.LFB24:
 171:tmk_core/common/action_layer.c **** /** \brief Layer xor
 172:tmk_core/common/action_layer.c ****  *
 173:tmk_core/common/action_layer.c ****  * Turns on layers based on non-matching bits between specifed layer and existing layer state
 174:tmk_core/common/action_layer.c ****  */
 175:tmk_core/common/action_layer.c **** void layer_xor(layer_state_t state) { layer_state_set(layer_state ^ state); }
 737               		.loc 1 175 37 is_stmt 1 view -0
 738               		.cfi_startproc
 739               		.loc 1 175 37 is_stmt 0 view .LVU118
 740 0000 0F93      		push r16
 741               	.LCFI18:
 742               		.cfi_def_cfa_offset 3
 743               		.cfi_offset 16, -2
 744 0002 1F93      		push r17
 745               	.LCFI19:
 746               		.cfi_def_cfa_offset 4
 747               		.cfi_offset 17, -3
 748               	/* prologue: function */
 749               	/* frame size = 0 */
 750               	/* stack size = 2 */
 751               	.L__stack_usage = 2
 752               		.loc 1 175 39 is_stmt 1 view .LVU119
 753 0004 0091 0000 		lds r16,layer_state
 754 0008 1091 0000 		lds r17,layer_state+1
 755 000c 2091 0000 		lds r18,layer_state+2
 756 0010 3091 0000 		lds r19,layer_state+3
 757 0014 6027      		eor r22,r16
 758               	.LVL45:
 759               		.loc 1 175 39 is_stmt 0 view .LVU120
 760 0016 7127      		eor r23,r17
 761 0018 8227      		eor r24,r18
 762 001a 9327      		eor r25,r19
 763               	/* epilogue start */
 764               		.loc 1 175 1 view .LVU121
 765 001c 1F91      		pop r17
 766 001e 0F91      		pop r16
 767               		.loc 1 175 39 view .LVU122
 768 0020 0C94 0000 		jmp layer_state_set
 769               	.LVL46:
 770               		.cfi_endproc
 771               	.LFE24:
 773               		.section	.text.layer_debug,"ax",@progbits
 774               	.global	layer_debug
 776               	layer_debug:
 777               	.LFB32:
 778               		.cfi_startproc
 779               	/* prologue: function */
 780               	/* frame size = 0 */
 781               	/* stack size = 0 */
 782               	.L__stack_usage = 0
 783               	/* epilogue start */
 784 0000 0895      		ret
 785               		.cfi_endproc
 786               	.LFE32:
 788               		.section	.text.update_source_layers_cache,"ax",@progbits
 789               	.global	update_source_layers_cache
 791               	update_source_layers_cache:
 792               	.LVL47:
 793               	.LFB26:
 176:tmk_core/common/action_layer.c **** 
 177:tmk_core/common/action_layer.c **** /** \brief Layer debug printing
 178:tmk_core/common/action_layer.c ****  *
 179:tmk_core/common/action_layer.c ****  * Print out the hex value of the 32-bit layer state, as well as the value of the highest bit.
 180:tmk_core/common/action_layer.c ****  */
 181:tmk_core/common/action_layer.c **** void layer_debug(void) { dprintf("%08lX(%u)", layer_state, get_highest_layer(layer_state)); }
 182:tmk_core/common/action_layer.c **** #endif
 183:tmk_core/common/action_layer.c **** 
 184:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 185:tmk_core/common/action_layer.c **** /** \brief source layer cache
 186:tmk_core/common/action_layer.c ****  */
 187:tmk_core/common/action_layer.c **** 
 188:tmk_core/common/action_layer.c **** uint8_t source_layers_cache[(MATRIX_ROWS * MATRIX_COLS + 7) / 8][MAX_LAYER_BITS] = {{0}};
 189:tmk_core/common/action_layer.c **** 
 190:tmk_core/common/action_layer.c **** /** \brief update source layers cache
 191:tmk_core/common/action_layer.c ****  *
 192:tmk_core/common/action_layer.c ****  * Updates the cached keys when changing layers
 193:tmk_core/common/action_layer.c ****  */
 194:tmk_core/common/action_layer.c **** void update_source_layers_cache(keypos_t key, uint8_t layer) {
 794               		.loc 1 194 62 is_stmt 1 view -0
 795               		.cfi_startproc
 796               	/* prologue: function */
 797               	/* frame size = 0 */
 798               	/* stack size = 0 */
 799               	.L__stack_usage = 0
 195:tmk_core/common/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 800               		.loc 1 195 5 view .LVU124
 801               		.loc 1 195 19 is_stmt 0 view .LVU125
 802 0000 2FE0      		ldi r18,lo8(15)
 803               		.loc 1 195 19 view .LVU126
 804 0002 929F      		mul r25,r18
 805 0004 800D      		add r24,r0
 806 0006 1124      		clr __zero_reg__
 807               	.LVL48:
 196:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 808               		.loc 1 196 5 is_stmt 1 view .LVU127
 197:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 809               		.loc 1 197 5 view .LVU128
 198:tmk_core/common/action_layer.c **** 
 199:tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 810               		.loc 1 199 5 view .LVU129
 811               	.LBB2:
 812               		.loc 1 199 10 view .LVU130
 813               		.loc 1 199 10 is_stmt 0 view .LVU131
 814               	.LBE2:
 197:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 815               		.loc 1 197 19 view .LVU132
 816 0008 982F      		mov r25,r24
 197:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 817               		.loc 1 197 19 view .LVU133
 818 000a 9770      		andi r25,lo8(7)
 819               	.LVL49:
 820               	.LBB3:
 200:tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 821               		.loc 1 200 143 view .LVU134
 822 000c 41E0      		ldi r20,lo8(1)
 823 000e 00C0      		rjmp 2f
 824               		1:
 825 0010 440F      		lsl r20
 826               		2:
 827 0012 9A95      		dec r25
 828 0014 02F4      		brpl 1b
 829               	.LBE3:
 196:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 830               		.loc 1 196 19 view .LVU135
 831 0016 8695      		lsr r24
 832 0018 8695      		lsr r24
 833 001a 8695      		lsr r24
 834               	.LVL50:
 196:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 835               		.loc 1 196 19 view .LVU136
 836 001c 95E0      		ldi r25,lo8(5)
 837               	.LVL51:
 196:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 838               		.loc 1 196 19 view .LVU137
 839 001e 899F      		mul r24,r25
 840 0020 F001      		movw r30,r0
 841 0022 1124      		clr __zero_reg__
 842 0024 E050      		subi r30,lo8(-(source_layers_cache))
 843 0026 F040      		sbci r31,hi8(-(source_layers_cache))
 844               	.LBB4:
 845               		.loc 1 200 143 view .LVU138
 846 0028 90E0      		ldi r25,0
 847 002a 80E0      		ldi r24,0
 848               	.LVL52:
 849               		.loc 1 200 89 view .LVU139
 850 002c 70E0      		ldi r23,0
 851               	.LVL53:
 852               	.L30:
 853               		.loc 1 200 9 is_stmt 1 discriminator 3 view .LVU140
 854               		.loc 1 200 54 is_stmt 0 discriminator 3 view .LVU141
 855 002e 5191      		ld r21,Z+
 856 0030 DF01      		movw r26,r30
 857 0032 1197      		sbiw r26,1
 858               		.loc 1 200 89 discriminator 3 view .LVU142
 859 0034 9B01      		movw r18,r22
 860 0036 082E      		mov r0,r24
 861 0038 00C0      		rjmp 2f
 862               		1:
 863 003a 3695      		lsr r19
 864 003c 2795      		ror r18
 865               		2:
 866 003e 0A94      		dec r0
 867 0040 02F4      		brpl 1b
 868 0042 2170      		andi r18,lo8(1)
 869               		.loc 1 200 95 discriminator 3 view .LVU143
 870 0044 2195      		neg r18
 871 0046 2527      		eor r18,r21
 872               		.loc 1 200 143 discriminator 3 view .LVU144
 873 0048 2423      		and r18,r20
 874               		.loc 1 200 54 discriminator 3 view .LVU145
 875 004a 2527      		eor r18,r21
 876 004c 2C93      		st X,r18
 877               	.LVL54:
 878               		.loc 1 200 54 discriminator 3 view .LVU146
 879 004e 0196      		adiw r24,1
 880               	.LVL55:
 199:tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 881               		.loc 1 199 5 discriminator 3 view .LVU147
 882 0050 8530      		cpi r24,5
 883 0052 9105      		cpc r25,__zero_reg__
 884 0054 01F4      		brne .L30
 885               	/* epilogue start */
 886               	.LBE4:
 201:tmk_core/common/action_layer.c ****     }
 202:tmk_core/common/action_layer.c **** }
 887               		.loc 1 202 1 view .LVU148
 888 0056 0895      		ret
 889               		.cfi_endproc
 890               	.LFE26:
 892               		.section	.text.read_source_layers_cache,"ax",@progbits
 893               	.global	read_source_layers_cache
 895               	read_source_layers_cache:
 896               	.LVL56:
 897               	.LFB27:
 203:tmk_core/common/action_layer.c **** 
 204:tmk_core/common/action_layer.c **** /** \brief read source layers cache
 205:tmk_core/common/action_layer.c ****  *
 206:tmk_core/common/action_layer.c ****  * reads the cached keys stored when the layer was changed
 207:tmk_core/common/action_layer.c ****  */
 208:tmk_core/common/action_layer.c **** uint8_t read_source_layers_cache(keypos_t key) {
 898               		.loc 1 208 48 is_stmt 1 view -0
 899               		.cfi_startproc
 900               	/* prologue: function */
 901               	/* frame size = 0 */
 902               	/* stack size = 0 */
 903               	.L__stack_usage = 0
 209:tmk_core/common/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 904               		.loc 1 209 5 view .LVU150
 905               		.loc 1 209 19 is_stmt 0 view .LVU151
 906 0000 2FE0      		ldi r18,lo8(15)
 907               		.loc 1 209 19 view .LVU152
 908 0002 929F      		mul r25,r18
 909 0004 800D      		add r24,r0
 910 0006 1124      		clr __zero_reg__
 911               	.LVL57:
 210:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 912               		.loc 1 210 5 is_stmt 1 view .LVU153
 211:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 913               		.loc 1 211 5 view .LVU154
 914               		.loc 1 211 19 is_stmt 0 view .LVU155
 915 0008 982F      		mov r25,r24
 916               		.loc 1 211 19 view .LVU156
 917 000a 9770      		andi r25,lo8(7)
 918               	.LVL58:
 212:tmk_core/common/action_layer.c ****     uint8_t       layer       = 0;
 919               		.loc 1 212 5 is_stmt 1 view .LVU157
 213:tmk_core/common/action_layer.c **** 
 214:tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 920               		.loc 1 214 5 view .LVU158
 921               	.LBB5:
 922               		.loc 1 214 10 view .LVU159
 923               		.loc 1 214 10 is_stmt 0 view .LVU160
 924               	.LBE5:
 210:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 925               		.loc 1 210 19 view .LVU161
 926 000c 8695      		lsr r24
 927 000e 8695      		lsr r24
 928 0010 8695      		lsr r24
 929               	.LVL59:
 210:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 930               		.loc 1 210 19 view .LVU162
 931 0012 25E0      		ldi r18,lo8(5)
 932 0014 829F      		mul r24,r18
 933 0016 F001      		movw r30,r0
 934 0018 1124      		clr __zero_reg__
 935 001a E050      		subi r30,lo8(-(source_layers_cache))
 936 001c F040      		sbci r31,hi8(-(source_layers_cache))
 211:tmk_core/common/action_layer.c ****     uint8_t       layer       = 0;
 937               		.loc 1 211 19 view .LVU163
 938 001e 50E0      		ldi r21,0
 939 0020 40E0      		ldi r20,0
 212:tmk_core/common/action_layer.c **** 
 940               		.loc 1 212 19 view .LVU164
 941 0022 80E0      		ldi r24,0
 942               	.LVL60:
 943               	.L33:
 944               	.LBB6:
 215:tmk_core/common/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 945               		.loc 1 215 9 is_stmt 1 discriminator 3 view .LVU165
 946               		.loc 1 215 52 is_stmt 0 discriminator 3 view .LVU166
 947 0024 2191      		ld r18,Z+
 948 0026 30E0      		ldi r19,0
 949               		.loc 1 215 88 discriminator 3 view .LVU167
 950 0028 092E      		mov r0,r25
 951 002a 00C0      		rjmp 2f
 952               		1:
 953 002c 3695      		lsr r19
 954 002e 2795      		ror r18
 955               		2:
 956 0030 0A94      		dec r0
 957 0032 02F4      		brpl 1b
 958 0034 2170      		andi r18,1
 959 0036 3327      		clr r19
 960               		.loc 1 215 94 discriminator 3 view .LVU168
 961 0038 042E      		mov r0,r20
 962 003a 00C0      		rjmp 2f
 963               		1:
 964 003c 220F      		lsl r18
 965               		2:
 966 003e 0A94      		dec r0
 967 0040 02F4      		brpl 1b
 968               		.loc 1 215 15 discriminator 3 view .LVU169
 969 0042 822B      		or r24,r18
 970               	.LVL61:
 971               		.loc 1 215 15 discriminator 3 view .LVU170
 972 0044 4F5F      		subi r20,-1
 973 0046 5F4F      		sbci r21,-1
 974               	.LVL62:
 214:tmk_core/common/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 975               		.loc 1 214 5 discriminator 3 view .LVU171
 976 0048 4530      		cpi r20,5
 977 004a 5105      		cpc r21,__zero_reg__
 978 004c 01F4      		brne .L33
 979               	/* epilogue start */
 980               	.LBE6:
 216:tmk_core/common/action_layer.c ****     }
 217:tmk_core/common/action_layer.c **** 
 218:tmk_core/common/action_layer.c ****     return layer;
 219:tmk_core/common/action_layer.c **** }
 981               		.loc 1 219 1 view .LVU172
 982 004e 0895      		ret
 983               		.cfi_endproc
 984               	.LFE27:
 986               		.section	.text.layer_switch_get_layer,"ax",@progbits
 987               	.global	layer_switch_get_layer
 989               	layer_switch_get_layer:
 990               	.LVL63:
 991               	.LFB29:
 220:tmk_core/common/action_layer.c **** #endif
 221:tmk_core/common/action_layer.c **** 
 222:tmk_core/common/action_layer.c **** /** \brief Store or get action (FIXME: Needs better summary)
 223:tmk_core/common/action_layer.c ****  *
 224:tmk_core/common/action_layer.c ****  * Make sure the action triggered when the key is released is the same
 225:tmk_core/common/action_layer.c ****  * one as the one triggered on press. It's important for the mod keys
 226:tmk_core/common/action_layer.c ****  * when the layer is switched after the down event but before the up
 227:tmk_core/common/action_layer.c ****  * event as they may get stuck otherwise.
 228:tmk_core/common/action_layer.c ****  */
 229:tmk_core/common/action_layer.c **** action_t store_or_get_action(bool pressed, keypos_t key) {
 230:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 231:tmk_core/common/action_layer.c ****     if (disable_action_cache) {
 232:tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 233:tmk_core/common/action_layer.c ****     }
 234:tmk_core/common/action_layer.c **** 
 235:tmk_core/common/action_layer.c ****     uint8_t layer;
 236:tmk_core/common/action_layer.c **** 
 237:tmk_core/common/action_layer.c ****     if (pressed) {
 238:tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 239:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 240:tmk_core/common/action_layer.c ****     } else {
 241:tmk_core/common/action_layer.c ****         layer = read_source_layers_cache(key);
 242:tmk_core/common/action_layer.c ****     }
 243:tmk_core/common/action_layer.c ****     return action_for_key(layer, key);
 244:tmk_core/common/action_layer.c **** #else
 245:tmk_core/common/action_layer.c ****     return layer_switch_get_action(key);
 246:tmk_core/common/action_layer.c **** #endif
 247:tmk_core/common/action_layer.c **** }
 248:tmk_core/common/action_layer.c **** 
 249:tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 250:tmk_core/common/action_layer.c ****  *
 251:tmk_core/common/action_layer.c ****  * Gets the layer based on key info
 252:tmk_core/common/action_layer.c ****  */
 253:tmk_core/common/action_layer.c **** uint8_t layer_switch_get_layer(keypos_t key) {
 992               		.loc 1 253 46 is_stmt 1 view -0
 993               		.cfi_startproc
 994               		.loc 1 253 46 is_stmt 0 view .LVU174
 995 0000 BF92      		push r11
 996               	.LCFI20:
 997               		.cfi_def_cfa_offset 3
 998               		.cfi_offset 11, -2
 999 0002 CF92      		push r12
 1000               	.LCFI21:
 1001               		.cfi_def_cfa_offset 4
 1002               		.cfi_offset 12, -3
 1003 0004 DF92      		push r13
 1004               	.LCFI22:
 1005               		.cfi_def_cfa_offset 5
 1006               		.cfi_offset 13, -4
 1007 0006 EF92      		push r14
 1008               	.LCFI23:
 1009               		.cfi_def_cfa_offset 6
 1010               		.cfi_offset 14, -5
 1011 0008 FF92      		push r15
 1012               	.LCFI24:
 1013               		.cfi_def_cfa_offset 7
 1014               		.cfi_offset 15, -6
 1015 000a 0F93      		push r16
 1016               	.LCFI25:
 1017               		.cfi_def_cfa_offset 8
 1018               		.cfi_offset 16, -7
 1019 000c 1F93      		push r17
 1020               	.LCFI26:
 1021               		.cfi_def_cfa_offset 9
 1022               		.cfi_offset 17, -8
 1023 000e CF93      		push r28
 1024               	.LCFI27:
 1025               		.cfi_def_cfa_offset 10
 1026               		.cfi_offset 28, -9
 1027 0010 DF93      		push r29
 1028               	.LCFI28:
 1029               		.cfi_def_cfa_offset 11
 1030               		.cfi_offset 29, -10
 1031               	/* prologue: function */
 1032               	/* frame size = 0 */
 1033               	/* stack size = 9 */
 1034               	.L__stack_usage = 9
 1035 0012 8C01      		movw r16,r24
 254:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
 255:tmk_core/common/action_layer.c ****     action_t action;
 1036               		.loc 1 255 5 is_stmt 1 view .LVU175
 256:tmk_core/common/action_layer.c ****     action.code = ACTION_TRANSPARENT;
 1037               		.loc 1 256 5 view .LVU176
 1038               	.LVL64:
 257:tmk_core/common/action_layer.c **** 
 258:tmk_core/common/action_layer.c ****     layer_state_t layers = layer_state | default_layer_state;
 1039               		.loc 1 258 5 view .LVU177
 1040               		.loc 1 258 19 is_stmt 0 view .LVU178
 1041 0014 C090 0000 		lds r12,layer_state
 1042 0018 D090 0000 		lds r13,layer_state+1
 1043 001c E090 0000 		lds r14,layer_state+2
 1044 0020 F090 0000 		lds r15,layer_state+3
 1045 0024 8091 0000 		lds r24,default_layer_state
 1046 0028 9091 0000 		lds r25,default_layer_state+1
 1047 002c A091 0000 		lds r26,default_layer_state+2
 1048 0030 B091 0000 		lds r27,default_layer_state+3
 1049               	.LVL65:
 1050               		.loc 1 258 19 view .LVU179
 1051 0034 C82A      		or r12,r24
 1052 0036 D92A      		or r13,r25
 1053 0038 EA2A      		or r14,r26
 1054 003a FB2A      		or r15,r27
 1055               	.LVL66:
 259:tmk_core/common/action_layer.c ****     /* check top layer first */
 260:tmk_core/common/action_layer.c ****     for (int8_t i = MAX_LAYER - 1; i >= 0; i--) {
 1056               		.loc 1 260 5 is_stmt 1 view .LVU180
 1057               	.LBB7:
 1058               		.loc 1 260 10 view .LVU181
 1059               		.loc 1 260 10 is_stmt 0 view .LVU182
 1060               	.LBE7:
 258:tmk_core/common/action_layer.c ****     /* check top layer first */
 1061               		.loc 1 258 19 view .LVU183
 1062 003c CFE1      		ldi r28,lo8(31)
 1063 003e D0E0      		ldi r29,0
 1064               	.LVL67:
 1065               	.L37:
 1066               	.LBB8:
 261:tmk_core/common/action_layer.c ****         if (layers & (1UL << i)) {
 1067               		.loc 1 261 9 is_stmt 1 view .LVU184
 1068 0040 BC2E      		mov r11,r28
 1069               		.loc 1 261 13 is_stmt 0 view .LVU185
 1070 0042 D701      		movw r26,r14
 1071 0044 C601      		movw r24,r12
 1072 0046 0C2E      		mov r0,r28
 1073 0048 00C0      		rjmp 2f
 1074               		1:
 1075 004a B695      		lsr r27
 1076 004c A795      		ror r26
 1077 004e 9795      		ror r25
 1078 0050 8795      		ror r24
 1079               		2:
 1080 0052 0A94      		dec r0
 1081 0054 02F4      		brpl 1b
 1082               		.loc 1 261 12 view .LVU186
 1083 0056 80FD      		sbrc r24,0
 1084 0058 00C0      		rjmp .L36
 1085               	.L39:
 1086               	.LVL68:
 1087               		.loc 1 261 12 view .LVU187
 1088               	.LVL69:
 1089 005a 2197      		sbiw r28,1
 1090 005c 00F4      		brcc .L37
 1091               		.loc 1 261 12 view .LVU188
 1092               	.LBE8:
 262:tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 263:tmk_core/common/action_layer.c ****             if (action.code != ACTION_TRANSPARENT) {
 264:tmk_core/common/action_layer.c ****                 return i;
 265:tmk_core/common/action_layer.c ****             }
 266:tmk_core/common/action_layer.c ****         }
 267:tmk_core/common/action_layer.c ****     }
 268:tmk_core/common/action_layer.c ****     /* fall back to layer 0 */
 269:tmk_core/common/action_layer.c ****     return 0;
 1093               		.loc 1 269 12 view .LVU189
 1094 005e B12C      		mov r11,__zero_reg__
 1095               	.LVL70:
 1096               	.L35:
 270:tmk_core/common/action_layer.c **** #else
 271:tmk_core/common/action_layer.c ****     return get_highest_layer(default_layer_state);
 272:tmk_core/common/action_layer.c **** #endif
 273:tmk_core/common/action_layer.c **** }
 1097               		.loc 1 273 1 view .LVU190
 1098 0060 8B2D      		mov r24,r11
 1099               	/* epilogue start */
 1100 0062 DF91      		pop r29
 1101 0064 CF91      		pop r28
 1102 0066 1F91      		pop r17
 1103 0068 0F91      		pop r16
 1104               	.LVL71:
 1105               		.loc 1 273 1 view .LVU191
 1106 006a FF90      		pop r15
 1107 006c EF90      		pop r14
 1108 006e DF90      		pop r13
 1109 0070 CF90      		pop r12
 1110               	.LVL72:
 1111               		.loc 1 273 1 view .LVU192
 1112 0072 BF90      		pop r11
 1113 0074 0895      		ret
 1114               	.LVL73:
 1115               	.L36:
 1116               	.LBB9:
 262:tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 1117               		.loc 1 262 13 is_stmt 1 view .LVU193
 262:tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 1118               		.loc 1 262 22 is_stmt 0 view .LVU194
 1119 0076 B801      		movw r22,r16
 1120 0078 8C2F      		mov r24,r28
 1121 007a 0E94 0000 		call action_for_key
 1122               	.LVL74:
 263:tmk_core/common/action_layer.c ****                 return i;
 1123               		.loc 1 263 13 is_stmt 1 view .LVU195
 263:tmk_core/common/action_layer.c ****                 return i;
 1124               		.loc 1 263 16 is_stmt 0 view .LVU196
 1125 007e 0197      		sbiw r24,1
 1126 0080 01F0      		breq .L39
 1127 0082 00C0      		rjmp .L35
 1128               	.LBE9:
 1129               		.cfi_endproc
 1130               	.LFE29:
 1132               		.section	.text.layer_switch_get_action,"ax",@progbits
 1133               	.global	layer_switch_get_action
 1135               	layer_switch_get_action:
 1136               	.LVL75:
 1137               	.LFB30:
 274:tmk_core/common/action_layer.c **** 
 275:tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 276:tmk_core/common/action_layer.c ****  *
 277:tmk_core/common/action_layer.c ****  * Gets action code based on key position
 278:tmk_core/common/action_layer.c ****  */
 279:tmk_core/common/action_layer.c **** action_t layer_switch_get_action(keypos_t key) { return action_for_key(layer_switch_get_layer(key),
 1138               		.loc 1 279 48 is_stmt 1 view -0
 1139               		.cfi_startproc
 1140               		.loc 1 279 48 is_stmt 0 view .LVU198
 1141 0000 CF93      		push r28
 1142               	.LCFI29:
 1143               		.cfi_def_cfa_offset 3
 1144               		.cfi_offset 28, -2
 1145 0002 DF93      		push r29
 1146               	.LCFI30:
 1147               		.cfi_def_cfa_offset 4
 1148               		.cfi_offset 29, -3
 1149               	/* prologue: function */
 1150               	/* frame size = 0 */
 1151               	/* stack size = 2 */
 1152               	.L__stack_usage = 2
 1153 0004 EC01      		movw r28,r24
 1154               		.loc 1 279 50 is_stmt 1 view .LVU199
 1155               		.loc 1 279 57 is_stmt 0 view .LVU200
 1156 0006 0E94 0000 		call layer_switch_get_layer
 1157               	.LVL76:
 1158               		.loc 1 279 57 view .LVU201
 1159 000a BE01      		movw r22,r28
 1160               	/* epilogue start */
 1161               		.loc 1 279 1 view .LVU202
 1162 000c DF91      		pop r29
 1163 000e CF91      		pop r28
 1164               	.LVL77:
 1165               		.loc 1 279 57 view .LVU203
 1166 0010 0C94 0000 		jmp action_for_key
 1167               	.LVL78:
 1168               		.cfi_endproc
 1169               	.LFE30:
 1171               		.section	.text.store_or_get_action,"ax",@progbits
 1172               	.global	store_or_get_action
 1174               	store_or_get_action:
 1175               	.LVL79:
 1176               	.LFB28:
 229:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 1177               		.loc 1 229 58 is_stmt 1 view -0
 1178               		.cfi_startproc
 229:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 1179               		.loc 1 229 58 is_stmt 0 view .LVU205
 1180 0000 1F93      		push r17
 1181               	.LCFI31:
 1182               		.cfi_def_cfa_offset 3
 1183               		.cfi_offset 17, -2
 1184 0002 CF93      		push r28
 1185               	.LCFI32:
 1186               		.cfi_def_cfa_offset 4
 1187               		.cfi_offset 28, -3
 1188 0004 DF93      		push r29
 1189               	.LCFI33:
 1190               		.cfi_def_cfa_offset 5
 1191               		.cfi_offset 29, -4
 1192               	/* prologue: function */
 1193               	/* frame size = 0 */
 1194               	/* stack size = 3 */
 1195               	.L__stack_usage = 3
 1196 0006 EB01      		movw r28,r22
 231:tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 1197               		.loc 1 231 5 is_stmt 1 view .LVU206
 231:tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 1198               		.loc 1 231 8 is_stmt 0 view .LVU207
 1199 0008 9091 0000 		lds r25,disable_action_cache
 1200 000c 9923      		tst r25
 1201 000e 01F0      		breq .L46
 232:tmk_core/common/action_layer.c ****     }
 1202               		.loc 1 232 9 is_stmt 1 view .LVU208
 232:tmk_core/common/action_layer.c ****     }
 1203               		.loc 1 232 16 is_stmt 0 view .LVU209
 1204 0010 CB01      		movw r24,r22
 1205               	.LVL80:
 1206               	/* epilogue start */
 247:tmk_core/common/action_layer.c **** 
 1207               		.loc 1 247 1 view .LVU210
 1208 0012 DF91      		pop r29
 1209 0014 CF91      		pop r28
 1210 0016 1F91      		pop r17
 232:tmk_core/common/action_layer.c ****     }
 1211               		.loc 1 232 16 view .LVU211
 1212 0018 0C94 0000 		jmp layer_switch_get_action
 1213               	.LVL81:
 1214               	.L46:
 235:tmk_core/common/action_layer.c **** 
 1215               		.loc 1 235 5 is_stmt 1 view .LVU212
 237:tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 1216               		.loc 1 237 5 view .LVU213
 237:tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 1217               		.loc 1 237 8 is_stmt 0 view .LVU214
 1218 001c 8823      		tst r24
 1219 001e 01F0      		breq .L47
 238:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1220               		.loc 1 238 9 is_stmt 1 view .LVU215
 238:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1221               		.loc 1 238 17 is_stmt 0 view .LVU216
 1222 0020 CB01      		movw r24,r22
 1223               	.LVL82:
 238:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1224               		.loc 1 238 17 view .LVU217
 1225 0022 0E94 0000 		call layer_switch_get_layer
 1226               	.LVL83:
 1227 0026 182F      		mov r17,r24
 1228               	.LVL84:
 239:tmk_core/common/action_layer.c ****     } else {
 1229               		.loc 1 239 9 is_stmt 1 view .LVU218
 1230 0028 682F      		mov r22,r24
 1231 002a CE01      		movw r24,r28
 1232 002c 0E94 0000 		call update_source_layers_cache
 1233               	.LVL85:
 1234               	.L48:
 243:tmk_core/common/action_layer.c **** #else
 1235               		.loc 1 243 5 view .LVU219
 243:tmk_core/common/action_layer.c **** #else
 1236               		.loc 1 243 12 is_stmt 0 view .LVU220
 1237 0030 BE01      		movw r22,r28
 1238 0032 812F      		mov r24,r17
 1239               	/* epilogue start */
 247:tmk_core/common/action_layer.c **** 
 1240               		.loc 1 247 1 view .LVU221
 1241 0034 DF91      		pop r29
 1242 0036 CF91      		pop r28
 1243               	.LVL86:
 247:tmk_core/common/action_layer.c **** 
 1244               		.loc 1 247 1 view .LVU222
 1245 0038 1F91      		pop r17
 1246               	.LVL87:
 243:tmk_core/common/action_layer.c **** #else
 1247               		.loc 1 243 12 view .LVU223
 1248 003a 0C94 0000 		jmp action_for_key
 1249               	.LVL88:
 1250               	.L47:
 241:tmk_core/common/action_layer.c ****     }
 1251               		.loc 1 241 9 is_stmt 1 view .LVU224
 241:tmk_core/common/action_layer.c ****     }
 1252               		.loc 1 241 17 is_stmt 0 view .LVU225
 1253 003e CB01      		movw r24,r22
 1254               	.LVL89:
 241:tmk_core/common/action_layer.c ****     }
 1255               		.loc 1 241 17 view .LVU226
 1256 0040 0E94 0000 		call read_source_layers_cache
 1257               	.LVL90:
 1258 0044 182F      		mov r17,r24
 1259               	.LVL91:
 241:tmk_core/common/action_layer.c ****     }
 1260               		.loc 1 241 17 view .LVU227
 1261 0046 00C0      		rjmp .L48
 1262               		.cfi_endproc
 1263               	.LFE28:
 1265               	.global	source_layers_cache
 1266               		.section	.bss.source_layers_cache,"aw",@nobits
 1269               	source_layers_cache:
 1270 0000 0000 0000 		.zero	75
 1270      0000 0000 
 1270      0000 0000 
 1270      0000 0000 
 1270      0000 0000 
 1271               	.global	layer_state
 1272               		.section	.bss.layer_state,"aw",@nobits
 1275               	layer_state:
 1276 0000 0000 0000 		.zero	4
 1277               	.global	default_layer_state
 1278               		.section	.bss.default_layer_state,"aw",@nobits
 1281               	default_layer_state:
 1282 0000 0000 0000 		.zero	4
 1283               		.text
 1284               	.Letext0:
 1285               		.file 2 "/usr/avr/include/stdint.h"
 1286               		.file 3 "tmk_core/common/keyboard.h"
 1287               		.file 4 "tmk_core/common/action_code.h"
 1288               		.file 5 "tmk_core/common/action_layer.h"
 1289               		.file 6 "tmk_core/common/action.h"
 1290               		.file 7 "tmk_core/common/debug.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_layer.c
     /tmp/ccubtqMf.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccubtqMf.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccubtqMf.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccubtqMf.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccubtqMf.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccubtqMf.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccubtqMf.s:14     .text.default_layer_state_set_user:0000000000000000 default_layer_state_set_user
     /tmp/ccubtqMf.s:14     .text.default_layer_state_set_user:0000000000000000 default_layer_state_set_user.localalias.0
     /tmp/ccubtqMf.s:35     .text.default_layer_state_set_kb:0000000000000000 default_layer_state_set_kb
     /tmp/ccubtqMf.s:54     .text.default_layer_state_set:0000000000000000 default_layer_state_set
     /tmp/ccubtqMf.s:1281   .bss.default_layer_state:0000000000000000 default_layer_state
     /tmp/ccubtqMf.s:88     .text.default_layer_debug:0000000000000000 default_layer_debug
     /tmp/ccubtqMf.s:106    .text.default_layer_set:0000000000000000 default_layer_set
     /tmp/ccubtqMf.s:125    .text.default_layer_or:0000000000000000 default_layer_or
     /tmp/ccubtqMf.s:167    .text.default_layer_and:0000000000000000 default_layer_and
     /tmp/ccubtqMf.s:209    .text.default_layer_xor:0000000000000000 default_layer_xor
     /tmp/ccubtqMf.s:251    .text.layer_state_set_user:0000000000000000 layer_state_set_user
     /tmp/ccubtqMf.s:265    .text.layer_state_set_kb:0000000000000000 layer_state_set_kb
     /tmp/ccubtqMf.s:285    .text.layer_state_set:0000000000000000 layer_state_set
     /tmp/ccubtqMf.s:1275   .bss.layer_state:0000000000000000 layer_state
     /tmp/ccubtqMf.s:319    .text.layer_clear:0000000000000000 layer_clear
     /tmp/ccubtqMf.s:339    .text.layer_state_cmp:0000000000000000 layer_state_cmp
     /tmp/ccubtqMf.s:387    .text.layer_state_is:0000000000000000 layer_state_is
     /tmp/ccubtqMf.s:413    .text.layer_move:0000000000000000 layer_move
     /tmp/ccubtqMf.s:464    .text.layer_on:0000000000000000 layer_on
     /tmp/ccubtqMf.s:525    .text.layer_off:0000000000000000 layer_off
     /tmp/ccubtqMf.s:589    .text.layer_invert:0000000000000000 layer_invert
     /tmp/ccubtqMf.s:650    .text.layer_or:0000000000000000 layer_or
     /tmp/ccubtqMf.s:692    .text.layer_and:0000000000000000 layer_and
     /tmp/ccubtqMf.s:734    .text.layer_xor:0000000000000000 layer_xor
     /tmp/ccubtqMf.s:776    .text.layer_debug:0000000000000000 layer_debug
     /tmp/ccubtqMf.s:791    .text.update_source_layers_cache:0000000000000000 update_source_layers_cache
     /tmp/ccubtqMf.s:1269   .bss.source_layers_cache:0000000000000000 source_layers_cache
     /tmp/ccubtqMf.s:895    .text.read_source_layers_cache:0000000000000000 read_source_layers_cache
     /tmp/ccubtqMf.s:989    .text.layer_switch_get_layer:0000000000000000 layer_switch_get_layer
     /tmp/ccubtqMf.s:1135   .text.layer_switch_get_action:0000000000000000 layer_switch_get_action
     /tmp/ccubtqMf.s:1174   .text.store_or_get_action:0000000000000000 store_or_get_action

UNDEFINED SYMBOLS
clear_keyboard_but_mods_and_keys
action_for_key
disable_action_cache
__do_clear_bss
