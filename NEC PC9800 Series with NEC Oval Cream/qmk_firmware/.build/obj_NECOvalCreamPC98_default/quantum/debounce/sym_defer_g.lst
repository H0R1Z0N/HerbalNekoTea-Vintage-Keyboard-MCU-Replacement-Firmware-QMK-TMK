   1               		.file	"sym_defer_g.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.debounce_init,"ax",@progbits
  12               	.global	debounce_init
  14               	debounce_init:
  15               	.LVL0:
  16               	.LFB117:
  17               		.file 1 "quantum/debounce/sym_defer_g.c"
   1:quantum/debounce/sym_defer_g.c **** /*
   2:quantum/debounce/sym_defer_g.c **** Copyright 2017 Alex Ong<the.onga@gmail.com>
   3:quantum/debounce/sym_defer_g.c **** This program is free software: you can redistribute it and/or modify
   4:quantum/debounce/sym_defer_g.c **** it under the terms of the GNU General Public License as published by
   5:quantum/debounce/sym_defer_g.c **** the Free Software Foundation, either version 2 of the License, or
   6:quantum/debounce/sym_defer_g.c **** (at your option) any later version.
   7:quantum/debounce/sym_defer_g.c **** This program is distributed in the hope that it will be useful,
   8:quantum/debounce/sym_defer_g.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:quantum/debounce/sym_defer_g.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:quantum/debounce/sym_defer_g.c **** GNU General Public License for more details.
  11:quantum/debounce/sym_defer_g.c **** You should have received a copy of the GNU General Public License
  12:quantum/debounce/sym_defer_g.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:quantum/debounce/sym_defer_g.c **** */
  14:quantum/debounce/sym_defer_g.c **** 
  15:quantum/debounce/sym_defer_g.c **** /*
  16:quantum/debounce/sym_defer_g.c **** Basic global debounce algorithm. Used in 99% of keyboards at time of implementation
  17:quantum/debounce/sym_defer_g.c **** When no state changes have occured for DEBOUNCE milliseconds, we push the state.
  18:quantum/debounce/sym_defer_g.c **** */
  19:quantum/debounce/sym_defer_g.c **** #include "matrix.h"
  20:quantum/debounce/sym_defer_g.c **** #include "timer.h"
  21:quantum/debounce/sym_defer_g.c **** #include "quantum.h"
  22:quantum/debounce/sym_defer_g.c **** #ifndef DEBOUNCE
  23:quantum/debounce/sym_defer_g.c **** #    define DEBOUNCE 5
  24:quantum/debounce/sym_defer_g.c **** #endif
  25:quantum/debounce/sym_defer_g.c **** 
  26:quantum/debounce/sym_defer_g.c **** void        debounce_init(uint8_t num_rows) {}
  18               		.loc 1 26 45 view -0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24               		.loc 1 26 46 view .LVU1
  25               	/* epilogue start */
  26               		.loc 1 26 1 is_stmt 0 view .LVU2
  27 0000 0895      		ret
  28               		.cfi_endproc
  29               	.LFE117:
  31               		.section	.text.debounce,"ax",@progbits
  32               	.global	debounce
  34               	debounce:
  35               	.LVL1:
  36               	.LFB118:
  27:quantum/debounce/sym_defer_g.c **** static bool debouncing = false;
  28:quantum/debounce/sym_defer_g.c **** 
  29:quantum/debounce/sym_defer_g.c **** #if DEBOUNCE > 0
  30:quantum/debounce/sym_defer_g.c **** static uint16_t debouncing_time;
  31:quantum/debounce/sym_defer_g.c **** void            debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed)
  37               		.loc 1 31 101 is_stmt 1 view -0
  38               		.cfi_startproc
  39               		.loc 1 31 101 is_stmt 0 view .LVU4
  40 0000 FF92      		push r15
  41               	.LCFI0:
  42               		.cfi_def_cfa_offset 3
  43               		.cfi_offset 15, -2
  44 0002 0F93      		push r16
  45               	.LCFI1:
  46               		.cfi_def_cfa_offset 4
  47               		.cfi_offset 16, -3
  48 0004 1F93      		push r17
  49               	.LCFI2:
  50               		.cfi_def_cfa_offset 5
  51               		.cfi_offset 17, -4
  52 0006 CF93      		push r28
  53               	.LCFI3:
  54               		.cfi_def_cfa_offset 6
  55               		.cfi_offset 28, -5
  56 0008 DF93      		push r29
  57               	.LCFI4:
  58               		.cfi_def_cfa_offset 7
  59               		.cfi_offset 29, -6
  60               	/* prologue: function */
  61               	/* frame size = 0 */
  62               	/* stack size = 5 */
  63               	.L__stack_usage = 5
  64 000a F82E      		mov r15,r24
  65 000c 092F      		mov r16,r25
  66 000e 162F      		mov r17,r22
  67 0010 D72F      		mov r29,r23
  68 0012 C42F      		mov r28,r20
  32:quantum/debounce/sym_defer_g.c ****     if (changed) {
  69               		.loc 1 32 5 is_stmt 1 view .LVU5
  70               		.loc 1 32 8 is_stmt 0 view .LVU6
  71 0014 2223      		tst r18
  72 0016 01F0      		breq .L3
  33:quantum/debounce/sym_defer_g.c ****         debouncing      = true;
  73               		.loc 1 33 9 is_stmt 1 view .LVU7
  74               		.loc 1 33 25 is_stmt 0 view .LVU8
  75 0018 81E0      		ldi r24,lo8(1)
  76               	.LVL2:
  77               		.loc 1 33 25 view .LVU9
  78 001a 8093 0000 		sts debouncing,r24
  34:quantum/debounce/sym_defer_g.c ****         debouncing_time = timer_read();
  79               		.loc 1 34 9 is_stmt 1 view .LVU10
  80               		.loc 1 34 27 is_stmt 0 view .LVU11
  81 001e 0E94 0000 		call timer_read
  82               	.LVL3:
  83               		.loc 1 34 25 view .LVU12
  84 0022 9093 0000 		sts debouncing_time+1,r25
  85 0026 8093 0000 		sts debouncing_time,r24
  86               	.L3:
  35:quantum/debounce/sym_defer_g.c ****     }
  36:quantum/debounce/sym_defer_g.c **** 
  37:quantum/debounce/sym_defer_g.c ****     if (debouncing && timer_elapsed(debouncing_time) > DEBOUNCE) {
  87               		.loc 1 37 5 is_stmt 1 view .LVU13
  88               		.loc 1 37 8 is_stmt 0 view .LVU14
  89 002a 8091 0000 		lds r24,debouncing
  90 002e 8823      		tst r24
  91 0030 01F0      		breq .L2
  92               		.loc 1 37 23 discriminator 1 view .LVU15
  93 0032 8091 0000 		lds r24,debouncing_time
  94 0036 9091 0000 		lds r25,debouncing_time+1
  95 003a 0E94 0000 		call timer_elapsed
  96               	.LVL4:
  97               		.loc 1 37 20 discriminator 1 view .LVU16
  98 003e 0697      		sbiw r24,6
  99 0040 00F0      		brlo .L2
 100 0042 EF2D      		mov r30,r15
 101 0044 F02F      		mov r31,r16
 102 0046 A12F      		mov r26,r17
 103 0048 BD2F      		mov r27,r29
 104               	.LBB2:
  38:quantum/debounce/sym_defer_g.c ****         for (int i = 0; i < num_rows; i++) {
 105               		.loc 1 38 18 view .LVU17
 106 004a 90E0      		ldi r25,0
 107 004c 80E0      		ldi r24,0
 108               		.loc 1 38 27 view .LVU18
 109 004e D0E0      		ldi r29,0
 110               	.L7:
 111               	.LVL5:
 112               		.loc 1 38 9 discriminator 1 view .LVU19
 113 0050 8C17      		cp r24,r28
 114 0052 9D07      		cpc r25,r29
 115 0054 04F0      		brlt .L8
 116               	.LBE2:
  39:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
  40:quantum/debounce/sym_defer_g.c ****         }
  41:quantum/debounce/sym_defer_g.c ****         debouncing = false;
 117               		.loc 1 41 9 is_stmt 1 view .LVU20
 118               		.loc 1 41 20 is_stmt 0 view .LVU21
 119 0056 1092 0000 		sts debouncing,__zero_reg__
 120               	.LVL6:
 121               	.L2:
 122               	/* epilogue start */
  42:quantum/debounce/sym_defer_g.c ****     }
  43:quantum/debounce/sym_defer_g.c **** }
 123               		.loc 1 43 1 view .LVU22
 124 005a DF91      		pop r29
 125 005c CF91      		pop r28
 126               	.LVL7:
 127               		.loc 1 43 1 view .LVU23
 128 005e 1F91      		pop r17
 129 0060 0F91      		pop r16
 130 0062 FF90      		pop r15
 131 0064 0895      		ret
 132               	.LVL8:
 133               	.L8:
 134               	.LBB3:
  39:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 135               		.loc 1 39 13 is_stmt 1 discriminator 3 view .LVU24
  39:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 136               		.loc 1 39 28 is_stmt 0 discriminator 3 view .LVU25
 137 0066 2191      		ld r18,Z+
 138 0068 3191      		ld r19,Z+
  39:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 139               		.loc 1 39 23 discriminator 3 view .LVU26
 140 006a 2D93      		st X+,r18
 141 006c 3D93      		st X+,r19
  38:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 142               		.loc 1 38 40 discriminator 3 view .LVU27
 143 006e 0196      		adiw r24,1
 144               	.LVL9:
  38:quantum/debounce/sym_defer_g.c ****             cooked[i] = raw[i];
 145               		.loc 1 38 40 discriminator 3 view .LVU28
 146 0070 00C0      		rjmp .L7
 147               	.LBE3:
 148               		.cfi_endproc
 149               	.LFE118:
 151               		.section	.text.debounce_active,"ax",@progbits
 152               	.global	debounce_active
 154               	debounce_active:
 155               	.LFB119:
  44:quantum/debounce/sym_defer_g.c **** #else  // no debouncing.
  45:quantum/debounce/sym_defer_g.c **** void debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed) {
  46:quantum/debounce/sym_defer_g.c ****     for (int i = 0; i < num_rows; i++) {
  47:quantum/debounce/sym_defer_g.c ****         cooked[i] = raw[i];
  48:quantum/debounce/sym_defer_g.c ****     }
  49:quantum/debounce/sym_defer_g.c **** }
  50:quantum/debounce/sym_defer_g.c **** #endif
  51:quantum/debounce/sym_defer_g.c **** 
  52:quantum/debounce/sym_defer_g.c **** bool debounce_active(void) { return debouncing; }
 156               		.loc 1 52 28 is_stmt 1 view -0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 162               		.loc 1 52 30 view .LVU30
 163               		.loc 1 52 1 is_stmt 0 view .LVU31
 164 0000 8091 0000 		lds r24,debouncing
 165               	/* epilogue start */
 166 0004 0895      		ret
 167               		.cfi_endproc
 168               	.LFE119:
 170               		.section	.bss.debouncing_time,"aw",@nobits
 173               	debouncing_time:
 174 0000 0000      		.zero	2
 175               		.section	.bss.debouncing,"aw",@nobits
 178               	debouncing:
 179 0000 00        		.zero	1
 180               		.text
 181               	.Letext0:
 182               		.file 2 "/usr/avr/include/stdint.h"
 183               		.file 3 "tmk_core/common/matrix.h"
 184               		.file 4 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 185               		.file 5 "tmk_core/common/timer.h"
 186               		.file 6 "tmk_core/common/action.h"
 187               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 188               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 189               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 190               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 191               		.file 11 "/usr/avr/include/stdio.h"
 192               		.file 12 "tmk_core/common/report.h"
 193               		.file 13 "tmk_core/common/host.h"
 194               		.file 14 "tmk_core/common/debug.h"
 195               		.file 15 "quantum/keycode_config.h"
 196               		.file 16 "quantum/keymap.h"
 197               		.file 17 "tmk_core/common/action_layer.h"
 198               		.file 18 "tmk_core/common/action_util.h"
 199               		.file 19 "/usr/avr/include/stdlib.h"
 200               		.file 20 "quantum/quantum.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sym_defer_g.c
     /tmp/ccgV1Kdj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccgV1Kdj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccgV1Kdj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccgV1Kdj.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccgV1Kdj.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccgV1Kdj.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccgV1Kdj.s:14     .text.debounce_init:0000000000000000 debounce_init
     /tmp/ccgV1Kdj.s:34     .text.debounce:0000000000000000 debounce
     /tmp/ccgV1Kdj.s:178    .bss.debouncing:0000000000000000 debouncing
     /tmp/ccgV1Kdj.s:173    .bss.debouncing_time:0000000000000000 debouncing_time
     /tmp/ccgV1Kdj.s:154    .text.debounce_active:0000000000000000 debounce_active

UNDEFINED SYMBOLS
timer_read
timer_elapsed
__do_clear_bss
