   1               		.file	"matrix_common.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.matrix_init_user,"ax",@progbits
  12               		.weak	matrix_init_user
  14               	matrix_init_user:
  15               	.LFB8:
  16               		.file 1 "quantum/matrix_common.c"
   1:quantum/matrix_common.c **** #include "matrix.h"
   2:quantum/matrix_common.c **** #include "debounce.h"
   3:quantum/matrix_common.c **** #include "wait.h"
   4:quantum/matrix_common.c **** #include "print.h"
   5:quantum/matrix_common.c **** #include "debug.h"
   6:quantum/matrix_common.c **** 
   7:quantum/matrix_common.c **** #ifndef MATRIX_IO_DELAY
   8:quantum/matrix_common.c **** #    define MATRIX_IO_DELAY 30
   9:quantum/matrix_common.c **** #endif
  10:quantum/matrix_common.c **** 
  11:quantum/matrix_common.c **** /* matrix state(1:on, 0:off) */
  12:quantum/matrix_common.c **** matrix_row_t raw_matrix[MATRIX_ROWS];
  13:quantum/matrix_common.c **** matrix_row_t matrix[MATRIX_ROWS];
  14:quantum/matrix_common.c **** 
  15:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  16:quantum/matrix_common.c **** extern const matrix_row_t matrix_mask[];
  17:quantum/matrix_common.c **** #endif
  18:quantum/matrix_common.c **** 
  19:quantum/matrix_common.c **** // user-defined overridable functions
  20:quantum/matrix_common.c **** 
  21:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_kb(void) { matrix_init_user(); }
  22:quantum/matrix_common.c **** 
  23:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_kb(void) { matrix_scan_user(); }
  24:quantum/matrix_common.c **** 
  25:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_user(void) {}
  17               		.loc 1 25 51 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 25 52 view .LVU1
  24               	/* epilogue start */
  25               		.loc 1 25 1 is_stmt 0 view .LVU2
  26 0000 0895      		ret
  27               		.cfi_endproc
  28               	.LFE8:
  30               		.set	matrix_init_user.localalias.0,matrix_init_user
  31               		.section	.text.matrix_init_kb,"ax",@progbits
  32               		.weak	matrix_init_kb
  34               	matrix_init_kb:
  35               	.LFB6:
  21:quantum/matrix_common.c **** 
  36               		.loc 1 21 49 is_stmt 1 view -0
  37               		.cfi_startproc
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  21:quantum/matrix_common.c **** 
  42               		.loc 1 21 51 view .LVU4
  43 0000 0C94 0000 		jmp matrix_init_user
  44               	.LVL0:
  45               		.cfi_endproc
  46               	.LFE6:
  48               		.section	.text.matrix_scan_user,"ax",@progbits
  49               		.weak	matrix_scan_user
  51               	matrix_scan_user:
  52               	.LFB24:
  53               		.cfi_startproc
  54               	/* prologue: function */
  55               	/* frame size = 0 */
  56               	/* stack size = 0 */
  57               	.L__stack_usage = 0
  58               	/* epilogue start */
  59 0000 0895      		ret
  60               		.cfi_endproc
  61               	.LFE24:
  63               		.section	.text.matrix_scan_kb,"ax",@progbits
  64               		.weak	matrix_scan_kb
  66               	matrix_scan_kb:
  67               	.LFB7:
  23:quantum/matrix_common.c **** 
  68               		.loc 1 23 49 view -0
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  23:quantum/matrix_common.c **** 
  74               		.loc 1 23 51 view .LVU6
  75 0000 0C94 0000 		jmp matrix_scan_user
  76               	.LVL1:
  77               		.cfi_endproc
  78               	.LFE7:
  80               		.section	.text.matrix_rows,"ax",@progbits
  81               	.global	matrix_rows
  83               	matrix_rows:
  84               	.LFB10:
  26:quantum/matrix_common.c **** 
  27:quantum/matrix_common.c **** __attribute__((weak)) void matrix_scan_user(void) {}
  28:quantum/matrix_common.c **** 
  29:quantum/matrix_common.c **** // helper functions
  30:quantum/matrix_common.c **** 
  31:quantum/matrix_common.c **** inline uint8_t matrix_rows(void) { return MATRIX_ROWS; }
  85               		.loc 1 31 34 view -0
  86               		.cfi_startproc
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
  91               		.loc 1 31 36 view .LVU8
  92               		.loc 1 31 1 is_stmt 0 view .LVU9
  93 0000 88E0      		ldi r24,lo8(8)
  94               	/* epilogue start */
  95 0002 0895      		ret
  96               		.cfi_endproc
  97               	.LFE10:
  99               		.section	.text.matrix_cols,"ax",@progbits
 100               	.global	matrix_cols
 102               	matrix_cols:
 103               	.LFB11:
  32:quantum/matrix_common.c **** 
  33:quantum/matrix_common.c **** inline uint8_t matrix_cols(void) { return MATRIX_COLS; }
 104               		.loc 1 33 34 is_stmt 1 view -0
 105               		.cfi_startproc
 106               	/* prologue: function */
 107               	/* frame size = 0 */
 108               	/* stack size = 0 */
 109               	.L__stack_usage = 0
 110               		.loc 1 33 36 view .LVU11
 111               		.loc 1 33 1 is_stmt 0 view .LVU12
 112 0000 8FE0      		ldi r24,lo8(15)
 113               	/* epilogue start */
 114 0002 0895      		ret
 115               		.cfi_endproc
 116               	.LFE11:
 118               		.section	.text.matrix_is_on,"ax",@progbits
 119               	.global	matrix_is_on
 121               	matrix_is_on:
 122               	.LVL2:
 123               	.LFB12:
  34:quantum/matrix_common.c **** 
  35:quantum/matrix_common.c **** inline bool matrix_is_on(uint8_t row, uint8_t col) { return (matrix[row] & ((matrix_row_t)1 << col)
 124               		.loc 1 35 52 is_stmt 1 view -0
 125               		.cfi_startproc
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 0 */
 129               	.L__stack_usage = 0
 130               		.loc 1 35 54 view .LVU14
 131               		.loc 1 35 68 is_stmt 0 view .LVU15
 132 0000 E82F      		mov r30,r24
 133 0002 F0E0      		ldi r31,0
 134 0004 EE0F      		lsl r30
 135 0006 FF1F      		rol r31
 136               	.LVL3:
 137               		.loc 1 35 68 view .LVU16
 138 0008 E050      		subi r30,lo8(-(matrix))
 139 000a F040      		sbci r31,hi8(-(matrix))
 140               		.loc 1 35 93 view .LVU17
 141 000c 21E0      		ldi r18,lo8(1)
 142 000e 30E0      		ldi r19,0
 143 0010 00C0      		rjmp 2f
 144               		1:
 145 0012 220F      		lsl r18
 146 0014 331F      		rol r19
 147               		2:
 148 0016 6A95      		dec r22
 149 0018 02F4      		brpl 1b
 150               		.loc 1 35 74 view .LVU18
 151 001a 8081      		ld r24,Z
 152 001c 9181      		ldd r25,Z+1
 153 001e 2823      		and r18,r24
 154 0020 3923      		and r19,r25
 155 0022 81E0      		ldi r24,lo8(1)
 156 0024 232B      		or r18,r19
 157 0026 01F4      		brne .L8
 158 0028 80E0      		ldi r24,0
 159               	.L8:
 160               	/* epilogue start */
 161               		.loc 1 35 1 view .LVU19
 162 002a 0895      		ret
 163               		.cfi_endproc
 164               	.LFE12:
 166               		.section	.text.matrix_get_row,"ax",@progbits
 167               	.global	matrix_get_row
 169               	matrix_get_row:
 170               	.LVL4:
 171               	.LFB13:
  36:quantum/matrix_common.c **** 
  37:quantum/matrix_common.c **** inline matrix_row_t matrix_get_row(uint8_t row) {
 172               		.loc 1 37 49 is_stmt 1 view -0
 173               		.cfi_startproc
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
  38:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
  39:quantum/matrix_common.c ****     // switch blocker installed and the switch is always pressed.
  40:quantum/matrix_common.c **** #ifdef MATRIX_MASKED
  41:quantum/matrix_common.c ****     return matrix[row] & matrix_mask[row];
  42:quantum/matrix_common.c **** #else
  43:quantum/matrix_common.c ****     return matrix[row];
 178               		.loc 1 43 5 view .LVU21
 179               		.loc 1 43 18 is_stmt 0 view .LVU22
 180 0000 E82F      		mov r30,r24
 181 0002 F0E0      		ldi r31,0
 182 0004 EE0F      		lsl r30
 183 0006 FF1F      		rol r31
 184               	.LVL5:
 185               		.loc 1 43 18 view .LVU23
 186 0008 E050      		subi r30,lo8(-(matrix))
 187 000a F040      		sbci r31,hi8(-(matrix))
  44:quantum/matrix_common.c **** #endif
  45:quantum/matrix_common.c **** }
 188               		.loc 1 45 1 view .LVU24
 189 000c 8081      		ld r24,Z
 190 000e 9181      		ldd r25,Z+1
 191               	/* epilogue start */
 192 0010 0895      		ret
 193               		.cfi_endproc
 194               	.LFE13:
 196               		.section	.text.matrix_is_modified,"ax",@progbits
 197               	.global	matrix_is_modified
 199               	matrix_is_modified:
 200               	.LFB14:
  46:quantum/matrix_common.c **** 
  47:quantum/matrix_common.c **** // Deprecated.
  48:quantum/matrix_common.c **** bool matrix_is_modified(void) {
 201               		.loc 1 48 31 is_stmt 1 view -0
 202               		.cfi_startproc
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 0 */
 206               	.L__stack_usage = 0
  49:quantum/matrix_common.c ****     if (debounce_active()) return false;
 207               		.loc 1 49 5 view .LVU26
 208               		.loc 1 49 9 is_stmt 0 view .LVU27
 209 0000 0E94 0000 		call debounce_active
 210               	.LVL6:
  50:quantum/matrix_common.c ****     return true;
  51:quantum/matrix_common.c **** }
 211               		.loc 1 51 1 view .LVU28
 212 0004 91E0      		ldi r25,lo8(1)
 213 0006 8927      		eor r24,r25
 214               	/* epilogue start */
 215 0008 0895      		ret
 216               		.cfi_endproc
 217               	.LFE14:
 219               		.section	.text.matrix_print,"ax",@progbits
 220               	.global	matrix_print
 222               	matrix_print:
 223               	.LFB15:
  52:quantum/matrix_common.c **** 
  53:quantum/matrix_common.c **** #if (MATRIX_COLS <= 8)
  54:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 01234567\n")
  55:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse8(matrix_get_row(row))
  56:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop(matrix_get_row(row))
  57:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 16)
  58:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF\n")
  59:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse16(matrix_get_row(row))
  60:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop16(matrix_get_row(row))
  61:quantum/matrix_common.c **** #elif (MATRIX_COLS <= 32)
  62:quantum/matrix_common.c **** #    define print_matrix_header() print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  63:quantum/matrix_common.c **** #    define print_matrix_row(row) print_bin_reverse32(matrix_get_row(row))
  64:quantum/matrix_common.c **** #    define matrix_bitpop(row) bitpop32(matrix_get_row(row))
  65:quantum/matrix_common.c **** #endif
  66:quantum/matrix_common.c **** 
  67:quantum/matrix_common.c **** void matrix_print(void) {
 224               		.loc 1 67 25 is_stmt 1 view -0
 225               		.cfi_startproc
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 0 */
 229               	.L__stack_usage = 0
  68:quantum/matrix_common.c ****     print_matrix_header();
 230               		.loc 1 68 26 view .LVU30
  69:quantum/matrix_common.c **** 
  70:quantum/matrix_common.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 231               		.loc 1 70 5 view .LVU31
 232               		.loc 1 70 10 view .LVU32
 233               	.LVL7:
 234               	/* epilogue start */
  71:quantum/matrix_common.c ****         phex(row);
  72:quantum/matrix_common.c ****         print(": ");
  73:quantum/matrix_common.c ****         print_matrix_row(row);
  74:quantum/matrix_common.c ****         print("\n");
  75:quantum/matrix_common.c ****     }
  76:quantum/matrix_common.c **** }
 235               		.loc 1 76 1 is_stmt 0 view .LVU33
 236 0000 0895      		ret
 237               		.cfi_endproc
 238               	.LFE15:
 240               		.section	.text.matrix_key_count,"ax",@progbits
 241               	.global	matrix_key_count
 243               	matrix_key_count:
 244               	.LFB16:
  77:quantum/matrix_common.c **** 
  78:quantum/matrix_common.c **** uint8_t matrix_key_count(void) {
 245               		.loc 1 78 32 is_stmt 1 view -0
 246               		.cfi_startproc
 247 0000 0F93      		push r16
 248               	.LCFI0:
 249               		.cfi_def_cfa_offset 3
 250               		.cfi_offset 16, -2
 251 0002 1F93      		push r17
 252               	.LCFI1:
 253               		.cfi_def_cfa_offset 4
 254               		.cfi_offset 17, -3
 255 0004 CF93      		push r28
 256               	.LCFI2:
 257               		.cfi_def_cfa_offset 5
 258               		.cfi_offset 28, -4
 259               	/* prologue: function */
 260               	/* frame size = 0 */
 261               	/* stack size = 3 */
 262               	.L__stack_usage = 3
  79:quantum/matrix_common.c ****     uint8_t count = 0;
 263               		.loc 1 79 5 view .LVU35
 264               	.LVL8:
  80:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 265               		.loc 1 80 5 view .LVU36
 266               	.LBB7:
 267               		.loc 1 80 10 view .LVU37
 268               		.loc 1 80 10 is_stmt 0 view .LVU38
 269 0006 00E0      		ldi r16,lo8(matrix)
 270 0008 10E0      		ldi r17,hi8(matrix)
 271               	.LBE7:
  79:quantum/matrix_common.c ****     uint8_t count = 0;
 272               		.loc 1 79 13 view .LVU39
 273 000a C0E0      		ldi r28,0
 274               	.LVL9:
 275               	.L13:
 276               	.LBB10:
  81:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 277               		.loc 1 81 9 is_stmt 1 view .LVU40
 278               	.LBB8:
 279               	.LBI8:
  37:quantum/matrix_common.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 280               		.loc 1 37 21 view .LVU41
 281               	.LBB9:
  43:quantum/matrix_common.c **** #endif
 282               		.loc 1 43 5 view .LVU42
 283               	.LBE9:
 284               	.LBE8:
 285               		.loc 1 81 18 is_stmt 0 view .LVU43
 286 000c F801      		movw r30,r16
 287 000e 8191      		ld r24,Z+
 288 0010 9191      		ld r25,Z+
 289 0012 8F01      		movw r16,r30
 290 0014 0E94 0000 		call bitpop16
 291               	.LVL10:
 292               		.loc 1 81 15 view .LVU44
 293 0018 C80F      		add r28,r24
 294               	.LVL11:
  80:quantum/matrix_common.c ****         count += matrix_bitpop(i);
 295               		.loc 1 80 5 view .LVU45
 296 001a F0E0      		ldi r31,hi8(matrix+16)
 297 001c 0030      		cpi r16,lo8(matrix+16)
 298 001e 1F07      		cpc r17,r31
 299 0020 01F4      		brne .L13
 300               	.LBE10:
  82:quantum/matrix_common.c ****     }
  83:quantum/matrix_common.c ****     return count;
 301               		.loc 1 83 5 is_stmt 1 view .LVU46
  84:quantum/matrix_common.c **** }
 302               		.loc 1 84 1 is_stmt 0 view .LVU47
 303 0022 8C2F      		mov r24,r28
 304               	/* epilogue start */
 305 0024 CF91      		pop r28
 306               	.LVL12:
 307               		.loc 1 84 1 view .LVU48
 308 0026 1F91      		pop r17
 309 0028 0F91      		pop r16
 310 002a 0895      		ret
 311               		.cfi_endproc
 312               	.LFE16:
 314               		.section	.text.matrix_io_delay,"ax",@progbits
 315               		.weak	matrix_io_delay
 317               	matrix_io_delay:
 318               	.LFB17:
  85:quantum/matrix_common.c **** 
  86:quantum/matrix_common.c **** __attribute__((weak)) void matrix_io_delay(void) { wait_us(MATRIX_IO_DELAY); }
 319               		.loc 1 86 50 is_stmt 1 view -0
 320               		.cfi_startproc
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 0 */
 324               	.L__stack_usage = 0
 325               		.loc 1 86 52 view .LVU50
 326               	.LVL13:
 327               	.LBB11:
 328               	.LBI11:
 329               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 330               		.loc 2 255 1 view .LVU51
 331               	.LBB12:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 332               		.loc 2 257 2 view .LVU52
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 333               		.loc 2 261 2 view .LVU53
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 334               		.loc 2 262 2 view .LVU54
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 335               		.loc 2 263 2 view .LVU55
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 336               		.loc 2 273 3 view .LVU56
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 337               		.loc 2 276 2 view .LVU57
 338 0000 80EA      		ldi r24,lo8(-96)
 339 0002 8A95      	1:	dec r24
 340 0004 01F4      		brne 1b
 341               	.LVL14:
 342               	/* epilogue start */
 343               		.loc 2 276 2 is_stmt 0 view .LVU58
 344               	.LBE12:
 345               	.LBE11:
 346               		.loc 1 86 1 view .LVU59
 347 0006 0895      		ret
 348               		.cfi_endproc
 349               	.LFE17:
 351               		.section	.text.matrix_init_custom,"ax",@progbits
 352               		.weak	matrix_init_custom
 354               	matrix_init_custom:
 355               	.LFB26:
 356               		.cfi_startproc
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 0 */
 360               	.L__stack_usage = 0
 361               	/* epilogue start */
 362 0000 0895      		ret
 363               		.cfi_endproc
 364               	.LFE26:
 366               		.section	.text.matrix_scan_custom,"ax",@progbits
 367               		.weak	matrix_scan_custom
 369               	matrix_scan_custom:
 370               	.LVL15:
 371               	.LFB19:
  87:quantum/matrix_common.c **** 
  88:quantum/matrix_common.c **** // CUSTOM MATRIX 'LITE'
  89:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init_custom(void) {}
  90:quantum/matrix_common.c **** 
  91:quantum/matrix_common.c **** __attribute__((weak)) bool matrix_scan_custom(matrix_row_t current_matrix[]) { return true; }
 372               		.loc 1 91 78 is_stmt 1 view -0
 373               		.cfi_startproc
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 378               		.loc 1 91 80 view .LVU61
 379               		.loc 1 91 1 is_stmt 0 view .LVU62
 380 0000 81E0      		ldi r24,lo8(1)
 381               	.LVL16:
 382               	/* epilogue start */
 383               		.loc 1 91 1 view .LVU63
 384 0002 0895      		ret
 385               		.cfi_endproc
 386               	.LFE19:
 388               		.section	.text.matrix_init,"ax",@progbits
 389               		.weak	matrix_init
 391               	matrix_init:
 392               	.LFB20:
  92:quantum/matrix_common.c **** 
  93:quantum/matrix_common.c **** __attribute__((weak)) void matrix_init(void) {
 393               		.loc 1 93 46 is_stmt 1 view -0
 394               		.cfi_startproc
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
  94:quantum/matrix_common.c ****     matrix_init_custom();
 399               		.loc 1 94 5 view .LVU65
 400 0000 0E94 0000 		call matrix_init_custom
 401               	.LVL17:
  95:quantum/matrix_common.c **** 
  96:quantum/matrix_common.c ****     // initialize matrix state: all keys off
  97:quantum/matrix_common.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 402               		.loc 1 97 5 view .LVU66
 403               	.LBB13:
 404               		.loc 1 97 10 view .LVU67
 405               		.loc 1 97 10 is_stmt 0 view .LVU68
 406 0004 E0E0      		ldi r30,lo8(raw_matrix)
 407 0006 F0E0      		ldi r31,hi8(raw_matrix)
 408 0008 A0E0      		ldi r26,lo8(matrix)
 409 000a B0E0      		ldi r27,hi8(matrix)
 410               	.LVL18:
 411               	.L19:
  98:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 412               		.loc 1 98 9 is_stmt 1 discriminator 3 view .LVU69
 413               		.loc 1 98 23 is_stmt 0 discriminator 3 view .LVU70
 414 000c 1192      		st Z+,__zero_reg__
 415 000e 1192      		st Z+,__zero_reg__
  99:quantum/matrix_common.c ****         matrix[i]     = 0;
 416               		.loc 1 99 9 is_stmt 1 discriminator 3 view .LVU71
 417               		.loc 1 99 23 is_stmt 0 discriminator 3 view .LVU72
 418 0010 1D92      		st X+,__zero_reg__
 419 0012 1D92      		st X+,__zero_reg__
  97:quantum/matrix_common.c ****         raw_matrix[i] = 0;
 420               		.loc 1 97 5 discriminator 3 view .LVU73
 421 0014 80E0      		ldi r24,hi8(raw_matrix+16)
 422 0016 E030      		cpi r30,lo8(raw_matrix+16)
 423 0018 F807      		cpc r31,r24
 424 001a 01F4      		brne .L19
 425               	.LBE13:
 100:quantum/matrix_common.c ****     }
 101:quantum/matrix_common.c **** 
 102:quantum/matrix_common.c ****     debounce_init(MATRIX_ROWS);
 426               		.loc 1 102 5 is_stmt 1 view .LVU74
 427 001c 88E0      		ldi r24,lo8(8)
 428 001e 0E94 0000 		call debounce_init
 429               	.LVL19:
 103:quantum/matrix_common.c **** 
 104:quantum/matrix_common.c ****     matrix_init_quantum();
 430               		.loc 1 104 5 view .LVU75
 431 0022 0C94 0000 		jmp matrix_init_quantum
 432               	.LVL20:
 433               		.cfi_endproc
 434               	.LFE20:
 436               		.section	.text.matrix_scan,"ax",@progbits
 437               		.weak	matrix_scan
 439               	matrix_scan:
 440               	.LFB21:
 105:quantum/matrix_common.c **** }
 106:quantum/matrix_common.c **** 
 107:quantum/matrix_common.c **** __attribute__((weak)) uint8_t matrix_scan(void) {
 441               		.loc 1 107 49 view -0
 442               		.cfi_startproc
 443 0000 CF93      		push r28
 444               	.LCFI3:
 445               		.cfi_def_cfa_offset 3
 446               		.cfi_offset 28, -2
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 1 */
 450               	.L__stack_usage = 1
 108:quantum/matrix_common.c ****     bool changed = matrix_scan_custom(raw_matrix);
 451               		.loc 1 108 5 view .LVU77
 452               		.loc 1 108 20 is_stmt 0 view .LVU78
 453 0002 80E0      		ldi r24,lo8(raw_matrix)
 454 0004 90E0      		ldi r25,hi8(raw_matrix)
 455 0006 0E94 0000 		call matrix_scan_custom
 456               	.LVL21:
 457 000a C82F      		mov r28,r24
 458               	.LVL22:
 109:quantum/matrix_common.c **** 
 110:quantum/matrix_common.c ****     debounce(raw_matrix, matrix, MATRIX_ROWS, changed);
 459               		.loc 1 110 5 is_stmt 1 view .LVU79
 460 000c 282F      		mov r18,r24
 461 000e 48E0      		ldi r20,lo8(8)
 462 0010 60E0      		ldi r22,lo8(matrix)
 463 0012 70E0      		ldi r23,hi8(matrix)
 464 0014 80E0      		ldi r24,lo8(raw_matrix)
 465 0016 90E0      		ldi r25,hi8(raw_matrix)
 466               	.LVL23:
 467               		.loc 1 110 5 is_stmt 0 view .LVU80
 468 0018 0E94 0000 		call debounce
 469               	.LVL24:
 111:quantum/matrix_common.c **** 
 112:quantum/matrix_common.c ****     matrix_scan_quantum();
 470               		.loc 1 112 5 is_stmt 1 view .LVU81
 471 001c 0E94 0000 		call matrix_scan_quantum
 472               	.LVL25:
 113:quantum/matrix_common.c ****     return changed;
 473               		.loc 1 113 5 view .LVU82
 114:quantum/matrix_common.c **** }
 474               		.loc 1 114 1 is_stmt 0 view .LVU83
 475 0020 8C2F      		mov r24,r28
 476               	/* epilogue start */
 477 0022 CF91      		pop r28
 478               	.LVL26:
 479               		.loc 1 114 1 view .LVU84
 480 0024 0895      		ret
 481               		.cfi_endproc
 482               	.LFE21:
 484               		.section	.text.peek_matrix,"ax",@progbits
 485               		.weak	peek_matrix
 487               	peek_matrix:
 488               	.LVL27:
 489               	.LFB22:
 115:quantum/matrix_common.c **** 
 116:quantum/matrix_common.c **** __attribute__((weak)) bool peek_matrix(uint8_t row_index, uint8_t col_index, bool raw) { return 0 !
 490               		.loc 1 116 88 is_stmt 1 view -0
 491               		.cfi_startproc
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 0 */
 495               	.L__stack_usage = 0
 496               		.loc 1 116 90 view .LVU86
 497 0000 90E0      		ldi r25,0
 498 0002 880F      		lsl r24
 499 0004 991F      		rol r25
 500               	.LVL28:
 501               		.loc 1 116 132 is_stmt 0 view .LVU87
 502 0006 4423      		tst r20
 503 0008 01F0      		breq .L23
 504               		.loc 1 116 132 discriminator 1 view .LVU88
 505 000a 8050      		subi r24,lo8(-(raw_matrix))
 506 000c 9040      		sbci r25,hi8(-(raw_matrix))
 507               	.L26:
 508               		.loc 1 116 132 discriminator 2 view .LVU89
 509 000e FC01      		movw r30,r24
 510 0010 8081      		ld r24,Z
 511 0012 9181      		ldd r25,Z+1
 512               		.loc 1 116 175 discriminator 2 view .LVU90
 513 0014 21E0      		ldi r18,lo8(1)
 514 0016 30E0      		ldi r19,0
 515 0018 00C0      		rjmp 2f
 516               		1:
 517 001a 220F      		lsl r18
 518 001c 331F      		rol r19
 519               		2:
 520 001e 6A95      		dec r22
 521 0020 02F4      		brpl 1b
 522               		.loc 1 116 153 discriminator 2 view .LVU91
 523 0022 2823      		and r18,r24
 524 0024 3923      		and r19,r25
 525               		.loc 1 116 99 discriminator 2 view .LVU92
 526 0026 81E0      		ldi r24,lo8(1)
 527 0028 232B      		or r18,r19
 528 002a 01F4      		brne .L25
 529               		.loc 1 116 99 discriminator 4 view .LVU93
 530 002c 80E0      		ldi r24,0
 531               	.L25:
 532               	/* epilogue start */
 533               		.loc 1 116 1 discriminator 4 view .LVU94
 534 002e 0895      		ret
 535               	.L23:
 536               		.loc 1 116 132 discriminator 2 view .LVU95
 537 0030 8050      		subi r24,lo8(-(matrix))
 538 0032 9040      		sbci r25,hi8(-(matrix))
 539 0034 00C0      		rjmp .L26
 540               		.cfi_endproc
 541               	.LFE22:
 543               		.comm	matrix,16,1
 544               		.comm	raw_matrix,16,1
 545               		.text
 546               	.Letext0:
 547               		.file 3 "/usr/avr/include/stdint.h"
 548               		.file 4 "tmk_core/common/matrix.h"
 549               		.file 5 "tmk_core/common/debug.h"
 550               		.file 6 "quantum/debounce.h"
 551               		.file 7 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix_common.c
     /tmp/cch3khUX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cch3khUX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cch3khUX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cch3khUX.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cch3khUX.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cch3khUX.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cch3khUX.s:14     .text.matrix_init_user:0000000000000000 matrix_init_user
     /tmp/cch3khUX.s:14     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias.0
     /tmp/cch3khUX.s:34     .text.matrix_init_kb:0000000000000000 matrix_init_kb
     /tmp/cch3khUX.s:51     .text.matrix_scan_user:0000000000000000 matrix_scan_user
     /tmp/cch3khUX.s:66     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
     /tmp/cch3khUX.s:83     .text.matrix_rows:0000000000000000 matrix_rows
     /tmp/cch3khUX.s:102    .text.matrix_cols:0000000000000000 matrix_cols
     /tmp/cch3khUX.s:121    .text.matrix_is_on:0000000000000000 matrix_is_on
                            *COM*:0000000000000010 matrix
     /tmp/cch3khUX.s:169    .text.matrix_get_row:0000000000000000 matrix_get_row
     /tmp/cch3khUX.s:199    .text.matrix_is_modified:0000000000000000 matrix_is_modified
     /tmp/cch3khUX.s:222    .text.matrix_print:0000000000000000 matrix_print
     /tmp/cch3khUX.s:243    .text.matrix_key_count:0000000000000000 matrix_key_count
     /tmp/cch3khUX.s:317    .text.matrix_io_delay:0000000000000000 matrix_io_delay
     /tmp/cch3khUX.s:354    .text.matrix_init_custom:0000000000000000 matrix_init_custom
     /tmp/cch3khUX.s:369    .text.matrix_scan_custom:0000000000000000 matrix_scan_custom
     /tmp/cch3khUX.s:391    .text.matrix_init:0000000000000000 matrix_init
                            *COM*:0000000000000010 raw_matrix
     /tmp/cch3khUX.s:439    .text.matrix_scan:0000000000000000 matrix_scan
     /tmp/cch3khUX.s:487    .text.peek_matrix:0000000000000000 peek_matrix

UNDEFINED SYMBOLS
debounce_active
bitpop16
debounce_init
matrix_init_quantum
debounce
matrix_scan_quantum
__do_clear_bss
