   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LVL0:
  15               	.LFB102:
  16               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor_common.h"
  43:tmk_core/protocol/usb_descriptor.c **** 
  44:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
  45:tmk_core/protocol/usb_descriptor.c **** #    include "joystick.h"
  46:tmk_core/protocol/usb_descriptor.c **** #endif
  47:tmk_core/protocol/usb_descriptor.c **** 
  48:tmk_core/protocol/usb_descriptor.c **** // clang-format off
  49:tmk_core/protocol/usb_descriptor.c **** 
  50:tmk_core/protocol/usb_descriptor.c **** /*
  51:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  52:tmk_core/protocol/usb_descriptor.c ****  */
  53:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  54:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  55:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  56:tmk_core/protocol/usb_descriptor.c **** #else
  57:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  58:tmk_core/protocol/usb_descriptor.c **** #endif
  59:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
  60:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
  61:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
  62:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  63:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  64:tmk_core/protocol/usb_descriptor.c **** #endif
  65:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
  66:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  67:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
  68:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
  69:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  70:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  71:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  72:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  73:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  74:tmk_core/protocol/usb_descriptor.c ****         // Reserved (1 byte)
  75:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  76:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  77:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),
  78:tmk_core/protocol/usb_descriptor.c ****         // Keycodes (6 bytes)
  79:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
  80:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
  81:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF),
  82:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  83:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  84:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  85:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  86:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  87:tmk_core/protocol/usb_descriptor.c **** 
  88:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
  89:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
  90:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
  91:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
  92:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  93:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  94:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  95:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
  96:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  97:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  98:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  99:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 100:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 101:tmk_core/protocol/usb_descriptor.c **** };
 102:tmk_core/protocol/usb_descriptor.c **** #endif
 103:tmk_core/protocol/usb_descriptor.c **** 
 104:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
 105:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 106:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 107:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 108:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 109:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 110:tmk_core/protocol/usb_descriptor.c **** #    endif
 111:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),            // Generic Desktop
 112:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),                 // Mouse
 113:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),            // Application
 114:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 115:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 116:tmk_core/protocol/usb_descriptor.c **** #    endif
 117:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x01),             // Pointer
 118:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),        // Physical
 119:tmk_core/protocol/usb_descriptor.c ****             // Buttons (5 bits)
 120:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09),    // Button
 121:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01), // Button 1
 122:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05), // Button 5
 123:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 124:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 125:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 126:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 127:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 128:tmk_core/protocol/usb_descriptor.c ****             // Button padding (3 bits)
 129:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 130:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 131:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 132:tmk_core/protocol/usb_descriptor.c **** 
 133:tmk_core/protocol/usb_descriptor.c ****             // X/Y position (2 bytes)
 134:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01),    // Generic Desktop
 135:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),         // X
 136:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),         // Y
 137:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 138:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 139:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 140:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 141:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 142:tmk_core/protocol/usb_descriptor.c **** 
 143:tmk_core/protocol/usb_descriptor.c ****             // Vertical wheel (1 byte)
 144:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x38),         // Wheel
 145:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 146:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 147:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 148:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 149:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 150:tmk_core/protocol/usb_descriptor.c ****             // Horizontal wheel (1 byte)
 151:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C),    // Consumer
 152:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(16, 0x0238),      // AC Pan
 153:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 154:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 155:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 156:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 157:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 158:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 159:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 160:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 161:tmk_core/protocol/usb_descriptor.c **** };
 162:tmk_core/protocol/usb_descriptor.c **** #    endif
 163:tmk_core/protocol/usb_descriptor.c **** #endif
 164:tmk_core/protocol/usb_descriptor.c **** 
 165:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 166:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 167:tmk_core/protocol/usb_descriptor.c **** #endif
 168:tmk_core/protocol/usb_descriptor.c **** 
 169:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 170:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),           // Generic Desktop
 171:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),                // System Control
 172:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 173:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 174:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Pointer
 175:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), // System Display LCD Autoscale
 176:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 177:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 178:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 179:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 180:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 181:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 182:tmk_core/protocol/usb_descriptor.c **** 
 183:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),           // Consumer
 184:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),                // Consumer Control
 185:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),           // Application
 186:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 187:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01),    // Consumer Control
 188:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x02A0), // AC Desktop Show All Applications
 189:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x01),
 190:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x02A0),
 191:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 192:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 193:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 195:tmk_core/protocol/usb_descriptor.c **** #endif
 196:tmk_core/protocol/usb_descriptor.c **** 
 197:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 198:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),        // Generic Desktop
 199:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),             // Keyboard
 200:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),        // Application
 201:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 202:tmk_core/protocol/usb_descriptor.c ****         // Modifiers (8 bits)
 203:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 204:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), // Keyboard Left Control
 205:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), // Keyboard Right GUI
 206:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 207:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 208:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 209:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 210:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 211:tmk_core/protocol/usb_descriptor.c ****         // Keycodes
 212:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07),    // Keyboard/Keypad
 213:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00),
 214:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 215:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 216:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 217:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 218:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 219:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 220:tmk_core/protocol/usb_descriptor.c **** 
 221:tmk_core/protocol/usb_descriptor.c ****         // Status LEDs (5 bits)
 222:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08),    // LED
 223:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), // Num Lock
 224:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), // Kana
 225:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 226:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 227:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 228:tmk_core/protocol/usb_descriptor.c ****         // LED padding (3 bits)
 229:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 230:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 231:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 232:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 233:tmk_core/protocol/usb_descriptor.c **** #endif
 234:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 235:tmk_core/protocol/usb_descriptor.c **** };
 236:tmk_core/protocol/usb_descriptor.c **** #endif
 237:tmk_core/protocol/usb_descriptor.c **** 
 238:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 239:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 240:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, RAW_USAGE_PAGE), // Vendor Defined
 241:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, RAW_USAGE_ID),         // Vendor Defined
 242:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 243:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 244:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x62),     // Vendor Defined
 245:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 246:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 247:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 248:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 249:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 250:tmk_core/protocol/usb_descriptor.c **** 
 251:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 252:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x63),     // Vendor Defined
 253:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 254:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 255:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 256:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 257:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 258:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 259:tmk_core/protocol/usb_descriptor.c **** };
 260:tmk_core/protocol/usb_descriptor.c **** #endif
 261:tmk_core/protocol/usb_descriptor.c **** 
 262:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 263:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 264:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), // Vendor Defined (PJRC Teensy compatible)
 265:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),         // Vendor Defined (PJRC Teensy compatible)
 266:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),    // Application
 267:tmk_core/protocol/usb_descriptor.c ****         // Data to host
 268:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x75),     // Vendor Defined
 269:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 270:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 271:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 272:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 273:tmk_core/protocol/usb_descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 274:tmk_core/protocol/usb_descriptor.c **** 
 275:tmk_core/protocol/usb_descriptor.c ****         // Data from host
 276:tmk_core/protocol/usb_descriptor.c ****         HID_RI_USAGE(8, 0x76),     // Vendor Defined
 277:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 278:tmk_core/protocol/usb_descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 279:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 280:tmk_core/protocol/usb_descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 281:tmk_core/protocol/usb_descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 282:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 283:tmk_core/protocol/usb_descriptor.c **** };
 284:tmk_core/protocol/usb_descriptor.c **** #endif
 285:tmk_core/protocol/usb_descriptor.c **** 
 286:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
 287:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT == 0 && JOYSTICK_BUTTON_COUNT == 0
 288:tmk_core/protocol/usb_descriptor.c **** #        error Need at least one axis or button for joystick
 289:tmk_core/protocol/usb_descriptor.c **** #    endif
 290:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM JoystickReport[] = {
 291:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),         // Generic Desktop
 292:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x04),              // Joystick
 293:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),         // Application
 294:tmk_core/protocol/usb_descriptor.c ****         HID_RI_COLLECTION(8, 0x00),     // Physical
 295:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), // Generic Desktop
 296:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 1
 297:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x30),      // X
 298:tmk_core/protocol/usb_descriptor.c **** #    endif
 299:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 2
 300:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x31),      // Y
 301:tmk_core/protocol/usb_descriptor.c **** #    endif
 302:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 3
 303:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x32),      // Z
 304:tmk_core/protocol/usb_descriptor.c **** #    endif
 305:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 4
 306:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x33),      // Rx
 307:tmk_core/protocol/usb_descriptor.c **** #    endif
 308:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 5
 309:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x34),      // Ry
 310:tmk_core/protocol/usb_descriptor.c **** #    endif
 311:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 6
 312:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE(8, 0x35),      // Rz
 313:tmk_core/protocol/usb_descriptor.c **** #    endif
 314:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_AXES_COUNT >= 1
 315:tmk_core/protocol/usb_descriptor.c ****      # if JOYSTICK_AXES_RESOLUTION == 8
 316:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -JOYSTICK_RESOLUTION),
 317:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, JOYSTICK_RESOLUTION),
 318:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_AXES_COUNT),
 319:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 320:tmk_core/protocol/usb_descriptor.c ****      # else
 321:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(16, -JOYSTICK_RESOLUTION),
 322:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(16, JOYSTICK_RESOLUTION),
 323:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_AXES_COUNT),
 324:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x10),
 325:tmk_core/protocol/usb_descriptor.c ****      # endif
 326:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 327:tmk_core/protocol/usb_descriptor.c **** #    endif
 328:tmk_core/protocol/usb_descriptor.c **** 
 329:tmk_core/protocol/usb_descriptor.c **** #    if JOYSTICK_BUTTON_COUNT >= 1
 330:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), // Button
 331:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),
 332:tmk_core/protocol/usb_descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, JOYSTICK_BUTTON_COUNT),
 333:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
 334:tmk_core/protocol/usb_descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 335:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, JOYSTICK_BUTTON_COUNT),
 336:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 337:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 338:tmk_core/protocol/usb_descriptor.c **** 
 339:tmk_core/protocol/usb_descriptor.c **** #        if (JOYSTICK_BUTTON_COUNT % 8) != 0
 340:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_COUNT(8, 8 - (JOYSTICK_BUTTON_COUNT % 8)),
 341:tmk_core/protocol/usb_descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 342:tmk_core/protocol/usb_descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 343:tmk_core/protocol/usb_descriptor.c **** #        endif
 344:tmk_core/protocol/usb_descriptor.c **** #    endif
 345:tmk_core/protocol/usb_descriptor.c ****         HID_RI_END_COLLECTION(0),
 346:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0)
 347:tmk_core/protocol/usb_descriptor.c **** };
 348:tmk_core/protocol/usb_descriptor.c **** #endif
 349:tmk_core/protocol/usb_descriptor.c **** 
 350:tmk_core/protocol/usb_descriptor.c **** /*
 351:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 352:tmk_core/protocol/usb_descriptor.c ****  */
 353:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {
 354:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 355:tmk_core/protocol/usb_descriptor.c ****         .Size                   = sizeof(USB_Descriptor_Device_t),
 356:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_Device
 357:tmk_core/protocol/usb_descriptor.c ****     },
 358:tmk_core/protocol/usb_descriptor.c ****     .USBSpecification           = VERSION_BCD(1, 1, 0),
 359:tmk_core/protocol/usb_descriptor.c ****     
 360:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 361:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_IADDeviceClass,
 362:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_IADDeviceSubclass,
 363:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_IADDeviceProtocol,
 364:tmk_core/protocol/usb_descriptor.c **** #else
 365:tmk_core/protocol/usb_descriptor.c ****     .Class                      = USB_CSCP_NoDeviceClass,
 366:tmk_core/protocol/usb_descriptor.c ****     .SubClass                   = USB_CSCP_NoDeviceSubclass,
 367:tmk_core/protocol/usb_descriptor.c ****     .Protocol                   = USB_CSCP_NoDeviceProtocol,
 368:tmk_core/protocol/usb_descriptor.c **** #endif
 369:tmk_core/protocol/usb_descriptor.c **** 
 370:tmk_core/protocol/usb_descriptor.c ****     .Endpoint0Size              = FIXED_CONTROL_ENDPOINT_SIZE,
 371:tmk_core/protocol/usb_descriptor.c ****     // Specified in config.h
 372:tmk_core/protocol/usb_descriptor.c ****     .VendorID                   = VENDOR_ID,
 373:tmk_core/protocol/usb_descriptor.c ****     .ProductID                  = PRODUCT_ID,
 374:tmk_core/protocol/usb_descriptor.c ****     .ReleaseNumber              = DEVICE_VER,
 375:tmk_core/protocol/usb_descriptor.c ****     .ManufacturerStrIndex       = 0x01,
 376:tmk_core/protocol/usb_descriptor.c ****     .ProductStrIndex            = 0x02,
 377:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 378:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x03,
 379:tmk_core/protocol/usb_descriptor.c **** #else
 380:tmk_core/protocol/usb_descriptor.c ****     .SerialNumStrIndex          = 0x00,
 381:tmk_core/protocol/usb_descriptor.c **** #endif
 382:tmk_core/protocol/usb_descriptor.c ****     .NumberOfConfigurations     = FIXED_NUM_CONFIGURATIONS
 383:tmk_core/protocol/usb_descriptor.c **** };
 384:tmk_core/protocol/usb_descriptor.c **** 
 385:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 386:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 387:tmk_core/protocol/usb_descriptor.c **** #endif
 388:tmk_core/protocol/usb_descriptor.c **** 
 389:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 390:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 391:tmk_core/protocol/usb_descriptor.c **** #endif
 392:tmk_core/protocol/usb_descriptor.c **** 
 393:tmk_core/protocol/usb_descriptor.c **** /*
 394:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 395:tmk_core/protocol/usb_descriptor.c ****  */
 396:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
 397:tmk_core/protocol/usb_descriptor.c ****     .Config = {
 398:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 399:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Configuration_Header_t),
 400:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Configuration
 401:tmk_core/protocol/usb_descriptor.c ****         },
 402:tmk_core/protocol/usb_descriptor.c ****         .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 403:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = TOTAL_INTERFACES,
 404:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationNumber    = 1,
 405:tmk_core/protocol/usb_descriptor.c ****         .ConfigurationStrIndex  = NO_DESCRIPTOR,
 406:tmk_core/protocol/usb_descriptor.c ****         .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 407:tmk_core/protocol/usb_descriptor.c ****         .MaxPowerConsumption    = USB_CONFIG_POWER_MA(USB_MAX_POWER_CONSUMPTION)
 408:tmk_core/protocol/usb_descriptor.c ****     },
 409:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 410:tmk_core/protocol/usb_descriptor.c ****     /*
 411:tmk_core/protocol/usb_descriptor.c ****      * Keyboard
 412:tmk_core/protocol/usb_descriptor.c ****      */
 413:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_Interface = {
 414:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 415:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 416:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 417:tmk_core/protocol/usb_descriptor.c ****         },
 418:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = KEYBOARD_INTERFACE,
 419:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 420:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 421:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 422:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 423:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 424:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 425:tmk_core/protocol/usb_descriptor.c ****     },
 426:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_HID = {
 427:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 428:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 429:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 430:tmk_core/protocol/usb_descriptor.c ****         },
 431:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 432:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 433:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 434:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 435:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(KeyboardReport)
 436:tmk_core/protocol/usb_descriptor.c ****     },
 437:tmk_core/protocol/usb_descriptor.c ****     .Keyboard_INEndpoint = {
 438:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 439:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 440:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 441:tmk_core/protocol/usb_descriptor.c ****         },
 442:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 443:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 444:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = KEYBOARD_EPSIZE,
 445:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 446:tmk_core/protocol/usb_descriptor.c ****     },
 447:tmk_core/protocol/usb_descriptor.c **** #endif
 448:tmk_core/protocol/usb_descriptor.c **** 
 449:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 450:tmk_core/protocol/usb_descriptor.c ****     /*
 451:tmk_core/protocol/usb_descriptor.c ****      * Raw HID
 452:tmk_core/protocol/usb_descriptor.c ****      */
 453:tmk_core/protocol/usb_descriptor.c ****     .Raw_Interface = {
 454:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 455:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 456:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 457:tmk_core/protocol/usb_descriptor.c ****         },
 458:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = RAW_INTERFACE,
 459:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 460:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 461:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 462:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 463:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 464:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 465:tmk_core/protocol/usb_descriptor.c ****     },
 466:tmk_core/protocol/usb_descriptor.c ****     .Raw_HID = {
 467:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 468:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 469:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 470:tmk_core/protocol/usb_descriptor.c ****         },
 471:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 472:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 473:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 474:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 475:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(RawReport)
 476:tmk_core/protocol/usb_descriptor.c ****     },
 477:tmk_core/protocol/usb_descriptor.c ****     .Raw_INEndpoint = {
 478:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 479:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 480:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 481:tmk_core/protocol/usb_descriptor.c ****         },
 482:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | RAW_IN_EPNUM),
 483:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 484:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 485:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 486:tmk_core/protocol/usb_descriptor.c ****     },
 487:tmk_core/protocol/usb_descriptor.c ****     .Raw_OUTEndpoint = {
 488:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 489:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 490:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 491:tmk_core/protocol/usb_descriptor.c ****         },
 492:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | RAW_OUT_EPNUM),
 493:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 494:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = RAW_EPSIZE,
 495:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 496:tmk_core/protocol/usb_descriptor.c ****     },
 497:tmk_core/protocol/usb_descriptor.c **** #endif
 498:tmk_core/protocol/usb_descriptor.c **** 
 499:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 500:tmk_core/protocol/usb_descriptor.c ****     /*
 501:tmk_core/protocol/usb_descriptor.c ****      * Mouse
 502:tmk_core/protocol/usb_descriptor.c ****      */
 503:tmk_core/protocol/usb_descriptor.c ****     .Mouse_Interface  = {
 504:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 505:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 506:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 507:tmk_core/protocol/usb_descriptor.c ****         },
 508:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = MOUSE_INTERFACE,
 509:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 510:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 511:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 512:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 513:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_MouseBootProtocol,
 514:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 515:tmk_core/protocol/usb_descriptor.c ****     },
 516:tmk_core/protocol/usb_descriptor.c ****     .Mouse_HID = {
 517:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 518:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 519:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 520:tmk_core/protocol/usb_descriptor.c ****         },
 521:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 522:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 523:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 524:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 525:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(MouseReport)
 526:tmk_core/protocol/usb_descriptor.c ****     },
 527:tmk_core/protocol/usb_descriptor.c ****     .Mouse_INEndpoint = {
 528:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 529:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 530:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 531:tmk_core/protocol/usb_descriptor.c ****         },
 532:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 533:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 534:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = MOUSE_EPSIZE,
 535:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 536:tmk_core/protocol/usb_descriptor.c ****     },
 537:tmk_core/protocol/usb_descriptor.c **** #endif
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 540:tmk_core/protocol/usb_descriptor.c ****     /*
 541:tmk_core/protocol/usb_descriptor.c ****      * Shared
 542:tmk_core/protocol/usb_descriptor.c ****      */
 543:tmk_core/protocol/usb_descriptor.c ****     .Shared_Interface = {
 544:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 545:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 546:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 547:tmk_core/protocol/usb_descriptor.c ****         },
 548:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = SHARED_INTERFACE,
 549:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 550:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 551:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 552:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 553:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_BootSubclass,
 554:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_KeyboardBootProtocol,
 555:tmk_core/protocol/usb_descriptor.c **** #    else
 556:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 557:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 558:tmk_core/protocol/usb_descriptor.c **** #    endif
 559:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 560:tmk_core/protocol/usb_descriptor.c ****     },
 561:tmk_core/protocol/usb_descriptor.c ****     .Shared_HID = {
 562:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 563:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 564:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 565:tmk_core/protocol/usb_descriptor.c ****         },
 566:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 567:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 568:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 569:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 570:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(SharedReport)
 571:tmk_core/protocol/usb_descriptor.c ****     },
 572:tmk_core/protocol/usb_descriptor.c ****     .Shared_INEndpoint = {
 573:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 574:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 575:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 576:tmk_core/protocol/usb_descriptor.c ****         },
 577:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | SHARED_IN_EPNUM),
 578:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 579:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = SHARED_EPSIZE,
 580:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 581:tmk_core/protocol/usb_descriptor.c ****     },
 582:tmk_core/protocol/usb_descriptor.c **** #endif
 583:tmk_core/protocol/usb_descriptor.c **** 
 584:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 585:tmk_core/protocol/usb_descriptor.c ****     /*
 586:tmk_core/protocol/usb_descriptor.c ****      * Console
 587:tmk_core/protocol/usb_descriptor.c ****      */
 588:tmk_core/protocol/usb_descriptor.c ****     .Console_Interface = {
 589:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 590:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 591:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 592:tmk_core/protocol/usb_descriptor.c ****         },
 593:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CONSOLE_INTERFACE,
 594:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 595:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 596:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 597:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 598:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 599:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 600:tmk_core/protocol/usb_descriptor.c ****     },
 601:tmk_core/protocol/usb_descriptor.c ****     .Console_HID = {
 602:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 603:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 604:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 605:tmk_core/protocol/usb_descriptor.c ****         },
 606:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 607:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 608:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 609:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 610:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(ConsoleReport)
 611:tmk_core/protocol/usb_descriptor.c ****     },
 612:tmk_core/protocol/usb_descriptor.c ****     .Console_INEndpoint = {
 613:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 614:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 615:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 616:tmk_core/protocol/usb_descriptor.c ****         },
 617:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 618:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 619:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 620:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 621:tmk_core/protocol/usb_descriptor.c ****     },
 622:tmk_core/protocol/usb_descriptor.c ****     .Console_OUTEndpoint = {
 623:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 624:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 625:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 626:tmk_core/protocol/usb_descriptor.c ****         },
 627:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 628:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 629:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CONSOLE_EPSIZE,
 630:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x01
 631:tmk_core/protocol/usb_descriptor.c ****     },
 632:tmk_core/protocol/usb_descriptor.c **** #endif
 633:tmk_core/protocol/usb_descriptor.c **** 
 634:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 635:tmk_core/protocol/usb_descriptor.c ****     /*
 636:tmk_core/protocol/usb_descriptor.c ****      * MIDI
 637:tmk_core/protocol/usb_descriptor.c ****      */
 638:tmk_core/protocol/usb_descriptor.c ****     .Audio_Interface_Association = {
 639:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 640:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 641:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 642:tmk_core/protocol/usb_descriptor.c ****         },
 643:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = AC_INTERFACE,
 644:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 645:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 646:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 647:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 648:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 649:tmk_core/protocol/usb_descriptor.c ****     },
 650:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface = {
 651:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 652:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 653:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 654:tmk_core/protocol/usb_descriptor.c ****         },
 655:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AC_INTERFACE,
 656:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 657:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 0,
 658:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 659:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_ControlSubclass,
 660:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_ControlProtocol,
 661:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 662:tmk_core/protocol/usb_descriptor.c ****     },
 663:tmk_core/protocol/usb_descriptor.c ****     .Audio_ControlInterface_SPC = {
 664:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 665:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 666:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 667:tmk_core/protocol/usb_descriptor.c ****         },
 668:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_Header,
 669:tmk_core/protocol/usb_descriptor.c ****         .ACSpecification        = VERSION_BCD(1, 0, 0),
 670:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 671:tmk_core/protocol/usb_descriptor.c ****         .InCollection           = 1,
 672:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 673:tmk_core/protocol/usb_descriptor.c ****     },
 674:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface = {
 675:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 676:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 677:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 678:tmk_core/protocol/usb_descriptor.c ****         },
 679:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = AS_INTERFACE,
 680:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 681:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 682:tmk_core/protocol/usb_descriptor.c ****         .Class                  = AUDIO_CSCP_AudioClass,
 683:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = AUDIO_CSCP_MIDIStreamingSubclass,
 684:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = AUDIO_CSCP_StreamingProtocol,
 685:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 686:tmk_core/protocol/usb_descriptor.c ****     },
 687:tmk_core/protocol/usb_descriptor.c ****     .Audio_StreamInterface_SPC = {
 688:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 689:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_AudioInterface_AS_t),
 690:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 691:tmk_core/protocol/usb_descriptor.c ****         },
 692:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_General,
 693:tmk_core/protocol/usb_descriptor.c ****         .AudioSpecification     = VERSION_BCD(1, 0, 0),
 694:tmk_core/protocol/usb_descriptor.c ****         .TotalLength            = offsetof(USB_Descriptor_Configuration_t, MIDI_Out_Jack_Endpoint_S
 695:tmk_core/protocol/usb_descriptor.c ****     },
 696:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Emb = {
 697:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 698:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 699:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 700:tmk_core/protocol/usb_descriptor.c ****         },
 701:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 702:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 703:tmk_core/protocol/usb_descriptor.c ****         .JackID = 0x01,
 704:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 705:tmk_core/protocol/usb_descriptor.c ****     },
 706:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Ext = {
 707:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 708:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_InputJack_t),
 709:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 710:tmk_core/protocol/usb_descriptor.c ****         },
 711:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_InputTerminal,
 712:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 713:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x02,
 714:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 715:tmk_core/protocol/usb_descriptor.c ****     },
 716:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Emb = {
 717:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 718:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 719:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 720:tmk_core/protocol/usb_descriptor.c ****         },
 721:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 722:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_Embedded,
 723:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x03,
 724:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 725:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x02},
 726:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 727:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 728:tmk_core/protocol/usb_descriptor.c ****     },
 729:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Ext = {
 730:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 731:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_OutputJack_t),
 732:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSInterface
 733:tmk_core/protocol/usb_descriptor.c ****         },
 734:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSInterface_OutputTerminal,
 735:tmk_core/protocol/usb_descriptor.c ****         .JackType               = MIDI_JACKTYPE_External,
 736:tmk_core/protocol/usb_descriptor.c ****         .JackID                 = 0x04,
 737:tmk_core/protocol/usb_descriptor.c ****         .NumberOfPins           = 1,
 738:tmk_core/protocol/usb_descriptor.c ****         .SourceJackID           = {0x01},
 739:tmk_core/protocol/usb_descriptor.c ****         .SourcePinID            = {0x01},
 740:tmk_core/protocol/usb_descriptor.c ****         .JackStrIndex           = NO_DESCRIPTOR
 741:tmk_core/protocol/usb_descriptor.c ****     },
 742:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint = {
 743:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 744:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 745:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 746:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 747:tmk_core/protocol/usb_descriptor.c ****             },
 748:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = (ENDPOINT_DIR_OUT | MIDI_STREAM_OUT_EPNUM),
 749:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 750:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 751:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 752:tmk_core/protocol/usb_descriptor.c ****         },
 753:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 754:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 755:tmk_core/protocol/usb_descriptor.c ****     },
 756:tmk_core/protocol/usb_descriptor.c ****     .MIDI_In_Jack_Endpoint_SPC = {
 757:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 758:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 759:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 760:tmk_core/protocol/usb_descriptor.c ****         },
 761:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 762:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 763:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x01}
 764:tmk_core/protocol/usb_descriptor.c ****     },
 765:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint = {
 766:tmk_core/protocol/usb_descriptor.c ****         .Endpoint = {
 767:tmk_core/protocol/usb_descriptor.c ****             .Header = {
 768:tmk_core/protocol/usb_descriptor.c ****                 .Size           = sizeof(USB_Audio_Descriptor_StreamEndpoint_Std_t),
 769:tmk_core/protocol/usb_descriptor.c ****                 .Type           = DTYPE_Endpoint
 770:tmk_core/protocol/usb_descriptor.c ****             },
 771:tmk_core/protocol/usb_descriptor.c ****             .EndpointAddress    = (ENDPOINT_DIR_IN | MIDI_STREAM_IN_EPNUM),
 772:tmk_core/protocol/usb_descriptor.c ****             .Attributes         = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 773:tmk_core/protocol/usb_descriptor.c ****             .EndpointSize       = MIDI_STREAM_EPSIZE,
 774:tmk_core/protocol/usb_descriptor.c ****             .PollingIntervalMS  = 0x05
 775:tmk_core/protocol/usb_descriptor.c ****         },
 776:tmk_core/protocol/usb_descriptor.c ****         .Refresh                = 0,
 777:tmk_core/protocol/usb_descriptor.c ****         .SyncEndpointNumber     = 0
 778:tmk_core/protocol/usb_descriptor.c ****     },
 779:tmk_core/protocol/usb_descriptor.c ****     .MIDI_Out_Jack_Endpoint_SPC = {
 780:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 781:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_MIDI_Descriptor_Jack_Endpoint_t),
 782:tmk_core/protocol/usb_descriptor.c ****             .Type               = AUDIO_DTYPE_CSEndpoint
 783:tmk_core/protocol/usb_descriptor.c ****         },
 784:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = AUDIO_DSUBTYPE_CSEndpoint_General,
 785:tmk_core/protocol/usb_descriptor.c ****         .TotalEmbeddedJacks     = 0x01,
 786:tmk_core/protocol/usb_descriptor.c ****         .AssociatedJackID       = {0x03}
 787:tmk_core/protocol/usb_descriptor.c ****     },
 788:tmk_core/protocol/usb_descriptor.c **** #endif
 789:tmk_core/protocol/usb_descriptor.c **** 
 790:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 791:tmk_core/protocol/usb_descriptor.c ****     /*
 792:tmk_core/protocol/usb_descriptor.c ****      * Virtual Serial
 793:tmk_core/protocol/usb_descriptor.c ****      */
 794:tmk_core/protocol/usb_descriptor.c ****     .CDC_Interface_Association = {
 795:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 796:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_Association_t),
 797:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_InterfaceAssociation
 798:tmk_core/protocol/usb_descriptor.c ****         },
 799:tmk_core/protocol/usb_descriptor.c ****         .FirstInterfaceIndex    = CCI_INTERFACE,
 800:tmk_core/protocol/usb_descriptor.c ****         .TotalInterfaces        = 2,
 801:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 802:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 803:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 804:tmk_core/protocol/usb_descriptor.c ****         .IADStrIndex            = NO_DESCRIPTOR,
 805:tmk_core/protocol/usb_descriptor.c ****     },
 806:tmk_core/protocol/usb_descriptor.c ****     .CDC_CCI_Interface = {
 807:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 808:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 809:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 810:tmk_core/protocol/usb_descriptor.c ****         },
 811:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CCI_INTERFACE,
 812:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 813:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 814:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCClass,
 815:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_ACMSubclass,
 816:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_ATCommandProtocol,
 817:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 818:tmk_core/protocol/usb_descriptor.c ****     },
 819:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Header = {
 820:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 821:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalHeader_t),
 822:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 823:tmk_core/protocol/usb_descriptor.c ****         },
 824:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x00,
 825:tmk_core/protocol/usb_descriptor.c ****         .CDCSpecification       = VERSION_BCD(1, 1, 0),
 826:tmk_core/protocol/usb_descriptor.c ****     },
 827:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_ACM = {
 828:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 829:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalACM_t),
 830:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 831:tmk_core/protocol/usb_descriptor.c ****         },
 832:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x02,
 833:tmk_core/protocol/usb_descriptor.c ****         .Capabilities           = 0x02,
 834:tmk_core/protocol/usb_descriptor.c ****     },
 835:tmk_core/protocol/usb_descriptor.c ****     .CDC_Functional_Union = {
 836:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 837:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 838:tmk_core/protocol/usb_descriptor.c ****             .Type               = CDC_DTYPE_CSInterface
 839:tmk_core/protocol/usb_descriptor.c ****         },
 840:tmk_core/protocol/usb_descriptor.c ****         .Subtype                = 0x06,
 841:tmk_core/protocol/usb_descriptor.c ****         .MasterInterfaceNumber  = CCI_INTERFACE,
 842:tmk_core/protocol/usb_descriptor.c ****         .SlaveInterfaceNumber   = CDI_INTERFACE,
 843:tmk_core/protocol/usb_descriptor.c ****     },
 844:tmk_core/protocol/usb_descriptor.c ****     .CDC_NotificationEndpoint = {
 845:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 846:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 847:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 848:tmk_core/protocol/usb_descriptor.c ****         },
 849:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM),
 850:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 851:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_NOTIFICATION_EPSIZE,
 852:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0xFF
 853:tmk_core/protocol/usb_descriptor.c ****     },
 854:tmk_core/protocol/usb_descriptor.c ****     .CDC_DCI_Interface = {
 855:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 856:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 857:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 858:tmk_core/protocol/usb_descriptor.c ****         },
 859:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = CDI_INTERFACE,
 860:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0,
 861:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 2,
 862:tmk_core/protocol/usb_descriptor.c ****         .Class                  = CDC_CSCP_CDCDataClass,
 863:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = CDC_CSCP_NoDataSubclass,
 864:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = CDC_CSCP_NoDataProtocol,
 865:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 866:tmk_core/protocol/usb_descriptor.c ****     },
 867:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataOutEndpoint = {
 868:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 869:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 870:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 871:tmk_core/protocol/usb_descriptor.c ****         },
 872:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_OUT | CDC_OUT_EPNUM),
 873:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 874:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 875:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 876:tmk_core/protocol/usb_descriptor.c ****     },
 877:tmk_core/protocol/usb_descriptor.c ****     .CDC_DataInEndpoint = {
 878:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 879:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 880:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 881:tmk_core/protocol/usb_descriptor.c ****         },
 882:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | CDC_IN_EPNUM),
 883:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_BULK | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 884:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = CDC_EPSIZE,
 885:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = 0x05
 886:tmk_core/protocol/usb_descriptor.c ****     },
 887:tmk_core/protocol/usb_descriptor.c **** #endif
 888:tmk_core/protocol/usb_descriptor.c **** 
 889:tmk_core/protocol/usb_descriptor.c ****     /*
 890:tmk_core/protocol/usb_descriptor.c ****      * Joystick
 891:tmk_core/protocol/usb_descriptor.c ****      */
 892:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
 893:tmk_core/protocol/usb_descriptor.c ****     .Joystick_Interface = {
 894:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 895:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Interface_t),
 896:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Interface
 897:tmk_core/protocol/usb_descriptor.c ****         },
 898:tmk_core/protocol/usb_descriptor.c ****         .InterfaceNumber        = JOYSTICK_INTERFACE,
 899:tmk_core/protocol/usb_descriptor.c ****         .AlternateSetting       = 0x00,
 900:tmk_core/protocol/usb_descriptor.c ****         .TotalEndpoints         = 1,
 901:tmk_core/protocol/usb_descriptor.c ****         .Class                  = HID_CSCP_HIDClass,
 902:tmk_core/protocol/usb_descriptor.c ****         .SubClass               = HID_CSCP_NonBootSubclass,
 903:tmk_core/protocol/usb_descriptor.c ****         .Protocol               = HID_CSCP_NonBootProtocol,
 904:tmk_core/protocol/usb_descriptor.c ****         .InterfaceStrIndex      = NO_DESCRIPTOR
 905:tmk_core/protocol/usb_descriptor.c ****     },
 906:tmk_core/protocol/usb_descriptor.c ****     .Joystick_HID = {
 907:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 908:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_HID_Descriptor_HID_t),
 909:tmk_core/protocol/usb_descriptor.c ****             .Type               = HID_DTYPE_HID
 910:tmk_core/protocol/usb_descriptor.c ****         },
 911:tmk_core/protocol/usb_descriptor.c ****         .HIDSpec                = VERSION_BCD(1, 1, 1),
 912:tmk_core/protocol/usb_descriptor.c ****         .CountryCode            = 0x00,
 913:tmk_core/protocol/usb_descriptor.c ****         .TotalReportDescriptors = 1,
 914:tmk_core/protocol/usb_descriptor.c ****         .HIDReportType          = HID_DTYPE_Report,
 915:tmk_core/protocol/usb_descriptor.c ****         .HIDReportLength        = sizeof(JoystickReport)
 916:tmk_core/protocol/usb_descriptor.c ****     },
 917:tmk_core/protocol/usb_descriptor.c ****     .Joystick_INEndpoint = {
 918:tmk_core/protocol/usb_descriptor.c ****         .Header = {
 919:tmk_core/protocol/usb_descriptor.c ****             .Size               = sizeof(USB_Descriptor_Endpoint_t),
 920:tmk_core/protocol/usb_descriptor.c ****             .Type               = DTYPE_Endpoint
 921:tmk_core/protocol/usb_descriptor.c ****         },
 922:tmk_core/protocol/usb_descriptor.c ****         .EndpointAddress        = (ENDPOINT_DIR_IN | JOYSTICK_IN_EPNUM),
 923:tmk_core/protocol/usb_descriptor.c ****         .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA)
 924:tmk_core/protocol/usb_descriptor.c ****         .EndpointSize           = JOYSTICK_EPSIZE,
 925:tmk_core/protocol/usb_descriptor.c ****         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
 926:tmk_core/protocol/usb_descriptor.c ****     }
 927:tmk_core/protocol/usb_descriptor.c **** #endif
 928:tmk_core/protocol/usb_descriptor.c **** };
 929:tmk_core/protocol/usb_descriptor.c **** 
 930:tmk_core/protocol/usb_descriptor.c **** /*
 931:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 932:tmk_core/protocol/usb_descriptor.c ****  */
 933:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {
 934:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 935:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(1),
 936:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 937:tmk_core/protocol/usb_descriptor.c ****     },
 938:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = {LANGUAGE_ID_ENG}
 939:tmk_core/protocol/usb_descriptor.c **** };
 940:tmk_core/protocol/usb_descriptor.c **** 
 941:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {
 942:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 943:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(MANUFACTURER)) - 1), // Subtract 1 for 
 944:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 945:tmk_core/protocol/usb_descriptor.c ****     },
 946:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(MANUFACTURER)
 947:tmk_core/protocol/usb_descriptor.c **** };
 948:tmk_core/protocol/usb_descriptor.c **** 
 949:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {
 950:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 951:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(PRODUCT)) - 1), // Subtract 1 for null 
 952:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 953:tmk_core/protocol/usb_descriptor.c ****     },
 954:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(PRODUCT)
 955:tmk_core/protocol/usb_descriptor.c **** };
 956:tmk_core/protocol/usb_descriptor.c **** 
 957:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 958:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {
 959:tmk_core/protocol/usb_descriptor.c ****     .Header = {
 960:tmk_core/protocol/usb_descriptor.c ****         .Size                   = USB_STRING_LEN(sizeof(STR(SERIAL_NUMBER)) - 1), // Subtract 1 for
 961:tmk_core/protocol/usb_descriptor.c ****         .Type                   = DTYPE_String
 962:tmk_core/protocol/usb_descriptor.c ****     },
 963:tmk_core/protocol/usb_descriptor.c ****     .UnicodeString              = LSTR(SERIAL_NUMBER)
 964:tmk_core/protocol/usb_descriptor.c **** };
 965:tmk_core/protocol/usb_descriptor.c **** #endif
 966:tmk_core/protocol/usb_descriptor.c **** 
 967:tmk_core/protocol/usb_descriptor.c **** // clang-format on
 968:tmk_core/protocol/usb_descriptor.c **** 
 969:tmk_core/protocol/usb_descriptor.c **** /**
 970:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 971:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 972:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 973:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 974:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 975:tmk_core/protocol/usb_descriptor.c ****  */
 976:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  17               		.loc 1 976 113 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 977:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
  23               		.loc 1 977 5 view .LVU1
  24               		.loc 1 977 45 is_stmt 0 view .LVU2
  25 0000 292F      		mov r18,r25
  26 0002 3327      		clr r19
  27               	.LVL1:
 978:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
  28               		.loc 1 978 5 is_stmt 1 view .LVU3
 979:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
  29               		.loc 1 979 5 view .LVU4
 980:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  30               		.loc 1 980 5 view .LVU5
 981:tmk_core/protocol/usb_descriptor.c **** 
 982:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  31               		.loc 1 982 5 view .LVU6
  32 0004 2330      		cpi r18,3
  33 0006 3105      		cpc r19,__zero_reg__
  34 0008 01F0      		breq .L2
  35 000a 00F4      		brsh .L3
  36 000c 2130      		cpi r18,1
  37 000e 3105      		cpc r19,__zero_reg__
  38 0010 01F4      		brne .+2
  39 0012 00C0      		rjmp .L10
  40 0014 2230      		cpi r18,2
  41 0016 3105      		cpc r19,__zero_reg__
  42 0018 01F4      		brne .+2
  43 001a 00C0      		rjmp .L11
  44               	.LVL2:
  45               	.L13:
  46               		.loc 1 982 5 is_stmt 0 view .LVU7
  47 001c 90E0      		ldi r25,0
  48 001e 80E0      		ldi r24,0
  49 0020 30E0      		ldi r19,0
  50 0022 20E0      		ldi r18,0
  51               	.LVL3:
  52               		.loc 1 982 5 view .LVU8
  53 0024 00C0      		rjmp .L4
  54               	.LVL4:
  55               	.L3:
  56               		.loc 1 982 5 view .LVU9
  57 0026 2132      		cpi r18,33
  58 0028 3105      		cpc r19,__zero_reg__
  59 002a 01F0      		breq .L5
  60 002c 2232      		cpi r18,34
  61 002e 3105      		cpc r19,__zero_reg__
  62 0030 01F4      		brne .L13
 983:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 984:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 985:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 986:tmk_core/protocol/usb_descriptor.c **** 
 987:tmk_core/protocol/usb_descriptor.c ****             break;
 988:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 989:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 990:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 991:tmk_core/protocol/usb_descriptor.c **** 
 992:tmk_core/protocol/usb_descriptor.c ****             break;
 993:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 994:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
 995:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 996:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 997:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 998:tmk_core/protocol/usb_descriptor.c **** 
 999:tmk_core/protocol/usb_descriptor.c ****                     break;
1000:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
1001:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
1002:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
1003:tmk_core/protocol/usb_descriptor.c **** 
1004:tmk_core/protocol/usb_descriptor.c ****                     break;
1005:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
1006:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
1007:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
1008:tmk_core/protocol/usb_descriptor.c **** 
1009:tmk_core/protocol/usb_descriptor.c ****                     break;
1010:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
1011:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
1012:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
1013:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
1014:tmk_core/protocol/usb_descriptor.c **** 
1015:tmk_core/protocol/usb_descriptor.c ****                     break;
1016:tmk_core/protocol/usb_descriptor.c **** #endif
1017:tmk_core/protocol/usb_descriptor.c ****             }
1018:tmk_core/protocol/usb_descriptor.c **** 
1019:tmk_core/protocol/usb_descriptor.c ****             break;
1020:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
1021:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
1022:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
1023:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
1024:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
1025:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1026:tmk_core/protocol/usb_descriptor.c ****                     break;
1027:tmk_core/protocol/usb_descriptor.c **** #endif
1028:tmk_core/protocol/usb_descriptor.c **** 
1029:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
1030:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
1031:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
1032:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1033:tmk_core/protocol/usb_descriptor.c **** 
1034:tmk_core/protocol/usb_descriptor.c ****                     break;
1035:tmk_core/protocol/usb_descriptor.c **** #endif
1036:tmk_core/protocol/usb_descriptor.c **** 
1037:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
1038:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
1039:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
1040:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1041:tmk_core/protocol/usb_descriptor.c **** 
1042:tmk_core/protocol/usb_descriptor.c ****                     break;
1043:tmk_core/protocol/usb_descriptor.c **** #endif
1044:tmk_core/protocol/usb_descriptor.c **** 
1045:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
1046:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
1047:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
1048:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1049:tmk_core/protocol/usb_descriptor.c **** 
1050:tmk_core/protocol/usb_descriptor.c ****                     break;
1051:tmk_core/protocol/usb_descriptor.c **** #endif
1052:tmk_core/protocol/usb_descriptor.c **** 
1053:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1054:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
1055:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
1056:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1057:tmk_core/protocol/usb_descriptor.c **** 
1058:tmk_core/protocol/usb_descriptor.c ****                     break;
1059:tmk_core/protocol/usb_descriptor.c **** #endif
1060:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
1061:tmk_core/protocol/usb_descriptor.c ****                 case JOYSTICK_INTERFACE:
1062:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Joystick_HID;
1063:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
1064:tmk_core/protocol/usb_descriptor.c ****                     break;
1065:tmk_core/protocol/usb_descriptor.c **** #endif
1066:tmk_core/protocol/usb_descriptor.c ****             }
1067:tmk_core/protocol/usb_descriptor.c **** 
1068:tmk_core/protocol/usb_descriptor.c ****             break;
1069:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
1070:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
  63               		.loc 1 1070 13 is_stmt 1 view .LVU10
  64 0032 6330      		cpi r22,3
  65 0034 7105      		cpc r23,__zero_reg__
  66 0036 00F4      		brsh .L13
  67 0038 FB01      		movw r30,r22
  68 003a EE0F      		lsl r30
  69 003c FF1F      		rol r31
  70               	.LVL5:
  71               		.loc 1 1070 13 is_stmt 0 view .LVU11
  72 003e E050      		subi r30,lo8(-(CSWTCH.1))
  73 0040 F040      		sbci r31,hi8(-(CSWTCH.1))
  74 0042 2081      		ld r18,Z
  75 0044 3181      		ldd r19,Z+1
  76               	.LVL6:
  77               		.loc 1 1070 13 view .LVU12
  78 0046 6050      		subi r22,lo8(-(CSWTCH.2))
  79 0048 7040      		sbci r23,hi8(-(CSWTCH.2))
  80               	.LVL7:
  81               		.loc 1 1070 13 view .LVU13
  82 004a FB01      		movw r30,r22
  83 004c 8081      		ld r24,Z
  84 004e 90E0      		ldi r25,0
  85 0050 00C0      		rjmp .L4
  86               	.LVL8:
  87               	.L2:
 994:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  88               		.loc 1 994 13 is_stmt 1 view .LVU14
  89 0052 9927      		clr r25
  90               	.LVL9:
 994:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  91               		.loc 1 994 13 is_stmt 0 view .LVU15
  92 0054 8130      		cpi r24,1
  93 0056 9105      		cpc r25,__zero_reg__
  94 0058 01F0      		breq .L7
  95 005a 0097      		sbiw r24,0
  96 005c 01F0      		breq .L8
  97 005e 0297      		sbiw r24,2
  98 0060 01F4      		brne .L13
1006:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
  99               		.loc 1 1006 21 is_stmt 1 view .LVU16
 100               	.LVL10:
1007:tmk_core/protocol/usb_descriptor.c **** 
 101               		.loc 1 1007 21 view .LVU17
 102               	.LBB2:
1007:tmk_core/protocol/usb_descriptor.c **** 
 103               		.loc 1 1007 31 view .LVU18
1007:tmk_core/protocol/usb_descriptor.c **** 
 104               		.loc 1 1007 31 view .LVU19
1007:tmk_core/protocol/usb_descriptor.c **** 
 105               		.loc 1 1007 31 view .LVU20
 106 0062 E0E0      		ldi r30,lo8(ProductString)
 107 0064 F0E0      		ldi r31,hi8(ProductString)
 108 0066 00C0      		rjmp .L14
 109               	.LVL11:
 110               	.L8:
1007:tmk_core/protocol/usb_descriptor.c **** 
 111               		.loc 1 1007 31 is_stmt 0 view .LVU21
 112               	.LBE2:
 996:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 113               		.loc 1 996 21 is_stmt 1 view .LVU22
 997:tmk_core/protocol/usb_descriptor.c **** 
 114               		.loc 1 997 21 view .LVU23
 115               	.LBB3:
 997:tmk_core/protocol/usb_descriptor.c **** 
 116               		.loc 1 997 31 view .LVU24
 997:tmk_core/protocol/usb_descriptor.c **** 
 117               		.loc 1 997 31 view .LVU25
 997:tmk_core/protocol/usb_descriptor.c **** 
 118               		.loc 1 997 31 view .LVU26
 119 0068 E0E0      		ldi r30,lo8(LanguageString)
 120 006a F0E0      		ldi r31,hi8(LanguageString)
 121               	.LVL12:
 122               	.L14:
 997:tmk_core/protocol/usb_descriptor.c **** 
 123               		.loc 1 997 31 is_stmt 0 view .LVU27
 124               	.LBE3:
 125               	.LBB4:
1007:tmk_core/protocol/usb_descriptor.c **** 
 126               		.loc 1 1007 31 view .LVU28
 127               	/* #APP */
 128               	 ;  1007 "tmk_core/protocol/usb_descriptor.c" 1
 129 006c 8491      		lpm r24, Z
 130               		
 131               	 ;  0 "" 2
 132               	.LVL13:
1007:tmk_core/protocol/usb_descriptor.c **** 
 133               		.loc 1 1007 31 is_stmt 1 view .LVU29
 134               	/* #NOAPP */
 135               	.LBE4:
1007:tmk_core/protocol/usb_descriptor.c **** 
 136               		.loc 1 1007 29 is_stmt 0 view .LVU30
 137 006e 90E0      		ldi r25,0
 138               	.LVL14:
1009:tmk_core/protocol/usb_descriptor.c **** #if defined(SERIAL_NUMBER)
 139               		.loc 1 1009 21 is_stmt 1 view .LVU31
1006:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 140               		.loc 1 1006 29 is_stmt 0 view .LVU32
 141 0070 9F01      		movw r18,r30
 142               	.LVL15:
 143               	.L4:
1071:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
1072:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
1073:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
1074:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
1075:tmk_core/protocol/usb_descriptor.c **** 
1076:tmk_core/protocol/usb_descriptor.c ****                     break;
1077:tmk_core/protocol/usb_descriptor.c **** #endif
1078:tmk_core/protocol/usb_descriptor.c **** 
1079:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
1080:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
1081:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
1082:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
1083:tmk_core/protocol/usb_descriptor.c **** 
1084:tmk_core/protocol/usb_descriptor.c ****                     break;
1085:tmk_core/protocol/usb_descriptor.c **** #endif
1086:tmk_core/protocol/usb_descriptor.c **** 
1087:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
1088:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
1089:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
1090:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
1091:tmk_core/protocol/usb_descriptor.c **** 
1092:tmk_core/protocol/usb_descriptor.c ****                     break;
1093:tmk_core/protocol/usb_descriptor.c **** #endif
1094:tmk_core/protocol/usb_descriptor.c **** 
1095:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
1096:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
1097:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
1098:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
1099:tmk_core/protocol/usb_descriptor.c **** 
1100:tmk_core/protocol/usb_descriptor.c ****                     break;
1101:tmk_core/protocol/usb_descriptor.c **** #endif
1102:tmk_core/protocol/usb_descriptor.c **** 
1103:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
1104:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
1105:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
1106:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
1107:tmk_core/protocol/usb_descriptor.c **** 
1108:tmk_core/protocol/usb_descriptor.c ****                     break;
1109:tmk_core/protocol/usb_descriptor.c **** #endif
1110:tmk_core/protocol/usb_descriptor.c **** #ifdef JOYSTICK_ENABLE
1111:tmk_core/protocol/usb_descriptor.c ****                 case JOYSTICK_INTERFACE:
1112:tmk_core/protocol/usb_descriptor.c ****                     Address = &JoystickReport;
1113:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(JoystickReport);
1114:tmk_core/protocol/usb_descriptor.c ****                     break;
1115:tmk_core/protocol/usb_descriptor.c **** #endif
1116:tmk_core/protocol/usb_descriptor.c ****             }
1117:tmk_core/protocol/usb_descriptor.c **** 
1118:tmk_core/protocol/usb_descriptor.c ****             break;
1119:tmk_core/protocol/usb_descriptor.c ****     }
1120:tmk_core/protocol/usb_descriptor.c **** 
1121:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
 144               		.loc 1 1121 5 is_stmt 1 view .LVU33
 145               		.loc 1 1121 24 is_stmt 0 view .LVU34
 146 0072 FA01      		movw r30,r20
 147 0074 3183      		std Z+1,r19
 148 0076 2083      		st Z,r18
1122:tmk_core/protocol/usb_descriptor.c **** 
1123:tmk_core/protocol/usb_descriptor.c ****     return Size;
 149               		.loc 1 1123 5 is_stmt 1 view .LVU35
 150               	/* epilogue start */
1124:tmk_core/protocol/usb_descriptor.c **** }
 151               		.loc 1 1124 1 is_stmt 0 view .LVU36
 152 0078 0895      		ret
 153               	.LVL16:
 154               	.L7:
1001:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 155               		.loc 1 1001 21 is_stmt 1 view .LVU37
1002:tmk_core/protocol/usb_descriptor.c **** 
 156               		.loc 1 1002 21 view .LVU38
 157               	.LBB5:
1002:tmk_core/protocol/usb_descriptor.c **** 
 158               		.loc 1 1002 31 view .LVU39
1002:tmk_core/protocol/usb_descriptor.c **** 
 159               		.loc 1 1002 31 view .LVU40
1002:tmk_core/protocol/usb_descriptor.c **** 
 160               		.loc 1 1002 31 view .LVU41
 161 007a E0E0      		ldi r30,lo8(ManufacturerString)
 162 007c F0E0      		ldi r31,hi8(ManufacturerString)
 163 007e 00C0      		rjmp .L14
 164               	.LVL17:
 165               	.L5:
1002:tmk_core/protocol/usb_descriptor.c **** 
 166               		.loc 1 1002 31 is_stmt 0 view .LVU42
 167               	.LBE5:
1021:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 168               		.loc 1 1021 13 is_stmt 1 view .LVU43
 169 0080 6330      		cpi r22,3
 170 0082 7105      		cpc r23,__zero_reg__
 171 0084 00F4      		brsh .L13
 172 0086 660F      		lsl r22
 173 0088 771F      		rol r23
 174               	.LVL18:
1021:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 175               		.loc 1 1021 13 is_stmt 0 view .LVU44
 176 008a FB01      		movw r30,r22
 177 008c E050      		subi r30,lo8(-(CSWTCH.0))
 178 008e F040      		sbci r31,hi8(-(CSWTCH.0))
 179 0090 2081      		ld r18,Z
 180 0092 3181      		ldd r19,Z+1
 181               	.LVL19:
 982:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 182               		.loc 1 982 5 view .LVU45
 183 0094 89E0      		ldi r24,lo8(9)
 184 0096 90E0      		ldi r25,0
 185               	.LVL20:
 982:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 186               		.loc 1 982 5 view .LVU46
 187 0098 00C0      		rjmp .L4
 188               	.LVL21:
 189               	.L10:
 985:tmk_core/protocol/usb_descriptor.c **** 
 190               		.loc 1 985 21 view .LVU47
 191 009a 82E1      		ldi r24,lo8(18)
 192 009c 90E0      		ldi r25,0
 193               	.LVL22:
 984:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 194               		.loc 1 984 21 view .LVU48
 195 009e 20E0      		ldi r18,lo8(DeviceDescriptor)
 196 00a0 30E0      		ldi r19,hi8(DeviceDescriptor)
 197               	.LVL23:
 984:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 198               		.loc 1 984 21 view .LVU49
 199 00a2 00C0      		rjmp .L4
 200               	.LVL24:
 201               	.L11:
 990:tmk_core/protocol/usb_descriptor.c **** 
 202               		.loc 1 990 21 view .LVU50
 203 00a4 8BE5      		ldi r24,lo8(91)
 204 00a6 90E0      		ldi r25,0
 205               	.LVL25:
 989:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 206               		.loc 1 989 21 view .LVU51
 207 00a8 20E0      		ldi r18,lo8(ConfigurationDescriptor)
 208 00aa 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 209               	.LVL26:
 989:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 210               		.loc 1 989 21 view .LVU52
 211 00ac 00C0      		rjmp .L4
 212               		.cfi_endproc
 213               	.LFE102:
 215               		.section	.rodata.CSWTCH.2,"a"
 218               	CSWTCH.2:
 219 0000 40        		.byte	64
 220 0001 81        		.byte	-127
 221 0002 22        		.byte	34
 222               		.section	.rodata.CSWTCH.1,"a"
 225               	CSWTCH.1:
 226 0000 0000      		.word	KeyboardReport
 227 0002 0000      		.word	SharedReport
 228 0004 0000      		.word	ConsoleReport
 229               		.section	.rodata.CSWTCH.0,"a"
 232               	CSWTCH.0:
 233 0000 0000      		.word	ConfigurationDescriptor+18
 234 0002 0000      		.word	ConfigurationDescriptor+43
 235 0004 0000      		.word	ConfigurationDescriptor+68
 236               	.global	ProductString
 237               		.section	.progmem.data.ProductString,"a"
 240               	ProductString:
 241 0000 64        		.byte	100
 242 0001 03        		.byte	3
 243 0002 4100      		.string	"A"
 244 0004 5400      		.string	"T"
 245 0006 2000      		.string	" "
 246 0008 5600      		.string	"V"
 247 000a 4500      		.string	"E"
 248 000c 4E00      		.string	"N"
 249 000e 4400      		.string	"D"
 250 0010 4500      		.string	"E"
 251 0012 5800      		.string	"X"
 252 0014 2000      		.string	" "
 253 0016 5300      		.string	"S"
 254 0018 7000      		.string	"p"
 255 001a 6100      		.string	"a"
 256 001c 6300      		.string	"c"
 257 001e 6500      		.string	"e"
 258 0020 2000      		.string	" "
 259 0022 4900      		.string	"I"
 260 0024 6E00      		.string	"n"
 261 0026 7600      		.string	"v"
 262 0028 6100      		.string	"a"
 263 002a 6400      		.string	"d"
 264 002c 6500      		.string	"e"
 265 002e 7200      		.string	"r"
 266 0030 2000      		.string	" "
 267 0032 4C00      		.string	"L"
 268 0034 6900      		.string	"i"
 269 0036 6E00      		.string	"n"
 270 0038 6500      		.string	"e"
 271 003a 6100      		.string	"a"
 272 003c 7200      		.string	"r"
 273 003e 2000      		.string	" "
 274 0040 4B00      		.string	"K"
 275 0042 6500      		.string	"e"
 276 0044 7900      		.string	"y"
 277 0046 6200      		.string	"b"
 278 0048 6F00      		.string	"o"
 279 004a 6100      		.string	"a"
 280 004c 7200      		.string	"r"
 281 004e 6400      		.string	"d"
 282 0050 2000      		.string	" "
 283 0052 4300      		.string	"C"
 284 0054 6F00      		.string	"o"
 285 0056 6E00      		.string	"n"
 286 0058 7600      		.string	"v"
 287 005a 6500      		.string	"e"
 288 005c 7200      		.string	"r"
 289 005e 7400      		.string	"t"
 290 0060 6500      		.string	"e"
 291 0062 7200      		.string	"r"
 292 0064 00        		.string	""
 293 0065 00        		.string	""
 294               	.global	ManufacturerString
 295               		.section	.progmem.data.ManufacturerString,"a"
 298               	ManufacturerString:
 299 0000 08        		.byte	8
 300 0001 03        		.byte	3
 301 0002 4800      		.string	"H"
 302 0004 4E00      		.string	"N"
 303 0006 5400      		.string	"T"
 304 0008 00        		.string	""
 305 0009 00        		.string	""
 306               	.global	LanguageString
 307               		.section	.progmem.data.LanguageString,"a"
 310               	LanguageString:
 311 0000 04        		.byte	4
 312 0001 03        		.byte	3
 313 0002 0904      		.word	1033
 314               	.global	ConfigurationDescriptor
 315               		.section	.progmem.data.ConfigurationDescriptor,"a"
 318               	ConfigurationDescriptor:
 319 0000 09        		.byte	9
 320 0001 02        		.byte	2
 321 0002 5B00      		.word	91
 322 0004 03        		.byte	3
 323 0005 01        		.byte	1
 324 0006 00        		.byte	0
 325 0007 A0        		.byte	-96
 326 0008 FA        		.byte	-6
 327 0009 09        		.byte	9
 328 000a 04        		.byte	4
 329 000b 00        		.byte	0
 330 000c 00        		.byte	0
 331 000d 01        		.byte	1
 332 000e 03        		.byte	3
 333 000f 01        		.byte	1
 334 0010 01        		.byte	1
 335 0011 00        		.byte	0
 336 0012 09        		.byte	9
 337 0013 21        		.byte	33
 338 0014 1101      		.word	273
 339 0016 00        		.byte	0
 340 0017 01        		.byte	1
 341 0018 22        		.byte	34
 342 0019 4000      		.word	64
 343 001b 07        		.byte	7
 344 001c 05        		.byte	5
 345 001d 81        		.byte	-127
 346 001e 03        		.byte	3
 347 001f 0800      		.word	8
 348 0021 0A        		.byte	10
 349 0022 09        		.byte	9
 350 0023 04        		.byte	4
 351 0024 01        		.byte	1
 352 0025 00        		.byte	0
 353 0026 01        		.byte	1
 354 0027 03        		.byte	3
 355 0028 00        		.byte	0
 356 0029 00        		.byte	0
 357 002a 00        		.byte	0
 358 002b 09        		.byte	9
 359 002c 21        		.byte	33
 360 002d 1101      		.word	273
 361 002f 00        		.byte	0
 362 0030 01        		.byte	1
 363 0031 22        		.byte	34
 364 0032 8100      		.word	129
 365 0034 07        		.byte	7
 366 0035 05        		.byte	5
 367 0036 82        		.byte	-126
 368 0037 03        		.byte	3
 369 0038 2000      		.word	32
 370 003a 0A        		.byte	10
 371 003b 09        		.byte	9
 372 003c 04        		.byte	4
 373 003d 02        		.byte	2
 374 003e 00        		.byte	0
 375 003f 02        		.byte	2
 376 0040 03        		.byte	3
 377 0041 00        		.byte	0
 378 0042 00        		.byte	0
 379 0043 00        		.byte	0
 380 0044 09        		.byte	9
 381 0045 21        		.byte	33
 382 0046 1101      		.word	273
 383 0048 00        		.byte	0
 384 0049 01        		.byte	1
 385 004a 22        		.byte	34
 386 004b 2200      		.word	34
 387 004d 07        		.byte	7
 388 004e 05        		.byte	5
 389 004f 83        		.byte	-125
 390 0050 03        		.byte	3
 391 0051 2000      		.word	32
 392 0053 01        		.byte	1
 393 0054 07        		.byte	7
 394 0055 05        		.byte	5
 395 0056 03        		.byte	3
 396 0057 03        		.byte	3
 397 0058 2000      		.word	32
 398 005a 01        		.byte	1
 399               	.global	DeviceDescriptor
 400               		.section	.progmem.data.DeviceDescriptor,"a"
 403               	DeviceDescriptor:
 404 0000 12        		.byte	18
 405 0001 01        		.byte	1
 406 0002 1001      		.word	272
 407 0004 00        		.byte	0
 408 0005 00        		.byte	0
 409 0006 00        		.byte	0
 410 0007 08        		.byte	8
 411 0008 EDFE      		.word	-275
 412 000a 1265      		.word	25874
 413 000c 0100      		.word	1
 414 000e 01        		.byte	1
 415 000f 02        		.byte	2
 416 0010 00        		.byte	0
 417 0011 01        		.byte	1
 418               	.global	ConsoleReport
 419               		.section	.progmem.data.ConsoleReport,"a"
 422               	ConsoleReport:
 423 0000 06        		.byte	6
 424 0001 31        		.byte	49
 425 0002 FF        		.byte	-1
 426 0003 09        		.byte	9
 427 0004 74        		.byte	116
 428 0005 A1        		.byte	-95
 429 0006 01        		.byte	1
 430 0007 09        		.byte	9
 431 0008 75        		.byte	117
 432 0009 15        		.byte	21
 433 000a 00        		.byte	0
 434 000b 26        		.byte	38
 435 000c FF        		.byte	-1
 436 000d 00        		.byte	0
 437 000e 95        		.byte	-107
 438 000f 20        		.byte	32
 439 0010 75        		.byte	117
 440 0011 08        		.byte	8
 441 0012 81        		.byte	-127
 442 0013 02        		.byte	2
 443 0014 09        		.byte	9
 444 0015 76        		.byte	118
 445 0016 15        		.byte	21
 446 0017 00        		.byte	0
 447 0018 26        		.byte	38
 448 0019 FF        		.byte	-1
 449 001a 00        		.byte	0
 450 001b 95        		.byte	-107
 451 001c 20        		.byte	32
 452 001d 75        		.byte	117
 453 001e 08        		.byte	8
 454 001f 91        		.byte	-111
 455 0020 02        		.byte	2
 456 0021 C0        		.byte	-64
 457               	.global	SharedReport
 458               		.section	.progmem.data.SharedReport,"a"
 461               	SharedReport:
 462 0000 05        		.byte	5
 463 0001 01        		.byte	1
 464 0002 09        		.byte	9
 465 0003 02        		.byte	2
 466 0004 A1        		.byte	-95
 467 0005 01        		.byte	1
 468 0006 85        		.byte	-123
 469 0007 02        		.byte	2
 470 0008 09        		.byte	9
 471 0009 01        		.byte	1
 472 000a A1        		.byte	-95
 473 000b 00        		.byte	0
 474 000c 05        		.byte	5
 475 000d 09        		.byte	9
 476 000e 19        		.byte	25
 477 000f 01        		.byte	1
 478 0010 29        		.byte	41
 479 0011 05        		.byte	5
 480 0012 15        		.byte	21
 481 0013 00        		.byte	0
 482 0014 25        		.byte	37
 483 0015 01        		.byte	1
 484 0016 95        		.byte	-107
 485 0017 05        		.byte	5
 486 0018 75        		.byte	117
 487 0019 01        		.byte	1
 488 001a 81        		.byte	-127
 489 001b 02        		.byte	2
 490 001c 95        		.byte	-107
 491 001d 01        		.byte	1
 492 001e 75        		.byte	117
 493 001f 03        		.byte	3
 494 0020 81        		.byte	-127
 495 0021 01        		.byte	1
 496 0022 05        		.byte	5
 497 0023 01        		.byte	1
 498 0024 09        		.byte	9
 499 0025 30        		.byte	48
 500 0026 09        		.byte	9
 501 0027 31        		.byte	49
 502 0028 15        		.byte	21
 503 0029 81        		.byte	-127
 504 002a 25        		.byte	37
 505 002b 7F        		.byte	127
 506 002c 95        		.byte	-107
 507 002d 02        		.byte	2
 508 002e 75        		.byte	117
 509 002f 08        		.byte	8
 510 0030 81        		.byte	-127
 511 0031 06        		.byte	6
 512 0032 09        		.byte	9
 513 0033 38        		.byte	56
 514 0034 15        		.byte	21
 515 0035 81        		.byte	-127
 516 0036 25        		.byte	37
 517 0037 7F        		.byte	127
 518 0038 95        		.byte	-107
 519 0039 01        		.byte	1
 520 003a 75        		.byte	117
 521 003b 08        		.byte	8
 522 003c 81        		.byte	-127
 523 003d 06        		.byte	6
 524 003e 05        		.byte	5
 525 003f 0C        		.byte	12
 526 0040 0A        		.byte	10
 527 0041 38        		.byte	56
 528 0042 02        		.byte	2
 529 0043 15        		.byte	21
 530 0044 81        		.byte	-127
 531 0045 25        		.byte	37
 532 0046 7F        		.byte	127
 533 0047 95        		.byte	-107
 534 0048 01        		.byte	1
 535 0049 75        		.byte	117
 536 004a 08        		.byte	8
 537 004b 81        		.byte	-127
 538 004c 06        		.byte	6
 539 004d C0        		.byte	-64
 540 004e C0        		.byte	-64
 541 004f 05        		.byte	5
 542 0050 01        		.byte	1
 543 0051 09        		.byte	9
 544 0052 80        		.byte	-128
 545 0053 A1        		.byte	-95
 546 0054 01        		.byte	1
 547 0055 85        		.byte	-123
 548 0056 03        		.byte	3
 549 0057 19        		.byte	25
 550 0058 01        		.byte	1
 551 0059 2A        		.byte	42
 552 005a B7        		.byte	-73
 553 005b 00        		.byte	0
 554 005c 15        		.byte	21
 555 005d 01        		.byte	1
 556 005e 26        		.byte	38
 557 005f B7        		.byte	-73
 558 0060 00        		.byte	0
 559 0061 95        		.byte	-107
 560 0062 01        		.byte	1
 561 0063 75        		.byte	117
 562 0064 10        		.byte	16
 563 0065 81        		.byte	-127
 564 0066 00        		.byte	0
 565 0067 C0        		.byte	-64
 566 0068 05        		.byte	5
 567 0069 0C        		.byte	12
 568 006a 09        		.byte	9
 569 006b 01        		.byte	1
 570 006c A1        		.byte	-95
 571 006d 01        		.byte	1
 572 006e 85        		.byte	-123
 573 006f 04        		.byte	4
 574 0070 19        		.byte	25
 575 0071 01        		.byte	1
 576 0072 2A        		.byte	42
 577 0073 A0        		.byte	-96
 578 0074 02        		.byte	2
 579 0075 15        		.byte	21
 580 0076 01        		.byte	1
 581 0077 26        		.byte	38
 582 0078 A0        		.byte	-96
 583 0079 02        		.byte	2
 584 007a 95        		.byte	-107
 585 007b 01        		.byte	1
 586 007c 75        		.byte	117
 587 007d 10        		.byte	16
 588 007e 81        		.byte	-127
 589 007f 00        		.byte	0
 590 0080 C0        		.byte	-64
 591               	.global	KeyboardReport
 592               		.section	.progmem.data.KeyboardReport,"a"
 595               	KeyboardReport:
 596 0000 05        		.byte	5
 597 0001 01        		.byte	1
 598 0002 09        		.byte	9
 599 0003 06        		.byte	6
 600 0004 A1        		.byte	-95
 601 0005 01        		.byte	1
 602 0006 05        		.byte	5
 603 0007 07        		.byte	7
 604 0008 19        		.byte	25
 605 0009 E0        		.byte	-32
 606 000a 29        		.byte	41
 607 000b E7        		.byte	-25
 608 000c 15        		.byte	21
 609 000d 00        		.byte	0
 610 000e 25        		.byte	37
 611 000f 01        		.byte	1
 612 0010 95        		.byte	-107
 613 0011 08        		.byte	8
 614 0012 75        		.byte	117
 615 0013 01        		.byte	1
 616 0014 81        		.byte	-127
 617 0015 02        		.byte	2
 618 0016 95        		.byte	-107
 619 0017 01        		.byte	1
 620 0018 75        		.byte	117
 621 0019 08        		.byte	8
 622 001a 81        		.byte	-127
 623 001b 01        		.byte	1
 624 001c 05        		.byte	5
 625 001d 07        		.byte	7
 626 001e 19        		.byte	25
 627 001f 00        		.byte	0
 628 0020 29        		.byte	41
 629 0021 FF        		.byte	-1
 630 0022 15        		.byte	21
 631 0023 00        		.byte	0
 632 0024 26        		.byte	38
 633 0025 FF        		.byte	-1
 634 0026 00        		.byte	0
 635 0027 95        		.byte	-107
 636 0028 06        		.byte	6
 637 0029 75        		.byte	117
 638 002a 08        		.byte	8
 639 002b 81        		.byte	-127
 640 002c 00        		.byte	0
 641 002d 05        		.byte	5
 642 002e 08        		.byte	8
 643 002f 19        		.byte	25
 644 0030 01        		.byte	1
 645 0031 29        		.byte	41
 646 0032 05        		.byte	5
 647 0033 95        		.byte	-107
 648 0034 05        		.byte	5
 649 0035 75        		.byte	117
 650 0036 01        		.byte	1
 651 0037 91        		.byte	-111
 652 0038 02        		.byte	2
 653 0039 95        		.byte	-107
 654 003a 01        		.byte	1
 655 003b 75        		.byte	117
 656 003c 03        		.byte	3
 657 003d 91        		.byte	-111
 658 003e 01        		.byte	1
 659 003f C0        		.byte	-64
 660               		.text
 661               	.Letext0:
 662               		.file 2 "/usr/avr/include/stdint.h"
 663               		.file 3 "/usr/lib/gcc/avr/8.3.0/include/stddef.h"
 664               		.file 4 "tmk_core/common/report.h"
 665               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 666               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 667               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 668               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 669               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 670               		.file 10 "/usr/avr/include/stdio.h"
 671               		.file 11 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 672               		.file 12 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
     /tmp/ccml1bYy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccml1bYy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccml1bYy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccml1bYy.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccml1bYy.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccml1bYy.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
     /tmp/ccml1bYy.s:225    .rodata.CSWTCH.1:0000000000000000 CSWTCH.1
     /tmp/ccml1bYy.s:218    .rodata.CSWTCH.2:0000000000000000 CSWTCH.2
     /tmp/ccml1bYy.s:240    .progmem.data.ProductString:0000000000000000 ProductString
     /tmp/ccml1bYy.s:310    .progmem.data.LanguageString:0000000000000000 LanguageString
     /tmp/ccml1bYy.s:298    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
     /tmp/ccml1bYy.s:232    .rodata.CSWTCH.0:0000000000000000 CSWTCH.0
     /tmp/ccml1bYy.s:403    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
     /tmp/ccml1bYy.s:318    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
     /tmp/ccml1bYy.s:595    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport
     /tmp/ccml1bYy.s:461    .progmem.data.SharedReport:0000000000000000 SharedReport
     /tmp/ccml1bYy.s:422    .progmem.data.ConsoleReport:0000000000000000 ConsoleReport

UNDEFINED SYMBOLS
__do_copy_data
