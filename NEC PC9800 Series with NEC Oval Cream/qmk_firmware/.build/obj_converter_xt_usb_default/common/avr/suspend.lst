   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LVL0:
  15               	.LFB110:
  16               		.file 1 "tmk_core/common/avr/suspend.c"
   1:tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:tmk_core/common/avr/suspend.c **** #include "action.h"
   7:tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   8:tmk_core/common/avr/suspend.c **** #include "suspend.h"
   9:tmk_core/common/avr/suspend.c **** #include "timer.h"
  10:tmk_core/common/avr/suspend.c **** #include "led.h"
  11:tmk_core/common/avr/suspend.c **** #include "host.h"
  12:tmk_core/common/avr/suspend.c **** 
  13:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  14:tmk_core/common/avr/suspend.c **** #    include "lufa.h"
  15:tmk_core/common/avr/suspend.c **** #endif
  16:tmk_core/common/avr/suspend.c **** 
  17:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
  18:tmk_core/common/avr/suspend.c **** #    include "backlight.h"
  19:tmk_core/common/avr/suspend.c **** #endif
  20:tmk_core/common/avr/suspend.c **** 
  21:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  22:tmk_core/common/avr/suspend.c **** #    include "audio.h"
  23:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  24:tmk_core/common/avr/suspend.c **** 
  25:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
  26:tmk_core/common/avr/suspend.c **** #    include "rgblight.h"
  27:tmk_core/common/avr/suspend.c **** extern rgblight_config_t rgblight_config;
  28:tmk_core/common/avr/suspend.c **** static bool              rgblight_enabled;
  29:tmk_core/common/avr/suspend.c **** static bool              is_suspended;
  30:tmk_core/common/avr/suspend.c **** #endif
  31:tmk_core/common/avr/suspend.c **** 
  32:tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  33:tmk_core/common/avr/suspend.c ****  *
  34:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  35:tmk_core/common/avr/suspend.c ****  */
  36:tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time) {
  17               		.loc 1 36 33 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  37:tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 37 5 view .LVU1
  24               	/* #APP */
  25               	 ;  37 "tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  38:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 38 5 view .LVU2
  29               		.loc 1 38 5 view .LVU3
  30               	/* #NOAPP */
  31 0002 83B7      		in r24,0x33
  32               	.LVL1:
  33               		.loc 1 38 5 is_stmt 0 view .LVU4
  34 0004 817F      		andi r24,lo8(-15)
  35 0006 83BF      		out 0x33,r24
  39:tmk_core/common/avr/suspend.c ****     sleep_enable();
  36               		.loc 1 39 5 is_stmt 1 view .LVU5
  37               		.loc 1 39 5 view .LVU6
  38 0008 83B7      		in r24,0x33
  39 000a 8160      		ori r24,lo8(1)
  40 000c 83BF      		out 0x33,r24
  40:tmk_core/common/avr/suspend.c ****     sei();
  41               		.loc 1 40 5 view .LVU7
  42               	/* #APP */
  43               	 ;  40 "tmk_core/common/avr/suspend.c" 1
  44 000e 7894      		sei
  45               	 ;  0 "" 2
  41:tmk_core/common/avr/suspend.c ****     sleep_cpu();
  46               		.loc 1 41 5 view .LVU8
  47               		.loc 1 41 5 view .LVU9
  48               	 ;  41 "tmk_core/common/avr/suspend.c" 1
  49 0010 8895      		sleep
  50               		
  51               	 ;  0 "" 2
  42:tmk_core/common/avr/suspend.c ****     sleep_disable();
  52               		.loc 1 42 5 view .LVU10
  53               		.loc 1 42 5 view .LVU11
  54               	/* #NOAPP */
  55 0012 83B7      		in r24,0x33
  56 0014 8E7F      		andi r24,lo8(-2)
  57 0016 83BF      		out 0x33,r24
  58               	/* epilogue start */
  43:tmk_core/common/avr/suspend.c **** }
  59               		.loc 1 43 1 is_stmt 0 view .LVU12
  60 0018 0895      		ret
  61               		.cfi_endproc
  62               	.LFE110:
  64               		.section	.text.matrix_power_up,"ax",@progbits
  65               		.weak	matrix_power_up
  67               	matrix_power_up:
  68               	.LFB115:
  44:tmk_core/common/avr/suspend.c **** 
  45:tmk_core/common/avr/suspend.c **** // TODO: This needs some cleanup
  46:tmk_core/common/avr/suspend.c **** 
  47:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  48:tmk_core/common/avr/suspend.c ****  *
  49:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  50:tmk_core/common/avr/suspend.c ****  */
  51:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_user(void) {}
  52:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  53:tmk_core/common/avr/suspend.c ****  *
  54:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  55:tmk_core/common/avr/suspend.c ****  */
  56:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_power_down_kb(void) { suspend_power_down_user(); }
  57:tmk_core/common/avr/suspend.c **** 
  58:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  59:tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  60:tmk_core/common/avr/suspend.c ****  *
  61:tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  62:tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  63:tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  64:tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  65:tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  66:tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  67:tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  68:tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  69:tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  70:tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  71:tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  72:tmk_core/common/avr/suspend.c ****  */
  73:tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  74:tmk_core/common/avr/suspend.c **** 
  75:tmk_core/common/avr/suspend.c **** /** \brief Power down
  76:tmk_core/common/avr/suspend.c ****  *
  77:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  78:tmk_core/common/avr/suspend.c ****  */
  79:tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto) {
  80:tmk_core/common/avr/suspend.c **** #    ifdef PROTOCOL_LUFA
  81:tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  82:tmk_core/common/avr/suspend.c **** #    endif
  83:tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
  84:tmk_core/common/avr/suspend.c **** 
  85:tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
  86:tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
  87:tmk_core/common/avr/suspend.c **** 
  88:tmk_core/common/avr/suspend.c **** #    ifdef BACKLIGHT_ENABLE
  89:tmk_core/common/avr/suspend.c ****     backlight_set(0);
  90:tmk_core/common/avr/suspend.c **** #    endif
  91:tmk_core/common/avr/suspend.c **** 
  92:tmk_core/common/avr/suspend.c ****     // Turn off LED indicators
  93:tmk_core/common/avr/suspend.c ****     uint8_t leds_off = 0;
  94:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
  95:tmk_core/common/avr/suspend.c ****     if (is_backlight_enabled()) {
  96:tmk_core/common/avr/suspend.c ****         // Don't try to turn off Caps Lock indicator as it is backlight and backlight is already of
  97:tmk_core/common/avr/suspend.c ****         leds_off |= (1 << USB_LED_CAPS_LOCK);
  98:tmk_core/common/avr/suspend.c ****     }
  99:tmk_core/common/avr/suspend.c **** #    endif
 100:tmk_core/common/avr/suspend.c ****     led_set(leds_off);
 101:tmk_core/common/avr/suspend.c **** 
 102:tmk_core/common/avr/suspend.c **** #    ifdef AUDIO_ENABLE
 103:tmk_core/common/avr/suspend.c ****     // This sometimes disables the start-up noise, so it's been disabled
 104:tmk_core/common/avr/suspend.c ****     // stop_all_notes();
 105:tmk_core/common/avr/suspend.c **** #    endif /* AUDIO_ENABLE */
 106:tmk_core/common/avr/suspend.c **** #    if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 107:tmk_core/common/avr/suspend.c ****     rgblight_timer_disable();
 108:tmk_core/common/avr/suspend.c ****     if (!is_suspended) {
 109:tmk_core/common/avr/suspend.c ****         is_suspended     = true;
 110:tmk_core/common/avr/suspend.c ****         rgblight_enabled = rgblight_config.enable;
 111:tmk_core/common/avr/suspend.c ****         rgblight_disable_noeeprom();
 112:tmk_core/common/avr/suspend.c ****     }
 113:tmk_core/common/avr/suspend.c **** #    endif
 114:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 115:tmk_core/common/avr/suspend.c **** 
 116:tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 117:tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 118:tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 119:tmk_core/common/avr/suspend.c ****     // - prescale clock
 120:tmk_core/common/avr/suspend.c ****     // - BOD disable
 121:tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 122:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 123:tmk_core/common/avr/suspend.c ****     sleep_enable();
 124:tmk_core/common/avr/suspend.c ****     sei();
 125:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 126:tmk_core/common/avr/suspend.c ****     sleep_disable();
 127:tmk_core/common/avr/suspend.c **** 
 128:tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 129:tmk_core/common/avr/suspend.c ****     wdt_disable();
 130:tmk_core/common/avr/suspend.c **** }
 131:tmk_core/common/avr/suspend.c **** #endif
 132:tmk_core/common/avr/suspend.c **** 
 133:tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 134:tmk_core/common/avr/suspend.c ****  *
 135:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 136:tmk_core/common/avr/suspend.c ****  */
 137:tmk_core/common/avr/suspend.c **** void suspend_power_down(void) {
 138:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 139:tmk_core/common/avr/suspend.c **** 
 140:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 141:tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 142:tmk_core/common/avr/suspend.c **** #endif
 143:tmk_core/common/avr/suspend.c **** }
 144:tmk_core/common/avr/suspend.c **** 
 145:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_up(void) {}
  69               		.loc 1 145 50 is_stmt 1 view -0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
  75               		.loc 1 145 51 view .LVU14
  76               	/* epilogue start */
  77               		.loc 1 145 1 is_stmt 0 view .LVU15
  78 0000 0895      		ret
  79               		.cfi_endproc
  80               	.LFE115:
  82               		.set	matrix_power_up.localalias.0,matrix_power_up
  83               		.section	.text.suspend_power_down_user,"ax",@progbits
  84               		.weak	suspend_power_down_user
  86               	suspend_power_down_user:
  87               	.LFB127:
  88               		.cfi_startproc
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 0 */
  92               	.L__stack_usage = 0
  93               	/* epilogue start */
  94 0000 0895      		ret
  95               		.cfi_endproc
  96               	.LFE127:
  98               		.section	.text.suspend_power_down_kb,"ax",@progbits
  99               		.weak	suspend_power_down_kb
 101               	suspend_power_down_kb:
 102               	.LFB112:
  56:tmk_core/common/avr/suspend.c **** 
 103               		.loc 1 56 56 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  56:tmk_core/common/avr/suspend.c **** 
 109               		.loc 1 56 58 view .LVU17
 110 0000 0C94 0000 		jmp suspend_power_down_user
 111               	.LVL2:
 112               		.cfi_endproc
 113               	.LFE112:
 115               		.section	.text.suspend_power_down,"ax",@progbits
 116               	.global	suspend_power_down
 118               	suspend_power_down:
 119               	.LFB114:
 137:tmk_core/common/avr/suspend.c ****     suspend_power_down_kb();
 120               		.loc 1 137 31 view -0
 121               		.cfi_startproc
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
 138:tmk_core/common/avr/suspend.c **** 
 126               		.loc 1 138 5 view .LVU19
 127 0000 0E94 0000 		call suspend_power_down_kb
 128               	.LVL3:
 141:tmk_core/common/avr/suspend.c **** #endif
 129               		.loc 1 141 5 view .LVU20
 130               	.LBB11:
 131               	.LBI11:
  79:tmk_core/common/avr/suspend.c **** #    ifdef PROTOCOL_LUFA
 132               		.loc 1 79 13 view .LVU21
 133               	.LBB12:
  81:tmk_core/common/avr/suspend.c **** #    endif
 134               		.loc 1 81 5 view .LVU22
  81:tmk_core/common/avr/suspend.c **** #    endif
 135               		.loc 1 81 25 is_stmt 0 view .LVU23
 136 0004 8091 0000 		lds r24,USB_DeviceState
  81:tmk_core/common/avr/suspend.c **** #    endif
 137               		.loc 1 81 8 view .LVU24
 138 0008 8430      		cpi r24,lo8(4)
 139 000a 01F0      		breq .L5
  83:tmk_core/common/avr/suspend.c **** 
 140               		.loc 1 83 5 is_stmt 1 view .LVU25
  83:tmk_core/common/avr/suspend.c **** 
 141               		.loc 1 83 17 is_stmt 0 view .LVU26
 142 000c 1092 0000 		sts wdt_timeout,__zero_reg__
  86:tmk_core/common/avr/suspend.c **** 
 143               		.loc 1 86 5 is_stmt 1 view .LVU27
 144 0010 88E1      		ldi r24,lo8(24)
 145 0012 90E0      		ldi r25,0
 146 0014 20E4      		ldi r18,lo8(64)
 147               	/* #APP */
 148               	 ;  86 "tmk_core/common/avr/suspend.c" 1
 149 0016 0FB6      		in __tmp_reg__,__SREG__
 150 0018 F894      		cli
 151 001a A895      		wdr
 152 001c 8093 6000 		sts 96,r24
 153 0020 0FBE      		out __SREG__,__tmp_reg__
 154 0022 2093 6000 		sts 96,r18
 155               		
 156               	 ;  0 "" 2
  93:tmk_core/common/avr/suspend.c **** #    if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 157               		.loc 1 93 5 view .LVU28
 158               	.LVL4:
 100:tmk_core/common/avr/suspend.c **** 
 159               		.loc 1 100 5 view .LVU29
 160               	/* #NOAPP */
 161 0026 80E0      		ldi r24,0
 162 0028 0E94 0000 		call led_set
 163               	.LVL5:
 114:tmk_core/common/avr/suspend.c **** 
 164               		.loc 1 114 5 view .LVU30
 165 002c 0E94 0000 		call suspend_power_down_kb
 166               	.LVL6:
 122:tmk_core/common/avr/suspend.c ****     sleep_enable();
 167               		.loc 1 122 5 view .LVU31
 122:tmk_core/common/avr/suspend.c ****     sleep_enable();
 168               		.loc 1 122 5 view .LVU32
 169 0030 83B7      		in r24,0x33
 170 0032 817F      		andi r24,lo8(-15)
 171 0034 8460      		ori r24,lo8(4)
 172 0036 83BF      		out 0x33,r24
 123:tmk_core/common/avr/suspend.c ****     sei();
 173               		.loc 1 123 5 view .LVU33
 123:tmk_core/common/avr/suspend.c ****     sei();
 174               		.loc 1 123 5 view .LVU34
 175 0038 83B7      		in r24,0x33
 176 003a 8160      		ori r24,lo8(1)
 177 003c 83BF      		out 0x33,r24
 124:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 178               		.loc 1 124 5 view .LVU35
 179               	/* #APP */
 180               	 ;  124 "tmk_core/common/avr/suspend.c" 1
 181 003e 7894      		sei
 182               	 ;  0 "" 2
 125:tmk_core/common/avr/suspend.c ****     sleep_disable();
 183               		.loc 1 125 5 view .LVU36
 125:tmk_core/common/avr/suspend.c ****     sleep_disable();
 184               		.loc 1 125 5 view .LVU37
 185               	 ;  125 "tmk_core/common/avr/suspend.c" 1
 186 0040 8895      		sleep
 187               		
 188               	 ;  0 "" 2
 126:tmk_core/common/avr/suspend.c **** 
 189               		.loc 1 126 5 view .LVU38
 126:tmk_core/common/avr/suspend.c **** 
 190               		.loc 1 126 5 view .LVU39
 191               	/* #NOAPP */
 192 0042 83B7      		in r24,0x33
 193 0044 8E7F      		andi r24,lo8(-2)
 194 0046 83BF      		out 0x33,r24
 129:tmk_core/common/avr/suspend.c **** }
 195               		.loc 1 129 5 view .LVU40
 196               	.LBB13:
 197               	.LBI13:
 198               		.file 2 "/usr/avr/include/avr/wdt.h"
   1:/usr/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/avr/include/avr/wdt.h **** 
   5:/usr/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/avr/wdt.h **** 
   8:/usr/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/avr/wdt.h **** 
  11:/usr/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/wdt.h ****      distribution.
  15:/usr/avr/include/avr/wdt.h **** 
  16:/usr/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/avr/wdt.h **** 
  20:/usr/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/avr/wdt.h **** 
  32:/usr/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/avr/include/avr/wdt.h **** 
  34:/usr/avr/include/avr/wdt.h **** /*
  35:/usr/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/avr/include/avr/wdt.h ****  */
  37:/usr/avr/include/avr/wdt.h **** 
  38:/usr/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/avr/include/avr/wdt.h **** 
  41:/usr/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/avr/include/avr/wdt.h **** 
  44:/usr/avr/include/avr/wdt.h **** /** \file */
  45:/usr/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/avr/include/avr/wdt.h **** 
  48:/usr/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/avr/include/avr/wdt.h **** 
  57:/usr/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/avr/include/avr/wdt.h **** 
  61:/usr/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/avr/include/avr/wdt.h ****     the following:
  68:/usr/avr/include/avr/wdt.h **** 
  69:/usr/avr/include/avr/wdt.h ****     \code
  70:/usr/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/avr/include/avr/wdt.h **** 
  73:/usr/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/avr/include/avr/wdt.h **** 
  75:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/avr/include/avr/wdt.h ****     {
  80:/usr/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/avr/include/avr/wdt.h ****     }
  84:/usr/avr/include/avr/wdt.h ****     \endcode
  85:/usr/avr/include/avr/wdt.h **** 
  86:/usr/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/avr/include/avr/wdt.h **** */
  91:/usr/avr/include/avr/wdt.h **** 
  92:/usr/avr/include/avr/wdt.h **** /**
  93:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/avr/include/avr/wdt.h **** */
  98:/usr/avr/include/avr/wdt.h **** 
  99:/usr/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/avr/include/avr/wdt.h **** 
 101:/usr/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/avr/include/avr/wdt.h **** 
 103:/usr/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/avr/include/avr/wdt.h **** #else
 106:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/avr/include/avr/wdt.h **** #endif
 108:/usr/avr/include/avr/wdt.h **** 
 109:/usr/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/avr/include/avr/wdt.h **** #else
 114:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/avr/include/avr/wdt.h **** #endif
 116:/usr/avr/include/avr/wdt.h **** 
 117:/usr/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/avr/include/avr/wdt.h **** #else
 120:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/avr/include/avr/wdt.h **** #endif
 122:/usr/avr/include/avr/wdt.h **** 
 123:/usr/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/avr/include/avr/wdt.h **** 
 125:/usr/avr/include/avr/wdt.h **** 
 126:/usr/avr/include/avr/wdt.h **** /**
 127:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/avr/include/avr/wdt.h **** 
 134:/usr/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/avr/include/avr/wdt.h **** */
 136:/usr/avr/include/avr/wdt.h **** 
 137:/usr/avr/include/avr/wdt.h **** 
 138:/usr/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/avr/include/avr/wdt.h **** 
 140:/usr/avr/include/avr/wdt.h **** /*
 141:/usr/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/avr/include/avr/wdt.h **** */
 152:/usr/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/avr/include/avr/wdt.h **** do { \
 154:/usr/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/avr/include/avr/wdt.h **** ); \
 174:/usr/avr/include/avr/wdt.h **** } while(0)
 175:/usr/avr/include/avr/wdt.h **** 
 176:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/avr/include/avr/wdt.h ****     : \
 184:/usr/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/avr/include/avr/wdt.h **** );
 191:/usr/avr/include/avr/wdt.h **** 
 192:/usr/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/avr/include/avr/wdt.h **** 
 194:/usr/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/avr/include/avr/wdt.h **** )
 210:/usr/avr/include/avr/wdt.h **** 
 211:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/avr/include/avr/wdt.h **** do { \
 213:/usr/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/avr/include/avr/wdt.h **** ); \
 231:/usr/avr/include/avr/wdt.h **** }while(0)
 232:/usr/avr/include/avr/wdt.h **** 
 233:/usr/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/avr/include/avr/wdt.h **** 
 235:/usr/avr/include/avr/wdt.h **** static __inline__
 236:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/avr/include/avr/wdt.h **** {
 239:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/avr/include/avr/wdt.h **** 	{
 241:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/avr/include/avr/wdt.h **** 			);
 256:/usr/avr/include/avr/wdt.h **** 	}
 257:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/avr/include/avr/wdt.h **** 	{
 259:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/avr/include/avr/wdt.h **** 			);
 274:/usr/avr/include/avr/wdt.h **** 	}
 275:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/avr/include/avr/wdt.h **** 	{
 277:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/avr/include/avr/wdt.h **** 			);
 292:/usr/avr/include/avr/wdt.h **** 	}
 293:/usr/avr/include/avr/wdt.h **** 	else
 294:/usr/avr/include/avr/wdt.h ****  	{
 295:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/avr/include/avr/wdt.h **** 			);
 310:/usr/avr/include/avr/wdt.h **** 	}
 311:/usr/avr/include/avr/wdt.h **** }
 312:/usr/avr/include/avr/wdt.h **** 
 313:/usr/avr/include/avr/wdt.h **** static __inline__
 314:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/avr/include/avr/wdt.h **** {
 317:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/avr/include/avr/wdt.h **** 	{
 319:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/avr/include/avr/wdt.h **** 				);
 337:/usr/avr/include/avr/wdt.h **** 	}
 338:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/avr/include/avr/wdt.h **** 	{
 340:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/avr/include/avr/wdt.h **** 				);
 358:/usr/avr/include/avr/wdt.h **** 	}
 359:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/avr/include/avr/wdt.h **** 	{
 361:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/avr/include/avr/wdt.h **** 				);
 379:/usr/avr/include/avr/wdt.h **** 	}
 380:/usr/avr/include/avr/wdt.h **** 	else
 381:/usr/avr/include/avr/wdt.h **** 	{
 382:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/avr/include/avr/wdt.h **** 				);
 400:/usr/avr/include/avr/wdt.h **** 	}
 401:/usr/avr/include/avr/wdt.h **** }
 402:/usr/avr/include/avr/wdt.h **** 
 403:/usr/avr/include/avr/wdt.h **** #else
 404:/usr/avr/include/avr/wdt.h **** 
 405:/usr/avr/include/avr/wdt.h **** static __inline__
 406:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/avr/include/avr/wdt.h **** {
 409:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/avr/include/avr/wdt.h **** 	{
 411:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/avr/include/avr/wdt.h **** 		);
 425:/usr/avr/include/avr/wdt.h **** 	}
 426:/usr/avr/include/avr/wdt.h **** 	else
 427:/usr/avr/include/avr/wdt.h **** 	{
 428:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/avr/include/avr/wdt.h **** 		);
 442:/usr/avr/include/avr/wdt.h **** 	}
 443:/usr/avr/include/avr/wdt.h **** }
 444:/usr/avr/include/avr/wdt.h **** 
 445:/usr/avr/include/avr/wdt.h **** static __inline__
 446:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 199               		.loc 2 447 6 view .LVU41
 200               	.LBE13:
 201               	.LBE12:
 202               	.LBE11:
 448:/usr/avr/include/avr/wdt.h **** {
 449:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 203               		.loc 2 449 2 view .LVU42
 204               	.LBB17:
 205               	.LBB16:
 206               	.LBB15:
 207               	.LBB14:
 450:/usr/avr/include/avr/wdt.h **** 	{
 451:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/avr/include/avr/wdt.h **** 		);
 466:/usr/avr/include/avr/wdt.h **** 	}
 467:/usr/avr/include/avr/wdt.h **** 	else
 468:/usr/avr/include/avr/wdt.h **** 	{
 469:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 208               		.loc 2 469 9 view .LVU43
 470:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 209               		.loc 2 470 3 view .LVU44
 210               	/* #APP */
 211               	 ;  470 "/usr/avr/include/avr/wdt.h" 1
 212 0048 0FB6      		in __tmp_reg__,__SREG__
 213 004a F894      		cli
 214 004c A895      		wdr
 215 004e 8091 6000 		lds r24,96
 216 0052 8861      		ori r24,24
 217 0054 8093 6000 		sts 96,r24
 218 0058 1092 6000 		sts 96,__zero_reg__
 219 005c 0FBE      		out __SREG__,__tmp_reg__
 220               		
 221               	 ;  0 "" 2
 222               	.LVL7:
 223               	/* #NOAPP */
 224               	.L5:
 225               	/* epilogue start */
 226               		.loc 2 470 3 is_stmt 0 view .LVU45
 227               	.LBE14:
 228               	.LBE15:
 229               	.LBE16:
 230               	.LBE17:
 143:tmk_core/common/avr/suspend.c **** 
 231               		.loc 1 143 1 view .LVU46
 232 005e 0895      		ret
 233               		.cfi_endproc
 234               	.LFE114:
 236               		.section	.text.matrix_power_down,"ax",@progbits
 237               		.weak	matrix_power_down
 239               	matrix_power_down:
 240               	.LFB123:
 241               		.cfi_startproc
 242               	/* prologue: function */
 243               	/* frame size = 0 */
 244               	/* stack size = 0 */
 245               	.L__stack_usage = 0
 246               	/* epilogue start */
 247 0000 0895      		ret
 248               		.cfi_endproc
 249               	.LFE123:
 251               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 252               	.global	suspend_wakeup_condition
 254               	suspend_wakeup_condition:
 255               	.LFB117:
 146:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void matrix_power_down(void) {}
 147:tmk_core/common/avr/suspend.c **** bool                       suspend_wakeup_condition(void) {
 256               		.loc 1 147 59 is_stmt 1 view -0
 257               		.cfi_startproc
 258               		.loc 1 147 59 is_stmt 0 view .LVU48
 259 0000 CF93      		push r28
 260               	.LCFI0:
 261               		.cfi_def_cfa_offset 3
 262               		.cfi_offset 28, -2
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 1 */
 266               	.L__stack_usage = 1
 148:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 267               		.loc 1 148 5 is_stmt 1 view .LVU49
 268 0002 0E94 0000 		call matrix_power_up
 269               	.LVL8:
 149:tmk_core/common/avr/suspend.c ****     matrix_scan();
 270               		.loc 1 149 5 view .LVU50
 271 0006 0E94 0000 		call matrix_scan
 272               	.LVL9:
 150:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 273               		.loc 1 150 5 view .LVU51
 274 000a 0E94 0000 		call matrix_power_down
 275               	.LVL10:
 151:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 276               		.loc 1 151 5 view .LVU52
 277               	.LBB18:
 278               		.loc 1 151 10 view .LVU53
 279               		.loc 1 151 18 is_stmt 0 view .LVU54
 280 000e C0E0      		ldi r28,0
 281               	.LVL11:
 282               	.L13:
 152:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 283               		.loc 1 152 9 is_stmt 1 view .LVU55
 284               		.loc 1 152 13 is_stmt 0 view .LVU56
 285 0010 8C2F      		mov r24,r28
 286 0012 0E94 0000 		call matrix_get_row
 287               	.LVL12:
 288               		.loc 1 152 12 view .LVU57
 289 0016 8111      		cpse r24,__zero_reg__
 290 0018 00C0      		rjmp .L14
 151:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 291               		.loc 1 151 43 discriminator 2 view .LVU58
 292 001a CF5F      		subi r28,lo8(-(1))
 293               	.LVL13:
 151:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 294               		.loc 1 151 5 discriminator 2 view .LVU59
 295 001c C031      		cpi r28,lo8(16)
 296 001e 01F4      		brne .L13
 297               	.L11:
 298               	/* epilogue start */
 151:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 299               		.loc 1 151 5 discriminator 2 view .LVU60
 300               	.LBE18:
 153:tmk_core/common/avr/suspend.c ****     }
 154:tmk_core/common/avr/suspend.c ****     return false;
 155:tmk_core/common/avr/suspend.c **** }
 301               		.loc 1 155 1 view .LVU61
 302 0020 CF91      		pop r28
 303               	.LVL14:
 304               		.loc 1 155 1 view .LVU62
 305 0022 0895      		ret
 306               	.LVL15:
 307               	.L14:
 308               	.LBB19:
 152:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 309               		.loc 1 152 39 view .LVU63
 310 0024 81E0      		ldi r24,lo8(1)
 311 0026 00C0      		rjmp .L11
 312               	.LBE19:
 313               		.cfi_endproc
 314               	.LFE117:
 316               		.section	.text.suspend_wakeup_init_user,"ax",@progbits
 317               		.weak	suspend_wakeup_init_user
 319               	suspend_wakeup_init_user:
 320               	.LFB125:
 321               		.cfi_startproc
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 326               	/* epilogue start */
 327 0000 0895      		ret
 328               		.cfi_endproc
 329               	.LFE125:
 331               		.section	.text.suspend_wakeup_init_kb,"ax",@progbits
 332               		.weak	suspend_wakeup_init_kb
 334               	suspend_wakeup_init_kb:
 335               	.LFB119:
 156:tmk_core/common/avr/suspend.c **** 
 157:tmk_core/common/avr/suspend.c **** /** \brief run user level code immediately after wakeup
 158:tmk_core/common/avr/suspend.c ****  *
 159:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 160:tmk_core/common/avr/suspend.c ****  */
 161:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_user(void) {}
 162:tmk_core/common/avr/suspend.c **** 
 163:tmk_core/common/avr/suspend.c **** /** \brief run keyboard level code immediately after wakeup
 164:tmk_core/common/avr/suspend.c ****  *
 165:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 166:tmk_core/common/avr/suspend.c ****  */
 167:tmk_core/common/avr/suspend.c **** __attribute__((weak)) void suspend_wakeup_init_kb(void) { suspend_wakeup_init_user(); }
 336               		.loc 1 167 57 is_stmt 1 view -0
 337               		.cfi_startproc
 338               	/* prologue: function */
 339               	/* frame size = 0 */
 340               	/* stack size = 0 */
 341               	.L__stack_usage = 0
 342               		.loc 1 167 59 view .LVU65
 343 0000 0C94 0000 		jmp suspend_wakeup_init_user
 344               	.LVL16:
 345               		.cfi_endproc
 346               	.LFE119:
 348               		.section	.text.suspend_wakeup_init,"ax",@progbits
 349               	.global	suspend_wakeup_init
 351               	suspend_wakeup_init:
 352               	.LFB120:
 168:tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 169:tmk_core/common/avr/suspend.c ****  *
 170:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 171:tmk_core/common/avr/suspend.c ****  */
 172:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void) {
 353               		.loc 1 172 32 view -0
 354               		.cfi_startproc
 355               	/* prologue: function */
 356               	/* frame size = 0 */
 357               	/* stack size = 0 */
 358               	.L__stack_usage = 0
 173:tmk_core/common/avr/suspend.c ****     // clear keyboard state
 174:tmk_core/common/avr/suspend.c ****     clear_keyboard();
 359               		.loc 1 174 5 view .LVU67
 360 0000 0E94 0000 		call clear_keyboard
 361               	.LVL17:
 175:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 176:tmk_core/common/avr/suspend.c ****     backlight_init();
 177:tmk_core/common/avr/suspend.c **** #endif
 178:tmk_core/common/avr/suspend.c ****     led_set(host_keyboard_leds());
 362               		.loc 1 178 5 view .LVU68
 363 0004 0E94 0000 		call host_keyboard_leds
 364               	.LVL18:
 365 0008 0E94 0000 		call led_set
 366               	.LVL19:
 179:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 180:tmk_core/common/avr/suspend.c ****     is_suspended = false;
 181:tmk_core/common/avr/suspend.c ****     if (rgblight_enabled) {
 182:tmk_core/common/avr/suspend.c **** #    ifdef BOOTLOADER_TEENSY
 183:tmk_core/common/avr/suspend.c ****         wait_ms(10);
 184:tmk_core/common/avr/suspend.c **** #    endif
 185:tmk_core/common/avr/suspend.c ****         rgblight_enable_noeeprom();
 186:tmk_core/common/avr/suspend.c ****     }
 187:tmk_core/common/avr/suspend.c ****     rgblight_timer_enable();
 188:tmk_core/common/avr/suspend.c **** #endif
 189:tmk_core/common/avr/suspend.c ****     suspend_wakeup_init_kb();
 367               		.loc 1 189 5 view .LVU69
 368 000c 0C94 0000 		jmp suspend_wakeup_init_kb
 369               	.LVL20:
 370               		.cfi_endproc
 371               	.LFE120:
 373               		.section	.text.__vector_12,"ax",@progbits
 374               	.global	__vector_12
 376               	__vector_12:
 377               	.LFB121:
 190:tmk_core/common/avr/suspend.c **** }
 191:tmk_core/common/avr/suspend.c **** 
 192:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 193:tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 194:tmk_core/common/avr/suspend.c **** ISR(WDT_vect) {
 378               		.loc 1 194 15 view -0
 379               		.cfi_startproc
 380 0000 1F92 1FB6 		__gcc_isr 1
 380      1F92 1124 
 380      8F93 
 381 000a 9F93      		push r25
 382               	.LCFI1:
 383               		.cfi_def_cfa_offset 3
 384               		.cfi_offset 25, -2
 385 000c AF93      		push r26
 386               	.LCFI2:
 387               		.cfi_def_cfa_offset 4
 388               		.cfi_offset 26, -3
 389 000e BF93      		push r27
 390               	.LCFI3:
 391               		.cfi_def_cfa_offset 5
 392               		.cfi_offset 27, -4
 393               	/* prologue: Signal */
 394               	/* frame size = 0 */
 395               	/* stack size = 3...7 */
 396               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 195:tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 196:tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 397               		.loc 1 196 5 view .LVU71
 398 0010 8091 0000 		lds r24,wdt_timeout
 399 0014 8111      		cpse r24,__zero_reg__
 400 0016 00C0      		rjmp .L19
 197:tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 198:tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 401               		.loc 1 198 13 view .LVU72
 402               		.loc 1 198 25 is_stmt 0 view .LVU73
 403 0018 8091 0000 		lds r24,timer_count
 404 001c 9091 0000 		lds r25,timer_count+1
 405 0020 A091 0000 		lds r26,timer_count+2
 406 0024 B091 0000 		lds r27,timer_count+3
 407 0028 4196      		adiw r24,17
 408 002a A11D      		adc r26,__zero_reg__
 409 002c B11D      		adc r27,__zero_reg__
 410 002e 8093 0000 		sts timer_count,r24
 411 0032 9093 0000 		sts timer_count+1,r25
 412 0036 A093 0000 		sts timer_count+2,r26
 413 003a B093 0000 		sts timer_count+3,r27
 199:tmk_core/common/avr/suspend.c ****             break;
 414               		.loc 1 199 13 is_stmt 1 view .LVU74
 200:tmk_core/common/avr/suspend.c ****         default:;
 415               		.loc 1 200 17 view .LVU75
 416               	.L19:
 417               	/* epilogue start */
 201:tmk_core/common/avr/suspend.c ****     }
 202:tmk_core/common/avr/suspend.c **** }
 418               		.loc 1 202 1 is_stmt 0 view .LVU76
 419 003e BF91      		pop r27
 420 0040 AF91      		pop r26
 421 0042 9F91      		pop r25
 422 0044 8F91 1F90 		__gcc_isr 2
 422      1FBE 1F90 
 423 004c 1895      		reti
 424               		__gcc_isr 0,r24
 425               		.cfi_endproc
 426               	.LFE121:
 428               		.section	.bss.wdt_timeout,"aw",@nobits
 431               	wdt_timeout:
 432 0000 00        		.zero	1
 433               		.text
 434               	.Letext0:
 435               		.file 3 "/usr/avr/include/stdint.h"
 436               		.file 4 "tmk_core/common/action.h"
 437               		.file 5 "tmk_core/common/timer.h"
 438               		.file 6 "tmk_core/common/report.h"
 439               		.file 7 "tmk_core/common/host_driver.h"
 440               		.file 8 "tmk_core/common/host.h"
 441               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 442               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 443               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 444               		.file 12 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 445               		.file 13 "/usr/avr/include/stdio.h"
 446               		.file 14 "tmk_core/protocol/lufa/lufa.h"
 447               		.file 15 "tmk_core/common/led.h"
 448               		.file 16 "tmk_core/common/matrix.h"
 449               		.file 17 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/ccffb5S7.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccffb5S7.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccffb5S7.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccffb5S7.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccffb5S7.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccffb5S7.s:13     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/ccffb5S7.s:67     .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/ccffb5S7.s:67     .text.matrix_power_up:0000000000000000 matrix_power_up.localalias.0
     /tmp/ccffb5S7.s:86     .text.suspend_power_down_user:0000000000000000 suspend_power_down_user
     /tmp/ccffb5S7.s:101    .text.suspend_power_down_kb:0000000000000000 suspend_power_down_kb
     /tmp/ccffb5S7.s:118    .text.suspend_power_down:0000000000000000 suspend_power_down
     /tmp/ccffb5S7.s:431    .bss.wdt_timeout:0000000000000000 wdt_timeout
     /tmp/ccffb5S7.s:239    .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/ccffb5S7.s:254    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/ccffb5S7.s:319    .text.suspend_wakeup_init_user:0000000000000000 suspend_wakeup_init_user
     /tmp/ccffb5S7.s:334    .text.suspend_wakeup_init_kb:0000000000000000 suspend_wakeup_init_kb
     /tmp/ccffb5S7.s:351    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
     /tmp/ccffb5S7.s:376    .text.__vector_12:0000000000000000 __vector_12
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
USB_DeviceState
led_set
matrix_scan
matrix_get_row
clear_keyboard
host_keyboard_leds
timer_count
__do_clear_bss
