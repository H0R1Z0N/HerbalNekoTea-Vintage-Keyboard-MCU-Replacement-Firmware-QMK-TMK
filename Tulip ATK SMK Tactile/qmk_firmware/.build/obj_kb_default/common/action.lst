   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_exec,"ax",@progbits
  12               	.global	action_exec
  14               	action_exec:
  15               	.LFB103:
  16               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  17               		.loc 1 38 1 view -0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 CDB7      		in r28,__SP_L__
  28 0006 DEB7      		in r29,__SP_H__
  29               	.LCFI2:
  30               		.cfi_def_cfa_register 28
  31 0008 2B97      		sbiw r28,11
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 15
  34 000a 0FB6      		in __tmp_reg__,__SREG__
  35 000c F894      		cli
  36 000e DEBF      		out __SP_H__,r29
  37 0010 0FBE      		out __SREG__,__tmp_reg__
  38 0012 CDBF      		out __SP_L__,r28
  39               	/* prologue: function */
  40               	/* frame size = 11 */
  41               	/* stack size = 13 */
  42               	.L__stack_usage = 13
  43 0014 4F83      		std Y+7,r20
  44 0016 5887      		std Y+8,r21
  45 0018 6987      		std Y+9,r22
  46 001a 7A87      		std Y+10,r23
  47 001c 8B87      		std Y+11,r24
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 39 5 view .LVU1
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  49               		.loc 1 41 58 view .LVU2
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  50               		.loc 1 50 5 view .LVU3
  51               		.loc 1 50 17 is_stmt 0 view .LVU4
  52 001e 1E82      		std Y+6,__zero_reg__
  53 0020 85E0      		ldi r24,lo8(5)
  54 0022 FE01      		movw r30,r28
  55 0024 3796      		adiw r30,7
  56 0026 DE01      		movw r26,r28
  57 0028 1196      		adiw r26,1
  58               		0:
  59 002a 0190      		ld r0,Z+
  60 002c 0D92      		st X+,r0
  61 002e 8A95      		dec r24
  62 0030 01F4      		brne 0b
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  63               		.loc 1 53 5 is_stmt 1 view .LVU5
  64 0032 4981      		ldd r20,Y+1
  65 0034 5A81      		ldd r21,Y+2
  66 0036 6B81      		ldd r22,Y+3
  67 0038 7C81      		ldd r23,Y+4
  68 003a 8D81      		ldd r24,Y+5
  69 003c 9E81      		ldd r25,Y+6
  70               	/* epilogue start */
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  71               		.loc 1 60 1 is_stmt 0 view .LVU6
  72 003e 2B96      		adiw r28,11
  73 0040 0FB6      		in __tmp_reg__,__SREG__
  74 0042 F894      		cli
  75 0044 DEBF      		out __SP_H__,r29
  76 0046 0FBE      		out __SREG__,__tmp_reg__
  77 0048 CDBF      		out __SP_L__,r28
  78 004a DF91      		pop r29
  79 004c CF91      		pop r28
  53:./tmk_core/common/action.c **** #else
  80               		.loc 1 53 5 view .LVU7
  81 004e 0C94 0000 		jmp action_tapping_process
  82               	.LVL0:
  83               		.cfi_endproc
  84               	.LFE103:
  86               		.section	.text.process_record_quantum,"ax",@progbits
  87               		.weak	process_record_quantum
  89               	process_record_quantum:
  90               	.LVL1:
  91               	.LFB105:
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  92               		.loc 1 99 50 is_stmt 1 view -0
  93               		.cfi_startproc
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
  98               		.loc 1 100 5 view .LVU9
 101:./tmk_core/common/action.c **** }
  99               		.loc 1 101 1 is_stmt 0 view .LVU10
 100 0000 81E0      		ldi r24,lo8(1)
 101               	.LVL2:
 102               	/* epilogue start */
 103               		.loc 1 101 1 view .LVU11
 104 0002 0895      		ret
 105               		.cfi_endproc
 106               	.LFE105:
 108               		.section	.text.register_code,"ax",@progbits
 109               	.global	register_code
 111               	register_code:
 112               	.LVL3:
 113               	.LFB108:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 114               		.loc 1 547 1 is_stmt 1 view -0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 120               		.loc 1 548 5 view .LVU13
 121               		.loc 1 548 8 is_stmt 0 view .LVU14
 122 0000 8823      		tst r24
 123 0002 01F4      		brne .+2
 124 0004 00C0      		rjmp .L3
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 125               		.loc 1 553 10 is_stmt 1 view .LVU15
 126               		.loc 1 553 13 is_stmt 0 view .LVU16
 127 0006 8238      		cpi r24,lo8(-126)
 128 0008 01F4      		brne .L6
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 129               		.loc 1 556 9 is_stmt 1 view .LVU17
 130               		.loc 1 556 13 is_stmt 0 view .LVU18
 131 000a 0E94 0000 		call host_keyboard_leds
 132               	.LVL4:
 133               		.loc 1 556 12 view .LVU19
 134 000e 81FD      		sbrc r24,1
 135 0010 00C0      		rjmp .L3
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 136               		.loc 1 558 9 is_stmt 1 view .LVU20
 137 0012 89E3      		ldi r24,lo8(57)
 138 0014 0E94 0000 		call add_key
 139               	.LVL5:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 140               		.loc 1 559 9 view .LVU21
 141 0018 0E94 0000 		call send_keyboard_report
 142               	.LVL6:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 143               		.loc 1 560 9 view .LVU22
 144 001c 89E3      		ldi r24,lo8(57)
 145               	.L16:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 146               		.loc 1 570 9 is_stmt 0 view .LVU23
 147 001e 0E94 0000 		call del_key
 148               	.LVL7:
 149               	.L17:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 150               		.loc 1 571 9 is_stmt 1 view .LVU24
 151 0022 0C94 0000 		jmp send_keyboard_report
 152               	.LVL8:
 153               	.L6:
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 154               		.loc 1 564 10 view .LVU25
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 155               		.loc 1 564 13 is_stmt 0 view .LVU26
 156 0026 8338      		cpi r24,lo8(-125)
 157 0028 01F4      		brne .L8
 566:./tmk_core/common/action.c **** #endif
 158               		.loc 1 566 9 is_stmt 1 view .LVU27
 566:./tmk_core/common/action.c **** #endif
 159               		.loc 1 566 13 is_stmt 0 view .LVU28
 160 002a 0E94 0000 		call host_keyboard_leds
 161               	.LVL9:
 566:./tmk_core/common/action.c **** #endif
 162               		.loc 1 566 12 view .LVU29
 163 002e 80FD      		sbrc r24,0
 164 0030 00C0      		rjmp .L3
 568:./tmk_core/common/action.c ****         send_keyboard_report();
 165               		.loc 1 568 9 is_stmt 1 view .LVU30
 166 0032 83E5      		ldi r24,lo8(83)
 167 0034 0E94 0000 		call add_key
 168               	.LVL10:
 569:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 169               		.loc 1 569 9 view .LVU31
 170 0038 0E94 0000 		call send_keyboard_report
 171               	.LVL11:
 570:./tmk_core/common/action.c ****         send_keyboard_report();
 172               		.loc 1 570 9 view .LVU32
 173 003c 83E5      		ldi r24,lo8(83)
 174 003e 00C0      		rjmp .L16
 175               	.LVL12:
 176               	.L8:
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 177               		.loc 1 574 10 view .LVU33
 178               		.loc 1 574 13 is_stmt 0 view .LVU34
 179 0040 8438      		cpi r24,lo8(-124)
 180 0042 01F4      		brne .L9
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 181               		.loc 1 576 9 is_stmt 1 view .LVU35
 182               		.loc 1 576 13 is_stmt 0 view .LVU36
 183 0044 0E94 0000 		call host_keyboard_leds
 184               	.LVL13:
 185               		.loc 1 576 12 view .LVU37
 186 0048 82FD      		sbrc r24,2
 187 004a 00C0      		rjmp .L3
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 188               		.loc 1 578 9 is_stmt 1 view .LVU38
 189 004c 87E4      		ldi r24,lo8(71)
 190 004e 0E94 0000 		call add_key
 191               	.LVL14:
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 192               		.loc 1 579 9 view .LVU39
 193 0052 0E94 0000 		call send_keyboard_report
 194               	.LVL15:
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 195               		.loc 1 580 9 view .LVU40
 196 0056 87E4      		ldi r24,lo8(71)
 197 0058 00C0      		rjmp .L16
 198               	.LVL16:
 199               	.L9:
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 200               		.loc 1 585 10 view .LVU41
 201               		.loc 1 585 13 is_stmt 0 view .LVU42
 202 005a 9CEF      		ldi r25,lo8(-4)
 203 005c 980F      		add r25,r24
 204 005e 913A      		cpi r25,lo8(-95)
 205 0060 00F4      		brsh .L10
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 206               		.loc 1 587 9 is_stmt 1 view .LVU43
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 207               		.loc 1 605 13 view .LVU44
 208 0062 0E94 0000 		call add_key
 209               	.LVL17:
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 210               		.loc 1 606 13 view .LVU45
 211 0066 00C0      		rjmp .L17
 212               	.LVL18:
 213               	.L10:
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 214               		.loc 1 609 10 view .LVU46
 215               		.loc 1 609 13 is_stmt 0 view .LVU47
 216 0068 90E2      		ldi r25,lo8(32)
 217 006a 980F      		add r25,r24
 218 006c 9830      		cpi r25,lo8(8)
 219 006e 00F4      		brsh .L11
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 220               		.loc 1 610 9 is_stmt 1 view .LVU48
 221               		.loc 1 610 18 is_stmt 0 view .LVU49
 222 0070 8770      		andi r24,lo8(7)
 223               	.LVL19:
 224               		.loc 1 610 9 view .LVU50
 225 0072 91E0      		ldi r25,lo8(1)
 226 0074 00C0      		rjmp 2f
 227               		1:
 228 0076 990F      		lsl r25
 229               		2:
 230 0078 8A95      		dec r24
 231 007a 02F4      		brpl 1b
 232 007c 892F      		mov r24,r25
 233 007e 0E94 0000 		call add_mods
 234               	.LVL20:
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 235               		.loc 1 611 9 is_stmt 1 view .LVU51
 236 0082 00C0      		rjmp .L17
 237               	.LVL21:
 238               	.L11:
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 239               		.loc 1 613 10 view .LVU52
 240               		.loc 1 613 13 is_stmt 0 view .LVU53
 241 0084 9BE5      		ldi r25,lo8(91)
 242 0086 980F      		add r25,r24
 243 0088 9330      		cpi r25,lo8(3)
 244 008a 00F4      		brsh .L12
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 245               		.loc 1 614 9 is_stmt 1 view .LVU54
 246 008c 853A      		cpi r24,lo8(-91)
 247 008e 01F0      		breq .L14
 248               		.loc 1 614 26 is_stmt 0 discriminator 1 view .LVU55
 249 0090 863A      		cpi r24,lo8(-90)
 250 0092 01F0      		breq .L15
 251               		.loc 1 614 26 view .LVU56
 252 0094 83E8      		ldi r24,lo8(-125)
 253 0096 90E0      		ldi r25,0
 254               	.LVL22:
 255               	.L13:
 256               		.loc 1 614 9 discriminator 12 view .LVU57
 257 0098 0C94 0000 		jmp host_system_send
 258               	.LVL23:
 259               	.L14:
 260               		.loc 1 614 9 view .LVU58
 261 009c 81E8      		ldi r24,lo8(-127)
 262 009e 90E0      		ldi r25,0
 263               	.LVL24:
 264               		.loc 1 614 9 view .LVU59
 265 00a0 00C0      		rjmp .L13
 266               	.LVL25:
 267               	.L15:
 268               		.loc 1 614 26 view .LVU60
 269 00a2 82E8      		ldi r24,lo8(-126)
 270 00a4 90E0      		ldi r25,0
 271               	.LVL26:
 272               		.loc 1 614 26 view .LVU61
 273 00a6 00C0      		rjmp .L13
 274               	.LVL27:
 275               	.L12:
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 276               		.loc 1 616 10 is_stmt 1 view .LVU62
 277               		.loc 1 616 13 is_stmt 0 view .LVU63
 278 00a8 885A      		subi r24,lo8(-(88))
 279               	.LVL28:
 280               		.loc 1 616 13 view .LVU64
 281 00aa 8531      		cpi r24,lo8(21)
 282 00ac 00F4      		brsh .L3
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 283               		.loc 1 617 9 is_stmt 1 view .LVU65
 284 00ae E82F      		mov r30,r24
 285 00b0 F0E0      		ldi r31,0
 286 00b2 EE0F      		lsl r30
 287 00b4 FF1F      		rol r31
 288               	.LVL29:
 289               		.loc 1 617 9 is_stmt 0 view .LVU66
 290 00b6 E050      		subi r30,lo8(-(CSWTCH.33))
 291 00b8 F040      		sbci r31,hi8(-(CSWTCH.33))
 292 00ba 8081      		ld r24,Z
 293 00bc 9181      		ldd r25,Z+1
 294 00be 0C94 0000 		jmp host_consumer_send
 295               	.LVL30:
 296               	.L3:
 297               	/* epilogue start */
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 298               		.loc 1 619 1 view .LVU67
 299 00c2 0895      		ret
 300               		.cfi_endproc
 301               	.LFE108:
 303               		.section	.text.unregister_code,"ax",@progbits
 304               	.global	unregister_code
 306               	unregister_code:
 307               	.LVL31:
 308               	.LFB109:
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 309               		.loc 1 622 1 is_stmt 1 view -0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 315               		.loc 1 623 5 view .LVU69
 316               		.loc 1 623 8 is_stmt 0 view .LVU70
 317 0000 8823      		tst r24
 318 0002 01F4      		brne .+2
 319 0004 00C0      		rjmp .L18
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 320               		.loc 1 628 10 is_stmt 1 view .LVU71
 321               		.loc 1 628 13 is_stmt 0 view .LVU72
 322 0006 8238      		cpi r24,lo8(-126)
 323 0008 01F4      		brne .L21
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 324               		.loc 1 631 9 is_stmt 1 view .LVU73
 325               		.loc 1 631 15 is_stmt 0 view .LVU74
 326 000a 0E94 0000 		call host_keyboard_leds
 327               	.LVL32:
 328               		.loc 1 631 12 view .LVU75
 329 000e 81FF      		sbrs r24,1
 330 0010 00C0      		rjmp .L18
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 331               		.loc 1 633 9 is_stmt 1 view .LVU76
 332 0012 89E3      		ldi r24,lo8(57)
 333 0014 0E94 0000 		call add_key
 334               	.LVL33:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 335               		.loc 1 634 9 view .LVU77
 336 0018 0E94 0000 		call send_keyboard_report
 337               	.LVL34:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 338               		.loc 1 635 9 view .LVU78
 339 001c 89E3      		ldi r24,lo8(57)
 340               	.L37:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 341               		.loc 1 645 9 is_stmt 0 view .LVU79
 342 001e 0E94 0000 		call del_key
 343               	.LVL35:
 344               	.L38:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 345               		.loc 1 646 9 is_stmt 1 view .LVU80
 346 0022 0C94 0000 		jmp send_keyboard_report
 347               	.LVL36:
 348               	.L21:
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 349               		.loc 1 639 10 view .LVU81
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 350               		.loc 1 639 13 is_stmt 0 view .LVU82
 351 0026 8338      		cpi r24,lo8(-125)
 352 0028 01F4      		brne .L23
 641:./tmk_core/common/action.c **** #endif
 353               		.loc 1 641 9 is_stmt 1 view .LVU83
 641:./tmk_core/common/action.c **** #endif
 354               		.loc 1 641 15 is_stmt 0 view .LVU84
 355 002a 0E94 0000 		call host_keyboard_leds
 356               	.LVL37:
 641:./tmk_core/common/action.c **** #endif
 357               		.loc 1 641 12 view .LVU85
 358 002e 80FF      		sbrs r24,0
 359 0030 00C0      		rjmp .L18
 643:./tmk_core/common/action.c ****         send_keyboard_report();
 360               		.loc 1 643 9 is_stmt 1 view .LVU86
 361 0032 83E5      		ldi r24,lo8(83)
 362 0034 0E94 0000 		call add_key
 363               	.LVL38:
 644:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 364               		.loc 1 644 9 view .LVU87
 365 0038 0E94 0000 		call send_keyboard_report
 366               	.LVL39:
 645:./tmk_core/common/action.c ****         send_keyboard_report();
 367               		.loc 1 645 9 view .LVU88
 368 003c 83E5      		ldi r24,lo8(83)
 369 003e 00C0      		rjmp .L37
 370               	.LVL40:
 371               	.L23:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 372               		.loc 1 649 10 view .LVU89
 373               		.loc 1 649 13 is_stmt 0 view .LVU90
 374 0040 8438      		cpi r24,lo8(-124)
 375 0042 01F4      		brne .L24
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 376               		.loc 1 651 9 is_stmt 1 view .LVU91
 377               		.loc 1 651 15 is_stmt 0 view .LVU92
 378 0044 0E94 0000 		call host_keyboard_leds
 379               	.LVL41:
 380               		.loc 1 651 12 view .LVU93
 381 0048 82FF      		sbrs r24,2
 382 004a 00C0      		rjmp .L18
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 383               		.loc 1 653 9 is_stmt 1 view .LVU94
 384 004c 87E4      		ldi r24,lo8(71)
 385 004e 0E94 0000 		call add_key
 386               	.LVL42:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 387               		.loc 1 654 9 view .LVU95
 388 0052 0E94 0000 		call send_keyboard_report
 389               	.LVL43:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 390               		.loc 1 655 9 view .LVU96
 391 0056 87E4      		ldi r24,lo8(71)
 392 0058 00C0      		rjmp .L37
 393               	.LVL44:
 394               	.L24:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 395               		.loc 1 660 10 view .LVU97
 396               		.loc 1 660 13 is_stmt 0 view .LVU98
 397 005a 9CEF      		ldi r25,lo8(-4)
 398 005c 980F      		add r25,r24
 399 005e 913A      		cpi r25,lo8(-95)
 400 0060 00F0      		brlo .L37
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 401               		.loc 1 664 10 is_stmt 1 view .LVU99
 402               		.loc 1 664 13 is_stmt 0 view .LVU100
 403 0062 90E2      		ldi r25,lo8(32)
 404 0064 980F      		add r25,r24
 405 0066 9830      		cpi r25,lo8(8)
 406 0068 00F4      		brsh .L26
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 407               		.loc 1 665 9 is_stmt 1 view .LVU101
 408               		.loc 1 665 18 is_stmt 0 view .LVU102
 409 006a 8770      		andi r24,lo8(7)
 410               	.LVL45:
 411               		.loc 1 665 9 view .LVU103
 412 006c 91E0      		ldi r25,lo8(1)
 413 006e 00C0      		rjmp 2f
 414               		1:
 415 0070 990F      		lsl r25
 416               		2:
 417 0072 8A95      		dec r24
 418 0074 02F4      		brpl 1b
 419 0076 892F      		mov r24,r25
 420 0078 0E94 0000 		call del_mods
 421               	.LVL46:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 422               		.loc 1 666 9 is_stmt 1 view .LVU104
 423 007c 00C0      		rjmp .L38
 424               	.LVL47:
 425               	.L26:
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 426               		.loc 1 668 10 view .LVU105
 427               		.loc 1 668 13 is_stmt 0 view .LVU106
 428 007e 9BE5      		ldi r25,lo8(91)
 429 0080 980F      		add r25,r24
 430 0082 9330      		cpi r25,lo8(3)
 431 0084 00F4      		brsh .L27
 669:./tmk_core/common/action.c ****         host_system_send(0);
 432               		.loc 1 669 9 is_stmt 1 view .LVU107
 433 0086 90E0      		ldi r25,0
 434 0088 80E0      		ldi r24,0
 435               	.LVL48:
 436               		.loc 1 669 9 is_stmt 0 view .LVU108
 437 008a 0C94 0000 		jmp host_system_send
 438               	.LVL49:
 439               	.L27:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 440               		.loc 1 671 10 is_stmt 1 view .LVU109
 441               		.loc 1 671 13 is_stmt 0 view .LVU110
 442 008e 885A      		subi r24,lo8(-(88))
 443               	.LVL50:
 444               		.loc 1 671 13 view .LVU111
 445 0090 8531      		cpi r24,lo8(21)
 446 0092 00F4      		brsh .L18
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 447               		.loc 1 672 9 is_stmt 1 view .LVU112
 448 0094 90E0      		ldi r25,0
 449 0096 80E0      		ldi r24,0
 450               	.LVL51:
 451               		.loc 1 672 9 is_stmt 0 view .LVU113
 452 0098 0C94 0000 		jmp host_consumer_send
 453               	.LVL52:
 454               	.L18:
 455               	/* epilogue start */
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 456               		.loc 1 674 1 view .LVU114
 457 009c 0895      		ret
 458               		.cfi_endproc
 459               	.LFE109:
 461               		.section	.text.register_mods,"ax",@progbits
 462               	.global	register_mods
 464               	register_mods:
 465               	.LVL53:
 466               	.LFB110:
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 467               		.loc 1 677 1 is_stmt 1 view -0
 468               		.cfi_startproc
 469               	/* prologue: function */
 470               	/* frame size = 0 */
 471               	/* stack size = 0 */
 472               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 473               		.loc 1 678 5 view .LVU116
 474               		.loc 1 678 8 is_stmt 0 view .LVU117
 475 0000 8823      		tst r24
 476 0002 01F0      		breq .L39
 679:./tmk_core/common/action.c ****         add_mods(mods);
 477               		.loc 1 679 9 is_stmt 1 view .LVU118
 478 0004 0E94 0000 		call add_mods
 479               	.LVL54:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 480               		.loc 1 680 9 view .LVU119
 481 0008 0C94 0000 		jmp send_keyboard_report
 482               	.LVL55:
 483               	.L39:
 484               	/* epilogue start */
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 485               		.loc 1 682 1 is_stmt 0 view .LVU120
 486 000c 0895      		ret
 487               		.cfi_endproc
 488               	.LFE110:
 490               		.section	.text.unregister_mods,"ax",@progbits
 491               	.global	unregister_mods
 493               	unregister_mods:
 494               	.LVL56:
 495               	.LFB111:
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 496               		.loc 1 685 1 is_stmt 1 view -0
 497               		.cfi_startproc
 498               	/* prologue: function */
 499               	/* frame size = 0 */
 500               	/* stack size = 0 */
 501               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 502               		.loc 1 686 5 view .LVU122
 503               		.loc 1 686 8 is_stmt 0 view .LVU123
 504 0000 8823      		tst r24
 505 0002 01F0      		breq .L41
 687:./tmk_core/common/action.c ****         del_mods(mods);
 506               		.loc 1 687 9 is_stmt 1 view .LVU124
 507 0004 0E94 0000 		call del_mods
 508               	.LVL57:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 509               		.loc 1 688 9 view .LVU125
 510 0008 0C94 0000 		jmp send_keyboard_report
 511               	.LVL58:
 512               	.L41:
 513               	/* epilogue start */
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 514               		.loc 1 690 1 is_stmt 0 view .LVU126
 515 000c 0895      		ret
 516               		.cfi_endproc
 517               	.LFE111:
 519               		.section	.text.process_action,"ax",@progbits
 520               	.global	process_action
 522               	process_action:
 523               	.LVL59:
 524               	.LFB107:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 525               		.loc 1 122 1 is_stmt 1 view -0
 526               		.cfi_startproc
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 527               		.loc 1 122 1 is_stmt 0 view .LVU128
 528 0000 8F92      		push r8
 529               	.LCFI4:
 530               		.cfi_def_cfa_offset 3
 531               		.cfi_offset 8, -2
 532 0002 9F92      		push r9
 533               	.LCFI5:
 534               		.cfi_def_cfa_offset 4
 535               		.cfi_offset 9, -3
 536 0004 AF92      		push r10
 537               	.LCFI6:
 538               		.cfi_def_cfa_offset 5
 539               		.cfi_offset 10, -4
 540 0006 BF92      		push r11
 541               	.LCFI7:
 542               		.cfi_def_cfa_offset 6
 543               		.cfi_offset 11, -5
 544 0008 DF92      		push r13
 545               	.LCFI8:
 546               		.cfi_def_cfa_offset 7
 547               		.cfi_offset 13, -6
 548 000a EF92      		push r14
 549               	.LCFI9:
 550               		.cfi_def_cfa_offset 8
 551               		.cfi_offset 14, -7
 552 000c FF92      		push r15
 553               	.LCFI10:
 554               		.cfi_def_cfa_offset 9
 555               		.cfi_offset 15, -8
 556 000e 0F93      		push r16
 557               	.LCFI11:
 558               		.cfi_def_cfa_offset 10
 559               		.cfi_offset 16, -9
 560 0010 1F93      		push r17
 561               	.LCFI12:
 562               		.cfi_def_cfa_offset 11
 563               		.cfi_offset 17, -10
 564 0012 CF93      		push r28
 565               	.LCFI13:
 566               		.cfi_def_cfa_offset 12
 567               		.cfi_offset 28, -11
 568 0014 DF93      		push r29
 569               	.LCFI14:
 570               		.cfi_def_cfa_offset 13
 571               		.cfi_offset 29, -12
 572 0016 00D0      		rcall .
 573 0018 00D0      		rcall .
 574 001a 0F92      		push __tmp_reg__
 575               	.LCFI15:
 576               		.cfi_def_cfa_offset 18
 577 001c CDB7      		in r28,__SP_L__
 578 001e DEB7      		in r29,__SP_H__
 579               	.LCFI16:
 580               		.cfi_def_cfa_register 28
 581               	/* prologue: function */
 582               	/* frame size = 5 */
 583               	/* stack size = 16 */
 584               	.L__stack_usage = 16
 585 0020 7C01      		movw r14,r24
 586 0022 6D83      		std Y+5,r22
 587 0024 7983      		std Y+1,r23
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 588               		.loc 1 123 5 is_stmt 1 view .LVU129
 589               	.LVL60:
 124:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 590               		.loc 1 124 5 view .LVU130
 126:./tmk_core/common/action.c **** #endif
 591               		.loc 1 126 5 view .LVU131
 126:./tmk_core/common/action.c **** #endif
 592               		.loc 1 126 36 is_stmt 0 view .LVU132
 593 0026 FC01      		movw r30,r24
 594 0028 0581      		ldd r16,Z+5
 595 002a 0295      		swap r16
 596 002c 0F70      		andi r16,lo8(15)
 597               	.LVL61:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 598               		.loc 1 136 5 is_stmt 1 view .LVU133
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 599               		.loc 1 136 14 is_stmt 0 view .LVU134
 600 002e 1281      		ldd r17,Z+2
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 601               		.loc 1 136 8 view .LVU135
 602 0030 1111      		cpse r17,__zero_reg__
 138:./tmk_core/common/action.c ****     }
 603               		.loc 1 138 9 is_stmt 1 view .LVU136
 604 0032 0E94 0000 		call clear_weak_mods
 605               	.LVL62:
 606               	.L44:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 607               		.loc 1 143 5 view .LVU137
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 608               		.loc 1 143 9 is_stmt 0 view .LVU138
 609 0036 0E94 0000 		call is_oneshot_layer_active
 610               	.LVL63:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 611               		.loc 1 143 9 view .LVU139
 612 003a D82E      		mov r13,r24
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 613               		.loc 1 143 8 view .LVU140
 614 003c 8823      		tst r24
 615 003e 01F0      		breq .L45
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 616               		.loc 1 143 35 discriminator 1 view .LVU141
 617 0040 1123      		tst r17
 618 0042 01F0      		breq .L118
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 619               		.loc 1 143 55 discriminator 2 view .LVU142
 620 0044 8D81      		ldd r24,Y+5
 621 0046 805E      		subi r24,lo8(-(32))
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 622               		.loc 1 143 52 discriminator 2 view .LVU143
 623 0048 8830      		cpi r24,lo8(8)
 624 004a 00F0      		brlo .L118
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 625               		.loc 1 144 9 is_stmt 1 view .LVU144
 626 004c 82E0      		ldi r24,lo8(2)
 627 004e 0E94 0000 		call clear_oneshot_layer_state
 628               	.LVL64:
 145:./tmk_core/common/action.c ****     }
 629               		.loc 1 145 9 view .LVU145
 145:./tmk_core/common/action.c ****     }
 630               		.loc 1 145 31 is_stmt 0 view .LVU146
 631 0052 0E94 0000 		call is_oneshot_layer_active
 632               	.LVL65:
 145:./tmk_core/common/action.c ****     }
 633               		.loc 1 145 9 view .LVU147
 634 0056 91E0      		ldi r25,lo8(1)
 635 0058 D82E      		mov r13,r24
 636 005a D926      		eor r13,r25
 637               	.LVL66:
 638               	.L45:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 639               		.loc 1 149 5 is_stmt 1 view .LVU148
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 640               		.loc 1 149 24 is_stmt 0 view .LVU149
 641 005c E981      		ldd r30,Y+1
 642 005e E295      		swap r30
 643 0060 EF70      		andi r30,lo8(15)
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 644               		.loc 1 149 5 view .LVU150
 645 0062 F0E0      		ldi r31,0
 646 0064 E050      		subi r30,lo8(-(gs(.L48)))
 647 0066 F040      		sbci r31,hi8(-(gs(.L48)))
 648 0068 0C94 0000 		jmp __tablejump2__
 649               		.section	.jumptables.gcc.process_action,"a",@progbits
 650               		.p2align	1
 651               	.L48:
 652 0000 0000      		.word gs(.L55)
 653 0002 0000      		.word gs(.L55)
 654 0004 0000      		.word gs(.L54)
 655 0006 0000      		.word gs(.L54)
 656 0008 0000      		.word gs(.L53)
 657 000a 0000      		.word gs(.L52)
 658 000c 0000      		.word gs(.L46)
 659 000e 0000      		.word gs(.L46)
 660 0010 0000      		.word gs(.L51)
 661 0012 0000      		.word gs(.L46)
 662 0014 0000      		.word gs(.L50)
 663 0016 0000      		.word gs(.L50)
 664 0018 0000      		.word gs(.L49)
 665 001a 0000      		.word gs(.L46)
 666 001c 0000      		.word gs(.L46)
 667 001e 0000      		.word gs(.L47)
 668               		.section	.text.process_action
 669               	.LVL67:
 670               	.L118:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 671               		.loc 1 123 10 view .LVU151
 672 006c D12C      		mov r13,__zero_reg__
 673 006e 00C0      		rjmp .L45
 674               	.LVL68:
 675               	.L55:
 676               	.LBB6:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 677               		.loc 1 154 17 is_stmt 1 view .LVU152
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 678               		.loc 1 154 75 is_stmt 0 view .LVU153
 679 0070 0981      		ldd r16,Y+1
 680               	.LVL69:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 681               		.loc 1 154 75 view .LVU154
 682 0072 0F70      		andi r16,lo8(15)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 683               		.loc 1 154 48 view .LVU155
 684 0074 F981      		ldd r31,Y+1
 685 0076 F07F      		andi r31,lo8(-16)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 686               		.loc 1 154 25 view .LVU156
 687 0078 01F0      		breq .L56
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 688               		.loc 1 154 25 discriminator 2 view .LVU157
 689 007a 0295      		swap r16
 690 007c 007F      		andi r16,lo8(-16)
 691               	.L56:
 692               	.LVL70:
 156:./tmk_core/common/action.c ****                     if (mods) {
 693               		.loc 1 156 17 is_stmt 1 discriminator 4 view .LVU158
 156:./tmk_core/common/action.c ****                     if (mods) {
 694               		.loc 1 156 20 is_stmt 0 discriminator 4 view .LVU159
 695 007e 1123      		tst r17
 696 0080 01F0      		breq .L57
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 697               		.loc 1 157 21 is_stmt 1 view .LVU160
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 698               		.loc 1 157 24 is_stmt 0 view .LVU161
 699 0082 0023      		tst r16
 700 0084 01F0      		breq .L150
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 701               		.loc 1 158 25 is_stmt 1 view .LVU162
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 702               		.loc 1 158 29 is_stmt 0 view .LVU163
 703 0086 8D81      		ldd r24,Y+5
 704 0088 805E      		subi r24,lo8(-(32))
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 705               		.loc 1 158 28 view .LVU164
 706 008a 8830      		cpi r24,lo8(8)
 707 008c 00F0      		brlo .L59
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 708               		.loc 1 158 53 discriminator 1 view .LVU165
 709 008e 2D81      		ldd r18,Y+5
 710 0090 2111      		cpse r18,__zero_reg__
 711 0092 00C0      		rjmp .L60
 712               	.L59:
 162:./tmk_core/common/action.c ****                         } else {
 713               		.loc 1 162 29 is_stmt 1 view .LVU166
 714 0094 802F      		mov r24,r16
 715 0096 0E94 0000 		call add_mods
 716               	.LVL71:
 717               	.L61:
 166:./tmk_core/common/action.c ****                     }
 718               		.loc 1 166 25 view .LVU167
 719 009a 0E94 0000 		call send_keyboard_report
 720               	.LVL72:
 168:./tmk_core/common/action.c ****                 } else {
 721               		.loc 1 168 21 view .LVU168
 722               	.L150:
 168:./tmk_core/common/action.c ****                 } else {
 723               		.loc 1 168 21 is_stmt 0 view .LVU169
 724               	.LBE6:
 419:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 725               		.loc 1 419 75 is_stmt 1 view .LVU170
 420:./tmk_core/common/action.c ****                         } else {
 726               		.loc 1 420 29 view .LVU171
 727 009e 8D81      		ldd r24,Y+5
 728 00a0 0E94 0000 		call register_code
 729               	.LVL73:
 730 00a4 00C0      		rjmp .L46
 731               	.LVL74:
 732               	.L60:
 733               	.LBB7:
 164:./tmk_core/common/action.c ****                         }
 734               		.loc 1 164 29 view .LVU172
 735 00a6 802F      		mov r24,r16
 736 00a8 0E94 0000 		call add_weak_mods
 737               	.LVL75:
 738 00ac 00C0      		rjmp .L61
 739               	.L57:
 170:./tmk_core/common/action.c ****                     if (mods) {
 740               		.loc 1 170 21 view .LVU173
 741 00ae 8D81      		ldd r24,Y+5
 742 00b0 0E94 0000 		call unregister_code
 743               	.LVL76:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 744               		.loc 1 171 21 view .LVU174
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 745               		.loc 1 171 24 is_stmt 0 view .LVU175
 746 00b4 0023      		tst r16
 747 00b6 01F0      		breq .L46
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 748               		.loc 1 172 25 is_stmt 1 view .LVU176
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 749               		.loc 1 172 29 is_stmt 0 view .LVU177
 750 00b8 8D81      		ldd r24,Y+5
 751 00ba 805E      		subi r24,lo8(-(32))
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 752               		.loc 1 172 28 view .LVU178
 753 00bc 8830      		cpi r24,lo8(8)
 754 00be 00F0      		brlo .L63
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 755               		.loc 1 172 53 discriminator 1 view .LVU179
 756 00c0 3D81      		ldd r19,Y+5
 757 00c2 3111      		cpse r19,__zero_reg__
 758 00c4 00C0      		rjmp .L64
 759               	.L63:
 173:./tmk_core/common/action.c ****                         } else {
 760               		.loc 1 173 29 is_stmt 1 view .LVU180
 761 00c6 802F      		mov r24,r16
 762 00c8 0E94 0000 		call del_mods
 763               	.LVL77:
 764               	.L65:
 177:./tmk_core/common/action.c ****                     }
 765               		.loc 1 177 25 view .LVU181
 766 00cc 0E94 0000 		call send_keyboard_report
 767               	.LVL78:
 768               	.L46:
 177:./tmk_core/common/action.c ****                     }
 769               		.loc 1 177 25 is_stmt 0 view .LVU182
 770               	.LBE7:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 771               		.loc 1 531 5 is_stmt 1 view .LVU183
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 772               		.loc 1 531 8 is_stmt 0 view .LVU184
 773 00d0 DD20      		tst r13
 774 00d2 01F4      		brne .+2
 775 00d4 00C0      		rjmp .L43
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 776               		.loc 1 531 33 discriminator 1 view .LVU185
 777 00d6 0E94 0000 		call get_oneshot_layer_state
 778               	.LVL79:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 779               		.loc 1 531 28 discriminator 1 view .LVU186
 780 00da 80FD      		sbrc r24,0
 781 00dc 00C0      		rjmp .L43
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 782               		.loc 1 532 9 is_stmt 1 view .LVU187
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 783               		.loc 1 532 31 is_stmt 0 view .LVU188
 784 00de F701      		movw r30,r14
 785 00e0 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 786               		.loc 1 533 9 is_stmt 1 view .LVU189
 787 00e2 0E94 0000 		call get_oneshot_layer
 788               	.LVL80:
 789 00e6 0E94 0000 		call layer_on
 790               	.LVL81:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 791               		.loc 1 534 9 view .LVU190
 792 00ea C701      		movw r24,r14
 793 00ec 0E94 0000 		call process_record
 794               	.LVL82:
 535:./tmk_core/common/action.c ****     }
 795               		.loc 1 535 9 view .LVU191
 796 00f0 0E94 0000 		call get_oneshot_layer
 797               	.LVL83:
 798               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 799               		.loc 1 538 1 is_stmt 0 view .LVU192
 800 00f4 0F90      		pop __tmp_reg__
 801 00f6 0F90      		pop __tmp_reg__
 802 00f8 0F90      		pop __tmp_reg__
 803 00fa 0F90      		pop __tmp_reg__
 804 00fc 0F90      		pop __tmp_reg__
 805 00fe DF91      		pop r29
 806 0100 CF91      		pop r28
 807 0102 1F91      		pop r17
 808               	.LVL84:
 538:./tmk_core/common/action.c **** 
 809               		.loc 1 538 1 view .LVU193
 810 0104 0F91      		pop r16
 811 0106 FF90      		pop r15
 812 0108 EF90      		pop r14
 813               	.LVL85:
 538:./tmk_core/common/action.c **** 
 814               		.loc 1 538 1 view .LVU194
 815 010a DF90      		pop r13
 816               	.LVL86:
 538:./tmk_core/common/action.c **** 
 817               		.loc 1 538 1 view .LVU195
 818 010c BF90      		pop r11
 819 010e AF90      		pop r10
 820 0110 9F90      		pop r9
 821 0112 8F90      		pop r8
 535:./tmk_core/common/action.c ****     }
 822               		.loc 1 535 9 view .LVU196
 823 0114 0C94 0000 		jmp layer_off
 824               	.LVL87:
 825               	.L64:
 826               	.LBB8:
 175:./tmk_core/common/action.c ****                         }
 827               		.loc 1 175 29 is_stmt 1 view .LVU197
 828 0118 802F      		mov r24,r16
 829 011a 0E94 0000 		call del_weak_mods
 830               	.LVL88:
 831 011e 00C0      		rjmp .L65
 832               	.LVL89:
 833               	.L54:
 175:./tmk_core/common/action.c ****                         }
 834               		.loc 1 175 29 is_stmt 0 view .LVU198
 835               	.LBE8:
 836               	.LBB9:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 837               		.loc 1 186 17 is_stmt 1 view .LVU199
 838               	.LBE9:
 839               	.LBB10:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 840               		.loc 1 154 75 is_stmt 0 view .LVU200
 841 0120 4981      		ldd r20,Y+1
 842 0122 4F70      		andi r20,lo8(15)
 843 0124 B42E      		mov r11,r20
 844               	.LBE10:
 845               	.LBB11:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 846               		.loc 1 186 48 view .LVU201
 847 0126 5981      		ldd r21,Y+1
 848 0128 507F      		andi r21,lo8(-16)
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 849               		.loc 1 186 25 view .LVU202
 850 012a 5032      		cpi r21,lo8(32)
 851 012c 01F0      		breq .L66
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 852               		.loc 1 186 25 discriminator 2 view .LVU203
 853 012e B294      		swap r11
 854 0130 80EF      		ldi r24,lo8(-16)
 855 0132 B822      		and r11,r24
 856               	.L66:
 857               	.LVL90:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 858               		.loc 1 188 17 is_stmt 1 discriminator 4 view .LVU204
 859 0134 8D81      		ldd r24,Y+5
 860 0136 8823      		tst r24
 861 0138 01F0      		breq .L67
 862 013a 8130      		cpi r24,lo8(1)
 863 013c 01F0      		breq .L68
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 864               		.loc 1 243 25 view .LVU205
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 865               		.loc 1 243 28 is_stmt 0 view .LVU206
 866 013e 1123      		tst r17
 867 0140 01F0      		breq .L76
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 868               		.loc 1 244 29 is_stmt 1 view .LVU207
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 869               		.loc 1 244 32 is_stmt 0 view .LVU208
 870 0142 0023      		tst r16
 871 0144 01F0      		breq .L151
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 872               		.loc 1 246 33 is_stmt 1 view .LVU209
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 873               		.loc 1 246 37 is_stmt 0 view .LVU210
 874 0146 F701      		movw r30,r14
 875 0148 8581      		ldd r24,Z+5
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 876               		.loc 1 246 36 view .LVU211
 877 014a 80FF      		sbrs r24,0
 878 014c 00C0      		rjmp .L150
 247:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 879               		.loc 1 247 80 is_stmt 1 view .LVU212
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 880               		.loc 1 249 37 view .LVU213
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 881               		.loc 1 249 55 is_stmt 0 view .LVU214
 882 014e 8F70      		andi r24,lo8(15)
 883 0150 8583      		std Z+5,r24
 884 0152 00C0      		rjmp .L151
 885               	.L67:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 886               		.loc 1 192 25 is_stmt 1 view .LVU215
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 887               		.loc 1 192 28 is_stmt 0 view .LVU216
 888 0154 1123      		tst r17
 889 0156 01F0      		breq .L70
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 890               		.loc 1 193 29 is_stmt 1 view .LVU217
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 891               		.loc 1 193 32 is_stmt 0 view .LVU218
 892 0158 0111      		cpse r16,__zero_reg__
 893 015a 00C0      		rjmp .L71
 894               	.L151:
 250:./tmk_core/common/action.c ****                                 } else
 895               		.loc 1 250 37 is_stmt 1 view .LVU219
 896 015c 8B2D      		mov r24,r11
 897               	.LVL91:
 898               	.L147:
 250:./tmk_core/common/action.c ****                                 } else
 899               		.loc 1 250 37 is_stmt 0 view .LVU220
 900 015e 0E94 0000 		call register_mods
 901               	.LVL92:
 902 0162 00C0      		rjmp .L46
 903               	.LVL93:
 904               	.L71:
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 905               		.loc 1 196 36 is_stmt 1 view .LVU221
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 906               		.loc 1 198 33 is_stmt 0 view .LVU222
 907 0164 8B2D      		mov r24,r11
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 908               		.loc 1 196 39 view .LVU223
 909 0166 0130      		cpi r16,lo8(1)
 910 0168 01F4      		brne .L147
 197:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 911               		.loc 1 197 69 is_stmt 1 view .LVU224
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 912               		.loc 1 198 33 view .LVU225
 913 016a 0E94 0000 		call set_oneshot_mods
 914               	.LVL94:
 915 016e 00C0      		rjmp .L46
 916               	.L70:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 917               		.loc 1 210 29 view .LVU226
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 918               		.loc 1 210 32 is_stmt 0 view .LVU227
 919 0170 0111      		cpse r16,__zero_reg__
 920 0172 00C0      		rjmp .L73
 921               	.L156:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 922               		.loc 1 225 33 is_stmt 1 view .LVU228
 923 0174 0E94 0000 		call clear_oneshot_mods
 924               	.LVL95:
 226:./tmk_core/common/action.c ****                             }
 925               		.loc 1 226 33 view .LVU229
 926               	.L79:
 266:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 927               		.loc 1 266 71 view .LVU230
 267:./tmk_core/common/action.c ****                             }
 928               		.loc 1 267 33 view .LVU231
 929 0178 8B2D      		mov r24,r11
 930               	.LVL96:
 931               	.L149:
 267:./tmk_core/common/action.c ****                             }
 932               		.loc 1 267 33 is_stmt 0 view .LVU232
 933               	.LBE11:
 350:./tmk_core/common/action.c ****                     }
 934               		.loc 1 350 25 view .LVU233
 935 017a 0E94 0000 		call unregister_mods
 936               	.LVL97:
 937 017e 00C0      		rjmp .L46
 938               	.LVL98:
 939               	.L73:
 940               	.LBB12:
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 941               		.loc 1 213 36 is_stmt 1 view .LVU234
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 942               		.loc 1 213 39 is_stmt 0 view .LVU235
 943 0180 0130      		cpi r16,lo8(1)
 944 0182 01F4      		brne .+2
 945 0184 00C0      		rjmp .L46
 946 0186 00C0      		rjmp .L156
 947               	.L68:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 948               		.loc 1 232 25 is_stmt 1 view .LVU236
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 949               		.loc 1 232 28 is_stmt 0 view .LVU237
 950 0188 1123      		tst r17
 951 018a 01F0      		breq .L75
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 952               		.loc 1 233 29 is_stmt 1 view .LVU238
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 953               		.loc 1 233 32 is_stmt 0 view .LVU239
 954 018c 0630      		cpi r16,lo8(6)
 955 018e 00F0      		brlo .+2
 956 0190 00C0      		rjmp .L46
 957 0192 00C0      		rjmp .L151
 958               	.L75:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 959               		.loc 1 237 29 is_stmt 1 view .LVU240
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 960               		.loc 1 237 32 is_stmt 0 view .LVU241
 961 0194 0530      		cpi r16,lo8(5)
 962 0196 00F0      		brlo .+2
 963 0198 00C0      		rjmp .L46
 964 019a 00C0      		rjmp .L79
 965               	.L76:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 966               		.loc 1 262 29 is_stmt 1 view .LVU242
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 967               		.loc 1 262 32 is_stmt 0 view .LVU243
 968 019c 0023      		tst r16
 969 019e 01F0      		breq .L79
 970               	.LVL99:
 971               	.L148:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 972               		.loc 1 262 32 view .LVU244
 973               	.LBE12:
 427:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 974               		.loc 1 427 77 is_stmt 1 view .LVU245
 428:./tmk_core/common/action.c ****                         } else {
 975               		.loc 1 428 29 view .LVU246
 976 01a0 8D81      		ldd r24,Y+5
 977 01a2 0E94 0000 		call unregister_code
 978               	.LVL100:
 979 01a6 00C0      		rjmp .L46
 980               	.L53:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 981               		.loc 1 278 13 view .LVU247
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 982               		.loc 1 278 33 is_stmt 0 view .LVU248
 983 01a8 8981      		ldd r24,Y+1
 984 01aa 8695      		lsr r24
 985 01ac 8695      		lsr r24
 986 01ae 8370      		andi r24,lo8(3)
 987 01b0 01F0      		breq .L80
 988 01b2 8130      		cpi r24,lo8(1)
 989 01b4 01F0      		breq .+2
 990 01b6 00C0      		rjmp .L46
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 991               		.loc 1 287 21 is_stmt 1 view .LVU249
 288:./tmk_core/common/action.c ****                     } else {
 992               		.loc 1 288 25 is_stmt 0 view .LVU250
 993 01b8 8D81      		ldd r24,Y+5
 994 01ba 9981      		ldd r25,Y+1
 995 01bc 9370      		andi r25,lo8(3)
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 996               		.loc 1 287 24 view .LVU251
 997 01be 1111      		cpse r17,__zero_reg__
 998 01c0 00C0      		rjmp .L153
 290:./tmk_core/common/action.c ****                     }
 999               		.loc 1 290 25 is_stmt 1 view .LVU252
 1000 01c2 90E0      		ldi r25,0
 1001 01c4 80E0      		ldi r24,0
 1002               	.L153:
 1003 01c6 0E94 0000 		call host_consumer_send
 1004               	.LVL101:
 1005 01ca 00C0      		rjmp .L46
 1006               	.L80:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1007               		.loc 1 280 21 view .LVU253
 281:./tmk_core/common/action.c ****                     } else {
 1008               		.loc 1 281 25 is_stmt 0 view .LVU254
 1009 01cc 8D81      		ldd r24,Y+5
 1010 01ce 9981      		ldd r25,Y+1
 1011 01d0 9370      		andi r25,lo8(3)
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1012               		.loc 1 280 24 view .LVU255
 1013 01d2 1111      		cpse r17,__zero_reg__
 1014 01d4 00C0      		rjmp .L144
 283:./tmk_core/common/action.c ****                     }
 1015               		.loc 1 283 25 is_stmt 1 view .LVU256
 1016 01d6 90E0      		ldi r25,0
 1017 01d8 80E0      		ldi r24,0
 1018               	.L144:
 1019 01da 0E94 0000 		call host_system_send
 1020               	.LVL102:
 1021 01de 00C0      		rjmp .L46
 1022               	.L52:
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1023               		.loc 1 299 13 view .LVU257
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1024               		.loc 1 300 17 is_stmt 0 view .LVU258
 1025 01e0 8D81      		ldd r24,Y+5
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1026               		.loc 1 299 16 view .LVU259
 1027 01e2 1123      		tst r17
 1028 01e4 01F0      		breq .L84
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1029               		.loc 1 300 17 is_stmt 1 view .LVU260
 1030 01e6 0E94 0000 		call mousekey_on
 1031               	.LVL103:
 301:./tmk_core/common/action.c ****             } else {
 1032               		.loc 1 301 17 view .LVU261
 1033               	.L145:
 304:./tmk_core/common/action.c ****             }
 1034               		.loc 1 304 17 view .LVU262
 1035 01ea 0E94 0000 		call mousekey_send
 1036               	.LVL104:
 1037 01ee 00C0      		rjmp .L46
 1038               	.L84:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1039               		.loc 1 303 17 view .LVU263
 1040 01f0 0E94 0000 		call mousekey_off
 1041               	.LVL105:
 1042 01f4 00C0      		rjmp .L145
 1043               	.L51:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1044               		.loc 1 310 13 view .LVU264
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1045               		.loc 1 310 39 is_stmt 0 view .LVU265
 1046 01f6 8981      		ldd r24,Y+1
 1047 01f8 8370      		andi r24,lo8(3)
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1048               		.loc 1 310 16 view .LVU266
 1049 01fa 01F0      		breq .+2
 1050 01fc 00C0      		rjmp .L85
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1051               		.loc 1 312 17 is_stmt 1 view .LVU267
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1052               		.loc 1 312 20 is_stmt 0 view .LVU268
 1053 01fe 1111      		cpse r17,__zero_reg__
 1054 0200 00C0      		rjmp .L46
 1055               	.LBB13:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1056               		.loc 1 313 21 is_stmt 1 view .LVU269
 1057               	.LVL106:
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1058               		.loc 1 314 21 view .LVU270
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1059               		.loc 1 313 55 is_stmt 0 view .LVU271
 1060 0202 2D81      		ldd r18,Y+5
 1061 0204 2295      		swap r18
 1062 0206 2695      		lsr r18
 1063 0208 2770      		andi r18,lo8(7)
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1064               		.loc 1 313 29 view .LVU272
 1065 020a 220F      		lsl r18
 1066 020c 220F      		lsl r18
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1067               		.loc 1 314 66 view .LVU273
 1068 020e 8D81      		ldd r24,Y+5
 1069 0210 8F70      		andi r24,lo8(15)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1070               		.loc 1 314 38 view .LVU274
 1071 0212 90E0      		ldi r25,0
 1072 0214 B0E0      		ldi r27,0
 1073 0216 A0E0      		ldi r26,0
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1074               		.loc 1 314 30 view .LVU275
 1075 0218 4C01      		movw r8,r24
 1076 021a 5D01      		movw r10,r26
 1077 021c 022E      		mov r0,r18
 1078 021e 00C0      		rjmp 2f
 1079               		1:
 1080 0220 880C      		lsl r8
 1081 0222 991C      		rol r9
 1082 0224 AA1C      		rol r10
 1083 0226 BB1C      		rol r11
 1084               		2:
 1085 0228 0A94      		dec r0
 1086 022a 02F4      		brpl 1b
 1087               	.LVL107:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1088               		.loc 1 315 21 is_stmt 1 view .LVU276
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1089               		.loc 1 315 91 is_stmt 0 view .LVU277
 1090 022c FD81      		ldd r31,Y+5
 1091 022e 60E0      		ldi r22,0
 1092 0230 70E0      		ldi r23,0
 1093 0232 CB01      		movw r24,r22
 1094 0234 F4FF      		sbrs r31,4
 1095 0236 00C0      		rjmp .L86
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1096               		.loc 1 315 82 discriminator 1 view .LVU278
 1097 0238 6FE0      		ldi r22,lo8(15)
 1098 023a 70E0      		ldi r23,0
 1099 023c 80E0      		ldi r24,0
 1100 023e 90E0      		ldi r25,0
 1101 0240 00C0      		rjmp 2f
 1102               		1:
 1103 0242 660F      		lsl r22
 1104 0244 771F      		rol r23
 1105 0246 881F      		rol r24
 1106 0248 991F      		rol r25
 1107               		2:
 1108 024a 2A95      		dec r18
 1109 024c 02F4      		brpl 1b
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1110               		.loc 1 315 91 discriminator 1 view .LVU279
 1111 024e 6095      		com r22
 1112 0250 7095      		com r23
 1113 0252 8095      		com r24
 1114 0254 9095      		com r25
 1115               	.L86:
 1116               	.LVL108:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1117               		.loc 1 316 21 is_stmt 1 discriminator 4 view .LVU280
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1118               		.loc 1 316 47 is_stmt 0 discriminator 4 view .LVU281
 1119 0256 2981      		ldd r18,Y+1
 1120 0258 2695      		lsr r18
 1121 025a 2695      		lsr r18
 1122 025c 2370      		andi r18,lo8(3)
 1123 025e 2D83      		std Y+5,r18
 1124               	.LVL109:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1125               		.loc 1 316 47 discriminator 4 view .LVU282
 1126 0260 2230      		cpi r18,lo8(2)
 1127 0262 01F0      		breq .L87
 1128 0264 2330      		cpi r18,lo8(3)
 1129 0266 01F0      		breq .L88
 1130 0268 9B01      		movw r18,r22
 1131 026a AC01      		movw r20,r24
 1132 026c 2829      		or r18,r8
 1133 026e 3929      		or r19,r9
 1134 0270 4A29      		or r20,r10
 1135 0272 5B29      		or r21,r11
 1136 0274 2983      		std Y+1,r18
 1137 0276 3A83      		std Y+2,r19
 1138 0278 4B83      		std Y+3,r20
 1139 027a 5C83      		std Y+4,r21
 1140               	.LVL110:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1141               		.loc 1 316 47 discriminator 4 view .LVU283
 1142 027c 3D81      		ldd r19,Y+5
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1143               		.loc 1 317 42 view .LVU284
 1144 027e 6981      		ldd r22,Y+1
 1145 0280 7A81      		ldd r23,Y+2
 1146 0282 8B81      		ldd r24,Y+3
 1147 0284 9C81      		ldd r25,Y+4
 1148               	.LVL111:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1149               		.loc 1 317 42 view .LVU285
 1150 0286 3130      		cpi r19,lo8(1)
 1151 0288 01F0      		breq .L154
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1152               		.loc 1 317 42 is_stmt 1 view .LVU286
 1153 028a 0E94 0000 		call default_layer_and
 1154               	.LVL112:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1155               		.loc 1 317 74 view .LVU287
 1156 028e 00C0      		rjmp .L46
 1157               	.LVL113:
 1158               	.L87:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1159               		.loc 1 319 42 view .LVU288
 1160 0290 9B01      		movw r18,r22
 1161 0292 AC01      		movw r20,r24
 1162 0294 2829      		or r18,r8
 1163 0296 3929      		or r19,r9
 1164 0298 4A29      		or r20,r10
 1165 029a 5B29      		or r21,r11
 1166 029c 2983      		std Y+1,r18
 1167 029e 3A83      		std Y+2,r19
 1168 02a0 4B83      		std Y+3,r20
 1169 02a2 5C83      		std Y+4,r21
 1170               	.LVL114:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1171               		.loc 1 319 42 is_stmt 0 view .LVU289
 1172 02a4 CA01      		movw r24,r20
 1173 02a6 B901      		movw r22,r18
 1174               	.LVL115:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1175               		.loc 1 319 42 view .LVU290
 1176 02a8 0E94 0000 		call default_layer_xor
 1177               	.LVL116:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1178               		.loc 1 319 74 is_stmt 1 view .LVU291
 1179 02ac 00C0      		rjmp .L46
 1180               	.LVL117:
 1181               	.L88:
 320:./tmk_core/common/action.c ****                     }
 1182               		.loc 1 320 42 view .LVU292
 1183 02ae 0E94 0000 		call default_layer_and
 1184               	.LVL118:
 320:./tmk_core/common/action.c ****                     }
 1185               		.loc 1 320 67 view .LVU293
 1186 02b2 C501      		movw r24,r10
 1187 02b4 B401      		movw r22,r8
 1188               	.L154:
 1189 02b6 0E94 0000 		call default_layer_or
 1190               	.LVL119:
 320:./tmk_core/common/action.c ****                     }
 1191               		.loc 1 320 91 view .LVU294
 1192 02ba 00C0      		rjmp .L46
 1193               	.LVL120:
 1194               	.L85:
 320:./tmk_core/common/action.c ****                     }
 1195               		.loc 1 320 91 is_stmt 0 view .LVU295
 1196               	.LBE13:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1197               		.loc 1 325 17 is_stmt 1 view .LVU296
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1198               		.loc 1 325 21 is_stmt 0 view .LVU297
 1199 02bc 1123      		tst r17
 1200 02be 01F4      		brne .+2
 1201 02c0 00C0      		rjmp .L90
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1202               		.loc 1 325 20 discriminator 1 view .LVU298
 1203 02c2 3981      		ldd r19,Y+1
 1204 02c4 30FF      		sbrs r19,0
 1205 02c6 00C0      		rjmp .L46
 1206               	.L91:
 1207               	.LBB14:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1208               		.loc 1 327 21 is_stmt 1 view .LVU299
 1209               	.LVL121:
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1210               		.loc 1 328 21 view .LVU300
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1211               		.loc 1 327 55 is_stmt 0 view .LVU301
 1212 02c8 2D81      		ldd r18,Y+5
 1213 02ca 2295      		swap r18
 1214 02cc 2695      		lsr r18
 1215 02ce 2770      		andi r18,lo8(7)
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1216               		.loc 1 327 29 view .LVU302
 1217 02d0 220F      		lsl r18
 1218 02d2 220F      		lsl r18
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1219               		.loc 1 328 66 view .LVU303
 1220 02d4 8D81      		ldd r24,Y+5
 1221 02d6 8F70      		andi r24,lo8(15)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1222               		.loc 1 328 38 view .LVU304
 1223 02d8 90E0      		ldi r25,0
 1224 02da B0E0      		ldi r27,0
 1225 02dc A0E0      		ldi r26,0
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1226               		.loc 1 328 30 view .LVU305
 1227 02de 4C01      		movw r8,r24
 1228 02e0 5D01      		movw r10,r26
 1229 02e2 022E      		mov r0,r18
 1230 02e4 00C0      		rjmp 2f
 1231               		1:
 1232 02e6 880C      		lsl r8
 1233 02e8 991C      		rol r9
 1234 02ea AA1C      		rol r10
 1235 02ec BB1C      		rol r11
 1236               		2:
 1237 02ee 0A94      		dec r0
 1238 02f0 02F4      		brpl 1b
 1239               	.LVL122:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1240               		.loc 1 329 21 is_stmt 1 view .LVU306
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1241               		.loc 1 329 91 is_stmt 0 view .LVU307
 1242 02f2 5D81      		ldd r21,Y+5
 1243 02f4 60E0      		ldi r22,0
 1244 02f6 70E0      		ldi r23,0
 1245 02f8 CB01      		movw r24,r22
 1246 02fa 54FF      		sbrs r21,4
 1247 02fc 00C0      		rjmp .L92
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1248               		.loc 1 329 82 discriminator 1 view .LVU308
 1249 02fe 6FE0      		ldi r22,lo8(15)
 1250 0300 70E0      		ldi r23,0
 1251 0302 80E0      		ldi r24,0
 1252 0304 90E0      		ldi r25,0
 1253 0306 00C0      		rjmp 2f
 1254               		1:
 1255 0308 660F      		lsl r22
 1256 030a 771F      		rol r23
 1257 030c 881F      		rol r24
 1258 030e 991F      		rol r25
 1259               		2:
 1260 0310 2A95      		dec r18
 1261 0312 02F4      		brpl 1b
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1262               		.loc 1 329 91 discriminator 1 view .LVU309
 1263 0314 6095      		com r22
 1264 0316 7095      		com r23
 1265 0318 8095      		com r24
 1266 031a 9095      		com r25
 1267               	.L92:
 1268               	.LVL123:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1269               		.loc 1 330 21 is_stmt 1 discriminator 4 view .LVU310
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1270               		.loc 1 330 47 is_stmt 0 discriminator 4 view .LVU311
 1271 031c E981      		ldd r30,Y+1
 1272 031e E695      		lsr r30
 1273 0320 E695      		lsr r30
 1274 0322 E370      		andi r30,lo8(3)
 1275 0324 ED83      		std Y+5,r30
 1276               	.LVL124:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1277               		.loc 1 330 47 discriminator 4 view .LVU312
 1278 0326 E230      		cpi r30,lo8(2)
 1279 0328 01F0      		breq .L93
 1280 032a E330      		cpi r30,lo8(3)
 1281 032c 01F0      		breq .L94
 1282 032e 9B01      		movw r18,r22
 1283 0330 AC01      		movw r20,r24
 1284 0332 2829      		or r18,r8
 1285 0334 3929      		or r19,r9
 1286 0336 4A29      		or r20,r10
 1287 0338 5B29      		or r21,r11
 1288               	.LVL125:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1289               		.loc 1 330 47 discriminator 4 view .LVU313
 1290 033a 2983      		std Y+1,r18
 1291 033c 3A83      		std Y+2,r19
 1292 033e 4B83      		std Y+3,r20
 1293 0340 5C83      		std Y+4,r21
 1294 0342 E130      		cpi r30,lo8(1)
 1295 0344 01F0      		breq .L95
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1296               		.loc 1 331 42 is_stmt 1 view .LVU314
 1297 0346 CA01      		movw r24,r20
 1298 0348 B901      		movw r22,r18
 1299               	.LVL126:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1300               		.loc 1 331 42 is_stmt 0 view .LVU315
 1301 034a 0E94 0000 		call layer_and
 1302               	.LVL127:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1303               		.loc 1 331 66 is_stmt 1 view .LVU316
 1304 034e 00C0      		rjmp .L46
 1305               	.LVL128:
 1306               	.L90:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1307               		.loc 1 331 66 is_stmt 0 view .LVU317
 1308               	.LBE14:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1309               		.loc 1 325 20 discriminator 2 view .LVU318
 1310 0350 4981      		ldd r20,Y+1
 1311 0352 41FF      		sbrs r20,1
 1312 0354 00C0      		rjmp .L46
 1313 0356 00C0      		rjmp .L91
 1314               	.LVL129:
 1315               	.L95:
 1316               	.LBB15:
 332:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1317               		.loc 1 332 42 is_stmt 1 view .LVU319
 1318 0358 6981      		ldd r22,Y+1
 1319 035a 7A81      		ldd r23,Y+2
 1320 035c 8B81      		ldd r24,Y+3
 1321 035e 9C81      		ldd r25,Y+4
 1322               	.LVL130:
 1323               	.L155:
 334:./tmk_core/common/action.c ****                     }
 1324               		.loc 1 334 59 is_stmt 0 view .LVU320
 1325 0360 0E94 0000 		call layer_or
 1326               	.LVL131:
 334:./tmk_core/common/action.c ****                     }
 1327               		.loc 1 334 75 is_stmt 1 view .LVU321
 1328 0364 00C0      		rjmp .L46
 1329               	.LVL132:
 1330               	.L93:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1331               		.loc 1 333 42 view .LVU322
 1332 0366 9B01      		movw r18,r22
 1333 0368 AC01      		movw r20,r24
 1334 036a 2829      		or r18,r8
 1335 036c 3929      		or r19,r9
 1336 036e 4A29      		or r20,r10
 1337 0370 5B29      		or r21,r11
 1338               	.LVL133:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1339               		.loc 1 333 42 is_stmt 0 view .LVU323
 1340 0372 2983      		std Y+1,r18
 1341 0374 3A83      		std Y+2,r19
 1342 0376 4B83      		std Y+3,r20
 1343 0378 5C83      		std Y+4,r21
 1344 037a CA01      		movw r24,r20
 1345 037c B901      		movw r22,r18
 1346               	.LVL134:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1347               		.loc 1 333 42 view .LVU324
 1348 037e 0E94 0000 		call layer_xor
 1349               	.LVL135:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1350               		.loc 1 333 66 is_stmt 1 view .LVU325
 1351 0382 00C0      		rjmp .L46
 1352               	.LVL136:
 1353               	.L94:
 334:./tmk_core/common/action.c ****                     }
 1354               		.loc 1 334 42 view .LVU326
 1355 0384 0E94 0000 		call layer_and
 1356               	.LVL137:
 334:./tmk_core/common/action.c ****                     }
 1357               		.loc 1 334 59 view .LVU327
 1358 0388 C501      		movw r24,r10
 1359 038a B401      		movw r22,r8
 1360 038c 00C0      		rjmp .L155
 1361               	.LVL138:
 1362               	.L50:
 334:./tmk_core/common/action.c ****                     }
 1363               		.loc 1 334 59 is_stmt 0 view .LVU328
 1364               	.LBE15:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1365               		.loc 1 342 13 is_stmt 1 view .LVU329
 1366 038e 3D81      		ldd r19,Y+5
 1367 0390 323F      		cpi r19,lo8(-14)
 1368 0392 01F4      		brne .+2
 1369 0394 00C0      		rjmp .L96
 1370 0396 00F4      		brsh .L97
 1371 0398 303F      		cpi r19,lo8(-16)
 1372 039a 01F0      		breq .L98
 1373 039c 313F      		cpi r19,lo8(-15)
 1374 039e 01F0      		breq .L99
 1375 03a0 832F      		mov r24,r19
 1376 03a2 805E      		subi r24,lo8(-(32))
 1377 03a4 8031      		cpi r24,lo8(16)
 1378 03a6 00F0      		brlo .L143
 1379               	.L100:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1380               		.loc 1 417 21 view .LVU330
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1381               		.loc 1 417 24 is_stmt 0 view .LVU331
 1382 03a8 1123      		tst r17
 1383 03aa 01F4      		brne .+2
 1384 03ac 00C0      		rjmp .L111
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1385               		.loc 1 418 25 is_stmt 1 view .LVU332
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1386               		.loc 1 418 28 is_stmt 0 view .LVU333
 1387 03ae 0111      		cpse r16,__zero_reg__
 1388 03b0 00C0      		rjmp .L150
 422:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1389               		.loc 1 422 76 is_stmt 1 view .LVU334
 423:./tmk_core/common/action.c ****                         }
 1390               		.loc 1 423 29 view .LVU335
 1391 03b2 8981      		ldd r24,Y+1
 1392 03b4 8F71      		andi r24,lo8(31)
 1393 03b6 00C0      		rjmp .L146
 1394               	.L97:
 1395 03b8 4D81      		ldd r20,Y+5
 1396 03ba 433F      		cpi r20,lo8(-13)
 1397 03bc 01F0      		breq .L102
 1398 03be 443F      		cpi r20,lo8(-12)
 1399 03c0 01F4      		brne .L100
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1400               		.loc 1 403 21 view .LVU336
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1401               		.loc 1 403 24 is_stmt 0 view .LVU337
 1402 03c2 1123      		tst r17
 1403 03c4 01F4      		brne .+2
 1404 03c6 00C0      		rjmp .L110
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1405               		.loc 1 404 25 is_stmt 1 view .LVU338
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1406               		.loc 1 404 50 is_stmt 0 view .LVU339
 1407 03c8 8981      		ldd r24,Y+1
 1408 03ca 8F71      		andi r24,lo8(31)
 1409 03cc 8983      		std Y+1,r24
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1410               		.loc 1 404 25 view .LVU340
 1411 03ce 0E94 0000 		call layer_on
 1412               	.LVL139:
 405:./tmk_core/common/action.c ****                     } else {
 1413               		.loc 1 405 25 is_stmt 1 view .LVU341
 1414 03d2 63E0      		ldi r22,lo8(3)
 1415 03d4 8981      		ldd r24,Y+1
 1416 03d6 0E94 0000 		call set_oneshot_layer
 1417               	.LVL140:
 1418 03da 00C0      		rjmp .L46
 1419               	.L143:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1420               		.loc 1 345 21 view .LVU342
 347:./tmk_core/common/action.c ****                     } else {
 1421               		.loc 1 347 25 is_stmt 0 view .LVU343
 1422 03dc 5D81      		ldd r21,Y+5
 1423 03de 5F70      		andi r21,lo8(15)
 1424 03e0 5D83      		std Y+5,r21
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1425               		.loc 1 346 50 view .LVU344
 1426 03e2 8981      		ldd r24,Y+1
 1427 03e4 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1428               		.loc 1 345 24 view .LVU345
 1429 03e6 1123      		tst r17
 1430 03e8 01F0      		breq .L104
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1431               		.loc 1 346 25 is_stmt 1 view .LVU346
 1432 03ea 0E94 0000 		call layer_on
 1433               	.LVL141:
 347:./tmk_core/common/action.c ****                     } else {
 1434               		.loc 1 347 25 view .LVU347
 1435 03ee 8D81      		ldd r24,Y+5
 1436 03f0 00C0      		rjmp .L147
 1437               	.L104:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1438               		.loc 1 349 25 view .LVU348
 1439 03f2 0E94 0000 		call layer_off
 1440               	.LVL142:
 350:./tmk_core/common/action.c ****                     }
 1441               		.loc 1 350 25 view .LVU349
 1442 03f6 8D81      		ldd r24,Y+5
 1443 03f8 00C0      		rjmp .L149
 1444               	.L98:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1445               		.loc 1 355 21 view .LVU350
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1446               		.loc 1 355 24 is_stmt 0 view .LVU351
 1447 03fa 1123      		tst r17
 1448 03fc 01F0      		breq .L105
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1449               		.loc 1 356 25 is_stmt 1 view .LVU352
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1450               		.loc 1 356 28 is_stmt 0 view .LVU353
 1451 03fe 0530      		cpi r16,lo8(5)
 1452 0400 00F0      		brlo .+2
 1453 0402 00C0      		rjmp .L46
 1454               	.L106:
 357:./tmk_core/common/action.c ****                         }
 1455               		.loc 1 357 29 is_stmt 1 view .LVU354
 1456 0404 8981      		ldd r24,Y+1
 1457 0406 8F71      		andi r24,lo8(31)
 1458 0408 0E94 0000 		call layer_invert
 1459               	.LVL143:
 1460 040c 00C0      		rjmp .L46
 1461               	.L105:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1462               		.loc 1 360 25 view .LVU355
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1463               		.loc 1 360 28 is_stmt 0 view .LVU356
 1464 040e 0630      		cpi r16,lo8(6)
 1465 0410 00F0      		brlo .+2
 1466 0412 00C0      		rjmp .L46
 1467 0414 00C0      		rjmp .L106
 1468               	.L99:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1469               		.loc 1 366 21 is_stmt 1 view .LVU357
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1470               		.loc 1 346 50 is_stmt 0 view .LVU358
 1471 0416 8981      		ldd r24,Y+1
 1472 0418 8F71      		andi r24,lo8(31)
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1473               		.loc 1 366 68 view .LVU359
 1474 041a 1123      		tst r17
 1475 041c 01F0      		breq .L152
 1476               	.L146:
 423:./tmk_core/common/action.c ****                         }
 1477               		.loc 1 423 29 view .LVU360
 1478 041e 0E94 0000 		call layer_on
 1479               	.LVL144:
 1480 0422 00C0      		rjmp .L46
 1481               	.L96:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1482               		.loc 1 370 21 is_stmt 1 view .LVU361
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1483               		.loc 1 346 50 is_stmt 0 view .LVU362
 1484 0424 8981      		ldd r24,Y+1
 1485 0426 8F71      		andi r24,lo8(31)
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1486               		.loc 1 370 69 view .LVU363
 1487 0428 1123      		tst r17
 1488 042a 01F0      		breq .L146
 1489               	.L152:
 431:./tmk_core/common/action.c ****                         }
 1490               		.loc 1 431 29 view .LVU364
 1491 042c 0E94 0000 		call layer_off
 1492               	.LVL145:
 1493 0430 00C0      		rjmp .L46
 1494               	.L102:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1495               		.loc 1 374 21 is_stmt 1 view .LVU365
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1496               		.loc 1 374 70 is_stmt 0 view .LVU366
 1497 0432 1123      		tst r17
 1498 0434 01F0      		breq .L109
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1499               		.loc 1 374 37 discriminator 1 view .LVU367
 1500 0436 8981      		ldd r24,Y+1
 1501 0438 8F71      		andi r24,lo8(31)
 1502 043a 0E94 0000 		call layer_move
 1503               	.LVL146:
 1504 043e 00C0      		rjmp .L46
 1505               	.L109:
 375:./tmk_core/common/action.c ****                     break;
 1506               		.loc 1 375 37 view .LVU368
 1507 0440 0E94 0000 		call layer_clear
 1508               	.LVL147:
 1509 0444 00C0      		rjmp .L46
 1510               	.L110:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1511               		.loc 1 407 25 is_stmt 1 view .LVU369
 1512 0446 81E0      		ldi r24,lo8(1)
 1513 0448 0E94 0000 		call clear_oneshot_layer_state
 1514               	.LVL148:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1515               		.loc 1 408 25 view .LVU370
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1516               		.loc 1 408 28 is_stmt 0 view .LVU371
 1517 044c 0230      		cpi r16,lo8(2)
 1518 044e 00F4      		brsh .+2
 1519 0450 00C0      		rjmp .L46
 409:./tmk_core/common/action.c ****                         }
 1520               		.loc 1 409 29 is_stmt 1 view .LVU372
 1521 0452 82E0      		ldi r24,lo8(2)
 1522 0454 0E94 0000 		call clear_oneshot_layer_state
 1523               	.LVL149:
 1524 0458 00C0      		rjmp .L46
 1525               	.L111:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1526               		.loc 1 426 25 view .LVU373
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1527               		.loc 1 426 28 is_stmt 0 view .LVU374
 1528 045a 0111      		cpse r16,__zero_reg__
 1529 045c 00C0      		rjmp .L148
 430:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1530               		.loc 1 430 79 is_stmt 1 view .LVU375
 431:./tmk_core/common/action.c ****                         }
 1531               		.loc 1 431 29 view .LVU376
 1532 045e 8981      		ldd r24,Y+1
 1533 0460 8F71      		andi r24,lo8(31)
 1534 0462 00C0      		rjmp .L152
 1535               	.L49:
 442:./tmk_core/common/action.c ****             break;
 1536               		.loc 1 442 13 view .LVU377
 442:./tmk_core/common/action.c ****             break;
 1537               		.loc 1 442 83 is_stmt 0 view .LVU378
 1538 0464 4981      		ldd r20,Y+1
 1539 0466 4F70      		andi r20,lo8(15)
 442:./tmk_core/common/action.c ****             break;
 1540               		.loc 1 442 13 view .LVU379
 1541 0468 6D81      		ldd r22,Y+5
 1542 046a C701      		movw r24,r14
 1543 046c 0E94 0000 		call action_get_macro
 1544               	.LVL150:
 1545 0470 0E94 0000 		call action_macro_play
 1546               	.LVL151:
 443:./tmk_core/common/action.c **** #endif
 1547               		.loc 1 443 13 is_stmt 1 view .LVU380
 1548 0474 00C0      		rjmp .L46
 1549               	.L47:
 520:./tmk_core/common/action.c ****             break;
 1550               		.loc 1 520 13 view .LVU381
 520:./tmk_core/common/action.c ****             break;
 1551               		.loc 1 520 64 is_stmt 0 view .LVU382
 1552 0476 4981      		ldd r20,Y+1
 1553 0478 4F70      		andi r20,lo8(15)
 520:./tmk_core/common/action.c ****             break;
 1554               		.loc 1 520 13 view .LVU383
 1555 047a 6D81      		ldd r22,Y+5
 1556 047c C701      		movw r24,r14
 1557 047e 0E94 0000 		call action_function
 1558               	.LVL152:
 521:./tmk_core/common/action.c **** #endif
 1559               		.loc 1 521 13 is_stmt 1 view .LVU384
 1560 0482 00C0      		rjmp .L46
 1561               	.LVL153:
 1562               	.L43:
 1563               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1564               		.loc 1 538 1 is_stmt 0 view .LVU385
 1565 0484 0F90      		pop __tmp_reg__
 1566 0486 0F90      		pop __tmp_reg__
 1567 0488 0F90      		pop __tmp_reg__
 1568 048a 0F90      		pop __tmp_reg__
 1569 048c 0F90      		pop __tmp_reg__
 1570 048e DF91      		pop r29
 1571 0490 CF91      		pop r28
 1572 0492 1F91      		pop r17
 1573               	.LVL154:
 538:./tmk_core/common/action.c **** 
 1574               		.loc 1 538 1 view .LVU386
 1575 0494 0F91      		pop r16
 1576 0496 FF90      		pop r15
 1577 0498 EF90      		pop r14
 1578               	.LVL155:
 538:./tmk_core/common/action.c **** 
 1579               		.loc 1 538 1 view .LVU387
 1580 049a DF90      		pop r13
 1581               	.LVL156:
 538:./tmk_core/common/action.c **** 
 1582               		.loc 1 538 1 view .LVU388
 1583 049c BF90      		pop r11
 1584 049e AF90      		pop r10
 1585 04a0 9F90      		pop r9
 1586 04a2 8F90      		pop r8
 1587 04a4 0895      		ret
 1588               		.cfi_endproc
 1589               	.LFE107:
 1591               		.section	.text.process_record,"ax",@progbits
 1592               	.global	process_record
 1594               	process_record:
 1595               	.LVL157:
 1596               	.LFB106:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1597               		.loc 1 104 1 is_stmt 1 view -0
 1598               		.cfi_startproc
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1599               		.loc 1 104 1 is_stmt 0 view .LVU390
 1600 0000 0F93      		push r16
 1601               	.LCFI17:
 1602               		.cfi_def_cfa_offset 3
 1603               		.cfi_offset 16, -2
 1604 0002 1F93      		push r17
 1605               	.LCFI18:
 1606               		.cfi_def_cfa_offset 4
 1607               		.cfi_offset 17, -3
 1608 0004 CF93      		push r28
 1609               	.LCFI19:
 1610               		.cfi_def_cfa_offset 5
 1611               		.cfi_offset 28, -4
 1612 0006 DF93      		push r29
 1613               	.LCFI20:
 1614               		.cfi_def_cfa_offset 6
 1615               		.cfi_offset 29, -5
 1616               	/* prologue: function */
 1617               	/* frame size = 0 */
 1618               	/* stack size = 4 */
 1619               	.L__stack_usage = 4
 1620 0008 EC01      		movw r28,r24
 105:./tmk_core/common/action.c **** 
 1621               		.loc 1 105 5 is_stmt 1 view .LVU391
 1622 000a 9881      		ld r25,Y
 1623               	.LVL158:
 105:./tmk_core/common/action.c **** 
 1624               		.loc 1 105 5 is_stmt 0 view .LVU392
 1625 000c 8981      		ldd r24,Y+1
 1626               	.LVL159:
 1627               	.LBB16:
 1628               	.LBI16:
 1629               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1630               		.loc 2 49 20 is_stmt 1 view .LVU393
 1631               	.LBB17:
 1632               		.loc 2 49 51 view .LVU394
 1633               		.loc 2 49 74 is_stmt 0 view .LVU395
 1634 000e 2B81      		ldd r18,Y+3
 1635 0010 3C81      		ldd r19,Y+4
 1636 0012 232B      		or r18,r19
 1637 0014 01F0      		breq .L162
 1638 0016 8923      		and r24,r25
 1639               	.LVL160:
 1640               		.loc 2 49 74 view .LVU396
 1641 0018 8F3F      		cpi r24,lo8(-1)
 1642 001a 01F4      		brne .L169
 1643               	.LVL161:
 1644               	.L162:
 1645               	/* epilogue start */
 1646               		.loc 2 49 74 view .LVU397
 1647               	.LBE17:
 1648               	.LBE16:
 119:./tmk_core/common/action.c **** 
 1649               		.loc 1 119 1 view .LVU398
 1650 001c DF91      		pop r29
 1651 001e CF91      		pop r28
 1652               	.LVL162:
 119:./tmk_core/common/action.c **** 
 1653               		.loc 1 119 1 view .LVU399
 1654 0020 1F91      		pop r17
 1655 0022 0F91      		pop r16
 1656 0024 0895      		ret
 1657               	.LVL163:
 1658               	.L169:
 107:./tmk_core/common/action.c ****         return;
 1659               		.loc 1 107 5 is_stmt 1 view .LVU400
 107:./tmk_core/common/action.c ****         return;
 1660               		.loc 1 107 9 is_stmt 0 view .LVU401
 1661 0026 CE01      		movw r24,r28
 1662 0028 0E94 0000 		call process_record_quantum
 1663               	.LVL164:
 107:./tmk_core/common/action.c ****         return;
 1664               		.loc 1 107 7 view .LVU402
 1665 002c 8823      		tst r24
 1666 002e 01F0      		breq .L162
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1667               		.loc 1 110 5 is_stmt 1 view .LVU403
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1668               		.loc 1 110 23 is_stmt 0 view .LVU404
 1669 0030 6881      		ld r22,Y
 1670 0032 7981      		ldd r23,Y+1
 1671 0034 8A81      		ldd r24,Y+2
 1672 0036 0E94 0000 		call store_or_get_action
 1673               	.LVL165:
 1674 003a 8C01      		movw r16,r24
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1675               		.loc 1 111 23 is_stmt 1 view .LVU405
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1676               		.loc 1 111 25 view .LVU406
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1677               		.loc 1 113 29 view .LVU407
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1678               		.loc 1 113 31 view .LVU408
 1679 003c 0E94 0000 		call layer_debug
 1680               	.LVL166:
 114:./tmk_core/common/action.c **** #endif
 1681               		.loc 1 114 37 view .LVU409
 114:./tmk_core/common/action.c **** #endif
 1682               		.loc 1 114 39 view .LVU410
 1683 0040 0E94 0000 		call default_layer_debug
 1684               	.LVL167:
 116:./tmk_core/common/action.c **** 
 1685               		.loc 1 116 15 view .LVU411
 118:./tmk_core/common/action.c **** }
 1686               		.loc 1 118 5 view .LVU412
 1687 0044 B801      		movw r22,r16
 1688 0046 CE01      		movw r24,r28
 1689               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1690               		.loc 1 119 1 is_stmt 0 view .LVU413
 1691 0048 DF91      		pop r29
 1692 004a CF91      		pop r28
 1693               	.LVL168:
 119:./tmk_core/common/action.c **** 
 1694               		.loc 1 119 1 view .LVU414
 1695 004c 1F91      		pop r17
 1696 004e 0F91      		pop r16
 118:./tmk_core/common/action.c **** }
 1697               		.loc 1 118 5 view .LVU415
 1698 0050 0C94 0000 		jmp process_action
 1699               	.LVL169:
 118:./tmk_core/common/action.c **** }
 1700               		.loc 1 118 5 view .LVU416
 1701               		.cfi_endproc
 1702               	.LFE106:
 1704               		.section	.text.process_record_nocache,"ax",@progbits
 1705               	.global	process_record_nocache
 1707               	process_record_nocache:
 1708               	.LVL170:
 1709               	.LFB104:
  86:./tmk_core/common/action.c ****     disable_action_cache = true;
 1710               		.loc 1 86 1 is_stmt 1 view -0
 1711               		.cfi_startproc
 1712               	/* prologue: function */
 1713               	/* frame size = 0 */
 1714               	/* stack size = 0 */
 1715               	.L__stack_usage = 0
  87:./tmk_core/common/action.c ****     process_record(record);
 1716               		.loc 1 87 5 view .LVU418
  87:./tmk_core/common/action.c ****     process_record(record);
 1717               		.loc 1 87 26 is_stmt 0 view .LVU419
 1718 0000 21E0      		ldi r18,lo8(1)
 1719 0002 2093 0000 		sts disable_action_cache,r18
  88:./tmk_core/common/action.c ****     disable_action_cache = false;
 1720               		.loc 1 88 5 is_stmt 1 view .LVU420
 1721 0006 0E94 0000 		call process_record
 1722               	.LVL171:
  89:./tmk_core/common/action.c **** }
 1723               		.loc 1 89 5 view .LVU421
  89:./tmk_core/common/action.c **** }
 1724               		.loc 1 89 26 is_stmt 0 view .LVU422
 1725 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1726               	/* epilogue start */
  90:./tmk_core/common/action.c **** #else
 1727               		.loc 1 90 1 view .LVU423
 1728 000e 0895      		ret
 1729               		.cfi_endproc
 1730               	.LFE104:
 1732               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1733               	.global	clear_keyboard_but_mods
 1735               	clear_keyboard_but_mods:
 1736               	.LFB113:
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1737               		.loc 1 699 1 is_stmt 1 view -0
 1738               		.cfi_startproc
 1739               	/* prologue: function */
 1740               	/* frame size = 0 */
 1741               	/* stack size = 0 */
 1742               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1743               		.loc 1 700 5 view .LVU425
 1744 0000 0E94 0000 		call clear_weak_mods
 1745               	.LVL172:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1746               		.loc 1 701 5 view .LVU426
 1747 0004 0E94 0000 		call clear_macro_mods
 1748               	.LVL173:
 702:./tmk_core/common/action.c ****     clear_keys();
 1749               		.loc 1 702 5 view .LVU427
 1750 0008 0E94 0000 		call clear_keys
 1751               	.LVL174:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1752               		.loc 1 703 5 view .LVU428
 1753 000c 0E94 0000 		call send_keyboard_report
 1754               	.LVL175:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 1755               		.loc 1 705 5 view .LVU429
 1756 0010 0E94 0000 		call mousekey_clear
 1757               	.LVL176:
 706:./tmk_core/common/action.c ****     mousekey_send();
 1758               		.loc 1 706 5 view .LVU430
 1759 0014 0E94 0000 		call mousekey_send
 1760               	.LVL177:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 1761               		.loc 1 709 5 view .LVU431
 1762 0018 90E0      		ldi r25,0
 1763 001a 80E0      		ldi r24,0
 1764 001c 0E94 0000 		call host_system_send
 1765               	.LVL178:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 1766               		.loc 1 710 5 view .LVU432
 1767 0020 90E0      		ldi r25,0
 1768 0022 80E0      		ldi r24,0
 1769 0024 0C94 0000 		jmp host_consumer_send
 1770               	.LVL179:
 1771               		.cfi_endproc
 1772               	.LFE113:
 1774               		.section	.text.clear_keyboard,"ax",@progbits
 1775               	.global	clear_keyboard
 1777               	clear_keyboard:
 1778               	.LFB112:
 693:./tmk_core/common/action.c ****     clear_mods();
 1779               		.loc 1 693 1 view -0
 1780               		.cfi_startproc
 1781               	/* prologue: function */
 1782               	/* frame size = 0 */
 1783               	/* stack size = 0 */
 1784               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1785               		.loc 1 694 5 view .LVU434
 1786 0000 0E94 0000 		call clear_mods
 1787               	.LVL180:
 695:./tmk_core/common/action.c **** }
 1788               		.loc 1 695 5 view .LVU435
 1789 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1790               	.LVL181:
 1791               		.cfi_endproc
 1792               	.LFE112:
 1794               		.section	.text.is_tap_key,"ax",@progbits
 1795               	.global	is_tap_key
 1797               	is_tap_key:
 1798               	.LVL182:
 1799               	.LFB114:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 1800               		.loc 1 715 1 view -0
 1801               		.cfi_startproc
 1802               	/* prologue: function */
 1803               	/* frame size = 0 */
 1804               	/* stack size = 0 */
 1805               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1806               		.loc 1 716 5 view .LVU437
 1807               		.loc 1 716 23 is_stmt 0 view .LVU438
 1808 0000 0E94 0000 		call layer_switch_get_action
 1809               	.LVL183:
 1810               		.loc 1 716 23 view .LVU439
 1811 0004 282F      		mov r18,r24
 1812               	.LVL184:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1813               		.loc 1 718 5 is_stmt 1 view .LVU440
 1814               		.loc 1 718 24 is_stmt 0 view .LVU441
 1815 0006 892F      		mov r24,r25
 1816 0008 8295      		swap r24
 1817 000a 8F70      		andi r24,lo8(15)
 1818               		.loc 1 718 5 view .LVU442
 1819 000c 903C      		cpi r25,lo8(-64)
 1820 000e 00F4      		brsh .L174
 1821 0010 8A30      		cpi r24,lo8(10)
 1822 0012 00F4      		brsh .L175
 1823 0014 8430      		cpi r24,lo8(4)
 1824 0016 00F4      		brsh .L176
 1825 0018 8230      		cpi r24,lo8(2)
 1826 001a 00F4      		brsh .L175
 1827               	.L201:
 1828 001c 80E0      		ldi r24,0
 1829 001e 0895      		ret
 1830               	.L176:
 1831 0020 8630      		cpi r24,lo8(6)
 1832 0022 01F4      		brne .L201
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 1833               		.loc 1 731 13 is_stmt 1 view .LVU443
 727:./tmk_core/common/action.c ****             }
 1834               		.loc 1 727 28 is_stmt 0 view .LVU444
 1835 0024 81E0      		ldi r24,lo8(1)
 1836 0026 203E      		cpi r18,lo8(-32)
 1837 0028 00F0      		brlo .L177
 1838 002a 213F      		cpi r18,lo8(-15)
 1839 002c 01F4      		brne .L201
 1840 002e 00C0      		rjmp .L177
 1841               	.L174:
 718:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 1842               		.loc 1 718 5 view .LVU445
 1843 0030 8C30      		cpi r24,lo8(12)
 1844 0032 01F0      		breq .L179
 1845 0034 8F30      		cpi r24,lo8(15)
 1846 0036 01F4      		brne .L201
 1847               	.L179:
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1848               		.loc 1 739 13 is_stmt 1 view .LVU446
 1849               		.loc 1 739 16 is_stmt 0 view .LVU447
 1850 0038 93FB      		bst r25,3
 1851 003a 8827      		clr r24
 1852 003c 80F9      		bld r24,0
 1853 003e 0895      		ret
 1854               	.L175:
 723:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 1855               		.loc 1 723 13 is_stmt 1 view .LVU448
 1856 0040 81E0      		ldi r24,lo8(1)
 1857 0042 203F      		cpi r18,lo8(-16)
 1858 0044 01F0      		breq .L184
 1859 0046 00F4      		brsh .L180
 1860 0048 203E      		cpi r18,lo8(-32)
 1861 004a 00F4      		brsh .L201
 1862               	.L177:
 1863               	.LVL185:
 1864               	/* epilogue start */
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 743:./tmk_core/common/action.c **** }
 1865               		.loc 1 743 1 is_stmt 0 view .LVU449
 1866 004c 0895      		ret
 1867               	.LVL186:
 1868               	.L180:
 1869               		.loc 1 743 1 view .LVU450
 1870 004e 243F      		cpi r18,lo8(-12)
 1871 0050 01F4      		brne .L201
 1872 0052 00C0      		rjmp .L177
 1873               	.L184:
 1874 0054 0895      		ret
 1875               		.cfi_endproc
 1876               	.LFE114:
 1878               		.section	.text.debug_event,"ax",@progbits
 1879               	.global	debug_event
 1881               	debug_event:
 1882               	.LFB115:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 1883               		.loc 1 750 1 is_stmt 1 view -0
 1884               		.cfi_startproc
 1885 0000 CF93      		push r28
 1886               	.LCFI21:
 1887               		.cfi_def_cfa_offset 3
 1888               		.cfi_offset 28, -2
 1889 0002 DF93      		push r29
 1890               	.LCFI22:
 1891               		.cfi_def_cfa_offset 4
 1892               		.cfi_offset 29, -3
 1893 0004 00D0      		rcall .
 1894 0006 00D0      		rcall .
 1895 0008 0F92      		push __tmp_reg__
 1896               	.LCFI23:
 1897               		.cfi_def_cfa_offset 9
 1898 000a CDB7      		in r28,__SP_L__
 1899 000c DEB7      		in r29,__SP_H__
 1900               	.LCFI24:
 1901               		.cfi_def_cfa_register 28
 1902               	/* prologue: function */
 1903               	/* frame size = 5 */
 1904               	/* stack size = 7 */
 1905               	.L__stack_usage = 7
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 1906               		.loc 1 751 103 view .LVU452
 1907               	/* epilogue start */
 752:./tmk_core/common/action.c **** }
 1908               		.loc 1 752 1 is_stmt 0 view .LVU453
 1909 000e 0F90      		pop __tmp_reg__
 1910 0010 0F90      		pop __tmp_reg__
 1911 0012 0F90      		pop __tmp_reg__
 1912 0014 0F90      		pop __tmp_reg__
 1913 0016 0F90      		pop __tmp_reg__
 1914 0018 DF91      		pop r29
 1915 001a CF91      		pop r28
 1916 001c 0895      		ret
 1917               		.cfi_endproc
 1918               	.LFE115:
 1920               		.section	.text.debug_record,"ax",@progbits
 1921               	.global	debug_record
 1923               	debug_record:
 1924               	.LFB116:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 1925               		.loc 1 755 1 is_stmt 1 view -0
 1926               		.cfi_startproc
 1927 0000 CF93      		push r28
 1928               	.LCFI25:
 1929               		.cfi_def_cfa_offset 3
 1930               		.cfi_offset 28, -2
 1931 0002 DF93      		push r29
 1932               	.LCFI26:
 1933               		.cfi_def_cfa_offset 4
 1934               		.cfi_offset 29, -3
 1935 0004 00D0      		rcall .
 1936 0006 00D0      		rcall .
 1937 0008 00D0      		rcall .
 1938               	.LCFI27:
 1939               		.cfi_def_cfa_offset 10
 1940 000a CDB7      		in r28,__SP_L__
 1941 000c DEB7      		in r29,__SP_H__
 1942               	.LCFI28:
 1943               		.cfi_def_cfa_register 28
 1944               	/* prologue: function */
 1945               	/* frame size = 6 */
 1946               	/* stack size = 8 */
 1947               	.L__stack_usage = 8
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 1948               		.loc 1 756 5 view .LVU455
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 1949               		.loc 1 758 77 view .LVU456
 1950               	/* epilogue start */
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 1951               		.loc 1 760 1 is_stmt 0 view .LVU457
 1952 000e 2696      		adiw r28,6
 1953 0010 0FB6      		in __tmp_reg__,__SREG__
 1954 0012 F894      		cli
 1955 0014 DEBF      		out __SP_H__,r29
 1956 0016 0FBE      		out __SREG__,__tmp_reg__
 1957 0018 CDBF      		out __SP_L__,r28
 1958 001a DF91      		pop r29
 1959 001c CF91      		pop r28
 1960 001e 0895      		ret
 1961               		.cfi_endproc
 1962               	.LFE116:
 1964               		.section	.text.debug_action,"ax",@progbits
 1965               	.global	debug_action
 1967               	debug_action:
 1968               	.LVL187:
 1969               	.LFB117:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 1970               		.loc 1 763 1 is_stmt 1 view -0
 1971               		.cfi_startproc
 1972               	/* prologue: function */
 1973               	/* frame size = 0 */
 1974               	/* stack size = 0 */
 1975               	.L__stack_usage = 0
 764:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1976               		.loc 1 764 5 view .LVU459
 765:./tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 766:./tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 767:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 768:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 769:./tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 770:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 771:./tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 772:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 773:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 774:./tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 775:./tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 776:./tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 777:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
 778:./tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 779:./tmk_core/common/action.c ****     }
 780:./tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 1977               		.loc 1 780 71 view .LVU460
 1978               	/* epilogue start */
 781:./tmk_core/common/action.c **** }
 1979               		.loc 1 781 1 is_stmt 0 view .LVU461
 1980 0000 0895      		ret
 1981               		.cfi_endproc
 1982               	.LFE117:
 1984               		.section	.rodata.CSWTCH.33,"a"
 1987               	CSWTCH.33:
 1988 0000 E200      		.word	226
 1989 0002 E900      		.word	233
 1990 0004 EA00      		.word	234
 1991 0006 B500      		.word	181
 1992 0008 B600      		.word	182
 1993 000a B700      		.word	183
 1994 000c CD00      		.word	205
 1995 000e 8301      		.word	387
 1996 0010 CC00      		.word	204
 1997 0012 8A01      		.word	394
 1998 0014 9201      		.word	402
 1999 0016 9401      		.word	404
 2000 0018 2102      		.word	545
 2001 001a 2302      		.word	547
 2002 001c 2402      		.word	548
 2003 001e 2502      		.word	549
 2004 0020 2602      		.word	550
 2005 0022 2702      		.word	551
 2006 0024 2A02      		.word	554
 2007 0026 B300      		.word	179
 2008 0028 B400      		.word	180
 2009               	.global	disable_action_cache
 2010               		.section	.bss.disable_action_cache,"aw",@nobits
 2013               	disable_action_cache:
 2014 0000 00        		.zero	1
 2015               		.text
 2016               	.Letext0:
 2017               		.file 3 "/usr/avr/include/stdint.h"
 2018               		.file 4 "./tmk_core/common/keycode.h"
 2019               		.file 5 "./tmk_core/common/action_code.h"
 2020               		.file 6 "./tmk_core/common/action_macro.h"
 2021               		.file 7 "./tmk_core/common/action.h"
 2022               		.file 8 "./tmk_core/common/action_util.h"
 2023               		.file 9 "./tmk_core/common/mousekey.h"
 2024               		.file 10 "./tmk_core/common/host.h"
 2025               		.file 11 "./tmk_core/common/action_layer.h"
 2026               		.file 12 "./tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/cc2G8Pvz.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc2G8Pvz.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc2G8Pvz.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc2G8Pvz.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc2G8Pvz.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc2G8Pvz.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc2G8Pvz.s:14     .text.action_exec:0000000000000000 action_exec
     /tmp/cc2G8Pvz.s:89     .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/cc2G8Pvz.s:111    .text.register_code:0000000000000000 register_code
     /tmp/cc2G8Pvz.s:1987   .rodata.CSWTCH.33:0000000000000000 CSWTCH.33
     /tmp/cc2G8Pvz.s:306    .text.unregister_code:0000000000000000 unregister_code
     /tmp/cc2G8Pvz.s:464    .text.register_mods:0000000000000000 register_mods
     /tmp/cc2G8Pvz.s:493    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/cc2G8Pvz.s:522    .text.process_action:0000000000000000 process_action
     /tmp/cc2G8Pvz.s:1594   .text.process_record:0000000000000000 process_record
     /tmp/cc2G8Pvz.s:1707   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/cc2G8Pvz.s:2013   .bss.disable_action_cache:0000000000000000 disable_action_cache
     /tmp/cc2G8Pvz.s:1735   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/cc2G8Pvz.s:1777   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/cc2G8Pvz.s:1797   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/cc2G8Pvz.s:1881   .text.debug_event:0000000000000000 debug_event
     /tmp/cc2G8Pvz.s:1923   .text.debug_record:0000000000000000 debug_record
     /tmp/cc2G8Pvz.s:1967   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_or
layer_xor
set_oneshot_layer
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_copy_data
__do_clear_bss
