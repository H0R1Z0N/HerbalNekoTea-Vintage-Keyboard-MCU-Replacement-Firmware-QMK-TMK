   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_exec,"ax",@progbits
  12               	.global	action_exec
  14               	action_exec:
  15               	.LFB103:
  16               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  17               		.loc 1 38 1 view -0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 CDB7      		in r28,__SP_L__
  28 0006 DEB7      		in r29,__SP_H__
  29               	.LCFI2:
  30               		.cfi_def_cfa_register 28
  31 0008 2B97      		sbiw r28,11
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 15
  34 000a 0FB6      		in __tmp_reg__,__SREG__
  35 000c F894      		cli
  36 000e DEBF      		out __SP_H__,r29
  37 0010 0FBE      		out __SREG__,__tmp_reg__
  38 0012 CDBF      		out __SP_L__,r28
  39               	/* prologue: function */
  40               	/* frame size = 11 */
  41               	/* stack size = 13 */
  42               	.L__stack_usage = 13
  43 0014 4F83      		std Y+7,r20
  44 0016 5887      		std Y+8,r21
  45 0018 6987      		std Y+9,r22
  46 001a 7A87      		std Y+10,r23
  47 001c 8B87      		std Y+11,r24
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  48               		.loc 1 39 5 view .LVU1
  49               	.LVL0:
  50               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  51               		.loc 2 49 51 view .LVU2
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  52               		.loc 1 41 58 view .LVU3
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  53               		.loc 1 50 5 view .LVU4
  54               		.loc 1 50 17 is_stmt 0 view .LVU5
  55 001e 1E82      		std Y+6,__zero_reg__
  56 0020 85E0      		ldi r24,lo8(5)
  57 0022 FE01      		movw r30,r28
  58 0024 3796      		adiw r30,7
  59 0026 DE01      		movw r26,r28
  60 0028 1196      		adiw r26,1
  61               		0:
  62 002a 0190      		ld r0,Z+
  63 002c 0D92      		st X+,r0
  64 002e 8A95      		dec r24
  65 0030 01F4      		brne 0b
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  66               		.loc 1 53 5 is_stmt 1 view .LVU6
  67 0032 4981      		ldd r20,Y+1
  68 0034 5A81      		ldd r21,Y+2
  69 0036 6B81      		ldd r22,Y+3
  70 0038 7C81      		ldd r23,Y+4
  71 003a 8D81      		ldd r24,Y+5
  72 003c 9E81      		ldd r25,Y+6
  73               	/* epilogue start */
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  74               		.loc 1 60 1 is_stmt 0 view .LVU7
  75 003e 2B96      		adiw r28,11
  76 0040 0FB6      		in __tmp_reg__,__SREG__
  77 0042 F894      		cli
  78 0044 DEBF      		out __SP_H__,r29
  79 0046 0FBE      		out __SREG__,__tmp_reg__
  80 0048 CDBF      		out __SP_L__,r28
  81 004a DF91      		pop r29
  82 004c CF91      		pop r28
  53:./tmk_core/common/action.c **** #else
  83               		.loc 1 53 5 view .LVU8
  84 004e 0C94 0000 		jmp action_tapping_process
  85               	.LVL1:
  86               		.cfi_endproc
  87               	.LFE103:
  89               		.section	.text.process_record_quantum,"ax",@progbits
  90               		.weak	process_record_quantum
  92               	process_record_quantum:
  93               	.LVL2:
  94               	.LFB105:
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  95               		.loc 1 99 50 is_stmt 1 view -0
  96               		.cfi_startproc
  97               	/* prologue: function */
  98               	/* frame size = 0 */
  99               	/* stack size = 0 */
 100               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
 101               		.loc 1 100 5 view .LVU10
 101:./tmk_core/common/action.c **** }
 102               		.loc 1 101 1 is_stmt 0 view .LVU11
 103 0000 81E0      		ldi r24,lo8(1)
 104               	.LVL3:
 105               	/* epilogue start */
 106               		.loc 1 101 1 view .LVU12
 107 0002 0895      		ret
 108               		.cfi_endproc
 109               	.LFE105:
 111               		.section	.text.register_code,"ax",@progbits
 112               	.global	register_code
 114               	register_code:
 115               	.LVL4:
 116               	.LFB108:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 117               		.loc 1 547 1 is_stmt 1 view -0
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 123               		.loc 1 548 5 view .LVU14
 124               		.loc 1 548 8 is_stmt 0 view .LVU15
 125 0000 8823      		tst r24
 126 0002 01F4      		brne .+2
 127 0004 00C0      		rjmp .L3
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 128               		.loc 1 553 10 is_stmt 1 view .LVU16
 129               		.loc 1 553 13 is_stmt 0 view .LVU17
 130 0006 8238      		cpi r24,lo8(-126)
 131 0008 01F4      		brne .L6
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 132               		.loc 1 556 9 is_stmt 1 view .LVU18
 133               		.loc 1 556 13 is_stmt 0 view .LVU19
 134 000a 0E94 0000 		call host_keyboard_leds
 135               	.LVL5:
 136               		.loc 1 556 12 view .LVU20
 137 000e 81FD      		sbrc r24,1
 138 0010 00C0      		rjmp .L3
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 139               		.loc 1 558 9 is_stmt 1 view .LVU21
 140 0012 89E3      		ldi r24,lo8(57)
 141 0014 0E94 0000 		call add_key
 142               	.LVL6:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 143               		.loc 1 559 9 view .LVU22
 144 0018 0E94 0000 		call send_keyboard_report
 145               	.LVL7:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 146               		.loc 1 560 9 view .LVU23
 147 001c 89E3      		ldi r24,lo8(57)
 148               	.L38:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 149               		.loc 1 570 9 is_stmt 0 view .LVU24
 150 001e 0E94 0000 		call del_key
 151               	.LVL8:
 152               	.L39:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 153               		.loc 1 571 9 is_stmt 1 view .LVU25
 154 0022 0C94 0000 		jmp send_keyboard_report
 155               	.LVL9:
 156               	.L6:
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 157               		.loc 1 564 10 view .LVU26
 564:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 158               		.loc 1 564 13 is_stmt 0 view .LVU27
 159 0026 8338      		cpi r24,lo8(-125)
 160 0028 01F4      		brne .L8
 566:./tmk_core/common/action.c **** #endif
 161               		.loc 1 566 9 is_stmt 1 view .LVU28
 566:./tmk_core/common/action.c **** #endif
 162               		.loc 1 566 13 is_stmt 0 view .LVU29
 163 002a 0E94 0000 		call host_keyboard_leds
 164               	.LVL10:
 566:./tmk_core/common/action.c **** #endif
 165               		.loc 1 566 12 view .LVU30
 166 002e 80FD      		sbrc r24,0
 167 0030 00C0      		rjmp .L3
 568:./tmk_core/common/action.c ****         send_keyboard_report();
 168               		.loc 1 568 9 is_stmt 1 view .LVU31
 169 0032 83E5      		ldi r24,lo8(83)
 170 0034 0E94 0000 		call add_key
 171               	.LVL11:
 569:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 172               		.loc 1 569 9 view .LVU32
 173 0038 0E94 0000 		call send_keyboard_report
 174               	.LVL12:
 570:./tmk_core/common/action.c ****         send_keyboard_report();
 175               		.loc 1 570 9 view .LVU33
 176 003c 83E5      		ldi r24,lo8(83)
 177 003e 00C0      		rjmp .L38
 178               	.LVL13:
 179               	.L8:
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 180               		.loc 1 574 10 view .LVU34
 181               		.loc 1 574 13 is_stmt 0 view .LVU35
 182 0040 8438      		cpi r24,lo8(-124)
 183 0042 01F4      		brne .L9
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 184               		.loc 1 576 9 is_stmt 1 view .LVU36
 185               		.loc 1 576 13 is_stmt 0 view .LVU37
 186 0044 0E94 0000 		call host_keyboard_leds
 187               	.LVL14:
 188               		.loc 1 576 12 view .LVU38
 189 0048 82FD      		sbrc r24,2
 190 004a 00C0      		rjmp .L3
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 191               		.loc 1 578 9 is_stmt 1 view .LVU39
 192 004c 87E4      		ldi r24,lo8(71)
 193 004e 0E94 0000 		call add_key
 194               	.LVL15:
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 195               		.loc 1 579 9 view .LVU40
 196 0052 0E94 0000 		call send_keyboard_report
 197               	.LVL16:
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 198               		.loc 1 580 9 view .LVU41
 199 0056 87E4      		ldi r24,lo8(71)
 200 0058 00C0      		rjmp .L38
 201               	.LVL17:
 202               	.L9:
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 203               		.loc 1 585 10 view .LVU42
 204               		.loc 1 585 13 is_stmt 0 view .LVU43
 205 005a 9CEF      		ldi r25,lo8(-4)
 206 005c 980F      		add r25,r24
 207 005e 913A      		cpi r25,lo8(-95)
 208 0060 00F4      		brsh .L10
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 209               		.loc 1 587 9 is_stmt 1 view .LVU44
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 210               		.loc 1 605 13 view .LVU45
 211 0062 0E94 0000 		call add_key
 212               	.LVL18:
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 213               		.loc 1 606 13 view .LVU46
 214 0066 00C0      		rjmp .L39
 215               	.LVL19:
 216               	.L10:
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 217               		.loc 1 609 10 view .LVU47
 218               		.loc 1 609 13 is_stmt 0 view .LVU48
 219 0068 90E2      		ldi r25,lo8(32)
 220 006a 980F      		add r25,r24
 221 006c 9830      		cpi r25,lo8(8)
 222 006e 00F4      		brsh .L11
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 223               		.loc 1 610 9 is_stmt 1 view .LVU49
 224               		.loc 1 610 18 is_stmt 0 view .LVU50
 225 0070 8770      		andi r24,lo8(7)
 226               	.LVL20:
 227               		.loc 1 610 9 view .LVU51
 228 0072 91E0      		ldi r25,lo8(1)
 229 0074 00C0      		rjmp 2f
 230               		1:
 231 0076 990F      		lsl r25
 232               		2:
 233 0078 8A95      		dec r24
 234 007a 02F4      		brpl 1b
 235 007c 892F      		mov r24,r25
 236 007e 0E94 0000 		call add_mods
 237               	.LVL21:
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 238               		.loc 1 611 9 is_stmt 1 view .LVU52
 239 0082 00C0      		rjmp .L39
 240               	.LVL22:
 241               	.L11:
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 242               		.loc 1 613 10 view .LVU53
 243               		.loc 1 613 13 is_stmt 0 view .LVU54
 244 0084 9BE5      		ldi r25,lo8(91)
 245 0086 980F      		add r25,r24
 246 0088 9330      		cpi r25,lo8(3)
 247 008a 00F4      		brsh .L12
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 248               		.loc 1 614 9 is_stmt 1 view .LVU55
 249 008c 853A      		cpi r24,lo8(-91)
 250 008e 01F0      		breq .L15
 251               		.loc 1 614 26 is_stmt 0 discriminator 1 view .LVU56
 252 0090 863A      		cpi r24,lo8(-90)
 253 0092 01F0      		breq .L16
 254               		.loc 1 614 26 view .LVU57
 255 0094 83E8      		ldi r24,lo8(-125)
 256 0096 90E0      		ldi r25,0
 257               	.LVL23:
 258               	.L13:
 259               		.loc 1 614 9 discriminator 12 view .LVU58
 260 0098 0C94 0000 		jmp host_system_send
 261               	.LVL24:
 262               	.L15:
 263               		.loc 1 614 9 view .LVU59
 264 009c 81E8      		ldi r24,lo8(-127)
 265 009e 90E0      		ldi r25,0
 266               	.LVL25:
 267               		.loc 1 614 9 view .LVU60
 268 00a0 00C0      		rjmp .L13
 269               	.LVL26:
 270               	.L16:
 271               		.loc 1 614 26 view .LVU61
 272 00a2 82E8      		ldi r24,lo8(-126)
 273 00a4 90E0      		ldi r25,0
 274               	.LVL27:
 275               		.loc 1 614 26 view .LVU62
 276 00a6 00C0      		rjmp .L13
 277               	.LVL28:
 278               	.L12:
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 279               		.loc 1 616 10 is_stmt 1 view .LVU63
 280               		.loc 1 616 13 is_stmt 0 view .LVU64
 281 00a8 98E5      		ldi r25,lo8(88)
 282 00aa 980F      		add r25,r24
 283 00ac 9531      		cpi r25,lo8(21)
 284 00ae 00F0      		brlo .+2
 285 00b0 00C0      		rjmp .L3
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 286               		.loc 1 617 9 is_stmt 1 view .LVU65
 287 00b2 883A      		cpi r24,lo8(-88)
 288 00b4 01F4      		brne .+2
 289 00b6 00C0      		rjmp .L17
 290               		.loc 1 617 28 is_stmt 0 discriminator 1 view .LVU66
 291 00b8 893A      		cpi r24,lo8(-87)
 292 00ba 01F4      		brne .+2
 293 00bc 00C0      		rjmp .L18
 294               		.loc 1 617 28 discriminator 3 view .LVU67
 295 00be 8A3A      		cpi r24,lo8(-86)
 296 00c0 01F4      		brne .+2
 297 00c2 00C0      		rjmp .L19
 298               		.loc 1 617 28 discriminator 5 view .LVU68
 299 00c4 8B3A      		cpi r24,lo8(-85)
 300 00c6 01F4      		brne .+2
 301 00c8 00C0      		rjmp .L20
 302               		.loc 1 617 28 discriminator 7 view .LVU69
 303 00ca 8C3A      		cpi r24,lo8(-84)
 304 00cc 01F4      		brne .+2
 305 00ce 00C0      		rjmp .L21
 306               		.loc 1 617 28 discriminator 9 view .LVU70
 307 00d0 8B3B      		cpi r24,lo8(-69)
 308 00d2 01F4      		brne .+2
 309 00d4 00C0      		rjmp .L22
 310               		.loc 1 617 28 discriminator 11 view .LVU71
 311 00d6 8C3B      		cpi r24,lo8(-68)
 312 00d8 01F4      		brne .+2
 313 00da 00C0      		rjmp .L23
 314               		.loc 1 617 28 discriminator 13 view .LVU72
 315 00dc 8D3A      		cpi r24,lo8(-83)
 316 00de 01F4      		brne .+2
 317 00e0 00C0      		rjmp .L24
 318               		.loc 1 617 28 discriminator 15 view .LVU73
 319 00e2 803B      		cpi r24,lo8(-80)
 320 00e4 01F4      		brne .+2
 321 00e6 00C0      		rjmp .L25
 322               		.loc 1 617 28 discriminator 17 view .LVU74
 323 00e8 8E3A      		cpi r24,lo8(-82)
 324 00ea 01F4      		brne .+2
 325 00ec 00C0      		rjmp .L26
 326               		.loc 1 617 28 discriminator 19 view .LVU75
 327 00ee 8F3A      		cpi r24,lo8(-81)
 328 00f0 01F4      		brne .+2
 329 00f2 00C0      		rjmp .L27
 330               		.loc 1 617 28 discriminator 21 view .LVU76
 331 00f4 813B      		cpi r24,lo8(-79)
 332 00f6 01F4      		brne .+2
 333 00f8 00C0      		rjmp .L28
 334               		.loc 1 617 28 discriminator 23 view .LVU77
 335 00fa 823B      		cpi r24,lo8(-78)
 336 00fc 01F4      		brne .+2
 337 00fe 00C0      		rjmp .L29
 338               		.loc 1 617 28 discriminator 25 view .LVU78
 339 0100 833B      		cpi r24,lo8(-77)
 340 0102 01F4      		brne .+2
 341 0104 00C0      		rjmp .L30
 342               		.loc 1 617 28 discriminator 27 view .LVU79
 343 0106 843B      		cpi r24,lo8(-76)
 344 0108 01F4      		brne .+2
 345 010a 00C0      		rjmp .L31
 346               		.loc 1 617 28 discriminator 29 view .LVU80
 347 010c 853B      		cpi r24,lo8(-75)
 348 010e 01F4      		brne .+2
 349 0110 00C0      		rjmp .L32
 350               		.loc 1 617 28 discriminator 31 view .LVU81
 351 0112 863B      		cpi r24,lo8(-74)
 352 0114 01F4      		brne .+2
 353 0116 00C0      		rjmp .L33
 354               		.loc 1 617 28 discriminator 33 view .LVU82
 355 0118 873B      		cpi r24,lo8(-73)
 356 011a 01F4      		brne .+2
 357 011c 00C0      		rjmp .L34
 358               		.loc 1 617 28 discriminator 35 view .LVU83
 359 011e 883B      		cpi r24,lo8(-72)
 360 0120 01F4      		brne .+2
 361 0122 00C0      		rjmp .L35
 362               		.loc 1 617 28 discriminator 37 view .LVU84
 363 0124 893B      		cpi r24,lo8(-71)
 364 0126 01F4      		brne .+2
 365 0128 00C0      		rjmp .L36
 366               		.loc 1 617 28 discriminator 39 view .LVU85
 367 012a 8A3B      		cpi r24,lo8(-70)
 368 012c 01F4      		brne .+2
 369 012e 00C0      		rjmp .L37
 370               		.loc 1 617 28 view .LVU86
 371 0130 90E0      		ldi r25,0
 372 0132 80E0      		ldi r24,0
 373               	.LVL29:
 374               	.L14:
 375               		.loc 1 617 9 discriminator 84 view .LVU87
 376 0134 0C94 0000 		jmp host_consumer_send
 377               	.LVL30:
 378               	.L17:
 379               		.loc 1 617 9 view .LVU88
 380 0138 82EE      		ldi r24,lo8(-30)
 381 013a 90E0      		ldi r25,0
 382               	.LVL31:
 383               		.loc 1 617 9 view .LVU89
 384 013c 00C0      		rjmp .L14
 385               	.LVL32:
 386               	.L18:
 387               		.loc 1 617 28 view .LVU90
 388 013e 89EE      		ldi r24,lo8(-23)
 389 0140 90E0      		ldi r25,0
 390               	.LVL33:
 391               		.loc 1 617 28 view .LVU91
 392 0142 00C0      		rjmp .L14
 393               	.LVL34:
 394               	.L19:
 395               		.loc 1 617 28 view .LVU92
 396 0144 8AEE      		ldi r24,lo8(-22)
 397 0146 90E0      		ldi r25,0
 398               	.LVL35:
 399               		.loc 1 617 28 view .LVU93
 400 0148 00C0      		rjmp .L14
 401               	.LVL36:
 402               	.L20:
 403               		.loc 1 617 28 view .LVU94
 404 014a 85EB      		ldi r24,lo8(-75)
 405 014c 90E0      		ldi r25,0
 406               	.LVL37:
 407               		.loc 1 617 28 view .LVU95
 408 014e 00C0      		rjmp .L14
 409               	.LVL38:
 410               	.L21:
 411               		.loc 1 617 28 view .LVU96
 412 0150 86EB      		ldi r24,lo8(-74)
 413 0152 90E0      		ldi r25,0
 414               	.LVL39:
 415               		.loc 1 617 28 view .LVU97
 416 0154 00C0      		rjmp .L14
 417               	.LVL40:
 418               	.L22:
 419               		.loc 1 617 28 view .LVU98
 420 0156 83EB      		ldi r24,lo8(-77)
 421 0158 90E0      		ldi r25,0
 422               	.LVL41:
 423               		.loc 1 617 28 view .LVU99
 424 015a 00C0      		rjmp .L14
 425               	.LVL42:
 426               	.L23:
 427               		.loc 1 617 28 view .LVU100
 428 015c 84EB      		ldi r24,lo8(-76)
 429 015e 90E0      		ldi r25,0
 430               	.LVL43:
 431               		.loc 1 617 28 view .LVU101
 432 0160 00C0      		rjmp .L14
 433               	.LVL44:
 434               	.L24:
 435               		.loc 1 617 28 view .LVU102
 436 0162 87EB      		ldi r24,lo8(-73)
 437 0164 90E0      		ldi r25,0
 438               	.LVL45:
 439               		.loc 1 617 28 view .LVU103
 440 0166 00C0      		rjmp .L14
 441               	.LVL46:
 442               	.L25:
 443               		.loc 1 617 28 view .LVU104
 444 0168 8CEC      		ldi r24,lo8(-52)
 445 016a 90E0      		ldi r25,0
 446               	.LVL47:
 447               		.loc 1 617 28 view .LVU105
 448 016c 00C0      		rjmp .L14
 449               	.LVL48:
 450               	.L26:
 451               		.loc 1 617 28 view .LVU106
 452 016e 8DEC      		ldi r24,lo8(-51)
 453 0170 90E0      		ldi r25,0
 454               	.LVL49:
 455               		.loc 1 617 28 view .LVU107
 456 0172 00C0      		rjmp .L14
 457               	.LVL50:
 458               	.L27:
 459               		.loc 1 617 28 view .LVU108
 460 0174 83E8      		ldi r24,lo8(-125)
 461 0176 91E0      		ldi r25,lo8(1)
 462               	.LVL51:
 463               		.loc 1 617 28 view .LVU109
 464 0178 00C0      		rjmp .L14
 465               	.LVL52:
 466               	.L28:
 467               		.loc 1 617 28 view .LVU110
 468 017a 8AE8      		ldi r24,lo8(-118)
 469 017c 91E0      		ldi r25,lo8(1)
 470               	.LVL53:
 471               		.loc 1 617 28 view .LVU111
 472 017e 00C0      		rjmp .L14
 473               	.LVL54:
 474               	.L29:
 475               		.loc 1 617 28 view .LVU112
 476 0180 82E9      		ldi r24,lo8(-110)
 477 0182 91E0      		ldi r25,lo8(1)
 478               	.LVL55:
 479               		.loc 1 617 28 view .LVU113
 480 0184 00C0      		rjmp .L14
 481               	.LVL56:
 482               	.L30:
 483               		.loc 1 617 28 view .LVU114
 484 0186 84E9      		ldi r24,lo8(-108)
 485 0188 91E0      		ldi r25,lo8(1)
 486               	.LVL57:
 487               		.loc 1 617 28 view .LVU115
 488 018a 00C0      		rjmp .L14
 489               	.LVL58:
 490               	.L31:
 491               		.loc 1 617 28 view .LVU116
 492 018c 81E2      		ldi r24,lo8(33)
 493 018e 92E0      		ldi r25,lo8(2)
 494               	.LVL59:
 495               		.loc 1 617 28 view .LVU117
 496 0190 00C0      		rjmp .L14
 497               	.LVL60:
 498               	.L32:
 499               		.loc 1 617 28 view .LVU118
 500 0192 83E2      		ldi r24,lo8(35)
 501 0194 92E0      		ldi r25,lo8(2)
 502               	.LVL61:
 503               		.loc 1 617 28 view .LVU119
 504 0196 00C0      		rjmp .L14
 505               	.LVL62:
 506               	.L33:
 507               		.loc 1 617 28 view .LVU120
 508 0198 84E2      		ldi r24,lo8(36)
 509 019a 92E0      		ldi r25,lo8(2)
 510               	.LVL63:
 511               		.loc 1 617 28 view .LVU121
 512 019c 00C0      		rjmp .L14
 513               	.LVL64:
 514               	.L34:
 515               		.loc 1 617 28 view .LVU122
 516 019e 85E2      		ldi r24,lo8(37)
 517 01a0 92E0      		ldi r25,lo8(2)
 518               	.LVL65:
 519               		.loc 1 617 28 view .LVU123
 520 01a2 00C0      		rjmp .L14
 521               	.LVL66:
 522               	.L35:
 523               		.loc 1 617 28 view .LVU124
 524 01a4 86E2      		ldi r24,lo8(38)
 525 01a6 92E0      		ldi r25,lo8(2)
 526               	.LVL67:
 527               		.loc 1 617 28 view .LVU125
 528 01a8 00C0      		rjmp .L14
 529               	.LVL68:
 530               	.L36:
 531               		.loc 1 617 28 view .LVU126
 532 01aa 87E2      		ldi r24,lo8(39)
 533 01ac 92E0      		ldi r25,lo8(2)
 534               	.LVL69:
 535               		.loc 1 617 28 view .LVU127
 536 01ae 00C0      		rjmp .L14
 537               	.LVL70:
 538               	.L37:
 539               		.loc 1 617 28 view .LVU128
 540 01b0 8AE2      		ldi r24,lo8(42)
 541 01b2 92E0      		ldi r25,lo8(2)
 542               	.LVL71:
 543               		.loc 1 617 28 view .LVU129
 544 01b4 00C0      		rjmp .L14
 545               	.L3:
 546               	/* epilogue start */
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 547               		.loc 1 619 1 view .LVU130
 548 01b6 0895      		ret
 549               		.cfi_endproc
 550               	.LFE108:
 552               		.section	.text.unregister_code,"ax",@progbits
 553               	.global	unregister_code
 555               	unregister_code:
 556               	.LVL72:
 557               	.LFB109:
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 558               		.loc 1 622 1 is_stmt 1 view -0
 559               		.cfi_startproc
 560               	/* prologue: function */
 561               	/* frame size = 0 */
 562               	/* stack size = 0 */
 563               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 564               		.loc 1 623 5 view .LVU132
 565               		.loc 1 623 8 is_stmt 0 view .LVU133
 566 0000 8823      		tst r24
 567 0002 01F4      		brne .+2
 568 0004 00C0      		rjmp .L40
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 569               		.loc 1 628 10 is_stmt 1 view .LVU134
 570               		.loc 1 628 13 is_stmt 0 view .LVU135
 571 0006 8238      		cpi r24,lo8(-126)
 572 0008 01F4      		brne .L43
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 573               		.loc 1 631 9 is_stmt 1 view .LVU136
 574               		.loc 1 631 15 is_stmt 0 view .LVU137
 575 000a 0E94 0000 		call host_keyboard_leds
 576               	.LVL73:
 577               		.loc 1 631 12 view .LVU138
 578 000e 81FF      		sbrs r24,1
 579 0010 00C0      		rjmp .L40
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 580               		.loc 1 633 9 is_stmt 1 view .LVU139
 581 0012 89E3      		ldi r24,lo8(57)
 582 0014 0E94 0000 		call add_key
 583               	.LVL74:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 584               		.loc 1 634 9 view .LVU140
 585 0018 0E94 0000 		call send_keyboard_report
 586               	.LVL75:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 587               		.loc 1 635 9 view .LVU141
 588 001c 89E3      		ldi r24,lo8(57)
 589               	.L59:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 590               		.loc 1 645 9 is_stmt 0 view .LVU142
 591 001e 0E94 0000 		call del_key
 592               	.LVL76:
 593               	.L60:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 594               		.loc 1 646 9 is_stmt 1 view .LVU143
 595 0022 0C94 0000 		jmp send_keyboard_report
 596               	.LVL77:
 597               	.L43:
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 598               		.loc 1 639 10 view .LVU144
 639:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 599               		.loc 1 639 13 is_stmt 0 view .LVU145
 600 0026 8338      		cpi r24,lo8(-125)
 601 0028 01F4      		brne .L45
 641:./tmk_core/common/action.c **** #endif
 602               		.loc 1 641 9 is_stmt 1 view .LVU146
 641:./tmk_core/common/action.c **** #endif
 603               		.loc 1 641 15 is_stmt 0 view .LVU147
 604 002a 0E94 0000 		call host_keyboard_leds
 605               	.LVL78:
 641:./tmk_core/common/action.c **** #endif
 606               		.loc 1 641 12 view .LVU148
 607 002e 80FF      		sbrs r24,0
 608 0030 00C0      		rjmp .L40
 643:./tmk_core/common/action.c ****         send_keyboard_report();
 609               		.loc 1 643 9 is_stmt 1 view .LVU149
 610 0032 83E5      		ldi r24,lo8(83)
 611 0034 0E94 0000 		call add_key
 612               	.LVL79:
 644:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 613               		.loc 1 644 9 view .LVU150
 614 0038 0E94 0000 		call send_keyboard_report
 615               	.LVL80:
 645:./tmk_core/common/action.c ****         send_keyboard_report();
 616               		.loc 1 645 9 view .LVU151
 617 003c 83E5      		ldi r24,lo8(83)
 618 003e 00C0      		rjmp .L59
 619               	.LVL81:
 620               	.L45:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 621               		.loc 1 649 10 view .LVU152
 622               		.loc 1 649 13 is_stmt 0 view .LVU153
 623 0040 8438      		cpi r24,lo8(-124)
 624 0042 01F4      		brne .L46
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 625               		.loc 1 651 9 is_stmt 1 view .LVU154
 626               		.loc 1 651 15 is_stmt 0 view .LVU155
 627 0044 0E94 0000 		call host_keyboard_leds
 628               	.LVL82:
 629               		.loc 1 651 12 view .LVU156
 630 0048 82FF      		sbrs r24,2
 631 004a 00C0      		rjmp .L40
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 632               		.loc 1 653 9 is_stmt 1 view .LVU157
 633 004c 87E4      		ldi r24,lo8(71)
 634 004e 0E94 0000 		call add_key
 635               	.LVL83:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 636               		.loc 1 654 9 view .LVU158
 637 0052 0E94 0000 		call send_keyboard_report
 638               	.LVL84:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 639               		.loc 1 655 9 view .LVU159
 640 0056 87E4      		ldi r24,lo8(71)
 641 0058 00C0      		rjmp .L59
 642               	.LVL85:
 643               	.L46:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 644               		.loc 1 660 10 view .LVU160
 645               		.loc 1 660 13 is_stmt 0 view .LVU161
 646 005a 9CEF      		ldi r25,lo8(-4)
 647 005c 980F      		add r25,r24
 648 005e 913A      		cpi r25,lo8(-95)
 649 0060 00F0      		brlo .L59
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 650               		.loc 1 664 10 is_stmt 1 view .LVU162
 651               		.loc 1 664 13 is_stmt 0 view .LVU163
 652 0062 90E2      		ldi r25,lo8(32)
 653 0064 980F      		add r25,r24
 654 0066 9830      		cpi r25,lo8(8)
 655 0068 00F4      		brsh .L48
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 656               		.loc 1 665 9 is_stmt 1 view .LVU164
 657               		.loc 1 665 18 is_stmt 0 view .LVU165
 658 006a 8770      		andi r24,lo8(7)
 659               	.LVL86:
 660               		.loc 1 665 9 view .LVU166
 661 006c 91E0      		ldi r25,lo8(1)
 662 006e 00C0      		rjmp 2f
 663               		1:
 664 0070 990F      		lsl r25
 665               		2:
 666 0072 8A95      		dec r24
 667 0074 02F4      		brpl 1b
 668 0076 892F      		mov r24,r25
 669 0078 0E94 0000 		call del_mods
 670               	.LVL87:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 671               		.loc 1 666 9 is_stmt 1 view .LVU167
 672 007c 00C0      		rjmp .L60
 673               	.LVL88:
 674               	.L48:
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 675               		.loc 1 668 10 view .LVU168
 676               		.loc 1 668 13 is_stmt 0 view .LVU169
 677 007e 9BE5      		ldi r25,lo8(91)
 678 0080 980F      		add r25,r24
 679 0082 9330      		cpi r25,lo8(3)
 680 0084 00F4      		brsh .L49
 669:./tmk_core/common/action.c ****         host_system_send(0);
 681               		.loc 1 669 9 is_stmt 1 view .LVU170
 682 0086 90E0      		ldi r25,0
 683 0088 80E0      		ldi r24,0
 684               	.LVL89:
 685               		.loc 1 669 9 is_stmt 0 view .LVU171
 686 008a 0C94 0000 		jmp host_system_send
 687               	.LVL90:
 688               	.L49:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 689               		.loc 1 671 10 is_stmt 1 view .LVU172
 690               		.loc 1 671 13 is_stmt 0 view .LVU173
 691 008e 885A      		subi r24,lo8(-(88))
 692               	.LVL91:
 693               		.loc 1 671 13 view .LVU174
 694 0090 8531      		cpi r24,lo8(21)
 695 0092 00F4      		brsh .L40
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 696               		.loc 1 672 9 is_stmt 1 view .LVU175
 697 0094 90E0      		ldi r25,0
 698 0096 80E0      		ldi r24,0
 699               	.LVL92:
 700               		.loc 1 672 9 is_stmt 0 view .LVU176
 701 0098 0C94 0000 		jmp host_consumer_send
 702               	.LVL93:
 703               	.L40:
 704               	/* epilogue start */
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 705               		.loc 1 674 1 view .LVU177
 706 009c 0895      		ret
 707               		.cfi_endproc
 708               	.LFE109:
 710               		.section	.text.register_mods,"ax",@progbits
 711               	.global	register_mods
 713               	register_mods:
 714               	.LVL94:
 715               	.LFB110:
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 716               		.loc 1 677 1 is_stmt 1 view -0
 717               		.cfi_startproc
 718               	/* prologue: function */
 719               	/* frame size = 0 */
 720               	/* stack size = 0 */
 721               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 722               		.loc 1 678 5 view .LVU179
 723               		.loc 1 678 8 is_stmt 0 view .LVU180
 724 0000 8823      		tst r24
 725 0002 01F0      		breq .L61
 679:./tmk_core/common/action.c ****         add_mods(mods);
 726               		.loc 1 679 9 is_stmt 1 view .LVU181
 727 0004 0E94 0000 		call add_mods
 728               	.LVL95:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 729               		.loc 1 680 9 view .LVU182
 730 0008 0C94 0000 		jmp send_keyboard_report
 731               	.LVL96:
 732               	.L61:
 733               	/* epilogue start */
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 734               		.loc 1 682 1 is_stmt 0 view .LVU183
 735 000c 0895      		ret
 736               		.cfi_endproc
 737               	.LFE110:
 739               		.section	.text.unregister_mods,"ax",@progbits
 740               	.global	unregister_mods
 742               	unregister_mods:
 743               	.LVL97:
 744               	.LFB111:
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 745               		.loc 1 685 1 is_stmt 1 view -0
 746               		.cfi_startproc
 747               	/* prologue: function */
 748               	/* frame size = 0 */
 749               	/* stack size = 0 */
 750               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 751               		.loc 1 686 5 view .LVU185
 752               		.loc 1 686 8 is_stmt 0 view .LVU186
 753 0000 8823      		tst r24
 754 0002 01F0      		breq .L63
 687:./tmk_core/common/action.c ****         del_mods(mods);
 755               		.loc 1 687 9 is_stmt 1 view .LVU187
 756 0004 0E94 0000 		call del_mods
 757               	.LVL98:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 758               		.loc 1 688 9 view .LVU188
 759 0008 0C94 0000 		jmp send_keyboard_report
 760               	.LVL99:
 761               	.L63:
 762               	/* epilogue start */
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 763               		.loc 1 690 1 is_stmt 0 view .LVU189
 764 000c 0895      		ret
 765               		.cfi_endproc
 766               	.LFE111:
 768               		.section	.text.process_action,"ax",@progbits
 769               	.global	process_action
 771               	process_action:
 772               	.LVL100:
 773               	.LFB107:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 774               		.loc 1 122 1 is_stmt 1 view -0
 775               		.cfi_startproc
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 776               		.loc 1 122 1 is_stmt 0 view .LVU191
 777 0000 8F92      		push r8
 778               	.LCFI4:
 779               		.cfi_def_cfa_offset 3
 780               		.cfi_offset 8, -2
 781 0002 9F92      		push r9
 782               	.LCFI5:
 783               		.cfi_def_cfa_offset 4
 784               		.cfi_offset 9, -3
 785 0004 AF92      		push r10
 786               	.LCFI6:
 787               		.cfi_def_cfa_offset 5
 788               		.cfi_offset 10, -4
 789 0006 BF92      		push r11
 790               	.LCFI7:
 791               		.cfi_def_cfa_offset 6
 792               		.cfi_offset 11, -5
 793 0008 DF92      		push r13
 794               	.LCFI8:
 795               		.cfi_def_cfa_offset 7
 796               		.cfi_offset 13, -6
 797 000a EF92      		push r14
 798               	.LCFI9:
 799               		.cfi_def_cfa_offset 8
 800               		.cfi_offset 14, -7
 801 000c FF92      		push r15
 802               	.LCFI10:
 803               		.cfi_def_cfa_offset 9
 804               		.cfi_offset 15, -8
 805 000e 0F93      		push r16
 806               	.LCFI11:
 807               		.cfi_def_cfa_offset 10
 808               		.cfi_offset 16, -9
 809 0010 1F93      		push r17
 810               	.LCFI12:
 811               		.cfi_def_cfa_offset 11
 812               		.cfi_offset 17, -10
 813 0012 CF93      		push r28
 814               	.LCFI13:
 815               		.cfi_def_cfa_offset 12
 816               		.cfi_offset 28, -11
 817 0014 DF93      		push r29
 818               	.LCFI14:
 819               		.cfi_def_cfa_offset 13
 820               		.cfi_offset 29, -12
 821 0016 00D0      		rcall .
 822 0018 00D0      		rcall .
 823 001a 0F92      		push __tmp_reg__
 824               	.LCFI15:
 825               		.cfi_def_cfa_offset 18
 826 001c CDB7      		in r28,__SP_L__
 827 001e DEB7      		in r29,__SP_H__
 828               	.LCFI16:
 829               		.cfi_def_cfa_register 28
 830               	/* prologue: function */
 831               	/* frame size = 5 */
 832               	/* stack size = 16 */
 833               	.L__stack_usage = 16
 834 0020 7C01      		movw r14,r24
 835 0022 6D83      		std Y+5,r22
 836 0024 7983      		std Y+1,r23
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 837               		.loc 1 123 5 is_stmt 1 view .LVU192
 838               	.LVL101:
 124:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 839               		.loc 1 124 5 view .LVU193
 126:./tmk_core/common/action.c **** #endif
 840               		.loc 1 126 5 view .LVU194
 126:./tmk_core/common/action.c **** #endif
 841               		.loc 1 126 36 is_stmt 0 view .LVU195
 842 0026 FC01      		movw r30,r24
 843 0028 0581      		ldd r16,Z+5
 844 002a 0295      		swap r16
 845 002c 0F70      		andi r16,lo8(15)
 846               	.LVL102:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 847               		.loc 1 136 5 is_stmt 1 view .LVU196
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 848               		.loc 1 136 14 is_stmt 0 view .LVU197
 849 002e 1281      		ldd r17,Z+2
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 850               		.loc 1 136 8 view .LVU198
 851 0030 1111      		cpse r17,__zero_reg__
 138:./tmk_core/common/action.c ****     }
 852               		.loc 1 138 9 is_stmt 1 view .LVU199
 853 0032 0E94 0000 		call clear_weak_mods
 854               	.LVL103:
 855               	.L66:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 856               		.loc 1 143 5 view .LVU200
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 857               		.loc 1 143 9 is_stmt 0 view .LVU201
 858 0036 0E94 0000 		call is_oneshot_layer_active
 859               	.LVL104:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 860               		.loc 1 143 9 view .LVU202
 861 003a D82E      		mov r13,r24
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 862               		.loc 1 143 8 view .LVU203
 863 003c 8823      		tst r24
 864 003e 01F0      		breq .L67
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 865               		.loc 1 143 35 discriminator 1 view .LVU204
 866 0040 1123      		tst r17
 867 0042 01F0      		breq .L140
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 868               		.loc 1 143 55 discriminator 2 view .LVU205
 869 0044 8D81      		ldd r24,Y+5
 870 0046 805E      		subi r24,lo8(-(32))
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 871               		.loc 1 143 52 discriminator 2 view .LVU206
 872 0048 8830      		cpi r24,lo8(8)
 873 004a 00F0      		brlo .L140
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 874               		.loc 1 144 9 is_stmt 1 view .LVU207
 875 004c 82E0      		ldi r24,lo8(2)
 876 004e 0E94 0000 		call clear_oneshot_layer_state
 877               	.LVL105:
 145:./tmk_core/common/action.c ****     }
 878               		.loc 1 145 9 view .LVU208
 145:./tmk_core/common/action.c ****     }
 879               		.loc 1 145 31 is_stmt 0 view .LVU209
 880 0052 0E94 0000 		call is_oneshot_layer_active
 881               	.LVL106:
 145:./tmk_core/common/action.c ****     }
 882               		.loc 1 145 9 view .LVU210
 883 0056 91E0      		ldi r25,lo8(1)
 884 0058 D82E      		mov r13,r24
 885 005a D926      		eor r13,r25
 886               	.LVL107:
 887               	.L67:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 888               		.loc 1 149 5 is_stmt 1 view .LVU211
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 889               		.loc 1 149 24 is_stmt 0 view .LVU212
 890 005c E981      		ldd r30,Y+1
 891 005e E295      		swap r30
 892 0060 EF70      		andi r30,lo8(15)
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 893               		.loc 1 149 5 view .LVU213
 894 0062 F0E0      		ldi r31,0
 895 0064 E050      		subi r30,lo8(-(gs(.L70)))
 896 0066 F040      		sbci r31,hi8(-(gs(.L70)))
 897 0068 0C94 0000 		jmp __tablejump2__
 898               		.section	.jumptables.gcc.process_action,"a",@progbits
 899               		.p2align	1
 900               	.L70:
 901 0000 0000      		.word gs(.L77)
 902 0002 0000      		.word gs(.L77)
 903 0004 0000      		.word gs(.L76)
 904 0006 0000      		.word gs(.L76)
 905 0008 0000      		.word gs(.L75)
 906 000a 0000      		.word gs(.L74)
 907 000c 0000      		.word gs(.L68)
 908 000e 0000      		.word gs(.L68)
 909 0010 0000      		.word gs(.L73)
 910 0012 0000      		.word gs(.L68)
 911 0014 0000      		.word gs(.L72)
 912 0016 0000      		.word gs(.L72)
 913 0018 0000      		.word gs(.L71)
 914 001a 0000      		.word gs(.L68)
 915 001c 0000      		.word gs(.L68)
 916 001e 0000      		.word gs(.L69)
 917               		.section	.text.process_action
 918               	.LVL108:
 919               	.L140:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 920               		.loc 1 123 10 view .LVU214
 921 006c D12C      		mov r13,__zero_reg__
 922 006e 00C0      		rjmp .L67
 923               	.LVL109:
 924               	.L77:
 925               	.LBB6:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 926               		.loc 1 154 17 is_stmt 1 view .LVU215
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 927               		.loc 1 154 75 is_stmt 0 view .LVU216
 928 0070 0981      		ldd r16,Y+1
 929               	.LVL110:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 930               		.loc 1 154 75 view .LVU217
 931 0072 0F70      		andi r16,lo8(15)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 932               		.loc 1 154 48 view .LVU218
 933 0074 F981      		ldd r31,Y+1
 934 0076 F07F      		andi r31,lo8(-16)
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 935               		.loc 1 154 25 view .LVU219
 936 0078 01F0      		breq .L78
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 937               		.loc 1 154 25 discriminator 2 view .LVU220
 938 007a 0295      		swap r16
 939 007c 007F      		andi r16,lo8(-16)
 940               	.L78:
 941               	.LVL111:
 156:./tmk_core/common/action.c ****                     if (mods) {
 942               		.loc 1 156 17 is_stmt 1 discriminator 4 view .LVU221
 156:./tmk_core/common/action.c ****                     if (mods) {
 943               		.loc 1 156 20 is_stmt 0 discriminator 4 view .LVU222
 944 007e 1123      		tst r17
 945 0080 01F0      		breq .L79
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 946               		.loc 1 157 21 is_stmt 1 view .LVU223
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 947               		.loc 1 157 24 is_stmt 0 view .LVU224
 948 0082 0023      		tst r16
 949 0084 01F0      		breq .L173
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 950               		.loc 1 158 25 is_stmt 1 view .LVU225
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 951               		.loc 1 158 29 is_stmt 0 view .LVU226
 952 0086 8D81      		ldd r24,Y+5
 953 0088 805E      		subi r24,lo8(-(32))
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 954               		.loc 1 158 28 view .LVU227
 955 008a 8830      		cpi r24,lo8(8)
 956 008c 00F0      		brlo .L81
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 957               		.loc 1 158 53 discriminator 1 view .LVU228
 958 008e 2D81      		ldd r18,Y+5
 959 0090 2111      		cpse r18,__zero_reg__
 960 0092 00C0      		rjmp .L82
 961               	.L81:
 162:./tmk_core/common/action.c ****                         } else {
 962               		.loc 1 162 29 is_stmt 1 view .LVU229
 963 0094 802F      		mov r24,r16
 964 0096 0E94 0000 		call add_mods
 965               	.LVL112:
 966               	.L83:
 166:./tmk_core/common/action.c ****                     }
 967               		.loc 1 166 25 view .LVU230
 968 009a 0E94 0000 		call send_keyboard_report
 969               	.LVL113:
 168:./tmk_core/common/action.c ****                 } else {
 970               		.loc 1 168 21 view .LVU231
 971               	.L173:
 168:./tmk_core/common/action.c ****                 } else {
 972               		.loc 1 168 21 is_stmt 0 view .LVU232
 973               	.LBE6:
 419:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 974               		.loc 1 419 75 is_stmt 1 view .LVU233
 420:./tmk_core/common/action.c ****                         } else {
 975               		.loc 1 420 29 view .LVU234
 976 009e 8D81      		ldd r24,Y+5
 977 00a0 0E94 0000 		call register_code
 978               	.LVL114:
 979 00a4 00C0      		rjmp .L68
 980               	.LVL115:
 981               	.L82:
 982               	.LBB7:
 164:./tmk_core/common/action.c ****                         }
 983               		.loc 1 164 29 view .LVU235
 984 00a6 802F      		mov r24,r16
 985 00a8 0E94 0000 		call add_weak_mods
 986               	.LVL116:
 987 00ac 00C0      		rjmp .L83
 988               	.L79:
 170:./tmk_core/common/action.c ****                     if (mods) {
 989               		.loc 1 170 21 view .LVU236
 990 00ae 8D81      		ldd r24,Y+5
 991 00b0 0E94 0000 		call unregister_code
 992               	.LVL117:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 993               		.loc 1 171 21 view .LVU237
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 994               		.loc 1 171 24 is_stmt 0 view .LVU238
 995 00b4 0023      		tst r16
 996 00b6 01F0      		breq .L68
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 997               		.loc 1 172 25 is_stmt 1 view .LVU239
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 998               		.loc 1 172 29 is_stmt 0 view .LVU240
 999 00b8 8D81      		ldd r24,Y+5
 1000 00ba 805E      		subi r24,lo8(-(32))
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1001               		.loc 1 172 28 view .LVU241
 1002 00bc 8830      		cpi r24,lo8(8)
 1003 00be 00F0      		brlo .L85
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 1004               		.loc 1 172 53 discriminator 1 view .LVU242
 1005 00c0 3D81      		ldd r19,Y+5
 1006 00c2 3111      		cpse r19,__zero_reg__
 1007 00c4 00C0      		rjmp .L86
 1008               	.L85:
 173:./tmk_core/common/action.c ****                         } else {
 1009               		.loc 1 173 29 is_stmt 1 view .LVU243
 1010 00c6 802F      		mov r24,r16
 1011 00c8 0E94 0000 		call del_mods
 1012               	.LVL118:
 1013               	.L87:
 177:./tmk_core/common/action.c ****                     }
 1014               		.loc 1 177 25 view .LVU244
 1015 00cc 0E94 0000 		call send_keyboard_report
 1016               	.LVL119:
 1017               	.L68:
 177:./tmk_core/common/action.c ****                     }
 1018               		.loc 1 177 25 is_stmt 0 view .LVU245
 1019               	.LBE7:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1020               		.loc 1 531 5 is_stmt 1 view .LVU246
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1021               		.loc 1 531 8 is_stmt 0 view .LVU247
 1022 00d0 DD20      		tst r13
 1023 00d2 01F4      		brne .+2
 1024 00d4 00C0      		rjmp .L65
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1025               		.loc 1 531 33 discriminator 1 view .LVU248
 1026 00d6 0E94 0000 		call get_oneshot_layer_state
 1027               	.LVL120:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1028               		.loc 1 531 28 discriminator 1 view .LVU249
 1029 00da 80FD      		sbrc r24,0
 1030 00dc 00C0      		rjmp .L65
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1031               		.loc 1 532 9 is_stmt 1 view .LVU250
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1032               		.loc 1 532 31 is_stmt 0 view .LVU251
 1033 00de F701      		movw r30,r14
 1034 00e0 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 1035               		.loc 1 533 9 is_stmt 1 view .LVU252
 1036 00e2 0E94 0000 		call get_oneshot_layer
 1037               	.LVL121:
 1038 00e6 0E94 0000 		call layer_on
 1039               	.LVL122:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1040               		.loc 1 534 9 view .LVU253
 1041 00ea C701      		movw r24,r14
 1042 00ec 0E94 0000 		call process_record
 1043               	.LVL123:
 535:./tmk_core/common/action.c ****     }
 1044               		.loc 1 535 9 view .LVU254
 1045 00f0 0E94 0000 		call get_oneshot_layer
 1046               	.LVL124:
 1047               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1048               		.loc 1 538 1 is_stmt 0 view .LVU255
 1049 00f4 0F90      		pop __tmp_reg__
 1050 00f6 0F90      		pop __tmp_reg__
 1051 00f8 0F90      		pop __tmp_reg__
 1052 00fa 0F90      		pop __tmp_reg__
 1053 00fc 0F90      		pop __tmp_reg__
 1054 00fe DF91      		pop r29
 1055 0100 CF91      		pop r28
 1056 0102 1F91      		pop r17
 1057               	.LVL125:
 538:./tmk_core/common/action.c **** 
 1058               		.loc 1 538 1 view .LVU256
 1059 0104 0F91      		pop r16
 1060 0106 FF90      		pop r15
 1061 0108 EF90      		pop r14
 1062               	.LVL126:
 538:./tmk_core/common/action.c **** 
 1063               		.loc 1 538 1 view .LVU257
 1064 010a DF90      		pop r13
 1065               	.LVL127:
 538:./tmk_core/common/action.c **** 
 1066               		.loc 1 538 1 view .LVU258
 1067 010c BF90      		pop r11
 1068 010e AF90      		pop r10
 1069 0110 9F90      		pop r9
 1070 0112 8F90      		pop r8
 535:./tmk_core/common/action.c ****     }
 1071               		.loc 1 535 9 view .LVU259
 1072 0114 0C94 0000 		jmp layer_off
 1073               	.LVL128:
 1074               	.L86:
 1075               	.LBB8:
 175:./tmk_core/common/action.c ****                         }
 1076               		.loc 1 175 29 is_stmt 1 view .LVU260
 1077 0118 802F      		mov r24,r16
 1078 011a 0E94 0000 		call del_weak_mods
 1079               	.LVL129:
 1080 011e 00C0      		rjmp .L87
 1081               	.LVL130:
 1082               	.L76:
 175:./tmk_core/common/action.c ****                         }
 1083               		.loc 1 175 29 is_stmt 0 view .LVU261
 1084               	.LBE8:
 1085               	.LBB9:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1086               		.loc 1 186 17 is_stmt 1 view .LVU262
 1087               	.LBE9:
 1088               	.LBB10:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 1089               		.loc 1 154 75 is_stmt 0 view .LVU263
 1090 0120 4981      		ldd r20,Y+1
 1091 0122 4F70      		andi r20,lo8(15)
 1092 0124 B42E      		mov r11,r20
 1093               	.LBE10:
 1094               	.LBB11:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1095               		.loc 1 186 48 view .LVU264
 1096 0126 5981      		ldd r21,Y+1
 1097 0128 507F      		andi r21,lo8(-16)
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1098               		.loc 1 186 25 view .LVU265
 1099 012a 5032      		cpi r21,lo8(32)
 1100 012c 01F0      		breq .L88
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 1101               		.loc 1 186 25 discriminator 2 view .LVU266
 1102 012e B294      		swap r11
 1103 0130 80EF      		ldi r24,lo8(-16)
 1104 0132 B822      		and r11,r24
 1105               	.L88:
 1106               	.LVL131:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 1107               		.loc 1 188 17 is_stmt 1 discriminator 4 view .LVU267
 1108 0134 8D81      		ldd r24,Y+5
 1109 0136 8823      		tst r24
 1110 0138 01F0      		breq .L89
 1111 013a 8130      		cpi r24,lo8(1)
 1112 013c 01F0      		breq .L90
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 1113               		.loc 1 243 25 view .LVU268
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 1114               		.loc 1 243 28 is_stmt 0 view .LVU269
 1115 013e 1123      		tst r17
 1116 0140 01F0      		breq .L98
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1117               		.loc 1 244 29 is_stmt 1 view .LVU270
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 1118               		.loc 1 244 32 is_stmt 0 view .LVU271
 1119 0142 0023      		tst r16
 1120 0144 01F0      		breq .L174
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 1121               		.loc 1 246 33 is_stmt 1 view .LVU272
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 1122               		.loc 1 246 37 is_stmt 0 view .LVU273
 1123 0146 F701      		movw r30,r14
 1124 0148 8581      		ldd r24,Z+5
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 1125               		.loc 1 246 36 view .LVU274
 1126 014a 80FF      		sbrs r24,0
 1127 014c 00C0      		rjmp .L173
 247:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 1128               		.loc 1 247 80 is_stmt 1 view .LVU275
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 1129               		.loc 1 249 37 view .LVU276
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 1130               		.loc 1 249 55 is_stmt 0 view .LVU277
 1131 014e 8F70      		andi r24,lo8(15)
 1132 0150 8583      		std Z+5,r24
 1133 0152 00C0      		rjmp .L174
 1134               	.L89:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 1135               		.loc 1 192 25 is_stmt 1 view .LVU278
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 1136               		.loc 1 192 28 is_stmt 0 view .LVU279
 1137 0154 1123      		tst r17
 1138 0156 01F0      		breq .L92
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1139               		.loc 1 193 29 is_stmt 1 view .LVU280
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 1140               		.loc 1 193 32 is_stmt 0 view .LVU281
 1141 0158 0111      		cpse r16,__zero_reg__
 1142 015a 00C0      		rjmp .L93
 1143               	.L174:
 250:./tmk_core/common/action.c ****                                 } else
 1144               		.loc 1 250 37 is_stmt 1 view .LVU282
 1145 015c 8B2D      		mov r24,r11
 1146               	.LVL132:
 1147               	.L170:
 250:./tmk_core/common/action.c ****                                 } else
 1148               		.loc 1 250 37 is_stmt 0 view .LVU283
 1149 015e 0E94 0000 		call register_mods
 1150               	.LVL133:
 1151 0162 00C0      		rjmp .L68
 1152               	.LVL134:
 1153               	.L93:
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1154               		.loc 1 196 36 is_stmt 1 view .LVU284
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1155               		.loc 1 198 33 is_stmt 0 view .LVU285
 1156 0164 8B2D      		mov r24,r11
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 1157               		.loc 1 196 39 view .LVU286
 1158 0166 0130      		cpi r16,lo8(1)
 1159 0168 01F4      		brne .L170
 197:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 1160               		.loc 1 197 69 is_stmt 1 view .LVU287
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 1161               		.loc 1 198 33 view .LVU288
 1162 016a 0E94 0000 		call set_oneshot_mods
 1163               	.LVL135:
 1164 016e 00C0      		rjmp .L68
 1165               	.L92:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1166               		.loc 1 210 29 view .LVU289
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 1167               		.loc 1 210 32 is_stmt 0 view .LVU290
 1168 0170 0111      		cpse r16,__zero_reg__
 1169 0172 00C0      		rjmp .L95
 1170               	.L178:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1171               		.loc 1 225 33 is_stmt 1 view .LVU291
 1172 0174 0E94 0000 		call clear_oneshot_mods
 1173               	.LVL136:
 226:./tmk_core/common/action.c ****                             }
 1174               		.loc 1 226 33 view .LVU292
 1175               	.L101:
 266:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1176               		.loc 1 266 71 view .LVU293
 267:./tmk_core/common/action.c ****                             }
 1177               		.loc 1 267 33 view .LVU294
 1178 0178 8B2D      		mov r24,r11
 1179               	.LVL137:
 1180               	.L172:
 267:./tmk_core/common/action.c ****                             }
 1181               		.loc 1 267 33 is_stmt 0 view .LVU295
 1182               	.LBE11:
 350:./tmk_core/common/action.c ****                     }
 1183               		.loc 1 350 25 view .LVU296
 1184 017a 0E94 0000 		call unregister_mods
 1185               	.LVL138:
 1186 017e 00C0      		rjmp .L68
 1187               	.LVL139:
 1188               	.L95:
 1189               	.LBB12:
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1190               		.loc 1 213 36 is_stmt 1 view .LVU297
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 1191               		.loc 1 213 39 is_stmt 0 view .LVU298
 1192 0180 0130      		cpi r16,lo8(1)
 1193 0182 01F4      		brne .+2
 1194 0184 00C0      		rjmp .L68
 1195 0186 00C0      		rjmp .L178
 1196               	.L90:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1197               		.loc 1 232 25 is_stmt 1 view .LVU299
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 1198               		.loc 1 232 28 is_stmt 0 view .LVU300
 1199 0188 1123      		tst r17
 1200 018a 01F0      		breq .L97
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 1201               		.loc 1 233 29 is_stmt 1 view .LVU301
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 1202               		.loc 1 233 32 is_stmt 0 view .LVU302
 1203 018c 0630      		cpi r16,lo8(6)
 1204 018e 00F0      		brlo .+2
 1205 0190 00C0      		rjmp .L68
 1206 0192 00C0      		rjmp .L174
 1207               	.L97:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1208               		.loc 1 237 29 is_stmt 1 view .LVU303
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 1209               		.loc 1 237 32 is_stmt 0 view .LVU304
 1210 0194 0530      		cpi r16,lo8(5)
 1211 0196 00F0      		brlo .+2
 1212 0198 00C0      		rjmp .L68
 1213 019a 00C0      		rjmp .L101
 1214               	.L98:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1215               		.loc 1 262 29 is_stmt 1 view .LVU305
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1216               		.loc 1 262 32 is_stmt 0 view .LVU306
 1217 019c 0023      		tst r16
 1218 019e 01F0      		breq .L101
 1219               	.LVL140:
 1220               	.L171:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 1221               		.loc 1 262 32 view .LVU307
 1222               	.LBE12:
 427:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1223               		.loc 1 427 77 is_stmt 1 view .LVU308
 428:./tmk_core/common/action.c ****                         } else {
 1224               		.loc 1 428 29 view .LVU309
 1225 01a0 8D81      		ldd r24,Y+5
 1226 01a2 0E94 0000 		call unregister_code
 1227               	.LVL141:
 1228 01a6 00C0      		rjmp .L68
 1229               	.L75:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1230               		.loc 1 278 13 view .LVU310
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 1231               		.loc 1 278 33 is_stmt 0 view .LVU311
 1232 01a8 8981      		ldd r24,Y+1
 1233 01aa 8695      		lsr r24
 1234 01ac 8695      		lsr r24
 1235 01ae 8370      		andi r24,lo8(3)
 1236 01b0 01F0      		breq .L102
 1237 01b2 8130      		cpi r24,lo8(1)
 1238 01b4 01F0      		breq .+2
 1239 01b6 00C0      		rjmp .L68
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1240               		.loc 1 287 21 is_stmt 1 view .LVU312
 288:./tmk_core/common/action.c ****                     } else {
 1241               		.loc 1 288 25 is_stmt 0 view .LVU313
 1242 01b8 8D81      		ldd r24,Y+5
 1243 01ba 9981      		ldd r25,Y+1
 1244 01bc 9370      		andi r25,lo8(3)
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1245               		.loc 1 287 24 view .LVU314
 1246 01be 1111      		cpse r17,__zero_reg__
 1247 01c0 00C0      		rjmp .L175
 290:./tmk_core/common/action.c ****                     }
 1248               		.loc 1 290 25 is_stmt 1 view .LVU315
 1249 01c2 90E0      		ldi r25,0
 1250 01c4 80E0      		ldi r24,0
 1251               	.L175:
 1252 01c6 0E94 0000 		call host_consumer_send
 1253               	.LVL142:
 1254 01ca 00C0      		rjmp .L68
 1255               	.L102:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1256               		.loc 1 280 21 view .LVU316
 281:./tmk_core/common/action.c ****                     } else {
 1257               		.loc 1 281 25 is_stmt 0 view .LVU317
 1258 01cc 8D81      		ldd r24,Y+5
 1259 01ce 9981      		ldd r25,Y+1
 1260 01d0 9370      		andi r25,lo8(3)
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1261               		.loc 1 280 24 view .LVU318
 1262 01d2 1111      		cpse r17,__zero_reg__
 1263 01d4 00C0      		rjmp .L166
 283:./tmk_core/common/action.c ****                     }
 1264               		.loc 1 283 25 is_stmt 1 view .LVU319
 1265 01d6 90E0      		ldi r25,0
 1266 01d8 80E0      		ldi r24,0
 1267               	.L166:
 1268 01da 0E94 0000 		call host_system_send
 1269               	.LVL143:
 1270 01de 00C0      		rjmp .L68
 1271               	.L74:
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1272               		.loc 1 299 13 view .LVU320
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1273               		.loc 1 300 17 is_stmt 0 view .LVU321
 1274 01e0 8D81      		ldd r24,Y+5
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1275               		.loc 1 299 16 view .LVU322
 1276 01e2 1123      		tst r17
 1277 01e4 01F0      		breq .L106
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1278               		.loc 1 300 17 is_stmt 1 view .LVU323
 1279 01e6 0E94 0000 		call mousekey_on
 1280               	.LVL144:
 301:./tmk_core/common/action.c ****             } else {
 1281               		.loc 1 301 17 view .LVU324
 1282               	.L167:
 304:./tmk_core/common/action.c ****             }
 1283               		.loc 1 304 17 view .LVU325
 1284 01ea 0E94 0000 		call mousekey_send
 1285               	.LVL145:
 1286 01ee 00C0      		rjmp .L68
 1287               	.L106:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1288               		.loc 1 303 17 view .LVU326
 1289 01f0 0E94 0000 		call mousekey_off
 1290               	.LVL146:
 1291 01f4 00C0      		rjmp .L167
 1292               	.L73:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1293               		.loc 1 310 13 view .LVU327
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1294               		.loc 1 310 39 is_stmt 0 view .LVU328
 1295 01f6 8981      		ldd r24,Y+1
 1296 01f8 8370      		andi r24,lo8(3)
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1297               		.loc 1 310 16 view .LVU329
 1298 01fa 01F0      		breq .+2
 1299 01fc 00C0      		rjmp .L107
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1300               		.loc 1 312 17 is_stmt 1 view .LVU330
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1301               		.loc 1 312 20 is_stmt 0 view .LVU331
 1302 01fe 1111      		cpse r17,__zero_reg__
 1303 0200 00C0      		rjmp .L68
 1304               	.LBB13:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1305               		.loc 1 313 21 is_stmt 1 view .LVU332
 1306               	.LVL147:
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1307               		.loc 1 314 21 view .LVU333
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1308               		.loc 1 313 55 is_stmt 0 view .LVU334
 1309 0202 2D81      		ldd r18,Y+5
 1310 0204 2295      		swap r18
 1311 0206 2695      		lsr r18
 1312 0208 2770      		andi r18,lo8(7)
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1313               		.loc 1 313 29 view .LVU335
 1314 020a 220F      		lsl r18
 1315 020c 220F      		lsl r18
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1316               		.loc 1 314 66 view .LVU336
 1317 020e 8D81      		ldd r24,Y+5
 1318 0210 8F70      		andi r24,lo8(15)
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1319               		.loc 1 314 38 view .LVU337
 1320 0212 90E0      		ldi r25,0
 1321 0214 B0E0      		ldi r27,0
 1322 0216 A0E0      		ldi r26,0
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1323               		.loc 1 314 30 view .LVU338
 1324 0218 4C01      		movw r8,r24
 1325 021a 5D01      		movw r10,r26
 1326 021c 022E      		mov r0,r18
 1327 021e 00C0      		rjmp 2f
 1328               		1:
 1329 0220 880C      		lsl r8
 1330 0222 991C      		rol r9
 1331 0224 AA1C      		rol r10
 1332 0226 BB1C      		rol r11
 1333               		2:
 1334 0228 0A94      		dec r0
 1335 022a 02F4      		brpl 1b
 1336               	.LVL148:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1337               		.loc 1 315 21 is_stmt 1 view .LVU339
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1338               		.loc 1 315 91 is_stmt 0 view .LVU340
 1339 022c FD81      		ldd r31,Y+5
 1340 022e 60E0      		ldi r22,0
 1341 0230 70E0      		ldi r23,0
 1342 0232 CB01      		movw r24,r22
 1343 0234 F4FF      		sbrs r31,4
 1344 0236 00C0      		rjmp .L108
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1345               		.loc 1 315 82 discriminator 1 view .LVU341
 1346 0238 6FE0      		ldi r22,lo8(15)
 1347 023a 70E0      		ldi r23,0
 1348 023c 80E0      		ldi r24,0
 1349 023e 90E0      		ldi r25,0
 1350 0240 00C0      		rjmp 2f
 1351               		1:
 1352 0242 660F      		lsl r22
 1353 0244 771F      		rol r23
 1354 0246 881F      		rol r24
 1355 0248 991F      		rol r25
 1356               		2:
 1357 024a 2A95      		dec r18
 1358 024c 02F4      		brpl 1b
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1359               		.loc 1 315 91 discriminator 1 view .LVU342
 1360 024e 6095      		com r22
 1361 0250 7095      		com r23
 1362 0252 8095      		com r24
 1363 0254 9095      		com r25
 1364               	.L108:
 1365               	.LVL149:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1366               		.loc 1 316 21 is_stmt 1 discriminator 4 view .LVU343
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1367               		.loc 1 316 47 is_stmt 0 discriminator 4 view .LVU344
 1368 0256 2981      		ldd r18,Y+1
 1369 0258 2695      		lsr r18
 1370 025a 2695      		lsr r18
 1371 025c 2370      		andi r18,lo8(3)
 1372 025e 2D83      		std Y+5,r18
 1373               	.LVL150:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1374               		.loc 1 316 47 discriminator 4 view .LVU345
 1375 0260 2230      		cpi r18,lo8(2)
 1376 0262 01F0      		breq .L109
 1377 0264 2330      		cpi r18,lo8(3)
 1378 0266 01F0      		breq .L110
 1379 0268 9B01      		movw r18,r22
 1380 026a AC01      		movw r20,r24
 1381 026c 2829      		or r18,r8
 1382 026e 3929      		or r19,r9
 1383 0270 4A29      		or r20,r10
 1384 0272 5B29      		or r21,r11
 1385 0274 2983      		std Y+1,r18
 1386 0276 3A83      		std Y+2,r19
 1387 0278 4B83      		std Y+3,r20
 1388 027a 5C83      		std Y+4,r21
 1389               	.LVL151:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1390               		.loc 1 316 47 discriminator 4 view .LVU346
 1391 027c 3D81      		ldd r19,Y+5
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1392               		.loc 1 317 42 view .LVU347
 1393 027e 6981      		ldd r22,Y+1
 1394 0280 7A81      		ldd r23,Y+2
 1395 0282 8B81      		ldd r24,Y+3
 1396 0284 9C81      		ldd r25,Y+4
 1397               	.LVL152:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1398               		.loc 1 317 42 view .LVU348
 1399 0286 3130      		cpi r19,lo8(1)
 1400 0288 01F0      		breq .L176
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1401               		.loc 1 317 42 is_stmt 1 view .LVU349
 1402 028a 0E94 0000 		call default_layer_and
 1403               	.LVL153:
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1404               		.loc 1 317 74 view .LVU350
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1405               		.loc 1 317 25 is_stmt 0 view .LVU351
 1406 028e 00C0      		rjmp .L68
 1407               	.LVL154:
 1408               	.L109:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1409               		.loc 1 319 42 is_stmt 1 view .LVU352
 1410 0290 9B01      		movw r18,r22
 1411 0292 AC01      		movw r20,r24
 1412 0294 2829      		or r18,r8
 1413 0296 3929      		or r19,r9
 1414 0298 4A29      		or r20,r10
 1415 029a 5B29      		or r21,r11
 1416 029c 2983      		std Y+1,r18
 1417 029e 3A83      		std Y+2,r19
 1418 02a0 4B83      		std Y+3,r20
 1419 02a2 5C83      		std Y+4,r21
 1420               	.LVL155:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1421               		.loc 1 319 42 is_stmt 0 view .LVU353
 1422 02a4 CA01      		movw r24,r20
 1423 02a6 B901      		movw r22,r18
 1424               	.LVL156:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1425               		.loc 1 319 42 view .LVU354
 1426 02a8 0E94 0000 		call default_layer_xor
 1427               	.LVL157:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1428               		.loc 1 319 74 is_stmt 1 view .LVU355
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1429               		.loc 1 319 25 is_stmt 0 view .LVU356
 1430 02ac 00C0      		rjmp .L68
 1431               	.LVL158:
 1432               	.L110:
 320:./tmk_core/common/action.c ****                     }
 1433               		.loc 1 320 42 is_stmt 1 view .LVU357
 1434 02ae 0E94 0000 		call default_layer_and
 1435               	.LVL159:
 320:./tmk_core/common/action.c ****                     }
 1436               		.loc 1 320 67 view .LVU358
 1437 02b2 C501      		movw r24,r10
 1438 02b4 B401      		movw r22,r8
 1439               	.L176:
 1440 02b6 0E94 0000 		call default_layer_or
 1441               	.LVL160:
 320:./tmk_core/common/action.c ****                     }
 1442               		.loc 1 320 91 view .LVU359
 320:./tmk_core/common/action.c ****                     }
 1443               		.loc 1 320 25 is_stmt 0 view .LVU360
 1444 02ba 00C0      		rjmp .L68
 1445               	.LVL161:
 1446               	.L107:
 320:./tmk_core/common/action.c ****                     }
 1447               		.loc 1 320 25 view .LVU361
 1448               	.LBE13:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1449               		.loc 1 325 17 is_stmt 1 view .LVU362
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1450               		.loc 1 325 21 is_stmt 0 view .LVU363
 1451 02bc 1123      		tst r17
 1452 02be 01F4      		brne .+2
 1453 02c0 00C0      		rjmp .L112
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1454               		.loc 1 325 20 discriminator 1 view .LVU364
 1455 02c2 3981      		ldd r19,Y+1
 1456 02c4 30FF      		sbrs r19,0
 1457 02c6 00C0      		rjmp .L68
 1458               	.L113:
 1459               	.LBB14:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1460               		.loc 1 327 21 is_stmt 1 view .LVU365
 1461               	.LVL162:
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1462               		.loc 1 328 21 view .LVU366
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1463               		.loc 1 327 55 is_stmt 0 view .LVU367
 1464 02c8 2D81      		ldd r18,Y+5
 1465 02ca 2295      		swap r18
 1466 02cc 2695      		lsr r18
 1467 02ce 2770      		andi r18,lo8(7)
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1468               		.loc 1 327 29 view .LVU368
 1469 02d0 220F      		lsl r18
 1470 02d2 220F      		lsl r18
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1471               		.loc 1 328 66 view .LVU369
 1472 02d4 8D81      		ldd r24,Y+5
 1473 02d6 8F70      		andi r24,lo8(15)
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1474               		.loc 1 328 38 view .LVU370
 1475 02d8 90E0      		ldi r25,0
 1476 02da B0E0      		ldi r27,0
 1477 02dc A0E0      		ldi r26,0
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1478               		.loc 1 328 30 view .LVU371
 1479 02de 4C01      		movw r8,r24
 1480 02e0 5D01      		movw r10,r26
 1481 02e2 022E      		mov r0,r18
 1482 02e4 00C0      		rjmp 2f
 1483               		1:
 1484 02e6 880C      		lsl r8
 1485 02e8 991C      		rol r9
 1486 02ea AA1C      		rol r10
 1487 02ec BB1C      		rol r11
 1488               		2:
 1489 02ee 0A94      		dec r0
 1490 02f0 02F4      		brpl 1b
 1491               	.LVL163:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1492               		.loc 1 329 21 is_stmt 1 view .LVU372
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1493               		.loc 1 329 91 is_stmt 0 view .LVU373
 1494 02f2 5D81      		ldd r21,Y+5
 1495 02f4 60E0      		ldi r22,0
 1496 02f6 70E0      		ldi r23,0
 1497 02f8 CB01      		movw r24,r22
 1498 02fa 54FF      		sbrs r21,4
 1499 02fc 00C0      		rjmp .L114
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1500               		.loc 1 329 82 discriminator 1 view .LVU374
 1501 02fe 6FE0      		ldi r22,lo8(15)
 1502 0300 70E0      		ldi r23,0
 1503 0302 80E0      		ldi r24,0
 1504 0304 90E0      		ldi r25,0
 1505 0306 00C0      		rjmp 2f
 1506               		1:
 1507 0308 660F      		lsl r22
 1508 030a 771F      		rol r23
 1509 030c 881F      		rol r24
 1510 030e 991F      		rol r25
 1511               		2:
 1512 0310 2A95      		dec r18
 1513 0312 02F4      		brpl 1b
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1514               		.loc 1 329 91 discriminator 1 view .LVU375
 1515 0314 6095      		com r22
 1516 0316 7095      		com r23
 1517 0318 8095      		com r24
 1518 031a 9095      		com r25
 1519               	.L114:
 1520               	.LVL164:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1521               		.loc 1 330 21 is_stmt 1 discriminator 4 view .LVU376
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1522               		.loc 1 330 47 is_stmt 0 discriminator 4 view .LVU377
 1523 031c E981      		ldd r30,Y+1
 1524 031e E695      		lsr r30
 1525 0320 E695      		lsr r30
 1526 0322 E370      		andi r30,lo8(3)
 1527 0324 ED83      		std Y+5,r30
 1528               	.LVL165:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1529               		.loc 1 330 47 discriminator 4 view .LVU378
 1530 0326 E230      		cpi r30,lo8(2)
 1531 0328 01F0      		breq .L115
 1532 032a E330      		cpi r30,lo8(3)
 1533 032c 01F0      		breq .L116
 1534 032e 9B01      		movw r18,r22
 1535 0330 AC01      		movw r20,r24
 1536 0332 2829      		or r18,r8
 1537 0334 3929      		or r19,r9
 1538 0336 4A29      		or r20,r10
 1539 0338 5B29      		or r21,r11
 1540               	.LVL166:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1541               		.loc 1 330 47 discriminator 4 view .LVU379
 1542 033a 2983      		std Y+1,r18
 1543 033c 3A83      		std Y+2,r19
 1544 033e 4B83      		std Y+3,r20
 1545 0340 5C83      		std Y+4,r21
 1546 0342 E130      		cpi r30,lo8(1)
 1547 0344 01F0      		breq .L117
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1548               		.loc 1 331 42 is_stmt 1 view .LVU380
 1549 0346 CA01      		movw r24,r20
 1550 0348 B901      		movw r22,r18
 1551               	.LVL167:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1552               		.loc 1 331 42 is_stmt 0 view .LVU381
 1553 034a 0E94 0000 		call layer_and
 1554               	.LVL168:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1555               		.loc 1 331 66 is_stmt 1 view .LVU382
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1556               		.loc 1 331 25 is_stmt 0 view .LVU383
 1557 034e 00C0      		rjmp .L68
 1558               	.LVL169:
 1559               	.L112:
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1560               		.loc 1 331 25 view .LVU384
 1561               	.LBE14:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1562               		.loc 1 325 20 discriminator 2 view .LVU385
 1563 0350 4981      		ldd r20,Y+1
 1564 0352 41FF      		sbrs r20,1
 1565 0354 00C0      		rjmp .L68
 1566 0356 00C0      		rjmp .L113
 1567               	.LVL170:
 1568               	.L117:
 1569               	.LBB15:
 332:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1570               		.loc 1 332 42 is_stmt 1 view .LVU386
 1571 0358 6981      		ldd r22,Y+1
 1572 035a 7A81      		ldd r23,Y+2
 1573 035c 8B81      		ldd r24,Y+3
 1574 035e 9C81      		ldd r25,Y+4
 1575               	.LVL171:
 1576               	.L177:
 334:./tmk_core/common/action.c ****                     }
 1577               		.loc 1 334 59 is_stmt 0 view .LVU387
 1578 0360 0E94 0000 		call layer_or
 1579               	.LVL172:
 334:./tmk_core/common/action.c ****                     }
 1580               		.loc 1 334 75 is_stmt 1 view .LVU388
 334:./tmk_core/common/action.c ****                     }
 1581               		.loc 1 334 25 is_stmt 0 view .LVU389
 1582 0364 00C0      		rjmp .L68
 1583               	.LVL173:
 1584               	.L115:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1585               		.loc 1 333 42 is_stmt 1 view .LVU390
 1586 0366 9B01      		movw r18,r22
 1587 0368 AC01      		movw r20,r24
 1588 036a 2829      		or r18,r8
 1589 036c 3929      		or r19,r9
 1590 036e 4A29      		or r20,r10
 1591 0370 5B29      		or r21,r11
 1592               	.LVL174:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1593               		.loc 1 333 42 is_stmt 0 view .LVU391
 1594 0372 2983      		std Y+1,r18
 1595 0374 3A83      		std Y+2,r19
 1596 0376 4B83      		std Y+3,r20
 1597 0378 5C83      		std Y+4,r21
 1598 037a CA01      		movw r24,r20
 1599 037c B901      		movw r22,r18
 1600               	.LVL175:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1601               		.loc 1 333 42 view .LVU392
 1602 037e 0E94 0000 		call layer_xor
 1603               	.LVL176:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1604               		.loc 1 333 66 is_stmt 1 view .LVU393
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1605               		.loc 1 333 25 is_stmt 0 view .LVU394
 1606 0382 00C0      		rjmp .L68
 1607               	.LVL177:
 1608               	.L116:
 334:./tmk_core/common/action.c ****                     }
 1609               		.loc 1 334 42 is_stmt 1 view .LVU395
 1610 0384 0E94 0000 		call layer_and
 1611               	.LVL178:
 334:./tmk_core/common/action.c ****                     }
 1612               		.loc 1 334 59 view .LVU396
 1613 0388 C501      		movw r24,r10
 1614 038a B401      		movw r22,r8
 1615 038c 00C0      		rjmp .L177
 1616               	.LVL179:
 1617               	.L72:
 334:./tmk_core/common/action.c ****                     }
 1618               		.loc 1 334 59 is_stmt 0 view .LVU397
 1619               	.LBE15:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1620               		.loc 1 342 13 is_stmt 1 view .LVU398
 1621 038e 3D81      		ldd r19,Y+5
 1622 0390 323F      		cpi r19,lo8(-14)
 1623 0392 01F4      		brne .+2
 1624 0394 00C0      		rjmp .L118
 1625 0396 00F4      		brsh .L119
 1626 0398 303F      		cpi r19,lo8(-16)
 1627 039a 01F0      		breq .L120
 1628 039c 313F      		cpi r19,lo8(-15)
 1629 039e 01F0      		breq .L121
 1630 03a0 832F      		mov r24,r19
 1631 03a2 805E      		subi r24,lo8(-(32))
 1632 03a4 8031      		cpi r24,lo8(16)
 1633 03a6 00F0      		brlo .L165
 1634               	.L122:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1635               		.loc 1 417 21 view .LVU399
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1636               		.loc 1 417 24 is_stmt 0 view .LVU400
 1637 03a8 1123      		tst r17
 1638 03aa 01F4      		brne .+2
 1639 03ac 00C0      		rjmp .L133
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1640               		.loc 1 418 25 is_stmt 1 view .LVU401
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1641               		.loc 1 418 28 is_stmt 0 view .LVU402
 1642 03ae 0111      		cpse r16,__zero_reg__
 1643 03b0 00C0      		rjmp .L173
 422:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 1644               		.loc 1 422 76 is_stmt 1 view .LVU403
 423:./tmk_core/common/action.c ****                         }
 1645               		.loc 1 423 29 view .LVU404
 1646 03b2 8981      		ldd r24,Y+1
 1647 03b4 8F71      		andi r24,lo8(31)
 1648 03b6 00C0      		rjmp .L169
 1649               	.L119:
 1650 03b8 4D81      		ldd r20,Y+5
 1651 03ba 433F      		cpi r20,lo8(-13)
 1652 03bc 01F0      		breq .L124
 1653 03be 443F      		cpi r20,lo8(-12)
 1654 03c0 01F4      		brne .L122
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1655               		.loc 1 403 21 view .LVU405
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1656               		.loc 1 403 24 is_stmt 0 view .LVU406
 1657 03c2 1123      		tst r17
 1658 03c4 01F4      		brne .+2
 1659 03c6 00C0      		rjmp .L132
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1660               		.loc 1 404 25 is_stmt 1 view .LVU407
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1661               		.loc 1 404 50 is_stmt 0 view .LVU408
 1662 03c8 8981      		ldd r24,Y+1
 1663 03ca 8F71      		andi r24,lo8(31)
 1664 03cc 8983      		std Y+1,r24
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1665               		.loc 1 404 25 view .LVU409
 1666 03ce 0E94 0000 		call layer_on
 1667               	.LVL180:
 405:./tmk_core/common/action.c ****                     } else {
 1668               		.loc 1 405 25 is_stmt 1 view .LVU410
 1669 03d2 63E0      		ldi r22,lo8(3)
 1670 03d4 8981      		ldd r24,Y+1
 1671 03d6 0E94 0000 		call set_oneshot_layer
 1672               	.LVL181:
 1673 03da 00C0      		rjmp .L68
 1674               	.L165:
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1675               		.loc 1 345 21 view .LVU411
 347:./tmk_core/common/action.c ****                     } else {
 1676               		.loc 1 347 25 is_stmt 0 view .LVU412
 1677 03dc 5D81      		ldd r21,Y+5
 1678 03de 5F70      		andi r21,lo8(15)
 1679 03e0 5D83      		std Y+5,r21
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1680               		.loc 1 346 50 view .LVU413
 1681 03e2 8981      		ldd r24,Y+1
 1682 03e4 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1683               		.loc 1 345 24 view .LVU414
 1684 03e6 1123      		tst r17
 1685 03e8 01F0      		breq .L126
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1686               		.loc 1 346 25 is_stmt 1 view .LVU415
 1687 03ea 0E94 0000 		call layer_on
 1688               	.LVL182:
 347:./tmk_core/common/action.c ****                     } else {
 1689               		.loc 1 347 25 view .LVU416
 1690 03ee 8D81      		ldd r24,Y+5
 1691 03f0 00C0      		rjmp .L170
 1692               	.L126:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1693               		.loc 1 349 25 view .LVU417
 1694 03f2 0E94 0000 		call layer_off
 1695               	.LVL183:
 350:./tmk_core/common/action.c ****                     }
 1696               		.loc 1 350 25 view .LVU418
 1697 03f6 8D81      		ldd r24,Y+5
 1698 03f8 00C0      		rjmp .L172
 1699               	.L120:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1700               		.loc 1 355 21 view .LVU419
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1701               		.loc 1 355 24 is_stmt 0 view .LVU420
 1702 03fa 1123      		tst r17
 1703 03fc 01F0      		breq .L127
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1704               		.loc 1 356 25 is_stmt 1 view .LVU421
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1705               		.loc 1 356 28 is_stmt 0 view .LVU422
 1706 03fe 0530      		cpi r16,lo8(5)
 1707 0400 00F0      		brlo .+2
 1708 0402 00C0      		rjmp .L68
 1709               	.L128:
 357:./tmk_core/common/action.c ****                         }
 1710               		.loc 1 357 29 is_stmt 1 view .LVU423
 1711 0404 8981      		ldd r24,Y+1
 1712 0406 8F71      		andi r24,lo8(31)
 1713 0408 0E94 0000 		call layer_invert
 1714               	.LVL184:
 1715 040c 00C0      		rjmp .L68
 1716               	.L127:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1717               		.loc 1 360 25 view .LVU424
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1718               		.loc 1 360 28 is_stmt 0 view .LVU425
 1719 040e 0630      		cpi r16,lo8(6)
 1720 0410 00F0      		brlo .+2
 1721 0412 00C0      		rjmp .L68
 1722 0414 00C0      		rjmp .L128
 1723               	.L121:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1724               		.loc 1 366 21 is_stmt 1 view .LVU426
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1725               		.loc 1 346 50 is_stmt 0 view .LVU427
 1726 0416 8981      		ldd r24,Y+1
 1727 0418 8F71      		andi r24,lo8(31)
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1728               		.loc 1 366 68 view .LVU428
 1729 041a 1123      		tst r17
 1730 041c 01F0      		breq .L168
 1731               	.L169:
 423:./tmk_core/common/action.c ****                         }
 1732               		.loc 1 423 29 view .LVU429
 1733 041e 0E94 0000 		call layer_on
 1734               	.LVL185:
 1735 0422 00C0      		rjmp .L68
 1736               	.L118:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1737               		.loc 1 370 21 is_stmt 1 view .LVU430
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1738               		.loc 1 346 50 is_stmt 0 view .LVU431
 1739 0424 8981      		ldd r24,Y+1
 1740 0426 8F71      		andi r24,lo8(31)
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1741               		.loc 1 370 69 view .LVU432
 1742 0428 1123      		tst r17
 1743 042a 01F0      		breq .L169
 1744               	.L168:
 431:./tmk_core/common/action.c ****                         }
 1745               		.loc 1 431 29 view .LVU433
 1746 042c 0E94 0000 		call layer_off
 1747               	.LVL186:
 1748 0430 00C0      		rjmp .L68
 1749               	.L124:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1750               		.loc 1 374 21 is_stmt 1 view .LVU434
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1751               		.loc 1 374 70 is_stmt 0 view .LVU435
 1752 0432 1123      		tst r17
 1753 0434 01F0      		breq .L131
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1754               		.loc 1 374 37 discriminator 1 view .LVU436
 1755 0436 8981      		ldd r24,Y+1
 1756 0438 8F71      		andi r24,lo8(31)
 1757 043a 0E94 0000 		call layer_move
 1758               	.LVL187:
 1759 043e 00C0      		rjmp .L68
 1760               	.L131:
 375:./tmk_core/common/action.c ****                     break;
 1761               		.loc 1 375 37 view .LVU437
 1762 0440 0E94 0000 		call layer_clear
 1763               	.LVL188:
 1764 0444 00C0      		rjmp .L68
 1765               	.L132:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1766               		.loc 1 407 25 is_stmt 1 view .LVU438
 1767 0446 81E0      		ldi r24,lo8(1)
 1768 0448 0E94 0000 		call clear_oneshot_layer_state
 1769               	.LVL189:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1770               		.loc 1 408 25 view .LVU439
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1771               		.loc 1 408 28 is_stmt 0 view .LVU440
 1772 044c 0230      		cpi r16,lo8(2)
 1773 044e 00F4      		brsh .+2
 1774 0450 00C0      		rjmp .L68
 409:./tmk_core/common/action.c ****                         }
 1775               		.loc 1 409 29 is_stmt 1 view .LVU441
 1776 0452 82E0      		ldi r24,lo8(2)
 1777 0454 0E94 0000 		call clear_oneshot_layer_state
 1778               	.LVL190:
 1779 0458 00C0      		rjmp .L68
 1780               	.L133:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1781               		.loc 1 426 25 view .LVU442
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1782               		.loc 1 426 28 is_stmt 0 view .LVU443
 1783 045a 0111      		cpse r16,__zero_reg__
 1784 045c 00C0      		rjmp .L171
 430:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 1785               		.loc 1 430 79 is_stmt 1 view .LVU444
 431:./tmk_core/common/action.c ****                         }
 1786               		.loc 1 431 29 view .LVU445
 1787 045e 8981      		ldd r24,Y+1
 1788 0460 8F71      		andi r24,lo8(31)
 1789 0462 00C0      		rjmp .L168
 1790               	.L71:
 442:./tmk_core/common/action.c ****             break;
 1791               		.loc 1 442 13 view .LVU446
 442:./tmk_core/common/action.c ****             break;
 1792               		.loc 1 442 83 is_stmt 0 view .LVU447
 1793 0464 4981      		ldd r20,Y+1
 1794 0466 4F70      		andi r20,lo8(15)
 442:./tmk_core/common/action.c ****             break;
 1795               		.loc 1 442 13 view .LVU448
 1796 0468 6D81      		ldd r22,Y+5
 1797 046a C701      		movw r24,r14
 1798 046c 0E94 0000 		call action_get_macro
 1799               	.LVL191:
 1800 0470 0E94 0000 		call action_macro_play
 1801               	.LVL192:
 443:./tmk_core/common/action.c **** #endif
 1802               		.loc 1 443 13 is_stmt 1 view .LVU449
 1803 0474 00C0      		rjmp .L68
 1804               	.L69:
 520:./tmk_core/common/action.c ****             break;
 1805               		.loc 1 520 13 view .LVU450
 520:./tmk_core/common/action.c ****             break;
 1806               		.loc 1 520 64 is_stmt 0 view .LVU451
 1807 0476 4981      		ldd r20,Y+1
 1808 0478 4F70      		andi r20,lo8(15)
 520:./tmk_core/common/action.c ****             break;
 1809               		.loc 1 520 13 view .LVU452
 1810 047a 6D81      		ldd r22,Y+5
 1811 047c C701      		movw r24,r14
 1812 047e 0E94 0000 		call action_function
 1813               	.LVL193:
 521:./tmk_core/common/action.c **** #endif
 1814               		.loc 1 521 13 is_stmt 1 view .LVU453
 1815 0482 00C0      		rjmp .L68
 1816               	.LVL194:
 1817               	.L65:
 1818               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1819               		.loc 1 538 1 is_stmt 0 view .LVU454
 1820 0484 0F90      		pop __tmp_reg__
 1821 0486 0F90      		pop __tmp_reg__
 1822 0488 0F90      		pop __tmp_reg__
 1823 048a 0F90      		pop __tmp_reg__
 1824 048c 0F90      		pop __tmp_reg__
 1825 048e DF91      		pop r29
 1826 0490 CF91      		pop r28
 1827 0492 1F91      		pop r17
 1828               	.LVL195:
 538:./tmk_core/common/action.c **** 
 1829               		.loc 1 538 1 view .LVU455
 1830 0494 0F91      		pop r16
 1831 0496 FF90      		pop r15
 1832 0498 EF90      		pop r14
 1833               	.LVL196:
 538:./tmk_core/common/action.c **** 
 1834               		.loc 1 538 1 view .LVU456
 1835 049a DF90      		pop r13
 1836               	.LVL197:
 538:./tmk_core/common/action.c **** 
 1837               		.loc 1 538 1 view .LVU457
 1838 049c BF90      		pop r11
 1839 049e AF90      		pop r10
 1840 04a0 9F90      		pop r9
 1841 04a2 8F90      		pop r8
 1842 04a4 0895      		ret
 1843               		.cfi_endproc
 1844               	.LFE107:
 1846               		.section	.text.process_record,"ax",@progbits
 1847               	.global	process_record
 1849               	process_record:
 1850               	.LVL198:
 1851               	.LFB106:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1852               		.loc 1 104 1 is_stmt 1 view -0
 1853               		.cfi_startproc
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1854               		.loc 1 104 1 is_stmt 0 view .LVU459
 1855 0000 0F93      		push r16
 1856               	.LCFI17:
 1857               		.cfi_def_cfa_offset 3
 1858               		.cfi_offset 16, -2
 1859 0002 1F93      		push r17
 1860               	.LCFI18:
 1861               		.cfi_def_cfa_offset 4
 1862               		.cfi_offset 17, -3
 1863 0004 CF93      		push r28
 1864               	.LCFI19:
 1865               		.cfi_def_cfa_offset 5
 1866               		.cfi_offset 28, -4
 1867 0006 DF93      		push r29
 1868               	.LCFI20:
 1869               		.cfi_def_cfa_offset 6
 1870               		.cfi_offset 29, -5
 1871               	/* prologue: function */
 1872               	/* frame size = 0 */
 1873               	/* stack size = 4 */
 1874               	.L__stack_usage = 4
 1875 0008 EC01      		movw r28,r24
 105:./tmk_core/common/action.c **** 
 1876               		.loc 1 105 5 is_stmt 1 view .LVU460
 1877               	.LVL199:
 1878               	.LBB16:
 1879               	.LBI16:
 1880               		.loc 2 49 20 view .LVU461
 1881               	.LBB17:
 1882               		.loc 2 49 51 view .LVU462
 1883               		.loc 2 49 74 is_stmt 0 view .LVU463
 1884 000a 8B81      		ldd r24,Y+3
 1885 000c 9C81      		ldd r25,Y+4
 1886               	.LVL200:
 1887               		.loc 2 49 74 view .LVU464
 1888 000e 892B      		or r24,r25
 1889 0010 01F0      		breq .L183
 1890 0012 8981      		ldd r24,Y+1
 1891               	.LVL201:
 1892               		.loc 2 49 74 view .LVU465
 1893 0014 9881      		ld r25,Y
 1894 0016 8923      		and r24,r25
 1895 0018 8F3F      		cpi r24,lo8(-1)
 1896 001a 01F4      		brne .L190
 1897               	.LVL202:
 1898               	.L183:
 1899               	/* epilogue start */
 1900               		.loc 2 49 74 view .LVU466
 1901               	.LBE17:
 1902               	.LBE16:
 119:./tmk_core/common/action.c **** 
 1903               		.loc 1 119 1 view .LVU467
 1904 001c DF91      		pop r29
 1905 001e CF91      		pop r28
 1906               	.LVL203:
 119:./tmk_core/common/action.c **** 
 1907               		.loc 1 119 1 view .LVU468
 1908 0020 1F91      		pop r17
 1909 0022 0F91      		pop r16
 1910 0024 0895      		ret
 1911               	.LVL204:
 1912               	.L190:
 107:./tmk_core/common/action.c ****         return;
 1913               		.loc 1 107 5 is_stmt 1 view .LVU469
 107:./tmk_core/common/action.c ****         return;
 1914               		.loc 1 107 9 is_stmt 0 view .LVU470
 1915 0026 CE01      		movw r24,r28
 1916 0028 0E94 0000 		call process_record_quantum
 1917               	.LVL205:
 107:./tmk_core/common/action.c ****         return;
 1918               		.loc 1 107 7 view .LVU471
 1919 002c 8823      		tst r24
 1920 002e 01F0      		breq .L183
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1921               		.loc 1 110 5 is_stmt 1 view .LVU472
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1922               		.loc 1 110 23 is_stmt 0 view .LVU473
 1923 0030 6881      		ld r22,Y
 1924 0032 7981      		ldd r23,Y+1
 1925 0034 8A81      		ldd r24,Y+2
 1926 0036 0E94 0000 		call store_or_get_action
 1927               	.LVL206:
 1928 003a 8C01      		movw r16,r24
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1929               		.loc 1 111 23 is_stmt 1 view .LVU474
 111:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 1930               		.loc 1 111 25 view .LVU475
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1931               		.loc 1 113 29 view .LVU476
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1932               		.loc 1 113 31 view .LVU477
 1933 003c 0E94 0000 		call layer_debug
 1934               	.LVL207:
 114:./tmk_core/common/action.c **** #endif
 1935               		.loc 1 114 37 view .LVU478
 114:./tmk_core/common/action.c **** #endif
 1936               		.loc 1 114 39 view .LVU479
 1937 0040 0E94 0000 		call default_layer_debug
 1938               	.LVL208:
 116:./tmk_core/common/action.c **** 
 1939               		.loc 1 116 15 view .LVU480
 118:./tmk_core/common/action.c **** }
 1940               		.loc 1 118 5 view .LVU481
 1941 0044 B801      		movw r22,r16
 1942 0046 CE01      		movw r24,r28
 1943               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1944               		.loc 1 119 1 is_stmt 0 view .LVU482
 1945 0048 DF91      		pop r29
 1946 004a CF91      		pop r28
 1947               	.LVL209:
 119:./tmk_core/common/action.c **** 
 1948               		.loc 1 119 1 view .LVU483
 1949 004c 1F91      		pop r17
 1950 004e 0F91      		pop r16
 118:./tmk_core/common/action.c **** }
 1951               		.loc 1 118 5 view .LVU484
 1952 0050 0C94 0000 		jmp process_action
 1953               	.LVL210:
 118:./tmk_core/common/action.c **** }
 1954               		.loc 1 118 5 view .LVU485
 1955               		.cfi_endproc
 1956               	.LFE106:
 1958               		.section	.text.process_record_nocache,"ax",@progbits
 1959               	.global	process_record_nocache
 1961               	process_record_nocache:
 1962               	.LVL211:
 1963               	.LFB104:
  86:./tmk_core/common/action.c ****     disable_action_cache = true;
 1964               		.loc 1 86 1 is_stmt 1 view -0
 1965               		.cfi_startproc
 1966               	/* prologue: function */
 1967               	/* frame size = 0 */
 1968               	/* stack size = 0 */
 1969               	.L__stack_usage = 0
  87:./tmk_core/common/action.c ****     process_record(record);
 1970               		.loc 1 87 5 view .LVU487
  87:./tmk_core/common/action.c ****     process_record(record);
 1971               		.loc 1 87 26 is_stmt 0 view .LVU488
 1972 0000 21E0      		ldi r18,lo8(1)
 1973 0002 2093 0000 		sts disable_action_cache,r18
  88:./tmk_core/common/action.c ****     disable_action_cache = false;
 1974               		.loc 1 88 5 is_stmt 1 view .LVU489
 1975 0006 0E94 0000 		call process_record
 1976               	.LVL212:
  89:./tmk_core/common/action.c **** }
 1977               		.loc 1 89 5 view .LVU490
  89:./tmk_core/common/action.c **** }
 1978               		.loc 1 89 26 is_stmt 0 view .LVU491
 1979 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1980               	/* epilogue start */
  90:./tmk_core/common/action.c **** #else
 1981               		.loc 1 90 1 view .LVU492
 1982 000e 0895      		ret
 1983               		.cfi_endproc
 1984               	.LFE104:
 1986               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1987               	.global	clear_keyboard_but_mods
 1989               	clear_keyboard_but_mods:
 1990               	.LFB113:
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1991               		.loc 1 699 1 is_stmt 1 view -0
 1992               		.cfi_startproc
 1993               	/* prologue: function */
 1994               	/* frame size = 0 */
 1995               	/* stack size = 0 */
 1996               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1997               		.loc 1 700 5 view .LVU494
 1998 0000 0E94 0000 		call clear_weak_mods
 1999               	.LVL213:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 2000               		.loc 1 701 5 view .LVU495
 2001 0004 0E94 0000 		call clear_macro_mods
 2002               	.LVL214:
 702:./tmk_core/common/action.c ****     clear_keys();
 2003               		.loc 1 702 5 view .LVU496
 2004 0008 0E94 0000 		call clear_keys
 2005               	.LVL215:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 2006               		.loc 1 703 5 view .LVU497
 2007 000c 0E94 0000 		call send_keyboard_report
 2008               	.LVL216:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 2009               		.loc 1 705 5 view .LVU498
 2010 0010 0E94 0000 		call mousekey_clear
 2011               	.LVL217:
 706:./tmk_core/common/action.c ****     mousekey_send();
 2012               		.loc 1 706 5 view .LVU499
 2013 0014 0E94 0000 		call mousekey_send
 2014               	.LVL218:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 2015               		.loc 1 709 5 view .LVU500
 2016 0018 90E0      		ldi r25,0
 2017 001a 80E0      		ldi r24,0
 2018 001c 0E94 0000 		call host_system_send
 2019               	.LVL219:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 2020               		.loc 1 710 5 view .LVU501
 2021 0020 90E0      		ldi r25,0
 2022 0022 80E0      		ldi r24,0
 2023 0024 0C94 0000 		jmp host_consumer_send
 2024               	.LVL220:
 2025               		.cfi_endproc
 2026               	.LFE113:
 2028               		.section	.text.clear_keyboard,"ax",@progbits
 2029               	.global	clear_keyboard
 2031               	clear_keyboard:
 2032               	.LFB112:
 693:./tmk_core/common/action.c ****     clear_mods();
 2033               		.loc 1 693 1 view -0
 2034               		.cfi_startproc
 2035               	/* prologue: function */
 2036               	/* frame size = 0 */
 2037               	/* stack size = 0 */
 2038               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 2039               		.loc 1 694 5 view .LVU503
 2040 0000 0E94 0000 		call clear_mods
 2041               	.LVL221:
 695:./tmk_core/common/action.c **** }
 2042               		.loc 1 695 5 view .LVU504
 2043 0004 0C94 0000 		jmp clear_keyboard_but_mods
 2044               	.LVL222:
 2045               		.cfi_endproc
 2046               	.LFE112:
 2048               		.section	.text.is_tap_key,"ax",@progbits
 2049               	.global	is_tap_key
 2051               	is_tap_key:
 2052               	.LVL223:
 2053               	.LFB114:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 2054               		.loc 1 715 1 view -0
 2055               		.cfi_startproc
 2056               	/* prologue: function */
 2057               	/* frame size = 0 */
 2058               	/* stack size = 0 */
 2059               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 2060               		.loc 1 716 5 view .LVU506
 2061               		.loc 1 716 23 is_stmt 0 view .LVU507
 2062 0000 0E94 0000 		call layer_switch_get_action
 2063               	.LVL224:
 2064               		.loc 1 716 23 view .LVU508
 2065 0004 282F      		mov r18,r24
 2066               	.LVL225:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 2067               		.loc 1 718 5 is_stmt 1 view .LVU509
 2068               		.loc 1 718 24 is_stmt 0 view .LVU510
 2069 0006 892F      		mov r24,r25
 2070 0008 8295      		swap r24
 2071 000a 8F70      		andi r24,lo8(15)
 2072               		.loc 1 718 5 view .LVU511
 2073 000c 903C      		cpi r25,lo8(-64)
 2074 000e 00F4      		brsh .L195
 2075 0010 8A30      		cpi r24,lo8(10)
 2076 0012 00F4      		brsh .L196
 2077 0014 8430      		cpi r24,lo8(4)
 2078 0016 00F4      		brsh .L197
 2079 0018 8230      		cpi r24,lo8(2)
 2080 001a 00F4      		brsh .L196
 2081               	.L222:
 2082 001c 80E0      		ldi r24,0
 2083 001e 0895      		ret
 2084               	.L197:
 2085 0020 8630      		cpi r24,lo8(6)
 2086 0022 01F4      		brne .L222
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 2087               		.loc 1 731 13 is_stmt 1 view .LVU512
 727:./tmk_core/common/action.c ****             }
 2088               		.loc 1 727 28 is_stmt 0 view .LVU513
 2089 0024 81E0      		ldi r24,lo8(1)
 2090 0026 203E      		cpi r18,lo8(-32)
 2091 0028 00F0      		brlo .L198
 2092 002a 213F      		cpi r18,lo8(-15)
 2093 002c 01F4      		brne .L222
 2094 002e 00C0      		rjmp .L198
 2095               	.L195:
 718:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 2096               		.loc 1 718 5 view .LVU514
 2097 0030 8C30      		cpi r24,lo8(12)
 2098 0032 01F0      		breq .L200
 2099 0034 8F30      		cpi r24,lo8(15)
 2100 0036 01F4      		brne .L222
 2101               	.L200:
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 2102               		.loc 1 739 13 is_stmt 1 view .LVU515
 2103               		.loc 1 739 16 is_stmt 0 view .LVU516
 2104 0038 93FB      		bst r25,3
 2105 003a 8827      		clr r24
 2106 003c 80F9      		bld r24,0
 2107 003e 0895      		ret
 2108               	.L196:
 723:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 2109               		.loc 1 723 13 is_stmt 1 view .LVU517
 2110 0040 81E0      		ldi r24,lo8(1)
 2111 0042 203F      		cpi r18,lo8(-16)
 2112 0044 01F0      		breq .L205
 2113 0046 00F4      		brsh .L201
 2114 0048 203E      		cpi r18,lo8(-32)
 2115 004a 00F4      		brsh .L222
 2116               	.L198:
 2117               	.LVL226:
 2118               	/* epilogue start */
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 743:./tmk_core/common/action.c **** }
 2119               		.loc 1 743 1 is_stmt 0 view .LVU518
 2120 004c 0895      		ret
 2121               	.LVL227:
 2122               	.L201:
 2123               		.loc 1 743 1 view .LVU519
 2124 004e 243F      		cpi r18,lo8(-12)
 2125 0050 01F4      		brne .L222
 2126 0052 00C0      		rjmp .L198
 2127               	.L205:
 2128 0054 0895      		ret
 2129               		.cfi_endproc
 2130               	.LFE114:
 2132               		.section	.text.debug_event,"ax",@progbits
 2133               	.global	debug_event
 2135               	debug_event:
 2136               	.LFB115:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 2137               		.loc 1 750 1 is_stmt 1 view -0
 2138               		.cfi_startproc
 2139 0000 CF93      		push r28
 2140               	.LCFI21:
 2141               		.cfi_def_cfa_offset 3
 2142               		.cfi_offset 28, -2
 2143 0002 DF93      		push r29
 2144               	.LCFI22:
 2145               		.cfi_def_cfa_offset 4
 2146               		.cfi_offset 29, -3
 2147 0004 00D0      		rcall .
 2148 0006 00D0      		rcall .
 2149 0008 0F92      		push __tmp_reg__
 2150               	.LCFI23:
 2151               		.cfi_def_cfa_offset 9
 2152 000a CDB7      		in r28,__SP_L__
 2153 000c DEB7      		in r29,__SP_H__
 2154               	.LCFI24:
 2155               		.cfi_def_cfa_register 28
 2156               	/* prologue: function */
 2157               	/* frame size = 5 */
 2158               	/* stack size = 7 */
 2159               	.L__stack_usage = 7
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 2160               		.loc 1 751 103 view .LVU521
 2161               	/* epilogue start */
 752:./tmk_core/common/action.c **** }
 2162               		.loc 1 752 1 is_stmt 0 view .LVU522
 2163 000e 0F90      		pop __tmp_reg__
 2164 0010 0F90      		pop __tmp_reg__
 2165 0012 0F90      		pop __tmp_reg__
 2166 0014 0F90      		pop __tmp_reg__
 2167 0016 0F90      		pop __tmp_reg__
 2168 0018 DF91      		pop r29
 2169 001a CF91      		pop r28
 2170 001c 0895      		ret
 2171               		.cfi_endproc
 2172               	.LFE115:
 2174               		.section	.text.debug_record,"ax",@progbits
 2175               	.global	debug_record
 2177               	debug_record:
 2178               	.LFB116:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 2179               		.loc 1 755 1 is_stmt 1 view -0
 2180               		.cfi_startproc
 2181 0000 CF93      		push r28
 2182               	.LCFI25:
 2183               		.cfi_def_cfa_offset 3
 2184               		.cfi_offset 28, -2
 2185 0002 DF93      		push r29
 2186               	.LCFI26:
 2187               		.cfi_def_cfa_offset 4
 2188               		.cfi_offset 29, -3
 2189 0004 00D0      		rcall .
 2190 0006 00D0      		rcall .
 2191 0008 00D0      		rcall .
 2192               	.LCFI27:
 2193               		.cfi_def_cfa_offset 10
 2194 000a CDB7      		in r28,__SP_L__
 2195 000c DEB7      		in r29,__SP_H__
 2196               	.LCFI28:
 2197               		.cfi_def_cfa_register 28
 2198               	/* prologue: function */
 2199               	/* frame size = 6 */
 2200               	/* stack size = 8 */
 2201               	.L__stack_usage = 8
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 2202               		.loc 1 756 5 view .LVU524
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 2203               		.loc 1 758 77 view .LVU525
 2204               	/* epilogue start */
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 2205               		.loc 1 760 1 is_stmt 0 view .LVU526
 2206 000e 2696      		adiw r28,6
 2207 0010 0FB6      		in __tmp_reg__,__SREG__
 2208 0012 F894      		cli
 2209 0014 DEBF      		out __SP_H__,r29
 2210 0016 0FBE      		out __SREG__,__tmp_reg__
 2211 0018 CDBF      		out __SP_L__,r28
 2212 001a DF91      		pop r29
 2213 001c CF91      		pop r28
 2214 001e 0895      		ret
 2215               		.cfi_endproc
 2216               	.LFE116:
 2218               		.section	.text.debug_action,"ax",@progbits
 2219               	.global	debug_action
 2221               	debug_action:
 2222               	.LVL228:
 2223               	.LFB117:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 2224               		.loc 1 763 1 is_stmt 1 view -0
 2225               		.cfi_startproc
 2226               	/* prologue: function */
 2227               	/* frame size = 0 */
 2228               	/* stack size = 0 */
 2229               	.L__stack_usage = 0
 764:./tmk_core/common/action.c ****     switch (action.kind.id) {
 2230               		.loc 1 764 5 view .LVU528
 765:./tmk_core/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 766:./tmk_core/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 767:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 768:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 769:./tmk_core/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 770:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 771:./tmk_core/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 772:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 773:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 774:./tmk_core/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 775:./tmk_core/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 776:./tmk_core/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 777:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:        dprint("ACT_SWAP_HANDS");        break;
 778:./tmk_core/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 779:./tmk_core/common/action.c ****     }
 780:./tmk_core/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 2231               		.loc 1 780 71 view .LVU529
 2232               	/* epilogue start */
 781:./tmk_core/common/action.c **** }
 2233               		.loc 1 781 1 is_stmt 0 view .LVU530
 2234 0000 0895      		ret
 2235               		.cfi_endproc
 2236               	.LFE117:
 2238               	.global	disable_action_cache
 2239               		.section	.bss.disable_action_cache,"aw",@nobits
 2242               	disable_action_cache:
 2243 0000 00        		.zero	1
 2244               		.text
 2245               	.Letext0:
 2246               		.file 3 "/usr/avr/include/stdint.h"
 2247               		.file 4 "./tmk_core/common/keycode.h"
 2248               		.file 5 "./tmk_core/common/action_code.h"
 2249               		.file 6 "./tmk_core/common/action.h"
 2250               		.file 7 "./tmk_core/common/action_layer.h"
 2251               		.file 8 "./tmk_core/common/action_util.h"
 2252               		.file 9 "./tmk_core/common/mousekey.h"
 2253               		.file 10 "./tmk_core/common/host.h"
 2254               		.file 11 "./tmk_core/common/action_macro.h"
 2255               		.file 12 "./tmk_core/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccdsEhjh.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccdsEhjh.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccdsEhjh.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccdsEhjh.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccdsEhjh.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccdsEhjh.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccdsEhjh.s:14     .text.action_exec:0000000000000000 action_exec
     /tmp/ccdsEhjh.s:92     .text.process_record_quantum:0000000000000000 process_record_quantum
     /tmp/ccdsEhjh.s:114    .text.register_code:0000000000000000 register_code
     /tmp/ccdsEhjh.s:555    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccdsEhjh.s:713    .text.register_mods:0000000000000000 register_mods
     /tmp/ccdsEhjh.s:742    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccdsEhjh.s:771    .text.process_action:0000000000000000 process_action
     /tmp/ccdsEhjh.s:1849   .text.process_record:0000000000000000 process_record
     /tmp/ccdsEhjh.s:1961   .text.process_record_nocache:0000000000000000 process_record_nocache
     /tmp/ccdsEhjh.s:2242   .bss.disable_action_cache:0000000000000000 disable_action_cache
     /tmp/ccdsEhjh.s:1989   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccdsEhjh.s:2031   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccdsEhjh.s:2051   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccdsEhjh.s:2135   .text.debug_event:0000000000000000 debug_event
     /tmp/ccdsEhjh.s:2177   .text.debug_record:0000000000000000 debug_record
     /tmp/ccdsEhjh.s:2221   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
get_oneshot_layer_state
get_oneshot_layer
layer_on
layer_off
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_send
mousekey_off
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_or
layer_xor
set_oneshot_layer
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_clear_bss
